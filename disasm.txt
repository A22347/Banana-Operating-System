
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 22 02 c0       	mov    eax,0xc00222e8
c0000025:	3d e8 22 02 c0       	cmp    eax,0xc00222e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 22 02 c0       	push   0xc00222e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 22 02 c0       	mov    eax,0xc00222e8
c0000051:	2d e8 22 02 c0       	sub    eax,0xc00222e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 22 02 c0       	push   0xc00222e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c f2 01 c0       	mov    ebx,0xc001f27c
c0000097:	81 eb 78 f2 01 c0    	sub    ebx,0xc001f278
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 f2 01 c0       	mov    esi,0xc001f278
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 22 02 c0       	push   0xc00222e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 e8 22 02 c0       	push   0xc00222e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 af 45 01 00       	call   c001485c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 59 a4 00 00       	call   c000a71e <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 8d 45 01 00       	call   c001485c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 9a 4a 01 00       	call   c0014d88 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 59 51 01 00       	call   c0015450 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 df 04 01 00       	jmp    c001085e <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d80],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d80],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d80],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0d80],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d80],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000df7:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001176:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011b2:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011b7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011c5:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001216:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001231:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00012eb:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00012f1:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012f8:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013be:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013c4:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013cb:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 84 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c7c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 6a 6b 01 00       	jmp    c001890c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 94 6b 01 00       	jmp    c001894c <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 b5 6b 01 00       	jmp    c001898c <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 e0 f4 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0b20]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 e0 f4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b20]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba e8 15 02 c0       	mov    edx,0xc00215e8
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 9c f3 01 c0       	mov    edx,0xc001f39c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 a2 f3 01 c0       	mov    eax,0xc001f3a2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 60 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0ba0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 ab f3 01 c0       	mov    eax,0xc001f3ab
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 e0 f4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b20]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 30 f4 01 c0       	mov    eax,0xc001f430
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 20 f4 01 c0       	mov    ebx,0xc001f420
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 00 f4 01 c0       	mov    eax,0xc001f400
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 10 f4 01 c0       	mov    eax,0xc001f410
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba b2 f3 01 c0       	mov    edx,0xc001f3b2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba be f3 01 c0       	mov    edx,0xc001f3be
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba d2 f3 01 c0       	mov    edx,0xc001f3d2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 00 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f800
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 00 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f800
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 00 f6 01 c0       	mov    eax,0xc001f600
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 00 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0b00]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 00 f9 01 c0       	push   0xc001f900
c000611b:	e8 88 31 01 00       	call   c00192a8 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 0e f9 01 c0       	push   0xc001f90e
c0006153:	e8 50 31 01 00       	call   c00192a8 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 b9 30 01 00       	call   c001924c <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 1d f9 01 c0       	push   0xc001f91d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000655e:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006564:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006580:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065f9:	8b 8d 4c 45 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdbab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066f1:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000672f:	05 40 45 02 c0       	add    eax,0xc0024540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067ee:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 20 f9 01 c0       	push   0xc001f920
c0006812:	e8 91 2a 01 00       	call   c00192a8 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 a5 2a 01 00       	call   c00192c4 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 25 f9 01 c0 	mov    DWORD PTR [esp],0xc001f925
c000682c:	e8 77 2a 01 00       	call   c00192a8 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006838:	e8 87 2a 01 00       	call   c00192c4 <iso_kprintfd>
c000683d:	c7 04 24 2b f9 01 c0 	mov    DWORD PTR [esp],0xc001f92b
c0006844:	e8 5f 2a 01 00       	call   c00192a8 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006850:	e8 6f 2a 01 00       	call   c00192c4 <iso_kprintfd>
c0006855:	c7 04 24 31 f9 01 c0 	mov    DWORD PTR [esp],0xc001f931
c000685c:	e8 47 2a 01 00       	call   c00192a8 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006868:	e8 57 2a 01 00       	call   c00192c4 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068ce:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000692a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 1d f9 01 c0       	push   0xc001f91d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a06:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a0c:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 3a f9 01 c0       	push   0xc001f93a
c0006a31:	e8 72 28 01 00       	call   c00192a8 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a66:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 45 f9 01 c0       	push   0xc001f945
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 4c f9 01 c0       	push   0xc001f94c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b27:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 53 f9 01 c0       	push   0xc001f953
c0006b48:	e8 5b 27 01 00       	call   c00192a8 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 5e f9 01 c0       	push   0xc001f95e
c0006b63:	e8 40 27 01 00       	call   c00192a8 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 45 02 c0       	push   0xc0024540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c4d:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 6c 52 00 00       	call   c000bee8 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 6f f9 01 c0       	push   0xc001f96f
c0006cad:	e8 44 95 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006ccc:	50                   	push   eax
c0006ccd:	68 88 f9 01 c0       	push   0xc001f988
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 da de 00 00       	call   c0014bb4 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 e9 e0 00 00       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 c0 58 01 c0       	push   0xc00158c0
c0006cfe:	52                   	push   edx
c0006cff:	e8 d4 e0 00 00       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0c:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d13:	e8 14 9d 00 00       	call   c0010a2c <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 84 fa 01 c0       	push   0xc001fa84
c0006d20:	e8 d1 94 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0006d25:	e8 b9 ef 00 00       	call   c0015ce3 <Vm::initialise8086()>
c0006d2a:	e8 09 40 00 00       	call   c000ad38 <Fs::initVFS()>
c0006d2f:	c7 04 24 95 f9 01 c0 	mov    DWORD PTR [esp],0xc001f995
c0006d36:	e8 bb 94 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 84 fa 01 c0       	push   0xc001fa84
c0006d5a:	e8 97 94 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0006d5f:	e8 72 99 00 00       	call   c00106d6 <Krnl::loadSystemEnv()>
c0006d64:	e8 cf 9b 00 00       	call   c0010938 <Krnl::setupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 af f9 01 c0       	push   0xc001f9af
c0006d73:	68 b8 f9 01 c0       	push   0xc001f9b8
c0006d78:	e8 7f c1 00 00       	call   c0012efc <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 c3 4a 00 00       	call   c000b848 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 a8 fa 01 c0 	mov    DWORD PTR [esp],0xc001faa8
c0006d8c:	e8 65 94 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 43 51 00 00       	call   c000bee6 <Device::loadDriversForAll()>
c0006da3:	c7 04 24 c0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c0
c0006daa:	e8 47 94 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 d1 f9 01 c0       	push   0xc001f9d1
c0006dbe:	e8 07 d8 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 2f da 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 63 e4 00 00       	call   c001523c <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 ed f9 01 c0       	push   0xc001f9ed
c0006ded:	50                   	push   eax
c0006dee:	e8 6f 51 00 00       	call   c000bf62 <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba f4 fa 01 c0       	mov    edx,0xc001faf4
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 89 73 01 00       	call   c001e276 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 e1 87 00 00       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 ba 87 00 00       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 98 87 00 00       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 76 87 00 00       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 83 86 00 00       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 5e 86 00 00       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 e8 71 01 00       	call   c001e230 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 36 6e 01 00       	call   c001dea0 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 74 86 00 00       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 f6 f9 01 c0       	push   0xc001f9f6
c00070da:	e8 94 97 00 00       	call   c0010873 <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 fc f9 01 c0       	push   0xc001f9fc
c0007116:	e8 58 97 00 00       	call   c0010873 <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 11 80 00 00       	jmp    c000f174 <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071b6:	68 02 fa 01 c0       	push   0xc001fa02
c00071bb:	0f 94 05 20 1e 02 c0 	sete   BYTE PTR ds:0xc0021e20
c00071c2:	e8 2f 90 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 0b 7b 00 00       	call   c000ece8 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 de 4b 00 00       	call   c000bdca <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 1a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa1a
c0007205:	e8 ec 8f 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 a4 85 00 00       	call   c000f7c4 <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 9b 4b 00 00       	call   c000bdca <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 c8 fa 01 c0       	push   0xc001fac8
c000724c:	e8 a5 8f 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0007251:	e8 62 fc 00 00       	call   c0016eb8 <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 34 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa34
c000725d:	e8 94 8f 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 96 dc 00 00       	call   c0014f04 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 4f fa 01 c0       	push   0xc001fa4f
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 d1 36 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 60 fa 01 c0       	push   0xc001fa60
c00072e5:	e8 89 95 00 00       	call   c0010873 <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 6d fa 01 c0       	push   0xc001fa6d
c00072fa:	e8 74 95 00 00       	call   c0010873 <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 77 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa77
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 5a 95 00 00       	jmp    c0010873 <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073a9:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 79 f6 00 00       	call   c0016b84 <HalSystemIdle()>
c000750b:	e8 22 73 01 00       	call   c001e832 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000760d:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007612:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 30 df 01 c0       	push   0xc001df30
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 40 df 01 c0       	push   0xc001df40
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 4a df 01 c0       	push   0xc001df4a
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 54 df 01 c0       	push   0xc001df54
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 5e df 01 c0       	push   0xc001df5e
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 68 df 01 c0       	push   0xc001df68
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 72 df 01 c0       	push   0xc001df72
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 7c df 01 c0       	push   0xc001df7c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 86 df 01 c0       	push   0xc001df86
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 8e df 01 c0       	push   0xc001df8e
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 98 df 01 c0       	push   0xc001df98
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 a0 df 01 c0       	push   0xc001dfa0
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 a8 df 01 c0       	push   0xc001dfa8
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 b0 df 01 c0       	push   0xc001dfb0
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 ca df 01 c0       	push   0xc001dfca
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 d2 df 01 c0       	push   0xc001dfd2
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 dc df 01 c0       	push   0xc001dfdc
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 e6 df 01 c0       	push   0xc001dfe6
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 f0 df 01 c0       	push   0xc001dff0
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 8a e0 01 c0       	push   0xc001e08a
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 91 e0 01 c0       	push   0xc001e091
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 7c e0 01 c0       	push   0xc001e07c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 83 e0 01 c0       	push   0xc001e083
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 fa df 01 c0       	push   0xc001dffa
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 04 e0 01 c0       	push   0xc001e004
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 0e e0 01 c0       	push   0xc001e00e
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 18 e0 01 c0       	push   0xc001e018
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 22 e0 01 c0       	push   0xc001e022
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 2c e0 01 c0       	push   0xc001e02c
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 36 e0 01 c0       	push   0xc001e036
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 40 e0 01 c0       	push   0xc001e040
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 4a e0 01 c0       	push   0xc001e04a
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 54 e0 01 c0       	push   0xc001e054
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 5e e0 01 c0       	push   0xc001e05e
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 68 e0 01 c0       	push   0xc001e068
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 72 e0 01 c0       	push   0xc001e072
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 cc e1 01 c0       	push   0xc001e1cc
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 d6 e1 01 c0       	push   0xc001e1d6
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 e0 e1 01 c0       	push   0xc001e1e0
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 ea e1 01 c0       	push   0xc001e1ea
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 f4 e1 01 c0       	push   0xc001e1f4
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 fe e1 01 c0       	push   0xc001e1fe
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 08 e2 01 c0       	push   0xc001e208
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 12 e2 01 c0       	push   0xc001e212
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007904:	e8 01 25 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 2d 16 00 00       	call   c0008f54 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 86 df 01 c0       	push   0xc001df86
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 62 16 00 00       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 10 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e10
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079b2:	8b 3d 10 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e10
c00079b8:	e8 f6 03 00 00       	call   c0007db3 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 3a 23 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 10 1e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021e10,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 10 1e 02 c0       	mov    eax,ds:0xc0021e10
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 18 fb 01 c0       	push   0xc001fb18
c0007a00:	e8 91 2f 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 48 fb 01 c0       	push   0xc001fb48
c0007a1f:	e8 4f 8e 00 00       	call   c0010873 <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 4d fb 01 c0       	push   0xc001fb4d
c0007a35:	e8 39 8e 00 00       	call   c0010873 <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a76:	e8 8f 23 00 00       	call   c0009e0a <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a8c:	e8 bb 1f 00 00       	call   c0009a4c <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 54 fb 01 c0       	push   0xc001fb54
c0007b57:	e8 3a 2e 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 20 86 00 00       	call   c0010181 <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a9 03 00 00       	call   c0007f21 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 7e 1c 00 00       	call   c00097fb <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 44 1f 00 00       	call   c0009acc <VAS::VAS()>
c0007b88:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b8e:	e8 37 6c 01 00       	call   c001e7ca <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	6a 00                	push   0x0
c0007bab:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007bb1:	6a 00                	push   0x0
c0007bb3:	6a 00                	push   0x0
c0007bb5:	56                   	push   esi
c0007bb6:	e8 eb f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bbb:	83 c4 14             	add    esp,0x14
c0007bbe:	53                   	push   ebx
c0007bbf:	e8 d2 1f 00 00       	call   c0009b96 <VAS::~VAS()>
c0007bc4:	83 c4 30             	add    esp,0x30
c0007bc7:	5b                   	pop    ebx
c0007bc8:	5e                   	pop    esi
c0007bc9:	5f                   	pop    edi
c0007bca:	c3                   	ret    

c0007bcb <Phys::allocateDMA(unsigned long)>:
c0007bcb:	55                   	push   ebp
c0007bcc:	31 ed                	xor    ebp,ebp
c0007bce:	57                   	push   edi
c0007bcf:	56                   	push   esi
c0007bd0:	53                   	push   ebx
c0007bd1:	31 db                	xor    ebx,ebx
c0007bd3:	83 ec 1c             	sub    esp,0x1c
c0007bd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bda:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be8:	31 c0                	xor    eax,eax
c0007bea:	c1 ef 0c             	shr    edi,0xc
c0007bed:	eb 1b                	jmp    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007bef:	85 c0                	test   eax,eax
c0007bf1:	75 06                	jne    c0007bf9 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf7:	89 dd                	mov    ebp,ebx
c0007bf9:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfc:	39 f7                	cmp    edi,esi
c0007bfe:	74 37                	je     c0007c37 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c00:	89 f0                	mov    eax,esi
c0007c02:	83 c3 01             	add    ebx,0x1
c0007c05:	83 fb 0f             	cmp    ebx,0xf
c0007c08:	7f 13                	jg     c0007c1d <Phys::allocateDMA(unsigned long)+0x52>
c0007c0a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c11:	74 dc                	je     c0007bef <Phys::allocateDMA(unsigned long)+0x24>
c0007c13:	31 c0                	xor    eax,eax
c0007c15:	83 c3 01             	add    ebx,0x1
c0007c18:	83 fb 0f             	cmp    ebx,0xf
c0007c1b:	7e ed                	jle    c0007c0a <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1d:	83 ec 0c             	sub    esp,0xc
c0007c20:	68 6c fb 01 c0       	push   0xc001fb6c
c0007c25:	e8 49 8c 00 00       	call   c0010873 <KePanic(char const*)>
c0007c2a:	83 c4 10             	add    esp,0x10
c0007c2d:	31 c0                	xor    eax,eax
c0007c2f:	83 c4 1c             	add    esp,0x1c
c0007c32:	5b                   	pop    ebx
c0007c33:	5e                   	pop    esi
c0007c34:	5f                   	pop    edi
c0007c35:	5d                   	pop    ebp
c0007c36:	c3                   	ret    
c0007c37:	89 e9                	mov    ecx,ebp
c0007c39:	c1 f9 04             	sar    ecx,0x4
c0007c3c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c40:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c44:	89 ca                	mov    edx,ecx
c0007c46:	83 ea 01             	sub    edx,0x1
c0007c49:	79 03                	jns    c0007c4e <Phys::allocateDMA(unsigned long)+0x83>
c0007c4b:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4e:	c1 fa 04             	sar    edx,0x4
c0007c51:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c55:	74 08                	je     c0007c5f <Phys::allocateDMA(unsigned long)+0x94>
c0007c57:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5b:	31 c0                	xor    eax,eax
c0007c5d:	eb b6                	jmp    c0007c15 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5f:	85 f6                	test   esi,esi
c0007c61:	74 17                	je     c0007c7a <Phys::allocateDMA(unsigned long)+0xaf>
c0007c63:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c69:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c70:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c73:	83 c2 01             	add    edx,0x1
c0007c76:	39 d0                	cmp    eax,edx
c0007c78:	75 f6                	jne    c0007c70 <Phys::allocateDMA(unsigned long)+0xa5>
c0007c7a:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c83:	01 f8                	add    eax,edi
c0007c85:	85 d2                	test   edx,edx
c0007c87:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c8c:	74 17                	je     c0007ca5 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8e:	83 ec 0c             	sub    esp,0xc
c0007c91:	68 6c fb 01 c0       	push   0xc001fb6c
c0007c96:	e8 d8 8b 00 00       	call   c0010873 <KePanic(char const*)>
c0007c9b:	83 c4 10             	add    esp,0x10
c0007c9e:	89 f0                	mov    eax,esi
c0007ca0:	e9 5d ff ff ff       	jmp    c0007c02 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca5:	c1 e5 0c             	shl    ebp,0xc
c0007ca8:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cae:	e9 7c ff ff ff       	jmp    c0007c2f <Phys::allocateDMA(unsigned long)+0x64>

c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbd:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cc2:	c1 ea 0c             	shr    edx,0xc
c0007cc5:	29 d0                	sub    eax,edx
c0007cc7:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd0:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd5:	c1 e8 0c             	shr    eax,0xc
c0007cd8:	85 d2                	test   edx,edx
c0007cda:	74 11                	je     c0007ced <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdc:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007ce1:	01 c2                	add    edx,eax
c0007ce3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce6:	83 c0 01             	add    eax,0x1
c0007ce9:	39 d0                	cmp    eax,edx
c0007ceb:	75 f6                	jne    c0007ce3 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007ced:	c3                   	ret    

c0007cee <Phys::setPageState(unsigned long, bool)>:
c0007cee:	57                   	push   edi
c0007cef:	56                   	push   esi
c0007cf0:	8b 35 14 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e14
c0007cf6:	53                   	push   ebx
c0007cf7:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d04:	0f b6 c0             	movzx  eax,al
c0007d07:	89 ca                	mov    edx,ecx
c0007d09:	83 e1 07             	and    ecx,0x7
c0007d0c:	c1 ea 03             	shr    edx,0x3
c0007d0f:	d3 c3                	rol    ebx,cl
c0007d11:	01 d6                	add    esi,edx
c0007d13:	d3 e0                	shl    eax,cl
c0007d15:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d18:	21 fb                	and    ebx,edi
c0007d1a:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1c:	8b 1d 14 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021e14
c0007d22:	01 da                	add    edx,ebx
c0007d24:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d26:	09 c8                	or     eax,ecx
c0007d28:	88 02                	mov    BYTE PTR [edx],al
c0007d2a:	5b                   	pop    ebx
c0007d2b:	5e                   	pop    esi
c0007d2c:	5f                   	pop    edi
c0007d2d:	c3                   	ret    

c0007d2e <Phys::getPageState(unsigned long)>:
c0007d2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d32:	8b 15 14 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e14
c0007d38:	89 c8                	mov    eax,ecx
c0007d3a:	83 e1 07             	and    ecx,0x7
c0007d3d:	c1 e8 03             	shr    eax,0x3
c0007d40:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d44:	d3 f8                	sar    eax,cl
c0007d46:	83 e0 01             	and    eax,0x1
c0007d49:	c3                   	ret    

c0007d4a <Phys::freePage(unsigned long)>:
c0007d4a:	53                   	push   ebx
c0007d4b:	83 ec 08             	sub    esp,0x8
c0007d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d52:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d58:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5e:	76 41                	jbe    c0007da1 <Phys::freePage(unsigned long)+0x57>
c0007d60:	c1 e8 0c             	shr    eax,0xc
c0007d63:	50                   	push   eax
c0007d64:	89 c3                	mov    ebx,eax
c0007d66:	e8 c3 ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007d6b:	5a                   	pop    edx
c0007d6c:	84 c0                	test   al,al
c0007d6e:	74 20                	je     c0007d90 <Phys::freePage(unsigned long)+0x46>
c0007d70:	83 ec 08             	sub    esp,0x8
c0007d73:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d78:	6a 00                	push   0x0
c0007d7a:	83 e8 01             	sub    eax,0x1
c0007d7d:	53                   	push   ebx
c0007d7e:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d83:	e8 66 ff ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007d88:	83 c4 10             	add    esp,0x10
c0007d8b:	83 c4 08             	add    esp,0x8
c0007d8e:	5b                   	pop    ebx
c0007d8f:	c3                   	ret    
c0007d90:	c7 44 24 10 11 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc11
c0007d98:	83 c4 08             	add    esp,0x8
c0007d9b:	5b                   	pop    ebx
c0007d9c:	e9 d2 8a 00 00       	jmp    c0010873 <KePanic(char const*)>
c0007da1:	68 00 10 00 00       	push   0x1000
c0007da6:	50                   	push   eax
c0007da7:	e8 07 ff ff ff       	call   c0007cb3 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dac:	59                   	pop    ecx
c0007dad:	5b                   	pop    ebx
c0007dae:	83 c4 08             	add    esp,0x8
c0007db1:	5b                   	pop    ebx
c0007db2:	c3                   	ret    

c0007db3 <Phys::allocatePage()>:
c0007db3:	56                   	push   esi
c0007db4:	53                   	push   ebx
c0007db5:	83 ec 14             	sub    esp,0x14
c0007db8:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007dbe:	89 f3                	mov    ebx,esi
c0007dc0:	eb 0a                	jmp    c0007dcc <Phys::allocatePage()+0x19>
c0007dc2:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007dc8:	39 de                	cmp    esi,ebx
c0007dca:	74 26                	je     c0007df2 <Phys::allocatePage()+0x3f>
c0007dcc:	53                   	push   ebx
c0007dcd:	e8 5c ff ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007dd2:	5a                   	pop    edx
c0007dd3:	84 c0                	test   al,al
c0007dd5:	74 67                	je     c0007e3e <Phys::allocatePage()+0x8b>
c0007dd7:	83 c3 01             	add    ebx,0x1
c0007dda:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007de0:	75 e0                	jne    c0007dc2 <Phys::allocatePage()+0xf>
c0007de2:	31 db                	xor    ebx,ebx
c0007de4:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dee:	39 de                	cmp    esi,ebx
c0007df0:	75 da                	jne    c0007dcc <Phys::allocatePage()+0x19>
c0007df2:	83 ec 0c             	sub    esp,0xc
c0007df5:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007dfa:	83 f0 01             	xor    eax,0x1
c0007dfd:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007e02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e0a:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e10:	50                   	push   eax
c0007e11:	e8 22 28 00 00       	call   c000a638 <VAS::scanForEviction()>
c0007e16:	83 c4 10             	add    esp,0x10
c0007e19:	85 c0                	test   eax,eax
c0007e1b:	75 48                	jne    c0007e65 <Phys::allocatePage()+0xb2>
c0007e1d:	83 ec 0c             	sub    esp,0xc
c0007e20:	68 94 fb 01 c0       	push   0xc001fb94
c0007e25:	e8 49 8a 00 00       	call   c0010873 <KePanic(char const*)>
c0007e2a:	83 c4 10             	add    esp,0x10
c0007e2d:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e33:	53                   	push   ebx
c0007e34:	e8 f5 fe ff ff       	call   c0007d2e <Phys::getPageState(unsigned long)>
c0007e39:	5a                   	pop    edx
c0007e3a:	84 c0                	test   al,al
c0007e3c:	75 99                	jne    c0007dd7 <Phys::allocatePage()+0x24>
c0007e3e:	6a 01                	push   0x1
c0007e40:	53                   	push   ebx
c0007e41:	e8 a8 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e46:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e4c:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e51:	83 c2 01             	add    edx,0x1
c0007e54:	59                   	pop    ecx
c0007e55:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e5b:	c1 e0 0c             	shl    eax,0xc
c0007e5e:	5b                   	pop    ebx
c0007e5f:	83 c4 14             	add    esp,0x14
c0007e62:	5b                   	pop    ebx
c0007e63:	5e                   	pop    esi
c0007e64:	c3                   	ret    
c0007e65:	83 ec 08             	sub    esp,0x8
c0007e68:	89 c2                	mov    edx,eax
c0007e6a:	6a 01                	push   0x1
c0007e6c:	c1 ea 0c             	shr    edx,0xc
c0007e6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e73:	52                   	push   edx
c0007e74:	e8 75 fe ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007e79:	83 c4 10             	add    esp,0x10
c0007e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e80:	eb dd                	jmp    c0007e5f <Phys::allocatePage()+0xac>

c0007e82 <Phys::allocateContiguousPages(int)>:
c0007e82:	57                   	push   edi
c0007e83:	56                   	push   esi
c0007e84:	53                   	push   ebx
c0007e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e89:	fa                   	cli    
c0007e8a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e8f:	31 db                	xor    ebx,ebx
c0007e91:	83 c0 01             	add    eax,0x1
c0007e94:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e99:	85 db                	test   ebx,ebx
c0007e9b:	75 11                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007e9d:	e8 11 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007ea2:	83 fe 01             	cmp    esi,0x1
c0007ea5:	89 c7                	mov    edi,eax
c0007ea7:	74 21                	je     c0007eca <Phys::allocateContiguousPages(int)+0x48>
c0007ea9:	bb 01 00 00 00       	mov    ebx,0x1
c0007eae:	e8 00 ff ff ff       	call   c0007db3 <Phys::allocatePage()>
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	c1 e2 0c             	shl    edx,0xc
c0007eb8:	01 fa                	add    edx,edi
c0007eba:	39 c2                	cmp    edx,eax
c0007ebc:	74 22                	je     c0007ee0 <Phys::allocateContiguousPages(int)+0x5e>
c0007ebe:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec3:	89 c7                	mov    edi,eax
c0007ec5:	83 fe 01             	cmp    esi,0x1
c0007ec8:	75 e4                	jne    c0007eae <Phys::allocateContiguousPages(int)+0x2c>
c0007eca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ecf:	83 e8 01             	sub    eax,0x1
c0007ed2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ed7:	75 01                	jne    c0007eda <Phys::allocateContiguousPages(int)+0x58>
c0007ed9:	fb                   	sti    
c0007eda:	89 f8                	mov    eax,edi
c0007edc:	5b                   	pop    ebx
c0007edd:	5e                   	pop    esi
c0007ede:	5f                   	pop    edi
c0007edf:	c3                   	ret    
c0007ee0:	83 c3 01             	add    ebx,0x1
c0007ee3:	39 f3                	cmp    ebx,esi
c0007ee5:	75 b2                	jne    c0007e99 <Phys::allocateContiguousPages(int)+0x17>
c0007ee7:	eb e1                	jmp    c0007eca <Phys::allocateContiguousPages(int)+0x48>

c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee9:	56                   	push   esi
c0007eea:	53                   	push   ebx
c0007eeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eef:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ef5:	73 06                	jae    c0007efd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef7:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f01:	c1 eb 0c             	shr    ebx,0xc
c0007f04:	c1 e8 0c             	shr    eax,0xc
c0007f07:	39 d8                	cmp    eax,ebx
c0007f09:	73 13                	jae    c0007f1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0b:	6a 00                	push   0x0
c0007f0d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f10:	50                   	push   eax
c0007f11:	e8 d8 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f16:	5a                   	pop    edx
c0007f17:	89 f0                	mov    eax,esi
c0007f19:	59                   	pop    ecx
c0007f1a:	39 f3                	cmp    ebx,esi
c0007f1c:	75 ed                	jne    c0007f0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1e:	5b                   	pop    ebx
c0007f1f:	5e                   	pop    esi
c0007f20:	c3                   	ret    

c0007f21 <Phys::physicalMemorySetup(unsigned int)>:
c0007f21:	55                   	push   ebp
c0007f22:	57                   	push   edi
c0007f23:	56                   	push   esi
c0007f24:	53                   	push   ebx
c0007f25:	83 ec 40             	sub    esp,0x40
c0007f28:	6a 10                	push   0x10
c0007f2a:	6a 00                	push   0x0
c0007f2c:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f31:	e8 ba 85 ff ff       	call   c00004f0 <memset>
c0007f36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3f:	05 00 10 00 00       	add    eax,0x1000
c0007f44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f48:	5b                   	pop    ebx
c0007f49:	31 db                	xor    ebx,ebx
c0007f4b:	5e                   	pop    esi
c0007f4c:	50                   	push   eax
c0007f4d:	68 27 fc 01 c0       	push   0xc001fc27
c0007f52:	e8 3f 2a 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0007f57:	83 c4 10             	add    esp,0x10
c0007f5a:	83 ec 08             	sub    esp,0x8
c0007f5d:	6a 01                	push   0x1
c0007f5f:	53                   	push   ebx
c0007f60:	83 c3 01             	add    ebx,0x1
c0007f63:	e8 86 fd ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0007f68:	83 c4 10             	add    esp,0x10
c0007f6b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f71:	75 e7                	jne    c0007f5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f73:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f7e:	85 c0                	test   eax,eax
c0007f80:	0f 84 98 01 00 00    	je     c000811e <Phys::physicalMemorySetup(unsigned int)+0x1fd>
c0007f86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f8a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f92:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f9b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fa3:	eb 1c                	jmp    c0007fc1 <Phys::physicalMemorySetup(unsigned int)+0xa0>
c0007fa5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fa9:	83 c3 18             	add    ebx,0x18
c0007fac:	83 c6 01             	add    esi,0x1
c0007faf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fb7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fbb:	0f 84 6d 01 00 00    	je     c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0007fc1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fc7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fd2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fd4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fd7:	01 f0                	add    eax,esi
c0007fd9:	55                   	push   ebp
c0007fda:	11 fa                	adc    edx,edi
c0007fdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe8:	51                   	push   ecx
c0007fe9:	56                   	push   esi
c0007fea:	68 c4 fb 01 c0       	push   0xc001fbc4
c0007fef:	e8 a2 29 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0007ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ff8:	83 c4 10             	add    esp,0x10
c0007ffb:	09 f8                	or     eax,edi
c0007ffd:	0f 85 2b 01 00 00    	jne    c000812e <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0008003:	83 fd 01             	cmp    ebp,0x1
c0008006:	75 9d                	jne    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c0008008:	ba 00 00 08 00       	mov    edx,0x80000
c000800d:	89 c1                	mov    ecx,eax
c000800f:	39 f2                	cmp    edx,esi
c0008011:	19 f9                	sbb    ecx,edi
c0008013:	0f 82 ab 00 00 00    	jb     c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008019:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000801d:	89 c1                	mov    ecx,eax
c000801f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008023:	0f 83 9b 00 00 00    	jae    c00080c4 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008029:	ba 00 00 0a 00       	mov    edx,0xa0000
c000802e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008032:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008036:	39 fa                	cmp    edx,edi
c0008038:	19 e8                	sbb    eax,ebp
c000803a:	0f 82 b0 01 00 00    	jb     c00081f0 <Phys::physicalMemorySetup(unsigned int)+0x2cf>
c0008040:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008044:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008048:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000804e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008053:	83 d5 ff             	adc    ebp,0xffffffff
c0008056:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000805a:	31 c0                	xor    eax,eax
c000805c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008060:	39 fa                	cmp    edx,edi
c0008062:	89 c1                	mov    ecx,eax
c0008064:	19 e9                	sbb    ecx,ebp
c0008066:	0f 83 39 ff ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c000806c:	be 00 00 08 00       	mov    esi,0x80000
c0008071:	83 ec 04             	sub    esp,0x4
c0008074:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008078:	57                   	push   edi
c0008079:	56                   	push   esi
c000807a:	68 e8 fb 01 c0       	push   0xc001fbe8
c000807f:	e8 12 29 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0008084:	5d                   	pop    ebp
c0008085:	58                   	pop    eax
c0008086:	57                   	push   edi
c0008087:	56                   	push   esi
c0008088:	e8 5c fe ff ff       	call   c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000808d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008095:	83 c4 0c             	add    esp,0xc
c0008098:	0f ac d0 0c          	shrd   eax,edx,0xc
c000809c:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c00080a2:	01 d0                	add    eax,edx
c00080a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080ab:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080b0:	52                   	push   edx
c00080b1:	50                   	push   eax
c00080b2:	68 4d fc 01 c0       	push   0xc001fc4d
c00080b7:	e8 da 28 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00080bc:	83 c4 10             	add    esp,0x10
c00080bf:	e9 e1 fe ff ff       	jmp    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d0:	39 ea                	cmp    edx,ebp
c00080d2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080d6:	0f 82 c9 fe ff ff    	jb     c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080dc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080e1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080e5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080e9:	0f 83 b6 fe ff ff    	jae    c0007fa5 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080ef:	39 ee                	cmp    esi,ebp
c00080f1:	89 f8                	mov    eax,edi
c00080f3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00080f7:	0f 83 74 ff ff ff    	jae    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c00080fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008101:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008105:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008109:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000810d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008111:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008115:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008119:	e9 53 ff ff ff       	jmp    c0008071 <Phys::physicalMemorySetup(unsigned int)+0x150>
c000811e:	83 ec 0c             	sub    esp,0xc
c0008121:	68 3f fc 01 c0       	push   0xc001fc3f
c0008126:	e8 48 87 00 00       	call   c0010873 <KePanic(char const*)>
c000812b:	83 c4 10             	add    esp,0x10
c000812e:	83 ec 08             	sub    esp,0x8
c0008131:	bb 60 00 00 00       	mov    ebx,0x60
c0008136:	6a 00                	push   0x0
c0008138:	6a 06                	push   0x6
c000813a:	e8 af fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000813f:	58                   	pop    eax
c0008140:	5a                   	pop    edx
c0008141:	6a 00                	push   0x0
c0008143:	6a 07                	push   0x7
c0008145:	e8 a4 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000814a:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0008150:	83 c4 10             	add    esp,0x10
c0008153:	83 c1 02             	add    ecx,0x2
c0008156:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c000815c:	83 ec 08             	sub    esp,0x8
c000815f:	6a 00                	push   0x0
c0008161:	53                   	push   ebx
c0008162:	83 c3 01             	add    ebx,0x1
c0008165:	e8 84 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c000816a:	83 c4 10             	add    esp,0x10
c000816d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008173:	75 e7                	jne    c000815c <Phys::physicalMemorySetup(unsigned int)+0x23b>
c0008175:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000817a:	bb 40 01 00 00       	mov    ebx,0x140
c000817f:	83 c0 20             	add    eax,0x20
c0008182:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008187:	eb 26                	jmp    c00081af <Phys::physicalMemorySetup(unsigned int)+0x28e>
c0008189:	83 ec 08             	sub    esp,0x8
c000818c:	6a 00                	push   0x0
c000818e:	53                   	push   ebx
c000818f:	83 c3 01             	add    ebx,0x1
c0008192:	e8 57 fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c0008197:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000819c:	83 c4 10             	add    esp,0x10
c000819f:	83 c0 01             	add    eax,0x1
c00081a2:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081a8:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081ad:	74 07                	je     c00081b6 <Phys::physicalMemorySetup(unsigned int)+0x295>
c00081af:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081b4:	7e d3                	jle    c0008189 <Phys::physicalMemorySetup(unsigned int)+0x268>
c00081b6:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081bb:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c0:	7f 26                	jg     c00081e8 <Phys::physicalMemorySetup(unsigned int)+0x2c7>
c00081c2:	83 ec 08             	sub    esp,0x8
c00081c5:	6a 00                	push   0x0
c00081c7:	53                   	push   ebx
c00081c8:	83 c3 01             	add    ebx,0x1
c00081cb:	e8 1e fb ff ff       	call   c0007cee <Phys::setPageState(unsigned long, bool)>
c00081d0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	83 c0 01             	add    eax,0x1
c00081db:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081e1:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081e6:	75 d3                	jne    c00081bb <Phys::physicalMemorySetup(unsigned int)+0x29a>
c00081e8:	83 c4 3c             	add    esp,0x3c
c00081eb:	5b                   	pop    ebx
c00081ec:	5e                   	pop    esi
c00081ed:	5f                   	pop    edi
c00081ee:	5d                   	pop    ebp
c00081ef:	c3                   	ret    
c00081f0:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00081f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008200:	e9 3b fe ff ff       	jmp    c0008040 <Phys::physicalMemorySetup(unsigned int)+0x11f>
c0008205:	90                   	nop

c0008206 <Pipe::isAtty()>:
c0008206:	31 c0                	xor    eax,eax
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <Pipe::~Pipe()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	ba ac fc 01 c0       	mov    edx,0xc001fcac
c0008212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008216:	89 10                	mov    DWORD PTR [eax],edx
c0008218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821c:	83 ec 0c             	sub    esp,0xc
c000821f:	50                   	push   eax
c0008220:	e8 8f 11 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008225:	83 c4 10             	add    esp,0x10
c0008228:	90                   	nop
c0008229:	83 c4 0c             	add    esp,0xc
c000822c:	c3                   	ret    
c000822d:	90                   	nop

c000822e <Pipe::~Pipe()>:
c000822e:	83 ec 0c             	sub    esp,0xc
c0008231:	83 ec 0c             	sub    esp,0xc
c0008234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008238:	e8 cd ff ff ff       	call   c000820a <Pipe::~Pipe()>
c000823d:	83 c4 10             	add    esp,0x10
c0008240:	83 ec 08             	sub    esp,0x8
c0008243:	6a 20                	push   0x20
c0008245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008249:	e8 1b 26 00 00       	call   c000a869 <operator delete(void*, unsigned long)>
c000824e:	83 c4 10             	add    esp,0x10
c0008251:	83 c4 0c             	add    esp,0xc
c0008254:	c3                   	ret    
c0008255:	90                   	nop

c0008256 <Pipe::write(unsigned long long, void*, int*)>:
c0008256:	55                   	push   ebp
c0008257:	57                   	push   edi
c0008258:	56                   	push   esi
c0008259:	53                   	push   ebx
c000825a:	83 ec 1c             	sub    esp,0x1c
c000825d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008261:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008265:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008268:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000826c:	89 04 24             	mov    DWORD PTR [esp],eax
c000826f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008273:	89 d8                	mov    eax,ebx
c0008275:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008278:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000827c:	89 d6                	mov    esi,edx
c000827e:	89 d7                	mov    edi,edx
c0008280:	c1 ff 1f             	sar    edi,0x1f
c0008283:	03 34 24             	add    esi,DWORD PTR [esp]
c0008286:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000828a:	c1 f8 1f             	sar    eax,0x1f
c000828d:	39 f3                	cmp    ebx,esi
c000828f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008297:	19 f8                	sbb    eax,edi
c0008299:	b8 01 00 00 00       	mov    eax,0x1
c000829e:	72 6e                	jb     c000830e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082a3:	01 d0                	add    eax,edx
c00082a5:	99                   	cdq    
c00082a6:	f7 fb                	idiv   ebx
c00082a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ac:	29 d3                	sub    ebx,edx
c00082ae:	89 d7                	mov    edi,edx
c00082b0:	89 de                	mov    esi,ebx
c00082b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082b5:	c1 fb 1f             	sar    ebx,0x1f
c00082b8:	39 f2                	cmp    edx,esi
c00082ba:	19 d8                	sbb    eax,ebx
c00082bc:	b8 00 00 00 00       	mov    eax,0x0
c00082c1:	72 04                	jb     c00082c7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082c3:	89 d0                	mov    eax,edx
c00082c5:	29 f0                	sub    eax,esi
c00082c7:	89 d3                	mov    ebx,edx
c00082c9:	29 c3                	sub    ebx,eax
c00082cb:	74 0b                	je     c00082d8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082cd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082d4:	89 d9                	mov    ecx,ebx
c00082d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082d8:	85 c0                	test   eax,eax
c00082da:	74 0d                	je     c00082e9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082dc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082e3:	89 de                	mov    esi,ebx
c00082e5:	89 c1                	mov    ecx,eax
c00082e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082ec:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f1:	75 10                	jne    c0008303 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082f3:	83 ec 0c             	sub    esp,0xc
c00082f6:	68 69 fc 01 c0       	push   0xc001fc69
c00082fb:	e8 73 85 00 00       	call   c0010873 <KePanic(char const*)>
c0008300:	83 c4 10             	add    esp,0x10
c0008303:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008307:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000830a:	89 08                	mov    DWORD PTR [eax],ecx
c000830c:	31 c0                	xor    eax,eax
c000830e:	83 c4 1c             	add    esp,0x1c
c0008311:	5b                   	pop    ebx
c0008312:	5e                   	pop    esi
c0008313:	5f                   	pop    edi
c0008314:	5d                   	pop    ebp
c0008315:	c3                   	ret    

c0008316 <Pipe::read(unsigned long long, void*, int*)>:
c0008316:	55                   	push   ebp
c0008317:	57                   	push   edi
c0008318:	56                   	push   esi
c0008319:	53                   	push   ebx
c000831a:	83 ec 1c             	sub    esp,0x1c
c000831d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008321:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008325:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008329:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000832c:	89 c8                	mov    eax,ecx
c000832e:	99                   	cdq    
c000832f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008333:	74 24                	je     c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008335:	39 f9                	cmp    ecx,edi
c0008337:	89 d1                	mov    ecx,edx
c0008339:	19 f1                	sbb    ecx,esi
c000833b:	73 1c                	jae    c0008359 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	fa                   	cli    
c000833e:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008344:	e8 df cc 00 00       	call   c0015028 <schedule()>
c0008349:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000834e:	48                   	dec    eax
c000834f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008354:	75 d3                	jne    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008356:	fb                   	sti    
c0008357:	eb d0                	jmp    c0008329 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008359:	39 f8                	cmp    eax,edi
c000835b:	89 d1                	mov    ecx,edx
c000835d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008360:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008364:	19 f1                	sbb    ecx,esi
c0008366:	73 07                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008368:	89 04 24             	mov    DWORD PTR [esp],eax
c000836b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000836f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008372:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008375:	29 f7                	sub    edi,esi
c0008377:	89 f8                	mov    eax,edi
c0008379:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000837d:	99                   	cdq    
c000837e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008385:	19 d0                	sbb    eax,edx
c0008387:	73 07                	jae    c0008390 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008389:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008393:	89 ea                	mov    edx,ebp
c0008395:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008399:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000839e:	74 0d                	je     c00083ad <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ad:	85 d2                	test   edx,edx
c00083af:	74 11                	je     c00083c2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083b8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083bc:	89 d1                	mov    ecx,edx
c00083be:	89 c7                	mov    edi,eax
c00083c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083c5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083c8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083cb:	99                   	cdq    
c00083cc:	89 f7                	mov    edi,esi
c00083ce:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083d5:	c1 ff 1f             	sar    edi,0x1f
c00083d8:	57                   	push   edi
c00083d9:	56                   	push   esi
c00083da:	52                   	push   edx
c00083db:	50                   	push   eax
c00083dc:	e8 cf 62 01 00       	call   c001e6b0 <__umoddi3>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083e7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083ec:	75 10                	jne    c00083fe <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	68 86 fc 01 c0       	push   0xc001fc86
c00083f6:	e8 78 84 00 00       	call   c0010873 <KePanic(char const*)>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008402:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008405:	89 10                	mov    DWORD PTR [eax],edx
c0008407:	83 c4 1c             	add    esp,0x1c
c000840a:	31 c0                	xor    eax,eax
c000840c:	5b                   	pop    ebx
c000840d:	5e                   	pop    esi
c000840e:	5f                   	pop    edi
c000840f:	5d                   	pop    ebp
c0008410:	c3                   	ret    
c0008411:	90                   	nop

c0008412 <Pipe::Pipe(int)>:
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008419:	83 ec 08             	sub    esp,0x8
c000841c:	6a 00                	push   0x0
c000841e:	50                   	push   eax
c000841f:	e8 aa 0d 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	ba ac fc 01 c0       	mov    edx,0xc001fcac
c000842c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008430:	89 10                	mov    DWORD PTR [eax],edx
c0008432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000843a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000843d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008441:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008457:	83 ec 0c             	sub    esp,0xc
c000845a:	50                   	push   eax
c000845b:	e8 4e f6 ff ff       	call   c0007aae <malloc>
c0008460:	83 c4 10             	add    esp,0x10
c0008463:	89 c2                	mov    edx,eax
c0008465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008469:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000846c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008470:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008474:	90                   	nop
c0008475:	83 c4 0c             	add    esp,0xc
c0008478:	c3                   	ret    
c0008479:	90                   	nop

c000847a <VgaText::isAtty()>:
c000847a:	b0 01                	mov    al,0x1
c000847c:	c3                   	ret    
c000847d:	90                   	nop

c000847e <VgaText::~VgaText()>:
c000847e:	83 ec 0c             	sub    esp,0xc
c0008481:	ba f4 fc 01 c0       	mov    edx,0xc001fcf4
c0008486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000848a:	89 10                	mov    DWORD PTR [eax],edx
c000848c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008490:	83 ec 0c             	sub    esp,0xc
c0008493:	50                   	push   eax
c0008494:	e8 1b 0f 00 00       	call   c00093b4 <UnixFile::~UnixFile()>
c0008499:	83 c4 10             	add    esp,0x10
c000849c:	90                   	nop
c000849d:	83 c4 0c             	add    esp,0xc
c00084a0:	c3                   	ret    
c00084a1:	90                   	nop

c00084a2 <VgaText::~VgaText()>:
c00084a2:	83 ec 0c             	sub    esp,0xc
c00084a5:	83 ec 0c             	sub    esp,0xc
c00084a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ac:	e8 cd ff ff ff       	call   c000847e <VgaText::~VgaText()>
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	83 ec 08             	sub    esp,0x8
c00084b7:	68 84 01 00 00       	push   0x184
c00084bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c0:	e8 a4 23 00 00       	call   c000a869 <operator delete(void*, unsigned long)>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	83 c4 0c             	add    esp,0xc
c00084cb:	c3                   	ret    

c00084cc <VgaText::read(unsigned long long, void*, int*)>:
c00084cc:	83 ec 10             	sub    esp,0x10
c00084cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084db:	e8 c4 47 00 00       	call   c000cca4 <readKeyboard(VgaText*, char*, unsigned long)>
c00084e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e4:	89 02                	mov    DWORD PTR [edx],eax
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	83 c4 1c             	add    esp,0x1c
c00084eb:	c3                   	ret    

c00084ec <setTerminalScrollLock(bool)>:
c00084ec:	c3                   	ret    

c00084ed <doTerminalCycle()>:
c00084ed:	c3                   	ret    

c00084ee <addToTerminalCycle(VgaText*)>:
c00084ee:	c3                   	ret    

c00084ef <scrollTerminalScrollLock(int)>:
c00084ef:	c3                   	ret    

c00084f0 <VgaText::updateTitle()>:
c00084f0:	c3                   	ret    
c00084f1:	90                   	nop

c00084f2 <VgaText::load()>:
c00084f2:	c3                   	ret    
c00084f3:	90                   	nop

c00084f4 <VgaText::updateCursor()>:
c00084f4:	83 ec 14             	sub    esp,0x14
c00084f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084fb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084fe:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008501:	e8 5a f8 00 00       	call   c0017d60 <HalConsoleCursorUpdate(int, int)>
c0008506:	83 c4 1c             	add    esp,0x1c
c0008509:	c3                   	ret    

c000850a <VgaText::doANSI_SGR(int)>:
c000850a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008512:	85 d2                	test   edx,edx
c0008514:	75 0b                	jne    c0008521 <VgaText::doANSI_SGR(int)+0x17>
c0008516:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008519:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000851c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000851f:	eb 59                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008521:	83 fa 07             	cmp    edx,0x7
c0008524:	75 0b                	jne    c0008531 <VgaText::doANSI_SGR(int)+0x27>
c0008526:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008529:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000852c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000852f:	eb 49                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008531:	83 fa 1b             	cmp    edx,0x1b
c0008534:	74 e0                	je     c0008516 <VgaText::doANSI_SGR(int)+0xc>
c0008536:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008539:	83 f9 07             	cmp    ecx,0x7
c000853c:	77 09                	ja     c0008547 <VgaText::doANSI_SGR(int)+0x3d>
c000853e:	8b 14 8d 40 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1c0]
c0008545:	eb 20                	jmp    c0008567 <VgaText::doANSI_SGR(int)+0x5d>
c0008547:	8d 4a d8             	lea    ecx,[edx-0x28]
c000854a:	83 f9 07             	cmp    ecx,0x7
c000854d:	77 09                	ja     c0008558 <VgaText::doANSI_SGR(int)+0x4e>
c000854f:	8b 14 8d 40 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1c0]
c0008556:	eb 22                	jmp    c000857a <VgaText::doANSI_SGR(int)+0x70>
c0008558:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000855b:	83 f9 07             	cmp    ecx,0x7
c000855e:	77 0b                	ja     c000856b <VgaText::doANSI_SGR(int)+0x61>
c0008560:	8b 14 95 f8 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde308]
c0008567:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000856a:	c3                   	ret    
c000856b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000856e:	83 f9 07             	cmp    ecx,0x7
c0008571:	77 0a                	ja     c000857d <VgaText::doANSI_SGR(int)+0x73>
c0008573:	8b 14 95 d0 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde330]
c000857a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000857d:	c3                   	ret    

c000857e <VgaText::setDefaultBgColour(VgaColour)>:
c000857e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008582:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008586:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008589:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000858c:	c3                   	ret    
c000858d:	90                   	nop

c000858e <VgaText::setDefaultFgColour(VgaColour)>:
c000858e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008596:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008599:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000859c:	c3                   	ret    
c000859d:	90                   	nop

c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000859e:	53                   	push   ebx
c000859f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085ab:	51                   	push   ecx
c00085ac:	e8 cd ff ff ff       	call   c000857e <VgaText::setDefaultBgColour(VgaColour)>
c00085b1:	58                   	pop    eax
c00085b2:	5a                   	pop    edx
c00085b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085bb:	5b                   	pop    ebx
c00085bc:	eb d0                	jmp    c000858e <VgaText::setDefaultFgColour(VgaColour)>

c00085be <VgaText::setTitleTextColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085c9:	c3                   	ret    

c00085ca <VgaText::setTitleColour(VgaColour)>:
c00085ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085d5:	c3                   	ret    

c00085d6 <VgaText::setTitle(char*)>:
c00085d6:	c3                   	ret    
c00085d7:	90                   	nop

c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e1:	83 e0 0f             	and    eax,0xf
c00085e4:	c1 e2 04             	shl    edx,0x4
c00085e7:	09 d0                	or     eax,edx
c00085e9:	c3                   	ret    

c00085ea <VgaText::scrollScreen()>:
c00085ea:	55                   	push   ebp
c00085eb:	57                   	push   edi
c00085ec:	56                   	push   esi
c00085ed:	be 01 00 00 00       	mov    esi,0x1
c00085f2:	53                   	push   ebx
c00085f3:	83 ec 0c             	sub    esp,0xc
c00085f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085fa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085fd:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008603:	31 ff                	xor    edi,edi
c0008605:	01 e9                	add    ecx,ebp
c0008607:	8a 01                	mov    al,BYTE PTR [ecx]
c0008609:	83 fe 18             	cmp    esi,0x18
c000860c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008612:	75 20                	jne    c0008634 <VgaText::scrollScreen()+0x4a>
c0008614:	f7 c7 01 00 00 00    	test   edi,0x1
c000861a:	74 15                	je     c0008631 <VgaText::scrollScreen()+0x47>
c000861c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008620:	50                   	push   eax
c0008621:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008625:	50                   	push   eax
c0008626:	e8 ad ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c000862b:	5a                   	pop    edx
c000862c:	5a                   	pop    edx
c000862d:	88 01                	mov    BYTE PTR [ecx],al
c000862f:	eb 03                	jmp    c0008634 <VgaText::scrollScreen()+0x4a>
c0008631:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008634:	47                   	inc    edi
c0008635:	41                   	inc    ecx
c0008636:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000863c:	75 c9                	jne    c0008607 <VgaText::scrollScreen()+0x1d>
c000863e:	46                   	inc    esi
c000863f:	83 fe 19             	cmp    esi,0x19
c0008642:	75 b9                	jne    c00085fd <VgaText::scrollScreen()+0x13>
c0008644:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000864a:	75 1f                	jne    c000866b <VgaText::scrollScreen()+0x81>
c000864c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008650:	74 05                	je     c0008657 <VgaText::scrollScreen()+0x6d>
c0008652:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008655:	eb 14                	jmp    c000866b <VgaText::scrollScreen()+0x81>
c0008657:	50                   	push   eax
c0008658:	50                   	push   eax
c0008659:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865d:	50                   	push   eax
c000865e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008662:	50                   	push   eax
c0008663:	e8 8c f5 00 00       	call   c0017bf4 <HalConsoleScroll(int, int)>
c0008668:	83 c4 10             	add    esp,0x10
c000866b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000866f:	83 c4 0c             	add    esp,0xc
c0008672:	5b                   	pop    ebx
c0008673:	5e                   	pop    esi
c0008674:	5f                   	pop    edi
c0008675:	5d                   	pop    ebp
c0008676:	e9 79 fe ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000867b:	90                   	nop

c000867c <VgaText::combineCharAndColour(char, unsigned char)>:
c000867c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008681:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008686:	c1 e0 08             	shl    eax,0x8
c0008689:	09 d0                	or     eax,edx
c000868b:	c3                   	ret    

c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000868c:	55                   	push   ebp
c000868d:	57                   	push   edi
c000868e:	56                   	push   esi
c000868f:	53                   	push   ebx
c0008690:	83 ec 1c             	sub    esp,0x1c
c0008693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008697:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000869b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000869f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086ab:	0f b6 c3             	movzx  eax,bl
c00086ae:	50                   	push   eax
c00086af:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086b4:	50                   	push   eax
c00086b5:	e8 1e ff ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c00086ba:	5a                   	pop    edx
c00086bb:	0f b6 c0             	movzx  eax,al
c00086be:	59                   	pop    ecx
c00086bf:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086c4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086c8:	50                   	push   eax
c00086c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086cd:	e8 aa ff ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c00086d2:	5a                   	pop    edx
c00086d3:	6b d7 50             	imul   edx,edi,0x50
c00086d6:	59                   	pop    ecx
c00086d7:	01 f2                	add    edx,esi
c00086d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086dc:	0f b7 d2             	movzx  edx,dx
c00086df:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086e3:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086e9:	75 28                	jne    c0008713 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086f3:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086f7:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086fb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008703:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008707:	83 c4 1c             	add    esp,0x1c
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	5f                   	pop    edi
c000870d:	5d                   	pop    ebp
c000870e:	e9 e9 f5 00 00       	jmp    c0017cfc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008713:	83 c4 1c             	add    esp,0x1c
c0008716:	5b                   	pop    ebx
c0008717:	5e                   	pop    esi
c0008718:	5f                   	pop    edi
c0008719:	5d                   	pop    ebp
c000871a:	c3                   	ret    
c000871b:	90                   	nop

c000871c <VgaText::getCursorX()>:
c000871c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008720:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008723:	c3                   	ret    

c0008724 <VgaText::getCursorY()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000872b:	c3                   	ret    

c000872c <VgaText::setCursor(int, int)>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008734:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008737:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000873b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000873e:	e9 b1 fd ff ff       	jmp    c00084f4 <VgaText::updateCursor()>

c0008743 <setActiveTerminal(VgaText*)>:
c0008743:	53                   	push   ebx
c0008744:	83 ec 08             	sub    esp,0x8
c0008747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874b:	85 db                	test   ebx,ebx
c000874d:	75 11                	jne    c0008760 <setActiveTerminal(VgaText*)+0x1d>
c000874f:	c7 44 24 10 c0 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcc0
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	e9 13 81 00 00       	jmp    c0010873 <KePanic(char const*)>
c0008760:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008765:	85 c0                	test   eax,eax
c0008767:	74 0c                	je     c0008775 <setActiveTerminal(VgaText*)+0x32>
c0008769:	83 ec 0c             	sub    esp,0xc
c000876c:	50                   	push   eax
c000876d:	e8 82 fd ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000877b:	50                   	push   eax
c000877c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000877f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008782:	53                   	push   ebx
c0008783:	e8 a4 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008788:	83 c4 18             	add    esp,0x18
c000878b:	5b                   	pop    ebx
c000878c:	c3                   	ret    
c000878d:	90                   	nop

c000878e <VgaText::clearScreen()>:
c000878e:	57                   	push   edi
c000878f:	56                   	push   esi
c0008790:	31 f6                	xor    esi,esi
c0008792:	53                   	push   ebx
c0008793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008797:	52                   	push   edx
c0008798:	6a 00                	push   0x0
c000879a:	6a 00                	push   0x0
c000879c:	53                   	push   ebx
c000879d:	e8 8a ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087a2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087a9:	83 c4 10             	add    esp,0x10
c00087ac:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087af:	7e 20                	jle    c00087d1 <VgaText::clearScreen()+0x43>
c00087b1:	31 ff                	xor    edi,edi
c00087b3:	50                   	push   eax
c00087b4:	50                   	push   eax
c00087b5:	56                   	push   esi
c00087b6:	57                   	push   edi
c00087b7:	47                   	inc    edi
c00087b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087be:	6a 20                	push   0x20
c00087c0:	53                   	push   ebx
c00087c1:	e8 c6 fe ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087c6:	83 c4 20             	add    esp,0x20
c00087c9:	83 ff 50             	cmp    edi,0x50
c00087cc:	75 e5                	jne    c00087b3 <VgaText::clearScreen()+0x25>
c00087ce:	46                   	inc    esi
c00087cf:	eb db                	jmp    c00087ac <VgaText::clearScreen()+0x1e>
c00087d1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::setCursorX(int)>:
c00087dc:	83 ec 10             	sub    esp,0x10
c00087df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087ea:	50                   	push   eax
c00087eb:	e8 3c ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c00087f0:	83 c4 1c             	add    esp,0x1c
c00087f3:	c3                   	ret    

c00087f4 <VgaText::setCursorY(int)>:
c00087f4:	83 ec 10             	sub    esp,0x10
c00087f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087ff:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008802:	50                   	push   eax
c0008803:	e8 24 ff ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008808:	83 c4 1c             	add    esp,0x1c
c000880b:	c3                   	ret    

c000880c <VgaText::incrementCursor(bool)>:
c000880c:	56                   	push   esi
c000880d:	53                   	push   ebx
c000880e:	51                   	push   ecx
c000880f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008813:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008817:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000881a:	40                   	inc    eax
c000881b:	83 f8 50             	cmp    eax,0x50
c000881e:	74 05                	je     c0008825 <VgaText::incrementCursor(bool)+0x19>
c0008820:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008823:	eb 24                	jmp    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c0008825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008828:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000882f:	8d 50 01             	lea    edx,[eax+0x1]
c0008832:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008835:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008838:	75 0f                	jne    c0008849 <VgaText::incrementCursor(bool)+0x3d>
c000883a:	83 ec 0c             	sub    esp,0xc
c000883d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008840:	53                   	push   ebx
c0008841:	e8 a4 fd ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	89 f0                	mov    eax,esi
c000884b:	84 c0                	test   al,al
c000884d:	74 0c                	je     c000885b <VgaText::incrementCursor(bool)+0x4f>
c000884f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008853:	5a                   	pop    edx
c0008854:	5b                   	pop    ebx
c0008855:	5e                   	pop    esi
c0008856:	e9 99 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c000885b:	58                   	pop    eax
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	c3                   	ret    
c000885f:	90                   	nop

c0008860 <VgaText::decrementCursor(bool)>:
c0008860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008864:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008868:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000886b:	85 c0                	test   eax,eax
c000886d:	74 04                	je     c0008873 <VgaText::decrementCursor(bool)+0x13>
c000886f:	48                   	dec    eax
c0008870:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008873:	84 c9                	test   cl,cl
c0008875:	74 09                	je     c0008880 <VgaText::decrementCursor(bool)+0x20>
c0008877:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000887b:	e9 74 fc ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008880:	c3                   	ret    
c0008881:	90                   	nop

c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008882:	53                   	push   ebx
c0008883:	83 ec 08             	sub    esp,0x8
c0008886:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c000888b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000888f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008893:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008897:	83 f8 07             	cmp    eax,0x7
c000889a:	75 21                	jne    c00088bd <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c000889c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088a4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ac:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088b4:	83 c4 08             	add    esp,0x8
c00088b7:	5b                   	pop    ebx
c00088b8:	e9 32 2f 00 00       	jmp    c000b7ef <Krnl::beep(int, int, bool)>
c00088bd:	83 f8 0d             	cmp    eax,0xd
c00088c0:	75 09                	jne    c00088cb <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c9:	eb 2d                	jmp    c00088f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088cb:	83 f8 0a             	cmp    eax,0xa
c00088ce:	75 31                	jne    c0008901 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088d3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088da:	8d 50 01             	lea    edx,[eax+0x1]
c00088dd:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088e3:	75 0f                	jne    c00088f4 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088e5:	83 ec 0c             	sub    esp,0xc
c00088e8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088eb:	53                   	push   ebx
c00088ec:	e8 f9 fc ff ff       	call   c00085ea <VgaText::scrollScreen()>
c00088f1:	83 c4 10             	add    esp,0x10
c00088f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088f8:	83 c4 08             	add    esp,0x8
c00088fb:	5b                   	pop    ebx
c00088fc:	e9 f3 fb ff ff       	jmp    c00084f4 <VgaText::updateCursor()>
c0008901:	83 f8 08             	cmp    eax,0x8
c0008904:	75 25                	jne    c000892b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008906:	50                   	push   eax
c0008907:	50                   	push   eax
c0008908:	6a 01                	push   0x1
c000890a:	53                   	push   ebx
c000890b:	e8 50 ff ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008910:	5a                   	pop    edx
c0008911:	59                   	pop    ecx
c0008912:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008915:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008918:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000891b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000891e:	6a 20                	push   0x20
c0008920:	53                   	push   ebx
c0008921:	e8 66 fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008926:	83 c4 28             	add    esp,0x28
c0008929:	5b                   	pop    ebx
c000892a:	c3                   	ret    
c000892b:	83 ec 08             	sub    esp,0x8
c000892e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008931:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008934:	51                   	push   ecx
c0008935:	52                   	push   edx
c0008936:	50                   	push   eax
c0008937:	53                   	push   ebx
c0008938:	e8 4f fd ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008941:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008949:	83 c4 28             	add    esp,0x28
c000894c:	5b                   	pop    ebx
c000894d:	e9 ba fe ff ff       	jmp    c000880c <VgaText::incrementCursor(bool)>

c0008952 <VgaText::putchar(char)>:
c0008952:	57                   	push   edi
c0008953:	56                   	push   esi
c0008954:	53                   	push   ebx
c0008955:	83 ec 10             	sub    esp,0x10
c0008958:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000895c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008960:	89 f8                	mov    eax,edi
c0008962:	0f be c0             	movsx  eax,al
c0008965:	83 f8 5b             	cmp    eax,0x5b
c0008968:	75 18                	jne    c0008982 <VgaText::putchar(char)+0x30>
c000896a:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000896e:	74 20                	je     c0008990 <VgaText::putchar(char)+0x3e>
c0008970:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008976:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000897d:	e9 c1 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008982:	83 f8 1b             	cmp    eax,0x1b
c0008985:	75 09                	jne    c0008990 <VgaText::putchar(char)+0x3e>
c0008987:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000898b:	e9 b3 00 00 00       	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008990:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008993:	84 c9                	test   cl,cl
c0008995:	0f 84 98 00 00 00    	je     c0008a33 <VgaText::putchar(char)+0xe1>
c000899b:	8d 77 c0             	lea    esi,[edi-0x40]
c000899e:	89 f2                	mov    edx,esi
c00089a0:	80 fa 3e             	cmp    dl,0x3e
c00089a3:	77 78                	ja     c0008a1d <VgaText::putchar(char)+0xcb>
c00089a5:	83 f8 6d             	cmp    eax,0x6d
c00089a8:	75 47                	jne    c00089f1 <VgaText::putchar(char)+0x9f>
c00089aa:	31 f6                	xor    esi,esi
c00089ac:	31 d2                	xor    edx,edx
c00089ae:	31 c0                	xor    eax,eax
c00089b0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089b3:	7e 2d                	jle    c00089e2 <VgaText::putchar(char)+0x90>
c00089b5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089ba:	83 fa 3b             	cmp    edx,0x3b
c00089bd:	75 17                	jne    c00089d6 <VgaText::putchar(char)+0x84>
c00089bf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089c3:	50                   	push   eax
c00089c4:	53                   	push   ebx
c00089c5:	e8 40 fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ca:	59                   	pop    ecx
c00089cb:	31 d2                	xor    edx,edx
c00089cd:	5f                   	pop    edi
c00089ce:	31 c0                	xor    eax,eax
c00089d0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089d4:	eb 09                	jmp    c00089df <VgaText::putchar(char)+0x8d>
c00089d6:	6b c0 0a             	imul   eax,eax,0xa
c00089d9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089dd:	88 ca                	mov    dl,cl
c00089df:	46                   	inc    esi
c00089e0:	eb ce                	jmp    c00089b0 <VgaText::putchar(char)+0x5e>
c00089e2:	84 d2                	test   dl,dl
c00089e4:	74 2f                	je     c0008a15 <VgaText::putchar(char)+0xc3>
c00089e6:	50                   	push   eax
c00089e7:	53                   	push   ebx
c00089e8:	e8 1d fb ff ff       	call   c000850a <VgaText::doANSI_SGR(int)>
c00089ed:	58                   	pop    eax
c00089ee:	5a                   	pop    edx
c00089ef:	eb 24                	jmp    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f1:	83 f8 4a             	cmp    eax,0x4a
c00089f4:	75 1f                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089f6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089fa:	75 19                	jne    c0008a15 <VgaText::putchar(char)+0xc3>
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 89 fd ff ff       	call   c000878e <VgaText::clearScreen()>
c0008a05:	83 c4 0c             	add    esp,0xc
c0008a08:	6a 00                	push   0x0
c0008a0a:	6a 00                	push   0x0
c0008a0c:	53                   	push   ebx
c0008a0d:	e8 1a fd ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008a12:	83 c4 10             	add    esp,0x10
c0008a15:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a1b:	eb 26                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a1d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a20:	83 f8 0e             	cmp    eax,0xe
c0008a23:	7f 1e                	jg     c0008a43 <VgaText::putchar(char)+0xf1>
c0008a25:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a28:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a2b:	89 f9                	mov    ecx,edi
c0008a2d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a31:	eb 10                	jmp    c0008a43 <VgaText::putchar(char)+0xf1>
c0008a33:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a36:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a39:	50                   	push   eax
c0008a3a:	53                   	push   ebx
c0008a3b:	e8 42 fe ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a40:	83 c4 10             	add    esp,0x10
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	5b                   	pop    ebx
c0008a47:	5e                   	pop    esi
c0008a48:	5f                   	pop    edi
c0008a49:	c3                   	ret    

c0008a4a <VgaText::putx(unsigned int)>:
c0008a4a:	57                   	push   edi
c0008a4b:	b9 11 00 00 00       	mov    ecx,0x11
c0008a50:	56                   	push   esi
c0008a51:	be ce fc 01 c0       	mov    esi,0xc001fcce
c0008a56:	53                   	push   ebx
c0008a57:	83 ec 20             	sub    esp,0x20
c0008a5a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a5e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a62:	fc                   	cld    
c0008a63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a65:	be 08 00 00 00       	mov    esi,0x8
c0008a6a:	50                   	push   eax
c0008a6b:	50                   	push   eax
c0008a6c:	89 d8                	mov    eax,ebx
c0008a6e:	c1 e3 04             	shl    ebx,0x4
c0008a71:	c1 e8 1c             	shr    eax,0x1c
c0008a74:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a79:	50                   	push   eax
c0008a7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a7e:	e8 cf fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	4e                   	dec    esi
c0008a87:	75 e1                	jne    c0008a6a <VgaText::putx(unsigned int)+0x20>
c0008a89:	83 c4 20             	add    esp,0x20
c0008a8c:	5b                   	pop    ebx
c0008a8d:	5e                   	pop    esi
c0008a8e:	5f                   	pop    edi
c0008a8f:	c3                   	ret    

c0008a90 <VgaText::puts(char const*)>:
c0008a90:	53                   	push   ebx
c0008a91:	83 ec 08             	sub    esp,0x8
c0008a94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a98:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a9b:	85 c0                	test   eax,eax
c0008a9d:	74 12                	je     c0008ab1 <VgaText::puts(char const*)+0x21>
c0008a9f:	43                   	inc    ebx
c0008aa0:	51                   	push   ecx
c0008aa1:	51                   	push   ecx
c0008aa2:	50                   	push   eax
c0008aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa7:	e8 a6 fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008aac:	83 c4 10             	add    esp,0x10
c0008aaf:	eb e7                	jmp    c0008a98 <VgaText::puts(char const*)+0x8>
c0008ab1:	83 c4 08             	add    esp,0x8
c0008ab4:	5b                   	pop    ebx
c0008ab5:	c3                   	ret    

c0008ab6 <VgaText::write(unsigned long long, void*, int*)>:
c0008ab6:	55                   	push   ebp
c0008ab7:	57                   	push   edi
c0008ab8:	56                   	push   esi
c0008ab9:	53                   	push   ebx
c0008aba:	83 ec 0c             	sub    esp,0xc
c0008abd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ac5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ac9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ad3:	39 eb                	cmp    ebx,ebp
c0008ad5:	74 13                	je     c0008aea <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ad7:	43                   	inc    ebx
c0008ad8:	50                   	push   eax
c0008ad9:	50                   	push   eax
c0008ada:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ade:	50                   	push   eax
c0008adf:	56                   	push   esi
c0008ae0:	e8 6d fe ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	eb e9                	jmp    c0008ad3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008aea:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af5:	89 38                	mov    DWORD PTR [eax],edi
c0008af7:	83 c4 0c             	add    esp,0xc
c0008afa:	31 c0                	xor    eax,eax
c0008afc:	5b                   	pop    ebx
c0008afd:	5e                   	pop    esi
c0008afe:	5f                   	pop    edi
c0008aff:	5d                   	pop    ebp
c0008b00:	c3                   	ret    
c0008b01:	90                   	nop

c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b02:	55                   	push   ebp
c0008b03:	57                   	push   edi
c0008b04:	56                   	push   esi
c0008b05:	53                   	push   ebx
c0008b06:	83 ec 0c             	sub    esp,0xc
c0008b09:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b12:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b19:	50                   	push   eax
c0008b1a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1f:	50                   	push   eax
c0008b20:	e8 b3 fa ff ff       	call   c00085d8 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b25:	5a                   	pop    edx
c0008b26:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b2a:	59                   	pop    ecx
c0008b2b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b2e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b32:	0f b7 f6             	movzx  esi,si
c0008b35:	0f b6 e8             	movzx  ebp,al
c0008b38:	01 f6                	add    esi,esi
c0008b3a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b3d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b40:	85 c0                	test   eax,eax
c0008b42:	0f 84 ef 00 00 00    	je     c0008c37 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b48:	83 f8 0d             	cmp    eax,0xd
c0008b4b:	75 0c                	jne    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b4d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b54:	e9 d8 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b59:	83 f8 0a             	cmp    eax,0xa
c0008b5c:	75 44                	jne    c0008ba2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b5e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b61:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b68:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b6b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b6e:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b71:	75 0f                	jne    c0008b82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b79:	53                   	push   ebx
c0008b7a:	e8 6b fa ff ff       	call   c00085ea <VgaText::scrollScreen()>
c0008b7f:	83 c4 10             	add    esp,0x10
c0008b82:	83 ec 0c             	sub    esp,0xc
c0008b85:	53                   	push   ebx
c0008b86:	e8 69 f9 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008b8b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b8f:	83 c4 10             	add    esp,0x10
c0008b92:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b95:	0f b7 f6             	movzx  esi,si
c0008b98:	01 f6                	add    esi,esi
c0008b9a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b9d:	e9 8f 00 00 00       	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008ba2:	83 f8 08             	cmp    eax,0x8
c0008ba5:	75 34                	jne    c0008bdb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008ba7:	51                   	push   ecx
c0008ba8:	51                   	push   ecx
c0008ba9:	6a 01                	push   0x1
c0008bab:	53                   	push   ebx
c0008bac:	e8 af fc ff ff       	call   c0008860 <VgaText::decrementCursor(bool)>
c0008bb1:	5e                   	pop    esi
c0008bb2:	58                   	pop    eax
c0008bb3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bb6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bb9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bbc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bbf:	6a 20                	push   0x20
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 c5 fa ff ff       	call   c000868c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bc7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bcb:	83 c4 20             	add    esp,0x20
c0008bce:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd1:	0f b7 f6             	movzx  esi,si
c0008bd4:	01 f6                	add    esi,esi
c0008bd6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bd9:	eb 56                	jmp    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bdb:	52                   	push   edx
c0008bdc:	52                   	push   edx
c0008bdd:	55                   	push   ebp
c0008bde:	50                   	push   eax
c0008bdf:	e8 98 fa ff ff       	call   c000867c <VgaText::combineCharAndColour(char, unsigned char)>
c0008be4:	83 c4 10             	add    esp,0x10
c0008be7:	66 89 06             	mov    WORD PTR [esi],ax
c0008bea:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bf0:	75 1d                	jne    c0008c0f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bf2:	83 ec 0c             	sub    esp,0xc
c0008bf5:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bf8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bfb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bff:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c03:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c06:	50                   	push   eax
c0008c07:	e8 f0 f0 00 00       	call   c0017cfc <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c0c:	83 c4 20             	add    esp,0x20
c0008c0f:	83 c6 02             	add    esi,0x2
c0008c12:	50                   	push   eax
c0008c13:	50                   	push   eax
c0008c14:	6a 00                	push   0x0
c0008c16:	53                   	push   ebx
c0008c17:	e8 f0 fb ff ff       	call   c000880c <VgaText::incrementCursor(bool)>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c23:	75 0c                	jne    c0008c31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c25:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c29:	0f b7 f6             	movzx  esi,si
c0008c2c:	01 f6                	add    esi,esi
c0008c2e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c31:	47                   	inc    edi
c0008c32:	e9 06 ff ff ff       	jmp    c0008b3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 b4 f8 ff ff       	call   c00084f4 <VgaText::updateCursor()>
c0008c40:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c47:	83 c4 1c             	add    esp,0x1c
c0008c4a:	5b                   	pop    ebx
c0008c4b:	5e                   	pop    esi
c0008c4c:	5f                   	pop    edi
c0008c4d:	5d                   	pop    ebp
c0008c4e:	c3                   	ret    
c0008c4f:	90                   	nop

c0008c50 <VgaText::VgaText(char const*)>:
c0008c50:	56                   	push   esi
c0008c51:	53                   	push   ebx
c0008c52:	83 ec 04             	sub    esp,0x4
c0008c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c59:	83 ec 08             	sub    esp,0x8
c0008c5c:	6a 00                	push   0x0
c0008c5e:	50                   	push   eax
c0008c5f:	e8 6a 05 00 00       	call   c00091ce <UnixFile::UnixFile(int)>
c0008c64:	83 c4 10             	add    esp,0x10
c0008c67:	ba f4 fc 01 c0       	mov    edx,0xc001fcf4
c0008c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c70:	89 10                	mov    DWORD PTR [eax],edx
c0008c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c76:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c81:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ccf:	83 ec 0c             	sub    esp,0xc
c0008cd2:	6a 01                	push   0x1
c0008cd4:	e8 44 09 00 00       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0008cd9:	83 c4 10             	add    esp,0x10
c0008cdc:	89 c2                	mov    edx,eax
c0008cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ce5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cf2:	89 c6                	mov    esi,eax
c0008cf4:	e8 ba f0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0008cf9:	68 05 0c 00 00       	push   0xc05
c0008cfe:	56                   	push   esi
c0008cff:	50                   	push   eax
c0008d00:	53                   	push   ebx
c0008d01:	e8 fe 0f 00 00       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d10:	83 ec 04             	sub    esp,0x4
c0008d13:	68 a0 0f 00 00       	push   0xfa0
c0008d18:	6a 00                	push   0x0
c0008d1a:	50                   	push   eax
c0008d1b:	e8 d0 77 ff ff       	call   c00004f0 <memset>
c0008d20:	83 c4 10             	add    esp,0x10
c0008d23:	83 ec 04             	sub    esp,0x4
c0008d26:	6a 00                	push   0x0
c0008d28:	6a 07                	push   0x7
c0008d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d2e:	e8 6b f8 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d33:	83 c4 10             	add    esp,0x10
c0008d36:	83 ec 04             	sub    esp,0x4
c0008d39:	6a 00                	push   0x0
c0008d3b:	6a 00                	push   0x0
c0008d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d41:	e8 e6 f9 ff ff       	call   c000872c <VgaText::setCursor(int, int)>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	83 ec 0c             	sub    esp,0xc
c0008d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d50:	e8 39 fa ff ff       	call   c000878e <VgaText::clearScreen()>
c0008d55:	83 c4 10             	add    esp,0x10
c0008d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d5c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	05 82 00 00 00       	add    eax,0x82
c0008d69:	83 ec 04             	sub    esp,0x4
c0008d6c:	68 80 00 00 00       	push   0x80
c0008d71:	6a 00                	push   0x0
c0008d73:	50                   	push   eax
c0008d74:	e8 77 77 ff ff       	call   c00004f0 <memset>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 02 01 00 00       	add    eax,0x102
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	90                   	nop
c0008d99:	83 c4 04             	add    esp,0x4
c0008d9c:	5b                   	pop    ebx
c0008d9d:	5e                   	pop    esi
c0008d9e:	c3                   	ret    
c0008d9f:	90                   	nop

c0008da0 <VgaText::receiveKey(unsigned char)>:
c0008da0:	55                   	push   ebp
c0008da1:	57                   	push   edi
c0008da2:	56                   	push   esi
c0008da3:	53                   	push   ebx
c0008da4:	83 ec 2c             	sub    esp,0x2c
c0008da7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008daf:	89 ef                	mov    edi,ebp
c0008db1:	81 e7 ff 00 00 00    	and    edi,0xff
c0008db7:	0f 84 66 01 00 00    	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008dbd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dc3:	83 ff 08             	cmp    edi,0x8
c0008dc6:	75 73                	jne    c0008e3b <VgaText::receiveKey(unsigned char)+0x9b>
c0008dc8:	83 ec 0c             	sub    esp,0xc
c0008dcb:	56                   	push   esi
c0008dcc:	e8 9f 77 ff ff       	call   c0000570 <strlen>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	85 c0                	test   eax,eax
c0008dd6:	0f 84 02 01 00 00    	je     c0008ede <VgaText::receiveKey(unsigned char)+0x13e>
c0008ddc:	50                   	push   eax
c0008ddd:	50                   	push   eax
c0008dde:	6a 08                	push   0x8
c0008de0:	53                   	push   ebx
c0008de1:	e8 6c fb ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008de6:	89 34 24             	mov    DWORD PTR [esp],esi
c0008de9:	e8 82 77 ff ff       	call   c0000570 <strlen>
c0008dee:	83 c4 10             	add    esp,0x10
c0008df1:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008df9:	83 fa 0d             	cmp    edx,0xd
c0008dfc:	89 d0                	mov    eax,edx
c0008dfe:	0f 95 c1             	setne  cl
c0008e01:	83 fa 1f             	cmp    edx,0x1f
c0008e04:	0f 9e c2             	setle  dl
c0008e07:	0f b6 d2             	movzx  edx,dl
c0008e0a:	85 ca                	test   edx,ecx
c0008e0c:	74 17                	je     c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e0e:	83 e8 08             	sub    eax,0x8
c0008e11:	3c 02                	cmp    al,0x2
c0008e13:	76 10                	jbe    c0008e25 <VgaText::receiveKey(unsigned char)+0x85>
c0008e15:	55                   	push   ebp
c0008e16:	55                   	push   ebp
c0008e17:	68 df fc 01 c0       	push   0xc001fcdf
c0008e1c:	53                   	push   ebx
c0008e1d:	e8 6e fc ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0008e22:	83 c4 10             	add    esp,0x10
c0008e25:	83 ec 0c             	sub    esp,0xc
c0008e28:	56                   	push   esi
c0008e29:	e8 42 77 ff ff       	call   c0000570 <strlen>
c0008e2e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e36:	e9 a0 00 00 00       	jmp    c0008edb <VgaText::receiveKey(unsigned char)+0x13b>
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e44:	50                   	push   eax
c0008e45:	e8 26 77 ff ff       	call   c0000570 <strlen>
c0008e4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e51:	e8 1a 77 ff ff       	call   c0000570 <strlen>
c0008e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e5a:	83 c4 10             	add    esp,0x10
c0008e5d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e61:	3d 80 00 00 00       	cmp    eax,0x80
c0008e66:	0f 87 b7 00 00 00    	ja     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008e6c:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e6f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e72:	3c 1e                	cmp    al,0x1e
c0008e74:	0f 96 c0             	setbe  al
c0008e77:	80 fa 01             	cmp    dl,0x1
c0008e7a:	0f 97 c2             	seta   dl
c0008e7d:	0f b6 d2             	movzx  edx,dl
c0008e80:	85 c2                	test   edx,eax
c0008e82:	74 2e                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e84:	83 ff 0d             	cmp    edi,0xd
c0008e87:	74 29                	je     c0008eb2 <VgaText::receiveKey(unsigned char)+0x112>
c0008e89:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e8c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8f:	68 e5 fc 01 c0       	push   0xc001fce5
c0008e94:	53                   	push   ebx
c0008e95:	e8 68 fc ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e9d:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea3:	0f b6 c0             	movzx  eax,al
c0008ea6:	50                   	push   eax
c0008ea7:	53                   	push   ebx
c0008ea8:	e8 d5 f9 ff ff       	call   c0008882 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ead:	83 c4 20             	add    esp,0x20
c0008eb0:	eb 11                	jmp    c0008ec3 <VgaText::receiveKey(unsigned char)+0x123>
c0008eb2:	89 e8                	mov    eax,ebp
c0008eb4:	51                   	push   ecx
c0008eb5:	0f be c0             	movsx  eax,al
c0008eb8:	51                   	push   ecx
c0008eb9:	50                   	push   eax
c0008eba:	53                   	push   ebx
c0008ebb:	e8 92 fa ff ff       	call   c0008952 <VgaText::putchar(char)>
c0008ec0:	83 c4 10             	add    esp,0x10
c0008ec3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ece:	52                   	push   edx
c0008ecf:	52                   	push   edx
c0008ed0:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ed4:	50                   	push   eax
c0008ed5:	56                   	push   esi
c0008ed6:	e8 65 79 ff ff       	call   c0000840 <strcat>
c0008edb:	83 c4 10             	add    esp,0x10
c0008ede:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008ee4:	b0 01                	mov    al,0x1
c0008ee6:	83 ff 1c             	cmp    edi,0x1c
c0008ee9:	77 0e                	ja     c0008ef9 <VgaText::receiveKey(unsigned char)+0x159>
c0008eeb:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef0:	89 f9                	mov    ecx,edi
c0008ef2:	d3 e8                	shr    eax,cl
c0008ef4:	f7 d0                	not    eax
c0008ef6:	83 e0 01             	and    eax,0x1
c0008ef9:	84 c0                	test   al,al
c0008efb:	74 04                	je     c0008f01 <VgaText::receiveKey(unsigned char)+0x161>
c0008efd:	84 d2                	test   dl,dl
c0008eff:	74 22                	je     c0008f23 <VgaText::receiveKey(unsigned char)+0x183>
c0008f01:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f07:	50                   	push   eax
c0008f08:	50                   	push   eax
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	e8 30 79 ff ff       	call   c0000840 <strcat>
c0008f10:	83 c4 0c             	add    esp,0xc
c0008f13:	68 80 00 00 00       	push   0x80
c0008f18:	6a 00                	push   0x0
c0008f1a:	56                   	push   esi
c0008f1b:	e8 d0 75 ff ff       	call   c00004f0 <memset>
c0008f20:	83 c4 10             	add    esp,0x10
c0008f23:	83 c4 2c             	add    esp,0x2c
c0008f26:	5b                   	pop    ebx
c0008f27:	5e                   	pop    esi
c0008f28:	5f                   	pop    edi
c0008f29:	5d                   	pop    ebp
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <VgaText::doUpdate()>:
c0008f2c:	c3                   	ret    

c0008f2d <newTerminal(char*)>:
c0008f2d:	83 ec 28             	sub    esp,0x28
c0008f30:	68 84 01 00 00       	push   0x184
c0008f35:	e8 74 eb ff ff       	call   c0007aae <malloc>
c0008f3a:	5a                   	pop    edx
c0008f3b:	59                   	pop    ecx
c0008f3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f40:	50                   	push   eax
c0008f41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f45:	e8 06 fd ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0008f4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f4e:	83 c4 2c             	add    esp,0x2c
c0008f51:	c3                   	ret    
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::TSS()>:
c0008f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f5f:	90                   	nop
c0008f60:	c3                   	ret    
c0008f61:	90                   	nop
c0008f62:	66 90                	xchg   ax,ax

c0008f64 <TSS::setESP(unsigned long)>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f73:	90                   	nop
c0008f74:	5d                   	pop    ebp
c0008f75:	c3                   	ret    
c0008f76:	66 90                	xchg   ax,ax

c0008f78 <TSS::flush()>:
c0008f78:	55                   	push   ebp
c0008f79:	89 e5                	mov    ebp,esp
c0008f7b:	83 ec 10             	sub    esp,0x10
c0008f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f83:	83 c8 03             	or     eax,0x3
c0008f86:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f8a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f8e:	66 89 d0             	mov    ax,dx
c0008f91:	0f 00 d8             	ltr    ax
c0008f94:	90                   	nop
c0008f95:	c9                   	leave  
c0008f96:	c3                   	ret    
c0008f97:	90                   	nop

c0008f98 <TSS::setup(unsigned long, unsigned long)>:
c0008f98:	55                   	push   ebp
c0008f99:	89 e5                	mov    ebp,esp
c0008f9b:	83 ec 18             	sub    esp,0x18
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	6a 68                	push   0x68
c0008fa3:	e8 06 eb ff ff       	call   c0007aae <malloc>
c0008fa8:	83 c4 10             	add    esp,0x10
c0008fab:	89 c2                	mov    edx,eax
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb9:	83 ec 04             	sub    esp,0x4
c0008fbc:	6a 68                	push   0x68
c0008fbe:	6a 00                	push   0x0
c0008fc0:	50                   	push   eax
c0008fc1:	e8 2a 75 ff ff       	call   c00004f0 <memset>
c0008fc6:	83 c4 10             	add    esp,0x10
c0008fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fea:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fff:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009017:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000901d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009023:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000903e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009044:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009047:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000904a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000904d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009053:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000905a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009060:	0f 20 da             	mov    edx,cr3
c0009063:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009066:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009069:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000906c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000906f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	50                   	push   eax
c0009076:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009079:	50                   	push   eax
c000907a:	e8 9b e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	6a 68                	push   0x68
c0009087:	8d 45 ec             	lea    eax,[ebp-0x14]
c000908a:	50                   	push   eax
c000908b:	e8 a6 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009097:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000909a:	83 e0 0f             	and    eax,0xf
c000909d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00090a3:	83 c8 40             	or     eax,0x40
c00090a6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b4:	05 78 01 00 00       	add    eax,0x178
c00090b9:	83 ec 04             	sub    esp,0x4
c00090bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090c2:	50                   	push   eax
c00090c3:	e8 a2 e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090c8:	83 c4 10             	add    esp,0x10
c00090cb:	89 c2                	mov    edx,eax
c00090cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d0:	89 10                	mov    DWORD PTR [eax],edx
c00090d2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090dd:	05 78 01 00 00       	add    eax,0x178
c00090e2:	83 ec 0c             	sub    esp,0xc
c00090e5:	50                   	push   eax
c00090e6:	e8 a9 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090eb:	83 c4 10             	add    esp,0x10
c00090ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	c9                   	leave  
c00090f4:	c3                   	ret    
c00090f5:	90                   	nop

c00090f6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009101:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009106:	75 08                	jne    c0009110 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009108:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000910e:	eb 38                	jmp    c0009148 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009110:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009115:	75 17                	jne    c000912e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009117:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000911c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000911f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009125:	8b 10                	mov    edx,DWORD PTR [eax]
c0009127:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000912b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000912e:	89 c1                	mov    ecx,eax
c0009130:	83 e1 fd             	and    ecx,0xfffffffd
c0009133:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009139:	74 cd                	je     c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000913b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009140:	83 e0 ef             	and    eax,0xffffffef
c0009143:	83 f8 08             	cmp    eax,0x8
c0009146:	76 c0                	jbe    c0009108 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009148:	31 c0                	xor    eax,eax
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::isAtty()>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009153:	31 c0                	xor    eax,eax
c0009155:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000915b:	74 09                	je     c0009166 <ReservedFilename::isAtty()+0x1a>
c000915d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009163:	0f 94 c0             	sete   al
c0009166:	c3                   	ret    
c0009167:	90                   	nop

c0009168 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000916c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009173:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009177:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000917c:	75 08                	jne    c0009186 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000917e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009184:	eb 3d                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009186:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000918b:	75 17                	jne    c00091a4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000918d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000919b:	8b 10                	mov    edx,DWORD PTR [eax]
c000919d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091a1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091a4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091a9:	75 04                	jne    c00091af <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091ab:	89 0a                	mov    DWORD PTR [edx],ecx
c00091ad:	eb 14                	jmp    c00091c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091af:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091b4:	74 c8                	je     c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091bb:	83 e0 ef             	and    eax,0xffffffef
c00091be:	83 f8 08             	cmp    eax,0x8
c00091c1:	76 bb                	jbe    c000917e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091c3:	31 c0                	xor    eax,eax
c00091c5:	c3                   	ret    

c00091c6 <UnixFile::getFileDescriptor()>:
c00091c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091cd:	c3                   	ret    

c00091ce <UnixFile::UnixFile(int)>:
c00091ce:	53                   	push   ebx
c00091cf:	83 ec 28             	sub    esp,0x28
c00091d2:	ba bc fd 01 c0       	mov    edx,0xc001fdbc
c00091d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091db:	89 10                	mov    DWORD PTR [eax],edx
c00091dd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091e5:	0f 8f 90 01 00 00    	jg     c000937b <UnixFile::UnixFile(int)+0x1ad>
c00091eb:	a1 80 1e 02 c0       	mov    eax,ds:0xc0021e80
c00091f0:	8d 50 01             	lea    edx,[eax+0x1]
c00091f3:	89 15 80 1e 02 c0    	mov    DWORD PTR ds:0xc0021e80,edx
c00091f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091fd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009200:	83 ec 08             	sub    esp,0x8
c0009203:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009207:	68 98 4f 02 c0       	push   0xc0024f98
c000920c:	e8 87 56 01 00       	call   c001e898 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009219:	83 f0 01             	xor    eax,0x1
c000921c:	0f b6 c0             	movzx  eax,al
c000921f:	85 c0                	test   eax,eax
c0009221:	0f 84 55 01 00 00    	je     c000937c <UnixFile::UnixFile(int)+0x1ae>
c0009227:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000922e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009236:	83 ec 0c             	sub    esp,0xc
c0009239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000923d:	e8 6c e8 ff ff       	call   c0007aae <malloc>
c0009242:	83 c4 10             	add    esp,0x10
c0009245:	89 c3                	mov    ebx,eax
c0009247:	83 ec 08             	sub    esp,0x8
c000924a:	68 03 ff ff 0f       	push   0xfffff03
c000924f:	53                   	push   ebx
c0009250:	e8 2d 01 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009255:	83 c4 10             	add    esp,0x10
c0009258:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000925e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926d:	e8 3c e8 ff ff       	call   c0007aae <malloc>
c0009272:	83 c4 10             	add    esp,0x10
c0009275:	89 c3                	mov    ebx,eax
c0009277:	83 ec 08             	sub    esp,0x8
c000927a:	68 01 ff ff 0f       	push   0xfffff01
c000927f:	53                   	push   ebx
c0009280:	e8 fd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000928e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009296:	83 ec 0c             	sub    esp,0xc
c0009299:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000929d:	e8 0c e8 ff ff       	call   c0007aae <malloc>
c00092a2:	83 c4 10             	add    esp,0x10
c00092a5:	89 c3                	mov    ebx,eax
c00092a7:	83 ec 08             	sub    esp,0x8
c00092aa:	68 00 ff ff 0f       	push   0xfffff00
c00092af:	53                   	push   ebx
c00092b0:	e8 cd 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092b5:	83 c4 10             	add    esp,0x10
c00092b8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092be:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092c6:	83 ec 0c             	sub    esp,0xc
c00092c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092cd:	e8 dc e7 ff ff       	call   c0007aae <malloc>
c00092d2:	83 c4 10             	add    esp,0x10
c00092d5:	89 c3                	mov    ebx,eax
c00092d7:	83 ec 08             	sub    esp,0x8
c00092da:	68 02 ff ff 0f       	push   0xfffff02
c00092df:	53                   	push   ebx
c00092e0:	e8 9d 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c00092e5:	83 c4 10             	add    esp,0x10
c00092e8:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092ee:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092f6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092fb:	7f 7f                	jg     c000937c <UnixFile::UnixFile(int)+0x1ae>
c00092fd:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009305:	83 ec 0c             	sub    esp,0xc
c0009308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000930c:	e8 9d e7 ff ff       	call   c0007aae <malloc>
c0009311:	83 c4 10             	add    esp,0x10
c0009314:	89 c3                	mov    ebx,eax
c0009316:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000931a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000931f:	83 ec 08             	sub    esp,0x8
c0009322:	50                   	push   eax
c0009323:	53                   	push   ebx
c0009324:	e8 59 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009329:	83 c4 10             	add    esp,0x10
c000932c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009330:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009337:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000933f:	83 ec 0c             	sub    esp,0xc
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 63 e7 ff ff       	call   c0007aae <malloc>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	89 c3                	mov    ebx,eax
c0009350:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009354:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009359:	83 ec 08             	sub    esp,0x8
c000935c:	50                   	push   eax
c000935d:	53                   	push   ebx
c000935e:	e8 1f 00 00 00       	call   c0009382 <ReservedFilename::ReservedFilename(int)>
c0009363:	83 c4 10             	add    esp,0x10
c0009366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000936a:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009371:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009376:	e9 7b ff ff ff       	jmp    c00092f6 <UnixFile::UnixFile(int)+0x128>
c000937b:	90                   	nop
c000937c:	83 c4 28             	add    esp,0x28
c000937f:	5b                   	pop    ebx
c0009380:	c3                   	ret    
c0009381:	90                   	nop

c0009382 <ReservedFilename::ReservedFilename(int)>:
c0009382:	83 ec 0c             	sub    esp,0xc
c0009385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009389:	83 ec 08             	sub    esp,0x8
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	50                   	push   eax
c0009391:	e8 38 fe ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c0009396:	83 c4 10             	add    esp,0x10
c0009399:	ba d8 fd 01 c0       	mov    edx,0xc001fdd8
c000939e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a2:	89 10                	mov    DWORD PTR [eax],edx
c00093a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00093ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093af:	90                   	nop
c00093b0:	83 c4 0c             	add    esp,0xc
c00093b3:	c3                   	ret    

c00093b4 <UnixFile::~UnixFile()>:
c00093b4:	83 ec 1c             	sub    esp,0x1c
c00093b7:	ba bc fd 01 c0       	mov    edx,0xc001fdbc
c00093bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093c9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ce:	7f 76                	jg     c0009446 <UnixFile::~UnixFile()+0x92>
c00093d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	68 98 4f 02 c0       	push   0xc0024f98
c00093e0:	e8 87 55 01 00       	call   c001e96c <LinkedList<UnixFile>::getFirstElement()>
c00093e5:	83 c4 10             	add    esp,0x10
c00093e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	68 98 4f 02 c0       	push   0xc0024f98
c00093f4:	e8 7b 55 01 00       	call   c001e974 <LinkedList<UnixFile>::removeFirst()>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009400:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009404:	74 43                	je     c0009449 <UnixFile::~UnixFile()+0x95>
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000940d:	68 98 4f 02 c0       	push   0xc0024f98
c0009412:	e8 81 54 01 00       	call   c001e898 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000941e:	8d 50 01             	lea    edx,[eax+0x1]
c0009421:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009425:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000942a:	0f 94 c0             	sete   al
c000942d:	0f b6 c0             	movzx  eax,al
c0009430:	85 c0                	test   eax,eax
c0009432:	74 a4                	je     c00093d8 <UnixFile::~UnixFile()+0x24>
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	68 94 fd 01 c0       	push   0xc001fd94
c000943c:	e8 32 74 00 00       	call   c0010873 <KePanic(char const*)>
c0009441:	83 c4 10             	add    esp,0x10
c0009444:	eb 92                	jmp    c00093d8 <UnixFile::~UnixFile()+0x24>
c0009446:	90                   	nop
c0009447:	eb 01                	jmp    c000944a <UnixFile::~UnixFile()+0x96>
c0009449:	90                   	nop
c000944a:	90                   	nop
c000944b:	83 c4 1c             	add    esp,0x1c
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <UnixFile::~UnixFile()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	83 ec 0c             	sub    esp,0xc
c0009456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945a:	e8 55 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000945f:	83 c4 10             	add    esp,0x10
c0009462:	83 ec 08             	sub    esp,0x8
c0009465:	6a 0c                	push   0xc
c0009467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000946b:	e8 f9 13 00 00       	call   c000a869 <operator delete(void*, unsigned long)>
c0009470:	83 c4 10             	add    esp,0x10
c0009473:	83 c4 0c             	add    esp,0xc
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 0c             	sub    esp,0xc
c000947b:	ba d8 fd 01 c0       	mov    edx,0xc001fdd8
c0009480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	50                   	push   eax
c000948e:	e8 21 ff ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c0009493:	83 c4 10             	add    esp,0x10
c0009496:	90                   	nop
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    
c000949b:	90                   	nop

c000949c <ReservedFilename::~ReservedFilename()>:
c000949c:	83 ec 0c             	sub    esp,0xc
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a6:	e8 cd ff ff ff       	call   c0009478 <ReservedFilename::~ReservedFilename()>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	83 ec 08             	sub    esp,0x8
c00094b1:	6a 0c                	push   0xc
c00094b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094b7:	e8 ad 13 00 00       	call   c000a869 <operator delete(void*, unsigned long)>
c00094bc:	83 c4 10             	add    esp,0x10
c00094bf:	83 c4 0c             	add    esp,0xc
c00094c2:	c3                   	ret    

c00094c3 <getFromFileDescriptor(int)>:
c00094c3:	53                   	push   ebx
c00094c4:	83 ec 08             	sub    esp,0x8
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094d1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094d7:	7f 2c                	jg     c0009505 <getFromFileDescriptor(int)+0x42>
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	68 98 4f 02 c0       	push   0xc0024f98
c00094e1:	e8 86 54 01 00       	call   c001e96c <LinkedList<UnixFile>::getFirstElement()>
c00094e6:	83 c4 10             	add    esp,0x10
c00094e9:	85 c0                	test   eax,eax
c00094eb:	75 04                	jne    c00094f1 <getFromFileDescriptor(int)+0x2e>
c00094ed:	31 c0                	xor    eax,eax
c00094ef:	eb 6e                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c00094f1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094f4:	74 69                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c00094f6:	52                   	push   edx
c00094f7:	52                   	push   edx
c00094f8:	50                   	push   eax
c00094f9:	68 98 4f 02 c0       	push   0xc0024f98
c00094fe:	e8 13 55 01 00       	call   c001ea16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009503:	eb e1                	jmp    c00094e6 <getFromFileDescriptor(int)+0x23>
c0009505:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c000950a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009510:	74 4d                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009512:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009517:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000951d:	74 40                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000951f:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009524:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000952a:	74 33                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c000952c:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009531:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009537:	74 26                	je     c000955f <getFromFileDescriptor(int)+0x9c>
c0009539:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000953f:	83 f8 08             	cmp    eax,0x8
c0009542:	77 09                	ja     c000954d <getFromFileDescriptor(int)+0x8a>
c0009544:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000954b:	eb 12                	jmp    c000955f <getFromFileDescriptor(int)+0x9c>
c000954d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009553:	83 fb 08             	cmp    ebx,0x8
c0009556:	77 95                	ja     c00094ed <getFromFileDescriptor(int)+0x2a>
c0009558:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000955f:	83 c4 08             	add    esp,0x8
c0009562:	5b                   	pop    ebx
c0009563:	c3                   	ret    

c0009564 <__static_initialization_and_destruction_0(int, int)>:
c0009564:	83 ec 0c             	sub    esp,0xc
c0009567:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000956c:	75 34                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000956e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009576:	75 2a                	jne    c00095a2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009578:	83 ec 0c             	sub    esp,0xc
c000957b:	68 98 4f 02 c0       	push   0xc0024f98
c0009580:	e8 d1 52 01 00       	call   c001e856 <LinkedList<UnixFile>::LinkedList()>
c0009585:	83 c4 10             	add    esp,0x10
c0009588:	83 ec 04             	sub    esp,0x4
c000958b:	68 0c 1e 02 c0       	push   0xc0021e0c
c0009590:	68 98 4f 02 c0       	push   0xc0024f98
c0009595:	68 54 e8 01 c0       	push   0xc001e854
c000959a:	e8 7a 12 00 00       	call   c000a819 <__cxa_atexit>
c000959f:	83 c4 10             	add    esp,0x10
c00095a2:	90                   	nop
c00095a3:	83 c4 0c             	add    esp,0xc
c00095a6:	c3                   	ret    

c00095a7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095a7:	83 ec 0c             	sub    esp,0xc
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	68 ff ff 00 00       	push   0xffff
c00095b2:	6a 01                	push   0x1
c00095b4:	e8 ab ff ff ff       	call   c0009564 <__static_initialization_and_destruction_0(int, int)>
c00095b9:	83 c4 10             	add    esp,0x10
c00095bc:	83 c4 0c             	add    esp,0xc
c00095bf:	c3                   	ret    

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 88 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e88
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095cf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d5:	89 d8                	mov    eax,ebx
c00095d7:	d1 e8                	shr    eax,1
c00095d9:	01 d0                	add    eax,edx
c00095db:	80 e3 01             	and    bl,0x1
c00095de:	8a 10                	mov    dl,BYTE PTR [eax]
c00095e0:	75 09                	jne    c00095eb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095e2:	83 e2 f0             	and    edx,0xfffffff0
c00095e5:	09 ca                	or     edx,ecx
c00095e7:	88 10                	mov    BYTE PTR [eax],dl
c00095e9:	5b                   	pop    ebx
c00095ea:	c3                   	ret    
c00095eb:	83 e2 0f             	and    edx,0xf
c00095ee:	0f b6 c9             	movzx  ecx,cl
c00095f1:	c1 e1 04             	shl    ecx,0x4
c00095f4:	09 ca                	or     edx,ecx
c00095f6:	88 10                	mov    BYTE PTR [eax],dl
c00095f8:	5b                   	pop    ebx
c00095f9:	c3                   	ret    

c00095fa <Virt::getPageState(unsigned long)>:
c00095fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fe:	8b 0d 88 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e88
c0009604:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000960a:	89 d0                	mov    eax,edx
c000960c:	d1 e8                	shr    eax,1
c000960e:	80 e2 01             	and    dl,0x1
c0009611:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009614:	74 03                	je     c0009619 <Virt::getPageState(unsigned long)+0x1f>
c0009616:	c1 e8 04             	shr    eax,0x4
c0009619:	83 e0 0f             	and    eax,0xf
c000961c:	c3                   	ret    

c000961d <Virt::allocateKernelVirtualPages(int)>:
c000961d:	55                   	push   ebp
c000961e:	31 ed                	xor    ebp,ebp
c0009620:	57                   	push   edi
c0009621:	31 ff                	xor    edi,edi
c0009623:	56                   	push   esi
c0009624:	53                   	push   ebx
c0009625:	31 db                	xor    ebx,ebx
c0009627:	83 ec 0c             	sub    esp,0xc
c000962a:	8b 35 84 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e84
c0009630:	56                   	push   esi
c0009631:	e8 c4 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009636:	5a                   	pop    edx
c0009637:	84 c0                	test   al,al
c0009639:	75 41                	jne    c000967c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000963b:	85 db                	test   ebx,ebx
c000963d:	75 02                	jne    c0009641 <Virt::allocateKernelVirtualPages(int)+0x24>
c000963f:	89 f5                	mov    ebp,esi
c0009641:	83 c3 01             	add    ebx,0x1
c0009644:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009648:	74 5f                	je     c00096a9 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000964a:	83 c6 01             	add    esi,0x1
c000964d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009653:	76 34                	jbe    c0009689 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009655:	c7 05 84 1e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021e84,0xc8000
c000965f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009665:	75 2a                	jne    c0009691 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009667:	be 00 80 0c 00       	mov    esi,0xc8000
c000966c:	bf 01 00 00 00       	mov    edi,0x1
c0009671:	56                   	push   esi
c0009672:	e8 83 ff ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009677:	5a                   	pop    edx
c0009678:	84 c0                	test   al,al
c000967a:	74 bf                	je     c000963b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000967c:	31 db                	xor    ebx,ebx
c000967e:	83 c6 01             	add    esi,0x1
c0009681:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009687:	77 cc                	ja     c0009655 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009689:	89 35 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,esi
c000968f:	eb 9f                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009691:	83 ec 0c             	sub    esp,0xc
c0009694:	68 ec fd 01 c0       	push   0xc001fdec
c0009699:	e8 d5 71 00 00       	call   c0010873 <KePanic(char const*)>
c000969e:	8b 35 84 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e84
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	eb 87                	jmp    c0009630 <Virt::allocateKernelVirtualPages(int)+0x13>
c00096a9:	89 2d 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,ebp
c00096af:	83 fb 01             	cmp    ebx,0x1
c00096b2:	74 6f                	je     c0009723 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b8:	85 c9                	test   ecx,ecx
c00096ba:	74 49                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096bc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096c0:	89 e8                	mov    eax,ebp
c00096c2:	31 db                	xor    ebx,ebx
c00096c4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096c7:	eb 18                	jmp    c00096e1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096c9:	6a 01                	push   0x1
c00096cb:	83 c3 01             	add    ebx,0x1
c00096ce:	50                   	push   eax
c00096cf:	e8 ec fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d4:	58                   	pop    eax
c00096d5:	5a                   	pop    edx
c00096d6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096da:	74 29                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096dc:	a1 84 1e 02 c0       	mov    eax,ds:0xc0021e84
c00096e1:	8d 50 01             	lea    edx,[eax+0x1]
c00096e4:	85 db                	test   ebx,ebx
c00096e6:	89 15 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,edx
c00096ec:	74 24                	je     c0009712 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096ee:	39 df                	cmp    edi,ebx
c00096f0:	75 d7                	jne    c00096c9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096f2:	6a 03                	push   0x3
c00096f4:	83 c3 01             	add    ebx,0x1
c00096f7:	50                   	push   eax
c00096f8:	e8 c3 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096fd:	59                   	pop    ecx
c00096fe:	5e                   	pop    esi
c00096ff:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009703:	75 d7                	jne    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009705:	83 c4 0c             	add    esp,0xc
c0009708:	89 e8                	mov    eax,ebp
c000970a:	5b                   	pop    ebx
c000970b:	c1 e0 0c             	shl    eax,0xc
c000970e:	5e                   	pop    esi
c000970f:	5f                   	pop    edi
c0009710:	5d                   	pop    ebp
c0009711:	c3                   	ret    
c0009712:	6a 02                	push   0x2
c0009714:	bb 01 00 00 00       	mov    ebx,0x1
c0009719:	50                   	push   eax
c000971a:	e8 a1 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	58                   	pop    eax
c0009720:	5a                   	pop    edx
c0009721:	eb b9                	jmp    c00096dc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009723:	6a 04                	push   0x4
c0009725:	8d 45 01             	lea    eax,[ebp+0x1]
c0009728:	55                   	push   ebp
c0009729:	a3 84 1e 02 c0       	mov    ds:0xc0021e84,eax
c000972e:	e8 8d fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	5b                   	pop    ebx
c0009734:	89 e8                	mov    eax,ebp
c0009736:	5e                   	pop    esi
c0009737:	c1 e0 0c             	shl    eax,0xc
c000973a:	83 c4 0c             	add    esp,0xc
c000973d:	5b                   	pop    ebx
c000973e:	5e                   	pop    esi
c000973f:	5f                   	pop    edi
c0009740:	5d                   	pop    ebp
c0009741:	c3                   	ret    

c0009742 <Virt::freeSwapfilePage(unsigned long)>:
c0009742:	53                   	push   ebx
c0009743:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009749:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974d:	b8 01 00 00 00       	mov    eax,0x1
c0009752:	89 cb                	mov    ebx,ecx
c0009754:	d3 e0                	shl    eax,cl
c0009756:	c1 eb 05             	shr    ebx,0x5
c0009759:	f7 d0                	not    eax
c000975b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000975e:	21 c1                	and    ecx,eax
c0009760:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009763:	5b                   	pop    ebx
c0009764:	c3                   	ret    

c0009765 <Virt::swapIDToSector(unsigned long)>:
c0009765:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009769:	8b 15 8c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e8c
c000976f:	8b 0d 94 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e94
c0009775:	0f af c2             	imul   eax,edx
c0009778:	01 c8                	add    eax,ecx
c000977a:	c3                   	ret    

c000977b <Virt::allocateSwapfilePage()>:
c000977b:	55                   	push   ebp
c000977c:	31 d2                	xor    edx,edx
c000977e:	57                   	push   edi
c000977f:	56                   	push   esi
c0009780:	53                   	push   ebx
c0009781:	83 ec 0c             	sub    esp,0xc
c0009784:	8b 0d 8c 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e8c
c000978a:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c000978f:	f7 f1                	div    ecx
c0009791:	39 0d 90 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e90,ecx
c0009797:	72 2f                	jb     c00097c8 <Virt::allocateSwapfilePage()+0x4d>
c0009799:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000979f:	8b 16                	mov    edx,DWORD PTR [esi]
c00097a1:	f6 c2 01             	test   dl,0x1
c00097a4:	74 3e                	je     c00097e4 <Virt::allocateSwapfilePage()+0x69>
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	bf 01 00 00 00       	mov    edi,0x1
c00097ad:	eb 12                	jmp    c00097c1 <Virt::allocateSwapfilePage()+0x46>
c00097af:	89 fd                	mov    ebp,edi
c00097b1:	89 ca                	mov    edx,ecx
c00097b3:	d3 e5                	shl    ebp,cl
c00097b5:	c1 ea 05             	shr    edx,0x5
c00097b8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097bd:	85 ea                	test   edx,ebp
c00097bf:	74 2c                	je     c00097ed <Virt::allocateSwapfilePage()+0x72>
c00097c1:	83 c1 01             	add    ecx,0x1
c00097c4:	39 c8                	cmp    eax,ecx
c00097c6:	77 e7                	ja     c00097af <Virt::allocateSwapfilePage()+0x34>
c00097c8:	83 ec 0c             	sub    esp,0xc
c00097cb:	68 53 ff 01 c0       	push   0xc001ff53
c00097d0:	e8 9e 70 00 00       	call   c0010873 <KePanic(char const*)>
c00097d5:	83 c4 10             	add    esp,0x10
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	83 c4 0c             	add    esp,0xc
c00097dd:	89 c8                	mov    eax,ecx
c00097df:	5b                   	pop    ebx
c00097e0:	5e                   	pop    esi
c00097e1:	5f                   	pop    edi
c00097e2:	5d                   	pop    ebp
c00097e3:	c3                   	ret    
c00097e4:	89 f3                	mov    ebx,esi
c00097e6:	bd 01 00 00 00       	mov    ebp,0x1
c00097eb:	31 c9                	xor    ecx,ecx
c00097ed:	09 ea                	or     edx,ebp
c00097ef:	89 c8                	mov    eax,ecx
c00097f1:	89 13                	mov    DWORD PTR [ebx],edx
c00097f3:	83 c4 0c             	add    esp,0xc
c00097f6:	5b                   	pop    ebx
c00097f7:	5e                   	pop    esi
c00097f8:	5f                   	pop    edi
c00097f9:	5d                   	pop    ebp
c00097fa:	c3                   	ret    

c00097fb <Virt::virtualMemorySetup()>:
c00097fb:	53                   	push   ebx
c00097fc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009801:	6a 0f                	push   0xf
c0009803:	53                   	push   ebx
c0009804:	83 c3 01             	add    ebx,0x1
c0009807:	e8 b4 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980c:	58                   	pop    eax
c000980d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009813:	5a                   	pop    edx
c0009814:	75 eb                	jne    c0009801 <Virt::virtualMemorySetup()+0x6>
c0009816:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000981b:	6a 00                	push   0x0
c000981d:	53                   	push   ebx
c000981e:	83 c3 01             	add    ebx,0x1
c0009821:	e8 9a fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009826:	59                   	pop    ecx
c0009827:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000982d:	58                   	pop    eax
c000982e:	75 eb                	jne    c000981b <Virt::virtualMemorySetup()+0x20>
c0009830:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009835:	6a 0f                	push   0xf
c0009837:	53                   	push   ebx
c0009838:	83 c3 01             	add    ebx,0x1
c000983b:	e8 80 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009840:	58                   	pop    eax
c0009841:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009847:	5a                   	pop    edx
c0009848:	75 eb                	jne    c0009835 <Virt::virtualMemorySetup()+0x3a>
c000984a:	5b                   	pop    ebx
c000984b:	c3                   	ret    

c000984c <Virt::setupPageSwapping(int)>:
c000984c:	53                   	push   ebx
c000984d:	83 ec 0c             	sub    esp,0xc
c0009850:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009854:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009859:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009861:	53                   	push   ebx
c0009862:	c1 e3 0b             	shl    ebx,0xb
c0009865:	68 6a ff 01 c0       	push   0xc001ff6a
c000986a:	50                   	push   eax
c000986b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986e:	89 1d 90 1e 02 c0    	mov    DWORD PTR ds:0xc0021e90,ebx
c0009874:	c6 05 98 1e 02 c0 43 	mov    BYTE PTR ds:0xc0021e98,0x43
c000987b:	c1 eb 08             	shr    ebx,0x8
c000987e:	a3 94 1e 02 c0       	mov    ds:0xc0021e94,eax
c0009883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009886:	c7 05 8c 1e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021e8c,0x8
c0009890:	e8 19 e2 ff ff       	call   c0007aae <malloc>
c0009895:	83 c4 0c             	add    esp,0xc
c0009898:	89 c1                	mov    ecx,eax
c000989a:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000989f:	31 d2                	xor    edx,edx
c00098a1:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c00098a6:	f7 35 8c 1e 02 c0    	div    DWORD PTR ds:0xc0021e8c
c00098ac:	c1 e8 05             	shr    eax,0x5
c00098af:	50                   	push   eax
c00098b0:	6a 00                	push   0x0
c00098b2:	51                   	push   ecx
c00098b3:	e8 38 6c ff ff       	call   c00004f0 <memset>
c00098b8:	83 c4 18             	add    esp,0x18
c00098bb:	5b                   	pop    ebx
c00098bc:	c3                   	ret    
c00098bd:	90                   	nop

c00098be <VAS::VAS(VAS*)>:
c00098be:	83 ec 0c             	sub    esp,0xc
c00098c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098d0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098d7:	83 ec 0c             	sub    esp,0xc
c00098da:	68 0c fe 01 c0       	push   0xc001fe0c
c00098df:	e8 8f 6f 00 00       	call   c0010873 <KePanic(char const*)>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	90                   	nop
c00098e8:	83 c4 0c             	add    esp,0xc
c00098eb:	c3                   	ret    

c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098f5:	89 c2                	mov    edx,eax
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	c1 ea 16             	shr    edx,0x16
c00098fd:	83 f9 01             	cmp    ecx,0x1
c0009900:	19 c9                	sbb    ecx,ecx
c0009902:	c1 e2 0c             	shl    edx,0xc
c0009905:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990b:	25 fc 0f 00 00       	and    eax,0xffc
c0009910:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009917:	01 d0                	add    eax,edx
c0009919:	c3                   	ret    

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 e9 0a             	shr    ecx,0xa
c0009923:	c1 ea 16             	shr    edx,0x16
c0009926:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000992c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009932:	c1 e0 0c             	shl    eax,0xc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	55                   	push   ebp
c000993a:	57                   	push   edi
c000993b:	bf 01 00 00 00       	mov    edi,0x1
c0009940:	56                   	push   esi
c0009941:	53                   	push   ebx
c0009942:	83 ec 0c             	sub    esp,0xc
c0009945:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009949:	c1 ee 0c             	shr    esi,0xc
c000994c:	eb 3a                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000994e:	83 ec 08             	sub    esp,0x8
c0009951:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009956:	55                   	push   ebp
c0009957:	50                   	push   eax
c0009958:	e8 bd ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995d:	83 c4 10             	add    esp,0x10
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 5a                	jne    c00099c1 <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009967:	83 fb 04             	cmp    ebx,0x4
c000996a:	74 6b                	je     c00099d7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000996c:	83 fb 02             	cmp    ebx,0x2
c000996f:	74 7f                	je     c00099f0 <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 a3 00 00 00    	je     c0009a1d <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 87 00 00 00    	je     c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 6a fc ff ff       	call   c00095fa <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 b3                	jne    c000994e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 81 ff 01 c0       	push   0xc001ff81
c00099a3:	e8 cb 6e 00 00       	call   c0010873 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 63 ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00099bc:	f6 c4 04             	test   ah,0x4
c00099bf:	74 c2                	je     c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099c1:	83 ec 0c             	sub    esp,0xc
c00099c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099c9:	50                   	push   eax
c00099ca:	e8 7b e3 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c00099cf:	83 c4 10             	add    esp,0x10
c00099d2:	83 fb 04             	cmp    ebx,0x4
c00099d5:	75 95                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099d7:	83 e7 01             	and    edi,0x1
c00099da:	75 46                	jne    c0009a22 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099dc:	c7 44 24 20 30 fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fe30
c00099e4:	83 c4 0c             	add    esp,0xc
c00099e7:	5b                   	pop    ebx
c00099e8:	5e                   	pop    esi
c00099e9:	5f                   	pop    edi
c00099ea:	5d                   	pop    ebp
c00099eb:	e9 83 6e 00 00       	jmp    c0010873 <KePanic(char const*)>
c00099f0:	83 e7 01             	and    edi,0x1
c00099f3:	75 15                	jne    c0009a0a <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099f5:	83 ec 0c             	sub    esp,0xc
c00099f8:	68 9d ff 01 c0       	push   0xc001ff9d
c00099fd:	e8 71 6e 00 00       	call   c0010873 <KePanic(char const*)>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	e9 79 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a0a:	83 ec 08             	sub    esp,0x8
c0009a0d:	6a 00                	push   0x0
c0009a0f:	56                   	push   esi
c0009a10:	e8 ab fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	e9 66 ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a1d:	83 e7 01             	and    edi,0x1
c0009a20:	75 16                	jne    c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a22:	83 ec 08             	sub    esp,0x8
c0009a25:	6a 00                	push   0x0
c0009a27:	56                   	push   esi
c0009a28:	e8 93 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	83 c4 0c             	add    esp,0xc
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c7 44 24 20 b9 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ffb9
c0009a40:	83 c4 0c             	add    esp,0xc
c0009a43:	5b                   	pop    ebx
c0009a44:	5e                   	pop    esi
c0009a45:	5f                   	pop    edi
c0009a46:	5d                   	pop    ebp
c0009a47:	e9 27 6e 00 00       	jmp    c0010873 <KePanic(char const*)>

c0009a4c <VAS::freeAllocatedPages(unsigned long)>:
c0009a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a54:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a58:	74 09                	je     c0009a63 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a5e:	e9 d6 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a63:	c7 44 24 04 54 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe54
c0009a6b:	e9 26 0f 00 00       	jmp    c000a996 <Dbg::kprintf(char const*, ...)>

c0009a70 <VAS::virtualToPhysical(unsigned long)>:
c0009a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a74:	50                   	push   eax
c0009a75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a79:	52                   	push   edx
c0009a7a:	e8 9b fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a7f:	59                   	pop    ecx
c0009a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a82:	5a                   	pop    edx
c0009a83:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a88:	c3                   	ret    
c0009a89:	90                   	nop

c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a8a:	55                   	push   ebp
c0009a8b:	57                   	push   edi
c0009a8c:	56                   	push   esi
c0009a8d:	53                   	push   ebx
c0009a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a92:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a96:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a9a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a9e:	85 db                	test   ebx,ebx
c0009aa0:	7e 24                	jle    c0009ac6 <VAS::reflagRange(unsigned long, int, int, int)+0x3c>
c0009aa2:	c1 e3 0c             	shl    ebx,0xc
c0009aa5:	01 f3                	add    ebx,esi
c0009aa7:	56                   	push   esi
c0009aa8:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aae:	55                   	push   ebp
c0009aaf:	e8 66 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009ab4:	5a                   	pop    edx
c0009ab5:	59                   	pop    ecx
c0009ab6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009abc:	21 f9                	and    ecx,edi
c0009abe:	09 d1                	or     ecx,edx
c0009ac0:	39 f3                	cmp    ebx,esi
c0009ac2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ac4:	75 e1                	jne    c0009aa7 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009ac6:	5b                   	pop    ebx
c0009ac7:	5e                   	pop    esi
c0009ac8:	5f                   	pop    edi
c0009ac9:	5d                   	pop    ebp
c0009aca:	c3                   	ret    
c0009acb:	90                   	nop

c0009acc <VAS::VAS()>:
c0009acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae6:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aef:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afe:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b05:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009b0a:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b0f:	29 c2                	sub    edx,eax
c0009b11:	89 d0                	mov    eax,edx
c0009b13:	05 ff 0f 00 00       	add    eax,0xfff
c0009b18:	c1 e8 0c             	shr    eax,0xc
c0009b1b:	89 c2                	mov    edx,eax
c0009b1d:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b22:	6a 04                	push   0x4
c0009b24:	6a ff                	push   0xffffffff
c0009b26:	52                   	push   edx
c0009b27:	50                   	push   eax
c0009b28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2c:	e8 59 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b31:	83 c4 14             	add    esp,0x14
c0009b34:	90                   	nop
c0009b35:	c3                   	ret    

c0009b36 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b41:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b48:	75 01                	jne    c0009b4b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b4a:	c3                   	ret    
c0009b4b:	68 80 00 00 00       	push   0x80
c0009b50:	6a ff                	push   0xffffffff
c0009b52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b56:	50                   	push   eax
c0009b57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b5b:	52                   	push   edx
c0009b5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b60:	51                   	push   ecx
c0009b61:	e8 24 ff ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c0009b66:	83 c4 14             	add    esp,0x14
c0009b69:	c3                   	ret    

c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b75:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b7d:	83 f8 01             	cmp    eax,0x1
c0009b80:	19 c0                	sbb    eax,eax
c0009b82:	83 ca 03             	or     edx,0x3
c0009b85:	83 e0 fc             	and    eax,0xfffffffc
c0009b88:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b8f:	0f 20 d8             	mov    eax,cr3
c0009b92:	0f 22 d8             	mov    cr3,eax
c0009b95:	c3                   	ret    

c0009b96 <VAS::~VAS()>:
c0009b96:	83 ec 2c             	sub    esp,0x2c
c0009b99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009ba1:	fa                   	cli    
c0009ba2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ba7:	83 c0 01             	add    eax,0x1
c0009baa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009baf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bc3:	6a 01                	push   0x1
c0009bc5:	50                   	push   eax
c0009bc6:	e8 9f ff ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0009bcb:	83 c4 0c             	add    esp,0xc
c0009bce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bde:	0f 8f d8 00 00 00    	jg     c0009cbc <VAS::~VAS()+0x126>
c0009be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bef:	c1 e2 02             	shl    edx,0x2
c0009bf2:	01 d0                	add    eax,edx
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bfe:	83 e0 01             	and    eax,0x1
c0009c01:	0f 84 ab 00 00 00    	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c0f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c17:	7f 74                	jg     c0009c8d <VAS::~VAS()+0xf7>
c0009c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1d:	c1 e0 0a             	shl    eax,0xa
c0009c20:	89 c2                	mov    edx,eax
c0009c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c26:	01 d0                	add    eax,edx
c0009c28:	c1 e0 0c             	shl    eax,0xc
c0009c2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c3f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c43:	6a 01                	push   0x1
c0009c45:	50                   	push   eax
c0009c46:	e8 a1 fc ff ff       	call   c00098ec <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c4b:	83 c4 0c             	add    esp,0xc
c0009c4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c60:	25 01 04 00 00       	and    eax,0x401
c0009c65:	3d 01 04 00 00       	cmp    eax,0x401
c0009c6a:	75 1a                	jne    c0009c86 <VAS::~VAS()+0xf0>
c0009c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c70:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c75:	83 ec 0c             	sub    esp,0xc
c0009c78:	50                   	push   eax
c0009c79:	e8 cc e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009c7e:	83 c4 10             	add    esp,0x10
c0009c81:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c86:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c8b:	eb 82                	jmp    c0009c0f <VAS::~VAS()+0x79>
c0009c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c91:	25 00 04 00 00       	and    eax,0x400
c0009c96:	74 1a                	je     c0009cb2 <VAS::~VAS()+0x11c>
c0009c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca1:	83 ec 0c             	sub    esp,0xc
c0009ca4:	50                   	push   eax
c0009ca5:	e8 a0 e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009caa:	83 c4 10             	add    esp,0x10
c0009cad:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cb2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb7:	e9 1a ff ff ff       	jmp    c0009bd6 <VAS::~VAS()+0x40>
c0009cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cc3:	83 ec 0c             	sub    esp,0xc
c0009cc6:	50                   	push   eax
c0009cc7:	e8 6d fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cd3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd6:	83 ec 0c             	sub    esp,0xc
c0009cd9:	50                   	push   eax
c0009cda:	e8 6b e0 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c0009cdf:	83 c4 10             	add    esp,0x10
c0009ce2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cec:	83 e8 01             	sub    eax,0x1
c0009cef:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cf4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cf9:	85 c0                	test   eax,eax
c0009cfb:	75 01                	jne    c0009cfe <VAS::~VAS()+0x168>
c0009cfd:	fb                   	sti    
c0009cfe:	90                   	nop
c0009cff:	83 c4 2c             	add    esp,0x2c
c0009d02:	c3                   	ret    
c0009d03:	90                   	nop

c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d04:	55                   	push   ebp
c0009d05:	57                   	push   edi
c0009d06:	56                   	push   esi
c0009d07:	53                   	push   ebx
c0009d08:	83 ec 1c             	sub    esp,0x1c
c0009d0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d0f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d13:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d19:	77 0b                	ja     c0009d26 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009d1b:	0f 20 d8             	mov    eax,cr3
c0009d1e:	0f 20 d8             	mov    eax,cr3
c0009d21:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d24:	75 49                	jne    c0009d6f <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009d26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d2a:	09 d8                	or     eax,ebx
c0009d2c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d31:	75 59                	jne    c0009d8c <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009d33:	89 de                	mov    esi,ebx
c0009d35:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d38:	c1 ee 16             	shr    esi,0x16
c0009d3b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d42:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d46:	74 56                	je     c0009d9e <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d4c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d50:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d56:	c1 eb 0a             	shr    ebx,0xa
c0009d59:	c1 e6 0c             	shl    esi,0xc
c0009d5c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d62:	09 d0                	or     eax,edx
c0009d64:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d67:	83 c4 1c             	add    esp,0x1c
c0009d6a:	5b                   	pop    ebx
c0009d6b:	5e                   	pop    esi
c0009d6c:	5f                   	pop    edi
c0009d6d:	5d                   	pop    ebp
c0009d6e:	c3                   	ret    
c0009d6f:	83 ec 0c             	sub    esp,0xc
c0009d72:	68 78 fe 01 c0       	push   0xc001fe78
c0009d77:	e8 1a 0c 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0009d7c:	83 c4 10             	add    esp,0x10
c0009d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d83:	09 d8                	or     eax,ebx
c0009d85:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d8a:	74 a7                	je     c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	68 e0 fe 01 c0       	push   0xc001fee0
c0009d94:	e8 da 6a 00 00       	call   c0010873 <KePanic(char const*)>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	eb 95                	jmp    c0009d33 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009da2:	e8 0c e0 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009da7:	83 ec 0c             	sub    esp,0xc
c0009daa:	89 c5                	mov    ebp,eax
c0009dac:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009db2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009db6:	6a 01                	push   0x1
c0009db8:	e8 60 f8 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009dbd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dc4:	6a 01                	push   0x1
c0009dc6:	50                   	push   eax
c0009dc7:	55                   	push   ebp
c0009dc8:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dd2:	51                   	push   ecx
c0009dd3:	e8 40 02 00 00       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dd8:	83 c4 1c             	add    esp,0x1c
c0009ddb:	68 00 10 00 00       	push   0x1000
c0009de0:	6a 00                	push   0x0
c0009de2:	50                   	push   eax
c0009de3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009de7:	e8 04 67 ff ff       	call   c00004f0 <memset>
c0009dec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009df0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df3:	e8 41 fb ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009df8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dfc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e05:	e9 3e ff ff ff       	jmp    c0009d48 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009e0a <VAS::allocatePages(int, int)>:
c0009e0a:	55                   	push   ebp
c0009e0b:	57                   	push   edi
c0009e0c:	56                   	push   esi
c0009e0d:	53                   	push   ebx
c0009e0e:	83 ec 1c             	sub    esp,0x1c
c0009e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e15:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e20:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e26:	83 e0 01             	and    eax,0x1
c0009e29:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e31:	89 c7                	mov    edi,eax
c0009e33:	0f 85 d6 00 00 00    	jne    c0009f0f <VAS::allocatePages(int, int)+0x105>
c0009e39:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	0f 84 ab 00 00 00    	je     c0009ef3 <VAS::allocatePages(int, int)+0xe9>
c0009e48:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e4c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e50:	c1 e6 0c             	shl    esi,0xc
c0009e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e57:	01 de                	add    esi,ebx
c0009e59:	85 c0                	test   eax,eax
c0009e5b:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e5e:	7e 3a                	jle    c0009e9a <VAS::allocatePages(int, int)+0x90>
c0009e60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e64:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e68:	80 cc 04             	or     ah,0x4
c0009e6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e6f:	89 f8                	mov    eax,edi
c0009e71:	0f b6 f8             	movzx  edi,al
c0009e74:	e8 3a df ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009e79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e7d:	52                   	push   edx
c0009e7e:	53                   	push   ebx
c0009e7f:	50                   	push   eax
c0009e80:	55                   	push   ebp
c0009e81:	e8 7e fe ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e86:	83 c4 10             	add    esp,0x10
c0009e89:	85 ff                	test   edi,edi
c0009e8b:	74 03                	je     c0009e90 <VAS::allocatePages(int, int)+0x86>
c0009e8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e90:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e96:	39 de                	cmp    esi,ebx
c0009e98:	75 da                	jne    c0009e74 <VAS::allocatePages(int, int)+0x6a>
c0009e9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e9e:	85 c9                	test   ecx,ecx
c0009ea0:	75 12                	jne    c0009eb4 <VAS::allocatePages(int, int)+0xaa>
c0009ea2:	0f 20 d8             	mov    eax,cr3
c0009ea5:	0f 22 d8             	mov    cr3,eax
c0009ea8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eac:	83 c4 1c             	add    esp,0x1c
c0009eaf:	5b                   	pop    ebx
c0009eb0:	5e                   	pop    esi
c0009eb1:	5f                   	pop    edi
c0009eb2:	5d                   	pop    ebp
c0009eb3:	c3                   	ret    
c0009eb4:	c1 ee 0a             	shr    esi,0xa
c0009eb7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ebb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ec1:	c1 eb 0a             	shr    ebx,0xa
c0009ec4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009eca:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ed0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ed6:	39 c3                	cmp    ebx,eax
c0009ed8:	77 ce                	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009eda:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009edd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee3:	39 d8                	cmp    eax,ebx
c0009ee5:	73 f3                	jae    c0009eda <VAS::allocatePages(int, int)+0xd0>
c0009ee7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009eeb:	83 c4 1c             	add    esp,0x1c
c0009eee:	5b                   	pop    ebx
c0009eef:	5e                   	pop    esi
c0009ef0:	5f                   	pop    edi
c0009ef1:	5d                   	pop    ebp
c0009ef2:	c3                   	ret    
c0009ef3:	83 ec 0c             	sub    esp,0xc
c0009ef6:	68 04 ff 01 c0       	push   0xc001ff04
c0009efb:	e8 73 69 00 00       	call   c0010873 <KePanic(char const*)>
c0009f00:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009f03:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f07:	83 c4 10             	add    esp,0x10
c0009f0a:	e9 39 ff ff ff       	jmp    c0009e48 <VAS::allocatePages(int, int)+0x3e>
c0009f0f:	83 ec 0c             	sub    esp,0xc
c0009f12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f16:	50                   	push   eax
c0009f17:	e8 01 f7 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c0009f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f20:	83 c4 10             	add    esp,0x10
c0009f23:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f28:	0f 87 a4 00 00 00    	ja     c0009fd2 <VAS::allocatePages(int, int)+0x1c8>
c0009f2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f32:	85 c0                	test   eax,eax
c0009f34:	7e 44                	jle    c0009f7a <VAS::allocatePages(int, int)+0x170>
c0009f36:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f3e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f42:	c1 e0 0c             	shl    eax,0xc
c0009f45:	81 ce 00 04 00 00    	or     esi,0x400
c0009f4b:	01 d8                	add    eax,ebx
c0009f4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f51:	89 f8                	mov    eax,edi
c0009f53:	0f b6 f8             	movzx  edi,al
c0009f56:	e8 58 de ff ff       	call   c0007db3 <Phys::allocatePage()>
c0009f5b:	56                   	push   esi
c0009f5c:	53                   	push   ebx
c0009f5d:	50                   	push   eax
c0009f5e:	55                   	push   ebp
c0009f5f:	e8 a0 fd ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f64:	83 c4 10             	add    esp,0x10
c0009f67:	85 ff                	test   edi,edi
c0009f69:	74 03                	je     c0009f6e <VAS::allocatePages(int, int)+0x164>
c0009f6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f74:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f78:	75 dc                	jne    c0009f56 <VAS::allocatePages(int, int)+0x14c>
c0009f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7e:	85 c0                	test   eax,eax
c0009f80:	0f 84 1c ff ff ff    	je     c0009ea2 <VAS::allocatePages(int, int)+0x98>
c0009f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f8e:	89 d3                	mov    ebx,edx
c0009f90:	c1 e0 0c             	shl    eax,0xc
c0009f93:	c1 eb 0a             	shr    ebx,0xa
c0009f96:	01 d0                	add    eax,edx
c0009f98:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f9e:	c1 e8 0a             	shr    eax,0xa
c0009fa1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009fa7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fac:	2d 00 00 40 00       	sub    eax,0x400000
c0009fb1:	39 c3                	cmp    ebx,eax
c0009fb3:	0f 87 ef fe ff ff    	ja     c0009ea8 <VAS::allocatePages(int, int)+0x9e>
c0009fb9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fbc:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fc2:	39 d8                	cmp    eax,ebx
c0009fc4:	73 f3                	jae    c0009fb9 <VAS::allocatePages(int, int)+0x1af>
c0009fc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fca:	83 c4 1c             	add    esp,0x1c
c0009fcd:	5b                   	pop    ebx
c0009fce:	5e                   	pop    esi
c0009fcf:	5f                   	pop    edi
c0009fd0:	5d                   	pop    ebp
c0009fd1:	c3                   	ret    
c0009fd2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fdd:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fe4:	0f 84 44 ff ff ff    	je     c0009f2e <VAS::allocatePages(int, int)+0x124>
c0009fea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fee:	80 cc 01             	or     ah,0x1
c0009ff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ff5:	e9 34 ff ff ff       	jmp    c0009f2e <VAS::allocatePages(int, int)+0x124>

c0009ffa <VAS::setCPUSpecific(unsigned long)>:
c0009ffa:	83 ec 0c             	sub    esp,0xc
c0009ffd:	6a 05                	push   0x5
c0009fff:	68 00 00 40 c2       	push   0xc2400000
c000a004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a008:	50                   	push   eax
c000a009:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a00d:	52                   	push   edx
c000a00e:	e8 f1 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a013:	83 c4 1c             	add    esp,0x1c
c000a016:	c3                   	ret    
c000a017:	90                   	nop

c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a018:	55                   	push   ebp
c000a019:	57                   	push   edi
c000a01a:	56                   	push   esi
c000a01b:	53                   	push   ebx
c000a01c:	83 ec 1c             	sub    esp,0x1c
c000a01f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a024:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a028:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a032:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a038:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a03c:	83 e0 01             	and    eax,0x1
c000a03f:	85 db                	test   ebx,ebx
c000a041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a045:	7e 43                	jle    c000a08a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a047:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a04b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a04f:	c1 e2 0c             	shl    edx,0xc
c000a052:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a056:	01 ca                	add    edx,ecx
c000a058:	0f b6 f0             	movzx  esi,al
c000a05b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a05f:	55                   	push   ebp
c000a060:	53                   	push   ebx
c000a061:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a065:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a069:	29 d0                	sub    eax,edx
c000a06b:	01 d8                	add    eax,ebx
c000a06d:	50                   	push   eax
c000a06e:	57                   	push   edi
c000a06f:	e8 90 fc ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a074:	83 c4 10             	add    esp,0x10
c000a077:	85 f6                	test   esi,esi
c000a079:	74 03                	je     c000a07e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a07b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a07e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a084:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a088:	75 d5                	jne    c000a05f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a08a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a08e:	85 c9                	test   ecx,ecx
c000a090:	75 12                	jne    c000a0a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a092:	0f 20 d8             	mov    eax,cr3
c000a095:	0f 22 d8             	mov    cr3,eax
c000a098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a09c:	83 c4 1c             	add    esp,0x1c
c000a09f:	5b                   	pop    ebx
c000a0a0:	5e                   	pop    esi
c000a0a1:	5f                   	pop    edi
c000a0a2:	5d                   	pop    ebp
c000a0a3:	c3                   	ret    
c000a0a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a0a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0ac:	c1 eb 0a             	shr    ebx,0xa
c000a0af:	c1 e0 0c             	shl    eax,0xc
c000a0b2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0b8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a0bc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0c2:	01 d0                	add    eax,edx
c000a0c4:	c1 e8 0a             	shr    eax,0xa
c000a0c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0cc:	2d 00 00 40 00       	sub    eax,0x400000
c000a0d1:	39 c3                	cmp    ebx,eax
c000a0d3:	77 c3                	ja     c000a098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0d5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0d8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0de:	39 d8                	cmp    eax,ebx
c000a0e0:	73 f3                	jae    c000a0d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0e6:	83 c4 1c             	add    esp,0x1c
c000a0e9:	5b                   	pop    ebx
c000a0ea:	5e                   	pop    esi
c000a0eb:	5f                   	pop    edi
c000a0ec:	5d                   	pop    ebp
c000a0ed:	c3                   	ret    

c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0ee:	55                   	push   ebp
c000a0ef:	57                   	push   edi
c000a0f0:	56                   	push   esi
c000a0f1:	53                   	push   ebx
c000a0f2:	83 ec 1c             	sub    esp,0x1c
c000a0f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0f9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a101:	09 f8                	or     eax,edi
c000a103:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a107:	a9 ff 0f 00 00       	test   eax,0xfff
c000a10c:	75 4f                	jne    c000a15d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a10e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a112:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a115:	c1 eb 16             	shr    ebx,0x16
c000a118:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a11f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a123:	74 52                	je     c000a177 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a125:	0f b6 f2             	movzx  esi,dl
c000a128:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a12c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a130:	c1 e8 0a             	shr    eax,0xa
c000a133:	83 fe 01             	cmp    esi,0x1
c000a136:	19 d2                	sbb    edx,edx
c000a138:	c1 e3 0c             	shl    ebx,0xc
c000a13b:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a141:	25 fc 0f 00 00       	and    eax,0xffc
c000a146:	01 d8                	add    eax,ebx
c000a148:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a14c:	09 d9                	or     ecx,ebx
c000a14e:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a155:	83 c4 1c             	add    esp,0x1c
c000a158:	5b                   	pop    ebx
c000a159:	5e                   	pop    esi
c000a15a:	5f                   	pop    edi
c000a15b:	5d                   	pop    ebp
c000a15c:	c3                   	ret    
c000a15d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a161:	83 ec 0c             	sub    esp,0xc
c000a164:	68 30 ff 01 c0       	push   0xc001ff30
c000a169:	e8 05 67 00 00       	call   c0010873 <KePanic(char const*)>
c000a16e:	83 c4 10             	add    esp,0x10
c000a171:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a175:	eb 97                	jmp    c000a10e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a177:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a17b:	e8 33 dc ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a180:	83 ec 0c             	sub    esp,0xc
c000a183:	89 c5                	mov    ebp,eax
c000a185:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a18b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a18f:	6a 01                	push   0x1
c000a191:	e8 87 f4 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a196:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a19d:	6a 01                	push   0x1
c000a19f:	50                   	push   eax
c000a1a0:	55                   	push   ebp
c000a1a1:	81 cd 07 04 00 00    	or     ebp,0x407
c000a1a7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1ab:	51                   	push   ecx
c000a1ac:	e8 67 fe ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a1b1:	83 c4 1c             	add    esp,0x1c
c000a1b4:	68 00 10 00 00       	push   0x1000
c000a1b9:	6a 00                	push   0x0
c000a1bb:	50                   	push   eax
c000a1bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1c0:	e8 2b 63 ff ff       	call   c00004f0 <memset>
c000a1c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a1c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1cc:	e8 68 f7 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1d1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1de:	e9 42 ff ff ff       	jmp    c000a125 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1e3:	90                   	nop

c000a1e4 <VAS::VAS(bool)>:
c000a1e4:	53                   	push   ebx
c000a1e5:	83 ec 28             	sub    esp,0x28
c000a1e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a20e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a211:	e8 9d db ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a216:	89 c2                	mov    edx,eax
c000a218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a21c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a21f:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a225:	83 ec 0c             	sub    esp,0xc
c000a228:	6a 01                	push   0x1
c000a22a:	e8 ee f3 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 c2                	mov    edx,eax
c000a234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a238:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a23b:	83 ec 0c             	sub    esp,0xc
c000a23e:	6a 03                	push   0x3
c000a240:	6a 01                	push   0x1
c000a242:	52                   	push   edx
c000a243:	50                   	push   eax
c000a244:	53                   	push   ebx
c000a245:	e8 ce fd ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a24a:	83 c4 20             	add    esp,0x20
c000a24d:	89 c2                	mov    edx,eax
c000a24f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a253:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a256:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a25e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a266:	7f 1d                	jg     c000a285 <VAS::VAS(bool)+0xa1>
c000a268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a26c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a26f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a273:	c1 e2 02             	shl    edx,0x2
c000a276:	01 d0                	add    eax,edx
c000a278:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a27e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a283:	eb d9                	jmp    c000a25e <VAS::VAS(bool)+0x7a>
c000a285:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a28d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a295:	7f 7e                	jg     c000a315 <VAS::VAS(bool)+0x131>
c000a297:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a29b:	2d 00 02 00 00       	sub    eax,0x200
c000a2a0:	c1 e0 0c             	shl    eax,0xc
c000a2a3:	83 c8 05             	or     eax,0x5
c000a2a6:	89 c2                	mov    edx,eax
c000a2a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2b3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2b9:	83 e0 10             	and    eax,0x10
c000a2bc:	0f b6 c0             	movzx  eax,al
c000a2bf:	85 c0                	test   eax,eax
c000a2c1:	74 07                	je     c000a2ca <VAS::VAS(bool)+0xe6>
c000a2c3:	b8 00 01 00 00       	mov    eax,0x100
c000a2c8:	eb 05                	jmp    c000a2cf <VAS::VAS(bool)+0xeb>
c000a2ca:	b8 00 00 00 00       	mov    eax,0x0
c000a2cf:	09 d0                	or     eax,edx
c000a2d1:	89 c1                	mov    ecx,eax
c000a2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2de:	c1 e2 02             	shl    edx,0x2
c000a2e1:	01 d0                	add    eax,edx
c000a2e3:	89 ca                	mov    edx,ecx
c000a2e5:	89 10                	mov    DWORD PTR [eax],edx
c000a2e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2eb:	2d 40 03 00 00       	sub    eax,0x340
c000a2f0:	83 f8 7f             	cmp    eax,0x7f
c000a2f3:	77 16                	ja     c000a30b <VAS::VAS(bool)+0x127>
c000a2f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2f9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a300:	c1 e2 02             	shl    edx,0x2
c000a303:	01 d0                	add    eax,edx
c000a305:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a30b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a310:	e9 78 ff ff ff       	jmp    c000a28d <VAS::VAS(bool)+0xa9>
c000a315:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a31a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a320:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a326:	83 e0 10             	and    eax,0x10
c000a329:	0f b6 c0             	movzx  eax,al
c000a32c:	85 c0                	test   eax,eax
c000a32e:	74 07                	je     c000a337 <VAS::VAS(bool)+0x153>
c000a330:	b8 03 41 00 00       	mov    eax,0x4103
c000a335:	eb 05                	jmp    c000a33c <VAS::VAS(bool)+0x158>
c000a337:	b8 03 40 00 00       	mov    eax,0x4003
c000a33c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a340:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a343:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a349:	89 02                	mov    DWORD PTR [edx],eax
c000a34b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a356:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a35c:	83 ec 08             	sub    esp,0x8
c000a35f:	50                   	push   eax
c000a360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a364:	e8 91 fc ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c000a369:	83 c4 10             	add    esp,0x10
c000a36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a370:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a373:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a37e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a384:	83 e0 10             	and    eax,0x10
c000a387:	0f b6 c0             	movzx  eax,al
c000a38a:	85 c0                	test   eax,eax
c000a38c:	74 07                	je     c000a395 <VAS::VAS(bool)+0x1b1>
c000a38e:	b8 00 01 00 00       	mov    eax,0x100
c000a393:	eb 05                	jmp    c000a39a <VAS::VAS(bool)+0x1b6>
c000a395:	b8 00 00 00 00       	mov    eax,0x0
c000a39a:	09 c2                	or     edx,eax
c000a39c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a3a3:	05 fc 0f 00 00       	add    eax,0xffc
c000a3a8:	83 ca 03             	or     edx,0x3
c000a3ab:	89 10                	mov    DWORD PTR [eax],edx
c000a3ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b8:	83 ec 0c             	sub    esp,0xc
c000a3bb:	50                   	push   eax
c000a3bc:	e8 9d 1c 00 00       	call   c000c05e <Device::getName()>
c000a3c1:	83 c4 10             	add    esp,0x10
c000a3c4:	83 ec 08             	sub    esp,0x8
c000a3c7:	68 d3 ff 01 c0       	push   0xc001ffd3
c000a3cc:	50                   	push   eax
c000a3cd:	e8 7e 63 ff ff       	call   c0000750 <strcmp>
c000a3d2:	83 c4 10             	add    esp,0x10
c000a3d5:	85 c0                	test   eax,eax
c000a3d7:	0f 94 c0             	sete   al
c000a3da:	0f b6 c0             	movzx  eax,al
c000a3dd:	85 c0                	test   eax,eax
c000a3df:	0f 84 8b 00 00 00    	je     c000a470 <VAS::VAS(bool)+0x28c>
c000a3e5:	fa                   	cli    
c000a3e6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3eb:	83 c0 01             	add    eax,0x1
c000a3ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3f3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3fe:	05 7c 09 00 00       	add    eax,0x97c
c000a403:	83 ec 0c             	sub    esp,0xc
c000a406:	50                   	push   eax
c000a407:	e8 9a d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a40c:	83 c4 10             	add    esp,0x10
c000a40f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a414:	89 c3                	mov    ebx,eax
c000a416:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a41b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a421:	05 7c 09 00 00       	add    eax,0x97c
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	50                   	push   eax
c000a42a:	e8 77 d1 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a42f:	83 c4 10             	add    esp,0x10
c000a432:	83 ec 08             	sub    esp,0x8
c000a435:	50                   	push   eax
c000a436:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a43a:	e8 db f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a43f:	83 c4 10             	add    esp,0x10
c000a442:	8b 00                	mov    eax,DWORD PTR [eax]
c000a444:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a449:	6a 11                	push   0x11
c000a44b:	53                   	push   ebx
c000a44c:	50                   	push   eax
c000a44d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a451:	e8 ae f8 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a45e:	83 e8 01             	sub    eax,0x1
c000a461:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a466:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46b:	85 c0                	test   eax,eax
c000a46d:	75 01                	jne    c000a470 <VAS::VAS(bool)+0x28c>
c000a46f:	fb                   	sti    
c000a470:	90                   	nop
c000a471:	83 c4 28             	add    esp,0x28
c000a474:	5b                   	pop    ebx
c000a475:	c3                   	ret    

c000a476 <VAS::evict(unsigned long)>:
c000a476:	55                   	push   ebp
c000a477:	57                   	push   edi
c000a478:	56                   	push   esi
c000a479:	53                   	push   ebx
c000a47a:	83 ec 1c             	sub    esp,0x1c
c000a47d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a481:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a485:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a489:	e8 ed f2 ff ff       	call   c000977b <Virt::allocateSwapfilePage()>
c000a48e:	89 c7                	mov    edi,eax
c000a490:	a1 8c 1e 02 c0       	mov    eax,ds:0xc0021e8c
c000a495:	85 c0                	test   eax,eax
c000a497:	7e 40                	jle    c000a4d9 <VAS::evict(unsigned long)+0x63>
c000a499:	89 ee                	mov    esi,ebp
c000a49b:	31 db                	xor    ebx,ebx
c000a49d:	83 ec 0c             	sub    esp,0xc
c000a4a0:	57                   	push   edi
c000a4a1:	e8 bf f2 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a4a6:	89 34 24             	mov    DWORD PTR [esp],esi
c000a4a9:	01 d8                	add    eax,ebx
c000a4ab:	6a 01                	push   0x1
c000a4ad:	31 d2                	xor    edx,edx
c000a4af:	83 c3 01             	add    ebx,0x1
c000a4b2:	52                   	push   edx
c000a4b3:	81 c6 00 02 00 00    	add    esi,0x200
c000a4b9:	50                   	push   eax
c000a4ba:	0f be 05 98 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e98
c000a4c1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4c8:	50                   	push   eax
c000a4c9:	e8 4a 2d 00 00       	call   c000d218 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4ce:	83 c4 20             	add    esp,0x20
c000a4d1:	39 1d 8c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e8c,ebx
c000a4d7:	7f c4                	jg     c000a49d <VAS::evict(unsigned long)+0x27>
c000a4d9:	83 ec 08             	sub    esp,0x8
c000a4dc:	c1 e7 0b             	shl    edi,0xb
c000a4df:	55                   	push   ebp
c000a4e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4e4:	50                   	push   eax
c000a4e5:	e8 30 f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4ec:	89 d1                	mov    ecx,edx
c000a4ee:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4f4:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4fa:	09 cf                	or     edi,ecx
c000a4fc:	89 38                	mov    DWORD PTR [eax],edi
c000a4fe:	89 14 24             	mov    DWORD PTR [esp],edx
c000a501:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a507:	83 c1 01             	add    ecx,0x1
c000a50a:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a510:	e8 35 d8 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c000a515:	0f 20 d8             	mov    eax,cr3
c000a518:	0f 22 d8             	mov    cr3,eax
c000a51b:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a520:	c7 44 24 40 e1 ff 01 c0 	mov    DWORD PTR [esp+0x40],0xc001ffe1
c000a528:	8d 50 01             	lea    edx,[eax+0x1]
c000a52b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a52f:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a535:	83 c4 2c             	add    esp,0x2c
c000a538:	5b                   	pop    ebx
c000a539:	5e                   	pop    esi
c000a53a:	5f                   	pop    edi
c000a53b:	5d                   	pop    ebp
c000a53c:	e9 55 04 00 00       	jmp    c000a996 <Dbg::kprintf(char const*, ...)>
c000a541:	90                   	nop

c000a542 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a542:	55                   	push   ebp
c000a543:	57                   	push   edi
c000a544:	56                   	push   esi
c000a545:	53                   	push   ebx
c000a546:	83 ec 14             	sub    esp,0x14
c000a549:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a54d:	53                   	push   ebx
c000a54e:	68 f2 ff 01 c0       	push   0xc001fff2
c000a553:	e8 3e 04 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000a558:	83 c4 10             	add    esp,0x10
c000a55b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a561:	74 21                	je     c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a563:	83 ec 08             	sub    esp,0x8
c000a566:	53                   	push   ebx
c000a567:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a56b:	51                   	push   ecx
c000a56c:	e8 a9 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a571:	83 c4 10             	add    esp,0x10
c000a574:	89 c6                	mov    esi,eax
c000a576:	85 c0                	test   eax,eax
c000a578:	74 0a                	je     c000a584 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a57a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a57c:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a582:	74 0a                	je     c000a58e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a584:	31 c0                	xor    eax,eax
c000a586:	83 c4 0c             	add    esp,0xc
c000a589:	5b                   	pop    ebx
c000a58a:	5e                   	pop    esi
c000a58b:	5f                   	pop    edi
c000a58c:	5d                   	pop    ebp
c000a58d:	c3                   	ret    
c000a58e:	e8 20 d8 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a593:	c1 ed 0b             	shr    ebp,0xb
c000a596:	8b 16                	mov    edx,DWORD PTR [esi]
c000a598:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a59e:	09 c2                	or     edx,eax
c000a5a0:	81 ca 01 08 00 00    	or     edx,0x801
c000a5a6:	89 16                	mov    DWORD PTR [esi],edx
c000a5a8:	8b 15 8c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e8c
c000a5ae:	85 d2                	test   edx,edx
c000a5b0:	7e 40                	jle    c000a5f2 <VAS::tryLoadBackOffDisk(unsigned long)+0xb0>
c000a5b2:	89 df                	mov    edi,ebx
c000a5b4:	31 f6                	xor    esi,esi
c000a5b6:	83 ec 0c             	sub    esp,0xc
c000a5b9:	55                   	push   ebp
c000a5ba:	e8 a6 f1 ff ff       	call   c0009765 <Virt::swapIDToSector(unsigned long)>
c000a5bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5c2:	01 f0                	add    eax,esi
c000a5c4:	6a 01                	push   0x1
c000a5c6:	31 d2                	xor    edx,edx
c000a5c8:	83 c6 01             	add    esi,0x1
c000a5cb:	52                   	push   edx
c000a5cc:	81 c7 00 02 00 00    	add    edi,0x200
c000a5d2:	50                   	push   eax
c000a5d3:	0f be 05 98 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e98
c000a5da:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5e1:	50                   	push   eax
c000a5e2:	e8 c5 2b 00 00       	call   c000d1ac <LogicalDisk::read(unsigned long long, int, void*)>
c000a5e7:	83 c4 20             	add    esp,0x20
c000a5ea:	39 35 8c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e8c,esi
c000a5f0:	7f c4                	jg     c000a5b6 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a5f2:	83 ec 04             	sub    esp,0x4
c000a5f5:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5fa:	83 e8 01             	sub    eax,0x1
c000a5fd:	50                   	push   eax
c000a5fe:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a603:	53                   	push   ebx
c000a604:	68 05 00 02 c0       	push   0xc0020005
c000a609:	e8 88 03 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000a60e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a611:	e8 2c f1 ff ff       	call   c0009742 <Virt::freeSwapfilePage(unsigned long)>
c000a616:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a61b:	83 c4 10             	add    esp,0x10
c000a61e:	83 e8 01             	sub    eax,0x1
c000a621:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a626:	85 c0                	test   eax,eax
c000a628:	75 01                	jne    c000a62b <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a62a:	fb                   	sti    
c000a62b:	0f 20 d8             	mov    eax,cr3
c000a62e:	0f 22 d8             	mov    cr3,eax
c000a631:	b0 01                	mov    al,0x1
c000a633:	e9 4e ff ff ff       	jmp    c000a586 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a638 <VAS::scanForEviction()>:
c000a638:	57                   	push   edi
c000a639:	31 ff                	xor    edi,edi
c000a63b:	56                   	push   esi
c000a63c:	53                   	push   ebx
c000a63d:	83 ec 10             	sub    esp,0x10
c000a640:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a644:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a647:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a64d:	75 0e                	jne    c000a65d <VAS::scanForEviction()+0x25>
c000a64f:	89 da                	mov    edx,ebx
c000a651:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a654:	c1 ea 16             	shr    edx,0x16
c000a657:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a65b:	74 50                	je     c000a6ad <VAS::scanForEviction()+0x75>
c000a65d:	53                   	push   ebx
c000a65e:	56                   	push   esi
c000a65f:	e8 b6 f2 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a664:	5a                   	pop    edx
c000a665:	8b 10                	mov    edx,DWORD PTR [eax]
c000a667:	59                   	pop    ecx
c000a668:	89 d1                	mov    ecx,edx
c000a66a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a670:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a676:	74 40                	je     c000a6b8 <VAS::scanForEviction()+0x80>
c000a678:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a67e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a684:	76 2d                	jbe    c000a6b3 <VAS::scanForEviction()+0x7b>
c000a686:	83 c7 01             	add    edi,0x1
c000a689:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a690:	83 ff 03             	cmp    edi,0x3
c000a693:	74 32                	je     c000a6c7 <VAS::scanForEviction()+0x8f>
c000a695:	31 db                	xor    ebx,ebx
c000a697:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a69d:	75 be                	jne    c000a65d <VAS::scanForEviction()+0x25>
c000a69f:	89 da                	mov    edx,ebx
c000a6a1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6a4:	c1 ea 16             	shr    edx,0x16
c000a6a7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6ab:	75 b0                	jne    c000a65d <VAS::scanForEviction()+0x25>
c000a6ad:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6b3:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6b6:	eb 8f                	jmp    c000a647 <VAS::scanForEviction()+0xf>
c000a6b8:	f6 c2 20             	test   dl,0x20
c000a6bb:	74 13                	je     c000a6d0 <VAS::scanForEviction()+0x98>
c000a6bd:	83 e2 df             	and    edx,0xffffffdf
c000a6c0:	89 10                	mov    DWORD PTR [eax],edx
c000a6c2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6c5:	eb b1                	jmp    c000a678 <VAS::scanForEviction()+0x40>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	31 c0                	xor    eax,eax
c000a6cc:	5b                   	pop    ebx
c000a6cd:	5e                   	pop    esi
c000a6ce:	5f                   	pop    edi
c000a6cf:	c3                   	ret    
c000a6d0:	83 ec 08             	sub    esp,0x8
c000a6d3:	89 d0                	mov    eax,edx
c000a6d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6de:	53                   	push   ebx
c000a6df:	68 1a 00 02 c0       	push   0xc002001a
c000a6e4:	e8 ad 02 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000a6e9:	58                   	pop    eax
c000a6ea:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6ed:	5a                   	pop    edx
c000a6ee:	51                   	push   ecx
c000a6ef:	56                   	push   esi
c000a6f0:	e8 81 fd ff ff       	call   c000a476 <VAS::evict(unsigned long)>
c000a6f5:	5b                   	pop    ebx
c000a6f6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6f9:	5f                   	pop    edi
c000a6fa:	50                   	push   eax
c000a6fb:	68 2e 00 02 c0       	push   0xc002002e
c000a700:	e8 91 02 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000a705:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a708:	83 c4 10             	add    esp,0x10
c000a70b:	05 00 10 00 00       	add    eax,0x1000
c000a710:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a717:	83 c4 10             	add    esp,0x10
c000a71a:	5b                   	pop    ebx
c000a71b:	5e                   	pop    esi
c000a71c:	5f                   	pop    edi
c000a71d:	c3                   	ret    

c000a71e <mapVASFirstTime>:
c000a71e:	55                   	push   ebp
c000a71f:	57                   	push   edi
c000a720:	56                   	push   esi
c000a721:	53                   	push   ebx
c000a722:	83 ec 0c             	sub    esp,0xc
c000a725:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a72a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a72d:	83 fa 01             	cmp    edx,0x1
c000a730:	0f 84 cb 00 00 00    	je     c000a801 <mapVASFirstTime+0xe3>
c000a736:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a739:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a73c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a741:	c1 e5 15             	shl    ebp,0x15
c000a744:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a749:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a74f:	29 eb                	sub    ebx,ebp
c000a751:	29 ef                	sub    edi,ebp
c000a753:	e8 5b d6 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a758:	83 ec 0c             	sub    esp,0xc
c000a75b:	68 03 04 00 00       	push   0x403
c000a760:	6a 01                	push   0x1
c000a762:	53                   	push   ebx
c000a763:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a769:	50                   	push   eax
c000a76a:	56                   	push   esi
c000a76b:	e8 a8 f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a770:	83 c4 20             	add    esp,0x20
c000a773:	39 fb                	cmp    ebx,edi
c000a775:	75 dc                	jne    c000a753 <mapVASFirstTime+0x35>
c000a777:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a77c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a781:	29 eb                	sub    ebx,ebp
c000a783:	29 ef                	sub    edi,ebp
c000a785:	e8 29 d6 ff ff       	call   c0007db3 <Phys::allocatePage()>
c000a78a:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a78e:	83 fa 01             	cmp    edx,0x1
c000a791:	19 d2                	sbb    edx,edx
c000a793:	83 ec 0c             	sub    esp,0xc
c000a796:	83 e2 04             	and    edx,0x4
c000a799:	81 c2 03 04 00 00    	add    edx,0x403
c000a79f:	52                   	push   edx
c000a7a0:	6a 01                	push   0x1
c000a7a2:	53                   	push   ebx
c000a7a3:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7a9:	50                   	push   eax
c000a7aa:	56                   	push   esi
c000a7ab:	e8 68 f8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7b0:	83 c4 20             	add    esp,0x20
c000a7b3:	39 df                	cmp    edi,ebx
c000a7b5:	75 ce                	jne    c000a785 <mapVASFirstTime+0x67>
c000a7b7:	83 ec 0c             	sub    esp,0xc
c000a7ba:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7bf:	6a 04                	push   0x4
c000a7c1:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7c7:	6a ff                	push   0xffffffff
c000a7c9:	c1 eb 0c             	shr    ebx,0xc
c000a7cc:	53                   	push   ebx
c000a7cd:	68 00 30 02 c0       	push   0xc0023000
c000a7d2:	56                   	push   esi
c000a7d3:	e8 b2 f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a7d8:	83 c4 14             	add    esp,0x14
c000a7db:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7e0:	6a 04                	push   0x4
c000a7e2:	6a ff                	push   0xffffffff
c000a7e4:	53                   	push   ebx
c000a7e5:	68 00 30 02 c0       	push   0xc0023000
c000a7ea:	50                   	push   eax
c000a7eb:	e8 9a f2 ff ff       	call   c0009a8a <VAS::reflagRange(unsigned long, int, int, int)>
c000a7f0:	0f 20 d8             	mov    eax,cr3
c000a7f3:	0f 22 d8             	mov    cr3,eax
c000a7f6:	83 c4 20             	add    esp,0x20
c000a7f9:	83 c4 0c             	add    esp,0xc
c000a7fc:	5b                   	pop    ebx
c000a7fd:	5e                   	pop    esi
c000a7fe:	5f                   	pop    edi
c000a7ff:	5d                   	pop    ebp
c000a800:	c3                   	ret    
c000a801:	83 ec 0c             	sub    esp,0xc
c000a804:	68 41 00 02 c0       	push   0xc0020041
c000a809:	e8 88 01 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000a80e:	83 c4 10             	add    esp,0x10
c000a811:	83 c4 0c             	add    esp,0xc
c000a814:	5b                   	pop    ebx
c000a815:	5e                   	pop    esi
c000a816:	5f                   	pop    edi
c000a817:	5d                   	pop    ebp
c000a818:	c3                   	ret    

c000a819 <__cxa_atexit>:
c000a819:	31 c0                	xor    eax,eax
c000a81b:	c3                   	ret    

c000a81c <__cxa_finalize>:
c000a81c:	c3                   	ret    

c000a81d <__stack_chk_fail>:
c000a81d:	55                   	push   ebp
c000a81e:	89 e5                	mov    ebp,esp
c000a820:	83 ec 10             	sub    esp,0x10
c000a823:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a826:	68 5a 00 02 c0       	push   0xc002005a
c000a82b:	e8 66 01 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000a830:	58                   	pop    eax
c000a831:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a834:	5a                   	pop    edx
c000a835:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a838:	68 5a 00 02 c0       	push   0xc002005a
c000a83d:	e8 54 01 00 00       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000a842:	c7 04 24 62 00 02 c0 	mov    DWORD PTR [esp],0xc0020062
c000a849:	e8 25 60 00 00       	call   c0010873 <KePanic(char const*)>
c000a84e:	83 c4 10             	add    esp,0x10
c000a851:	c9                   	leave  
c000a852:	c3                   	ret    

c000a853 <__cxa_pure_virtual>:
c000a853:	83 ec 18             	sub    esp,0x18
c000a856:	68 7a 00 02 c0       	push   0xc002007a
c000a85b:	e8 13 60 00 00       	call   c0010873 <KePanic(char const*)>
c000a860:	83 c4 1c             	add    esp,0x1c
c000a863:	c3                   	ret    

c000a864 <operator new[](unsigned long)>:
c000a864:	e9 45 d2 ff ff       	jmp    c0007aae <malloc>

c000a869 <operator delete(void*, unsigned long)>:
c000a869:	e9 60 d2 ff ff       	jmp    c0007ace <rfree>

c000a86e <operator delete[](void*)>:
c000a86e:	e9 5b d2 ff ff       	jmp    c0007ace <rfree>

c000a873 <operator delete[](void*, unsigned long)>:
c000a873:	e9 56 d2 ff ff       	jmp    c0007ace <rfree>

c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a878:	55                   	push   ebp
c000a879:	57                   	push   edi
c000a87a:	56                   	push   esi
c000a87b:	be cf fc 01 c0       	mov    esi,0xc001fccf
c000a880:	53                   	push   ebx
c000a881:	83 ec 20             	sub    esp,0x20
c000a884:	a0 ce fc 01 c0       	mov    al,ds:0xc001fcce
c000a889:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a88d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a891:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a895:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a899:	b8 10 00 00 00       	mov    eax,0x10
c000a89e:	f7 c7 02 00 00 00    	test   edi,0x2
c000a8a4:	75 60                	jne    c000a906 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a8a6:	89 c1                	mov    ecx,eax
c000a8a8:	c1 e9 02             	shr    ecx,0x2
c000a8ab:	fc                   	cld    
c000a8ac:	31 d2                	xor    edx,edx
c000a8ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a8b0:	a8 02                	test   al,0x2
c000a8b2:	74 0b                	je     c000a8bf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a8b4:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b7:	66 89 17             	mov    WORD PTR [edi],dx
c000a8ba:	ba 02 00 00 00       	mov    edx,0x2
c000a8bf:	a8 01                	test   al,0x1
c000a8c1:	74 06                	je     c000a8c9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8c3:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a8c6:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a8c9:	89 ee                	mov    esi,ebp
c000a8cb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a8cf:	eb 02                	jmp    c000a8d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8d1:	89 c6                	mov    esi,eax
c000a8d3:	31 d2                	xor    edx,edx
c000a8d5:	83 c1 01             	add    ecx,0x1
c000a8d8:	89 f0                	mov    eax,esi
c000a8da:	f7 f3                	div    ebx
c000a8dc:	39 de                	cmp    esi,ebx
c000a8de:	73 f1                	jae    c000a8d1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a8e0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8e3:	eb 02                	jmp    c000a8e7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a8e5:	89 c5                	mov    ebp,eax
c000a8e7:	31 d2                	xor    edx,edx
c000a8e9:	83 e9 01             	sub    ecx,0x1
c000a8ec:	89 e8                	mov    eax,ebp
c000a8ee:	f7 f3                	div    ebx
c000a8f0:	39 dd                	cmp    ebp,ebx
c000a8f2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8f6:	88 11                	mov    BYTE PTR [ecx],dl
c000a8f8:	73 eb                	jae    c000a8e5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8fe:	83 c4 20             	add    esp,0x20
c000a901:	5b                   	pop    ebx
c000a902:	5e                   	pop    esi
c000a903:	5f                   	pop    edi
c000a904:	5d                   	pop    ebp
c000a905:	c3                   	ret    
c000a906:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a909:	83 c7 02             	add    edi,0x2
c000a90c:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a910:	83 c6 02             	add    esi,0x2
c000a913:	83 e8 02             	sub    eax,0x2
c000a916:	eb 8e                	jmp    c000a8a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a918 <Dbg::logc(char)>:
c000a918:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a91c:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a923:	75 12                	jne    c000a937 <Dbg::logc(char)+0x1f>
c000a925:	ba fd 03 00 00       	mov    edx,0x3fd
c000a92a:	ec                   	in     al,dx
c000a92b:	a8 20                	test   al,0x20
c000a92d:	74 fb                	je     c000a92a <Dbg::logc(char)+0x12>
c000a92f:	ba f8 03 00 00       	mov    edx,0x3f8
c000a934:	88 c8                	mov    al,cl
c000a936:	ee                   	out    dx,al
c000a937:	c3                   	ret    

c000a938 <Dbg::logs(char*)>:
c000a938:	53                   	push   ebx
c000a939:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a93d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a940:	85 c0                	test   eax,eax
c000a942:	74 11                	je     c000a955 <Dbg::logs(char*)+0x1d>
c000a944:	83 c3 01             	add    ebx,0x1
c000a947:	50                   	push   eax
c000a948:	e8 cb ff ff ff       	call   c000a918 <Dbg::logc(char)>
c000a94d:	58                   	pop    eax
c000a94e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a951:	85 c0                	test   eax,eax
c000a953:	75 ef                	jne    c000a944 <Dbg::logs(char*)+0xc>
c000a955:	5b                   	pop    ebx
c000a956:	c3                   	ret    

c000a957 <Dbg::logWriteInt(unsigned int)>:
c000a957:	83 ec 10             	sub    esp,0x10
c000a95a:	6a 0a                	push   0xa
c000a95c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a960:	50                   	push   eax
c000a961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a965:	50                   	push   eax
c000a966:	e8 0d ff ff ff       	call   c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a96b:	50                   	push   eax
c000a96c:	e8 c7 ff ff ff       	call   c000a938 <Dbg::logs(char*)>
c000a971:	83 c4 20             	add    esp,0x20
c000a974:	c3                   	ret    

c000a975 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a975:	83 ec 10             	sub    esp,0x10
c000a978:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a97c:	50                   	push   eax
c000a97d:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a981:	50                   	push   eax
c000a982:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a986:	52                   	push   edx
c000a987:	e8 ec fe ff ff       	call   c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a98c:	50                   	push   eax
c000a98d:	e8 a6 ff ff ff       	call   c000a938 <Dbg::logs(char*)>
c000a992:	83 c4 20             	add    esp,0x20
c000a995:	c3                   	ret    

c000a996 <Dbg::kprintf(char const*, ...)>:
c000a996:	55                   	push   ebp
c000a997:	57                   	push   edi
c000a998:	56                   	push   esi
c000a999:	53                   	push   ebx
c000a99a:	83 ec 0c             	sub    esp,0xc
c000a99d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9a1:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9a8:	74 08                	je     c000a9b2 <Dbg::kprintf(char const*, ...)+0x1c>
c000a9aa:	83 c4 0c             	add    esp,0xc
c000a9ad:	5b                   	pop    ebx
c000a9ae:	5e                   	pop    esi
c000a9af:	5f                   	pop    edi
c000a9b0:	5d                   	pop    ebp
c000a9b1:	c3                   	ret    
c000a9b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a9b6:	31 ff                	xor    edi,edi
c000a9b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9bc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9bf:	85 c0                	test   eax,eax
c000a9c1:	74 e7                	je     c000a9aa <Dbg::kprintf(char const*, ...)+0x14>
c000a9c3:	8d 77 01             	lea    esi,[edi+0x1]
c000a9c6:	83 f8 25             	cmp    eax,0x25
c000a9c9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9cc:	75 47                	jne    c000aa15 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9ce:	83 c7 02             	add    edi,0x2
c000a9d1:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9d4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9d7:	83 e8 25             	sub    eax,0x25
c000a9da:	0f b6 c0             	movzx  eax,al
c000a9dd:	83 f8 53             	cmp    eax,0x53
c000a9e0:	0f 87 ce 00 00 00    	ja     c000aab4 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9e6:	ff 24 85 90 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff70]
c000a9ed:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9f1:	89 c8                	mov    eax,ecx
c000a9f3:	83 c1 04             	add    ecx,0x4
c000a9f6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9fa:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9fc:	55                   	push   ebp
c000a9fd:	e8 55 ff ff ff       	call   c000a957 <Dbg::logWriteInt(unsigned int)>
c000aa02:	58                   	pop    eax
c000aa03:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa06:	85 c0                	test   eax,eax
c000aa08:	74 a0                	je     c000a9aa <Dbg::kprintf(char const*, ...)+0x14>
c000aa0a:	8d 77 01             	lea    esi,[edi+0x1]
c000aa0d:	83 f8 25             	cmp    eax,0x25
c000aa10:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000aa13:	74 b9                	je     c000a9ce <Dbg::kprintf(char const*, ...)+0x38>
c000aa15:	50                   	push   eax
c000aa16:	89 f7                	mov    edi,esi
c000aa18:	e8 fb fe ff ff       	call   c000a918 <Dbg::logc(char)>
c000aa1d:	89 ee                	mov    esi,ebp
c000aa1f:	58                   	pop    eax
c000aa20:	eb e1                	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa22:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa26:	89 c8                	mov    eax,ecx
c000aa28:	83 c1 04             	add    ecx,0x4
c000aa2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa2d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa31:	50                   	push   eax
c000aa32:	e8 01 ff ff ff       	call   c000a938 <Dbg::logs(char*)>
c000aa37:	58                   	pop    eax
c000aa38:	eb c9                	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3e:	89 d0                	mov    eax,edx
c000aa40:	83 c2 04             	add    edx,0x4
c000aa43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 08 ff ff ff       	call   c000a957 <Dbg::logWriteInt(unsigned int)>
c000aa4f:	58                   	pop    eax
c000aa50:	eb b1                	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa56:	89 d0                	mov    eax,edx
c000aa58:	83 c2 04             	add    edx,0x4
c000aa5b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa62:	50                   	push   eax
c000aa63:	e8 b0 fe ff ff       	call   c000a918 <Dbg::logc(char)>
c000aa68:	58                   	pop    eax
c000aa69:	eb 98                	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa6f:	89 c8                	mov    eax,ecx
c000aa71:	83 c1 04             	add    ecx,0x4
c000aa74:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa78:	6a 10                	push   0x10
c000aa7a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa7c:	51                   	push   ecx
c000aa7d:	e8 f3 fe ff ff       	call   c000a975 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa82:	5d                   	pop    ebp
c000aa83:	58                   	pop    eax
c000aa84:	e9 7a ff ff ff       	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa8d:	89 d0                	mov    eax,edx
c000aa8f:	83 c2 08             	add    edx,0x8
c000aa92:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa96:	6a 10                	push   0x10
c000aa98:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa9a:	50                   	push   eax
c000aa9b:	e8 d5 fe ff ff       	call   c000a975 <Dbg::logWriteIntBase(unsigned int, int)>
c000aaa0:	58                   	pop    eax
c000aaa1:	5a                   	pop    edx
c000aaa2:	e9 5c ff ff ff       	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>
c000aaa7:	6a 25                	push   0x25
c000aaa9:	e8 6a fe ff ff       	call   c000a918 <Dbg::logc(char)>
c000aaae:	5a                   	pop    edx
c000aaaf:	e9 4f ff ff ff       	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>
c000aab4:	6a 25                	push   0x25
c000aab6:	e8 5d fe ff ff       	call   c000a918 <Dbg::logc(char)>
c000aabb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aabf:	50                   	push   eax
c000aac0:	e8 53 fe ff ff       	call   c000a918 <Dbg::logc(char)>
c000aac5:	5a                   	pop    edx
c000aac6:	59                   	pop    ecx
c000aac7:	e9 37 ff ff ff       	jmp    c000aa03 <Dbg::kprintf(char const*, ...)+0x6d>

c000aacc <File::read(unsigned long long, void*, int*)>:
c000aacc:	53                   	push   ebx
c000aacd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aad5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aadc:	83 f8 19             	cmp    eax,0x19
c000aadf:	77 35                	ja     c000ab16 <File::read(unsigned long long, void*, int*)+0x4a>
c000aae1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aae8:	85 c0                	test   eax,eax
c000aaea:	74 2a                	je     c000ab16 <File::read(unsigned long long, void*, int*)+0x4a>
c000aaec:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aaf2:	85 c0                	test   eax,eax
c000aaf4:	74 20                	je     c000ab16 <File::read(unsigned long long, void*, int*)+0x4a>
c000aaf6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aafa:	74 21                	je     c000ab1d <File::read(unsigned long long, void*, int*)+0x51>
c000aafc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aafe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab02:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab10:	5b                   	pop    ebx
c000ab11:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab14:	ff e0                	jmp    eax
c000ab16:	b8 0b 00 00 00       	mov    eax,0xb
c000ab1b:	eb 05                	jmp    c000ab22 <File::read(unsigned long long, void*, int*)+0x56>
c000ab1d:	b8 05 00 00 00       	mov    eax,0x5
c000ab22:	5b                   	pop    ebx
c000ab23:	c3                   	ret    

c000ab24 <File::write(unsigned long long, void*, int*)>:
c000ab24:	53                   	push   ebx
c000ab25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab2d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab34:	83 f8 19             	cmp    eax,0x19
c000ab37:	77 35                	ja     c000ab6e <File::write(unsigned long long, void*, int*)+0x4a>
c000ab39:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab40:	85 c0                	test   eax,eax
c000ab42:	74 2a                	je     c000ab6e <File::write(unsigned long long, void*, int*)+0x4a>
c000ab44:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab4a:	85 c0                	test   eax,eax
c000ab4c:	74 20                	je     c000ab6e <File::write(unsigned long long, void*, int*)+0x4a>
c000ab4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab52:	74 21                	je     c000ab75 <File::write(unsigned long long, void*, int*)+0x51>
c000ab54:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab56:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab5a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab68:	5b                   	pop    ebx
c000ab69:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab6c:	ff e0                	jmp    eax
c000ab6e:	b8 0b 00 00 00       	mov    eax,0xb
c000ab73:	eb 05                	jmp    c000ab7a <File::write(unsigned long long, void*, int*)+0x56>
c000ab75:	b8 05 00 00 00       	mov    eax,0x5
c000ab7a:	5b                   	pop    ebx
c000ab7b:	c3                   	ret    

c000ab7c <Directory::read(unsigned long long, void*, int*)>:
c000ab7c:	53                   	push   ebx
c000ab7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab85:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab8c:	83 f8 19             	cmp    eax,0x19
c000ab8f:	77 35                	ja     c000abc6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab91:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab98:	85 c0                	test   eax,eax
c000ab9a:	74 2a                	je     c000abc6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab9c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aba2:	85 c0                	test   eax,eax
c000aba4:	74 20                	je     c000abc6 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000aba6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abaa:	74 21                	je     c000abcd <Directory::read(unsigned long long, void*, int*)+0x51>
c000abac:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abae:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abb2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc0:	5b                   	pop    ebx
c000abc1:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000abc4:	ff e0                	jmp    eax
c000abc6:	b8 0b 00 00 00       	mov    eax,0xb
c000abcb:	eb 05                	jmp    c000abd2 <Directory::read(unsigned long long, void*, int*)+0x56>
c000abcd:	b8 05 00 00 00       	mov    eax,0x5
c000abd2:	5b                   	pop    ebx
c000abd3:	c3                   	ret    

c000abd4 <Directory::write(unsigned long long, void*, int*)>:
c000abd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abd8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000abdf:	b8 0b 00 00 00       	mov    eax,0xb
c000abe4:	83 fa 19             	cmp    edx,0x19
c000abe7:	77 18                	ja     c000ac01 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abe9:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abf0:	85 d2                	test   edx,edx
c000abf2:	74 0d                	je     c000ac01 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abf4:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abfb:	19 c0                	sbb    eax,eax
c000abfd:	83 e0 0a             	and    eax,0xa
c000ac00:	40                   	inc    eax
c000ac01:	c3                   	ret    

c000ac02 <File::isAtty()>:
c000ac02:	31 c0                	xor    eax,eax
c000ac04:	c3                   	ret    
c000ac05:	90                   	nop

c000ac06 <Directory::isAtty()>:
c000ac06:	31 c0                	xor    eax,eax
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac0a:	b8 0a 00 00 00       	mov    eax,0xa
c000ac0f:	c3                   	ret    

c000ac10 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac10:	b8 0a 00 00 00       	mov    eax,0xa
c000ac15:	c3                   	ret    

c000ac16 <Filesystem::allocateSwapfile(char const*, int)>:
c000ac16:	31 c0                	xor    eax,eax
c000ac18:	31 d2                	xor    edx,edx
c000ac1a:	c3                   	ret    
c000ac1b:	90                   	nop

c000ac1c <File::~File()>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	ba 50 02 02 c0       	mov    edx,0xc0020250
c000ac24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac28:	89 10                	mov    DWORD PTR [eax],edx
c000ac2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac2e:	83 ec 0c             	sub    esp,0xc
c000ac31:	50                   	push   eax
c000ac32:	e8 7d e7 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ac37:	83 c4 10             	add    esp,0x10
c000ac3a:	90                   	nop
c000ac3b:	83 c4 0c             	add    esp,0xc
c000ac3e:	c3                   	ret    
c000ac3f:	90                   	nop

c000ac40 <File::~File()>:
c000ac40:	83 ec 0c             	sub    esp,0xc
c000ac43:	83 ec 0c             	sub    esp,0xc
c000ac46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac4a:	e8 cd ff ff ff       	call   c000ac1c <File::~File()>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	83 ec 08             	sub    esp,0x8
c000ac55:	68 14 01 00 00       	push   0x114
c000ac5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac5e:	e8 06 fc ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000ac63:	83 c4 10             	add    esp,0x10
c000ac66:	83 c4 0c             	add    esp,0xc
c000ac69:	c3                   	ret    

c000ac6a <Directory::~Directory()>:
c000ac6a:	83 ec 0c             	sub    esp,0xc
c000ac6d:	ba 6c 02 02 c0       	mov    edx,0xc002026c
c000ac72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac76:	89 10                	mov    DWORD PTR [eax],edx
c000ac78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	50                   	push   eax
c000ac80:	e8 2f e7 ff ff       	call   c00093b4 <UnixFile::~UnixFile()>
c000ac85:	83 c4 10             	add    esp,0x10
c000ac88:	90                   	nop
c000ac89:	83 c4 0c             	add    esp,0xc
c000ac8c:	c3                   	ret    
c000ac8d:	90                   	nop

c000ac8e <Directory::~Directory()>:
c000ac8e:	83 ec 0c             	sub    esp,0xc
c000ac91:	83 ec 0c             	sub    esp,0xc
c000ac94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac98:	e8 cd ff ff ff       	call   c000ac6a <Directory::~Directory()>
c000ac9d:	83 c4 10             	add    esp,0x10
c000aca0:	83 ec 08             	sub    esp,0x8
c000aca3:	68 14 01 00 00       	push   0x114
c000aca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acac:	e8 b8 fb ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000acb1:	83 c4 10             	add    esp,0x10
c000acb4:	83 c4 0c             	add    esp,0xc
c000acb7:	c3                   	ret    

c000acb8 <Filesystem::Filesystem()>:
c000acb8:	ba e8 01 02 c0       	mov    edx,0xc00201e8
c000acbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc1:	89 10                	mov    DWORD PTR [eax],edx
c000acc3:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000acc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000accd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000acd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd4:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000acd9:	90                   	nop
c000acda:	c3                   	ret    
c000acdb:	90                   	nop

c000acdc <Filesystem::~Filesystem()>:
c000acdc:	ba e8 01 02 c0       	mov    edx,0xc00201e8
c000ace1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ace5:	89 10                	mov    DWORD PTR [eax],edx
c000ace7:	90                   	nop
c000ace8:	c3                   	ret    
c000ace9:	90                   	nop

c000acea <Filesystem::~Filesystem()>:
c000acea:	83 ec 0c             	sub    esp,0xc
c000aced:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acf1:	e8 e6 ff ff ff       	call   c000acdc <Filesystem::~Filesystem()>
c000acf6:	83 c4 04             	add    esp,0x4
c000acf9:	83 ec 08             	sub    esp,0x8
c000acfc:	6a 08                	push   0x8
c000acfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad02:	e8 62 fb ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000ad07:	83 c4 10             	add    esp,0x10
c000ad0a:	83 c4 0c             	add    esp,0xc
c000ad0d:	c3                   	ret    

c000ad0e <Fs::getcwd(Process*, char*, int)>:
c000ad0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad12:	31 c0                	xor    eax,eax
c000ad14:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad17:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad1b:	7d 15                	jge    c000ad32 <Fs::getcwd(Process*, char*, int)+0x24>
c000ad1d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad21:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad28:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad2b:	84 c9                	test   cl,cl
c000ad2d:	74 06                	je     c000ad35 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad2f:	40                   	inc    eax
c000ad30:	eb e2                	jmp    c000ad14 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad32:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad35:	31 c0                	xor    eax,eax
c000ad37:	c3                   	ret    

c000ad38 <Fs::initVFS()>:
c000ad38:	83 ec 18             	sub    esp,0x18
c000ad3b:	6a 08                	push   0x8
c000ad3d:	e8 6c cd ff ff       	call   c0007aae <malloc>
c000ad42:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad45:	e8 5e dd 00 00       	call   c0018aa8 <FAT::FAT()>
c000ad4a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad51:	e8 58 cd ff ff       	call   c0007aae <malloc>
c000ad56:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad59:	e8 70 ec 00 00       	call   c00199ce <ISO9660::ISO9660()>
c000ad5e:	83 c4 1c             	add    esp,0x1c
c000ad61:	c3                   	ret    

c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad62:	55                   	push   ebp
c000ad63:	57                   	push   edi
c000ad64:	56                   	push   esi
c000ad65:	53                   	push   ebx
c000ad66:	81 ec 10 04 00 00    	sub    esp,0x410
c000ad6c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ad73:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ad7a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ad81:	68 00 04 00 00       	push   0x400
c000ad86:	6a 00                	push   0x0
c000ad88:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ad8c:	56                   	push   esi
c000ad8d:	e8 5e 57 ff ff       	call   c00004f0 <memset>
c000ad92:	83 c4 10             	add    esp,0x10
c000ad95:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad99:	75 0b                	jne    c000ada6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad9b:	50                   	push   eax
c000ad9c:	50                   	push   eax
c000ad9d:	57                   	push   edi
c000ad9e:	56                   	push   esi
c000ad9f:	e8 9c 58 ff ff       	call   c0000640 <strcpy>
c000ada4:	eb 44                	jmp    c000adea <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000ada6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ada9:	83 f8 5c             	cmp    eax,0x5c
c000adac:	74 05                	je     c000adb3 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000adae:	83 f8 2f             	cmp    eax,0x2f
c000adb1:	75 18                	jne    c000adcb <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000adb3:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000adb6:	3c 60                	cmp    al,0x60
c000adb8:	7e 03                	jle    c000adbd <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000adba:	83 e8 20             	sub    eax,0x20
c000adbd:	88 04 24             	mov    BYTE PTR [esp],al
c000adc0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000adc7:	50                   	push   eax
c000adc8:	50                   	push   eax
c000adc9:	eb 18                	jmp    c000ade3 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000adcb:	50                   	push   eax
c000adcc:	50                   	push   eax
c000adcd:	55                   	push   ebp
c000adce:	56                   	push   esi
c000adcf:	e8 6c 58 ff ff       	call   c0000640 <strcpy>
c000add4:	5a                   	pop    edx
c000add5:	59                   	pop    ecx
c000add6:	68 3b 11 02 c0       	push   0xc002113b
c000addb:	56                   	push   esi
c000addc:	e8 5f 5a ff ff       	call   c0000840 <strcat>
c000ade1:	5d                   	pop    ebp
c000ade2:	58                   	pop    eax
c000ade3:	57                   	push   edi
c000ade4:	56                   	push   esi
c000ade5:	e8 56 5a ff ff       	call   c0000840 <strcat>
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	8a 04 24             	mov    al,BYTE PTR [esp]
c000adf0:	3c 60                	cmp    al,0x60
c000adf2:	7e 03                	jle    c000adf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000adf4:	83 e8 20             	sub    eax,0x20
c000adf7:	88 04 24             	mov    BYTE PTR [esp],al
c000adfa:	88 03                	mov    BYTE PTR [ebx],al
c000adfc:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae03:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae09:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae0d:	bf 03 00 00 00       	mov    edi,0x3
c000ae12:	b8 03 00 00 00       	mov    eax,0x3
c000ae17:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000ae1b:	89 ea                	mov    edx,ebp
c000ae1d:	85 ed                	test   ebp,ebp
c000ae1f:	0f 84 97 00 00 00    	je     c000aebc <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000ae25:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae28:	83 fd 5c             	cmp    ebp,0x5c
c000ae2b:	74 05                	je     c000ae32 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000ae2d:	83 fd 2f             	cmp    ebp,0x2f
c000ae30:	75 12                	jne    c000ae44 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae32:	89 c5                	mov    ebp,eax
c000ae34:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae39:	74 09                	je     c000ae44 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae3b:	40                   	inc    eax
c000ae3c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae40:	89 cf                	mov    edi,ecx
c000ae42:	eb d3                	jmp    c000ae17 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000ae44:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ae49:	0f be ea             	movsx  ebp,dl
c000ae4c:	75 5e                	jne    c000aeac <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae4e:	83 fd 2e             	cmp    ebp,0x2e
c000ae51:	75 59                	jne    c000aeac <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae53:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ae57:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000ae5c:	74 18                	je     c000ae76 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000ae5e:	83 fd 2e             	cmp    ebp,0x2e
c000ae61:	74 53                	je     c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae63:	89 f9                	mov    ecx,edi
c000ae65:	41                   	inc    ecx
c000ae66:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae6a:	83 fa 2f             	cmp    edx,0x2f
c000ae6d:	74 f6                	je     c000ae65 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae6f:	83 fa 5c             	cmp    edx,0x5c
c000ae72:	74 f1                	je     c000ae65 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae74:	eb ca                	jmp    c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae76:	83 fd 2e             	cmp    ebp,0x2e
c000ae79:	74 3b                	je     c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae7b:	83 f8 03             	cmp    eax,0x3
c000ae7e:	74 c0                	je     c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae80:	41                   	inc    ecx
c000ae81:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae85:	83 fa 2f             	cmp    edx,0x2f
c000ae88:	74 f6                	je     c000ae80 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae8a:	83 fa 5c             	cmp    edx,0x5c
c000ae8d:	74 f1                	je     c000ae80 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae8f:	48                   	dec    eax
c000ae90:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae94:	75 06                	jne    c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000ae96:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae9a:	eb f3                	jmp    c000ae8f <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000ae9c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aea0:	74 07                	je     c000aea9 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000aea2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aea6:	48                   	dec    eax
c000aea7:	eb f3                	jmp    c000ae9c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000aea9:	40                   	inc    eax
c000aeaa:	eb 94                	jmp    c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aeac:	83 fd 2f             	cmp    ebp,0x2f
c000aeaf:	74 8f                	je     c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aeb1:	83 fd 5c             	cmp    ebp,0x5c
c000aeb4:	74 8a                	je     c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aeb6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aeb9:	40                   	inc    eax
c000aeba:	eb 84                	jmp    c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aebc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aec0:	83 ec 0c             	sub    esp,0xc
c000aec3:	53                   	push   ebx
c000aec4:	e8 a7 56 ff ff       	call   c0000570 <strlen>
c000aec9:	83 c4 10             	add    esp,0x10
c000aecc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aed1:	75 26                	jne    c000aef9 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000aed3:	83 ec 0c             	sub    esp,0xc
c000aed6:	53                   	push   ebx
c000aed7:	e8 94 56 ff ff       	call   c0000570 <strlen>
c000aedc:	83 c4 10             	add    esp,0x10
c000aedf:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aee4:	74 26                	je     c000af0c <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000aee6:	83 ec 0c             	sub    esp,0xc
c000aee9:	53                   	push   ebx
c000aeea:	e8 81 56 ff ff       	call   c0000570 <strlen>
c000aeef:	83 c4 10             	add    esp,0x10
c000aef2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aef7:	eb c7                	jmp    c000aec0 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000aef9:	83 ec 0c             	sub    esp,0xc
c000aefc:	53                   	push   ebx
c000aefd:	e8 6e 56 ff ff       	call   c0000570 <strlen>
c000af02:	83 c4 10             	add    esp,0x10
c000af05:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af0a:	74 c7                	je     c000aed3 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000af0c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000af12:	5b                   	pop    ebx
c000af13:	5e                   	pop    esi
c000af14:	5f                   	pop    edi
c000af15:	5d                   	pop    ebp
c000af16:	c3                   	ret    
c000af17:	90                   	nop

c000af18 <File::File(char const*, Process*)>:
c000af18:	83 ec 0c             	sub    esp,0xc
c000af1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1f:	83 ec 08             	sub    esp,0x8
c000af22:	6a 00                	push   0x0
c000af24:	50                   	push   eax
c000af25:	e8 a4 e2 ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000af2a:	83 c4 10             	add    esp,0x10
c000af2d:	ba 50 02 02 c0       	mov    edx,0xc0020250
c000af32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af36:	89 10                	mov    DWORD PTR [eax],edx
c000af38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af3c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af46:	83 c0 0d             	add    eax,0xd
c000af49:	83 ec 04             	sub    esp,0x4
c000af4c:	52                   	push   edx
c000af4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af51:	50                   	push   eax
c000af52:	e8 0b fe ff ff       	call   c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af57:	83 c4 10             	add    esp,0x10
c000af5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af61:	83 e8 41             	sub    eax,0x41
c000af64:	88 c2                	mov    dl,al
c000af66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af74:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af7c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af82:	0f b6 c0             	movzx  eax,al
c000af85:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af8c:	85 c0                	test   eax,eax
c000af8e:	74 3e                	je     c000afce <File::File(char const*, Process*)+0xb6>
c000af90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af94:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af9a:	0f b6 c0             	movzx  eax,al
c000af9d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afa4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000afaa:	85 c0                	test   eax,eax
c000afac:	75 20                	jne    c000afce <File::File(char const*, Process*)+0xb6>
c000afae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afb8:	0f b6 c0             	movzx  eax,al
c000afbb:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 1f 21 00 00       	call   c000d0ea <LogicalDisk::mount()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	90                   	nop
c000afcf:	83 c4 0c             	add    esp,0xc
c000afd2:	c3                   	ret    
c000afd3:	90                   	nop

c000afd4 <File::open(FileOpenMode)>:
c000afd4:	53                   	push   ebx
c000afd5:	b8 0b 00 00 00       	mov    eax,0xb
c000afda:	83 ec 08             	sub    esp,0x8
c000afdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afe1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afe8:	83 fa 19             	cmp    edx,0x19
c000afeb:	77 40                	ja     c000b02d <File::open(FileOpenMode)+0x59>
c000afed:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000aff4:	85 d2                	test   edx,edx
c000aff6:	74 35                	je     c000b02d <File::open(FileOpenMode)+0x59>
c000aff8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000affe:	85 d2                	test   edx,edx
c000b000:	74 2b                	je     c000b02d <File::open(FileOpenMode)+0x59>
c000b002:	b8 06 00 00 00       	mov    eax,0x6
c000b007:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b00b:	75 20                	jne    c000b02d <File::open(FileOpenMode)+0x59>
c000b00d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b00f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b019:	51                   	push   ecx
c000b01a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b01d:	51                   	push   ecx
c000b01e:	52                   	push   edx
c000b01f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b022:	83 c4 10             	add    esp,0x10
c000b025:	85 c0                	test   eax,eax
c000b027:	75 04                	jne    c000b02d <File::open(FileOpenMode)+0x59>
c000b029:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b02d:	83 c4 08             	add    esp,0x8
c000b030:	5b                   	pop    ebx
c000b031:	c3                   	ret    

c000b032 <File::close()>:
c000b032:	53                   	push   ebx
c000b033:	b8 0b 00 00 00       	mov    eax,0xb
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b03f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b046:	83 f9 19             	cmp    ecx,0x19
c000b049:	77 41                	ja     c000b08c <File::close()+0x5a>
c000b04b:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b052:	85 db                	test   ebx,ebx
c000b054:	74 36                	je     c000b08c <File::close()+0x5a>
c000b056:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b05d:	74 2d                	je     c000b08c <File::close()+0x5a>
c000b05f:	b8 05 00 00 00       	mov    eax,0x5
c000b064:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b068:	74 22                	je     c000b08c <File::close()+0x5a>
c000b06a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b06e:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b075:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b07b:	53                   	push   ebx
c000b07c:	53                   	push   ebx
c000b07d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b07f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b085:	50                   	push   eax
c000b086:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	83 c4 08             	add    esp,0x8
c000b08f:	5b                   	pop    ebx
c000b090:	c3                   	ret    
c000b091:	90                   	nop

c000b092 <File::seek(unsigned long long)>:
c000b092:	56                   	push   esi
c000b093:	53                   	push   ebx
c000b094:	b8 0b 00 00 00       	mov    eax,0xb
c000b099:	51                   	push   ecx
c000b09a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b09e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0a2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0ad:	83 fa 19             	cmp    edx,0x19
c000b0b0:	77 31                	ja     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0b2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0b9:	85 d2                	test   edx,edx
c000b0bb:	74 26                	je     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0c3:	85 d2                	test   edx,edx
c000b0c5:	74 1c                	je     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0c7:	b8 05 00 00 00       	mov    eax,0x5
c000b0cc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0d0:	74 11                	je     c000b0e3 <File::seek(unsigned long long)+0x51>
c000b0d2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0d4:	53                   	push   ebx
c000b0d5:	51                   	push   ecx
c000b0d6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b0dc:	52                   	push   edx
c000b0dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	5a                   	pop    edx
c000b0e4:	5b                   	pop    ebx
c000b0e5:	5e                   	pop    esi
c000b0e6:	c3                   	ret    
c000b0e7:	90                   	nop

c000b0e8 <File::tell(unsigned long long*)>:
c000b0e8:	83 ec 0c             	sub    esp,0xc
c000b0eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b0f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0f4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0fb:	83 fa 19             	cmp    edx,0x19
c000b0fe:	77 34                	ja     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b100:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b107:	85 d2                	test   edx,edx
c000b109:	74 29                	je     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b10b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b111:	85 d2                	test   edx,edx
c000b113:	74 1f                	je     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b115:	b8 05 00 00 00       	mov    eax,0x5
c000b11a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b11e:	74 14                	je     c000b134 <File::tell(unsigned long long*)+0x4c>
c000b120:	50                   	push   eax
c000b121:	8b 02                	mov    eax,DWORD PTR [edx]
c000b123:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b127:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b12d:	52                   	push   edx
c000b12e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	83 c4 0c             	add    esp,0xc
c000b137:	c3                   	ret    

c000b138 <File::rewind()>:
c000b138:	83 ec 10             	sub    esp,0x10
c000b13b:	6a 00                	push   0x0
c000b13d:	6a 00                	push   0x0
c000b13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b143:	e8 4a ff ff ff       	call   c000b092 <File::seek(unsigned long long)>
c000b148:	83 c4 1c             	add    esp,0x1c
c000b14b:	c3                   	ret    

c000b14c <File::unlink()>:
c000b14c:	83 ec 0c             	sub    esp,0xc
c000b14f:	b8 0b 00 00 00       	mov    eax,0xb
c000b154:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b158:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b15f:	83 f9 19             	cmp    ecx,0x19
c000b162:	77 2f                	ja     c000b193 <File::unlink()+0x47>
c000b164:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b16b:	85 c9                	test   ecx,ecx
c000b16d:	74 24                	je     c000b193 <File::unlink()+0x47>
c000b16f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b175:	85 c9                	test   ecx,ecx
c000b177:	74 1a                	je     c000b193 <File::unlink()+0x47>
c000b179:	b8 06 00 00 00       	mov    eax,0x6
c000b17e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b182:	75 0f                	jne    c000b193 <File::unlink()+0x47>
c000b184:	83 c2 0d             	add    edx,0xd
c000b187:	50                   	push   eax
c000b188:	50                   	push   eax
c000b189:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b18b:	52                   	push   edx
c000b18c:	51                   	push   ecx
c000b18d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	83 c4 0c             	add    esp,0xc
c000b196:	c3                   	ret    
c000b197:	90                   	nop

c000b198 <File::rename(char const*)>:
c000b198:	83 ec 0c             	sub    esp,0xc
c000b19b:	b8 0b 00 00 00       	mov    eax,0xb
c000b1a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ab:	83 f9 19             	cmp    ecx,0x19
c000b1ae:	77 32                	ja     c000b1e2 <File::rename(char const*)+0x4a>
c000b1b0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1b7:	85 c9                	test   ecx,ecx
c000b1b9:	74 27                	je     c000b1e2 <File::rename(char const*)+0x4a>
c000b1bb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1c1:	85 c9                	test   ecx,ecx
c000b1c3:	74 1d                	je     c000b1e2 <File::rename(char const*)+0x4a>
c000b1c5:	b8 06 00 00 00       	mov    eax,0x6
c000b1ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ce:	75 12                	jne    c000b1e2 <File::rename(char const*)+0x4a>
c000b1d0:	83 c2 0d             	add    edx,0xd
c000b1d3:	50                   	push   eax
c000b1d4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1da:	52                   	push   edx
c000b1db:	51                   	push   ecx
c000b1dc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1df:	83 c4 10             	add    esp,0x10
c000b1e2:	83 c4 0c             	add    esp,0xc
c000b1e5:	c3                   	ret    

c000b1e6 <File::chfatattr(unsigned char, unsigned char)>:
c000b1e6:	57                   	push   edi
c000b1e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ec:	56                   	push   esi
c000b1ed:	53                   	push   ebx
c000b1ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1fd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b201:	83 f9 19             	cmp    ecx,0x19
c000b204:	77 37                	ja     c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b206:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b20d:	85 c9                	test   ecx,ecx
c000b20f:	74 2c                	je     c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b211:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b217:	85 c9                	test   ecx,ecx
c000b219:	74 22                	je     c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b21b:	b8 06 00 00 00       	mov    eax,0x6
c000b220:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b224:	75 17                	jne    c000b23d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b226:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b228:	89 f0                	mov    eax,esi
c000b22a:	83 c2 0d             	add    edx,0xd
c000b22d:	0f b6 f0             	movzx  esi,al
c000b230:	0f b6 db             	movzx  ebx,bl
c000b233:	56                   	push   esi
c000b234:	53                   	push   ebx
c000b235:	52                   	push   edx
c000b236:	51                   	push   ecx
c000b237:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b23a:	83 c4 10             	add    esp,0x10
c000b23d:	5b                   	pop    ebx
c000b23e:	5e                   	pop    esi
c000b23f:	5f                   	pop    edi
c000b240:	c3                   	ret    
c000b241:	90                   	nop

c000b242 <File::exists()>:
c000b242:	83 ec 0c             	sub    esp,0xc
c000b245:	31 c0                	xor    eax,eax
c000b247:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b24b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b252:	83 f9 19             	cmp    ecx,0x19
c000b255:	77 24                	ja     c000b27b <File::exists()+0x39>
c000b257:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b25e:	85 c9                	test   ecx,ecx
c000b260:	74 19                	je     c000b27b <File::exists()+0x39>
c000b262:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b268:	85 c9                	test   ecx,ecx
c000b26a:	74 0f                	je     c000b27b <File::exists()+0x39>
c000b26c:	83 c2 0d             	add    edx,0xd
c000b26f:	50                   	push   eax
c000b270:	50                   	push   eax
c000b271:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b273:	52                   	push   edx
c000b274:	51                   	push   ecx
c000b275:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	c3                   	ret    
c000b27f:	90                   	nop

c000b280 <File::stat(unsigned long long*, bool*)>:
c000b280:	56                   	push   esi
c000b281:	53                   	push   ebx
c000b282:	50                   	push   eax
c000b283:	b8 0b 00 00 00       	mov    eax,0xb
c000b288:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b28c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b290:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b297:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b29b:	83 f9 19             	cmp    ecx,0x19
c000b29e:	77 3d                	ja     c000b2dd <File::stat(unsigned long long*, bool*)+0x5d>
c000b2a0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2a7:	85 c9                	test   ecx,ecx
c000b2a9:	74 32                	je     c000b2dd <File::stat(unsigned long long*, bool*)+0x5d>
c000b2ab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2b1:	85 c9                	test   ecx,ecx
c000b2b3:	74 28                	je     c000b2dd <File::stat(unsigned long long*, bool*)+0x5d>
c000b2b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2bb:	74 13                	je     c000b2d0 <File::stat(unsigned long long*, bool*)+0x50>
c000b2bd:	83 ec 04             	sub    esp,0x4
c000b2c0:	56                   	push   esi
c000b2c1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2c7:	51                   	push   ecx
c000b2c8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2cb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2ce:	eb 0a                	jmp    c000b2da <File::stat(unsigned long long*, bool*)+0x5a>
c000b2d0:	53                   	push   ebx
c000b2d1:	83 c2 0d             	add    edx,0xd
c000b2d4:	56                   	push   esi
c000b2d5:	52                   	push   edx
c000b2d6:	51                   	push   ecx
c000b2d7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	5a                   	pop    edx
c000b2de:	5b                   	pop    ebx
c000b2df:	5e                   	pop    esi
c000b2e0:	c3                   	ret    

c000b2e1 <Fs::setcwd(Process*, char*)>:
c000b2e1:	55                   	push   ebp
c000b2e2:	57                   	push   edi
c000b2e3:	56                   	push   esi
c000b2e4:	53                   	push   ebx
c000b2e5:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2eb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2f2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2f8:	57                   	push   edi
c000b2f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b300:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b304:	56                   	push   esi
c000b305:	e8 58 fa ff ff       	call   c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b30a:	89 34 24             	mov    DWORD PTR [esp],esi
c000b30d:	e8 5e 52 ff ff       	call   c0000570 <strlen>
c000b312:	83 c4 10             	add    esp,0x10
c000b315:	83 f8 02             	cmp    eax,0x2
c000b318:	77 15                	ja     c000b32f <Fs::setcwd(Process*, char*)+0x4e>
c000b31a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b31f:	83 eb 41             	sub    ebx,0x41
c000b322:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b329:	85 c0                	test   eax,eax
c000b32b:	75 1c                	jne    c000b349 <Fs::setcwd(Process*, char*)+0x68>
c000b32d:	eb 2f                	jmp    c000b35e <Fs::setcwd(Process*, char*)+0x7d>
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	56                   	push   esi
c000b333:	e8 38 52 ff ff       	call   c0000570 <strlen>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	83 f8 03             	cmp    eax,0x3
c000b33e:	75 57                	jne    c000b397 <Fs::setcwd(Process*, char*)+0xb6>
c000b340:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b345:	75 50                	jne    c000b397 <Fs::setcwd(Process*, char*)+0xb6>
c000b347:	eb d1                	jmp    c000b31a <Fs::setcwd(Process*, char*)+0x39>
c000b349:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b350:	75 0c                	jne    c000b35e <Fs::setcwd(Process*, char*)+0x7d>
c000b352:	83 ec 0c             	sub    esp,0xc
c000b355:	50                   	push   eax
c000b356:	e8 8f 1d 00 00       	call   c000d0ea <LogicalDisk::mount()>
c000b35b:	83 c4 10             	add    esp,0x10
c000b35e:	b8 03 00 00 00       	mov    eax,0x3
c000b363:	83 fb 19             	cmp    ebx,0x19
c000b366:	0f 87 c6 00 00 00    	ja     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b36c:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b373:	b8 05 00 00 00       	mov    eax,0x5
c000b378:	85 d2                	test   edx,edx
c000b37a:	0f 84 b2 00 00 00    	je     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b380:	b8 06 00 00 00       	mov    eax,0x6
c000b385:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b38c:	0f 85 92 00 00 00    	jne    c000b424 <Fs::setcwd(Process*, char*)+0x143>
c000b392:	e9 9b 00 00 00       	jmp    c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b397:	83 ec 0c             	sub    esp,0xc
c000b39a:	68 14 01 00 00       	push   0x114
c000b39f:	e8 0a c7 ff ff       	call   c0007aae <malloc>
c000b3a4:	83 c4 0c             	add    esp,0xc
c000b3a7:	89 c3                	mov    ebx,eax
c000b3a9:	55                   	push   ebp
c000b3aa:	56                   	push   esi
c000b3ab:	50                   	push   eax
c000b3ac:	e8 67 fb ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000b3b1:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3b6:	83 c4 0c             	add    esp,0xc
c000b3b9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3bd:	50                   	push   eax
c000b3be:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3c2:	50                   	push   eax
c000b3c3:	53                   	push   ebx
c000b3c4:	e8 b7 fe ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c000b3c9:	83 c4 10             	add    esp,0x10
c000b3cc:	83 f8 02             	cmp    eax,0x2
c000b3cf:	74 27                	je     c000b3f8 <Fs::setcwd(Process*, char*)+0x117>
c000b3d1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b3d6:	75 1c                	jne    c000b3f4 <Fs::setcwd(Process*, char*)+0x113>
c000b3d8:	b8 02 00 00 00       	mov    eax,0x2
c000b3dd:	85 db                	test   ebx,ebx
c000b3df:	74 51                	je     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b3e1:	83 ec 0c             	sub    esp,0xc
c000b3e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3e6:	53                   	push   ebx
c000b3e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	b8 02 00 00 00       	mov    eax,0x2
c000b3f2:	eb 3e                	jmp    c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b3f4:	85 c0                	test   eax,eax
c000b3f6:	74 1c                	je     c000b414 <Fs::setcwd(Process*, char*)+0x133>
c000b3f8:	b8 01 00 00 00       	mov    eax,0x1
c000b3fd:	85 db                	test   ebx,ebx
c000b3ff:	74 31                	je     c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b401:	83 ec 0c             	sub    esp,0xc
c000b404:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b406:	53                   	push   ebx
c000b407:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	b8 01 00 00 00       	mov    eax,0x1
c000b412:	eb 1e                	jmp    c000b432 <Fs::setcwd(Process*, char*)+0x151>
c000b414:	85 db                	test   ebx,ebx
c000b416:	74 0c                	je     c000b424 <Fs::setcwd(Process*, char*)+0x143>
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41d:	53                   	push   ebx
c000b41e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b421:	83 c4 10             	add    esp,0x10
c000b424:	50                   	push   eax
c000b425:	50                   	push   eax
c000b426:	56                   	push   esi
c000b427:	57                   	push   edi
c000b428:	e8 13 52 ff ff       	call   c0000640 <strcpy>
c000b42d:	83 c4 10             	add    esp,0x10
c000b430:	31 c0                	xor    eax,eax
c000b432:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b438:	5b                   	pop    ebx
c000b439:	5e                   	pop    esi
c000b43a:	5f                   	pop    edi
c000b43b:	5d                   	pop    ebp
c000b43c:	c3                   	ret    
c000b43d:	90                   	nop

c000b43e <Directory::Directory(char const*, Process*)>:
c000b43e:	83 ec 0c             	sub    esp,0xc
c000b441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b445:	83 ec 08             	sub    esp,0x8
c000b448:	6a 00                	push   0x0
c000b44a:	50                   	push   eax
c000b44b:	e8 7e dd ff ff       	call   c00091ce <UnixFile::UnixFile(int)>
c000b450:	83 c4 10             	add    esp,0x10
c000b453:	ba 6c 02 02 c0       	mov    edx,0xc002026c
c000b458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b45c:	89 10                	mov    DWORD PTR [eax],edx
c000b45e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b462:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46c:	83 c0 0d             	add    eax,0xd
c000b46f:	83 ec 04             	sub    esp,0x4
c000b472:	52                   	push   edx
c000b473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b477:	50                   	push   eax
c000b478:	e8 e5 f8 ff ff       	call   c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b47d:	83 c4 10             	add    esp,0x10
c000b480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b484:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b487:	83 e8 41             	sub    eax,0x41
c000b48a:	88 c2                	mov    dl,al
c000b48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b490:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b49a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4a8:	0f b6 c0             	movzx  eax,al
c000b4ab:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4b2:	85 c0                	test   eax,eax
c000b4b4:	74 3e                	je     c000b4f4 <Directory::Directory(char const*, Process*)+0xb6>
c000b4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ba:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4c0:	0f b6 c0             	movzx  eax,al
c000b4c3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4ca:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4d0:	85 c0                	test   eax,eax
c000b4d2:	75 20                	jne    c000b4f4 <Directory::Directory(char const*, Process*)+0xb6>
c000b4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4d8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4de:	0f b6 c0             	movzx  eax,al
c000b4e1:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4e8:	83 ec 0c             	sub    esp,0xc
c000b4eb:	50                   	push   eax
c000b4ec:	e8 f9 1b 00 00       	call   c000d0ea <LogicalDisk::mount()>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	90                   	nop
c000b4f5:	83 c4 0c             	add    esp,0xc
c000b4f8:	c3                   	ret    
c000b4f9:	90                   	nop

c000b4fa <Directory::open()>:
c000b4fa:	53                   	push   ebx
c000b4fb:	b8 0b 00 00 00       	mov    eax,0xb
c000b500:	83 ec 08             	sub    esp,0x8
c000b503:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b507:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b50e:	83 fa 19             	cmp    edx,0x19
c000b511:	77 3d                	ja     c000b550 <Directory::open()+0x56>
c000b513:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b51a:	85 d2                	test   edx,edx
c000b51c:	74 32                	je     c000b550 <Directory::open()+0x56>
c000b51e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b524:	85 d2                	test   edx,edx
c000b526:	74 28                	je     c000b550 <Directory::open()+0x56>
c000b528:	b8 06 00 00 00       	mov    eax,0x6
c000b52d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b531:	75 1d                	jne    c000b550 <Directory::open()+0x56>
c000b533:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b539:	50                   	push   eax
c000b53a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b53c:	51                   	push   ecx
c000b53d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b540:	51                   	push   ecx
c000b541:	52                   	push   edx
c000b542:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b545:	83 c4 10             	add    esp,0x10
c000b548:	85 c0                	test   eax,eax
c000b54a:	75 04                	jne    c000b550 <Directory::open()+0x56>
c000b54c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b550:	83 c4 08             	add    esp,0x8
c000b553:	5b                   	pop    ebx
c000b554:	c3                   	ret    
c000b555:	90                   	nop

c000b556 <Directory::close()>:
c000b556:	53                   	push   ebx
c000b557:	b8 0b 00 00 00       	mov    eax,0xb
c000b55c:	83 ec 08             	sub    esp,0x8
c000b55f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b563:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b56a:	83 f9 19             	cmp    ecx,0x19
c000b56d:	77 41                	ja     c000b5b0 <Directory::close()+0x5a>
c000b56f:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b576:	85 db                	test   ebx,ebx
c000b578:	74 36                	je     c000b5b0 <Directory::close()+0x5a>
c000b57a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b581:	74 2d                	je     c000b5b0 <Directory::close()+0x5a>
c000b583:	b8 05 00 00 00       	mov    eax,0x5
c000b588:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b58c:	74 22                	je     c000b5b0 <Directory::close()+0x5a>
c000b58e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b592:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b599:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b59f:	53                   	push   ebx
c000b5a0:	53                   	push   ebx
c000b5a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b5a3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b5a9:	50                   	push   eax
c000b5aa:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	83 c4 08             	add    esp,0x8
c000b5b3:	5b                   	pop    ebx
c000b5b4:	c3                   	ret    
c000b5b5:	90                   	nop

c000b5b6 <Directory::unlink()>:
c000b5b6:	83 ec 0c             	sub    esp,0xc
c000b5b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5c2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5c9:	83 f9 19             	cmp    ecx,0x19
c000b5cc:	77 2f                	ja     c000b5fd <Directory::unlink()+0x47>
c000b5ce:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5d5:	85 c9                	test   ecx,ecx
c000b5d7:	74 24                	je     c000b5fd <Directory::unlink()+0x47>
c000b5d9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5df:	85 c9                	test   ecx,ecx
c000b5e1:	74 1a                	je     c000b5fd <Directory::unlink()+0x47>
c000b5e3:	b8 06 00 00 00       	mov    eax,0x6
c000b5e8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ec:	75 0f                	jne    c000b5fd <Directory::unlink()+0x47>
c000b5ee:	83 c2 0d             	add    edx,0xd
c000b5f1:	50                   	push   eax
c000b5f2:	50                   	push   eax
c000b5f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5f5:	52                   	push   edx
c000b5f6:	51                   	push   ecx
c000b5f7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5fa:	83 c4 10             	add    esp,0x10
c000b5fd:	83 c4 0c             	add    esp,0xc
c000b600:	c3                   	ret    
c000b601:	90                   	nop

c000b602 <Directory::rename(char const*)>:
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	b8 0b 00 00 00       	mov    eax,0xb
c000b60a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b60e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b615:	83 f9 19             	cmp    ecx,0x19
c000b618:	77 32                	ja     c000b64c <Directory::rename(char const*)+0x4a>
c000b61a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b621:	85 c9                	test   ecx,ecx
c000b623:	74 27                	je     c000b64c <Directory::rename(char const*)+0x4a>
c000b625:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b62b:	85 c9                	test   ecx,ecx
c000b62d:	74 1d                	je     c000b64c <Directory::rename(char const*)+0x4a>
c000b62f:	b8 06 00 00 00       	mov    eax,0x6
c000b634:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b638:	75 12                	jne    c000b64c <Directory::rename(char const*)+0x4a>
c000b63a:	83 c2 0d             	add    edx,0xd
c000b63d:	50                   	push   eax
c000b63e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b644:	52                   	push   edx
c000b645:	51                   	push   ecx
c000b646:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b649:	83 c4 10             	add    esp,0x10
c000b64c:	83 c4 0c             	add    esp,0xc
c000b64f:	c3                   	ret    

c000b650 <Directory::exists()>:
c000b650:	83 ec 0c             	sub    esp,0xc
c000b653:	31 c0                	xor    eax,eax
c000b655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b659:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b660:	83 f9 19             	cmp    ecx,0x19
c000b663:	77 24                	ja     c000b689 <Directory::exists()+0x39>
c000b665:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b66c:	85 c9                	test   ecx,ecx
c000b66e:	74 19                	je     c000b689 <Directory::exists()+0x39>
c000b670:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b676:	85 c9                	test   ecx,ecx
c000b678:	74 0f                	je     c000b689 <Directory::exists()+0x39>
c000b67a:	83 c2 0d             	add    edx,0xd
c000b67d:	50                   	push   eax
c000b67e:	50                   	push   eax
c000b67f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b681:	52                   	push   edx
c000b682:	51                   	push   ecx
c000b683:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b686:	83 c4 10             	add    esp,0x10
c000b689:	83 c4 0c             	add    esp,0xc
c000b68c:	c3                   	ret    
c000b68d:	90                   	nop

c000b68e <Directory::read(dirent*)>:
c000b68e:	83 ec 1c             	sub    esp,0x1c
c000b691:	b8 0b 00 00 00       	mov    eax,0xb
c000b696:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b69a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6a1:	83 f9 19             	cmp    ecx,0x19
c000b6a4:	77 30                	ja     c000b6d6 <Directory::read(dirent*)+0x48>
c000b6a6:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ad:	85 c9                	test   ecx,ecx
c000b6af:	74 25                	je     c000b6d6 <Directory::read(dirent*)+0x48>
c000b6b1:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b6b8:	74 1c                	je     c000b6d6 <Directory::read(dirent*)+0x48>
c000b6ba:	83 ec 0c             	sub    esp,0xc
c000b6bd:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6bf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6c3:	51                   	push   ecx
c000b6c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6c8:	6a 00                	push   0x0
c000b6ca:	68 10 01 00 00       	push   0x110
c000b6cf:	52                   	push   edx
c000b6d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6d3:	83 c4 20             	add    esp,0x20
c000b6d6:	83 c4 1c             	add    esp,0x1c
c000b6d9:	c3                   	ret    

c000b6da <Directory::create()>:
c000b6da:	83 ec 0c             	sub    esp,0xc
c000b6dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b6e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6ed:	83 f9 19             	cmp    ecx,0x19
c000b6f0:	77 2f                	ja     c000b721 <Directory::create()+0x47>
c000b6f2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6f9:	85 c9                	test   ecx,ecx
c000b6fb:	74 24                	je     c000b721 <Directory::create()+0x47>
c000b6fd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b703:	85 c9                	test   ecx,ecx
c000b705:	74 1a                	je     c000b721 <Directory::create()+0x47>
c000b707:	b8 06 00 00 00       	mov    eax,0x6
c000b70c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b710:	75 0f                	jne    c000b721 <Directory::create()+0x47>
c000b712:	83 c2 0d             	add    edx,0xd
c000b715:	50                   	push   eax
c000b716:	50                   	push   eax
c000b717:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b719:	52                   	push   edx
c000b71a:	51                   	push   ecx
c000b71b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b71e:	83 c4 10             	add    esp,0x10
c000b721:	83 c4 0c             	add    esp,0xc
c000b724:	c3                   	ret    
c000b725:	90                   	nop

c000b726 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b726:	b8 0a 00 00 00       	mov    eax,0xa
c000b72b:	c3                   	ret    

c000b72c <Bus::Bus(char const*)>:
c000b72c:	83 ec 0c             	sub    esp,0xc
c000b72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b733:	83 ec 08             	sub    esp,0x8
c000b736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73a:	50                   	push   eax
c000b73b:	e8 22 08 00 00       	call   c000bf62 <Device::Device(char const*)>
c000b740:	83 c4 10             	add    esp,0x10
c000b743:	ba 88 02 02 c0       	mov    edx,0xc0020288
c000b748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74c:	89 10                	mov    DWORD PTR [eax],edx
c000b74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b752:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b75c:	90                   	nop
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	c3                   	ret    
c000b761:	90                   	nop
c000b762:	66 90                	xchg   ax,ax

c000b764 <Bus::~Bus()>:
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	ba 88 02 02 c0       	mov    edx,0xc0020288
c000b76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b770:	89 10                	mov    DWORD PTR [eax],edx
c000b772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b776:	83 ec 0c             	sub    esp,0xc
c000b779:	50                   	push   eax
c000b77a:	e8 4d 05 00 00       	call   c000bccc <Device::~Device()>
c000b77f:	83 c4 10             	add    esp,0x10
c000b782:	90                   	nop
c000b783:	83 c4 0c             	add    esp,0xc
c000b786:	c3                   	ret    
c000b787:	90                   	nop

c000b788 <Bus::~Bus()>:
c000b788:	83 ec 0c             	sub    esp,0xc
c000b78b:	83 ec 0c             	sub    esp,0xc
c000b78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b792:	e8 cd ff ff ff       	call   c000b764 <Bus::~Bus()>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	83 ec 08             	sub    esp,0x8
c000b79d:	68 58 01 00 00       	push   0x158
c000b7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a6:	e8 be f0 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	83 c4 0c             	add    esp,0xc
c000b7b1:	c3                   	ret    

c000b7b2 <beepThread(void*)>:
c000b7b2:	83 ec 0c             	sub    esp,0xc
c000b7b5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7be:	48                   	dec    eax
c000b7bf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7c4:	75 01                	jne    c000b7c7 <beepThread(void*)+0x15>
c000b7c6:	fb                   	sti    
c000b7c7:	83 ec 0c             	sub    esp,0xc
c000b7ca:	6b c2 0a             	imul   eax,edx,0xa
c000b7cd:	50                   	push   eax
c000b7ce:	e8 85 9b 00 00       	call   c0015358 <milliTenthSleep(unsigned int)>
c000b7d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b7da:	e8 51 ba 00 00       	call   c0017230 <HalMakeBeep(int)>
c000b7df:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7e7:	83 c4 1c             	add    esp,0x1c
c000b7ea:	e9 4d 9a 00 00       	jmp    c001523c <blockTask(TaskState)>

c000b7ef <Krnl::beep(int, int, bool)>:
c000b7ef:	56                   	push   esi
c000b7f0:	53                   	push   ebx
c000b7f1:	83 ec 10             	sub    esp,0x10
c000b7f4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b800:	e8 2b ba 00 00       	call   c0017230 <HalMakeBeep(int)>
c000b805:	83 c4 10             	add    esp,0x10
c000b808:	89 f0                	mov    eax,esi
c000b80a:	84 c0                	test   al,al
c000b80c:	74 1e                	je     c000b82c <Krnl::beep(int, int, bool)+0x3d>
c000b80e:	83 ec 0c             	sub    esp,0xc
c000b811:	6b db 0a             	imul   ebx,ebx,0xa
c000b814:	53                   	push   ebx
c000b815:	e8 3e 9b 00 00       	call   c0015358 <milliTenthSleep(unsigned int)>
c000b81a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b822:	83 c4 14             	add    esp,0x14
c000b825:	5b                   	pop    ebx
c000b826:	5e                   	pop    esi
c000b827:	e9 04 ba 00 00       	jmp    c0017230 <HalMakeBeep(int)>
c000b82c:	68 e6 00 00 00       	push   0xe6
c000b831:	53                   	push   ebx
c000b832:	68 b2 b7 00 c0       	push   0xc000b7b2
c000b837:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b83d:	e8 96 95 00 00       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c000b842:	83 c4 14             	add    esp,0x14
c000b845:	5b                   	pop    ebx
c000b846:	5e                   	pop    esi
c000b847:	c3                   	ret    

c000b848 <User::loadClockSettings(int)>:
c000b848:	53                   	push   ebx
c000b849:	83 ec 14             	sub    esp,0x14
c000b84c:	68 14 01 00 00       	push   0x114
c000b851:	e8 58 c2 ff ff       	call   c0007aae <malloc>
c000b856:	83 c4 0c             	add    esp,0xc
c000b859:	89 c3                	mov    ebx,eax
c000b85b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b861:	68 ac 02 02 c0       	push   0xc00202ac
c000b866:	50                   	push   eax
c000b867:	e8 ac f6 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000b86c:	58                   	pop    eax
c000b86d:	5a                   	pop    edx
c000b86e:	6a 01                	push   0x1
c000b870:	53                   	push   ebx
c000b871:	e8 5e f7 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c000b876:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b879:	e8 b4 f7 ff ff       	call   c000b032 <File::close()>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	85 db                	test   ebx,ebx
c000b883:	74 0f                	je     c000b894 <User::loadClockSettings(int)+0x4c>
c000b885:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b887:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b88b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b88e:	83 c4 08             	add    esp,0x8
c000b891:	5b                   	pop    ebx
c000b892:	ff e0                	jmp    eax
c000b894:	83 c4 08             	add    esp,0x8
c000b897:	5b                   	pop    ebx
c000b898:	c3                   	ret    
c000b899:	90                   	nop

c000b89a <Clock::Clock(char const*)>:
c000b89a:	83 ec 0c             	sub    esp,0xc
c000b89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a1:	83 ec 08             	sub    esp,0x8
c000b8a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a8:	50                   	push   eax
c000b8a9:	e8 b4 06 00 00       	call   c000bf62 <Device::Device(char const*)>
c000b8ae:	83 c4 10             	add    esp,0x10
c000b8b1:	ba d4 02 02 c0       	mov    edx,0xc00202d4
c000b8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ba:	89 10                	mov    DWORD PTR [eax],edx
c000b8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8ca:	90                   	nop
c000b8cb:	83 c4 0c             	add    esp,0xc
c000b8ce:	c3                   	ret    
c000b8cf:	90                   	nop

c000b8d0 <Clock::~Clock()>:
c000b8d0:	83 ec 0c             	sub    esp,0xc
c000b8d3:	ba d4 02 02 c0       	mov    edx,0xc00202d4
c000b8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8dc:	89 10                	mov    DWORD PTR [eax],edx
c000b8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8e2:	83 ec 0c             	sub    esp,0xc
c000b8e5:	50                   	push   eax
c000b8e6:	e8 e1 03 00 00       	call   c000bccc <Device::~Device()>
c000b8eb:	83 c4 10             	add    esp,0x10
c000b8ee:	90                   	nop
c000b8ef:	83 c4 0c             	add    esp,0xc
c000b8f2:	c3                   	ret    
c000b8f3:	90                   	nop

c000b8f4 <Clock::~Clock()>:
c000b8f4:	83 ec 0c             	sub    esp,0xc
c000b8f7:	83 ec 0c             	sub    esp,0xc
c000b8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8fe:	e8 cd ff ff ff       	call   c000b8d0 <Clock::~Clock()>
c000b903:	83 c4 10             	add    esp,0x10
c000b906:	83 ec 08             	sub    esp,0x8
c000b909:	68 58 01 00 00       	push   0x158
c000b90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b912:	e8 52 ef ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000b917:	83 c4 10             	add    esp,0x10
c000b91a:	83 c4 0c             	add    esp,0xc
c000b91d:	c3                   	ret    

c000b91e <Clock::timeInSecondsLocal()>:
c000b91e:	53                   	push   ebx
c000b91f:	83 ec 14             	sub    esp,0x14
c000b922:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b926:	8b 10                	mov    edx,DWORD PTR [eax]
c000b928:	50                   	push   eax
c000b929:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b92c:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b933:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b939:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b93f:	89 cb                	mov    ebx,ecx
c000b941:	c1 fb 1f             	sar    ebx,0x1f
c000b944:	01 c8                	add    eax,ecx
c000b946:	11 da                	adc    edx,ebx
c000b948:	83 c4 10             	add    esp,0x10
c000b94b:	31 c9                	xor    ecx,ecx
c000b94d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b954:	74 05                	je     c000b95b <Clock::timeInSecondsLocal()+0x3d>
c000b956:	b9 08 07 00 00       	mov    ecx,0x708
c000b95b:	31 db                	xor    ebx,ebx
c000b95d:	01 c8                	add    eax,ecx
c000b95f:	11 da                	adc    edx,ebx
c000b961:	83 c4 08             	add    esp,0x8
c000b964:	5b                   	pop    ebx
c000b965:	c3                   	ret    

c000b966 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b966:	57                   	push   edi
c000b967:	56                   	push   esi
c000b968:	53                   	push   ebx
c000b969:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b96d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b971:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b973:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b977:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b97a:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b981:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b987:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b98d:	99                   	cdq    
c000b98e:	29 c6                	sub    esi,eax
c000b990:	19 d7                	sbb    edi,edx
c000b992:	89 f0                	mov    eax,esi
c000b994:	89 fa                	mov    edx,edi
c000b996:	31 f6                	xor    esi,esi
c000b998:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b99f:	74 05                	je     c000b9a6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9a1:	be 08 07 00 00       	mov    esi,0x708
c000b9a6:	31 ff                	xor    edi,edi
c000b9a8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9ac:	29 f0                	sub    eax,esi
c000b9ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9b2:	19 fa                	sbb    edx,edi
c000b9b4:	89 d8                	mov    eax,ebx
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	5b                   	pop    ebx
c000b9bb:	5e                   	pop    esi
c000b9bc:	5f                   	pop    edi
c000b9bd:	ff e0                	jmp    eax

c000b9bf <datetimeToSeconds(datetime_t)>:
c000b9bf:	55                   	push   ebp
c000b9c0:	57                   	push   edi
c000b9c1:	56                   	push   esi
c000b9c2:	53                   	push   ebx
c000b9c3:	83 ec 0c             	sub    esp,0xc
c000b9c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b9ca:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000b9ce:	89 d6                	mov    esi,edx
c000b9d0:	0f b6 c7             	movzx  eax,bh
c000b9d3:	c1 ee 10             	shr    esi,0x10
c000b9d6:	6b e8 3c             	imul   ebp,eax,0x3c
c000b9d9:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000b9df:	0f b6 ce             	movzx  ecx,dh
c000b9e2:	89 df                	mov    edi,ebx
c000b9e4:	49                   	dec    ecx
c000b9e5:	c1 ef 10             	shr    edi,0x10
c000b9e8:	0f b6 db             	movzx  ebx,bl
c000b9eb:	89 f8                	mov    eax,edi
c000b9ed:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000b9f3:	0f b6 f8             	movzx  edi,al
c000b9f6:	0f b6 d2             	movzx  edx,dl
c000b9f9:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000b9fd:	01 d8                	add    eax,ebx
c000b9ff:	0f b7 de             	movzx  ebx,si
c000ba02:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba05:	c1 f8 1f             	sar    eax,0x1f
c000ba08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba0c:	0f b6 c1             	movzx  eax,cl
c000ba0f:	8b 0c 85 20 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfce0]
c000ba16:	83 f8 01             	cmp    eax,0x1
c000ba19:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ba1d:	76 27                	jbe    c000ba46 <datetimeToSeconds(datetime_t)+0x87>
c000ba1f:	83 e6 03             	and    esi,0x3
c000ba22:	75 22                	jne    c000ba46 <datetimeToSeconds(datetime_t)+0x87>
c000ba24:	31 d2                	xor    edx,edx
c000ba26:	be 64 00 00 00       	mov    esi,0x64
c000ba2b:	89 d8                	mov    eax,ebx
c000ba2d:	f7 f6                	div    esi
c000ba2f:	85 d2                	test   edx,edx
c000ba31:	75 12                	jne    c000ba45 <datetimeToSeconds(datetime_t)+0x86>
c000ba33:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba39:	be 90 01 00 00       	mov    esi,0x190
c000ba3e:	99                   	cdq    
c000ba3f:	f7 fe                	idiv   esi
c000ba41:	85 d2                	test   edx,edx
c000ba43:	75 01                	jne    c000ba46 <datetimeToSeconds(datetime_t)+0x87>
c000ba45:	41                   	inc    ecx
c000ba46:	83 fb 46             	cmp    ebx,0x46
c000ba49:	76 48                	jbe    c000ba93 <datetimeToSeconds(datetime_t)+0xd4>
c000ba4b:	be 46 00 00 00       	mov    esi,0x46
c000ba50:	bf 64 00 00 00       	mov    edi,0x64
c000ba55:	bd 90 01 00 00       	mov    ebp,0x190
c000ba5a:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba5f:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba65:	75 23                	jne    c000ba8a <datetimeToSeconds(datetime_t)+0xcb>
c000ba67:	89 f0                	mov    eax,esi
c000ba69:	99                   	cdq    
c000ba6a:	f7 ff                	idiv   edi
c000ba6c:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba71:	85 d2                	test   edx,edx
c000ba73:	75 15                	jne    c000ba8a <datetimeToSeconds(datetime_t)+0xcb>
c000ba75:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba7b:	99                   	cdq    
c000ba7c:	f7 fd                	idiv   ebp
c000ba7e:	83 fa 01             	cmp    edx,0x1
c000ba81:	19 c0                	sbb    eax,eax
c000ba83:	f7 d0                	not    eax
c000ba85:	05 6e 01 00 00       	add    eax,0x16e
c000ba8a:	01 c1                	add    ecx,eax
c000ba8c:	46                   	inc    esi
c000ba8d:	39 de                	cmp    esi,ebx
c000ba8f:	7c c9                	jl     c000ba5a <datetimeToSeconds(datetime_t)+0x9b>
c000ba91:	eb 34                	jmp    c000bac7 <datetimeToSeconds(datetime_t)+0x108>
c000ba93:	74 32                	je     c000bac7 <datetimeToSeconds(datetime_t)+0x108>
c000ba95:	b8 45 00 00 00       	mov    eax,0x45
c000ba9a:	89 c2                	mov    edx,eax
c000ba9c:	83 e2 03             	and    edx,0x3
c000ba9f:	39 d8                	cmp    eax,ebx
c000baa1:	7e 0f                	jle    c000bab2 <datetimeToSeconds(datetime_t)+0xf3>
c000baa3:	83 fa 01             	cmp    edx,0x1
c000baa6:	19 d2                	sbb    edx,edx
c000baa8:	48                   	dec    eax
c000baa9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bab0:	eb e8                	jmp    c000ba9a <datetimeToSeconds(datetime_t)+0xdb>
c000bab2:	b8 6d 01 00 00       	mov    eax,0x16d
c000bab7:	85 d2                	test   edx,edx
c000bab9:	75 0a                	jne    c000bac5 <datetimeToSeconds(datetime_t)+0x106>
c000babb:	83 fb 01             	cmp    ebx,0x1
c000babe:	19 c0                	sbb    eax,eax
c000bac0:	05 6e 01 00 00       	add    eax,0x16e
c000bac5:	29 c1                	sub    ecx,eax
c000bac7:	b8 80 51 01 00       	mov    eax,0x15180
c000bacc:	f7 e9                	imul   ecx
c000bace:	03 04 24             	add    eax,DWORD PTR [esp]
c000bad1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bad5:	83 c4 0c             	add    esp,0xc
c000bad8:	5b                   	pop    ebx
c000bad9:	5e                   	pop    esi
c000bada:	5f                   	pop    edi
c000badb:	5d                   	pop    ebp
c000badc:	c3                   	ret    
c000badd:	90                   	nop

c000bade <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bade:	57                   	push   edi
c000badf:	56                   	push   esi
c000bae0:	53                   	push   ebx
c000bae1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bae5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bae7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000baea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baf2:	e8 c8 fe ff ff       	call   c000b9bf <datetimeToSeconds(datetime_t)>
c000baf7:	59                   	pop    ecx
c000baf8:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000baff:	5b                   	pop    ebx
c000bb00:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb06:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb0c:	89 cb                	mov    ebx,ecx
c000bb0e:	c1 fb 1f             	sar    ebx,0x1f
c000bb11:	29 c8                	sub    eax,ecx
c000bb13:	19 da                	sbb    edx,ebx
c000bb15:	31 c9                	xor    ecx,ecx
c000bb17:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb1e:	74 05                	je     c000bb25 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb20:	b9 08 07 00 00       	mov    ecx,0x708
c000bb25:	31 db                	xor    ebx,ebx
c000bb27:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb2b:	29 c8                	sub    eax,ecx
c000bb2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb31:	19 da                	sbb    edx,ebx
c000bb33:	89 f8                	mov    eax,edi
c000bb35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb39:	5b                   	pop    ebx
c000bb3a:	5e                   	pop    esi
c000bb3b:	5f                   	pop    edi
c000bb3c:	ff e0                	jmp    eax

c000bb3e <secondsToDatetime(unsigned long long)>:
c000bb3e:	55                   	push   ebp
c000bb3f:	57                   	push   edi
c000bb40:	56                   	push   esi
c000bb41:	53                   	push   ebx
c000bb42:	83 ec 1c             	sub    esp,0x1c
c000bb45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb49:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb4d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb51:	6a 00                	push   0x0
c000bb53:	68 80 51 01 00       	push   0x15180
c000bb58:	55                   	push   ebp
c000bb59:	57                   	push   edi
c000bb5a:	e8 51 2a 01 00       	call   c001e5b0 <__udivdi3>
c000bb5f:	83 c4 10             	add    esp,0x10
c000bb62:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb6c:	6a 00                	push   0x0
c000bb6e:	68 80 51 01 00       	push   0x15180
c000bb73:	55                   	push   ebp
c000bb74:	57                   	push   edi
c000bb75:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb7a:	e8 31 2b 01 00       	call   c001e6b0 <__umoddi3>
c000bb7f:	83 c4 10             	add    esp,0x10
c000bb82:	99                   	cdq    
c000bb83:	f7 ff                	idiv   edi
c000bb85:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb8a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb8d:	89 d0                	mov    eax,edx
c000bb8f:	99                   	cdq    
c000bb90:	f7 ff                	idiv   edi
c000bb92:	85 db                	test   ebx,ebx
c000bb94:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb97:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb9a:	79 11                	jns    c000bbad <secondsToDatetime(unsigned long long)+0x6f>
c000bb9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bba0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bba6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbab:	eb 07                	jmp    c000bbb4 <secondsToDatetime(unsigned long long)+0x76>
c000bbad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbb2:	89 d8                	mov    eax,ebx
c000bbb4:	bf b4 05 00 00       	mov    edi,0x5b4
c000bbb9:	99                   	cdq    
c000bbba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbbf:	f7 f9                	idiv   ecx
c000bbc1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbca:	31 d2                	xor    edx,edx
c000bbcc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bbd4:	01 c3                	add    ebx,eax
c000bbd6:	89 d8                	mov    eax,ebx
c000bbd8:	f7 f1                	div    ecx
c000bbda:	31 d2                	xor    edx,edx
c000bbdc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bbdf:	89 d8                	mov    eax,ebx
c000bbe1:	f7 f7                	div    edi
c000bbe3:	31 d2                	xor    edx,edx
c000bbe5:	29 c1                	sub    ecx,eax
c000bbe7:	89 d8                	mov    eax,ebx
c000bbe9:	f7 f5                	div    ebp
c000bbeb:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bbf0:	29 c1                	sub    ecx,eax
c000bbf2:	31 d2                	xor    edx,edx
c000bbf4:	89 c8                	mov    eax,ecx
c000bbf6:	f7 f5                	div    ebp
c000bbf8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bbfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc01:	31 d2                	xor    edx,edx
c000bc03:	89 c8                	mov    eax,ecx
c000bc05:	f7 f5                	div    ebp
c000bc07:	31 d2                	xor    edx,edx
c000bc09:	01 c3                	add    ebx,eax
c000bc0b:	89 c8                	mov    eax,ecx
c000bc0d:	f7 f7                	div    edi
c000bc0f:	bf 99 00 00 00       	mov    edi,0x99
c000bc14:	29 c3                	sub    ebx,eax
c000bc16:	31 d2                	xor    edx,edx
c000bc18:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc20:	29 c3                	sub    ebx,eax
c000bc22:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc25:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc28:	bb 05 00 00 00       	mov    ebx,0x5
c000bc2d:	83 c1 02             	add    ecx,0x2
c000bc30:	89 c8                	mov    eax,ecx
c000bc32:	f7 f7                	div    edi
c000bc34:	31 d2                	xor    edx,edx
c000bc36:	89 c7                	mov    edi,eax
c000bc38:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc3e:	83 c0 02             	add    eax,0x2
c000bc41:	f7 f3                	div    ebx
c000bc43:	89 eb                	mov    ebx,ebp
c000bc45:	29 c3                	sub    ebx,eax
c000bc47:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc4d:	88 1e                	mov    BYTE PTR [esi],bl
c000bc4f:	19 c0                	sbb    eax,eax
c000bc51:	31 d2                	xor    edx,edx
c000bc53:	83 e0 0c             	and    eax,0xc
c000bc56:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc5a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc62:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc66:	83 f9 01             	cmp    ecx,0x1
c000bc69:	0f 96 c2             	setbe  dl
c000bc6c:	41                   	inc    ecx
c000bc6d:	01 d0                	add    eax,edx
c000bc6f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc72:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc76:	83 c4 1c             	add    esp,0x1c
c000bc79:	89 f0                	mov    eax,esi
c000bc7b:	5b                   	pop    ebx
c000bc7c:	5e                   	pop    esi
c000bc7d:	5f                   	pop    edi
c000bc7e:	5d                   	pop    ebp
c000bc7f:	c2 04 00             	ret    0x4

c000bc82 <Clock::timeInDatetimeLocal()>:
c000bc82:	53                   	push   ebx
c000bc83:	83 ec 14             	sub    esp,0x14
c000bc86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc8e:	e8 8b fc ff ff       	call   c000b91e <Clock::timeInSecondsLocal()>
c000bc93:	83 c4 0c             	add    esp,0xc
c000bc96:	52                   	push   edx
c000bc97:	50                   	push   eax
c000bc98:	53                   	push   ebx
c000bc99:	e8 a0 fe ff ff       	call   c000bb3e <secondsToDatetime(unsigned long long)>
c000bc9e:	89 d8                	mov    eax,ebx
c000bca0:	83 c4 14             	add    esp,0x14
c000bca3:	5b                   	pop    ebx
c000bca4:	c2 04 00             	ret    0x4
c000bca7:	90                   	nop

c000bca8 <Device::hibernate()>:
c000bca8:	c3                   	ret    
c000bca9:	90                   	nop

c000bcaa <Device::wake()>:
c000bcaa:	c3                   	ret    
c000bcab:	90                   	nop

c000bcac <Device::detect()>:
c000bcac:	c3                   	ret    
c000bcad:	90                   	nop

c000bcae <Device::disableLegacy()>:
c000bcae:	c3                   	ret    
c000bcaf:	90                   	nop

c000bcb0 <Device::powerSaving(PowerSavingLevel)>:
c000bcb0:	c3                   	ret    
c000bcb1:	90                   	nop

c000bcb2 <DriverlessDevice::close(int, int, void*)>:
c000bcb2:	31 c0                	xor    eax,eax
c000bcb4:	c3                   	ret    
c000bcb5:	90                   	nop

c000bcb6 <DriverlessDevice::detect()>:
c000bcb6:	c3                   	ret    
c000bcb7:	90                   	nop

c000bcb8 <DriverlessDevice::open(int, int, void*)>:
c000bcb8:	83 ec 18             	sub    esp,0x18
c000bcbb:	68 50 03 02 c0       	push   0xc0020350
c000bcc0:	e8 ae 4b 00 00       	call   c0010873 <KePanic(char const*)>
c000bcc5:	83 c8 ff             	or     eax,0xffffffff
c000bcc8:	83 c4 1c             	add    esp,0x1c
c000bccb:	c3                   	ret    

c000bccc <Device::~Device()>:
c000bccc:	ba b0 03 02 c0       	mov    edx,0xc00203b0
c000bcd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcd5:	89 10                	mov    DWORD PTR [eax],edx
c000bcd7:	90                   	nop
c000bcd8:	c3                   	ret    
c000bcd9:	90                   	nop

c000bcda <Device::~Device()>:
c000bcda:	83 ec 0c             	sub    esp,0xc
c000bcdd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bce1:	e8 e6 ff ff ff       	call   c000bccc <Device::~Device()>
c000bce6:	83 c4 04             	add    esp,0x4
c000bce9:	83 ec 08             	sub    esp,0x8
c000bcec:	68 58 01 00 00       	push   0x158
c000bcf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf5:	e8 6f eb ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	83 c4 0c             	add    esp,0xc
c000bd00:	c3                   	ret    
c000bd01:	90                   	nop

c000bd02 <Device::findAndLoadDriver()>:
c000bd02:	c7 44 24 04 6e 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002036e
c000bd0a:	e9 87 ec ff ff       	jmp    c000a996 <Dbg::kprintf(char const*, ...)>
c000bd0f:	90                   	nop

c000bd10 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd10:	57                   	push   edi
c000bd11:	b9 09 00 00 00       	mov    ecx,0x9
c000bd16:	56                   	push   esi
c000bd17:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd1b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd1f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd29:	81 c7 18 01 00 00    	add    edi,0x118
c000bd2f:	fc                   	cld    
c000bd30:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd32:	5e                   	pop    esi
c000bd33:	5f                   	pop    edi
c000bd34:	c3                   	ret    
c000bd35:	90                   	nop

c000bd36 <Device::preOpenACPI(void*, char*, char*)>:
c000bd36:	57                   	push   edi
c000bd37:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd3c:	56                   	push   esi
c000bd3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd45:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd4f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd55:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd61:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd66:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd6c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd72:	5e                   	pop    esi
c000bd73:	5f                   	pop    edi
c000bd74:	c3                   	ret    
c000bd75:	90                   	nop

c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd76:	53                   	push   ebx
c000bd77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd87:	0f b6 c0             	movzx  eax,al
c000bd8a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd9a:	5b                   	pop    ebx
c000bd9b:	e9 a8 05 00 00       	jmp    c000c348 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bda0 <Device::getParent()>:
c000bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bda4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bdaa:	c3                   	ret    
c000bdab:	90                   	nop

c000bdac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bdac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bdb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdb4:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bdb9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdbd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdc1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdc5:	e9 e6 06 00 00       	jmp    c000c4b0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bdca <Device::addChild(Device*)>:
c000bdca:	53                   	push   ebx
c000bdcb:	83 ec 08             	sub    esp,0x8
c000bdce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdd6:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bddc:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bde2:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bde4:	85 d2                	test   edx,edx
c000bde6:	74 04                	je     c000bdec <Device::addChild(Device*)+0x22>
c000bde8:	89 d3                	mov    ebx,edx
c000bdea:	eb f6                	jmp    c000bde2 <Device::addChild(Device*)+0x18>
c000bdec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bdef:	83 ec 0c             	sub    esp,0xc
c000bdf2:	6a 08                	push   0x8
c000bdf4:	e8 b5 bc ff ff       	call   c0007aae <malloc>
c000bdf9:	89 03                	mov    DWORD PTR [ebx],eax
c000bdfb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be08:	83 c4 18             	add    esp,0x18
c000be0b:	5b                   	pop    ebx
c000be0c:	c3                   	ret    
c000be0d:	90                   	nop

c000be0e <Device::removeAllChildren()>:
c000be0e:	56                   	push   esi
c000be0f:	53                   	push   ebx
c000be10:	52                   	push   edx
c000be11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be15:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be1b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be1e:	74 17                	je     c000be37 <Device::removeAllChildren()+0x29>
c000be20:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be23:	85 c0                	test   eax,eax
c000be25:	74 0c                	je     c000be33 <Device::removeAllChildren()+0x25>
c000be27:	83 ec 0c             	sub    esp,0xc
c000be2a:	8b 10                	mov    edx,DWORD PTR [eax]
c000be2c:	50                   	push   eax
c000be2d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be30:	83 c4 10             	add    esp,0x10
c000be33:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be35:	eb e4                	jmp    c000be1b <Device::removeAllChildren()+0xd>
c000be37:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be43:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be50:	58                   	pop    eax
c000be51:	5b                   	pop    ebx
c000be52:	5e                   	pop    esi
c000be53:	c3                   	ret    

c000be54 <Device::hibernateAll()>:
c000be54:	53                   	push   ebx
c000be55:	83 ec 14             	sub    esp,0x14
c000be58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be5e:	53                   	push   ebx
c000be5f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be62:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be6e:	74 0f                	je     c000be7f <Device::hibernateAll()+0x2b>
c000be70:	83 ec 0c             	sub    esp,0xc
c000be73:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be76:	e8 d9 ff ff ff       	call   c000be54 <Device::hibernateAll()>
c000be7b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be7d:	eb e9                	jmp    c000be68 <Device::hibernateAll()+0x14>
c000be7f:	83 c4 08             	add    esp,0x8
c000be82:	5b                   	pop    ebx
c000be83:	c3                   	ret    

c000be84 <Device::wakeAll()>:
c000be84:	53                   	push   ebx
c000be85:	83 ec 14             	sub    esp,0x14
c000be88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be8e:	53                   	push   ebx
c000be8f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be98:	83 c4 10             	add    esp,0x10
c000be9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be9e:	74 0f                	je     c000beaf <Device::wakeAll()+0x2b>
c000bea0:	83 ec 0c             	sub    esp,0xc
c000bea3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bea6:	e8 d9 ff ff ff       	call   c000be84 <Device::wakeAll()>
c000beab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bead:	eb e9                	jmp    c000be98 <Device::wakeAll()+0x14>
c000beaf:	83 c4 08             	add    esp,0x8
c000beb2:	5b                   	pop    ebx
c000beb3:	c3                   	ret    

c000beb4 <Device::detectAll()>:
c000beb4:	53                   	push   ebx
c000beb5:	83 ec 14             	sub    esp,0x14
c000beb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bebc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bebe:	53                   	push   ebx
c000bebf:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bec2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bec8:	83 c4 10             	add    esp,0x10
c000becb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bece:	74 0f                	je     c000bedf <Device::detectAll()+0x2b>
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bed6:	e8 d9 ff ff ff       	call   c000beb4 <Device::detectAll()>
c000bedb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bedd:	eb e9                	jmp    c000bec8 <Device::detectAll()+0x14>
c000bedf:	83 c4 08             	add    esp,0x8
c000bee2:	5b                   	pop    ebx
c000bee3:	c3                   	ret    

c000bee4 <Device::disableLegacyAll()>:
c000bee4:	c3                   	ret    
c000bee5:	90                   	nop

c000bee6 <Device::loadDriversForAll()>:
c000bee6:	c3                   	ret    
c000bee7:	90                   	nop

c000bee8 <Device::closeAll()>:
c000bee8:	53                   	push   ebx
c000bee9:	83 ec 08             	sub    esp,0x8
c000beec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bef0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bef2:	6a 00                	push   0x0
c000bef4:	6a 00                	push   0x0
c000bef6:	6a 00                	push   0x0
c000bef8:	53                   	push   ebx
c000bef9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000befc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf08:	74 0f                	je     c000bf19 <Device::closeAll()+0x31>
c000bf0a:	83 ec 0c             	sub    esp,0xc
c000bf0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf10:	e8 d3 ff ff ff       	call   c000bee8 <Device::closeAll()>
c000bf15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf17:	eb e9                	jmp    c000bf02 <Device::closeAll()+0x1a>
c000bf19:	83 c4 08             	add    esp,0x8
c000bf1c:	5b                   	pop    ebx
c000bf1d:	c3                   	ret    

c000bf1e <Device::powerSavingAll(PowerSavingLevel)>:
c000bf1e:	56                   	push   esi
c000bf1f:	53                   	push   ebx
c000bf20:	83 ec 0c             	sub    esp,0xc
c000bf23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf2d:	56                   	push   esi
c000bf2e:	53                   	push   ebx
c000bf2f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf32:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf38:	83 c4 10             	add    esp,0x10
c000bf3b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf3e:	74 0f                	je     c000bf4f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf40:	52                   	push   edx
c000bf41:	52                   	push   edx
c000bf42:	56                   	push   esi
c000bf43:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf46:	e8 d3 ff ff ff       	call   c000bf1e <Device::powerSavingAll(PowerSavingLevel)>
c000bf4b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf4d:	eb e9                	jmp    c000bf38 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf4f:	58                   	pop    eax
c000bf50:	5b                   	pop    ebx
c000bf51:	5e                   	pop    esi
c000bf52:	c3                   	ret    
c000bf53:	90                   	nop

c000bf54 <Device::setName(char const*)>:
c000bf54:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf5c:	e9 df 46 ff ff       	jmp    c0000640 <strcpy>
c000bf61:	90                   	nop

c000bf62 <Device::Device(char const*)>:
c000bf62:	83 ec 1c             	sub    esp,0x1c
c000bf65:	ba b0 03 02 c0       	mov    edx,0xc00203b0
c000bf6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf6e:	89 10                	mov    DWORD PTR [eax],edx
c000bf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf74:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf82:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf90:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf9e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfa8:	83 ec 08             	sub    esp,0x8
c000bfab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfb3:	e8 9c ff ff ff       	call   c000bf54 <Device::setName(char const*)>
c000bfb8:	83 c4 10             	add    esp,0x10
c000bfbb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bfc3:	83 ec 0c             	sub    esp,0xc
c000bfc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfca:	e8 df ba ff ff       	call   c0007aae <malloc>
c000bfcf:	83 c4 10             	add    esp,0x10
c000bfd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfd8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfe3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bfe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfed:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bff3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c003:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c00e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c019:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c024:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c02e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c032:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c03c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c040:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c04a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c04e:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c058:	90                   	nop
c000c059:	83 c4 1c             	add    esp,0x1c
c000c05c:	c3                   	ret    
c000c05d:	90                   	nop

c000c05e <Device::getName()>:
c000c05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c062:	05 d0 00 00 00       	add    eax,0xd0
c000c067:	c3                   	ret    

c000c068 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c068:	83 ec 0c             	sub    esp,0xc
c000c06b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06f:	83 ec 08             	sub    esp,0x8
c000c072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c076:	50                   	push   eax
c000c077:	e8 e6 fe ff ff       	call   c000bf62 <Device::Device(char const*)>
c000c07c:	83 c4 10             	add    esp,0x10
c000c07f:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c000c084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c088:	89 10                	mov    DWORD PTR [eax],edx
c000c08a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c098:	90                   	nop
c000c099:	83 c4 0c             	add    esp,0xc
c000c09c:	c3                   	ret    
c000c09d:	90                   	nop

c000c09e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c09e:	57                   	push   edi
c000c09f:	56                   	push   esi
c000c0a0:	53                   	push   ebx
c000c0a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0ad:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0b3:	75 0c                	jne    c000c0c1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0b5:	52                   	push   edx
c000c0b6:	52                   	push   edx
c000c0b7:	53                   	push   ebx
c000c0b8:	56                   	push   esi
c000c0b9:	e8 a4 29 01 00       	call   c001ea62 <LinkedList<Device>::addElement(Device*)>
c000c0be:	83 c4 10             	add    esp,0x10
c000c0c1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0ca:	74 12                	je     c000c0de <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0cc:	50                   	push   eax
c000c0cd:	57                   	push   edi
c000c0ce:	56                   	push   esi
c000c0cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0d2:	e8 c7 ff ff ff       	call   c000c09e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0d9:	83 c4 10             	add    esp,0x10
c000c0dc:	eb e9                	jmp    c000c0c7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c0de:	5b                   	pop    ebx
c000c0df:	5e                   	pop    esi
c000c0e0:	5f                   	pop    edi
c000c0e1:	c3                   	ret    

c000c0e2 <getDevicesOfType(DeviceType)>:
c000c0e2:	53                   	push   ebx
c000c0e3:	83 ec 14             	sub    esp,0x14
c000c0e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0ea:	53                   	push   ebx
c000c0eb:	e8 4e 2a 01 00       	call   c001eb3e <LinkedList<Device>::LinkedList()>
c000c0f0:	83 c4 0c             	add    esp,0xc
c000c0f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0f7:	53                   	push   ebx
c000c0f8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c0fe:	e8 9b ff ff ff       	call   c000c09e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c103:	89 d8                	mov    eax,ebx
c000c105:	83 c4 18             	add    esp,0x18
c000c108:	5b                   	pop    ebx
c000c109:	c2 04 00             	ret    0x4

c000c10c <HardDiskController::HardDiskController(char const*)>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c113:	83 ec 08             	sub    esp,0x8
c000c116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11a:	50                   	push   eax
c000c11b:	e8 42 fe ff ff       	call   c000bf62 <Device::Device(char const*)>
c000c120:	83 c4 10             	add    esp,0x10
c000c123:	ba 08 04 02 c0       	mov    edx,0xc0020408
c000c128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12c:	89 10                	mov    DWORD PTR [eax],edx
c000c12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c132:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c13c:	90                   	nop
c000c13d:	83 c4 0c             	add    esp,0xc
c000c140:	c3                   	ret    
c000c141:	90                   	nop
c000c142:	66 90                	xchg   ax,ax

c000c144 <HardDiskController::~HardDiskController()>:
c000c144:	83 ec 0c             	sub    esp,0xc
c000c147:	ba 08 04 02 c0       	mov    edx,0xc0020408
c000c14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c150:	89 10                	mov    DWORD PTR [eax],edx
c000c152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c156:	83 ec 0c             	sub    esp,0xc
c000c159:	50                   	push   eax
c000c15a:	e8 6d fb ff ff       	call   c000bccc <Device::~Device()>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	90                   	nop
c000c163:	83 c4 0c             	add    esp,0xc
c000c166:	c3                   	ret    
c000c167:	90                   	nop

c000c168 <HardDiskController::~HardDiskController()>:
c000c168:	83 ec 0c             	sub    esp,0xc
c000c16b:	83 ec 0c             	sub    esp,0xc
c000c16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c172:	e8 cd ff ff ff       	call   c000c144 <HardDiskController::~HardDiskController()>
c000c177:	83 c4 10             	add    esp,0x10
c000c17a:	83 ec 08             	sub    esp,0x8
c000c17d:	68 58 01 00 00       	push   0x158
c000c182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c186:	e8 de e6 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000c18b:	83 c4 10             	add    esp,0x10
c000c18e:	83 c4 0c             	add    esp,0xc
c000c191:	c3                   	ret    

c000c192 <PhysicalDisk::eject()>:
c000c192:	83 c8 ff             	or     eax,0xffffffff
c000c195:	c3                   	ret    

c000c196 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c196:	83 ec 0c             	sub    esp,0xc
c000c199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19d:	83 ec 08             	sub    esp,0x8
c000c1a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a4:	50                   	push   eax
c000c1a5:	e8 b8 fd ff ff       	call   c000bf62 <Device::Device(char const*)>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	ba 34 04 02 c0       	mov    edx,0xc0020434
c000c1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b6:	89 10                	mov    DWORD PTR [eax],edx
c000c1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1bc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1e4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c1f8:	90                   	nop
c000c1f9:	83 c4 0c             	add    esp,0xc
c000c1fc:	c3                   	ret    
c000c1fd:	90                   	nop

c000c1fe <PhysicalDisk::startCache()>:
c000c1fe:	56                   	push   esi
c000c1ff:	53                   	push   ebx
c000c200:	83 ec 10             	sub    esp,0x10
c000c203:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c207:	6a 44                	push   0x44
c000c209:	e8 a0 b8 ff ff       	call   c0007aae <malloc>
c000c20e:	89 c6                	mov    esi,eax
c000c210:	58                   	pop    eax
c000c211:	5a                   	pop    edx
c000c212:	53                   	push   ebx
c000c213:	56                   	push   esi
c000c214:	e8 7b 17 00 00       	call   c000d994 <VCache::VCache(PhysicalDisk*)>
c000c219:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c21f:	83 c4 14             	add    esp,0x14
c000c222:	5b                   	pop    ebx
c000c223:	5e                   	pop    esi
c000c224:	c3                   	ret    
c000c225:	90                   	nop

c000c226 <PhysicalDisk::~PhysicalDisk()>:
c000c226:	83 ec 0c             	sub    esp,0xc
c000c229:	ba 34 04 02 c0       	mov    edx,0xc0020434
c000c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c232:	89 10                	mov    DWORD PTR [eax],edx
c000c234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c238:	83 ec 0c             	sub    esp,0xc
c000c23b:	50                   	push   eax
c000c23c:	e8 8b fa ff ff       	call   c000bccc <Device::~Device()>
c000c241:	83 c4 10             	add    esp,0x10
c000c244:	90                   	nop
c000c245:	83 c4 0c             	add    esp,0xc
c000c248:	c3                   	ret    
c000c249:	90                   	nop

c000c24a <PhysicalDisk::~PhysicalDisk()>:
c000c24a:	83 ec 0c             	sub    esp,0xc
c000c24d:	83 ec 0c             	sub    esp,0xc
c000c250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c254:	e8 cd ff ff ff       	call   c000c226 <PhysicalDisk::~PhysicalDisk()>
c000c259:	83 c4 10             	add    esp,0x10
c000c25c:	83 ec 08             	sub    esp,0x8
c000c25f:	68 6c 01 00 00       	push   0x16c
c000c264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c268:	e8 fc e5 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000c26d:	83 c4 10             	add    esp,0x10
c000c270:	83 c4 0c             	add    esp,0xc
c000c273:	c3                   	ret    

c000c274 <int_handler>:
c000c274:	55                   	push   ebp
c000c275:	57                   	push   edi
c000c276:	56                   	push   esi
c000c277:	53                   	push   ebx
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c27f:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c286:	74 0b                	je     c000c293 <int_handler+0x1f>
c000c288:	fa                   	cli    
c000c289:	f4                   	hlt    
c000c28a:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c291:	75 f5                	jne    c000c288 <int_handler+0x14>
c000c293:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c296:	8d 46 e0             	lea    eax,[esi-0x20]
c000c299:	83 f8 17             	cmp    eax,0x17
c000c29c:	76 40                	jbe    c000c2de <int_handler+0x6a>
c000c29e:	c1 e6 04             	shl    esi,0x4
c000c2a1:	31 db                	xor    ebx,ebx
c000c2a3:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2a9:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2af:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2b3:	85 c0                	test   eax,eax
c000c2b5:	74 13                	je     c000c2ca <int_handler+0x56>
c000c2b7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2ba:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2be:	74 2c                	je     c000c2ec <int_handler+0x78>
c000c2c0:	83 ec 08             	sub    esp,0x8
c000c2c3:	52                   	push   edx
c000c2c4:	57                   	push   edi
c000c2c5:	ff d0                	call   eax
c000c2c7:	83 c4 10             	add    esp,0x10
c000c2ca:	83 c3 01             	add    ebx,0x1
c000c2cd:	83 fb 04             	cmp    ebx,0x4
c000c2d0:	75 dd                	jne    c000c2af <int_handler+0x3b>
c000c2d2:	83 c4 0c             	add    esp,0xc
c000c2d5:	31 c0                	xor    eax,eax
c000c2d7:	5b                   	pop    ebx
c000c2d8:	31 d2                	xor    edx,edx
c000c2da:	5e                   	pop    esi
c000c2db:	5f                   	pop    edi
c000c2dc:	5d                   	pop    ebp
c000c2dd:	c3                   	ret    
c000c2de:	83 ec 0c             	sub    esp,0xc
c000c2e1:	50                   	push   eax
c000c2e2:	e8 86 af 00 00       	call   c001726d <HalEndOfInterrupt(int)>
c000c2e7:	83 c4 10             	add    esp,0x10
c000c2ea:	eb b2                	jmp    c000c29e <int_handler+0x2a>
c000c2ec:	83 ec 08             	sub    esp,0x8
c000c2ef:	52                   	push   edx
c000c2f0:	57                   	push   edi
c000c2f1:	ff d0                	call   eax
c000c2f3:	83 c4 10             	add    esp,0x10
c000c2f6:	83 c4 0c             	add    esp,0xc
c000c2f9:	5b                   	pop    ebx
c000c2fa:	5e                   	pop    esi
c000c2fb:	5f                   	pop    edi
c000c2fc:	5d                   	pop    ebp
c000c2fd:	c3                   	ret    

c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2fe:	56                   	push   esi
c000c2ff:	31 c0                	xor    eax,eax
c000c301:	53                   	push   ebx
c000c302:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c306:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c30a:	89 ca                	mov    edx,ecx
c000c30c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c310:	c1 e2 04             	shl    edx,0x4
c000c313:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c31b:	74 17                	je     c000c334 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c31d:	83 c0 01             	add    eax,0x1
c000c320:	83 f8 04             	cmp    eax,0x4
c000c323:	75 ee                	jne    c000c313 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c325:	c7 44 24 0c 64 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020464
c000c32d:	5b                   	pop    ebx
c000c32e:	5e                   	pop    esi
c000c32f:	e9 3f 45 00 00       	jmp    c0010873 <KePanic(char const*)>
c000c334:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c337:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c33e:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c345:	5b                   	pop    ebx
c000c346:	5e                   	pop    esi
c000c347:	c3                   	ret    

c000c348 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c348:	57                   	push   edi
c000c349:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c34f:	56                   	push   esi
c000c350:	53                   	push   ebx
c000c351:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c355:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c359:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c360:	74 54                	je     c000c3b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c362:	89 c7                	mov    edi,eax
c000c364:	84 c0                	test   al,al
c000c366:	74 1d                	je     c000c385 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c368:	83 fe 0f             	cmp    esi,0xf
c000c36b:	0f 8f d5 00 00 00    	jg     c000c446 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c371:	0f b6 b6 a0 1e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde160]
c000c378:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c380:	d1 ef                	shr    edi,1
c000c382:	83 e7 01             	and    edi,0x1
c000c385:	83 ec 08             	sub    esp,0x8
c000c388:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c38d:	31 db                	xor    ebx,ebx
c000c38f:	50                   	push   eax
c000c390:	68 71 04 02 c0       	push   0xc0020471
c000c395:	e8 fc e5 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000c39a:	83 c4 10             	add    esp,0x10
c000c39d:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3a2:	85 c0                	test   eax,eax
c000c3a4:	7f 55                	jg     c000c3fb <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c3a6:	83 ec 0c             	sub    esp,0xc
c000c3a9:	68 88 04 02 c0       	push   0xc0020488
c000c3ae:	e8 c0 44 00 00       	call   c0010873 <KePanic(char const*)>
c000c3b3:	83 c4 10             	add    esp,0x10
c000c3b6:	8d 7e 20             	lea    edi,[esi+0x20]
c000c3b9:	89 f8                	mov    eax,edi
c000c3bb:	31 d2                	xor    edx,edx
c000c3bd:	c1 e0 04             	shl    eax,0x4
c000c3c0:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3c7:	85 c9                	test   ecx,ecx
c000c3c9:	0f 84 8e 00 00 00    	je     c000c45d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c3cf:	83 c2 01             	add    edx,0x1
c000c3d2:	83 fa 04             	cmp    edx,0x4
c000c3d5:	75 e9                	jne    c000c3c0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c3d7:	83 ec 0c             	sub    esp,0xc
c000c3da:	68 dc 04 02 c0       	push   0xc00204dc
c000c3df:	e8 8f 44 00 00       	call   c0010873 <KePanic(char const*)>
c000c3e4:	83 c4 10             	add    esp,0x10
c000c3e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3ec:	5b                   	pop    ebx
c000c3ed:	5e                   	pop    esi
c000c3ee:	5f                   	pop    edi
c000c3ef:	c3                   	ret    
c000c3f0:	83 c3 01             	add    ebx,0x1
c000c3f3:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c3f9:	7e ab                	jle    c000c3a6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c3fb:	83 ec 08             	sub    esp,0x8
c000c3fe:	8b 04 9d 80 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7480]
c000c405:	56                   	push   esi
c000c406:	50                   	push   eax
c000c407:	e8 7e 15 01 00       	call   c001d98a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c40c:	83 c4 10             	add    esp,0x10
c000c40f:	84 c0                	test   al,al
c000c411:	74 dd                	je     c000c3f0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c413:	83 ec 04             	sub    esp,0x4
c000c416:	89 f8                	mov    eax,edi
c000c418:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c41f:	0f b6 f8             	movzx  edi,al
c000c422:	57                   	push   edi
c000c423:	8d 7e 20             	lea    edi,[esi+0x20]
c000c426:	6a 00                	push   0x0
c000c428:	89 f8                	mov    eax,edi
c000c42a:	0f b6 c0             	movzx  eax,al
c000c42d:	50                   	push   eax
c000c42e:	89 f0                	mov    eax,esi
c000c430:	6a 00                	push   0x0
c000c432:	0f b6 c0             	movzx  eax,al
c000c435:	6a 00                	push   0x0
c000c437:	50                   	push   eax
c000c438:	53                   	push   ebx
c000c439:	e8 b8 16 01 00       	call   c001daf6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c43e:	83 c4 20             	add    esp,0x20
c000c441:	e9 73 ff ff ff       	jmp    c000c3b9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c446:	83 ec 0c             	sub    esp,0xc
c000c449:	31 ff                	xor    edi,edi
c000c44b:	68 a4 04 02 c0       	push   0xc00204a4
c000c450:	e8 1e 44 00 00       	call   c0010873 <KePanic(char const*)>
c000c455:	83 c4 10             	add    esp,0x10
c000c458:	e9 28 ff ff ff       	jmp    c000c385 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c45d:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c460:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c464:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c46b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c46f:	5b                   	pop    ebx
c000c470:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c477:	89 f0                	mov    eax,esi
c000c479:	5e                   	pop    esi
c000c47a:	5f                   	pop    edi
c000c47b:	c3                   	ret    

c000c47c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c47c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c480:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c484:	c1 e0 04             	shl    eax,0x4
c000c487:	8d 50 10             	lea    edx,[eax+0x10]
c000c48a:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c490:	74 08                	je     c000c49a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c492:	83 c0 04             	add    eax,0x4
c000c495:	39 d0                	cmp    eax,edx
c000c497:	75 f1                	jne    c000c48a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c499:	c3                   	ret    
c000c49a:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4a4:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4ae:	eb e2                	jmp    c000c492 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4b0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4b0:	53                   	push   ebx
c000c4b1:	83 ec 08             	sub    esp,0x8
c000c4b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c4b8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4bd:	74 0e                	je     c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c4bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4c4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4cb:	75 37                	jne    c000c504 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4d1:	83 c0 20             	add    eax,0x20
c000c4d4:	c1 e0 04             	shl    eax,0x4
c000c4d7:	8d 50 10             	lea    edx,[eax+0x10]
c000c4da:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c4e0:	74 0c                	je     c000c4ee <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c4e2:	83 c0 04             	add    eax,0x4
c000c4e5:	39 d0                	cmp    eax,edx
c000c4e7:	75 f1                	jne    c000c4da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c4e9:	83 c4 08             	add    esp,0x8
c000c4ec:	5b                   	pop    ebx
c000c4ed:	c3                   	ret    
c000c4ee:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4f8:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c502:	eb de                	jmp    c000c4e2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c504:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c509:	7f 11                	jg     c000c51c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c50f:	0f b6 80 a0 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde160]
c000c516:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c51a:	eb b1                	jmp    c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c51c:	83 ec 0c             	sub    esp,0xc
c000c51f:	68 95 04 02 c0       	push   0xc0020495
c000c524:	e8 4a 43 00 00       	call   c0010873 <KePanic(char const*)>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	eb 9f                	jmp    c000c4cd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c52e <setupINTS()>:
c000c52e:	31 c0                	xor    eax,eax
c000c530:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c53a:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c544:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c54e:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c558:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c562:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c56c:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c576:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c580:	83 c0 10             	add    eax,0x10
c000c583:	3d 00 10 00 00       	cmp    eax,0x1000
c000c588:	75 a6                	jne    c000c530 <setupINTS()+0x2>
c000c58a:	c3                   	ret    

c000c58b <convertLegacyIRQNumber(int)>:
c000c58b:	83 ec 0c             	sub    esp,0xc
c000c58e:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c598:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c59f:	74 0c                	je     c000c5ad <convertLegacyIRQNumber(int)+0x22>
c000c5a1:	83 f8 0f             	cmp    eax,0xf
c000c5a4:	7f 0b                	jg     c000c5b1 <convertLegacyIRQNumber(int)+0x26>
c000c5a6:	0f b6 80 a0 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde160]
c000c5ad:	83 c4 0c             	add    esp,0xc
c000c5b0:	c3                   	ret    
c000c5b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b5:	83 ec 0c             	sub    esp,0xc
c000c5b8:	68 a4 04 02 c0       	push   0xc00204a4
c000c5bd:	e8 b1 42 00 00       	call   c0010873 <KePanic(char const*)>
c000c5c2:	83 c4 10             	add    esp,0x10
c000c5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5c9:	83 c4 0c             	add    esp,0xc
c000c5cc:	c3                   	ret    
c000c5cd:	90                   	nop

c000c5ce <startGUI(void*)>:
c000c5ce:	55                   	push   ebp
c000c5cf:	89 e5                	mov    ebp,esp
c000c5d1:	53                   	push   ebx
c000c5d2:	83 ec 04             	sub    esp,0x4
c000c5d5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5da:	83 e8 01             	sub    eax,0x1
c000c5dd:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5e2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5e7:	85 c0                	test   eax,eax
c000c5e9:	75 01                	jne    c000c5ec <startGUI(void*)+0x1e>
c000c5eb:	fb                   	sti    
c000c5ec:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5f2:	83 ec 08             	sub    esp,0x8
c000c5f5:	6a 01                	push   0x1
c000c5f7:	68 01 05 02 c0       	push   0xc0020501
c000c5fc:	e8 c9 7f 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c000c601:	83 c4 10             	add    esp,0x10
c000c604:	83 ec 08             	sub    esp,0x8
c000c607:	53                   	push   ebx
c000c608:	50                   	push   eax
c000c609:	e8 ed 81 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c000c60e:	83 c4 10             	add    esp,0x10
c000c611:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c617:	83 ec 08             	sub    esp,0x8
c000c61a:	6a 01                	push   0x1
c000c61c:	68 1b 05 02 c0       	push   0xc002051b
c000c621:	e8 a4 7f 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c000c626:	83 c4 10             	add    esp,0x10
c000c629:	83 ec 08             	sub    esp,0x8
c000c62c:	53                   	push   ebx
c000c62d:	50                   	push   eax
c000c62e:	e8 c8 81 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c000c633:	83 c4 10             	add    esp,0x10
c000c636:	90                   	nop
c000c637:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c63a:	c9                   	leave  
c000c63b:	c3                   	ret    

c000c63c <startGUIVESA(void*)>:
c000c63c:	55                   	push   ebp
c000c63d:	89 e5                	mov    ebp,esp
c000c63f:	53                   	push   ebx
c000c640:	83 ec 04             	sub    esp,0x4
c000c643:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c648:	83 e8 01             	sub    eax,0x1
c000c64b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c650:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c655:	85 c0                	test   eax,eax
c000c657:	75 01                	jne    c000c65a <startGUIVESA(void*)+0x1e>
c000c659:	fb                   	sti    
c000c65a:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c660:	83 ec 08             	sub    esp,0x8
c000c663:	6a 01                	push   0x1
c000c665:	68 39 05 02 c0       	push   0xc0020539
c000c66a:	e8 5b 7f 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c000c66f:	83 c4 10             	add    esp,0x10
c000c672:	83 ec 08             	sub    esp,0x8
c000c675:	53                   	push   ebx
c000c676:	50                   	push   eax
c000c677:	e8 7f 81 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c685:	83 ec 08             	sub    esp,0x8
c000c688:	6a 01                	push   0x1
c000c68a:	68 1b 05 02 c0       	push   0xc002051b
c000c68f:	e8 36 7f 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c000c694:	83 c4 10             	add    esp,0x10
c000c697:	83 ec 08             	sub    esp,0x8
c000c69a:	53                   	push   ebx
c000c69b:	50                   	push   eax
c000c69c:	e8 5a 81 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c000c6a1:	83 c4 10             	add    esp,0x10
c000c6a4:	90                   	nop
c000c6a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c6a8:	c9                   	leave  
c000c6a9:	c3                   	ret    

c000c6aa <sendKeyToTerminal(unsigned char)>:
c000c6aa:	55                   	push   ebp
c000c6ab:	89 e5                	mov    ebp,esp
c000c6ad:	83 ec 28             	sub    esp,0x28
c000c6b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6b6:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6bb:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6bf:	83 ec 08             	sub    esp,0x8
c000c6c2:	52                   	push   edx
c000c6c3:	50                   	push   eax
c000c6c4:	e8 d7 c6 ff ff       	call   c0008da0 <VgaText::receiveKey(unsigned char)>
c000c6c9:	83 c4 10             	add    esp,0x10
c000c6cc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6d0:	83 f8 0a             	cmp    eax,0xa
c000c6d3:	74 16                	je     c000c6eb <sendKeyToTerminal(unsigned char)+0x41>
c000c6d5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6d9:	83 f8 03             	cmp    eax,0x3
c000c6dc:	74 0d                	je     c000c6eb <sendKeyToTerminal(unsigned char)+0x41>
c000c6de:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6e2:	83 f8 1c             	cmp    eax,0x1c
c000c6e5:	0f 85 97 00 00 00    	jne    c000c782 <sendKeyToTerminal(unsigned char)+0xd8>
c000c6eb:	fa                   	cli    
c000c6ec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6f1:	83 c0 01             	add    eax,0x1
c000c6f4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6f9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6fe:	83 c0 01             	add    eax,0x1
c000c701:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c706:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c70b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c70e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c718:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c71c:	74 1f                	je     c000c73d <sendKeyToTerminal(unsigned char)+0x93>
c000c71e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c721:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c724:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c727:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c72a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c72d:	83 ec 0c             	sub    esp,0xc
c000c730:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c733:	e8 08 8e 00 00       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c000c738:	83 c4 10             	add    esp,0x10
c000c73b:	eb db                	jmp    c000c718 <sendKeyToTerminal(unsigned char)+0x6e>
c000c73d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c742:	83 e8 01             	sub    eax,0x1
c000c745:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c74a:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c74f:	85 c0                	test   eax,eax
c000c751:	75 18                	jne    c000c76b <sendKeyToTerminal(unsigned char)+0xc1>
c000c753:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c758:	85 c0                	test   eax,eax
c000c75a:	74 0f                	je     c000c76b <sendKeyToTerminal(unsigned char)+0xc1>
c000c75c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c766:	e8 bd 88 00 00       	call   c0015028 <schedule()>
c000c76b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c770:	83 e8 01             	sub    eax,0x1
c000c773:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c778:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c77d:	85 c0                	test   eax,eax
c000c77f:	75 01                	jne    c000c782 <sendKeyToTerminal(unsigned char)+0xd8>
c000c781:	fb                   	sti    
c000c782:	90                   	nop
c000c783:	c9                   	leave  
c000c784:	c3                   	ret    

c000c785 <sendKeyboardToken(KeyboardToken)>:
c000c785:	55                   	push   ebp
c000c786:	89 e5                	mov    ebp,esp
c000c788:	83 ec 18             	sub    esp,0x18
c000c78b:	e8 33 41 00 00       	call   c00108c3 <Krnl::userIOReceived()>
c000c790:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c796:	0f b7 c0             	movzx  eax,ax
c000c799:	83 f2 01             	xor    edx,0x1
c000c79c:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c7a2:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7a7:	85 c0                	test   eax,eax
c000c7a9:	74 24                	je     c000c7cf <sendKeyboardToken(KeyboardToken)+0x4a>
c000c7ab:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c7b1:	83 ec 04             	sub    esp,0x4
c000c7b4:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7b9:	83 ec 08             	sub    esp,0x8
c000c7bc:	89 e2                	mov    edx,esp
c000c7be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c1:	89 02                	mov    DWORD PTR [edx],eax
c000c7c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7c6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7ca:	ff d1                	call   ecx
c000c7cc:	83 c4 10             	add    esp,0x10
c000c7cf:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7d3:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7d6:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7db:	0f b6 d2             	movzx  edx,dl
c000c7de:	0f b6 c0             	movzx  eax,al
c000c7e1:	39 c2                	cmp    edx,eax
c000c7e3:	74 1c                	je     c000c801 <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7e5:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7e8:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7ed:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7f2:	0f b6 c0             	movzx  eax,al
c000c7f5:	83 ec 0c             	sub    esp,0xc
c000c7f8:	50                   	push   eax
c000c7f9:	e8 ee bc ff ff       	call   c00084ec <setTerminalScrollLock(bool)>
c000c7fe:	83 c4 10             	add    esp,0x10
c000c801:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c804:	0f b6 c0             	movzx  eax,al
c000c807:	85 c0                	test   eax,eax
c000c809:	0f 84 da 00 00 00    	je     c000c8e9 <sendKeyboardToken(KeyboardToken)+0x164>
c000c80f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c812:	0f b7 c0             	movzx  eax,ax
c000c815:	3d 18 03 00 00       	cmp    eax,0x318
c000c81a:	75 06                	jne    c000c822 <sendKeyboardToken(KeyboardToken)+0x9d>
c000c81c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c825:	0f b7 c0             	movzx  eax,ax
c000c828:	3d 19 03 00 00       	cmp    eax,0x319
c000c82d:	75 06                	jne    c000c835 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c82f:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c838:	0f b7 c0             	movzx  eax,ax
c000c83b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c840:	75 06                	jne    c000c848 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c842:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84b:	0f b7 c0             	movzx  eax,ax
c000c84e:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c853:	75 06                	jne    c000c85b <sendKeyboardToken(KeyboardToken)+0xd6>
c000c855:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c85b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c85e:	0f b7 c0             	movzx  eax,ax
c000c861:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c866:	75 06                	jne    c000c86e <sendKeyboardToken(KeyboardToken)+0xe9>
c000c868:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c86e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c871:	0f b7 c0             	movzx  eax,ax
c000c874:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c879:	75 06                	jne    c000c881 <sendKeyboardToken(KeyboardToken)+0xfc>
c000c87b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c884:	0f b7 c0             	movzx  eax,ax
c000c887:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c88c:	75 06                	jne    c000c894 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c88e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c897:	0f b7 c0             	movzx  eax,ax
c000c89a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c89f:	75 06                	jne    c000c8a7 <sendKeyboardToken(KeyboardToken)+0x122>
c000c8a1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c8a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8aa:	0f b7 c0             	movzx  eax,ax
c000c8ad:	3d 20 03 00 00       	cmp    eax,0x320
c000c8b2:	75 06                	jne    c000c8ba <sendKeyboardToken(KeyboardToken)+0x135>
c000c8b4:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8bd:	0f b7 c0             	movzx  eax,ax
c000c8c0:	3d 21 03 00 00       	cmp    eax,0x321
c000c8c5:	75 06                	jne    c000c8cd <sendKeyboardToken(KeyboardToken)+0x148>
c000c8c7:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d0:	0f b7 c0             	movzx  eax,ax
c000c8d3:	3d 22 03 00 00       	cmp    eax,0x322
c000c8d8:	0f 85 f1 00 00 00    	jne    c000c9cf <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8de:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8e4:	e9 e6 00 00 00       	jmp    c000c9cf <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ec:	0f b7 c0             	movzx  eax,ax
c000c8ef:	3d 18 03 00 00       	cmp    eax,0x318
c000c8f4:	75 0a                	jne    c000c900 <sendKeyboardToken(KeyboardToken)+0x17b>
c000c8f6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c903:	0f b7 c0             	movzx  eax,ax
c000c906:	3d 19 03 00 00       	cmp    eax,0x319
c000c90b:	75 0a                	jne    c000c917 <sendKeyboardToken(KeyboardToken)+0x192>
c000c90d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c913:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c91a:	0f b7 c0             	movzx  eax,ax
c000c91d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c922:	75 0a                	jne    c000c92e <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c924:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c92a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c931:	0f b7 c0             	movzx  eax,ax
c000c934:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c939:	75 0a                	jne    c000c945 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c93b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c941:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c948:	0f b7 c0             	movzx  eax,ax
c000c94b:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c950:	75 0a                	jne    c000c95c <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c952:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c958:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c95c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c95f:	0f b7 c0             	movzx  eax,ax
c000c962:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c967:	75 0a                	jne    c000c973 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c969:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c96f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c976:	0f b7 c0             	movzx  eax,ax
c000c979:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c97e:	75 0a                	jne    c000c98a <sendKeyboardToken(KeyboardToken)+0x205>
c000c980:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c986:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c98a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c98d:	0f b7 c0             	movzx  eax,ax
c000c990:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c995:	75 0a                	jne    c000c9a1 <sendKeyboardToken(KeyboardToken)+0x21c>
c000c997:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c99d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	0f b7 c0             	movzx  eax,ax
c000c9a7:	3d 20 03 00 00       	cmp    eax,0x320
c000c9ac:	75 0a                	jne    c000c9b8 <sendKeyboardToken(KeyboardToken)+0x233>
c000c9ae:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9bb:	0f b7 c0             	movzx  eax,ax
c000c9be:	3d 21 03 00 00       	cmp    eax,0x321
c000c9c3:	75 0a                	jne    c000c9cf <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9c5:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d2:	0f b7 c0             	movzx  eax,ax
c000c9d5:	3d 00 02 00 00       	cmp    eax,0x200
c000c9da:	75 2f                	jne    c000ca0b <sendKeyboardToken(KeyboardToken)+0x286>
c000c9dc:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9e1:	83 f0 01             	xor    eax,0x1
c000c9e4:	0f b6 c0             	movzx  eax,al
c000c9e7:	85 c0                	test   eax,eax
c000c9e9:	74 20                	je     c000ca0b <sendKeyboardToken(KeyboardToken)+0x286>
c000c9eb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9f0:	6a 01                	push   0x1
c000c9f2:	6a 00                	push   0x0
c000c9f4:	68 ce c5 00 c0       	push   0xc000c5ce
c000c9f9:	50                   	push   eax
c000c9fa:	e8 d9 83 00 00       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c000c9ff:	83 c4 10             	add    esp,0x10
c000ca02:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca09:	eb 3a                	jmp    c000ca45 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca0e:	0f b7 c0             	movzx  eax,ax
c000ca11:	3d 01 02 00 00       	cmp    eax,0x201
c000ca16:	75 2d                	jne    c000ca45 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca18:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca1d:	83 f0 01             	xor    eax,0x1
c000ca20:	0f b6 c0             	movzx  eax,al
c000ca23:	85 c0                	test   eax,eax
c000ca25:	74 1e                	je     c000ca45 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca27:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca2c:	6a 01                	push   0x1
c000ca2e:	6a 00                	push   0x0
c000ca30:	68 3c c6 00 c0       	push   0xc000c63c
c000ca35:	50                   	push   eax
c000ca36:	e8 9d 83 00 00       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c000ca3b:	83 c4 10             	add    esp,0x10
c000ca3e:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca48:	0f b7 c0             	movzx  eax,ax
c000ca4b:	3d 25 03 00 00       	cmp    eax,0x325
c000ca50:	75 06                	jne    c000ca58 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca52:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5b:	0f b7 c0             	movzx  eax,ax
c000ca5e:	3d 24 03 00 00       	cmp    eax,0x324
c000ca63:	75 06                	jne    c000ca6b <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca65:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6e:	0f b7 c0             	movzx  eax,ax
c000ca71:	3d 23 03 00 00       	cmp    eax,0x323
c000ca76:	75 06                	jne    c000ca7e <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca78:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca81:	0f b7 c0             	movzx  eax,ax
c000ca84:	3d 26 03 00 00       	cmp    eax,0x326
c000ca89:	75 06                	jne    c000ca91 <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca8b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca94:	0f b7 c0             	movzx  eax,ax
c000ca97:	3d 27 03 00 00       	cmp    eax,0x327
c000ca9c:	75 06                	jne    c000caa4 <sendKeyboardToken(KeyboardToken)+0x31f>
c000ca9e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000caa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa7:	0f b7 c0             	movzx  eax,ax
c000caaa:	3d 22 03 00 00       	cmp    eax,0x322
c000caaf:	75 06                	jne    c000cab7 <sendKeyboardToken(KeyboardToken)+0x332>
c000cab1:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cab7:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cabb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cabe:	83 f0 01             	xor    eax,0x1
c000cac1:	0f b6 c0             	movzx  eax,al
c000cac4:	85 c0                	test   eax,eax
c000cac6:	74 7c                	je     c000cb44 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cac8:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cacd:	0f b6 c0             	movzx  eax,al
c000cad0:	85 c0                	test   eax,eax
c000cad2:	74 43                	je     c000cb17 <sendKeyboardToken(KeyboardToken)+0x392>
c000cad4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cad8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cadc:	85 c0                	test   eax,eax
c000cade:	74 2b                	je     c000cb0b <sendKeyboardToken(KeyboardToken)+0x386>
c000cae0:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cae6:	89 d0                	mov    eax,edx
c000cae8:	c1 e0 02             	shl    eax,0x2
c000caeb:	01 d0                	add    eax,edx
c000caed:	01 c0                	add    eax,eax
c000caef:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000caf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf7:	0f b7 c0             	movzx  eax,ax
c000cafa:	8d 50 d0             	lea    edx,[eax-0x30]
c000cafd:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb02:	01 d0                	add    eax,edx
c000cb04:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb09:	eb 71                	jmp    c000cb7c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb0b:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb15:	eb 65                	jmp    c000cb7c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb17:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb1c:	85 c0                	test   eax,eax
c000cb1e:	74 18                	je     c000cb38 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb20:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb25:	0f b6 c0             	movzx  eax,al
c000cb28:	83 ec 0c             	sub    esp,0xc
c000cb2b:	50                   	push   eax
c000cb2c:	e8 79 fb ff ff       	call   c000c6aa <sendKeyToTerminal(unsigned char)>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb38:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb42:	eb 38                	jmp    c000cb7c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb47:	0f b7 c0             	movzx  eax,ax
c000cb4a:	3d 01 01 00 00       	cmp    eax,0x101
c000cb4f:	75 2b                	jne    c000cb7c <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb51:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb56:	85 c0                	test   eax,eax
c000cb58:	74 18                	je     c000cb72 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb5a:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb5f:	0f b6 c0             	movzx  eax,al
c000cb62:	83 ec 0c             	sub    esp,0xc
c000cb65:	50                   	push   eax
c000cb66:	e8 3f fb ff ff       	call   c000c6aa <sendKeyToTerminal(unsigned char)>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb72:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb7c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb7f:	83 f0 01             	xor    eax,0x1
c000cb82:	0f b6 c0             	movzx  eax,al
c000cb85:	85 c0                	test   eax,eax
c000cb87:	74 5a                	je     c000cbe3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb89:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb8c:	83 f0 01             	xor    eax,0x1
c000cb8f:	0f b6 c0             	movzx  eax,al
c000cb92:	85 c0                	test   eax,eax
c000cb94:	74 4d                	je     c000cbe3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb96:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb9b:	83 f0 01             	xor    eax,0x1
c000cb9e:	0f b6 c0             	movzx  eax,al
c000cba1:	85 c0                	test   eax,eax
c000cba3:	74 3e                	je     c000cbe3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba8:	0f b7 c0             	movzx  eax,ax
c000cbab:	83 f8 1f             	cmp    eax,0x1f
c000cbae:	76 0b                	jbe    c000cbbb <sendKeyboardToken(KeyboardToken)+0x436>
c000cbb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb3:	0f b7 c0             	movzx  eax,ax
c000cbb6:	83 f8 7e             	cmp    eax,0x7e
c000cbb9:	76 16                	jbe    c000cbd1 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbbe:	0f b7 c0             	movzx  eax,ax
c000cbc1:	83 f8 0a             	cmp    eax,0xa
c000cbc4:	74 0b                	je     c000cbd1 <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc9:	0f b7 c0             	movzx  eax,ax
c000cbcc:	83 f8 08             	cmp    eax,0x8
c000cbcf:	75 12                	jne    c000cbe3 <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd4:	0f b6 c0             	movzx  eax,al
c000cbd7:	83 ec 0c             	sub    esp,0xc
c000cbda:	50                   	push   eax
c000cbdb:	e8 ca fa ff ff       	call   c000c6aa <sendKeyToTerminal(unsigned char)>
c000cbe0:	83 c4 10             	add    esp,0x10
c000cbe3:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbe6:	83 f0 01             	xor    eax,0x1
c000cbe9:	0f b6 c0             	movzx  eax,al
c000cbec:	85 c0                	test   eax,eax
c000cbee:	74 5d                	je     c000cc4d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbf0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbf3:	83 f0 01             	xor    eax,0x1
c000cbf6:	0f b6 c0             	movzx  eax,al
c000cbf9:	85 c0                	test   eax,eax
c000cbfb:	74 50                	je     c000cc4d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbfd:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cc02:	0f b6 c0             	movzx  eax,al
c000cc05:	85 c0                	test   eax,eax
c000cc07:	74 44                	je     c000cc4d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0c:	0f b7 c0             	movzx  eax,ax
c000cc0f:	83 f8 3f             	cmp    eax,0x3f
c000cc12:	76 39                	jbe    c000cc4d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc17:	0f b7 c0             	movzx  eax,ax
c000cc1a:	83 f8 7f             	cmp    eax,0x7f
c000cc1d:	77 2e                	ja     c000cc4d <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc22:	88 c2                	mov    dl,al
c000cc24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc27:	0f b7 c0             	movzx  eax,ax
c000cc2a:	83 f8 5f             	cmp    eax,0x5f
c000cc2d:	76 04                	jbe    c000cc33 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc2f:	b0 20                	mov    al,0x20
c000cc31:	eb 02                	jmp    c000cc35 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc33:	b0 00                	mov    al,0x0
c000cc35:	89 d1                	mov    ecx,edx
c000cc37:	29 c1                	sub    ecx,eax
c000cc39:	89 c8                	mov    eax,ecx
c000cc3b:	83 e8 40             	sub    eax,0x40
c000cc3e:	0f b6 c0             	movzx  eax,al
c000cc41:	83 ec 0c             	sub    esp,0xc
c000cc44:	50                   	push   eax
c000cc45:	e8 60 fa ff ff       	call   c000c6aa <sendKeyToTerminal(unsigned char)>
c000cc4a:	83 c4 10             	add    esp,0x10
c000cc4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc50:	0f b7 c0             	movzx  eax,ax
c000cc53:	3d 00 03 00 00       	cmp    eax,0x300
c000cc58:	75 12                	jne    c000cc6c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc5a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc5d:	83 f0 01             	xor    eax,0x1
c000cc60:	0f b6 c0             	movzx  eax,al
c000cc63:	85 c0                	test   eax,eax
c000cc65:	74 05                	je     c000cc6c <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc67:	e8 81 b8 ff ff       	call   c00084ed <doTerminalCycle()>
c000cc6c:	90                   	nop
c000cc6d:	c9                   	leave  
c000cc6e:	c3                   	ret    

c000cc6f <clearInternalKeybuffer(VgaText*)>:
c000cc6f:	55                   	push   ebp
c000cc70:	89 e5                	mov    ebp,esp
c000cc72:	83 ec 08             	sub    esp,0x8
c000cc75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc78:	05 02 01 00 00       	add    eax,0x102
c000cc7d:	83 ec 0c             	sub    esp,0xc
c000cc80:	50                   	push   eax
c000cc81:	e8 ea 38 ff ff       	call   c0000570 <strlen>
c000cc86:	83 c4 10             	add    esp,0x10
c000cc89:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc8c:	81 c2 02 01 00 00    	add    edx,0x102
c000cc92:	83 ec 04             	sub    esp,0x4
c000cc95:	50                   	push   eax
c000cc96:	6a 00                	push   0x0
c000cc98:	52                   	push   edx
c000cc99:	e8 52 38 ff ff       	call   c00004f0 <memset>
c000cc9e:	83 c4 10             	add    esp,0x10
c000cca1:	90                   	nop
c000cca2:	c9                   	leave  
c000cca3:	c3                   	ret    

c000cca4 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cca4:	55                   	push   ebp
c000cca5:	89 e5                	mov    ebp,esp
c000cca7:	83 ec 18             	sub    esp,0x18
c000ccaa:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000ccaf:	85 c0                	test   eax,eax
c000ccb1:	74 2a                	je     c000ccdd <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ccb3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ccb9:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000ccbf:	83 ec 04             	sub    esp,0x4
c000ccc2:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ccc7:	83 ec 08             	sub    esp,0x8
c000ccca:	89 e2                	mov    edx,esp
c000cccc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cccf:	89 02                	mov    DWORD PTR [edx],eax
c000ccd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ccd4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ccd8:	ff d1                	call   ecx
c000ccda:	83 c4 10             	add    esp,0x10
c000ccdd:	fb                   	sti    
c000ccde:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cce5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cce9:	0f 84 0d 01 00 00    	je     c000cdfc <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000ccef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccf2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ccf8:	0f be c0             	movsx  eax,al
c000ccfb:	85 c0                	test   eax,eax
c000ccfd:	75 2c                	jne    c000cd2b <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000ccff:	fa                   	cli    
c000cd00:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd05:	83 c0 01             	add    eax,0x1
c000cd08:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd0d:	e8 16 83 00 00       	call   c0015028 <schedule()>
c000cd12:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd17:	83 e8 01             	sub    eax,0x1
c000cd1a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd1f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd24:	85 c0                	test   eax,eax
c000cd26:	75 c7                	jne    c000ccef <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd28:	fb                   	sti    
c000cd29:	eb c4                	jmp    c000ccef <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd2e:	8d 50 01             	lea    edx,[eax+0x1]
c000cd31:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd37:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd3d:	88 10                	mov    BYTE PTR [eax],dl
c000cd3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd42:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd48:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd4b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd4f:	83 f8 03             	cmp    eax,0x3
c000cd52:	75 1e                	jne    c000cd72 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd54:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd59:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd5e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd64:	83 ec 08             	sub    esp,0x8
c000cd67:	6a 02                	push   0x2
c000cd69:	50                   	push   eax
c000cd6a:	e8 a0 3f 00 00       	call   c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd76:	83 f8 1c             	cmp    eax,0x1c
c000cd79:	75 1e                	jne    c000cd99 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd80:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd85:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd8b:	83 ec 08             	sub    esp,0x8
c000cd8e:	6a 09                	push   0x9
c000cd90:	50                   	push   eax
c000cd91:	e8 79 3f 00 00       	call   c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd9c:	05 02 01 00 00       	add    eax,0x102
c000cda1:	83 ec 0c             	sub    esp,0xc
c000cda4:	50                   	push   eax
c000cda5:	e8 c6 37 ff ff       	call   c0000570 <strlen>
c000cdaa:	83 c4 10             	add    esp,0x10
c000cdad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdb0:	81 c2 02 01 00 00    	add    edx,0x102
c000cdb6:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cdb9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cdbc:	81 c2 02 01 00 00    	add    edx,0x102
c000cdc2:	83 ec 04             	sub    esp,0x4
c000cdc5:	50                   	push   eax
c000cdc6:	51                   	push   ecx
c000cdc7:	52                   	push   edx
c000cdc8:	e8 03 36 ff ff       	call   c00003d0 <memmove>
c000cdcd:	83 c4 10             	add    esp,0x10
c000cdd0:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cdd4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cdd8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cddc:	83 f8 0a             	cmp    eax,0xa
c000cddf:	74 16                	je     c000cdf7 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cde1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cde5:	83 f8 03             	cmp    eax,0x3
c000cde8:	74 0d                	je     c000cdf7 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdea:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdee:	83 f8 1c             	cmp    eax,0x1c
c000cdf1:	0f 85 ee fe ff ff    	jne    c000cce5 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cdf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdfa:	eb 03                	jmp    c000cdff <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000cdfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdff:	c9                   	leave  
c000ce00:	c3                   	ret    
c000ce01:	90                   	nop

c000ce02 <Keyboard::Keyboard(char const*)>:
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce09:	83 ec 08             	sub    esp,0x8
c000ce0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce10:	50                   	push   eax
c000ce11:	e8 4c f1 ff ff       	call   c000bf62 <Device::Device(char const*)>
c000ce16:	83 c4 10             	add    esp,0x10
c000ce19:	ba 5c 05 02 c0       	mov    edx,0xc002055c
c000ce1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce22:	89 10                	mov    DWORD PTR [eax],edx
c000ce24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce28:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce32:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce39:	90                   	nop
c000ce3a:	83 c4 0c             	add    esp,0xc
c000ce3d:	c3                   	ret    

c000ce3e <Keyboard::~Keyboard()>:
c000ce3e:	83 ec 0c             	sub    esp,0xc
c000ce41:	ba 5c 05 02 c0       	mov    edx,0xc002055c
c000ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4a:	89 10                	mov    DWORD PTR [eax],edx
c000ce4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce50:	83 ec 0c             	sub    esp,0xc
c000ce53:	50                   	push   eax
c000ce54:	e8 73 ee ff ff       	call   c000bccc <Device::~Device()>
c000ce59:	83 c4 10             	add    esp,0x10
c000ce5c:	90                   	nop
c000ce5d:	83 c4 0c             	add    esp,0xc
c000ce60:	c3                   	ret    
c000ce61:	90                   	nop

c000ce62 <Keyboard::~Keyboard()>:
c000ce62:	83 ec 0c             	sub    esp,0xc
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6c:	e8 cd ff ff ff       	call   c000ce3e <Keyboard::~Keyboard()>
c000ce71:	83 c4 10             	add    esp,0x10
c000ce74:	83 ec 08             	sub    esp,0x8
c000ce77:	68 5c 01 00 00       	push   0x15c
c000ce7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce80:	e8 e4 d9 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000ce85:	83 c4 10             	add    esp,0x10
c000ce88:	83 c4 0c             	add    esp,0xc
c000ce8b:	c3                   	ret    

c000ce8c <LogicalDisk::close(int, int, void*)>:
c000ce8c:	83 c8 ff             	or     eax,0xffffffff
c000ce8f:	c3                   	ret    

c000ce90 <LogicalDisk::~LogicalDisk()>:
c000ce90:	83 ec 0c             	sub    esp,0xc
c000ce93:	ba d4 05 02 c0       	mov    edx,0xc00205d4
c000ce98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce9c:	89 10                	mov    DWORD PTR [eax],edx
c000ce9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cea2:	83 ec 0c             	sub    esp,0xc
c000cea5:	50                   	push   eax
c000cea6:	e8 21 ee ff ff       	call   c000bccc <Device::~Device()>
c000ceab:	83 c4 10             	add    esp,0x10
c000ceae:	90                   	nop
c000ceaf:	83 c4 0c             	add    esp,0xc
c000ceb2:	c3                   	ret    
c000ceb3:	90                   	nop

c000ceb4 <LogicalDisk::~LogicalDisk()>:
c000ceb4:	83 ec 0c             	sub    esp,0xc
c000ceb7:	83 ec 0c             	sub    esp,0xc
c000ceba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cebe:	e8 cd ff ff ff       	call   c000ce90 <LogicalDisk::~LogicalDisk()>
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	83 ec 08             	sub    esp,0x8
c000cec9:	68 78 01 00 00       	push   0x178
c000cece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced2:	e8 92 d9 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000ced7:	83 c4 10             	add    esp,0x10
c000ceda:	83 c4 0c             	add    esp,0xc
c000cedd:	c3                   	ret    

c000cede <LogicalDisk::open(int, int, void*)>:
c000cede:	83 ec 18             	sub    esp,0x18
c000cee1:	68 88 05 02 c0       	push   0xc0020588
c000cee6:	e8 88 39 00 00       	call   c0010873 <KePanic(char const*)>
c000ceeb:	83 c8 ff             	or     eax,0xffffffff
c000ceee:	83 c4 1c             	add    esp,0x1c
c000cef1:	c3                   	ret    

c000cef2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cef2:	53                   	push   ebx
c000cef3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cef7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cefb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ceff:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cf05:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cf0b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf11:	77 10                	ja     c000cf23 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cf13:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf19:	89 d3                	mov    ebx,edx
c000cf1b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf21:	72 05                	jb     c000cf28 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf23:	83 c8 ff             	or     eax,0xffffffff
c000cf26:	89 c2                	mov    edx,eax
c000cf28:	5b                   	pop    ebx
c000cf29:	c3                   	ret    

c000cf2a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf2a:	56                   	push   esi
c000cf2b:	83 c8 ff             	or     eax,0xffffffff
c000cf2e:	53                   	push   ebx
c000cf2f:	89 c2                	mov    edx,eax
c000cf31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf35:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf3d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf43:	77 27                	ja     c000cf6c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf45:	89 d8                	mov    eax,ebx
c000cf47:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf4d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf58:	89 c2                	mov    edx,eax
c000cf5a:	73 10                	jae    c000cf6c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf5c:	89 c8                	mov    eax,ecx
c000cf5e:	89 da                	mov    edx,ebx
c000cf60:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf66:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf6c:	5b                   	pop    ebx
c000cf6d:	5e                   	pop    esi
c000cf6e:	c3                   	ret    
c000cf6f:	90                   	nop

c000cf70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf70:	83 ec 1c             	sub    esp,0x1c
c000cf73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf87:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf8a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf96:	83 ec 08             	sub    esp,0x8
c000cf99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf9d:	50                   	push   eax
c000cf9e:	e8 bf ef ff ff       	call   c000bf62 <Device::Device(char const*)>
c000cfa3:	83 c4 10             	add    esp,0x10
c000cfa6:	ba d4 05 02 c0       	mov    edx,0xc00205d4
c000cfab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfaf:	89 10                	mov    DWORD PTR [eax],edx
c000cfb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfb5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfc0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfcb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfd6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfe0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfe8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfec:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cff2:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cff8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cffc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cfff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d003:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d009:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d00f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d013:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d017:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d01d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d021:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d02b:	90                   	nop
c000d02c:	83 c4 1c             	add    esp,0x1c
c000d02f:	c3                   	ret    

c000d030 <LogicalDisk::assignDriveLetter()>:
c000d030:	55                   	push   ebp
c000d031:	57                   	push   edi
c000d032:	56                   	push   esi
c000d033:	53                   	push   ebx
c000d034:	83 ec 14             	sub    esp,0x14
c000d037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d041:	b0 41                	mov    al,0x41
c000d043:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d049:	84 d2                	test   dl,dl
c000d04b:	75 02                	jne    c000d04f <LogicalDisk::assignDriveLetter()+0x1f>
c000d04d:	b0 43                	mov    al,0x43
c000d04f:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d055:	0f b6 ca             	movzx  ecx,dl
c000d058:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d05c:	0f be e8             	movsx  ebp,al
c000d05f:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d065:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d069:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d06d:	3c 43                	cmp    al,0x43
c000d06f:	75 10                	jne    c000d081 <LogicalDisk::assignDriveLetter()+0x51>
c000d071:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d078:	75 5a                	jne    c000d0d4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d07a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d07f:	75 53                	jne    c000d0d4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d081:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d084:	ba 01 00 00 00       	mov    edx,0x1
c000d089:	89 34 24             	mov    DWORD PTR [esp],esi
c000d08c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d08f:	d3 e2                	shl    edx,cl
c000d091:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d095:	89 d7                	mov    edi,edx
c000d097:	89 d6                	mov    esi,edx
c000d099:	c1 ff 1f             	sar    edi,0x1f
c000d09c:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d0a0:	21 f9                	and    ecx,edi
c000d0a2:	09 d1                	or     ecx,edx
c000d0a4:	75 2e                	jne    c000d0d4 <LogicalDisk::assignDriveLetter()+0xa4>
c000d0a6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d0aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0ae:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0b4:	09 f2                	or     edx,esi
c000d0b6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0b9:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0bf:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0ca:	09 fa                	or     edx,edi
c000d0cc:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0d2:	eb 0d                	jmp    c000d0e1 <LogicalDisk::assignDriveLetter()+0xb1>
c000d0d4:	8d 50 01             	lea    edx,[eax+0x1]
c000d0d7:	45                   	inc    ebp
c000d0d8:	88 d0                	mov    al,dl
c000d0da:	80 fa 5b             	cmp    dl,0x5b
c000d0dd:	75 8e                	jne    c000d06d <LogicalDisk::assignDriveLetter()+0x3d>
c000d0df:	31 c0                	xor    eax,eax
c000d0e1:	83 c4 14             	add    esp,0x14
c000d0e4:	5b                   	pop    ebx
c000d0e5:	5e                   	pop    esi
c000d0e6:	5f                   	pop    edi
c000d0e7:	5d                   	pop    ebp
c000d0e8:	c3                   	ret    
c000d0e9:	90                   	nop

c000d0ea <LogicalDisk::mount()>:
c000d0ea:	56                   	push   esi
c000d0eb:	53                   	push   ebx
c000d0ec:	53                   	push   ebx
c000d0ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0f1:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0f7:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d101:	85 db                	test   ebx,ebx
c000d103:	74 27                	je     c000d12c <LogicalDisk::mount()+0x42>
c000d105:	51                   	push   ecx
c000d106:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d10d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d10f:	83 e8 41             	sub    eax,0x41
c000d112:	50                   	push   eax
c000d113:	56                   	push   esi
c000d114:	53                   	push   ebx
c000d115:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	84 c0                	test   al,al
c000d11d:	74 08                	je     c000d127 <LogicalDisk::mount()+0x3d>
c000d11f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d125:	eb 07                	jmp    c000d12e <LogicalDisk::mount()+0x44>
c000d127:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d12a:	eb d5                	jmp    c000d101 <LogicalDisk::mount()+0x17>
c000d12c:	31 c0                	xor    eax,eax
c000d12e:	5a                   	pop    edx
c000d12f:	5b                   	pop    ebx
c000d130:	5e                   	pop    esi
c000d131:	c3                   	ret    

c000d132 <LogicalDisk::unmount()>:
c000d132:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d136:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d140:	c3                   	ret    
c000d141:	90                   	nop

c000d142 <LogicalDisk::eject()>:
c000d142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d146:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d14c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d14e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d152:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d155:	90                   	nop

c000d156 <LogicalDisk::unassignDriveLetter()>:
c000d156:	57                   	push   edi
c000d157:	56                   	push   esi
c000d158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d15c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d163:	85 c9                	test   ecx,ecx
c000d165:	75 0f                	jne    c000d176 <LogicalDisk::unassignDriveLetter()+0x20>
c000d167:	c7 44 24 0c ac 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205ac
c000d16f:	5e                   	pop    esi
c000d170:	5f                   	pop    edi
c000d171:	e9 fd 36 00 00       	jmp    c0010873 <KePanic(char const*)>
c000d176:	83 e9 41             	sub    ecx,0x41
c000d179:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d180:	b8 01 00 00 00       	mov    eax,0x1
c000d185:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d190:	d3 e0                	shl    eax,cl
c000d192:	89 c7                	mov    edi,eax
c000d194:	f7 d0                	not    eax
c000d196:	c1 ff 1f             	sar    edi,0x1f
c000d199:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d19f:	89 fe                	mov    esi,edi
c000d1a1:	f7 d6                	not    esi
c000d1a3:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d1a9:	5e                   	pop    esi
c000d1aa:	5f                   	pop    edi
c000d1ab:	c3                   	ret    

c000d1ac <LogicalDisk::read(unsigned long long, int, void*)>:
c000d1ac:	57                   	push   edi
c000d1ad:	56                   	push   esi
c000d1ae:	53                   	push   ebx
c000d1af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1bf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1c5:	77 41                	ja     c000d208 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1c7:	99                   	cdq    
c000d1c8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1ce:	01 c8                	add    eax,ecx
c000d1d0:	11 da                	adc    edx,ebx
c000d1d2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1d8:	19 d7                	sbb    edi,edx
c000d1da:	72 33                	jb     c000d20f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1dc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1e2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1ec:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1f0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d200:	5b                   	pop    ebx
c000d201:	5e                   	pop    esi
c000d202:	5f                   	pop    edi
c000d203:	e9 c6 0a 00 00       	jmp    c000dcce <VCache::read(unsigned long long, int, void*)>
c000d208:	b8 05 00 00 00       	mov    eax,0x5
c000d20d:	eb 05                	jmp    c000d214 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d20f:	b8 07 00 00 00       	mov    eax,0x7
c000d214:	5b                   	pop    ebx
c000d215:	5e                   	pop    esi
c000d216:	5f                   	pop    edi
c000d217:	c3                   	ret    

c000d218 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d218:	57                   	push   edi
c000d219:	56                   	push   esi
c000d21a:	53                   	push   ebx
c000d21b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d21f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d223:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d22b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d231:	77 41                	ja     c000d274 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d233:	99                   	cdq    
c000d234:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d23a:	01 c8                	add    eax,ecx
c000d23c:	11 da                	adc    edx,ebx
c000d23e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d244:	19 d7                	sbb    edi,edx
c000d246:	72 33                	jb     c000d27b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d248:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d24e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d254:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d258:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d25c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d262:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d26c:	5b                   	pop    ebx
c000d26d:	5e                   	pop    esi
c000d26e:	5f                   	pop    edi
c000d26f:	e9 6c 09 00 00       	jmp    c000dbe0 <VCache::write(unsigned long long, int, void*)>
c000d274:	b8 05 00 00 00       	mov    eax,0x5
c000d279:	eb 05                	jmp    c000d280 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d27b:	b8 07 00 00 00       	mov    eax,0x7
c000d280:	5b                   	pop    ebx
c000d281:	5e                   	pop    esi
c000d282:	5f                   	pop    edi
c000d283:	c3                   	ret    

c000d284 <Mouse::Mouse(char const*)>:
c000d284:	83 ec 0c             	sub    esp,0xc
c000d287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28b:	83 ec 08             	sub    esp,0x8
c000d28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d292:	50                   	push   eax
c000d293:	e8 ca ec ff ff       	call   c000bf62 <Device::Device(char const*)>
c000d298:	83 c4 10             	add    esp,0x10
c000d29b:	ba 00 06 02 c0       	mov    edx,0xc0020600
c000d2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a4:	89 10                	mov    DWORD PTR [eax],edx
c000d2a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2aa:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2b4:	90                   	nop
c000d2b5:	83 c4 0c             	add    esp,0xc
c000d2b8:	c3                   	ret    
c000d2b9:	90                   	nop
c000d2ba:	66 90                	xchg   ax,ax

c000d2bc <Mouse::~Mouse()>:
c000d2bc:	83 ec 0c             	sub    esp,0xc
c000d2bf:	ba 00 06 02 c0       	mov    edx,0xc0020600
c000d2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c8:	89 10                	mov    DWORD PTR [eax],edx
c000d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ce:	83 ec 0c             	sub    esp,0xc
c000d2d1:	50                   	push   eax
c000d2d2:	e8 f5 e9 ff ff       	call   c000bccc <Device::~Device()>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	90                   	nop
c000d2db:	83 c4 0c             	add    esp,0xc
c000d2de:	c3                   	ret    
c000d2df:	90                   	nop

c000d2e0 <Mouse::~Mouse()>:
c000d2e0:	83 ec 0c             	sub    esp,0xc
c000d2e3:	83 ec 0c             	sub    esp,0xc
c000d2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ea:	e8 cd ff ff ff       	call   c000d2bc <Mouse::~Mouse()>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	83 ec 08             	sub    esp,0x8
c000d2f5:	68 58 01 00 00       	push   0x158
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	e8 66 d5 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000d303:	83 c4 10             	add    esp,0x10
c000d306:	83 c4 0c             	add    esp,0xc
c000d309:	c3                   	ret    

c000d30a <NIC::getMAC()>:
c000d30a:	31 c0                	xor    eax,eax
c000d30c:	31 d2                	xor    edx,edx
c000d30e:	c3                   	ret    
c000d30f:	90                   	nop

c000d310 <NIC::write(int, unsigned char*, int*)>:
c000d310:	b8 01 00 00 00       	mov    eax,0x1
c000d315:	c3                   	ret    

c000d316 <NIC::NIC(char const*)>:
c000d316:	83 ec 0c             	sub    esp,0xc
c000d319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31d:	83 ec 08             	sub    esp,0x8
c000d320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d324:	50                   	push   eax
c000d325:	e8 38 ec ff ff       	call   c000bf62 <Device::Device(char const*)>
c000d32a:	83 c4 10             	add    esp,0x10
c000d32d:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d336:	89 10                	mov    DWORD PTR [eax],edx
c000d338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d33c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d346:	90                   	nop
c000d347:	83 c4 0c             	add    esp,0xc
c000d34a:	c3                   	ret    
c000d34b:	90                   	nop

c000d34c <NIC::~NIC()>:
c000d34c:	83 ec 0c             	sub    esp,0xc
c000d34f:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d358:	89 10                	mov    DWORD PTR [eax],edx
c000d35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35e:	83 ec 0c             	sub    esp,0xc
c000d361:	50                   	push   eax
c000d362:	e8 65 e9 ff ff       	call   c000bccc <Device::~Device()>
c000d367:	83 c4 10             	add    esp,0x10
c000d36a:	90                   	nop
c000d36b:	83 c4 0c             	add    esp,0xc
c000d36e:	c3                   	ret    
c000d36f:	90                   	nop

c000d370 <NIC::~NIC()>:
c000d370:	83 ec 0c             	sub    esp,0xc
c000d373:	83 ec 0c             	sub    esp,0xc
c000d376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37a:	e8 cd ff ff ff       	call   c000d34c <NIC::~NIC()>
c000d37f:	83 c4 10             	add    esp,0x10
c000d382:	83 ec 08             	sub    esp,0x8
c000d385:	68 58 01 00 00       	push   0x158
c000d38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d38e:	e8 d6 d4 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000d393:	83 c4 10             	add    esp,0x10
c000d396:	83 c4 0c             	add    esp,0xc
c000d399:	c3                   	ret    

c000d39a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d39a:	55                   	push   ebp
c000d39b:	57                   	push   edi
c000d39c:	56                   	push   esi
c000d39d:	53                   	push   ebx
c000d39e:	81 ec 28 01 00 00    	sub    esp,0x128
c000d3a4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d3ab:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d3b2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d3b9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d3c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3c4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3c8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3cf:	e8 8a ec ff ff       	call   c000c05e <Device::getName()>
c000d3d4:	5a                   	pop    edx
c000d3d5:	59                   	pop    ecx
c000d3d6:	50                   	push   eax
c000d3d7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3db:	55                   	push   ebp
c000d3dc:	e8 5f 32 ff ff       	call   c0000640 <strcpy>
c000d3e1:	5b                   	pop    ebx
c000d3e2:	58                   	pop    eax
c000d3e3:	68 58 06 02 c0       	push   0xc0020658
c000d3e8:	55                   	push   ebp
c000d3e9:	e8 52 34 ff ff       	call   c0000840 <strcat>
c000d3ee:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3f5:	e8 b4 a6 ff ff       	call   c0007aae <malloc>
c000d3fa:	83 c4 0c             	add    esp,0xc
c000d3fd:	89 c3                	mov    ebx,eax
c000d3ff:	57                   	push   edi
c000d400:	56                   	push   esi
c000d401:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d405:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d409:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d410:	55                   	push   ebp
c000d411:	50                   	push   eax
c000d412:	e8 59 fb ff ff       	call   c000cf70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d417:	83 c4 14             	add    esp,0x14
c000d41a:	53                   	push   ebx
c000d41b:	e8 10 fc ff ff       	call   c000d030 <LogicalDisk::assignDriveLetter()>
c000d420:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d423:	e8 c2 fc ff ff       	call   c000d0ea <LogicalDisk::mount()>
c000d428:	58                   	pop    eax
c000d429:	5a                   	pop    edx
c000d42a:	53                   	push   ebx
c000d42b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d432:	e8 93 e9 ff ff       	call   c000bdca <Device::addChild(Device*)>
c000d437:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d43d:	5b                   	pop    ebx
c000d43e:	5e                   	pop    esi
c000d43f:	5f                   	pop    edi
c000d440:	5d                   	pop    ebp
c000d441:	c3                   	ret    

c000d442 <createPartitionsForDisk(PhysicalDisk*)>:
c000d442:	55                   	push   ebp
c000d443:	57                   	push   edi
c000d444:	56                   	push   esi
c000d445:	53                   	push   ebx
c000d446:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d44c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d453:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d459:	3d 00 02 00 00       	cmp    eax,0x200
c000d45e:	74 27                	je     c000d487 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d460:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d466:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d46c:	83 ec 10             	sub    esp,0x10
c000d46f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d473:	99                   	cdq    
c000d474:	c1 e6 0a             	shl    esi,0xa
c000d477:	52                   	push   edx
c000d478:	89 fd                	mov    ebp,edi
c000d47a:	50                   	push   eax
c000d47b:	55                   	push   ebp
c000d47c:	56                   	push   esi
c000d47d:	e8 2e 11 01 00       	call   c001e5b0 <__udivdi3>
c000d482:	e9 b9 00 00 00       	jmp    c000d540 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d487:	83 ec 0c             	sub    esp,0xc
c000d48a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d48c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d490:	56                   	push   esi
c000d491:	6a 01                	push   0x1
c000d493:	6a 00                	push   0x0
c000d495:	6a 00                	push   0x0
c000d497:	53                   	push   ebx
c000d498:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d49b:	83 c4 20             	add    esp,0x20
c000d49e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d4a6:	75 0a                	jne    c000d4b2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d4a8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d4b0:	74 2c                	je     c000d4de <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d4b2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4b8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4be:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4c4:	83 ec 10             	sub    esp,0x10
c000d4c7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4cb:	89 f7                	mov    edi,esi
c000d4cd:	c1 e0 0a             	shl    eax,0xa
c000d4d0:	c1 ff 1f             	sar    edi,0x1f
c000d4d3:	57                   	push   edi
c000d4d4:	56                   	push   esi
c000d4d5:	52                   	push   edx
c000d4d6:	50                   	push   eax
c000d4d7:	e8 d4 10 01 00       	call   c001e5b0 <__udivdi3>
c000d4dc:	eb 62                	jmp    c000d540 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4de:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4e5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4ec:	89 cf                	mov    edi,ecx
c000d4ee:	83 e2 7f             	and    edx,0x7f
c000d4f1:	83 e7 7f             	and    edi,0x7f
c000d4f4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4fb:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d4fe:	83 e0 7f             	and    eax,0x7f
c000d501:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d504:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d50b:	83 e0 7f             	and    eax,0x7f
c000d50e:	01 d0                	add    eax,edx
c000d510:	89 c5                	mov    ebp,eax
c000d512:	84 c0                	test   al,al
c000d514:	74 41                	je     c000d557 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d516:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d51c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d522:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d528:	83 ec 10             	sub    esp,0x10
c000d52b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d52f:	89 f7                	mov    edi,esi
c000d531:	c1 e0 0a             	shl    eax,0xa
c000d534:	c1 ff 1f             	sar    edi,0x1f
c000d537:	57                   	push   edi
c000d538:	56                   	push   esi
c000d539:	52                   	push   edx
c000d53a:	50                   	push   eax
c000d53b:	e8 70 10 01 00       	call   c001e5b0 <__udivdi3>
c000d540:	83 c4 14             	add    esp,0x14
c000d543:	52                   	push   edx
c000d544:	50                   	push   eax
c000d545:	6a 00                	push   0x0
c000d547:	6a 00                	push   0x0
c000d549:	53                   	push   ebx
c000d54a:	e8 4b fe ff ff       	call   c000d39a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d54f:	83 c4 20             	add    esp,0x20
c000d552:	e9 73 01 00 00       	jmp    c000d6ca <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d557:	89 f0                	mov    eax,esi
c000d559:	31 c9                	xor    ecx,ecx
c000d55b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d562:	75 02                	jne    c000d566 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d564:	89 cd                	mov    ebp,ecx
c000d566:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d56d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d574:	c1 e2 08             	shl    edx,0x8
c000d577:	c1 e6 10             	shl    esi,0x10
c000d57a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d582:	09 f2                	or     edx,esi
c000d584:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d58c:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d593:	83 c0 10             	add    eax,0x10
c000d596:	09 f2                	or     edx,esi
c000d598:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d59f:	c1 e6 18             	shl    esi,0x18
c000d5a2:	09 f2                	or     edx,esi
c000d5a4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d5ab:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d5af:	c1 e6 10             	shl    esi,0x10
c000d5b2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5b9:	c1 e2 08             	shl    edx,0x8
c000d5bc:	09 f2                	or     edx,esi
c000d5be:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5c5:	09 f2                	or     edx,esi
c000d5c7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5ce:	c1 e6 18             	shl    esi,0x18
c000d5d1:	09 f2                	or     edx,esi
c000d5d3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5d7:	41                   	inc    ecx
c000d5d8:	83 f9 04             	cmp    ecx,0x4
c000d5db:	0f 85 7a ff ff ff    	jne    c000d55b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e5:	83 f0 01             	xor    eax,0x1
c000d5e8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5ec:	75 4f                	jne    c000d63d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5f2:	83 f0 01             	xor    eax,0x1
c000d5f5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5f9:	75 42                	jne    c000d63d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5fb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d603:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d60b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d611:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d617:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d61d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d621:	89 f7                	mov    edi,esi
c000d623:	c1 e0 0a             	shl    eax,0xa
c000d626:	c1 ff 1f             	sar    edi,0x1f
c000d629:	57                   	push   edi
c000d62a:	56                   	push   esi
c000d62b:	52                   	push   edx
c000d62c:	50                   	push   eax
c000d62d:	e8 7e 0f 01 00       	call   c001e5b0 <__udivdi3>
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d639:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d63d:	89 e8                	mov    eax,ebp
c000d63f:	0f b6 e8             	movzx  ebp,al
c000d642:	85 ed                	test   ebp,ebp
c000d644:	74 50                	je     c000d696 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d646:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d64a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d64e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d652:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d656:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d65a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d65e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d662:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d666:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d66a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d66e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d672:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d676:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d67a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d67e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d68a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d68e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d692:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d696:	31 ed                	xor    ebp,ebp
c000d698:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d69c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d6a0:	89 f8                	mov    eax,edi
c000d6a2:	09 f0                	or     eax,esi
c000d6a4:	74 1e                	je     c000d6c4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6a6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d6aa:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d6ae:	89 d1                	mov    ecx,edx
c000d6b0:	09 c1                	or     ecx,eax
c000d6b2:	74 10                	je     c000d6c4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	57                   	push   edi
c000d6b8:	56                   	push   esi
c000d6b9:	52                   	push   edx
c000d6ba:	50                   	push   eax
c000d6bb:	53                   	push   ebx
c000d6bc:	e8 d9 fc ff ff       	call   c000d39a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6c1:	83 c4 20             	add    esp,0x20
c000d6c4:	45                   	inc    ebp
c000d6c5:	83 fd 04             	cmp    ebp,0x4
c000d6c8:	75 ce                	jne    c000d698 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6ca:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6d0:	5b                   	pop    ebx
c000d6d1:	5e                   	pop    esi
c000d6d2:	5f                   	pop    edi
c000d6d3:	5d                   	pop    ebp
c000d6d4:	c3                   	ret    
c000d6d5:	66 90                	xchg   ax,ax
c000d6d7:	90                   	nop

c000d6d8 <Serial::Serial(char const*)>:
c000d6d8:	83 ec 0c             	sub    esp,0xc
c000d6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6df:	83 ec 08             	sub    esp,0x8
c000d6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6e6:	50                   	push   eax
c000d6e7:	e8 76 e8 ff ff       	call   c000bf62 <Device::Device(char const*)>
c000d6ec:	83 c4 10             	add    esp,0x10
c000d6ef:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f8:	89 10                	mov    DWORD PTR [eax],edx
c000d6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fe:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d708:	90                   	nop
c000d709:	83 c4 0c             	add    esp,0xc
c000d70c:	c3                   	ret    
c000d70d:	90                   	nop
c000d70e:	66 90                	xchg   ax,ax

c000d710 <Serial::~Serial()>:
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71c:	89 10                	mov    DWORD PTR [eax],edx
c000d71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d722:	83 ec 0c             	sub    esp,0xc
c000d725:	50                   	push   eax
c000d726:	e8 a1 e5 ff ff       	call   c000bccc <Device::~Device()>
c000d72b:	83 c4 10             	add    esp,0x10
c000d72e:	90                   	nop
c000d72f:	83 c4 0c             	add    esp,0xc
c000d732:	c3                   	ret    
c000d733:	90                   	nop

c000d734 <Serial::~Serial()>:
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	83 ec 0c             	sub    esp,0xc
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	e8 cd ff ff ff       	call   c000d710 <Serial::~Serial()>
c000d743:	83 c4 10             	add    esp,0x10
c000d746:	83 ec 08             	sub    esp,0x8
c000d749:	68 58 01 00 00       	push   0x158
c000d74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d752:	e8 12 d1 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000d757:	83 c4 10             	add    esp,0x10
c000d75a:	83 c4 0c             	add    esp,0xc
c000d75d:	c3                   	ret    
c000d75e:	66 90                	xchg   ax,ax

c000d760 <Timer::Timer(char const*)>:
c000d760:	83 ec 0c             	sub    esp,0xc
c000d763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d767:	83 ec 08             	sub    esp,0x8
c000d76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76e:	50                   	push   eax
c000d76f:	e8 ee e7 ff ff       	call   c000bf62 <Device::Device(char const*)>
c000d774:	83 c4 10             	add    esp,0x10
c000d777:	ba b0 06 02 c0       	mov    edx,0xc00206b0
c000d77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d780:	89 10                	mov    DWORD PTR [eax],edx
c000d782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d786:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d790:	90                   	nop
c000d791:	83 c4 0c             	add    esp,0xc
c000d794:	c3                   	ret    
c000d795:	90                   	nop
c000d796:	66 90                	xchg   ax,ax

c000d798 <Timer::~Timer()>:
c000d798:	83 ec 0c             	sub    esp,0xc
c000d79b:	ba b0 06 02 c0       	mov    edx,0xc00206b0
c000d7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a4:	89 10                	mov    DWORD PTR [eax],edx
c000d7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7aa:	83 ec 0c             	sub    esp,0xc
c000d7ad:	50                   	push   eax
c000d7ae:	e8 19 e5 ff ff       	call   c000bccc <Device::~Device()>
c000d7b3:	83 c4 10             	add    esp,0x10
c000d7b6:	90                   	nop
c000d7b7:	83 c4 0c             	add    esp,0xc
c000d7ba:	c3                   	ret    
c000d7bb:	90                   	nop

c000d7bc <Timer::~Timer()>:
c000d7bc:	83 ec 0c             	sub    esp,0xc
c000d7bf:	83 ec 0c             	sub    esp,0xc
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	e8 cd ff ff ff       	call   c000d798 <Timer::~Timer()>
c000d7cb:	83 c4 10             	add    esp,0x10
c000d7ce:	83 ec 08             	sub    esp,0x8
c000d7d1:	68 5c 01 00 00       	push   0x15c
c000d7d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7da:	e8 8a d0 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	83 c4 0c             	add    esp,0xc
c000d7e5:	c3                   	ret    

c000d7e6 <Timer::read()>:
c000d7e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7ea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7f0:	c3                   	ret    

c000d7f1 <setupTimer(int)>:
c000d7f1:	53                   	push   ebx
c000d7f2:	83 ec 14             	sub    esp,0x14
c000d7f5:	68 5c 01 00 00       	push   0x15c
c000d7fa:	e8 af a2 ff ff       	call   c0007aae <malloc>
c000d7ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d802:	89 c3                	mov    ebx,eax
c000d804:	e8 0b 06 01 00       	call   c001de14 <PIT::PIT()>
c000d809:	58                   	pop    eax
c000d80a:	5a                   	pop    edx
c000d80b:	53                   	push   ebx
c000d80c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d812:	e8 b3 e5 ff ff       	call   c000bdca <Device::addChild(Device*)>
c000d817:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d819:	6a 00                	push   0x0
c000d81b:	6a 00                	push   0x0
c000d81d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d821:	53                   	push   ebx
c000d822:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d825:	89 d8                	mov    eax,ebx
c000d827:	83 c4 28             	add    esp,0x28
c000d82a:	5b                   	pop    ebx
c000d82b:	c3                   	ret    

c000d82c <timerHandler(unsigned int)>:
c000d82c:	56                   	push   esi
c000d82d:	53                   	push   ebx
c000d82e:	51                   	push   ecx
c000d82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d833:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d839:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d840:	0f 84 4a 01 00 00    	je     c000d990 <timerHandler(unsigned int)+0x164>
c000d846:	fa                   	cli    
c000d847:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d84d:	83 ec 0c             	sub    esp,0xc
c000d850:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d856:	68 78 81 02 c0       	push   0xc0028178
c000d85b:	e8 20 13 01 00       	call   c001eb80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d860:	83 c4 10             	add    esp,0x10
c000d863:	84 c0                	test   al,al
c000d865:	0f 85 a1 00 00 00    	jne    c000d90c <timerHandler(unsigned int)+0xe0>
c000d86b:	83 ec 0c             	sub    esp,0xc
c000d86e:	68 78 81 02 c0       	push   0xc0028178
c000d873:	e8 24 13 01 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d878:	83 c4 10             	add    esp,0x10
c000d87b:	89 c6                	mov    esi,eax
c000d87d:	8d 76 00             	lea    esi,[esi+0x0]
c000d880:	83 ec 0c             	sub    esp,0xc
c000d883:	68 78 81 02 c0       	push   0xc0028178
c000d888:	e8 0f 13 01 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d88d:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d894:	89 c3                	mov    ebx,eax
c000d896:	e8 09 13 01 00       	call   c001eba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d89b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d8a7:	77 23                	ja     c000d8cc <timerHandler(unsigned int)+0xa0>
c000d8a9:	83 ec 0c             	sub    esp,0xc
c000d8ac:	53                   	push   ebx
c000d8ad:	e8 8e 7c 00 00       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	39 de                	cmp    esi,ebx
c000d8b7:	75 27                	jne    c000d8e0 <timerHandler(unsigned int)+0xb4>
c000d8b9:	83 ec 0c             	sub    esp,0xc
c000d8bc:	68 78 81 02 c0       	push   0xc0028178
c000d8c1:	e8 d6 12 01 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8c6:	89 c6                	mov    esi,eax
c000d8c8:	eb 12                	jmp    c000d8dc <timerHandler(unsigned int)+0xb0>
c000d8ca:	66 90                	xchg   ax,ax
c000d8cc:	52                   	push   edx
c000d8cd:	52                   	push   edx
c000d8ce:	53                   	push   ebx
c000d8cf:	68 78 81 02 c0       	push   0xc0028178
c000d8d4:	e8 87 13 01 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8dc:	83 c4 10             	add    esp,0x10
c000d8df:	90                   	nop
c000d8e0:	83 ec 0c             	sub    esp,0xc
c000d8e3:	68 78 81 02 c0       	push   0xc0028178
c000d8e8:	e8 93 12 01 00       	call   c001eb80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8ed:	83 c4 10             	add    esp,0x10
c000d8f0:	84 c0                	test   al,al
c000d8f2:	75 18                	jne    c000d90c <timerHandler(unsigned int)+0xe0>
c000d8f4:	83 ec 0c             	sub    esp,0xc
c000d8f7:	68 78 81 02 c0       	push   0xc0028178
c000d8fc:	e8 9b 12 01 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	39 f0                	cmp    eax,esi
c000d906:	0f 85 74 ff ff ff    	jne    c000d880 <timerHandler(unsigned int)+0x54>
c000d90c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d911:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d915:	74 41                	je     c000d958 <timerHandler(unsigned int)+0x12c>
c000d917:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d91e:	74 38                	je     c000d958 <timerHandler(unsigned int)+0x12c>
c000d920:	fa                   	cli    
c000d921:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d927:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d92c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d932:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d935:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d93b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d93e:	72 08                	jb     c000d948 <timerHandler(unsigned int)+0x11c>
c000d940:	e8 e3 76 00 00       	call   c0015028 <schedule()>
c000d945:	8d 76 00             	lea    esi,[esi+0x0]
c000d948:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d94d:	48                   	dec    eax
c000d94e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d953:	75 03                	jne    c000d958 <timerHandler(unsigned int)+0x12c>
c000d955:	fb                   	sti    
c000d956:	66 90                	xchg   ax,ax
c000d958:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d95d:	48                   	dec    eax
c000d95e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d963:	75 1b                	jne    c000d980 <timerHandler(unsigned int)+0x154>
c000d965:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d96c:	74 12                	je     c000d980 <timerHandler(unsigned int)+0x154>
c000d96e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d978:	e8 ab 76 00 00       	call   c0015028 <schedule()>
c000d97d:	8d 76 00             	lea    esi,[esi+0x0]
c000d980:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d985:	48                   	dec    eax
c000d986:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d98b:	75 03                	jne    c000d990 <timerHandler(unsigned int)+0x164>
c000d98d:	fb                   	sti    
c000d98e:	66 90                	xchg   ax,ax
c000d990:	58                   	pop    eax
c000d991:	5b                   	pop    ebx
c000d992:	5e                   	pop    esi
c000d993:	c3                   	ret    

c000d994 <VCache::VCache(PhysicalDisk*)>:
c000d994:	53                   	push   ebx
c000d995:	83 ec 18             	sub    esp,0x18
c000d998:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000d99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a1:	89 10                	mov    DWORD PTR [eax],edx
c000d9a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d9ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ec:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9fb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da06:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da16:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da1e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da25:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da2d:	83 ec 0c             	sub    esp,0xc
c000da30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da34:	e8 75 a0 ff ff       	call   c0007aae <malloc>
c000da39:	83 c4 10             	add    esp,0x10
c000da3c:	89 c3                	mov    ebx,eax
c000da3e:	83 ec 0c             	sub    esp,0xc
c000da41:	53                   	push   ebx
c000da42:	e8 7d 73 00 00       	call   c0014dc4 <Mutex::Mutex()>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da55:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da59:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da60:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da6b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da7c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da88:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da8c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da8f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da96:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da9e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daa4:	05 00 02 00 00       	add    eax,0x200
c000daa9:	c1 e0 03             	shl    eax,0x3
c000daac:	83 ec 0c             	sub    esp,0xc
c000daaf:	50                   	push   eax
c000dab0:	e8 f9 9f ff ff       	call   c0007aae <malloc>
c000dab5:	83 c4 10             	add    esp,0x10
c000dab8:	89 c2                	mov    edx,eax
c000daba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dabe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dacc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dad8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dade:	89 d0                	mov    eax,edx
c000dae0:	c1 e0 02             	shl    eax,0x2
c000dae3:	01 d0                	add    eax,edx
c000dae5:	c1 e0 04             	shl    eax,0x4
c000dae8:	83 ec 0c             	sub    esp,0xc
c000daeb:	50                   	push   eax
c000daec:	e8 bd 9f ff ff       	call   c0007aae <malloc>
c000daf1:	83 c4 10             	add    esp,0x10
c000daf4:	89 c2                	mov    edx,eax
c000daf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dafa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dafd:	90                   	nop
c000dafe:	83 c4 18             	add    esp,0x18
c000db01:	5b                   	pop    ebx
c000db02:	c3                   	ret    
c000db03:	90                   	nop

c000db04 <VCache::invalidateReadBuffer()>:
c000db04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db08:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db12:	c3                   	ret    
c000db13:	90                   	nop

c000db14 <VCache::writeWriteBuffer()>:
c000db14:	53                   	push   ebx
c000db15:	83 ec 08             	sub    esp,0x8
c000db18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db1c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db20:	74 1e                	je     c000db40 <VCache::writeWriteBuffer()+0x2c>
c000db22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db25:	83 ec 0c             	sub    esp,0xc
c000db28:	8b 10                	mov    edx,DWORD PTR [eax]
c000db2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db30:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db33:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db36:	50                   	push   eax
c000db37:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db3a:	83 c4 20             	add    esp,0x20
c000db3d:	8d 76 00             	lea    esi,[esi+0x0]
c000db40:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db47:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db4e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db52:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db59:	83 c4 08             	add    esp,0x8
c000db5c:	5b                   	pop    ebx
c000db5d:	c3                   	ret    
c000db5e:	66 90                	xchg   ax,ax

c000db60 <VCache::~VCache()>:
c000db60:	83 ec 0c             	sub    esp,0xc
c000db63:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	89 10                	mov    DWORD PTR [eax],edx
c000db6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db72:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db75:	0f b6 c0             	movzx  eax,al
c000db78:	85 c0                	test   eax,eax
c000db7a:	74 10                	je     c000db8c <VCache::~VCache()+0x2c>
c000db7c:	83 ec 0c             	sub    esp,0xc
c000db7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db83:	e8 8c ff ff ff       	call   c000db14 <VCache::writeWriteBuffer()>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	90                   	nop
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db93:	83 ec 0c             	sub    esp,0xc
c000db96:	50                   	push   eax
c000db97:	e8 22 9f ff ff       	call   c0007abe <free>
c000db9c:	83 c4 10             	add    esp,0x10
c000db9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	50                   	push   eax
c000dbaa:	e8 0f 9f ff ff       	call   c0007abe <free>
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	90                   	nop
c000dbb3:	83 c4 0c             	add    esp,0xc
c000dbb6:	c3                   	ret    
c000dbb7:	90                   	nop

c000dbb8 <VCache::~VCache()>:
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	83 ec 0c             	sub    esp,0xc
c000dbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc2:	e8 99 ff ff ff       	call   c000db60 <VCache::~VCache()>
c000dbc7:	83 c4 10             	add    esp,0x10
c000dbca:	83 ec 08             	sub    esp,0x8
c000dbcd:	6a 44                	push   0x44
c000dbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd3:	e8 91 cc ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	83 c4 0c             	add    esp,0xc
c000dbde:	c3                   	ret    
c000dbdf:	90                   	nop

c000dbe0 <VCache::write(unsigned long long, int, void*)>:
c000dbe0:	55                   	push   ebp
c000dbe1:	57                   	push   edi
c000dbe2:	56                   	push   esi
c000dbe3:	53                   	push   ebx
c000dbe4:	83 ec 1c             	sub    esp,0x1c
c000dbe7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbeb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbef:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbf7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbfb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbff:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc03:	74 07                	je     c000dc0c <VCache::write(unsigned long long, int, void*)+0x2c>
c000dc05:	53                   	push   ebx
c000dc06:	e8 f9 fe ff ff       	call   c000db04 <VCache::invalidateReadBuffer()>
c000dc0b:	58                   	pop    eax
c000dc0c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc10:	74 62                	je     c000dc74 <VCache::write(unsigned long long, int, void*)+0x94>
c000dc12:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc19:	99                   	cdq    
c000dc1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc1e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc21:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc24:	31 c1                	xor    ecx,eax
c000dc26:	89 d0                	mov    eax,edx
c000dc28:	89 ca                	mov    edx,ecx
c000dc2a:	31 e8                	xor    eax,ebp
c000dc2c:	09 c2                	or     edx,eax
c000dc2e:	75 38                	jne    c000dc68 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc30:	83 ff 01             	cmp    edi,0x1
c000dc33:	75 33                	jne    c000dc68 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc42:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc45:	0f af c8             	imul   ecx,eax
c000dc48:	01 cf                	add    edi,ecx
c000dc4a:	89 c1                	mov    ecx,eax
c000dc4c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc4e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc51:	40                   	inc    eax
c000dc52:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc55:	83 f8 50             	cmp    eax,0x50
c000dc58:	75 6a                	jne    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc5a:	83 ec 0c             	sub    esp,0xc
c000dc5d:	53                   	push   ebx
c000dc5e:	e8 b1 fe ff ff       	call   c000db14 <VCache::writeWriteBuffer()>
c000dc63:	83 c4 10             	add    esp,0x10
c000dc66:	eb 5c                	jmp    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc68:	83 ec 0c             	sub    esp,0xc
c000dc6b:	53                   	push   ebx
c000dc6c:	e8 a3 fe ff ff       	call   c000db14 <VCache::writeWriteBuffer()>
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc77:	83 ff 4f             	cmp    edi,0x4f
c000dc7a:	7f 20                	jg     c000dc9c <VCache::write(unsigned long long, int, void*)+0xbc>
c000dc7c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc83:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc86:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dc89:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc8d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc90:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc98:	eb 2a                	jmp    c000dcc4 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc9e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dca2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dca6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dcaa:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dcae:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dcb9:	83 c4 1c             	add    esp,0x1c
c000dcbc:	5b                   	pop    ebx
c000dcbd:	5e                   	pop    esi
c000dcbe:	5f                   	pop    edi
c000dcbf:	5d                   	pop    ebp
c000dcc0:	ff e0                	jmp    eax
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	83 c4 1c             	add    esp,0x1c
c000dcc7:	31 c0                	xor    eax,eax
c000dcc9:	5b                   	pop    ebx
c000dcca:	5e                   	pop    esi
c000dccb:	5f                   	pop    edi
c000dccc:	5d                   	pop    ebp
c000dccd:	c3                   	ret    

c000dcce <VCache::read(unsigned long long, int, void*)>:
c000dcce:	55                   	push   ebp
c000dccf:	57                   	push   edi
c000dcd0:	56                   	push   esi
c000dcd1:	53                   	push   ebx
c000dcd2:	83 ec 1c             	sub    esp,0x1c
c000dcd5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dcd9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcdd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dce1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dce5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dce9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dced:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dcf1:	74 0d                	je     c000dd00 <VCache::read(unsigned long long, int, void*)+0x32>
c000dcf3:	83 ec 0c             	sub    esp,0xc
c000dcf6:	57                   	push   edi
c000dcf7:	e8 18 fe ff ff       	call   c000db14 <VCache::writeWriteBuffer()>
c000dcfc:	83 c4 10             	add    esp,0x10
c000dcff:	90                   	nop
c000dd00:	83 fd 01             	cmp    ebp,0x1
c000dd03:	0f 85 93 00 00 00    	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xce>
c000dd09:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd0f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd16:	0f 85 80 00 00 00    	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0xce>
c000dd1c:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dd1f:	89 e9                	mov    ecx,ebp
c000dd21:	f7 d9                	neg    ecx
c000dd23:	89 c8                	mov    eax,ecx
c000dd25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd29:	c1 f8 1f             	sar    eax,0x1f
c000dd2c:	21 d9                	and    ecx,ebx
c000dd2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd32:	89 c8                	mov    eax,ecx
c000dd34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd38:	21 f1                	and    ecx,esi
c000dd3a:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd3e:	89 ca                	mov    edx,ecx
c000dd40:	74 2e                	je     c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd42:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dd45:	75 29                	jne    c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd47:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd4a:	75 24                	jne    c000dd70 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd4c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd4f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd55:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd58:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd5b:	21 f3                	and    ebx,esi
c000dd5d:	0f af d9             	imul   ebx,ecx
c000dd60:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd63:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd67:	89 de                	mov    esi,ebx
c000dd69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd6b:	31 c0                	xor    eax,eax
c000dd6d:	eb 61                	jmp    c000ddd0 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd6f:	90                   	nop
c000dd70:	83 ec 0c             	sub    esp,0xc
c000dd73:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd77:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd7b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd7e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd81:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd83:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd86:	55                   	push   ebp
c000dd87:	52                   	push   edx
c000dd88:	50                   	push   eax
c000dd89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000dd90:	83 c4 20             	add    esp,0x20
c000dd93:	85 c0                	test   eax,eax
c000dd95:	75 39                	jne    c000ddd0 <VCache::read(unsigned long long, int, void*)+0x102>
c000dd97:	eb b3                	jmp    c000dd4c <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd99:	8d 76 00             	lea    esi,[esi+0x0]
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	57                   	push   edi
c000dda0:	e8 5f fd ff ff       	call   c000db04 <VCache::invalidateReadBuffer()>
c000dda5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dda8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddac:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddae:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000ddb2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000ddb6:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000ddba:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddbe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddc2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddc5:	83 c4 2c             	add    esp,0x2c
c000ddc8:	5b                   	pop    ebx
c000ddc9:	5e                   	pop    esi
c000ddca:	5f                   	pop    edi
c000ddcb:	5d                   	pop    ebp
c000ddcc:	ff e0                	jmp    eax
c000ddce:	66 90                	xchg   ax,ax
c000ddd0:	83 c4 1c             	add    esp,0x1c
c000ddd3:	5b                   	pop    ebx
c000ddd4:	5e                   	pop    esi
c000ddd5:	5f                   	pop    edi
c000ddd6:	5d                   	pop    ebp
c000ddd7:	c3                   	ret    

c000ddd8 <Video::putrect(int, int, int, int, unsigned int)>:
c000ddd8:	55                   	push   ebp
c000ddd9:	57                   	push   edi
c000ddda:	56                   	push   esi
c000dddb:	53                   	push   ebx
c000dddc:	83 ec 1c             	sub    esp,0x1c
c000dddf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dde3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dde7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddeb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ddef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddf7:	01 df                	add    edi,ebx
c000ddf9:	39 fb                	cmp    ebx,edi
c000ddfb:	7d 1f                	jge    c000de1c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ddfd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de05:	7d 12                	jge    c000de19 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de07:	8b 16                	mov    edx,DWORD PTR [esi]
c000de09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de0d:	53                   	push   ebx
c000de0e:	55                   	push   ebp
c000de0f:	45                   	inc    ebp
c000de10:	56                   	push   esi
c000de11:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de14:	83 c4 10             	add    esp,0x10
c000de17:	eb e8                	jmp    c000de01 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de19:	43                   	inc    ebx
c000de1a:	eb dd                	jmp    c000ddf9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de1c:	83 c4 1c             	add    esp,0x1c
c000de1f:	5b                   	pop    ebx
c000de20:	5e                   	pop    esi
c000de21:	5f                   	pop    edi
c000de22:	5d                   	pop    ebp
c000de23:	c3                   	ret    

c000de24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de24:	55                   	push   ebp
c000de25:	57                   	push   edi
c000de26:	31 ff                	xor    edi,edi
c000de28:	56                   	push   esi
c000de29:	53                   	push   ebx
c000de2a:	83 ec 1c             	sub    esp,0x1c
c000de2d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de35:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de3c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de45:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de49:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de4d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de50:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de54:	01 f9                	add    ecx,edi
c000de56:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de5a:	7d 2f                	jge    c000de8b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de5c:	31 f6                	xor    esi,esi
c000de5e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de62:	01 f2                	add    edx,esi
c000de64:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de68:	7d 1a                	jge    c000de84 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de6a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de6d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de70:	46                   	inc    esi
c000de71:	51                   	push   ecx
c000de72:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de76:	52                   	push   edx
c000de77:	55                   	push   ebp
c000de78:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de82:	eb da                	jmp    c000de5e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de84:	47                   	inc    edi
c000de85:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de89:	eb c5                	jmp    c000de50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de8b:	83 c4 1c             	add    esp,0x1c
c000de8e:	5b                   	pop    ebx
c000de8f:	5e                   	pop    esi
c000de90:	5f                   	pop    edi
c000de91:	5d                   	pop    ebp
c000de92:	c3                   	ret    
c000de93:	90                   	nop

c000de94 <Video::blit(unsigned int*, int, int, int, int)>:
c000de94:	55                   	push   ebp
c000de95:	57                   	push   edi
c000de96:	56                   	push   esi
c000de97:	53                   	push   ebx
c000de98:	83 ec 1c             	sub    esp,0x1c
c000de9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dea3:	85 c0                	test   eax,eax
c000dea5:	79 02                	jns    c000dea9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000dea7:	31 c0                	xor    eax,eax
c000dea9:	c1 e0 02             	shl    eax,0x2
c000deac:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000deb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000deb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000deb8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000debc:	39 d8                	cmp    eax,ebx
c000debe:	7e 49                	jle    c000df09 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dec0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dec6:	7c 41                	jl     c000df09 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dec8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000decc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ded0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ded4:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ded8:	39 f9                	cmp    ecx,edi
c000deda:	7e 22                	jle    c000defe <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dedc:	83 c5 04             	add    ebp,0x4
c000dedf:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dee5:	7c 14                	jl     c000defb <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000dee7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dee9:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000deec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000def0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000def4:	56                   	push   esi
c000def5:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000def8:	83 c4 10             	add    esp,0x10
c000defb:	47                   	inc    edi
c000defc:	eb d2                	jmp    c000ded0 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000defe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df02:	43                   	inc    ebx
c000df03:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df07:	eb ab                	jmp    c000deb4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000df09:	83 c4 1c             	add    esp,0x1c
c000df0c:	5b                   	pop    ebx
c000df0d:	5e                   	pop    esi
c000df0e:	5f                   	pop    edi
c000df0f:	5d                   	pop    ebp
c000df10:	c3                   	ret    
c000df11:	90                   	nop

c000df12 <Video::clearScreen(unsigned int)>:
c000df12:	57                   	push   edi
c000df13:	56                   	push   esi
c000df14:	53                   	push   ebx
c000df15:	31 db                	xor    ebx,ebx
c000df17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df1b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df21:	7e 1f                	jle    c000df42 <Video::clearScreen(unsigned int)+0x30>
c000df23:	31 ff                	xor    edi,edi
c000df25:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df2b:	7e 12                	jle    c000df3f <Video::clearScreen(unsigned int)+0x2d>
c000df2d:	8b 06                	mov    eax,DWORD PTR [esi]
c000df2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df33:	53                   	push   ebx
c000df34:	57                   	push   edi
c000df35:	47                   	inc    edi
c000df36:	56                   	push   esi
c000df37:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df3a:	83 c4 10             	add    esp,0x10
c000df3d:	eb e6                	jmp    c000df25 <Video::clearScreen(unsigned int)+0x13>
c000df3f:	43                   	inc    ebx
c000df40:	eb d9                	jmp    c000df1b <Video::clearScreen(unsigned int)+0x9>
c000df42:	5b                   	pop    ebx
c000df43:	5e                   	pop    esi
c000df44:	5f                   	pop    edi
c000df45:	c3                   	ret    

c000df46 <Video::putpixel(int, int, unsigned int)>:
c000df46:	c7 44 24 04 e8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206e8
c000df4e:	e9 20 29 00 00       	jmp    c0010873 <KePanic(char const*)>
c000df53:	90                   	nop

c000df54 <Video::readPixelApprox(int, int)>:
c000df54:	83 ec 18             	sub    esp,0x18
c000df57:	68 09 07 02 c0       	push   0xc0020709
c000df5c:	e8 12 29 00 00       	call   c0010873 <KePanic(char const*)>
c000df61:	31 c0                	xor    eax,eax
c000df63:	83 c4 1c             	add    esp,0x1c
c000df66:	c3                   	ret    
c000df67:	90                   	nop

c000df68 <Video::Video(char const*)>:
c000df68:	83 ec 0c             	sub    esp,0xc
c000df6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df6f:	83 ec 08             	sub    esp,0x8
c000df72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df76:	50                   	push   eax
c000df77:	e8 e6 df ff ff       	call   c000bf62 <Device::Device(char const*)>
c000df7c:	83 c4 10             	add    esp,0x10
c000df7f:	ba 84 07 02 c0       	mov    edx,0xc0020784
c000df84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df88:	89 10                	mov    DWORD PTR [eax],edx
c000df8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000df98:	90                   	nop
c000df99:	83 c4 0c             	add    esp,0xc
c000df9c:	c3                   	ret    
c000df9d:	90                   	nop

c000df9e <Video::~Video()>:
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	ba 84 07 02 c0       	mov    edx,0xc0020784
c000dfa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfaa:	89 10                	mov    DWORD PTR [eax],edx
c000dfac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	50                   	push   eax
c000dfb4:	e8 13 dd ff ff       	call   c000bccc <Device::~Device()>
c000dfb9:	83 c4 10             	add    esp,0x10
c000dfbc:	90                   	nop
c000dfbd:	83 c4 0c             	add    esp,0xc
c000dfc0:	c3                   	ret    
c000dfc1:	90                   	nop

c000dfc2 <Video::~Video()>:
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	83 ec 0c             	sub    esp,0xc
c000dfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfcc:	e8 cd ff ff ff       	call   c000df9e <Video::~Video()>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	83 ec 08             	sub    esp,0x8
c000dfd7:	68 64 01 00 00       	push   0x164
c000dfdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe0:	e8 84 c8 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c000dfe5:	83 c4 10             	add    esp,0x10
c000dfe8:	83 c4 0c             	add    esp,0xc
c000dfeb:	c3                   	ret    

c000dfec <Video::isMonochrome()>:
c000dfec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dff0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dff6:	c3                   	ret    
c000dff7:	90                   	nop

c000dff8 <Video::getWidth()>:
c000dff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dffc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e002:	c3                   	ret    
c000e003:	90                   	nop

c000e004 <Video::getHeight()>:
c000e004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e008:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e00e:	c3                   	ret    
c000e00f:	90                   	nop

c000e010 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e010:	55                   	push   ebp
c000e011:	57                   	push   edi
c000e012:	56                   	push   esi
c000e013:	53                   	push   ebx
c000e014:	83 ec 2c             	sub    esp,0x2c
c000e017:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e01b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e01f:	83 f8 01             	cmp    eax,0x1
c000e022:	19 c9                	sbb    ecx,ecx
c000e024:	31 db                	xor    ebx,ebx
c000e026:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e02a:	89 cd                	mov    ebp,ecx
c000e02c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e034:	f7 d5                	not    ebp
c000e036:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e03c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e040:	01 d8                	add    eax,ebx
c000e042:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e046:	56                   	push   esi
c000e047:	e8 b8 ff ff ff       	call   c000e004 <Video::getHeight()>
c000e04c:	59                   	pop    ecx
c000e04d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e051:	7e 70                	jle    c000e0c3 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e053:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e057:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e05b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e05e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e062:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e066:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e06d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e071:	89 f8                	mov    eax,edi
c000e073:	83 c0 20             	add    eax,0x20
c000e076:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e07a:	56                   	push   esi
c000e07b:	e8 78 ff ff ff       	call   c000dff8 <Video::getWidth()>
c000e080:	5a                   	pop    edx
c000e081:	39 c7                	cmp    edi,eax
c000e083:	7d 34                	jge    c000e0b9 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e085:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e08a:	74 05                	je     c000e091 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e08c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e08e:	55                   	push   ebp
c000e08f:	eb 0d                	jmp    c000e09e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e091:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e096:	74 12                	je     c000e0aa <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e098:	8b 06                	mov    eax,DWORD PTR [esi]
c000e09a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e09e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0a2:	57                   	push   edi
c000e0a3:	56                   	push   esi
c000e0a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0a7:	83 c4 10             	add    esp,0x10
c000e0aa:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0ae:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0b2:	47                   	inc    edi
c000e0b3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e0b7:	75 c1                	jne    c000e07a <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0b9:	43                   	inc    ebx
c000e0ba:	83 fb 20             	cmp    ebx,0x20
c000e0bd:	0f 85 79 ff ff ff    	jne    c000e03c <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0c3:	83 c4 2c             	add    esp,0x2c
c000e0c6:	5b                   	pop    ebx
c000e0c7:	5e                   	pop    esi
c000e0c8:	5f                   	pop    edi
c000e0c9:	5d                   	pop    ebp
c000e0ca:	c3                   	ret    
c000e0cb:	90                   	nop

c000e0cc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0cc:	55                   	push   ebp
c000e0cd:	57                   	push   edi
c000e0ce:	56                   	push   esi
c000e0cf:	53                   	push   ebx
c000e0d0:	83 ec 28             	sub    esp,0x28
c000e0d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0d7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0db:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e0df:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e0e3:	c1 e6 08             	shl    esi,0x8
c000e0e6:	01 c6                	add    esi,eax
c000e0e8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e0ec:	c1 e0 08             	shl    eax,0x8
c000e0ef:	01 d0                	add    eax,edx
c000e0f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0f9:	0f af c6             	imul   eax,esi
c000e0fc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e103:	50                   	push   eax
c000e104:	e8 a5 99 ff ff       	call   c0007aae <malloc>
c000e109:	83 c4 10             	add    esp,0x10
c000e10c:	89 c7                	mov    edi,eax
c000e10e:	85 c0                	test   eax,eax
c000e110:	75 10                	jne    c000e122 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e112:	83 ec 0c             	sub    esp,0xc
c000e115:	68 34 07 02 c0       	push   0xc0020734
c000e11a:	e8 54 27 00 00       	call   c0010873 <KePanic(char const*)>
c000e11f:	83 c4 10             	add    esp,0x10
c000e122:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e126:	ba 12 00 00 00       	mov    edx,0x12
c000e12b:	85 c0                	test   eax,eax
c000e12d:	74 11                	je     c000e140 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e12f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e133:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e137:	c1 fa 03             	sar    edx,0x3
c000e13a:	0f af d1             	imul   edx,ecx
c000e13d:	83 c2 12             	add    edx,0x12
c000e140:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e144:	74 04                	je     c000e14a <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e146:	85 f6                	test   esi,esi
c000e148:	75 12                	jne    c000e15c <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	68 44 07 02 c0       	push   0xc0020744
c000e152:	e8 3f c8 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000e157:	e9 b8 00 00 00       	jmp    c000e214 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e15c:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e160:	83 f9 02             	cmp    ecx,0x2
c000e163:	0f 85 96 00 00 00    	jne    c000e1ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e169:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e16e:	75 0e                	jne    c000e17e <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e170:	85 c0                	test   eax,eax
c000e172:	75 0a                	jne    c000e17e <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e174:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e177:	83 e8 18             	sub    eax,0x18
c000e17a:	a8 f7                	test   al,0xf7
c000e17c:	74 0a                	je     c000e188 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e17e:	83 ec 0c             	sub    esp,0xc
c000e181:	68 59 07 02 c0       	push   0xc0020759
c000e186:	eb 7f                	jmp    c000e207 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e188:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e190:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e198:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e19c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1a4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1a8:	75 0c                	jne    c000e1b6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e1aa:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1af:	c1 e0 18             	shl    eax,0x18
c000e1b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b6:	45                   	inc    ebp
c000e1b7:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1bc:	c1 e1 10             	shl    ecx,0x10
c000e1bf:	89 c8                	mov    eax,ecx
c000e1c1:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1c6:	c1 e1 08             	shl    ecx,0x8
c000e1c9:	09 c1                	or     ecx,eax
c000e1cb:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1cf:	09 c1                	or     ecx,eax
c000e1d1:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1d5:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e1d9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1dd:	c1 f8 03             	sar    eax,0x3
c000e1e0:	01 c2                	add    edx,eax
c000e1e2:	89 e8                	mov    eax,ebp
c000e1e4:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1e8:	39 c6                	cmp    esi,eax
c000e1ea:	7f b0                	jg     c000e19c <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e1ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e1f4:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e1f7:	7e 22                	jle    c000e21b <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e1f9:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e1fd:	eb 99                	jmp    c000e198 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e1ff:	50                   	push   eax
c000e200:	50                   	push   eax
c000e201:	51                   	push   ecx
c000e202:	68 67 07 02 c0       	push   0xc0020767
c000e207:	e8 8a c7 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000e20c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e20f:	e8 aa 98 ff ff       	call   c0007abe <free>
c000e214:	83 c4 10             	add    esp,0x10
c000e217:	31 ff                	xor    edi,edi
c000e219:	eb 0f                	jmp    c000e22a <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e21b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e21f:	89 30                	mov    DWORD PTR [eax],esi
c000e221:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e225:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e228:	89 30                	mov    DWORD PTR [eax],esi
c000e22a:	83 c4 1c             	add    esp,0x1c
c000e22d:	89 f8                	mov    eax,edi
c000e22f:	5b                   	pop    ebx
c000e230:	5e                   	pop    esi
c000e231:	5f                   	pop    edi
c000e232:	5d                   	pop    ebp
c000e233:	c3                   	ret    

c000e234 <Video::putTGA(int, int, unsigned char*, int)>:
c000e234:	55                   	push   ebp
c000e235:	57                   	push   edi
c000e236:	56                   	push   esi
c000e237:	53                   	push   ebx
c000e238:	83 ec 28             	sub    esp,0x28
c000e23b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e23f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e243:	50                   	push   eax
c000e244:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e248:	50                   	push   eax
c000e249:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e24d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e251:	56                   	push   esi
c000e252:	e8 75 fe ff ff       	call   c000e0cc <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e257:	83 c4 20             	add    esp,0x20
c000e25a:	85 c0                	test   eax,eax
c000e25c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e260:	74 35                	je     c000e297 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e262:	89 c7                	mov    edi,eax
c000e264:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e268:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e26c:	39 d8                	cmp    eax,ebx
c000e26e:	7e 27                	jle    c000e297 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e270:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e274:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e278:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e27c:	39 e8                	cmp    eax,ebp
c000e27e:	7e 14                	jle    c000e294 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e280:	8b 06                	mov    eax,DWORD PTR [esi]
c000e282:	83 c7 04             	add    edi,0x4
c000e285:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e288:	53                   	push   ebx
c000e289:	55                   	push   ebp
c000e28a:	45                   	inc    ebp
c000e28b:	56                   	push   esi
c000e28c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e28f:	83 c4 10             	add    esp,0x10
c000e292:	eb e0                	jmp    c000e274 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e294:	43                   	inc    ebx
c000e295:	eb cd                	jmp    c000e264 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e297:	83 c4 1c             	add    esp,0x1c
c000e29a:	5b                   	pop    ebx
c000e29b:	5e                   	pop    esi
c000e29c:	5f                   	pop    edi
c000e29d:	5d                   	pop    ebp
c000e29e:	c3                   	ret    
c000e29f:	90                   	nop

c000e2a0 <ACPI::close(int, int, void*)>:
c000e2a0:	83 ec 1c             	sub    esp,0x1c
c000e2a3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e2ab:	74 0b                	je     c000e2b8 <ACPI::close(int, int, void*)+0x18>
c000e2ad:	b8 00 00 00 00       	mov    eax,0x0
c000e2b2:	e9 99 00 00 00       	jmp    c000e350 <ACPI::close(int, int, void*)+0xb0>
c000e2b7:	90                   	nop
c000e2b8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2bd:	75 29                	jne    c000e2e8 <ACPI::close(int, int, void*)+0x48>
c000e2bf:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2c4:	85 c0                	test   eax,eax
c000e2c6:	74 08                	je     c000e2d0 <ACPI::close(int, int, void*)+0x30>
c000e2c8:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2cd:	ff d0                	call   eax
c000e2cf:	90                   	nop
c000e2d0:	83 ec 0c             	sub    esp,0xc
c000e2d3:	68 c8 07 02 c0       	push   0xc00207c8
c000e2d8:	e8 96 25 00 00       	call   c0010873 <KePanic(char const*)>
c000e2dd:	83 c4 10             	add    esp,0x10
c000e2e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2e5:	eb 69                	jmp    c000e350 <ACPI::close(int, int, void*)+0xb0>
c000e2e7:	90                   	nop
c000e2e8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e2ed:	75 59                	jne    c000e348 <ACPI::close(int, int, void*)+0xa8>
c000e2ef:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2f4:	85 c0                	test   eax,eax
c000e2f6:	74 08                	je     c000e300 <ACPI::close(int, int, void*)+0x60>
c000e2f8:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2fd:	ff d0                	call   eax
c000e2ff:	90                   	nop
c000e300:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e305:	8d 76 00             	lea    esi,[esi+0x0]
c000e308:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e30d:	83 e0 02             	and    eax,0x2
c000e310:	74 1e                	je     c000e330 <ACPI::close(int, int, void*)+0x90>
c000e312:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e31d:	89 c2                	mov    edx,eax
c000e31f:	ec                   	in     al,dx
c000e320:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e324:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e328:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e32c:	eb da                	jmp    c000e308 <ACPI::close(int, int, void*)+0x68>
c000e32e:	66 90                	xchg   ax,ax
c000e330:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e337:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e33c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e344:	ee                   	out    dx,al
c000e345:	8d 76 00             	lea    esi,[esi+0x0]
c000e348:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e34d:	8d 76 00             	lea    esi,[esi+0x0]
c000e350:	83 c4 1c             	add    esp,0x1c
c000e353:	c3                   	ret    

c000e354 <findRSDP()>:
c000e354:	83 ec 1c             	sub    esp,0x1c
c000e357:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e35c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e362:	83 e0 04             	and    eax,0x4
c000e365:	0f b6 c0             	movzx  eax,al
c000e368:	85 c0                	test   eax,eax
c000e36a:	75 08                	jne    c000e374 <findRSDP()+0x20>
c000e36c:	b8 00 00 00 00       	mov    eax,0x0
c000e371:	eb 75                	jmp    c000e3e8 <findRSDP()+0x94>
c000e373:	90                   	nop
c000e374:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e379:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e37e:	7f 1c                	jg     c000e39c <findRSDP()+0x48>
c000e380:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e385:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e38b:	83 e2 fb             	and    edx,0xfffffffb
c000e38e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e394:	b8 00 00 00 00       	mov    eax,0x0
c000e399:	eb 4d                	jmp    c000e3e8 <findRSDP()+0x94>
c000e39b:	90                   	nop
c000e39c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e3a4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e3ac:	77 32                	ja     c000e3e0 <findRSDP()+0x8c>
c000e3ae:	83 ec 04             	sub    esp,0x4
c000e3b1:	6a 08                	push   0x8
c000e3b3:	68 63 08 02 c0       	push   0xc0020863
c000e3b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3bc:	e8 bf 1f ff ff       	call   c0000380 <memcmp>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	85 c0                	test   eax,eax
c000e3c6:	0f 94 c0             	sete   al
c000e3c9:	0f b6 c0             	movzx  eax,al
c000e3cc:	85 c0                	test   eax,eax
c000e3ce:	74 08                	je     c000e3d8 <findRSDP()+0x84>
c000e3d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3d4:	eb 12                	jmp    c000e3e8 <findRSDP()+0x94>
c000e3d6:	66 90                	xchg   ax,ax
c000e3d8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3dd:	eb c5                	jmp    c000e3a4 <findRSDP()+0x50>
c000e3df:	90                   	nop
c000e3e0:	b8 00 00 00 00       	mov    eax,0x0
c000e3e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3e8:	83 c4 1c             	add    esp,0x1c
c000e3eb:	c3                   	ret    

c000e3ec <loadACPITables(unsigned char*)>:
c000e3ec:	57                   	push   edi
c000e3ed:	56                   	push   esi
c000e3ee:	53                   	push   ebx
c000e3ef:	83 ec 60             	sub    esp,0x60
c000e3f2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3f7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3fd:	83 e0 04             	and    eax,0x4
c000e400:	0f b6 c0             	movzx  eax,al
c000e403:	85 c0                	test   eax,eax
c000e405:	0f 84 41 02 00 00    	je     c000e64c <loadACPITables(unsigned char*)+0x260>
c000e40b:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e410:	0f b6 c0             	movzx  eax,al
c000e413:	85 c0                	test   eax,eax
c000e415:	74 79                	je     c000e490 <loadACPITables(unsigned char*)+0xa4>
c000e417:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e41b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e41f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e426:	83 e8 24             	sub    eax,0x24
c000e429:	c1 e8 03             	shr    eax,0x3
c000e42c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e430:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e438:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e43c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e440:	0f 8d ba 00 00 00    	jge    c000e500 <loadACPITables(unsigned char*)+0x114>
c000e446:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e44a:	83 c0 24             	add    eax,0x24
c000e44d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e451:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e455:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e459:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e45d:	c1 e0 03             	shl    eax,0x3
c000e460:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e464:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e46b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e46d:	89 c1                	mov    ecx,eax
c000e46f:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e474:	8d 50 01             	lea    edx,[eax+0x1]
c000e477:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e47d:	89 ca                	mov    edx,ecx
c000e47f:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e486:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e48b:	eb ab                	jmp    c000e438 <loadACPITables(unsigned char*)+0x4c>
c000e48d:	8d 76 00             	lea    esi,[esi+0x0]
c000e490:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e494:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e498:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e49c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e49f:	83 e8 24             	sub    eax,0x24
c000e4a2:	c1 e8 02             	shr    eax,0x2
c000e4a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4a9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4b8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4bc:	7d 42                	jge    c000e500 <loadACPITables(unsigned char*)+0x114>
c000e4be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4c2:	83 c0 24             	add    eax,0x24
c000e4c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4d1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4d5:	c1 e0 02             	shl    eax,0x2
c000e4d8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4e2:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4e7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ea:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4f0:	89 ca                	mov    edx,ecx
c000e4f2:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4f9:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e4fe:	eb b4                	jmp    c000e4b4 <loadACPITables(unsigned char*)+0xc8>
c000e500:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e508:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e50d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e511:	0f 8d 39 01 00 00    	jge    c000e650 <loadACPITables(unsigned char*)+0x264>
c000e517:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e51b:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e522:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e526:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e52a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e52e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e532:	25 ff 0f 00 00       	and    eax,0xfff
c000e537:	89 c6                	mov    esi,eax
c000e539:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	6a 01                	push   0x1
c000e544:	e8 d4 b0 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e549:	83 c4 10             	add    esp,0x10
c000e54c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e550:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e556:	83 ec 0c             	sub    esp,0xc
c000e559:	6a 01                	push   0x1
c000e55b:	6a 01                	push   0x1
c000e55d:	50                   	push   eax
c000e55e:	52                   	push   edx
c000e55f:	53                   	push   ebx
c000e560:	e8 b3 ba ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e565:	83 c4 20             	add    esp,0x20
c000e568:	09 f0                	or     eax,esi
c000e56a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e56e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e572:	c1 e0 03             	shl    eax,0x3
c000e575:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e57a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e57e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e582:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e586:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e58e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e592:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e596:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e59a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e59e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5a2:	89 c6                	mov    esi,eax
c000e5a4:	89 d7                	mov    edi,edx
c000e5a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5a8:	89 c8                	mov    eax,ecx
c000e5aa:	89 fa                	mov    edx,edi
c000e5ac:	89 f3                	mov    ebx,esi
c000e5ae:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e5b2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5c9:	05 00 10 00 00       	add    eax,0x1000
c000e5ce:	c1 e8 0c             	shr    eax,0xc
c000e5d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5e1:	25 ff 0f 00 00       	and    eax,0xfff
c000e5e6:	89 c6                	mov    esi,eax
c000e5e8:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5ee:	83 ec 0c             	sub    esp,0xc
c000e5f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e5f5:	e8 23 b0 ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e5fa:	83 c4 10             	add    esp,0x10
c000e5fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e601:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e607:	83 ec 0c             	sub    esp,0xc
c000e60a:	6a 01                	push   0x1
c000e60c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e610:	50                   	push   eax
c000e611:	52                   	push   edx
c000e612:	53                   	push   ebx
c000e613:	e8 00 ba ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e618:	83 c4 20             	add    esp,0x20
c000e61b:	09 f0                	or     eax,esi
c000e61d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e625:	83 ec 0c             	sub    esp,0xc
c000e628:	50                   	push   eax
c000e629:	e8 0b b3 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000e62e:	83 c4 10             	add    esp,0x10
c000e631:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e635:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e639:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e640:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e645:	e9 be fe ff ff       	jmp    c000e508 <loadACPITables(unsigned char*)+0x11c>
c000e64a:	66 90                	xchg   ax,ax
c000e64c:	90                   	nop
c000e64d:	8d 76 00             	lea    esi,[esi+0x0]
c000e650:	83 c4 60             	add    esp,0x60
c000e653:	5b                   	pop    ebx
c000e654:	5e                   	pop    esi
c000e655:	5f                   	pop    edi
c000e656:	c3                   	ret    
c000e657:	90                   	nop

c000e658 <findRSDT(unsigned char*)>:
c000e658:	57                   	push   edi
c000e659:	56                   	push   esi
c000e65a:	53                   	push   ebx
c000e65b:	83 ec 50             	sub    esp,0x50
c000e65e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e663:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e669:	83 e0 04             	and    eax,0x4
c000e66c:	0f b6 c0             	movzx  eax,al
c000e66f:	85 c0                	test   eax,eax
c000e671:	75 0d                	jne    c000e680 <findRSDT(unsigned char*)+0x28>
c000e673:	b8 00 00 00 00       	mov    eax,0x0
c000e678:	e9 2b 01 00 00       	jmp    c000e7a8 <findRSDT(unsigned char*)+0x150>
c000e67d:	8d 76 00             	lea    esi,[esi+0x0]
c000e680:	89 e0                	mov    eax,esp
c000e682:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e686:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e68a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e68e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e696:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e69a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e69e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e6a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e6a6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e6aa:	89 c6                	mov    esi,eax
c000e6ac:	89 d7                	mov    edi,edx
c000e6ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6b0:	89 c8                	mov    eax,ecx
c000e6b2:	89 fa                	mov    edx,edi
c000e6b4:	89 f3                	mov    ebx,esi
c000e6b6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6c2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6c6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6ca:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6e6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6ea:	25 ff 0f 00 00       	and    eax,0xfff
c000e6ef:	89 c6                	mov    esi,eax
c000e6f1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e6f7:	83 ec 0c             	sub    esp,0xc
c000e6fa:	6a 02                	push   0x2
c000e6fc:	e8 1c af ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e701:	83 c4 10             	add    esp,0x10
c000e704:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e708:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e70e:	83 ec 0c             	sub    esp,0xc
c000e711:	6a 01                	push   0x1
c000e713:	6a 02                	push   0x2
c000e715:	50                   	push   eax
c000e716:	52                   	push   edx
c000e717:	53                   	push   ebx
c000e718:	e8 fb b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e71d:	83 c4 20             	add    esp,0x20
c000e720:	09 f0                	or     eax,esi
c000e722:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e726:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e72a:	25 ff 0f 00 00       	and    eax,0xfff
c000e72f:	89 c6                	mov    esi,eax
c000e731:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e737:	83 ec 0c             	sub    esp,0xc
c000e73a:	6a 02                	push   0x2
c000e73c:	e8 dc ae ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c000e741:	83 c4 10             	add    esp,0x10
c000e744:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e748:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e74e:	83 ec 0c             	sub    esp,0xc
c000e751:	6a 01                	push   0x1
c000e753:	6a 02                	push   0x2
c000e755:	50                   	push   eax
c000e756:	52                   	push   edx
c000e757:	53                   	push   ebx
c000e758:	e8 bb b8 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e75d:	83 c4 20             	add    esp,0x20
c000e760:	09 f0                	or     eax,esi
c000e762:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e766:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e76b:	85 c0                	test   eax,eax
c000e76d:	75 11                	jne    c000e780 <findRSDT(unsigned char*)+0x128>
c000e76f:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e776:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e77a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e77e:	eb 24                	jmp    c000e7a4 <findRSDT(unsigned char*)+0x14c>
c000e780:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e785:	83 f8 02             	cmp    eax,0x2
c000e788:	75 12                	jne    c000e79c <findRSDT(unsigned char*)+0x144>
c000e78a:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e791:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e795:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e799:	eb 09                	jmp    c000e7a4 <findRSDT(unsigned char*)+0x14c>
c000e79b:	90                   	nop
c000e79c:	b8 00 00 00 00       	mov    eax,0x0
c000e7a1:	eb 05                	jmp    c000e7a8 <findRSDT(unsigned char*)+0x150>
c000e7a3:	90                   	nop
c000e7a4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e7a8:	83 c4 50             	add    esp,0x50
c000e7ab:	5b                   	pop    ebx
c000e7ac:	5e                   	pop    esi
c000e7ad:	5f                   	pop    edi
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <findDataTable(unsigned char*, char*)>:
c000e7b0:	83 ec 1c             	sub    esp,0x1c
c000e7b3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7b8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7be:	83 e0 04             	and    eax,0x4
c000e7c1:	0f b6 c0             	movzx  eax,al
c000e7c4:	85 c0                	test   eax,eax
c000e7c6:	75 08                	jne    c000e7d0 <findDataTable(unsigned char*, char*)+0x20>
c000e7c8:	b8 00 00 00 00       	mov    eax,0x0
c000e7cd:	eb 5d                	jmp    c000e82c <findDataTable(unsigned char*, char*)+0x7c>
c000e7cf:	90                   	nop
c000e7d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7d8:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7dd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7e1:	7d 41                	jge    c000e824 <findDataTable(unsigned char*, char*)+0x74>
c000e7e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e7:	c1 e0 03             	shl    eax,0x3
c000e7ea:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e7ef:	83 ec 04             	sub    esp,0x4
c000e7f2:	6a 04                	push   0x4
c000e7f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7f8:	50                   	push   eax
c000e7f9:	e8 82 1b ff ff       	call   c0000380 <memcmp>
c000e7fe:	83 c4 10             	add    esp,0x10
c000e801:	85 c0                	test   eax,eax
c000e803:	0f 94 c0             	sete   al
c000e806:	0f b6 c0             	movzx  eax,al
c000e809:	85 c0                	test   eax,eax
c000e80b:	74 0f                	je     c000e81c <findDataTable(unsigned char*, char*)+0x6c>
c000e80d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e811:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e818:	eb 12                	jmp    c000e82c <findDataTable(unsigned char*, char*)+0x7c>
c000e81a:	66 90                	xchg   ax,ax
c000e81c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e821:	eb b5                	jmp    c000e7d8 <findDataTable(unsigned char*, char*)+0x28>
c000e823:	90                   	nop
c000e824:	b8 00 00 00 00       	mov    eax,0x0
c000e829:	8d 76 00             	lea    esi,[esi+0x0]
c000e82c:	83 c4 1c             	add    esp,0x1c
c000e82f:	c3                   	ret    

c000e830 <scanMADT()>:
c000e830:	53                   	push   ebx
c000e831:	83 ec 38             	sub    esp,0x38
c000e834:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e839:	25 00 04 00 00       	and    eax,0x400
c000e83e:	74 14                	je     c000e854 <scanMADT()+0x24>
c000e840:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e845:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e84b:	83 e2 fb             	and    edx,0xfffffffb
c000e84e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e854:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e859:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e85f:	83 e0 04             	and    eax,0x4
c000e862:	0f b6 c0             	movzx  eax,al
c000e865:	85 c0                	test   eax,eax
c000e867:	0f 84 6b 04 00 00    	je     c000ecd8 <scanMADT()+0x4a8>
c000e86d:	e8 e2 fa ff ff       	call   c000e354 <findRSDP()>
c000e872:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e877:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e87c:	85 c0                	test   eax,eax
c000e87e:	75 1c                	jne    c000e89c <scanMADT()+0x6c>
c000e880:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e885:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e88b:	83 e2 fb             	and    edx,0xfffffffb
c000e88e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e894:	e9 47 04 00 00       	jmp    c000ece0 <scanMADT()+0x4b0>
c000e899:	8d 76 00             	lea    esi,[esi+0x0]
c000e89c:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8a1:	83 ec 0c             	sub    esp,0xc
c000e8a4:	50                   	push   eax
c000e8a5:	e8 ae fd ff ff       	call   c000e658 <findRSDT(unsigned char*)>
c000e8aa:	83 c4 10             	add    esp,0x10
c000e8ad:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8b2:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8b7:	85 c0                	test   eax,eax
c000e8b9:	75 19                	jne    c000e8d4 <scanMADT()+0xa4>
c000e8bb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8c0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8c6:	83 e2 fb             	and    edx,0xfffffffb
c000e8c9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8cf:	e9 0c 04 00 00       	jmp    c000ece0 <scanMADT()+0x4b0>
c000e8d4:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8d9:	83 ec 0c             	sub    esp,0xc
c000e8dc:	50                   	push   eax
c000e8dd:	e8 0a fb ff ff       	call   c000e3ec <loadACPITables(unsigned char*)>
c000e8e2:	83 c4 10             	add    esp,0x10
c000e8e5:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8ea:	83 ec 08             	sub    esp,0x8
c000e8ed:	68 6c 08 02 c0       	push   0xc002086c
c000e8f2:	50                   	push   eax
c000e8f3:	e8 b8 fe ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000e8f8:	83 c4 10             	add    esp,0x10
c000e8fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e8ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e904:	75 1a                	jne    c000e920 <scanMADT()+0xf0>
c000e906:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e90b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e911:	83 e2 fe             	and    edx,0xfffffffe
c000e914:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e91a:	e9 c1 03 00 00       	jmp    c000ece0 <scanMADT()+0x4b0>
c000e91f:	90                   	nop
c000e920:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e928:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e92c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e92f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e933:	0f 87 a7 03 00 00    	ja     c000ece0 <scanMADT()+0x4b0>
c000e939:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e941:	0f 87 99 03 00 00    	ja     c000ece0 <scanMADT()+0x4b0>
c000e947:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e94b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e94f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e953:	8d 50 01             	lea    edx,[eax+0x1]
c000e956:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e95a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e95e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e962:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e96a:	8d 50 01             	lea    edx,[eax+0x1]
c000e96d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e971:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e975:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e979:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e97d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e982:	83 f8 02             	cmp    eax,0x2
c000e985:	0f 86 51 03 00 00    	jbe    c000ecdc <scanMADT()+0x4ac>
c000e98b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e990:	85 c0                	test   eax,eax
c000e992:	75 58                	jne    c000e9ec <scanMADT()+0x1bc>
c000e994:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e998:	8d 50 01             	lea    edx,[eax+0x1]
c000e99b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e99f:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9a5:	0f b6 d2             	movzx  edx,dl
c000e9a8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9ac:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9b0:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ba:	8d 50 01             	lea    edx,[eax+0x1]
c000e9bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9c1:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9c7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e9ca:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e9d0:	0f b6 d2             	movzx  edx,dl
c000e9d3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9d7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9db:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9e1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9e6:	e9 d9 02 00 00       	jmp    c000ecc4 <scanMADT()+0x494>
c000e9eb:	90                   	nop
c000e9ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9f1:	83 f8 01             	cmp    eax,0x1
c000e9f4:	0f 85 1a 01 00 00    	jne    c000eb14 <scanMADT()+0x2e4>
c000e9fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9fe:	8d 50 01             	lea    edx,[eax+0x1]
c000ea01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ea05:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000ea0b:	0f b6 d2             	movzx  edx,dl
c000ea0e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ea12:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea16:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea1c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea29:	01 d0                	add    eax,edx
c000ea2b:	83 c0 2c             	add    eax,0x2c
c000ea2e:	8a 00                	mov    al,BYTE PTR [eax]
c000ea30:	0f b6 d0             	movzx  edx,al
c000ea33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea37:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea3e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea42:	0f b6 c0             	movzx  eax,al
c000ea45:	c1 e0 08             	shl    eax,0x8
c000ea48:	89 d1                	mov    ecx,edx
c000ea4a:	09 c1                	or     ecx,eax
c000ea4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea50:	8d 50 02             	lea    edx,[eax+0x2]
c000ea53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea57:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea5b:	0f b6 c0             	movzx  eax,al
c000ea5e:	c1 e0 10             	shl    eax,0x10
c000ea61:	09 c1                	or     ecx,eax
c000ea63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea67:	8d 50 03             	lea    edx,[eax+0x3]
c000ea6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea6e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea72:	0f b6 c0             	movzx  eax,al
c000ea75:	c1 e0 18             	shl    eax,0x18
c000ea78:	09 c1                	or     ecx,eax
c000ea7a:	89 ca                	mov    edx,ecx
c000ea7c:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea81:	0f b6 c0             	movzx  eax,al
c000ea84:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea8b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea98:	01 d0                	add    eax,edx
c000ea9a:	83 c0 2c             	add    eax,0x2c
c000ea9d:	8a 00                	mov    al,BYTE PTR [eax]
c000ea9f:	0f b6 d0             	movzx  edx,al
c000eaa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa6:	8d 48 01             	lea    ecx,[eax+0x1]
c000eaa9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaad:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eab1:	0f b6 c0             	movzx  eax,al
c000eab4:	c1 e0 08             	shl    eax,0x8
c000eab7:	89 d1                	mov    ecx,edx
c000eab9:	09 c1                	or     ecx,eax
c000eabb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eabf:	8d 50 02             	lea    edx,[eax+0x2]
c000eac2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaca:	0f b6 c0             	movzx  eax,al
c000eacd:	c1 e0 10             	shl    eax,0x10
c000ead0:	09 c1                	or     ecx,eax
c000ead2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ead6:	8d 50 03             	lea    edx,[eax+0x3]
c000ead9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eadd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eae1:	0f b6 c0             	movzx  eax,al
c000eae4:	c1 e0 18             	shl    eax,0x18
c000eae7:	09 c1                	or     ecx,eax
c000eae9:	89 ca                	mov    edx,ecx
c000eaeb:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eaf0:	0f b6 c0             	movzx  eax,al
c000eaf3:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eafa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaff:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eb04:	83 c0 01             	add    eax,0x1
c000eb07:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb0c:	e9 b3 01 00 00       	jmp    c000ecc4 <scanMADT()+0x494>
c000eb11:	8d 76 00             	lea    esi,[esi+0x0]
c000eb14:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb19:	83 f8 02             	cmp    eax,0x2
c000eb1c:	0f 85 ea 00 00 00    	jne    c000ec0c <scanMADT()+0x3dc>
c000eb22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb26:	8d 50 01             	lea    edx,[eax+0x1]
c000eb29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb31:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb35:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb3d:	8d 50 01             	lea    edx,[eax+0x1]
c000eb40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb48:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb4c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb58:	01 d0                	add    eax,edx
c000eb5a:	83 c0 2c             	add    eax,0x2c
c000eb5d:	8a 00                	mov    al,BYTE PTR [eax]
c000eb5f:	0f b6 d0             	movzx  edx,al
c000eb62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb66:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb69:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb6d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb71:	0f b6 c0             	movzx  eax,al
c000eb74:	c1 e0 08             	shl    eax,0x8
c000eb77:	89 d1                	mov    ecx,edx
c000eb79:	09 c1                	or     ecx,eax
c000eb7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb7f:	8d 50 02             	lea    edx,[eax+0x2]
c000eb82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb8a:	0f b6 c0             	movzx  eax,al
c000eb8d:	c1 e0 10             	shl    eax,0x10
c000eb90:	09 c1                	or     ecx,eax
c000eb92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb96:	8d 50 03             	lea    edx,[eax+0x3]
c000eb99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb9d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eba1:	0f b6 c0             	movzx  eax,al
c000eba4:	c1 e0 18             	shl    eax,0x18
c000eba7:	09 c8                	or     eax,ecx
c000eba9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ebb2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebba:	01 d0                	add    eax,edx
c000ebbc:	83 c0 2c             	add    eax,0x2c
c000ebbf:	8a 00                	mov    al,BYTE PTR [eax]
c000ebc1:	0f b6 c0             	movzx  eax,al
c000ebc4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebc8:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ebcb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebcf:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ebd3:	0f b6 d2             	movzx  edx,dl
c000ebd6:	c1 e2 08             	shl    edx,0x8
c000ebd9:	09 d0                	or     eax,edx
c000ebdb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebe0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebe5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebee:	88 90 a0 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde160],dl
c000ebf4:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ebf9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ebfe:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ec06:	e9 b9 00 00 00       	jmp    c000ecc4 <scanMADT()+0x494>
c000ec0b:	90                   	nop
c000ec0c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec11:	83 f8 04             	cmp    eax,0x4
c000ec14:	0f 85 9a 00 00 00    	jne    c000ecb4 <scanMADT()+0x484>
c000ec1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec1e:	8d 50 01             	lea    edx,[eax+0x1]
c000ec21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec29:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec2d:	0f b6 c0             	movzx  eax,al
c000ec30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec3c:	01 d0                	add    eax,edx
c000ec3e:	83 c0 2c             	add    eax,0x2c
c000ec41:	8a 00                	mov    al,BYTE PTR [eax]
c000ec43:	0f b6 d0             	movzx  edx,al
c000ec46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec4a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec51:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec55:	0f b6 c0             	movzx  eax,al
c000ec58:	c1 e0 08             	shl    eax,0x8
c000ec5b:	09 d0                	or     eax,edx
c000ec5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec61:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec6a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec75:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec79:	0f b6 c0             	movzx  eax,al
c000ec7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec84:	c1 e0 08             	shl    eax,0x8
c000ec87:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec8b:	89 c1                	mov    ecx,eax
c000ec8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec91:	c1 e0 18             	shl    eax,0x18
c000ec94:	89 c3                	mov    ebx,eax
c000ec96:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ec9b:	8d 50 01             	lea    edx,[eax+0x1]
c000ec9e:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000eca4:	09 d9                	or     ecx,ebx
c000eca6:	89 ca                	mov    edx,ecx
c000eca8:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ecaf:	eb 13                	jmp    c000ecc4 <scanMADT()+0x494>
c000ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ecb9:	83 f8 05             	cmp    eax,0x5
c000ecbc:	75 06                	jne    c000ecc4 <scanMADT()+0x494>
c000ecbe:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecc3:	90                   	nop
c000ecc4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ecc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eccd:	01 d0                	add    eax,edx
c000eccf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ecd3:	e9 50 fc ff ff       	jmp    c000e928 <scanMADT()+0xf8>
c000ecd8:	90                   	nop
c000ecd9:	eb 05                	jmp    c000ece0 <scanMADT()+0x4b0>
c000ecdb:	90                   	nop
c000ecdc:	90                   	nop
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ece0:	83 c4 38             	add    esp,0x38
c000ece3:	5b                   	pop    ebx
c000ece4:	c3                   	ret    
c000ece5:	90                   	nop
c000ece6:	66 90                	xchg   ax,ax

c000ece8 <ACPI::ACPI()>:
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecef:	83 ec 08             	sub    esp,0x8
c000ecf2:	68 71 08 02 c0       	push   0xc0020871
c000ecf7:	50                   	push   eax
c000ecf8:	e8 65 d2 ff ff       	call   c000bf62 <Device::Device(char const*)>
c000ecfd:	83 c4 10             	add    esp,0x10
c000ed00:	ba a8 09 02 c0       	mov    edx,0xc00209a8
c000ed05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed09:	89 10                	mov    DWORD PTR [eax],edx
c000ed0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed0f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed1a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed28:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed32:	e8 f9 fa ff ff       	call   c000e830 <scanMADT()>
c000ed37:	90                   	nop
c000ed38:	83 c4 0c             	add    esp,0xc
c000ed3b:	c3                   	ret    

c000ed3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed3c:	83 ec 2c             	sub    esp,0x2c
c000ed3f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed47:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed4b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed4f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed54:	88 d0                	mov    al,dl
c000ed56:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed5f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed67:	90                   	nop
c000ed68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed6c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed72:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed76:	0f 8d b0 00 00 00    	jge    c000ee2c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ed7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed84:	83 c2 2a             	add    edx,0x2a
c000ed87:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed8b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000ed90:	0f b7 c0             	movzx  eax,ax
c000ed93:	39 c2                	cmp    edx,eax
c000ed95:	0f 85 85 00 00 00    	jne    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ed9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eda3:	83 c2 2a             	add    edx,0x2a
c000eda6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000edaa:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000edaf:	0f b6 c0             	movzx  eax,al
c000edb2:	39 c2                	cmp    edx,eax
c000edb4:	75 6a                	jne    c000ee20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000edb6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000edbb:	85 c0                	test   eax,eax
c000edbd:	74 3d                	je     c000edfc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000edbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc7:	83 c2 2a             	add    edx,0x2a
c000edca:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edd5:	39 c2                	cmp    edx,eax
c000edd7:	74 13                	je     c000edec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000edd9:	83 ec 0c             	sub    esp,0xc
c000eddc:	68 ec 07 02 c0       	push   0xc00207ec
c000ede1:	e8 8d 1a 00 00       	call   c0010873 <KePanic(char const*)>
c000ede6:	83 c4 10             	add    esp,0x10
c000ede9:	8d 76 00             	lea    esi,[esi+0x0]
c000edec:	83 ec 0c             	sub    esp,0xc
c000edef:	68 76 08 02 c0       	push   0xc0020876
c000edf4:	e8 7a 1a 00 00       	call   c0010873 <KePanic(char const*)>
c000edf9:	83 c4 10             	add    esp,0x10
c000edfc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee08:	83 c2 2a             	add    edx,0x2a
c000ee0b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee0f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee11:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee14:	89 01                	mov    DWORD PTR [ecx],eax
c000ee16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee19:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee1e:	66 90                	xchg   ax,ax
c000ee20:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee25:	e9 3e ff ff ff       	jmp    c000ed68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee2a:	66 90                	xchg   ax,ax
c000ee2c:	90                   	nop
c000ee2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee31:	83 c4 2c             	add    esp,0x2c
c000ee34:	c2 04 00             	ret    0x4
c000ee37:	90                   	nop

c000ee38 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee38:	83 ec 1c             	sub    esp,0x1c
c000ee3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee3f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee47:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee4c:	88 c8                	mov    al,cl
c000ee4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee52:	88 d0                	mov    al,dl
c000ee54:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee5c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee66:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee69:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee6d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee75:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee7f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ee82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee86:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ee8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee95:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ee99:	83 c0 01             	add    eax,0x1
c000ee9c:	88 c1                	mov    cl,al
c000ee9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea2:	83 c2 2a             	add    edx,0x2a
c000eea5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eead:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eeba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eebe:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eecc:	8d 50 01             	lea    edx,[eax+0x1]
c000eecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eedd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eee3:	3d 00 02 00 00       	cmp    eax,0x200
c000eee8:	75 12                	jne    c000eefc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eeea:	83 ec 0c             	sub    esp,0xc
c000eeed:	68 85 08 02 c0       	push   0xc0020885
c000eef2:	e8 7c 19 00 00       	call   c0010873 <KePanic(char const*)>
c000eef7:	83 c4 10             	add    esp,0x10
c000eefa:	66 90                	xchg   ax,ax
c000eefc:	90                   	nop
c000eefd:	83 c4 1c             	add    esp,0x1c
c000ef00:	c3                   	ret    
c000ef01:	90                   	nop
c000ef02:	66 90                	xchg   ax,ax

c000ef04 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef04:	b8 00 00 00 00       	mov    eax,0x0
c000ef09:	c3                   	ret    
c000ef0a:	66 90                	xchg   ax,ax

c000ef0c <ACPI::detectPCI()>:
c000ef0c:	53                   	push   ebx
c000ef0d:	83 ec 28             	sub    esp,0x28
c000ef10:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef15:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef1a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef1f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef25:	83 e0 04             	and    eax,0x4
c000ef28:	0f b6 c0             	movzx  eax,al
c000ef2b:	85 c0                	test   eax,eax
c000ef2d:	74 2d                	je     c000ef5c <ACPI::detectPCI()+0x50>
c000ef2f:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef34:	83 ec 08             	sub    esp,0x8
c000ef37:	68 a2 08 02 c0       	push   0xc00208a2
c000ef3c:	50                   	push   eax
c000ef3d:	e8 6e f8 ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000ef42:	83 c4 10             	add    esp,0x10
c000ef45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef49:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef4e:	74 0c                	je     c000ef5c <ACPI::detectPCI()+0x50>
c000ef50:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef55:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef5a:	66 90                	xchg   ax,ax
c000ef5c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef68:	8a 00                	mov    al,BYTE PTR [eax]
c000ef6a:	0f b6 c0             	movzx  eax,al
c000ef6d:	83 f8 01             	cmp    eax,0x1
c000ef70:	75 0e                	jne    c000ef80 <ACPI::detectPCI()+0x74>
c000ef72:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef77:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef7c:	eb 2e                	jmp    c000efac <ACPI::detectPCI()+0xa0>
c000ef7e:	66 90                	xchg   ax,ax
c000ef80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef84:	8a 00                	mov    al,BYTE PTR [eax]
c000ef86:	0f b6 c0             	movzx  eax,al
c000ef89:	83 f8 02             	cmp    eax,0x2
c000ef8c:	75 1e                	jne    c000efac <ACPI::detectPCI()+0xa0>
c000ef8e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef93:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ef98:	85 c0                	test   eax,eax
c000ef9a:	74 10                	je     c000efac <ACPI::detectPCI()+0xa0>
c000ef9c:	83 ec 0c             	sub    esp,0xc
c000ef9f:	68 1c 08 02 c0       	push   0xc002081c
c000efa4:	e8 ca 18 00 00       	call   c0010873 <KePanic(char const*)>
c000efa9:	83 c4 10             	add    esp,0x10
c000efac:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000efb0:	83 f0 01             	xor    eax,0x1
c000efb3:	0f b6 c0             	movzx  eax,al
c000efb6:	85 c0                	test   eax,eax
c000efb8:	74 46                	je     c000f000 <ACPI::detectPCI()+0xf4>
c000efba:	e8 71 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efbf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efc3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efc8:	75 0e                	jne    c000efd8 <ACPI::detectPCI()+0xcc>
c000efca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efcf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efd4:	eb 2a                	jmp    c000f000 <ACPI::detectPCI()+0xf4>
c000efd6:	66 90                	xchg   ax,ax
c000efd8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efdd:	75 21                	jne    c000f000 <ACPI::detectPCI()+0xf4>
c000efdf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efe4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efe9:	85 c0                	test   eax,eax
c000efeb:	74 13                	je     c000f000 <ACPI::detectPCI()+0xf4>
c000efed:	83 ec 0c             	sub    esp,0xc
c000eff0:	68 1c 08 02 c0       	push   0xc002081c
c000eff5:	e8 79 18 00 00       	call   c0010873 <KePanic(char const*)>
c000effa:	83 c4 10             	add    esp,0x10
c000effd:	8d 76 00             	lea    esi,[esi+0x0]
c000f000:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f005:	85 c0                	test   eax,eax
c000f007:	0f 84 87 00 00 00    	je     c000f094 <ACPI::detectPCI()+0x188>
c000f00d:	83 ec 0c             	sub    esp,0xc
c000f010:	68 a7 08 02 c0       	push   0xc00208a7
c000f015:	e8 dc 11 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c000f01a:	83 c4 10             	add    esp,0x10
c000f01d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f025:	83 ec 0c             	sub    esp,0xc
c000f028:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f02c:	e8 7d 8a ff ff       	call   c0007aae <malloc>
c000f031:	83 c4 10             	add    esp,0x10
c000f034:	89 c3                	mov    ebx,eax
c000f036:	83 ec 0c             	sub    esp,0xc
c000f039:	53                   	push   ebx
c000f03a:	e8 d1 af 00 00       	call   c001a010 <PCI::PCI()>
c000f03f:	83 c4 10             	add    esp,0x10
c000f042:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f046:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f04a:	83 ec 08             	sub    esp,0x8
c000f04d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f051:	50                   	push   eax
c000f052:	e8 73 cd ff ff       	call   c000bdca <Device::addChild(Device*)>
c000f057:	83 c4 10             	add    esp,0x10
c000f05a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f05e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f060:	83 c0 08             	add    eax,0x8
c000f063:	8b 00                	mov    eax,DWORD PTR [eax]
c000f065:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f06a:	85 d2                	test   edx,edx
c000f06c:	74 0a                	je     c000f078 <ACPI::detectPCI()+0x16c>
c000f06e:	ba 01 00 00 00       	mov    edx,0x1
c000f073:	eb 0b                	jmp    c000f080 <ACPI::detectPCI()+0x174>
c000f075:	8d 76 00             	lea    esi,[esi+0x0]
c000f078:	ba 02 00 00 00       	mov    edx,0x2
c000f07d:	8d 76 00             	lea    esi,[esi+0x0]
c000f080:	6a 00                	push   0x0
c000f082:	6a 00                	push   0x0
c000f084:	52                   	push   edx
c000f085:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f089:	ff d0                	call   eax
c000f08b:	83 c4 10             	add    esp,0x10
c000f08e:	e9 91 00 00 00       	jmp    c000f124 <ACPI::detectPCI()+0x218>
c000f093:	90                   	nop
c000f094:	83 ec 0c             	sub    esp,0xc
c000f097:	68 bf 08 02 c0       	push   0xc00208bf
c000f09c:	e8 55 11 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c000f0a1:	83 c4 10             	add    esp,0x10
c000f0a4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f0ab:	83 ec 0c             	sub    esp,0xc
c000f0ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f0b2:	e8 f7 89 ff ff       	call   c0007aae <malloc>
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	89 c3                	mov    ebx,eax
c000f0bc:	83 ec 0c             	sub    esp,0xc
c000f0bf:	53                   	push   ebx
c000f0c0:	e8 e5 ba 00 00       	call   c001abaa <IDE::IDE()>
c000f0c5:	83 c4 10             	add    esp,0x10
c000f0c8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0d0:	83 ec 08             	sub    esp,0x8
c000f0d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0d7:	50                   	push   eax
c000f0d8:	e8 ed cc ff ff       	call   c000bdca <Device::addChild(Device*)>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f2:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ff:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f10c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f10e:	83 c0 08             	add    eax,0x8
c000f111:	8b 00                	mov    eax,DWORD PTR [eax]
c000f113:	6a 00                	push   0x0
c000f115:	6a 00                	push   0x0
c000f117:	6a 00                	push   0x0
c000f119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f11d:	ff d0                	call   eax
c000f11f:	83 c4 10             	add    esp,0x10
c000f122:	66 90                	xchg   ax,ax
c000f124:	90                   	nop
c000f125:	83 c4 28             	add    esp,0x28
c000f128:	5b                   	pop    ebx
c000f129:	c3                   	ret    
c000f12a:	66 90                	xchg   ax,ax

c000f12c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f12c:	83 ec 1c             	sub    esp,0x1c
c000f12f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f133:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f136:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f13a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f13f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f144:	83 ec 08             	sub    esp,0x8
c000f147:	52                   	push   edx
c000f148:	50                   	push   eax
c000f149:	e8 22 80 ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f14e:	83 c4 10             	add    esp,0x10
c000f151:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f155:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f15a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f15f:	83 ec 04             	sub    esp,0x4
c000f162:	6a 01                	push   0x1
c000f164:	52                   	push   edx
c000f165:	50                   	push   eax
c000f166:	e8 1f 81 ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f16b:	83 c4 10             	add    esp,0x10
c000f16e:	90                   	nop
c000f16f:	83 c4 1c             	add    esp,0x1c
c000f172:	c3                   	ret    
c000f173:	90                   	nop

c000f174 <ACPI::sleep()>:
c000f174:	83 ec 0c             	sub    esp,0xc
c000f177:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f17c:	85 c0                	test   eax,eax
c000f17e:	74 08                	je     c000f188 <ACPI::sleep()+0x14>
c000f180:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f185:	ff d0                	call   eax
c000f187:	90                   	nop
c000f188:	90                   	nop
c000f189:	83 c4 0c             	add    esp,0xc
c000f18c:	c3                   	ret    
c000f18d:	90                   	nop
c000f18e:	66 90                	xchg   ax,ax

c000f190 <ACPI::open(int, int, void*)>:
c000f190:	57                   	push   edi
c000f191:	56                   	push   esi
c000f192:	53                   	push   ebx
c000f193:	81 ec 70 01 00 00    	sub    esp,0x170
c000f199:	83 ec 0c             	sub    esp,0xc
c000f19c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f1a3:	e8 64 fd ff ff       	call   c000ef0c <ACPI::detectPCI()>
c000f1a8:	83 c4 10             	add    esp,0x10
c000f1ab:	83 ec 0c             	sub    esp,0xc
c000f1ae:	68 44 08 02 c0       	push   0xc0020844
c000f1b3:	e8 3e 10 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c000f1b8:	83 c4 10             	add    esp,0x10
c000f1bb:	83 ec 0c             	sub    esp,0xc
c000f1be:	68 d4 08 02 c0       	push   0xc00208d4
c000f1c3:	e8 88 49 00 00       	call   c0013b50 <Thr::loadKernelSymbolTable(char const*)>
c000f1c8:	83 c4 10             	add    esp,0x10
c000f1cb:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f1d3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1de:	83 ec 0c             	sub    esp,0xc
c000f1e1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1e8:	e8 c1 88 ff ff       	call   c0007aae <malloc>
c000f1ed:	83 c4 10             	add    esp,0x10
c000f1f0:	89 c3                	mov    ebx,eax
c000f1f2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f1f7:	83 ec 04             	sub    esp,0x4
c000f1fa:	50                   	push   eax
c000f1fb:	68 f2 08 02 c0       	push   0xc00208f2
c000f200:	53                   	push   ebx
c000f201:	e8 12 bd ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000f206:	83 c4 10             	add    esp,0x10
c000f209:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f210:	83 ec 08             	sub    esp,0x8
c000f213:	6a 01                	push   0x1
c000f215:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f21c:	e8 b3 bd ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c000f221:	83 c4 10             	add    esp,0x10
c000f224:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f22b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f233:	75 17                	jne    c000f24c <ACPI::open(int, int, void*)+0xbc>
c000f235:	83 ec 0c             	sub    esp,0xc
c000f238:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f23f:	e8 ee bd ff ff       	call   c000b032 <File::close()>
c000f244:	83 c4 10             	add    esp,0x10
c000f247:	eb 0b                	jmp    c000f254 <ACPI::open(int, int, void*)+0xc4>
c000f249:	8d 76 00             	lea    esi,[esi+0x0]
c000f24c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f254:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f25c:	74 1e                	je     c000f27c <ACPI::open(int, int, void*)+0xec>
c000f25e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f265:	8b 00                	mov    eax,DWORD PTR [eax]
c000f267:	83 c0 08             	add    eax,0x8
c000f26a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f26c:	83 ec 0c             	sub    esp,0xc
c000f26f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f276:	ff d0                	call   eax
c000f278:	83 c4 10             	add    esp,0x10
c000f27b:	90                   	nop
c000f27c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f283:	83 f0 01             	xor    eax,0x1
c000f286:	0f b6 c0             	movzx  eax,al
c000f289:	85 c0                	test   eax,eax
c000f28b:	74 43                	je     c000f2d0 <ACPI::open(int, int, void*)+0x140>
c000f28d:	83 ec 0c             	sub    esp,0xc
c000f290:	68 10 09 02 c0       	push   0xc0020910
c000f295:	e8 5c 0f 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c000f29a:	83 c4 10             	add    esp,0x10
c000f29d:	83 ec 04             	sub    esp,0x4
c000f2a0:	6a 0c                	push   0xc
c000f2a2:	68 2b 09 02 c0       	push   0xc002092b
c000f2a7:	68 3c 09 02 c0       	push   0xc002093c
c000f2ac:	e8 4b 3c 00 00       	call   c0012efc <Reg::readIntWithDefault(char*, char*, int)>
c000f2b1:	83 c4 10             	add    esp,0x10
c000f2b4:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f2bb:	83 ec 0c             	sub    esp,0xc
c000f2be:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f2c5:	e8 82 a5 ff ff       	call   c000984c <Virt::setupPageSwapping(int)>
c000f2ca:	83 c4 10             	add    esp,0x10
c000f2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f2d0:	83 ec 0c             	sub    esp,0xc
c000f2d3:	68 95 f9 01 c0       	push   0xc001f995
c000f2d8:	e8 19 0f 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c000f2dd:	83 c4 10             	add    esp,0x10
c000f2e0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2e7:	83 ec 08             	sub    esp,0x8
c000f2ea:	6a 13                	push   0x13
c000f2ec:	50                   	push   eax
c000f2ed:	e8 f0 cd ff ff       	call   c000c0e2 <getDevicesOfType(DeviceType)>
c000f2f2:	83 c4 0c             	add    esp,0xc
c000f2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2f8:	83 ec 0c             	sub    esp,0xc
c000f2fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f302:	50                   	push   eax
c000f303:	e8 88 fa 00 00       	call   c001ed90 <LinkedList<Device>::isEmpty()>
c000f308:	83 c4 10             	add    esp,0x10
c000f30b:	83 f0 01             	xor    eax,0x1
c000f30e:	0f b6 c0             	movzx  eax,al
c000f311:	85 c0                	test   eax,eax
c000f313:	0f 84 47 01 00 00    	je     c000f460 <ACPI::open(int, int, void*)+0x2d0>
c000f319:	83 ec 0c             	sub    esp,0xc
c000f31c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f323:	50                   	push   eax
c000f324:	e8 83 fa 00 00       	call   c001edac <LinkedList<Device>::getFirstElement()>
c000f329:	83 c4 10             	add    esp,0x10
c000f32c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f333:	83 ec 0c             	sub    esp,0xc
c000f336:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f33d:	50                   	push   eax
c000f33e:	e8 71 fa 00 00       	call   c001edb4 <LinkedList<Device>::removeFirst()>
c000f343:	83 c4 10             	add    esp,0x10
c000f346:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f34d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f354:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f35b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f35f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f365:	ba 09 00 00 00       	mov    edx,0x9
c000f36a:	fc                   	cld    
c000f36b:	89 c7                	mov    edi,eax
c000f36d:	89 de                	mov    esi,ebx
c000f36f:	89 d1                	mov    ecx,edx
c000f371:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f373:	83 ec 08             	sub    esp,0x8
c000f376:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f37a:	50                   	push   eax
c000f37b:	83 ec 24             	sub    esp,0x24
c000f37e:	89 e0                	mov    eax,esp
c000f380:	89 c3                	mov    ebx,eax
c000f382:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f386:	ba 09 00 00 00       	mov    edx,0x9
c000f38b:	89 df                	mov    edi,ebx
c000f38d:	89 c6                	mov    esi,eax
c000f38f:	89 d1                	mov    ecx,edx
c000f391:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f393:	e8 62 b1 00 00       	call   c001a4fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f398:	83 c4 30             	add    esp,0x30
c000f39b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f3a2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f3aa:	0f 84 48 ff ff ff    	je     c000f2f8 <ACPI::open(int, int, void*)+0x168>
c000f3b0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f3bb:	83 ec 0c             	sub    esp,0xc
c000f3be:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f3c5:	e8 e4 86 ff ff       	call   c0007aae <malloc>
c000f3ca:	83 c4 10             	add    esp,0x10
c000f3cd:	89 c3                	mov    ebx,eax
c000f3cf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3d4:	83 ec 04             	sub    esp,0x4
c000f3d7:	50                   	push   eax
c000f3d8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3df:	53                   	push   ebx
c000f3e0:	e8 33 bb ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3ef:	83 ec 0c             	sub    esp,0xc
c000f3f2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3f9:	e8 44 be ff ff       	call   c000b242 <File::exists()>
c000f3fe:	83 c4 10             	add    esp,0x10
c000f401:	0f b6 c0             	movzx  eax,al
c000f404:	85 c0                	test   eax,eax
c000f406:	74 28                	je     c000f430 <ACPI::open(int, int, void*)+0x2a0>
c000f408:	83 ec 08             	sub    esp,0x8
c000f40b:	6a 01                	push   0x1
c000f40d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f414:	e8 b1 51 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c000f419:	83 c4 10             	add    esp,0x10
c000f41c:	83 ec 08             	sub    esp,0x8
c000f41f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f426:	50                   	push   eax
c000f427:	e8 cf 53 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c000f42c:	83 c4 10             	add    esp,0x10
c000f42f:	90                   	nop
c000f430:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f438:	0f 84 ba fe ff ff    	je     c000f2f8 <ACPI::open(int, int, void*)+0x168>
c000f43e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f445:	8b 00                	mov    eax,DWORD PTR [eax]
c000f447:	83 c0 08             	add    eax,0x8
c000f44a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f44c:	83 ec 0c             	sub    esp,0xc
c000f44f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f456:	ff d0                	call   eax
c000f458:	83 c4 10             	add    esp,0x10
c000f45b:	e9 98 fe ff ff       	jmp    c000f2f8 <ACPI::open(int, int, void*)+0x168>
c000f460:	83 ec 0c             	sub    esp,0xc
c000f463:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f46a:	50                   	push   eax
c000f46b:	e8 1c f9 00 00       	call   c001ed8c <LinkedList<Device>::~LinkedList()>
c000f470:	83 c4 10             	add    esp,0x10
c000f473:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f479:	83 ec 08             	sub    esp,0x8
c000f47c:	6a 01                	push   0x1
c000f47e:	68 43 09 02 c0       	push   0xc0020943
c000f483:	e8 42 51 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c000f488:	83 c4 10             	add    esp,0x10
c000f48b:	83 ec 08             	sub    esp,0x8
c000f48e:	53                   	push   ebx
c000f48f:	50                   	push   eax
c000f490:	e8 66 53 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c000f495:	83 c4 10             	add    esp,0x10
c000f498:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f49d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f4a3:	83 e0 04             	and    eax,0x4
c000f4a6:	0f b6 c0             	movzx  eax,al
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	0f 84 1b 01 00 00    	je     c000f5cc <ACPI::open(int, int, void*)+0x43c>
c000f4b1:	83 ec 0c             	sub    esp,0xc
c000f4b4:	68 60 09 02 c0       	push   0xc0020960
c000f4b9:	e8 38 0d 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c000f4be:	83 c4 10             	add    esp,0x10
c000f4c1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f4cc:	83 ec 0c             	sub    esp,0xc
c000f4cf:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f4d6:	e8 d3 85 ff ff       	call   c0007aae <malloc>
c000f4db:	83 c4 10             	add    esp,0x10
c000f4de:	89 c3                	mov    ebx,eax
c000f4e0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4e5:	83 ec 04             	sub    esp,0x4
c000f4e8:	50                   	push   eax
c000f4e9:	68 7d 09 02 c0       	push   0xc002097d
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 24 ba ff ff       	call   c000af18 <File::File(char const*, Process*)>
c000f4f4:	83 c4 10             	add    esp,0x10
c000f4f7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f4fe:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f506:	74 20                	je     c000f528 <ACPI::open(int, int, void*)+0x398>
c000f508:	83 ec 0c             	sub    esp,0xc
c000f50b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f512:	e8 2b bd ff ff       	call   c000b242 <File::exists()>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	0f b6 c0             	movzx  eax,al
c000f51d:	85 c0                	test   eax,eax
c000f51f:	74 07                	je     c000f528 <ACPI::open(int, int, void*)+0x398>
c000f521:	b0 01                	mov    al,0x1
c000f523:	eb 07                	jmp    c000f52c <ACPI::open(int, int, void*)+0x39c>
c000f525:	8d 76 00             	lea    esi,[esi+0x0]
c000f528:	b0 00                	mov    al,0x0
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	0f b6 c0             	movzx  eax,al
c000f52f:	85 c0                	test   eax,eax
c000f531:	74 25                	je     c000f558 <ACPI::open(int, int, void*)+0x3c8>
c000f533:	83 ec 08             	sub    esp,0x8
c000f536:	6a 01                	push   0x1
c000f538:	68 7d 09 02 c0       	push   0xc002097d
c000f53d:	e8 88 50 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c000f542:	83 c4 10             	add    esp,0x10
c000f545:	83 ec 08             	sub    esp,0x8
c000f548:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f54f:	50                   	push   eax
c000f550:	e8 a6 52 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f560:	74 2a                	je     c000f58c <ACPI::open(int, int, void*)+0x3fc>
c000f562:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f56a:	74 20                	je     c000f58c <ACPI::open(int, int, void*)+0x3fc>
c000f56c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f573:	8b 00                	mov    eax,DWORD PTR [eax]
c000f575:	83 c0 08             	add    eax,0x8
c000f578:	8b 00                	mov    eax,DWORD PTR [eax]
c000f57a:	83 ec 0c             	sub    esp,0xc
c000f57d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f584:	ff d0                	call   eax
c000f586:	83 c4 10             	add    esp,0x10
c000f589:	8d 76 00             	lea    esi,[esi+0x0]
c000f58c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f591:	83 ec 08             	sub    esp,0x8
c000f594:	68 9a 09 02 c0       	push   0xc002099a
c000f599:	50                   	push   eax
c000f59a:	e8 11 f2 ff ff       	call   c000e7b0 <findDataTable(unsigned char*, char*)>
c000f59f:	83 c4 10             	add    esp,0x10
c000f5a2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f5a9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f5b1:	74 19                	je     c000f5cc <ACPI::open(int, int, void*)+0x43c>
c000f5b3:	83 ec 08             	sub    esp,0x8
c000f5b6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f5bd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f5c4:	e8 63 fb ff ff       	call   c000f12c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5c9:	83 c4 10             	add    esp,0x10
c000f5cc:	b8 00 00 00 00       	mov    eax,0x0
c000f5d1:	81 c4 70 01 00 00    	add    esp,0x170
c000f5d7:	5b                   	pop    ebx
c000f5d8:	5e                   	pop    esi
c000f5d9:	5f                   	pop    edi
c000f5da:	c3                   	ret    
c000f5db:	90                   	nop

c000f5dc <CPU::close(int, int, void*)>:
c000f5dc:	31 c0                	xor    eax,eax
c000f5de:	c3                   	ret    
c000f5df:	90                   	nop

c000f5e0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5e0:	60                   	pusha  
c000f5e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5ed:	9c                   	pushf  
c000f5ee:	fa                   	cli    
c000f5ef:	0f 09                	wbinvd 
c000f5f1:	0f 30                	wrmsr  
c000f5f3:	9d                   	popf   
c000f5f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5f8:	89 02                	mov    DWORD PTR [edx],eax
c000f5fa:	61                   	popa   
c000f5fb:	c3                   	ret    

c000f5fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5fc:	60                   	pusha  
c000f5fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f601:	9c                   	pushf  
c000f602:	fa                   	cli    
c000f603:	0f 09                	wbinvd 
c000f605:	31 c0                	xor    eax,eax
c000f607:	31 d2                	xor    edx,edx
c000f609:	0f 32                	rdmsr  
c000f60b:	9d                   	popf   
c000f60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f610:	89 02                	mov    DWORD PTR [edx],eax
c000f612:	61                   	popa   
c000f613:	c3                   	ret    

c000f614 <CPU::AMD_K6_writeback(int, int, int)>:
c000f614:	56                   	push   esi
c000f615:	53                   	push   ebx
c000f616:	83 ec 10             	sub    esp,0x10
c000f619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f61d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f622:	75 5d                	jne    c000f681 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f624:	83 f8 08             	cmp    eax,0x8
c000f627:	75 09                	jne    c000f632 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f629:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f62e:	7e 13                	jle    c000f643 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f630:	eb 30                	jmp    c000f662 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f632:	83 f8 06             	cmp    eax,0x6
c000f635:	7c 4a                	jl     c000f681 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f637:	83 f8 07             	cmp    eax,0x7
c000f63a:	7e 07                	jle    c000f643 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f63c:	83 f8 09             	cmp    eax,0x9
c000f63f:	74 21                	je     c000f662 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f641:	eb 3e                	jmp    c000f681 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f643:	89 e6                	mov    esi,esp
c000f645:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f64b:	56                   	push   esi
c000f64c:	c1 eb 15             	shr    ebx,0x15
c000f64f:	68 82 00 00 c0       	push   0xc0000082
c000f654:	83 e3 7e             	and    ebx,0x7e
c000f657:	e8 a0 ff ff ff       	call   c000f5fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f65c:	56                   	push   esi
c000f65d:	6a 00                	push   0x0
c000f65f:	53                   	push   ebx
c000f660:	eb 12                	jmp    c000f674 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f662:	89 e3                	mov    ebx,esp
c000f664:	53                   	push   ebx
c000f665:	68 82 00 00 c0       	push   0xc0000082
c000f66a:	e8 8d ff ff ff       	call   c000f5fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f66f:	53                   	push   ebx
c000f670:	6a 00                	push   0x0
c000f672:	6a 00                	push   0x0
c000f674:	68 82 00 00 c0       	push   0xc0000082
c000f679:	e8 62 ff ff ff       	call   c000f5e0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f67e:	83 c4 18             	add    esp,0x18
c000f681:	83 c4 10             	add    esp,0x10
c000f684:	5b                   	pop    ebx
c000f685:	5e                   	pop    esi
c000f686:	c3                   	ret    
c000f687:	90                   	nop

c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f688:	55                   	push   ebp
c000f689:	57                   	push   edi
c000f68a:	56                   	push   esi
c000f68b:	53                   	push   ebx
c000f68c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f690:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f694:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f698:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f69c:	39 05 b0 1e 02 c0    	cmp    DWORD PTR ds:0xc0021eb0,eax
c000f6a2:	75 23                	jne    c000f6c7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f6a4:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f6a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6ad:	89 06                	mov    DWORD PTR [esi],eax
c000f6af:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f6b4:	89 07                	mov    DWORD PTR [edi],eax
c000f6b6:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f6bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6be:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f6c3:	89 02                	mov    DWORD PTR [edx],eax
c000f6c5:	eb 3f                	jmp    c000f706 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6c7:	31 c9                	xor    ecx,ecx
c000f6c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6cd:	0f a2                	cpuid  
c000f6cf:	89 06                	mov    DWORD PTR [esi],eax
c000f6d1:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6d7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6da:	89 10                	mov    DWORD PTR [eax],edx
c000f6dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6e0:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c000f6e5:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6e7:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6ec:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6ee:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6f6:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000f701:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f706:	5b                   	pop    ebx
c000f707:	5e                   	pop    esi
c000f708:	5f                   	pop    edi
c000f709:	5d                   	pop    ebp
c000f70a:	c3                   	ret    
c000f70b:	90                   	nop

c000f70c <CPU::cpuidCheckEDX(unsigned int)>:
c000f70c:	83 ec 10             	sub    esp,0x10
c000f70f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f713:	50                   	push   eax
c000f714:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f718:	50                   	push   eax
c000f719:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71d:	50                   	push   eax
c000f71e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f722:	50                   	push   eax
c000f723:	6a 01                	push   0x1
c000f725:	e8 5e ff ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f72a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f72e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f732:	0f 95 c0             	setne  al
c000f735:	83 c4 24             	add    esp,0x24
c000f738:	c3                   	ret    
c000f739:	90                   	nop

c000f73a <CPU::cpuidCheckECX(unsigned int)>:
c000f73a:	83 ec 10             	sub    esp,0x10
c000f73d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f741:	50                   	push   eax
c000f742:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f746:	50                   	push   eax
c000f747:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74b:	50                   	push   eax
c000f74c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f750:	50                   	push   eax
c000f751:	6a 01                	push   0x1
c000f753:	e8 30 ff ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f758:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f75c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f760:	0f 95 c0             	setne  al
c000f763:	83 c4 24             	add    esp,0x24
c000f766:	c3                   	ret    
c000f767:	90                   	nop

c000f768 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f768:	83 ec 10             	sub    esp,0x10
c000f76b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76f:	50                   	push   eax
c000f770:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f774:	50                   	push   eax
c000f775:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f779:	50                   	push   eax
c000f77a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f77e:	50                   	push   eax
c000f77f:	6a 07                	push   0x7
c000f781:	e8 02 ff ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f786:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f78a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f78e:	0f 95 c0             	setne  al
c000f791:	83 c4 24             	add    esp,0x24
c000f794:	c3                   	ret    
c000f795:	90                   	nop

c000f796 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f796:	83 ec 10             	sub    esp,0x10
c000f799:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79d:	50                   	push   eax
c000f79e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a2:	50                   	push   eax
c000f7a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7a7:	50                   	push   eax
c000f7a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f7ac:	50                   	push   eax
c000f7ad:	6a 07                	push   0x7
c000f7af:	e8 d4 fe ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7b8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7bc:	0f 95 c0             	setne  al
c000f7bf:	83 c4 24             	add    esp,0x24
c000f7c2:	c3                   	ret    
c000f7c3:	90                   	nop

c000f7c4 <CPU::CPU()>:
c000f7c4:	83 ec 0c             	sub    esp,0xc
c000f7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7cb:	83 ec 08             	sub    esp,0x8
c000f7ce:	68 bd 0a 02 c0       	push   0xc0020abd
c000f7d3:	50                   	push   eax
c000f7d4:	e8 89 c7 ff ff       	call   c000bf62 <Device::Device(char const*)>
c000f7d9:	83 c4 10             	add    esp,0x10
c000f7dc:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c000f7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e5:	89 10                	mov    DWORD PTR [eax],edx
c000f7e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7eb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7f9:	05 78 01 00 00       	add    eax,0x178
c000f7fe:	83 ec 0c             	sub    esp,0xc
c000f801:	50                   	push   eax
c000f802:	e8 4d 7b ff ff       	call   c0007354 <GDT::GDT()>
c000f807:	83 c4 10             	add    esp,0x10
c000f80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f80e:	05 7c 09 00 00       	add    eax,0x97c
c000f813:	83 ec 0c             	sub    esp,0xc
c000f816:	50                   	push   eax
c000f817:	e8 88 7d ff ff       	call   c00075a4 <IDT::IDT()>
c000f81c:	83 c4 10             	add    esp,0x10
c000f81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f823:	05 7c 11 00 00       	add    eax,0x117c
c000f828:	83 ec 0c             	sub    esp,0xc
c000f82b:	50                   	push   eax
c000f82c:	e8 23 97 ff ff       	call   c0008f54 <TSS::TSS()>
c000f831:	83 c4 10             	add    esp,0x10
c000f834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f838:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f843:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f84d:	90                   	nop
c000f84e:	83 c4 0c             	add    esp,0xc
c000f851:	c3                   	ret    

c000f852 <CPU::displayFeatures()>:
c000f852:	c3                   	ret    
c000f853:	90                   	nop

c000f854 <CPU::detectFeatures()>:
c000f854:	55                   	push   ebp
c000f855:	57                   	push   edi
c000f856:	56                   	push   esi
c000f857:	53                   	push   ebx
c000f858:	83 ec 30             	sub    esp,0x30
c000f85b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f85f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f869:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f870:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f876:	6a 0d                	push   0xd
c000f878:	6a 00                	push   0x0
c000f87a:	55                   	push   ebp
c000f87b:	e8 70 0c ff ff       	call   c00004f0 <memset>
c000f880:	83 c4 10             	add    esp,0x10
c000f883:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f888:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f88f:	0f 84 db 05 00 00    	je     c000fe70 <CPU::detectFeatures()+0x61c>
c000f895:	83 ec 0c             	sub    esp,0xc
c000f898:	89 ef                	mov    edi,ebp
c000f89a:	6a 10                	push   0x10
c000f89c:	e8 6b fe ff ff       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c000f8a1:	83 e0 01             	and    eax,0x1
c000f8a4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ad:	83 e0 fd             	and    eax,0xfffffffd
c000f8b0:	09 d0                	or     eax,edx
c000f8b2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8b8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8bf:	e8 48 fe ff ff       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c000f8c4:	83 e0 01             	and    eax,0x1
c000f8c7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8ce:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8d4:	83 e0 fb             	and    eax,0xfffffffb
c000f8d7:	09 d0                	or     eax,edx
c000f8d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8df:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8e6:	e8 21 fe ff ff       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c000f8eb:	83 e0 01             	and    eax,0x1
c000f8ee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8f5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8fb:	83 e0 f7             	and    eax,0xfffffff7
c000f8fe:	09 d0                	or     eax,edx
c000f900:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f906:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f90d:	e8 fa fd ff ff       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c000f912:	83 e0 01             	and    eax,0x1
c000f915:	c1 e0 04             	shl    eax,0x4
c000f918:	89 c2                	mov    edx,eax
c000f91a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f920:	83 e0 ef             	and    eax,0xffffffef
c000f923:	09 d0                	or     eax,edx
c000f925:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f92b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f932:	e8 d5 fd ff ff       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c000f937:	83 e0 01             	and    eax,0x1
c000f93a:	c1 e0 05             	shl    eax,0x5
c000f93d:	89 c2                	mov    edx,eax
c000f93f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f945:	83 e0 df             	and    eax,0xffffffdf
c000f948:	09 d0                	or     eax,edx
c000f94a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f950:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f957:	e8 b0 fd ff ff       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c000f95c:	83 e0 01             	and    eax,0x1
c000f95f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f962:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f968:	83 e0 fd             	and    eax,0xfffffffd
c000f96b:	09 d0                	or     eax,edx
c000f96d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f973:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f97a:	e8 8d fd ff ff       	call   c000f70c <CPU::cpuidCheckEDX(unsigned int)>
c000f97f:	83 e0 01             	and    eax,0x1
c000f982:	c1 e0 06             	shl    eax,0x6
c000f985:	89 c2                	mov    edx,eax
c000f987:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f98d:	83 e0 bf             	and    eax,0xffffffbf
c000f990:	09 d0                	or     eax,edx
c000f992:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f998:	58                   	pop    eax
c000f999:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f99d:	50                   	push   eax
c000f99e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9a2:	50                   	push   eax
c000f9a3:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f9a7:	56                   	push   esi
c000f9a8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9ac:	50                   	push   eax
c000f9ad:	6a 00                	push   0x0
c000f9af:	e8 d4 fc ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9b4:	b8 04 00 00 00       	mov    eax,0x4
c000f9b9:	89 c1                	mov    ecx,eax
c000f9bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9bd:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9c3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9c7:	89 c1                	mov    ecx,eax
c000f9c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9cb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9d1:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9d5:	89 c1                	mov    ecx,eax
c000f9d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9d9:	83 c4 18             	add    esp,0x18
c000f9dc:	68 cc 09 02 c0       	push   0xc00209cc
c000f9e1:	55                   	push   ebp
c000f9e2:	e8 69 0d ff ff       	call   c0000750 <strcmp>
c000f9e7:	83 c4 10             	add    esp,0x10
c000f9ea:	85 c0                	test   eax,eax
c000f9ec:	75 0f                	jne    c000f9fd <CPU::detectFeatures()+0x1a9>
c000f9ee:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9f8:	e9 22 02 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000f9fd:	50                   	push   eax
c000f9fe:	50                   	push   eax
c000f9ff:	68 d9 09 02 c0       	push   0xc00209d9
c000fa04:	55                   	push   ebp
c000fa05:	e8 46 0d ff ff       	call   c0000750 <strcmp>
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	85 c0                	test   eax,eax
c000fa0f:	74 dd                	je     c000f9ee <CPU::detectFeatures()+0x19a>
c000fa11:	50                   	push   eax
c000fa12:	50                   	push   eax
c000fa13:	68 e6 09 02 c0       	push   0xc00209e6
c000fa18:	55                   	push   ebp
c000fa19:	e8 32 0d ff ff       	call   c0000750 <strcmp>
c000fa1e:	83 c4 10             	add    esp,0x10
c000fa21:	85 c0                	test   eax,eax
c000fa23:	74 2a                	je     c000fa4f <CPU::detectFeatures()+0x1fb>
c000fa25:	50                   	push   eax
c000fa26:	50                   	push   eax
c000fa27:	68 f3 09 02 c0       	push   0xc00209f3
c000fa2c:	55                   	push   ebp
c000fa2d:	e8 1e 0d ff ff       	call   c0000750 <strcmp>
c000fa32:	83 c4 10             	add    esp,0x10
c000fa35:	85 c0                	test   eax,eax
c000fa37:	74 16                	je     c000fa4f <CPU::detectFeatures()+0x1fb>
c000fa39:	50                   	push   eax
c000fa3a:	50                   	push   eax
c000fa3b:	68 00 0a 02 c0       	push   0xc0020a00
c000fa40:	55                   	push   ebp
c000fa41:	e8 0a 0d ff ff       	call   c0000750 <strcmp>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	74 48                	je     c000fa95 <CPU::detectFeatures()+0x241>
c000fa4d:	eb 0f                	jmp    c000fa5e <CPU::detectFeatures()+0x20a>
c000fa4f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa59:	e9 c1 01 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fa5e:	50                   	push   eax
c000fa5f:	50                   	push   eax
c000fa60:	68 0d 0a 02 c0       	push   0xc0020a0d
c000fa65:	55                   	push   ebp
c000fa66:	e8 e5 0c ff ff       	call   c0000750 <strcmp>
c000fa6b:	83 c4 10             	add    esp,0x10
c000fa6e:	85 c0                	test   eax,eax
c000fa70:	74 23                	je     c000fa95 <CPU::detectFeatures()+0x241>
c000fa72:	57                   	push   edi
c000fa73:	57                   	push   edi
c000fa74:	68 1a 0a 02 c0       	push   0xc0020a1a
c000fa79:	55                   	push   ebp
c000fa7a:	e8 d1 0c ff ff       	call   c0000750 <strcmp>
c000fa7f:	83 c4 10             	add    esp,0x10
c000fa82:	85 c0                	test   eax,eax
c000fa84:	75 1e                	jne    c000faa4 <CPU::detectFeatures()+0x250>
c000fa86:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa90:	e9 8a 01 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fa95:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa9f:	e9 7b 01 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000faa4:	56                   	push   esi
c000faa5:	56                   	push   esi
c000faa6:	68 27 0a 02 c0       	push   0xc0020a27
c000faab:	55                   	push   ebp
c000faac:	e8 9f 0c ff ff       	call   c0000750 <strcmp>
c000fab1:	83 c4 10             	add    esp,0x10
c000fab4:	85 c0                	test   eax,eax
c000fab6:	75 0f                	jne    c000fac7 <CPU::detectFeatures()+0x273>
c000fab8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fac2:	e9 58 01 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fac7:	51                   	push   ecx
c000fac8:	51                   	push   ecx
c000fac9:	68 e6 09 02 c0       	push   0xc00209e6
c000face:	55                   	push   ebp
c000facf:	e8 7c 0c ff ff       	call   c0000750 <strcmp>
c000fad4:	83 c4 10             	add    esp,0x10
c000fad7:	85 c0                	test   eax,eax
c000fad9:	75 0f                	jne    c000faea <CPU::detectFeatures()+0x296>
c000fadb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fae5:	e9 35 01 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000faea:	52                   	push   edx
c000faeb:	52                   	push   edx
c000faec:	68 34 0a 02 c0       	push   0xc0020a34
c000faf1:	55                   	push   ebp
c000faf2:	e8 59 0c ff ff       	call   c0000750 <strcmp>
c000faf7:	83 c4 10             	add    esp,0x10
c000fafa:	85 c0                	test   eax,eax
c000fafc:	75 0f                	jne    c000fb0d <CPU::detectFeatures()+0x2b9>
c000fafe:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fb08:	e9 12 01 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fb0d:	50                   	push   eax
c000fb0e:	50                   	push   eax
c000fb0f:	68 41 0a 02 c0       	push   0xc0020a41
c000fb14:	55                   	push   ebp
c000fb15:	e8 36 0c ff ff       	call   c0000750 <strcmp>
c000fb1a:	83 c4 10             	add    esp,0x10
c000fb1d:	85 c0                	test   eax,eax
c000fb1f:	75 0f                	jne    c000fb30 <CPU::detectFeatures()+0x2dc>
c000fb21:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb2b:	e9 ef 00 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fb30:	50                   	push   eax
c000fb31:	50                   	push   eax
c000fb32:	68 4e 0a 02 c0       	push   0xc0020a4e
c000fb37:	55                   	push   ebp
c000fb38:	e8 13 0c ff ff       	call   c0000750 <strcmp>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	85 c0                	test   eax,eax
c000fb42:	75 0f                	jne    c000fb53 <CPU::detectFeatures()+0x2ff>
c000fb44:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb4e:	e9 cc 00 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fb53:	50                   	push   eax
c000fb54:	50                   	push   eax
c000fb55:	68 5b 0a 02 c0       	push   0xc0020a5b
c000fb5a:	55                   	push   ebp
c000fb5b:	e8 f0 0b ff ff       	call   c0000750 <strcmp>
c000fb60:	83 c4 10             	add    esp,0x10
c000fb63:	85 c0                	test   eax,eax
c000fb65:	75 0f                	jne    c000fb76 <CPU::detectFeatures()+0x322>
c000fb67:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb71:	e9 a9 00 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fb76:	50                   	push   eax
c000fb77:	50                   	push   eax
c000fb78:	68 68 0a 02 c0       	push   0xc0020a68
c000fb7d:	55                   	push   ebp
c000fb7e:	e8 cd 0b ff ff       	call   c0000750 <strcmp>
c000fb83:	83 c4 10             	add    esp,0x10
c000fb86:	85 c0                	test   eax,eax
c000fb88:	75 0f                	jne    c000fb99 <CPU::detectFeatures()+0x345>
c000fb8a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb94:	e9 86 00 00 00       	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fb99:	50                   	push   eax
c000fb9a:	50                   	push   eax
c000fb9b:	68 75 0a 02 c0       	push   0xc0020a75
c000fba0:	55                   	push   ebp
c000fba1:	e8 aa 0b ff ff       	call   c0000750 <strcmp>
c000fba6:	83 c4 10             	add    esp,0x10
c000fba9:	85 c0                	test   eax,eax
c000fbab:	75 0c                	jne    c000fbb9 <CPU::detectFeatures()+0x365>
c000fbad:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fbb7:	eb 66                	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fbb9:	50                   	push   eax
c000fbba:	50                   	push   eax
c000fbbb:	68 82 0a 02 c0       	push   0xc0020a82
c000fbc0:	55                   	push   ebp
c000fbc1:	e8 8a 0b ff ff       	call   c0000750 <strcmp>
c000fbc6:	83 c4 10             	add    esp,0x10
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	75 0c                	jne    c000fbd9 <CPU::detectFeatures()+0x385>
c000fbcd:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbd7:	eb 46                	jmp    c000fc1f <CPU::detectFeatures()+0x3cb>
c000fbd9:	57                   	push   edi
c000fbda:	57                   	push   edi
c000fbdb:	68 8f 0a 02 c0       	push   0xc0020a8f
c000fbe0:	55                   	push   ebp
c000fbe1:	e8 6a 0b ff ff       	call   c0000750 <strcmp>
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	85 c0                	test   eax,eax
c000fbeb:	74 e0                	je     c000fbcd <CPU::detectFeatures()+0x379>
c000fbed:	56                   	push   esi
c000fbee:	56                   	push   esi
c000fbef:	68 9c 0a 02 c0       	push   0xc0020a9c
c000fbf4:	55                   	push   ebp
c000fbf5:	e8 56 0b ff ff       	call   c0000750 <strcmp>
c000fbfa:	83 c4 10             	add    esp,0x10
c000fbfd:	85 c0                	test   eax,eax
c000fbff:	74 cc                	je     c000fbcd <CPU::detectFeatures()+0x379>
c000fc01:	51                   	push   ecx
c000fc02:	51                   	push   ecx
c000fc03:	68 a9 0a 02 c0       	push   0xc0020aa9
c000fc08:	55                   	push   ebp
c000fc09:	e8 42 0b ff ff       	call   c0000750 <strcmp>
c000fc0e:	83 c4 10             	add    esp,0x10
c000fc11:	85 c0                	test   eax,eax
c000fc13:	74 b8                	je     c000fbcd <CPU::detectFeatures()+0x379>
c000fc15:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc1f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc24:	0f 86 be 00 00 00    	jbe    c000fce8 <CPU::detectFeatures()+0x494>
c000fc2a:	83 ec 0c             	sub    esp,0xc
c000fc2d:	68 80 00 00 00       	push   0x80
c000fc32:	e8 31 fb ff ff       	call   c000f768 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc37:	83 e0 01             	and    eax,0x1
c000fc3a:	c1 e0 06             	shl    eax,0x6
c000fc3d:	89 c2                	mov    edx,eax
c000fc3f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc45:	83 e0 bf             	and    eax,0xffffffbf
c000fc48:	09 d0                	or     eax,edx
c000fc4a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc50:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc57:	e8 0c fb ff ff       	call   c000f768 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc5c:	83 e0 01             	and    eax,0x1
c000fc5f:	c1 e0 04             	shl    eax,0x4
c000fc62:	89 c2                	mov    edx,eax
c000fc64:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc6a:	83 e0 ef             	and    eax,0xffffffef
c000fc6d:	09 d0                	or     eax,edx
c000fc6f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc75:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc7c:	e8 e7 fa ff ff       	call   c000f768 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc81:	89 c2                	mov    edx,eax
c000fc83:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc89:	c1 e2 07             	shl    edx,0x7
c000fc8c:	83 e0 7f             	and    eax,0x7f
c000fc8f:	09 d0                	or     eax,edx
c000fc91:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc97:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc9e:	e8 f3 fa ff ff       	call   c000f796 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fca3:	83 e0 01             	and    eax,0x1
c000fca6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fcad:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fcb3:	83 e0 f7             	and    eax,0xfffffff7
c000fcb6:	09 d0                	or     eax,edx
c000fcb8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcbe:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fcc5:	e8 cc fa ff ff       	call   c000f796 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcca:	83 c4 10             	add    esp,0x10
c000fccd:	83 e0 01             	and    eax,0x1
c000fcd0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcd7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcdd:	83 e0 fb             	and    eax,0xfffffffb
c000fce0:	09 d0                	or     eax,edx
c000fce2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fce8:	83 ec 0c             	sub    esp,0xc
c000fceb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcef:	50                   	push   eax
c000fcf0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcf4:	50                   	push   eax
c000fcf5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcf9:	57                   	push   edi
c000fcfa:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcfe:	56                   	push   esi
c000fcff:	6a 01                	push   0x1
c000fd01:	e8 82 f9 ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fd0a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fd10:	89 c1                	mov    ecx,eax
c000fd12:	83 e2 f0             	and    edx,0xfffffff0
c000fd15:	83 e1 0f             	and    ecx,0xf
c000fd18:	09 ca                	or     edx,ecx
c000fd1a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd20:	89 c2                	mov    edx,eax
c000fd22:	c1 ea 04             	shr    edx,0x4
c000fd25:	83 e2 0f             	and    edx,0xf
c000fd28:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fd2c:	89 d1                	mov    ecx,edx
c000fd2e:	83 c4 20             	add    esp,0x20
c000fd31:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd37:	c1 e1 06             	shl    ecx,0x6
c000fd3a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd40:	09 ca                	or     edx,ecx
c000fd42:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd49:	89 c2                	mov    edx,eax
c000fd4b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd51:	c1 ea 08             	shr    edx,0x8
c000fd54:	83 e1 3f             	and    ecx,0x3f
c000fd57:	83 e2 0f             	and    edx,0xf
c000fd5a:	89 d5                	mov    ebp,edx
c000fd5c:	83 e5 03             	and    ebp,0x3
c000fd5f:	c1 e5 06             	shl    ebp,0x6
c000fd62:	09 e9                	or     ecx,ebp
c000fd64:	89 d5                	mov    ebp,edx
c000fd66:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd6c:	c1 ed 02             	shr    ebp,0x2
c000fd6f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd75:	83 e1 c0             	and    ecx,0xffffffc0
c000fd78:	09 e9                	or     ecx,ebp
c000fd7a:	89 c5                	mov    ebp,eax
c000fd7c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd82:	c1 ed 08             	shr    ebp,0x8
c000fd85:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd8b:	83 e5 30             	and    ebp,0x30
c000fd8e:	83 e1 cf             	and    ecx,0xffffffcf
c000fd91:	09 e9                	or     ecx,ebp
c000fd93:	83 fa 06             	cmp    edx,0x6
c000fd96:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd9c:	74 05                	je     c000fda3 <CPU::detectFeatures()+0x54f>
c000fd9e:	83 fa 0f             	cmp    edx,0xf
c000fda1:	75 64                	jne    c000fe07 <CPU::detectFeatures()+0x5b3>
c000fda3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fda9:	89 c1                	mov    ecx,eax
c000fdab:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fdb1:	c1 e9 10             	shr    ecx,0x10
c000fdb4:	c1 e1 04             	shl    ecx,0x4
c000fdb7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fdbb:	0f b6 c9             	movzx  ecx,cl
c000fdbe:	c1 e1 06             	shl    ecx,0x6
c000fdc1:	09 e9                	or     ecx,ebp
c000fdc3:	83 fa 0f             	cmp    edx,0xf
c000fdc6:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fdcd:	75 38                	jne    c000fe07 <CPU::detectFeatures()+0x5b3>
c000fdcf:	c1 e8 14             	shr    eax,0x14
c000fdd2:	83 c0 0f             	add    eax,0xf
c000fdd5:	0f b6 c0             	movzx  eax,al
c000fdd8:	89 c2                	mov    edx,eax
c000fdda:	c1 e8 02             	shr    eax,0x2
c000fddd:	83 e2 03             	and    edx,0x3
c000fde0:	89 d1                	mov    ecx,edx
c000fde2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fde8:	c1 e1 06             	shl    ecx,0x6
c000fdeb:	83 e2 3f             	and    edx,0x3f
c000fdee:	09 ca                	or     edx,ecx
c000fdf0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdf6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdfc:	83 e2 c0             	and    edx,0xffffffc0
c000fdff:	09 d0                	or     eax,edx
c000fe01:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fe07:	83 ec 0c             	sub    esp,0xc
c000fe0a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe10:	83 c8 07             	or     eax,0x7
c000fe13:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe19:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe1d:	50                   	push   eax
c000fe1e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe22:	55                   	push   ebp
c000fe23:	57                   	push   edi
c000fe24:	56                   	push   esi
c000fe25:	68 00 00 00 80       	push   0x80000000
c000fe2a:	e8 59 f8 ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe2f:	83 c4 20             	add    esp,0x20
c000fe32:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe3a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe3e:	76 1e                	jbe    c000fe5e <CPU::detectFeatures()+0x60a>
c000fe40:	83 ec 0c             	sub    esp,0xc
c000fe43:	50                   	push   eax
c000fe44:	55                   	push   ebp
c000fe45:	57                   	push   edi
c000fe46:	56                   	push   esi
c000fe47:	68 01 00 00 80       	push   0x80000001
c000fe4c:	e8 37 f8 ff ff       	call   c000f688 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe51:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe5b:	83 c4 20             	add    esp,0x20
c000fe5e:	52                   	push   edx
c000fe5f:	52                   	push   edx
c000fe60:	68 b5 0a 02 c0       	push   0xc0020ab5
c000fe65:	53                   	push   ebx
c000fe66:	e8 e9 c0 ff ff       	call   c000bf54 <Device::setName(char const*)>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	eb 69                	jmp    c000fed9 <CPU::detectFeatures()+0x685>
c000fe70:	50                   	push   eax
c000fe71:	50                   	push   eax
c000fe72:	68 1a 0a 02 c0       	push   0xc0020a1a
c000fe77:	55                   	push   ebp
c000fe78:	e8 c3 07 ff ff       	call   c0000640 <strcpy>
c000fe7d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe87:	e8 37 03 ff ff       	call   c00001c3 <is486>
c000fe8c:	83 c4 10             	add    esp,0x10
c000fe8f:	85 c0                	test   eax,eax
c000fe91:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe97:	74 1f                	je     c000feb8 <CPU::detectFeatures()+0x664>
c000fe99:	83 c8 07             	or     eax,0x7
c000fe9c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fea2:	0f 20 c0             	mov    eax,cr0
c000fea5:	83 e0 14             	and    eax,0x14
c000fea8:	83 f8 04             	cmp    eax,0x4
c000feab:	75 10                	jne    c000febd <CPU::detectFeatures()+0x669>
c000fead:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feb3:	83 e0 fd             	and    eax,0xfffffffd
c000feb6:	eb 1b                	jmp    c000fed3 <CPU::detectFeatures()+0x67f>
c000feb8:	83 e0 f8             	and    eax,0xfffffff8
c000febb:	eb df                	jmp    c000fe9c <CPU::detectFeatures()+0x648>
c000febd:	e8 dc 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fec2:	83 e0 01             	and    eax,0x1
c000fec5:	8d 14 00             	lea    edx,[eax+eax*1]
c000fec8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fece:	83 e0 fd             	and    eax,0xfffffffd
c000fed1:	09 d0                	or     eax,edx
c000fed3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fed9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fee0:	74 17                	je     c000fef9 <CPU::detectFeatures()+0x6a5>
c000fee2:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fee8:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000feee:	83 c8 10             	or     eax,0x10
c000fef1:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fef7:	eb 20                	jmp    c000ff19 <CPU::detectFeatures()+0x6c5>
c000fef9:	e8 a0 02 ff ff       	call   c000019e <hasLegacyFPU>
c000fefe:	83 e0 01             	and    eax,0x1
c000ff01:	8d 14 00             	lea    edx,[eax+eax*1]
c000ff04:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ff0a:	83 e0 fd             	and    eax,0xfffffffd
c000ff0d:	09 d0                	or     eax,edx
c000ff0f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff15:	a8 02                	test   al,0x2
c000ff17:	75 c9                	jne    c000fee2 <CPU::detectFeatures()+0x68e>
c000ff19:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff20:	83 c4 2c             	add    esp,0x2c
c000ff23:	5b                   	pop    ebx
c000ff24:	5e                   	pop    esi
c000ff25:	5f                   	pop    edi
c000ff26:	5d                   	pop    ebp
c000ff27:	c3                   	ret    

c000ff28 <CPU::setupSMEP()>:
c000ff28:	0f 20 e0             	mov    eax,cr4
c000ff2b:	0d 00 00 10 00       	or     eax,0x100000
c000ff30:	0f 22 e0             	mov    cr4,eax
c000ff33:	c3                   	ret    

c000ff34 <CPU::setupUMIP()>:
c000ff34:	0f 20 e0             	mov    eax,cr4
c000ff37:	80 cc 08             	or     ah,0x8
c000ff3a:	0f 22 e0             	mov    cr4,eax
c000ff3d:	c3                   	ret    

c000ff3e <CPU::setupTSC()>:
c000ff3e:	0f 20 e0             	mov    eax,cr4
c000ff41:	83 c8 04             	or     eax,0x4
c000ff44:	0f 22 e0             	mov    cr4,eax
c000ff47:	c3                   	ret    

c000ff48 <CPU::setupLargePages()>:
c000ff48:	0f 20 e0             	mov    eax,cr4
c000ff4b:	83 c8 10             	or     eax,0x10
c000ff4e:	0f 22 e0             	mov    cr4,eax
c000ff51:	c3                   	ret    

c000ff52 <CPU::setupPAT()>:
c000ff52:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff57:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff5e:	74 2c                	je     c000ff8c <CPU::setupPAT()+0x3a>
c000ff60:	53                   	push   ebx
c000ff61:	83 ec 10             	sub    esp,0x10
c000ff64:	68 77 02 00 00       	push   0x277
c000ff69:	50                   	push   eax
c000ff6a:	e8 49 71 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c000ff6f:	83 e2 f8             	and    edx,0xfffffff8
c000ff72:	83 ca 01             	or     edx,0x1
c000ff75:	52                   	push   edx
c000ff76:	50                   	push   eax
c000ff77:	68 77 02 00 00       	push   0x277
c000ff7c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff82:	e8 5d 71 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff87:	83 c4 28             	add    esp,0x28
c000ff8a:	5b                   	pop    ebx
c000ff8b:	c3                   	ret    
c000ff8c:	c3                   	ret    
c000ff8d:	90                   	nop

c000ff8e <CPU::setupMTRR()>:
c000ff8e:	c3                   	ret    
c000ff8f:	90                   	nop

c000ff90 <CPU::setupGlobalPages()>:
c000ff90:	0f 20 e0             	mov    eax,cr4
c000ff93:	0c 80                	or     al,0x80
c000ff95:	0f 22 e0             	mov    cr4,eax
c000ff98:	c3                   	ret    
c000ff99:	90                   	nop

c000ff9a <CPU::allowUsermodeDataAccess()>:
c000ff9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff9e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffa5:	74 03                	je     c000ffaa <CPU::allowUsermodeDataAccess()+0x10>
c000ffa7:	0f 01 cb             	stac   
c000ffaa:	c3                   	ret    
c000ffab:	90                   	nop

c000ffac <CPU::prohibitUsermodeDataAccess()>:
c000ffac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffb0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffb7:	74 03                	je     c000ffbc <CPU::prohibitUsermodeDataAccess()+0x10>
c000ffb9:	0f 01 ca             	clac   
c000ffbc:	c3                   	ret    
c000ffbd:	90                   	nop

c000ffbe <CPU::setupSMAP()>:
c000ffbe:	0f 20 e0             	mov    eax,cr4
c000ffc1:	0d 00 00 20 00       	or     eax,0x200000
c000ffc6:	0f 22 e0             	mov    cr4,eax
c000ffc9:	eb e1                	jmp    c000ffac <CPU::prohibitUsermodeDataAccess()>
c000ffcb:	90                   	nop

c000ffcc <CPU::setupFeatures()>:
c000ffcc:	53                   	push   ebx
c000ffcd:	83 ec 08             	sub    esp,0x8
c000ffd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffd4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffdb:	74 18                	je     c000fff5 <CPU::setupFeatures()+0x29>
c000ffdd:	83 ec 0c             	sub    esp,0xc
c000ffe0:	68 c1 0a 02 c0       	push   0xc0020ac1
c000ffe5:	e8 ac a9 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c000ffea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffed:	e8 42 ff ff ff       	call   c000ff34 <CPU::setupUMIP()>
c000fff2:	83 c4 10             	add    esp,0x10
c000fff5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fffc:	74 18                	je     c0010016 <CPU::setupFeatures()+0x4a>
c000fffe:	83 ec 0c             	sub    esp,0xc
c0010001:	68 cb 0a 02 c0       	push   0xc0020acb
c0010006:	e8 8b a9 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001000b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001000e:	e8 2b ff ff ff       	call   c000ff3e <CPU::setupTSC()>
c0010013:	83 c4 10             	add    esp,0x10
c0010016:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001001d:	74 18                	je     c0010037 <CPU::setupFeatures()+0x6b>
c001001f:	83 ec 0c             	sub    esp,0xc
c0010022:	68 d4 0a 02 c0       	push   0xc0020ad4
c0010027:	e8 6a a9 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001002c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001002f:	e8 14 ff ff ff       	call   c000ff48 <CPU::setupLargePages()>
c0010034:	83 c4 10             	add    esp,0x10
c0010037:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001003e:	74 18                	je     c0010058 <CPU::setupFeatures()+0x8c>
c0010040:	83 ec 0c             	sub    esp,0xc
c0010043:	68 dd 0a 02 c0       	push   0xc0020add
c0010048:	e8 49 a9 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001004d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010050:	e8 3b ff ff ff       	call   c000ff90 <CPU::setupGlobalPages()>
c0010055:	83 c4 10             	add    esp,0x10
c0010058:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001005f:	74 18                	je     c0010079 <CPU::setupFeatures()+0xad>
c0010061:	83 ec 0c             	sub    esp,0xc
c0010064:	68 ef 0a 02 c0       	push   0xc0020aef
c0010069:	e8 28 a9 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001006e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010071:	e8 dc fe ff ff       	call   c000ff52 <CPU::setupPAT()>
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010080:	74 11                	je     c0010093 <CPU::setupFeatures()+0xc7>
c0010082:	c7 44 24 10 f8 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020af8
c001008a:	83 c4 08             	add    esp,0x8
c001008d:	5b                   	pop    ebx
c001008e:	e9 03 a9 ff ff       	jmp    c000a996 <Dbg::kprintf(char const*, ...)>
c0010093:	83 c4 08             	add    esp,0x8
c0010096:	5b                   	pop    ebx
c0010097:	c3                   	ret    

c0010098 <CPU::open(int, int, void*)>:
c0010098:	57                   	push   edi
c0010099:	56                   	push   esi
c001009a:	53                   	push   ebx
c001009b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001009f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100a3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00100a9:	83 ec 0c             	sub    esp,0xc
c00100ac:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00100b2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100b8:	50                   	push   eax
c00100b9:	e8 f8 72 ff ff       	call   c00073b6 <GDT::setup()>
c00100be:	83 c4 0c             	add    esp,0xc
c00100c1:	6a 00                	push   0x0
c00100c3:	68 ef be ad de       	push   0xdeadbeef
c00100c8:	57                   	push   edi
c00100c9:	e8 ca 8e ff ff       	call   c0008f98 <TSS::setup(unsigned long, unsigned long)>
c00100ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100d1:	e8 a2 8e ff ff       	call   c0008f78 <TSS::flush()>
c00100d6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00100df:	e8 36 75 ff ff       	call   c000761a <IDT::setup()>
c00100e4:	b8 00 04 00 00       	mov    eax,0x400
c00100e9:	0f 23 f8             	mov    db7,eax
c00100ec:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100f6:	e8 b8 7c ff ff       	call   c0007db3 <Phys::allocatePage()>
c00100fb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010101:	89 30                	mov    DWORD PTR [eax],esi
c0010103:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010109:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001010c:	58                   	pop    eax
c001010d:	5a                   	pop    edx
c001010e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010114:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010118:	e8 dd 9e ff ff       	call   c0009ffa <VAS::setCPUSpecific(unsigned long)>
c001011d:	c7 04 24 02 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b02
c0010124:	e8 cd 00 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c0010129:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001012c:	e8 23 f7 ff ff       	call   c000f854 <CPU::detectFeatures()>
c0010131:	c7 04 24 25 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b25
c0010138:	e8 b9 00 00 00       	call   c00101f6 <KeSetBootMessage(char const*)>
c001013d:	e8 38 6f 00 00       	call   c001707a <HalInitialise()>
c0010142:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010147:	83 e0 10             	and    eax,0x10
c001014a:	83 f8 01             	cmp    eax,0x1
c001014d:	19 c0                	sbb    eax,eax
c001014f:	83 e0 46             	and    eax,0x46
c0010152:	83 c0 1e             	add    eax,0x1e
c0010155:	89 04 24             	mov    DWORD PTR [esp],eax
c0010158:	e8 94 d6 ff ff       	call   c000d7f1 <setupTimer(int)>
c001015d:	83 c4 10             	add    esp,0x10
c0010160:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010166:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c001016d:	74 0c                	je     c001017b <CPU::open(int, int, void*)+0xe3>
c001016f:	83 ec 0c             	sub    esp,0xc
c0010172:	53                   	push   ebx
c0010173:	e8 54 fe ff ff       	call   c000ffcc <CPU::setupFeatures()>
c0010178:	83 c4 10             	add    esp,0x10
c001017b:	5b                   	pop    ebx
c001017c:	31 c0                	xor    eax,eax
c001017e:	5e                   	pop    esi
c001017f:	5f                   	pop    edi
c0010180:	c3                   	ret    

c0010181 <KeDisplaySplashScreen()>:
c0010181:	55                   	push   ebp
c0010182:	bd 05 00 00 00       	mov    ebp,0x5
c0010187:	57                   	push   edi
c0010188:	bf c0 1e 02 c0       	mov    edi,0xc0021ec0
c001018d:	56                   	push   esi
c001018e:	be 0a 00 00 00       	mov    esi,0xa
c0010193:	53                   	push   ebx
c0010194:	31 db                	xor    ebx,ebx
c0010196:	83 ec 0c             	sub    esp,0xc
c0010199:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001019c:	89 d0                	mov    eax,edx
c001019e:	85 d2                	test   edx,edx
c00101a0:	74 4c                	je     c00101ee <KeDisplaySplashScreen()+0x6d>
c00101a2:	80 bb f6 1e 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde10a],0xdb
c00101a9:	75 13                	jne    c00101be <KeDisplaySplashScreen()+0x3d>
c00101ab:	0f b6 8b f5 1e 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde10b]
c00101b2:	83 e1 fe             	and    ecx,0xfffffffe
c00101b5:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00101bb:	75 01                	jne    c00101be <KeDisplaySplashScreen()+0x3d>
c00101bd:	46                   	inc    esi
c00101be:	83 fa 0d             	cmp    edx,0xd
c00101c1:	74 28                	je     c00101eb <KeDisplaySplashScreen()+0x6a>
c00101c3:	83 fa 0a             	cmp    edx,0xa
c00101c6:	75 0a                	jne    c00101d2 <KeDisplaySplashScreen()+0x51>
c00101c8:	45                   	inc    ebp
c00101c9:	be 0a 00 00 00       	mov    esi,0xa
c00101ce:	31 db                	xor    ebx,ebx
c00101d0:	eb 19                	jmp    c00101eb <KeDisplaySplashScreen()+0x6a>
c00101d2:	83 ec 0c             	sub    esp,0xc
c00101d5:	8d 14 33             	lea    edx,[ebx+esi*1]
c00101d8:	55                   	push   ebp
c00101d9:	0f be c0             	movsx  eax,al
c00101dc:	52                   	push   edx
c00101dd:	43                   	inc    ebx
c00101de:	6a 00                	push   0x0
c00101e0:	6a 0e                	push   0xe
c00101e2:	50                   	push   eax
c00101e3:	e8 14 7b 00 00       	call   c0017cfc <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101e8:	83 c4 20             	add    esp,0x20
c00101eb:	47                   	inc    edi
c00101ec:	eb ab                	jmp    c0010199 <KeDisplaySplashScreen()+0x18>
c00101ee:	83 c4 0c             	add    esp,0xc
c00101f1:	5b                   	pop    ebx
c00101f2:	5e                   	pop    esi
c00101f3:	5f                   	pop    edi
c00101f4:	5d                   	pop    ebp
c00101f5:	c3                   	ret    

c00101f6 <KeSetBootMessage(char const*)>:
c00101f6:	57                   	push   edi
c00101f7:	56                   	push   esi
c00101f8:	53                   	push   ebx
c00101f9:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101ff:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010206:	68 9e 00 00 00       	push   0x9e
c001020b:	6a 00                	push   0x0
c001020d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010211:	56                   	push   esi
c0010212:	e8 d9 02 ff ff       	call   c00004f0 <memset>
c0010217:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001021a:	e8 51 03 ff ff       	call   c0000570 <strlen>
c001021f:	ba 50 00 00 00       	mov    edx,0x50
c0010224:	83 c4 10             	add    esp,0x10
c0010227:	29 c2                	sub    edx,eax
c0010229:	31 c9                	xor    ecx,ecx
c001022b:	83 e2 fe             	and    edx,0xfffffffe
c001022e:	01 f2                	add    edx,esi
c0010230:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010235:	84 c0                	test   al,al
c0010237:	74 0a                	je     c0010243 <KeSetBootMessage(char const*)+0x4d>
c0010239:	80 cc 0f             	or     ah,0xf
c001023c:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010240:	41                   	inc    ecx
c0010241:	eb ed                	jmp    c0010230 <KeSetBootMessage(char const*)+0x3a>
c0010243:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010248:	b9 9e 00 00 00       	mov    ecx,0x9e
c001024d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001024f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010255:	5b                   	pop    ebx
c0010256:	5e                   	pop    esi
c0010257:	5f                   	pop    edi
c0010258:	c3                   	ret    
c0010259:	90                   	nop

c001025a <EnvVarContainer::getEnv(char const*)>:
c001025a:	57                   	push   edi
c001025b:	56                   	push   esi
c001025c:	53                   	push   ebx
c001025d:	31 db                	xor    ebx,ebx
c001025f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010263:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010265:	7e 2b                	jle    c0010292 <EnvVarContainer::getEnv(char const*)+0x38>
c0010267:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001026e:	50                   	push   eax
c001026f:	50                   	push   eax
c0010270:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010273:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010276:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001027a:	e8 d1 04 ff ff       	call   c0000750 <strcmp>
c001027f:	83 c4 10             	add    esp,0x10
c0010282:	85 c0                	test   eax,eax
c0010284:	75 09                	jne    c001028f <EnvVarContainer::getEnv(char const*)+0x35>
c0010286:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010289:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001028d:	eb 05                	jmp    c0010294 <EnvVarContainer::getEnv(char const*)+0x3a>
c001028f:	43                   	inc    ebx
c0010290:	eb d1                	jmp    c0010263 <EnvVarContainer::getEnv(char const*)+0x9>
c0010292:	31 c0                	xor    eax,eax
c0010294:	5b                   	pop    ebx
c0010295:	5e                   	pop    esi
c0010296:	5f                   	pop    edi
c0010297:	c3                   	ret    

c0010298 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010298:	55                   	push   ebp
c0010299:	57                   	push   edi
c001029a:	56                   	push   esi
c001029b:	53                   	push   ebx
c001029c:	83 ec 28             	sub    esp,0x28
c001029f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00102a3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00102a7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00102ab:	56                   	push   esi
c00102ac:	e8 bf 02 ff ff       	call   c0000570 <strlen>
c00102b1:	40                   	inc    eax
c00102b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00102b5:	e8 f4 77 ff ff       	call   c0007aae <malloc>
c00102ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102c1:	e8 aa 02 ff ff       	call   c0000570 <strlen>
c00102c6:	40                   	inc    eax
c00102c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00102ca:	e8 df 77 ff ff       	call   c0007aae <malloc>
c00102cf:	89 34 24             	mov    DWORD PTR [esp],esi
c00102d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102d6:	e8 95 02 ff ff       	call   c0000570 <strlen>
c00102db:	83 c4 0c             	add    esp,0xc
c00102de:	40                   	inc    eax
c00102df:	50                   	push   eax
c00102e0:	6a 00                	push   0x0
c00102e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102e6:	e8 05 02 ff ff       	call   c00004f0 <memset>
c00102eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00102ee:	e8 7d 02 ff ff       	call   c0000570 <strlen>
c00102f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00102fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102ff:	89 de                	mov    esi,ebx
c0010301:	e8 6a 02 ff ff       	call   c0000570 <strlen>
c0010306:	83 c4 0c             	add    esp,0xc
c0010309:	40                   	inc    eax
c001030a:	50                   	push   eax
c001030b:	6a 00                	push   0x0
c001030d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010311:	e8 da 01 ff ff       	call   c00004f0 <memset>
c0010316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010319:	e8 52 02 ff ff       	call   c0000570 <strlen>
c001031e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010322:	8d 48 01             	lea    ecx,[eax+0x1]
c0010325:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010327:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001032a:	40                   	inc    eax
c001032b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001032e:	c1 e0 03             	shl    eax,0x3
c0010331:	5a                   	pop    edx
c0010332:	59                   	pop    ecx
c0010333:	50                   	push   eax
c0010334:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010337:	e8 5e 77 ff ff       	call   c0007a9a <realloc>
c001033c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010340:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010343:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010346:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001034a:	b9 08 00 00 00       	mov    ecx,0x8
c001034f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010351:	83 c4 2c             	add    esp,0x2c
c0010354:	5b                   	pop    ebx
c0010355:	5e                   	pop    esi
c0010356:	5f                   	pop    edi
c0010357:	5d                   	pop    ebp
c0010358:	c3                   	ret    
c0010359:	90                   	nop

c001035a <EnvVarContainer::deleteEnv(char const*)>:
c001035a:	c3                   	ret    
c001035b:	90                   	nop

c001035c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001035c:	55                   	push   ebp
c001035d:	57                   	push   edi
c001035e:	56                   	push   esi
c001035f:	53                   	push   ebx
c0010360:	81 ec 38 01 00 00    	sub    esp,0x138
c0010366:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001036d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010374:	68 14 01 00 00       	push   0x114
c0010379:	e8 30 77 ff ff       	call   c0007aae <malloc>
c001037e:	83 c4 0c             	add    esp,0xc
c0010381:	89 c3                	mov    ebx,eax
c0010383:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010386:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001038d:	50                   	push   eax
c001038e:	e8 85 ab ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0010393:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010396:	e8 a7 ae ff ff       	call   c000b242 <File::exists()>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	84 c0                	test   al,al
c00103a0:	75 31                	jne    c00103d3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00103a2:	50                   	push   eax
c00103a3:	50                   	push   eax
c00103a4:	6a 12                	push   0x12
c00103a6:	53                   	push   ebx
c00103a7:	e8 28 ac ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c00103ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103ae:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00103b1:	89 34 24             	mov    DWORD PTR [esp],esi
c00103b4:	e8 b7 01 ff ff       	call   c0000570 <strlen>
c00103b9:	5a                   	pop    edx
c00103ba:	31 d2                	xor    edx,edx
c00103bc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103c0:	51                   	push   ecx
c00103c1:	56                   	push   esi
c00103c2:	52                   	push   edx
c00103c3:	50                   	push   eax
c00103c4:	53                   	push   ebx
c00103c5:	ff d7                	call   edi
c00103c7:	83 c4 14             	add    esp,0x14
c00103ca:	53                   	push   ebx
c00103cb:	e8 62 ac ff ff       	call   c000b032 <File::close()>
c00103d0:	83 c4 10             	add    esp,0x10
c00103d3:	56                   	push   esi
c00103d4:	31 f6                	xor    esi,esi
c00103d6:	68 00 01 00 00       	push   0x100
c00103db:	6a 00                	push   0x0
c00103dd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103e1:	50                   	push   eax
c00103e2:	e8 09 01 ff ff       	call   c00004f0 <memset>
c00103e7:	5f                   	pop    edi
c00103e8:	58                   	pop    eax
c00103e9:	6a 01                	push   0x1
c00103eb:	53                   	push   ebx
c00103ec:	e8 e3 ab ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c00103f1:	83 c4 10             	add    esp,0x10
c00103f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103fc:	83 ec 0c             	sub    esp,0xc
c00103ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010401:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010405:	51                   	push   ecx
c0010406:	8d 54 24 23          	lea    edx,[esp+0x23]
c001040a:	52                   	push   edx
c001040b:	6a 00                	push   0x0
c001040d:	6a 01                	push   0x1
c001040f:	53                   	push   ebx
c0010410:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010413:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c0010418:	83 c4 20             	add    esp,0x20
c001041b:	89 d0                	mov    eax,edx
c001041d:	83 fa 0d             	cmp    edx,0xd
c0010420:	0f 84 0a 01 00 00    	je     c0010530 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010426:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001042b:	0f 84 f0 00 00 00    	je     c0010521 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010431:	83 fa 0a             	cmp    edx,0xa
c0010434:	74 13                	je     c0010449 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010436:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001043b:	74 0c                	je     c0010449 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c001043d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010443:	0f 8e d8 00 00 00    	jle    c0010521 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010449:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001044d:	83 ec 0c             	sub    esp,0xc
c0010450:	8d 78 01             	lea    edi,[eax+0x1]
c0010453:	57                   	push   edi
c0010454:	e8 55 76 ff ff       	call   c0007aae <malloc>
c0010459:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001045d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010461:	8d 56 04             	lea    edx,[esi+0x4]
c0010464:	89 14 24             	mov    DWORD PTR [esp],edx
c0010467:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001046b:	e8 3e 76 ff ff       	call   c0007aae <malloc>
c0010470:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010474:	83 c4 0c             	add    esp,0xc
c0010477:	57                   	push   edi
c0010478:	6a 00                	push   0x0
c001047a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001047e:	e8 6d 00 ff ff       	call   c00004f0 <memset>
c0010483:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010487:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001048b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001048f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010491:	83 c4 0c             	add    esp,0xc
c0010494:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010498:	52                   	push   edx
c0010499:	6a 00                	push   0x0
c001049b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001049f:	e8 4c 00 ff ff       	call   c00004f0 <memset>
c00104a4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00104a8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00104ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00104af:	e8 bc 00 ff ff       	call   c0000570 <strlen>
c00104b4:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00104b8:	89 c1                	mov    ecx,eax
c00104ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104bf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00104c2:	40                   	inc    eax
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00104c9:	85 d2                	test   edx,edx
c00104cb:	75 0c                	jne    c00104d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c00104cd:	83 ec 0c             	sub    esp,0xc
c00104d0:	6a 08                	push   0x8
c00104d2:	e8 d7 75 ff ff       	call   c0007aae <malloc>
c00104d7:	eb 0c                	jmp    c00104e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c00104d9:	c1 e0 03             	shl    eax,0x3
c00104dc:	51                   	push   ecx
c00104dd:	51                   	push   ecx
c00104de:	50                   	push   eax
c00104df:	52                   	push   edx
c00104e0:	e8 b5 75 ff ff       	call   c0007a9a <realloc>
c00104e5:	83 c4 10             	add    esp,0x10
c00104e8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104eb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104ee:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104f1:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104f5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104f9:	b9 08 00 00 00       	mov    ecx,0x8
c00104fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010500:	31 f6                	xor    esi,esi
c0010502:	50                   	push   eax
c0010503:	68 00 01 00 00       	push   0x100
c0010508:	6a 00                	push   0x0
c001050a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001050e:	50                   	push   eax
c001050f:	e8 dc ff fe ff       	call   c00004f0 <memset>
c0010514:	83 c4 10             	add    esp,0x10
c0010517:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001051f:	eb 0f                	jmp    c0010530 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010521:	3c 3d                	cmp    al,0x3d
c0010523:	74 07                	je     c001052c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0010525:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010529:	46                   	inc    esi
c001052a:	eb 04                	jmp    c0010530 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001052c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010530:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010535:	0f 85 c1 fe ff ff    	jne    c00103fc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001053b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010541:	5b                   	pop    ebx
c0010542:	5e                   	pop    esi
c0010543:	5f                   	pop    edi
c0010544:	5d                   	pop    ebp
c0010545:	c3                   	ret    

c0010546 <EnvVarContainer::__loadSystem()>:
c0010546:	83 ec 10             	sub    esp,0x10
c0010549:	68 20 20 02 c0       	push   0xc0022020
c001054e:	68 68 0b 02 c0       	push   0xc0020b68
c0010553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010557:	e8 00 fe ff ff       	call   c001035c <EnvVarContainer::loadFrom(char const*, char const*)>
c001055c:	83 c4 1c             	add    esp,0x1c
c001055f:	c3                   	ret    

c0010560 <EnvVarContainer::__loadUser()>:
c0010560:	c3                   	ret    
c0010561:	90                   	nop

c0010562 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001056c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010570:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010574:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010577:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001057b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010582:	90                   	nop
c0010583:	c3                   	ret    

c0010584 <EnvVarContainer::~EnvVarContainer()>:
c0010584:	83 ec 0c             	sub    esp,0xc
c0010587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001058e:	85 c0                	test   eax,eax
c0010590:	74 1d                	je     c00105af <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010596:	8b 00                	mov    eax,DWORD PTR [eax]
c0010598:	85 c0                	test   eax,eax
c001059a:	74 13                	je     c00105af <EnvVarContainer::~EnvVarContainer()+0x2b>
c001059c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00105a3:	83 ec 0c             	sub    esp,0xc
c00105a6:	50                   	push   eax
c00105a7:	e8 12 75 ff ff       	call   c0007abe <free>
c00105ac:	83 c4 10             	add    esp,0x10
c00105af:	90                   	nop
c00105b0:	83 c4 0c             	add    esp,0xc
c00105b3:	c3                   	ret    

c00105b4 <Krnl::getEnv(Process*, char const*)>:
c00105b4:	53                   	push   ebx
c00105b5:	83 ec 08             	sub    esp,0x8
c00105b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105c0:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c00105c6:	74 04                	je     c00105cc <Krnl::getEnv(Process*, char const*)+0x18>
c00105c8:	85 c0                	test   eax,eax
c00105ca:	75 0b                	jne    c00105d7 <Krnl::getEnv(Process*, char const*)+0x23>
c00105cc:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105d1:	85 c0                	test   eax,eax
c00105d3:	75 19                	jne    c00105ee <Krnl::getEnv(Process*, char const*)+0x3a>
c00105d5:	eb 27                	jmp    c00105fe <Krnl::getEnv(Process*, char const*)+0x4a>
c00105d7:	52                   	push   edx
c00105d8:	52                   	push   edx
c00105d9:	53                   	push   ebx
c00105da:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105e0:	e8 75 fc ff ff       	call   c001025a <EnvVarContainer::getEnv(char const*)>
c00105e5:	83 c4 10             	add    esp,0x10
c00105e8:	85 c0                	test   eax,eax
c00105ea:	75 28                	jne    c0010614 <Krnl::getEnv(Process*, char const*)+0x60>
c00105ec:	eb de                	jmp    c00105cc <Krnl::getEnv(Process*, char const*)+0x18>
c00105ee:	52                   	push   edx
c00105ef:	52                   	push   edx
c00105f0:	53                   	push   ebx
c00105f1:	50                   	push   eax
c00105f2:	e8 63 fc ff ff       	call   c001025a <EnvVarContainer::getEnv(char const*)>
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	85 c0                	test   eax,eax
c00105fc:	75 16                	jne    c0010614 <Krnl::getEnv(Process*, char const*)+0x60>
c00105fe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010602:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010607:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001060b:	83 c4 08             	add    esp,0x8
c001060e:	5b                   	pop    ebx
c001060f:	e9 46 fc ff ff       	jmp    c001025a <EnvVarContainer::getEnv(char const*)>
c0010614:	83 c4 08             	add    esp,0x8
c0010617:	5b                   	pop    ebx
c0010618:	c3                   	ret    

c0010619 <Krnl::setEnvSystem(char const*, char const*)>:
c0010619:	83 ec 10             	sub    esp,0x10
c001061c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010620:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010624:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c001062a:	e8 69 fc ff ff       	call   c0010298 <EnvVarContainer::setEnv(char const*, char const*)>
c001062f:	83 c4 1c             	add    esp,0x1c
c0010632:	c3                   	ret    

c0010633 <Krnl::setEnvUser(char const*, char const*)>:
c0010633:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010638:	85 c0                	test   eax,eax
c001063a:	74 15                	je     c0010651 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001063c:	83 ec 10             	sub    esp,0x10
c001063f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010643:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010647:	50                   	push   eax
c0010648:	e8 4b fc ff ff       	call   c0010298 <EnvVarContainer::setEnv(char const*, char const*)>
c001064d:	83 c4 1c             	add    esp,0x1c
c0010650:	c3                   	ret    
c0010651:	c3                   	ret    

c0010652 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010656:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001065c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010660:	e9 33 fc ff ff       	jmp    c0010298 <EnvVarContainer::setEnv(char const*, char const*)>

c0010665 <Krnl::deleteEnvSystem(char const*)>:
c0010665:	c3                   	ret    

c0010666 <Krnl::deleteEnvUser(char const*)>:
c0010666:	c3                   	ret    

c0010667 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010667:	c3                   	ret    

c0010668 <Krnl::newProcessEnv(Process*)>:
c0010668:	83 ec 28             	sub    esp,0x28
c001066b:	6a 0c                	push   0xc
c001066d:	e8 3c 74 ff ff       	call   c0007aae <malloc>
c0010672:	5a                   	pop    edx
c0010673:	59                   	pop    ecx
c0010674:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010678:	50                   	push   eax
c0010679:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001067d:	e8 e0 fe ff ff       	call   c0010562 <EnvVarContainer::EnvVarContainer(Process*)>
c0010682:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010686:	83 c4 2c             	add    esp,0x2c
c0010689:	c3                   	ret    

c001068a <Krnl::copyProcessEnv(Process*, Process*)>:
c001068a:	57                   	push   edi
c001068b:	56                   	push   esi
c001068c:	53                   	push   ebx
c001068d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010691:	83 ec 0c             	sub    esp,0xc
c0010694:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001069a:	6a 0c                	push   0xc
c001069c:	e8 0d 74 ff ff       	call   c0007aae <malloc>
c00106a1:	89 c3                	mov    ebx,eax
c00106a3:	58                   	pop    eax
c00106a4:	5a                   	pop    edx
c00106a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a9:	53                   	push   ebx
c00106aa:	e8 b3 fe ff ff       	call   c0010562 <EnvVarContainer::EnvVarContainer(Process*)>
c00106af:	8b 07                	mov    eax,DWORD PTR [edi]
c00106b1:	89 03                	mov    DWORD PTR [ebx],eax
c00106b3:	c1 e0 03             	shl    eax,0x3
c00106b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00106b9:	e8 f0 73 ff ff       	call   c0007aae <malloc>
c00106be:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00106c1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00106c3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00106c6:	c1 e1 03             	shl    ecx,0x3
c00106c9:	89 c7                	mov    edi,eax
c00106cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	89 d8                	mov    eax,ebx
c00106d2:	5b                   	pop    ebx
c00106d3:	5e                   	pop    esi
c00106d4:	5f                   	pop    edi
c00106d5:	c3                   	ret    

c00106d6 <Krnl::loadSystemEnv()>:
c00106d6:	53                   	push   ebx
c00106d7:	83 ec 14             	sub    esp,0x14
c00106da:	6a 0c                	push   0xc
c00106dc:	e8 cd 73 ff ff       	call   c0007aae <malloc>
c00106e1:	89 c3                	mov    ebx,eax
c00106e3:	58                   	pop    eax
c00106e4:	5a                   	pop    edx
c00106e5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106eb:	53                   	push   ebx
c00106ec:	e8 71 fe ff ff       	call   c0010562 <EnvVarContainer::EnvVarContainer(Process*)>
c00106f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106f4:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106fa:	e8 47 fe ff ff       	call   c0010546 <EnvVarContainer::__loadSystem()>
c00106ff:	83 c4 18             	add    esp,0x18
c0010702:	5b                   	pop    ebx
c0010703:	c3                   	ret    

c0010704 <Krnl::loadUserEnv()>:
c0010704:	53                   	push   ebx
c0010705:	83 ec 14             	sub    esp,0x14
c0010708:	6a 0c                	push   0xc
c001070a:	e8 9f 73 ff ff       	call   c0007aae <malloc>
c001070f:	89 c3                	mov    ebx,eax
c0010711:	58                   	pop    eax
c0010712:	5a                   	pop    edx
c0010713:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010719:	53                   	push   ebx
c001071a:	e8 43 fe ff ff       	call   c0010562 <EnvVarContainer::EnvVarContainer(Process*)>
c001071f:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010725:	83 c4 18             	add    esp,0x18
c0010728:	5b                   	pop    ebx
c0010729:	c3                   	ret    

c001072a <Krnl::flushEnv()>:
c001072a:	c3                   	ret    

c001072b <Krnl::getProcessTotalEnvCount(Process*)>:
c001072b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072f:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010735:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001073b:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c0010740:	8b 00                	mov    eax,DWORD PTR [eax]
c0010742:	03 01                	add    eax,DWORD PTR [ecx]
c0010744:	85 d2                	test   edx,edx
c0010746:	74 02                	je     c001074a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010748:	03 02                	add    eax,DWORD PTR [edx]
c001074a:	c3                   	ret    

c001074b <Krnl::getProcessEnvPair(Process*, int)>:
c001074b:	57                   	push   edi
c001074c:	56                   	push   esi
c001074d:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010753:	53                   	push   ebx
c0010754:	85 f6                	test   esi,esi
c0010756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001075a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001075e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010764:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010768:	8b 01                	mov    eax,DWORD PTR [ecx]
c001076a:	75 16                	jne    c0010782 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001076c:	39 c2                	cmp    edx,eax
c001076e:	7c 16                	jl     c0010786 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010770:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010776:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010778:	01 c6                	add    esi,eax
c001077a:	39 d6                	cmp    esi,edx
c001077c:	7e 3c                	jle    c00107ba <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001077e:	29 c2                	sub    edx,eax
c0010780:	eb 04                	jmp    c0010786 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010782:	39 c2                	cmp    edx,eax
c0010784:	7d 05                	jge    c001078b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010786:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010789:	eb 20                	jmp    c00107ab <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001078b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001078d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010790:	39 d1                	cmp    ecx,edx
c0010792:	7e 04                	jle    c0010798 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010794:	29 c2                	sub    edx,eax
c0010796:	eb 10                	jmp    c00107a8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010798:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c001079e:	03 0e                	add    ecx,DWORD PTR [esi]
c00107a0:	39 d1                	cmp    ecx,edx
c00107a2:	7e 16                	jle    c00107ba <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00107a4:	29 c2                	sub    edx,eax
c00107a6:	29 fa                	sub    edx,edi
c00107a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00107ab:	8d 14 d0             	lea    edx,[eax+edx*8]
c00107ae:	8b 02                	mov    eax,DWORD PTR [edx]
c00107b0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00107b3:	89 03                	mov    DWORD PTR [ebx],eax
c00107b5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00107b8:	eb 1d                	jmp    c00107d7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00107ba:	83 ec 0c             	sub    esp,0xc
c00107bd:	68 8a 0b 02 c0       	push   0xc0020b8a
c00107c2:	e8 ac 00 00 00       	call   c0010873 <KePanic(char const*)>
c00107c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00107cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00107d4:	83 c4 10             	add    esp,0x10
c00107d7:	89 d8                	mov    eax,ebx
c00107d9:	5b                   	pop    ebx
c00107da:	5e                   	pop    esi
c00107db:	5f                   	pop    edi
c00107dc:	c2 04 00             	ret    0x4

c00107df <CPU::current()>:
c00107df:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107ea:	c3                   	ret    

c00107eb <operator new(unsigned long)>:
c00107eb:	e9 be 72 ff ff       	jmp    c0007aae <malloc>

c00107f0 <operator delete(void*)>:
c00107f0:	e9 d9 72 ff ff       	jmp    c0007ace <rfree>

c00107f5 <disableIRQs()>:
c00107f5:	fa                   	cli    
c00107f6:	c3                   	ret    

c00107f7 <enableIRQs()>:
c00107f7:	fb                   	sti    
c00107f8:	c3                   	ret    

c00107f9 <lockScheduler()>:
c00107f9:	fa                   	cli    
c00107fa:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010800:	c3                   	ret    

c0010801 <unlockScheduler()>:
c0010801:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010806:	48                   	dec    eax
c0010807:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001080c:	75 01                	jne    c001080f <unlockScheduler()+0xe>
c001080e:	fb                   	sti    
c001080f:	c3                   	ret    

c0010810 <lockStuff()>:
c0010810:	fa                   	cli    
c0010811:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010817:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c001081d:	c3                   	ret    

c001081e <unlockStuff()>:
c001081e:	83 ec 0c             	sub    esp,0xc
c0010821:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010826:	48                   	dec    eax
c0010827:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001082c:	75 18                	jne    c0010846 <unlockStuff()+0x28>
c001082e:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010835:	74 0f                	je     c0010846 <unlockStuff()+0x28>
c0010837:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0010841:	e8 e2 47 00 00       	call   c0015028 <schedule()>
c0010846:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001084b:	48                   	dec    eax
c001084c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010851:	75 01                	jne    c0010854 <unlockStuff()+0x36>
c0010853:	fb                   	sti    
c0010854:	83 c4 0c             	add    esp,0xc
c0010857:	c3                   	ret    

c0010858 <Virt::getAKernelVAS()>:
c0010858:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001085d:	c3                   	ret    

c001085e <__not_memcpy>:
c001085e:	57                   	push   edi
c001085f:	56                   	push   esi
c0010860:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010864:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010868:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001086c:	89 c7                	mov    edi,eax
c001086e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010870:	5e                   	pop    esi
c0010871:	5f                   	pop    edi
c0010872:	c3                   	ret    

c0010873 <KePanic(char const*)>:
c0010873:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c001087a:	e9 e7 66 00 00       	jmp    c0016f66 <HalPanic(char const*)>

c001087f <Krnl::powerThread(void*)>:
c001087f:	83 ec 0c             	sub    esp,0xc
c0010882:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010887:	48                   	dec    eax
c0010888:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001088d:	75 01                	jne    c0010890 <Krnl::powerThread(void*)+0x11>
c001088f:	fb                   	sti    
c0010890:	83 ec 0c             	sub    esp,0xc
c0010893:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001089a:	6a 0a                	push   0xa
c001089c:	e8 cb 4a 00 00       	call   c001536c <sleep(unsigned int)>
c00108a1:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c00108a8:	83 c4 10             	add    esp,0x10
c00108ab:	eb e3                	jmp    c0010890 <Krnl::powerThread(void*)+0x11>

c00108ad <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00108ad:	57                   	push   edi
c00108ae:	b9 09 00 00 00       	mov    ecx,0x9
c00108b3:	56                   	push   esi
c00108b4:	bf 60 79 02 c0       	mov    edi,0xc0027960
c00108b9:	fc                   	cld    
c00108ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00108be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108c0:	5e                   	pop    esi
c00108c1:	5f                   	pop    edi
c00108c2:	c3                   	ret    

c00108c3 <Krnl::userIOReceived()>:
c00108c3:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108cd:	c3                   	ret    

c00108ce <Krnl::handlePowerButton()>:
c00108ce:	83 ec 0c             	sub    esp,0xc
c00108d1:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00108d6:	83 f8 02             	cmp    eax,0x2
c00108d9:	75 10                	jne    c00108eb <Krnl::handlePowerButton()+0x1d>
c00108db:	83 ec 0c             	sub    esp,0xc
c00108de:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108e4:	e8 37 68 ff ff       	call   c0007120 <Computer::shutdown()>
c00108e9:	eb 11                	jmp    c00108fc <Krnl::handlePowerButton()+0x2e>
c00108eb:	48                   	dec    eax
c00108ec:	75 11                	jne    c00108ff <Krnl::handlePowerButton()+0x31>
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108f7:	e8 54 68 ff ff       	call   c0007150 <Computer::sleep()>
c00108fc:	83 c4 10             	add    esp,0x10
c00108ff:	83 c4 0c             	add    esp,0xc
c0010902:	c3                   	ret    

c0010903 <Krnl::handleSleepButton()>:
c0010903:	83 ec 0c             	sub    esp,0xc
c0010906:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c001090b:	83 f8 02             	cmp    eax,0x2
c001090e:	75 10                	jne    c0010920 <Krnl::handleSleepButton()+0x1d>
c0010910:	83 ec 0c             	sub    esp,0xc
c0010913:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010919:	e8 02 68 ff ff       	call   c0007120 <Computer::shutdown()>
c001091e:	eb 11                	jmp    c0010931 <Krnl::handleSleepButton()+0x2e>
c0010920:	48                   	dec    eax
c0010921:	75 11                	jne    c0010934 <Krnl::handleSleepButton()+0x31>
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001092c:	e8 1f 68 ff ff       	call   c0007150 <Computer::sleep()>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	83 c4 0c             	add    esp,0xc
c0010937:	c3                   	ret    

c0010938 <Krnl::setupPowerManager()>:
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010945:	68 f0 00 00 00       	push   0xf0
c001094a:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010951:	6a 00                	push   0x0
c0010953:	68 7f 08 01 c0       	push   0xc001087f
c0010958:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001095e:	e8 75 44 00 00       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c0010963:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c001096d:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010977:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010981:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001098b:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010995:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c001099f:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c00109a9:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c00109b3:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c00109bd:	83 c4 1c             	add    esp,0x1c
c00109c0:	c3                   	ret    

c00109c1 <KeRand()>:
c00109c1:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c00109cb:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c00109d5:	53                   	push   ebx
c00109d6:	01 c1                	add    ecx,eax
c00109d8:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109dd:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109e3:	01 ca                	add    edx,ecx
c00109e5:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109ea:	83 d2 00             	adc    edx,0x0
c00109ed:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109f2:	0f b7 da             	movzx  ebx,dx
c00109f5:	89 da                	mov    edx,ebx
c00109f7:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109fd:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010a01:	5b                   	pop    ebx
c0010a02:	c3                   	ret    

c0010a03 <KeSeedRand(unsigned int)>:
c0010a03:	53                   	push   ebx
c0010a04:	83 ec 08             	sub    esp,0x8
c0010a07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a0b:	e8 5a 68 00 00       	call   c001726a <HalGetRand()>
c0010a10:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010a1a:	31 d8                	xor    eax,ebx
c0010a1c:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a21:	e8 9b ff ff ff       	call   c00109c1 <KeRand()>
c0010a26:	83 c4 08             	add    esp,0x8
c0010a29:	5b                   	pop    ebx
c0010a2a:	eb 95                	jmp    c00109c1 <KeRand()>

c0010a2c <KeInitRand()>:
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	e8 2b 66 00 00       	call   c001705f <HalQueryPerformanceCounter()>
c0010a34:	0f 20 da             	mov    edx,cr3
c0010a37:	0f 22 da             	mov    cr3,edx
c0010a3a:	0f 20 da             	mov    edx,cr3
c0010a3d:	0f 22 da             	mov    cr3,edx
c0010a40:	0f 20 da             	mov    edx,cr3
c0010a43:	0f 22 da             	mov    cr3,edx
c0010a46:	0f 20 da             	mov    edx,cr3
c0010a49:	0f 22 da             	mov    cr3,edx
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a54:	50                   	push   eax
c0010a55:	e8 a9 ff ff ff       	call   c0010a03 <KeSeedRand(unsigned int)>
c0010a5a:	83 c4 1c             	add    esp,0x1c
c0010a5d:	c3                   	ret    
c0010a5e:	66 90                	xchg   ax,ax

c0010a60 <KeResolveCompatibilitySymbol(char*)>:
c0010a60:	83 ec 0c             	sub    esp,0xc
c0010a63:	83 ec 08             	sub    esp,0x8
c0010a66:	68 a4 0b 02 c0       	push   0xc0020ba4
c0010a6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a6f:	e8 dc fc fe ff       	call   c0000750 <strcmp>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	85 c0                	test   eax,eax
c0010a79:	0f 94 c0             	sete   al
c0010a7c:	0f b6 c0             	movzx  eax,al
c0010a7f:	85 c0                	test   eax,eax
c0010a81:	74 0d                	je     c0010a90 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a83:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a88:	e9 8b 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a90:	83 ec 08             	sub    esp,0x8
c0010a93:	68 ad 0b 02 c0       	push   0xc0020bad
c0010a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a9c:	e8 af fc fe ff       	call   c0000750 <strcmp>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	0f 94 c0             	sete   al
c0010aa9:	0f b6 c0             	movzx  eax,al
c0010aac:	85 c0                	test   eax,eax
c0010aae:	74 0c                	je     c0010abc <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010ab0:	b8 b0 e5 01 c0       	mov    eax,0xc001e5b0
c0010ab5:	e9 5e 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aba:	66 90                	xchg   ax,ax
c0010abc:	83 ec 08             	sub    esp,0x8
c0010abf:	68 b7 0b 02 c0       	push   0xc0020bb7
c0010ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac8:	e8 83 fc fe ff       	call   c0000750 <strcmp>
c0010acd:	83 c4 10             	add    esp,0x10
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	0f 94 c0             	sete   al
c0010ad5:	0f b6 c0             	movzx  eax,al
c0010ad8:	85 c0                	test   eax,eax
c0010ada:	74 0c                	je     c0010ae8 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010adc:	b8 e4 e2 01 c0       	mov    eax,0xc001e2e4
c0010ae1:	e9 32 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	83 ec 08             	sub    esp,0x8
c0010aeb:	68 c0 0b 02 c0       	push   0xc0020bc0
c0010af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af4:	e8 57 fc fe ff       	call   c0000750 <strcmp>
c0010af9:	83 c4 10             	add    esp,0x10
c0010afc:	85 c0                	test   eax,eax
c0010afe:	0f 94 c0             	sete   al
c0010b01:	0f b6 c0             	movzx  eax,al
c0010b04:	85 c0                	test   eax,eax
c0010b06:	74 0c                	je     c0010b14 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010b08:	b8 73 08 01 c0       	mov    eax,0xc0010873
c0010b0d:	e9 06 01 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	83 ec 08             	sub    esp,0x8
c0010b17:	68 d3 0b 02 c0       	push   0xc0020bd3
c0010b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b20:	e8 2b fc fe ff       	call   c0000750 <strcmp>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	0f 94 c0             	sete   al
c0010b2d:	0f b6 c0             	movzx  eax,al
c0010b30:	85 c0                	test   eax,eax
c0010b32:	74 0c                	je     c0010b40 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b34:	b8 f6 01 01 c0       	mov    eax,0xc00101f6
c0010b39:	e9 da 00 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b3e:	66 90                	xchg   ax,ax
c0010b40:	83 ec 08             	sub    esp,0x8
c0010b43:	68 f0 0b 02 c0       	push   0xc0020bf0
c0010b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4c:	e8 ff fb fe ff       	call   c0000750 <strcmp>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	85 c0                	test   eax,eax
c0010b56:	0f 94 c0             	sete   al
c0010b59:	0f b6 c0             	movzx  eax,al
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	74 0c                	je     c0010b6c <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b60:	b8 b0 e6 01 c0       	mov    eax,0xc001e6b0
c0010b65:	e9 ae 00 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	83 ec 08             	sub    esp,0x8
c0010b6f:	68 fa 0b 02 c0       	push   0xc0020bfa
c0010b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b78:	e8 d3 fb fe ff       	call   c0000750 <strcmp>
c0010b7d:	83 c4 10             	add    esp,0x10
c0010b80:	85 c0                	test   eax,eax
c0010b82:	0f 94 c0             	sete   al
c0010b85:	0f b6 c0             	movzx  eax,al
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	74 0c                	je     c0010b98 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b8c:	b8 30 e4 01 c0       	mov    eax,0xc001e430
c0010b91:	e9 82 00 00 00       	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b96:	66 90                	xchg   ax,ax
c0010b98:	83 ec 08             	sub    esp,0x8
c0010b9b:	68 03 0c 02 c0       	push   0xc0020c03
c0010ba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba4:	e8 a7 fb fe ff       	call   c0000750 <strcmp>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	85 c0                	test   eax,eax
c0010bae:	0f 94 c0             	sete   al
c0010bb1:	0f b6 c0             	movzx  eax,al
c0010bb4:	85 c0                	test   eax,eax
c0010bb6:	74 08                	je     c0010bc0 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010bb8:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010bbd:	eb 59                	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bbf:	90                   	nop
c0010bc0:	83 ec 08             	sub    esp,0x8
c0010bc3:	68 1b 0c 02 c0       	push   0xc0020c1b
c0010bc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bcc:	e8 7f fb fe ff       	call   c0000750 <strcmp>
c0010bd1:	83 c4 10             	add    esp,0x10
c0010bd4:	85 c0                	test   eax,eax
c0010bd6:	0f 94 c0             	sete   al
c0010bd9:	0f b6 c0             	movzx  eax,al
c0010bdc:	85 c0                	test   eax,eax
c0010bde:	74 08                	je     c0010be8 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010be0:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010be5:	eb 31                	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010be7:	90                   	nop
c0010be8:	83 ec 08             	sub    esp,0x8
c0010beb:	68 28 0c 02 c0       	push   0xc0020c28
c0010bf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf4:	e8 57 fb fe ff       	call   c0000750 <strcmp>
c0010bf9:	83 c4 10             	add    esp,0x10
c0010bfc:	85 c0                	test   eax,eax
c0010bfe:	0f 94 c0             	sete   al
c0010c01:	0f b6 c0             	movzx  eax,al
c0010c04:	85 c0                	test   eax,eax
c0010c06:	74 08                	je     c0010c10 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010c08:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010c0d:	eb 09                	jmp    c0010c18 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c0f:	90                   	nop
c0010c10:	b8 00 00 00 00       	mov    eax,0x0
c0010c15:	8d 76 00             	lea    esi,[esi+0x0]
c0010c18:	83 c4 0c             	add    esp,0xc
c0010c1b:	c3                   	ret    

c0010c1c <KiSigKill(int)>:
c0010c1c:	83 ec 0c             	sub    esp,0xc
c0010c1f:	6a 00                	push   0x0
c0010c21:	6a 00                	push   0x0
c0010c23:	6a ff                	push   0xffffffff
c0010c25:	6a 01                	push   0x1
c0010c27:	e8 26 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c2c:	83 c4 1c             	add    esp,0x1c
c0010c2f:	c3                   	ret    

c0010c30 <KiDefaultSignalHandlerIgnore(int)>:
c0010c30:	c3                   	ret    

c0010c31 <KiDefaultSignalHandlerPause(int)>:
c0010c31:	57                   	push   edi
c0010c32:	b9 07 00 00 00       	mov    ecx,0x7
c0010c37:	56                   	push   esi
c0010c38:	be 71 0c 02 c0       	mov    esi,0xc0020c71
c0010c3d:	83 ec 24             	sub    esp,0x24
c0010c40:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c44:	fc                   	cld    
c0010c45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c47:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c4b:	50                   	push   eax
c0010c4c:	6a 00                	push   0x0
c0010c4e:	6a 00                	push   0x0
c0010c50:	6a 27                	push   0x27
c0010c52:	e8 fb 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c57:	83 c4 34             	add    esp,0x34
c0010c5a:	5e                   	pop    esi
c0010c5b:	5f                   	pop    edi
c0010c5c:	c3                   	ret    

c0010c5d <KiDefaultSignalHandlerResume(int)>:
c0010c5d:	57                   	push   edi
c0010c5e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c63:	56                   	push   esi
c0010c64:	be 8d 0c 02 c0       	mov    esi,0xc0020c8d
c0010c69:	83 ec 24             	sub    esp,0x24
c0010c6c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c70:	fc                   	cld    
c0010c71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c73:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c77:	50                   	push   eax
c0010c78:	6a 00                	push   0x0
c0010c7a:	6a 00                	push   0x0
c0010c7c:	6a 27                	push   0x27
c0010c7e:	e8 cf 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c83:	83 c4 34             	add    esp,0x34
c0010c86:	5e                   	pop    esi
c0010c87:	5f                   	pop    edi
c0010c88:	c3                   	ret    

c0010c89 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c89:	e9 30 6e ff ff       	jmp    c0007abe <free>

c0010c8e <KeInitSignals()>:
c0010c8e:	53                   	push   ebx
c0010c8f:	83 ec 14             	sub    esp,0x14
c0010c92:	68 c8 00 00 00       	push   0xc8
c0010c97:	e8 12 6e ff ff       	call   c0007aae <malloc>
c0010c9c:	83 c4 0c             	add    esp,0xc
c0010c9f:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010ca9:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010cb3:	89 c3                	mov    ebx,eax
c0010cb5:	6a 20                	push   0x20
c0010cb7:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010cbd:	6a 00                	push   0x0
c0010cbf:	50                   	push   eax
c0010cc0:	e8 2b f8 fe ff       	call   c00004f0 <memset>
c0010cc5:	83 c4 0c             	add    esp,0xc
c0010cc8:	6a 44                	push   0x44
c0010cca:	6a 00                	push   0x0
c0010ccc:	53                   	push   ebx
c0010ccd:	e8 1e f8 fe ff       	call   c00004f0 <memset>
c0010cd2:	89 d8                	mov    eax,ebx
c0010cd4:	83 c4 18             	add    esp,0x18
c0010cd7:	5b                   	pop    ebx
c0010cd8:	c3                   	ret    

c0010cd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010cd9:	53                   	push   ebx
c0010cda:	b8 01 00 00 00       	mov    eax,0x1
c0010cdf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ce3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ce7:	83 f9 10             	cmp    ecx,0x10
c0010cea:	7f 21                	jg     c0010d0d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cec:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010cef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf3:	89 03                	mov    DWORD PTR [ebx],eax
c0010cf5:	b8 01 00 00 00       	mov    eax,0x1
c0010cfa:	d3 e0                	shl    eax,cl
c0010cfc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010d00:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010d03:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010d0b:	31 c0                	xor    eax,eax
c0010d0d:	5b                   	pop    ebx
c0010d0e:	c3                   	ret    

c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010d0f:	55                   	push   ebp
c0010d10:	57                   	push   edi
c0010d11:	bf 08 00 00 00       	mov    edi,0x8
c0010d16:	56                   	push   esi
c0010d17:	53                   	push   ebx
c0010d18:	83 ec 18             	sub    esp,0x18
c0010d1b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d1f:	68 aa 0c 02 c0       	push   0xc0020caa
c0010d24:	e8 6d 9c ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0010d29:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d30:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	31 c9                	xor    ecx,ecx
c0010d3b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d3f:	99                   	cdq    
c0010d40:	f7 ff                	idiv   edi
c0010d42:	8d 42 24             	lea    eax,[edx+0x24]
c0010d45:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d49:	85 f6                	test   esi,esi
c0010d4b:	75 1a                	jne    c0010d67 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d4d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d51:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d55:	50                   	push   eax
c0010d56:	50                   	push   eax
c0010d57:	52                   	push   edx
c0010d58:	68 bb 0c 02 c0       	push   0xc0020cbb
c0010d5d:	e8 34 9c ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0010d62:	83 c4 10             	add    esp,0x10
c0010d65:	eb 1b                	jmp    c0010d82 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d67:	41                   	inc    ecx
c0010d68:	83 f9 08             	cmp    ecx,0x8
c0010d6b:	75 ce                	jne    c0010d3b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d6d:	83 ec 0c             	sub    esp,0xc
c0010d70:	be 01 00 00 00       	mov    esi,0x1
c0010d75:	68 dc 0c 02 c0       	push   0xc0020cdc
c0010d7a:	e8 17 9c ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0010d7f:	83 c4 10             	add    esp,0x10
c0010d82:	83 c4 0c             	add    esp,0xc
c0010d85:	89 f0                	mov    eax,esi
c0010d87:	5b                   	pop    ebx
c0010d88:	5e                   	pop    esi
c0010d89:	5f                   	pop    edi
c0010d8a:	5d                   	pop    ebp
c0010d8b:	c3                   	ret    

c0010d8c <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d8c:	55                   	push   ebp
c0010d8d:	57                   	push   edi
c0010d8e:	56                   	push   esi
c0010d8f:	53                   	push   ebx
c0010d90:	51                   	push   ecx
c0010d91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d95:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d9c:	0f 84 af 00 00 00    	je     c0010e51 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010da2:	31 c9                	xor    ecx,ecx
c0010da4:	bf 08 00 00 00       	mov    edi,0x8
c0010da9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010daf:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010db2:	99                   	cdq    
c0010db3:	f7 ff                	idiv   edi
c0010db5:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010dbc:	85 ed                	test   ebp,ebp
c0010dbe:	0f 84 9e 00 00 00    	je     c0010e62 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010dc4:	89 e9                	mov    ecx,ebp
c0010dc6:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010dcc:	bf 01 00 00 00       	mov    edi,0x1
c0010dd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dd4:	d3 e7                	shl    edi,cl
c0010dd6:	31 c9                	xor    ecx,ecx
c0010dd8:	b8 01 00 00 00       	mov    eax,0x1
c0010ddd:	d3 e0                	shl    eax,cl
c0010ddf:	85 04 24             	test   DWORD PTR [esp],eax
c0010de2:	74 06                	je     c0010dea <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010de4:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010de8:	75 67                	jne    c0010e51 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dea:	41                   	inc    ecx
c0010deb:	83 f9 11             	cmp    ecx,0x11
c0010dee:	75 e8                	jne    c0010dd8 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010df0:	46                   	inc    esi
c0010df1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010df4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dfa:	09 f8                	or     eax,edi
c0010dfc:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010e07:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010e0d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e14:	31 c0                	xor    eax,eax
c0010e16:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010e1e:	74 09                	je     c0010e29 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010e20:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010e27:	eb 06                	jmp    c0010e2f <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010e29:	40                   	inc    eax
c0010e2a:	83 f8 08             	cmp    eax,0x8
c0010e2d:	75 e7                	jne    c0010e16 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010e2f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010e36:	83 fd 09             	cmp    ebp,0x9
c0010e39:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e3b:	75 07                	jne    c0010e44 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010e3d:	b8 1c 0c 01 c0       	mov    eax,0xc0010c1c
c0010e42:	eb 31                	jmp    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e44:	83 f8 01             	cmp    eax,0x1
c0010e47:	75 0c                	jne    c0010e55 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e49:	f7 d7                	not    edi
c0010e4b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e51:	31 c0                	xor    eax,eax
c0010e53:	eb 20                	jmp    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 1c                	jne    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e59:	8b 04 ad 80 20 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddf80]
c0010e60:	eb 13                	jmp    c0010e75 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e62:	46                   	inc    esi
c0010e63:	41                   	inc    ecx
c0010e64:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e6a:	83 f9 08             	cmp    ecx,0x8
c0010e6d:	0f 85 36 ff ff ff    	jne    c0010da9 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e73:	eb dc                	jmp    c0010e51 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e75:	5a                   	pop    edx
c0010e76:	5b                   	pop    ebx
c0010e77:	5e                   	pop    esi
c0010e78:	5f                   	pop    edi
c0010e79:	5d                   	pop    ebp
c0010e7a:	c3                   	ret    

c0010e7b <KiCheckSignalZ>:
c0010e7b:	83 ec 10             	sub    esp,0x10
c0010e7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e82:	50                   	push   eax
c0010e83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e8b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e91:	e8 f6 fe ff ff       	call   c0010d8c <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e96:	5a                   	pop    edx
c0010e97:	31 d2                	xor    edx,edx
c0010e99:	59                   	pop    ecx
c0010e9a:	85 c0                	test   eax,eax
c0010e9c:	74 19                	je     c0010eb7 <KiCheckSignalZ+0x3c>
c0010e9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010ea4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010ea7:	89 02                	mov    DWORD PTR [edx],eax
c0010ea9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010eb4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010eb7:	89 d0                	mov    eax,edx
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	c3                   	ret    

c0010ebd <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010ebd:	56                   	push   esi
c0010ebe:	53                   	push   ebx
c0010ebf:	bb 01 00 00 00       	mov    ebx,0x1
c0010ec4:	52                   	push   edx
c0010ec5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ec9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ecd:	d3 e3                	shl    ebx,cl
c0010ecf:	83 f9 10             	cmp    ecx,0x10
c0010ed2:	7f 08                	jg     c0010edc <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010ed4:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010eda:	75 10                	jne    c0010eec <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010edc:	83 ec 0c             	sub    esp,0xc
c0010edf:	68 ed 0c 02 c0       	push   0xc0020ced
c0010ee4:	e8 8a f9 ff ff       	call   c0010873 <KePanic(char const*)>
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	f7 d3                	not    ebx
c0010eee:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010ef4:	58                   	pop    eax
c0010ef5:	5b                   	pop    ebx
c0010ef6:	5e                   	pop    esi
c0010ef7:	c3                   	ret    

c0010ef8 <KiFinishSignalZ>:
c0010ef8:	53                   	push   ebx
c0010ef9:	83 ec 10             	sub    esp,0x10
c0010efc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010f00:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f0b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010f11:	e8 a7 ff ff ff       	call   c0010ebd <KeCompleteSignal(SigHandlerBlock*, int)>
c0010f16:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f1c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010f23:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010f2a:	83 c4 18             	add    esp,0x18
c0010f2d:	5b                   	pop    ebx
c0010f2e:	c3                   	ret    

c0010f2f <SysSeekDir(regs*)>:
c0010f2f:	31 c0                	xor    eax,eax
c0010f31:	31 d2                	xor    edx,edx
c0010f33:	c3                   	ret    

c0010f34 <SysTellDir(regs*)>:
c0010f34:	31 c0                	xor    eax,eax
c0010f36:	31 d2                	xor    edx,edx
c0010f38:	c3                   	ret    

c0010f39 <SysVerify(regs*)>:
c0010f39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f3d:	31 d2                	xor    edx,edx
c0010f3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f42:	c3                   	ret    

c0010f43 <SysGetArgc(regs*)>:
c0010f43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f4b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f51:	89 c2                	mov    edx,eax
c0010f53:	c1 fa 1f             	sar    edx,0x1f
c0010f56:	c3                   	ret    

c0010f57 <SysTTYName(regs*)>:
c0010f57:	b8 01 00 00 00       	mov    eax,0x1
c0010f5c:	31 d2                	xor    edx,edx
c0010f5e:	c3                   	ret    

c0010f5f <SysFormatDisk(regs*)>:
c0010f5f:	56                   	push   esi
c0010f60:	53                   	push   ebx
c0010f61:	83 ec 04             	sub    esp,0x4
c0010f64:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f68:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f6e:	eb 28                	jmp    c0010f98 <SysFormatDisk(regs*)+0x39>
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f76:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f7b:	51                   	push   ecx
c0010f7c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f7f:	51                   	push   ecx
c0010f80:	50                   	push   eax
c0010f81:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f88:	50                   	push   eax
c0010f89:	53                   	push   ebx
c0010f8a:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f8d:	83 c4 20             	add    esp,0x20
c0010f90:	83 f8 08             	cmp    eax,0x8
c0010f93:	75 14                	jne    c0010fa9 <SysFormatDisk(regs*)+0x4a>
c0010f95:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f98:	85 db                	test   ebx,ebx
c0010f9a:	75 d4                	jne    c0010f70 <SysFormatDisk(regs*)+0x11>
c0010f9c:	83 c4 04             	add    esp,0x4
c0010f9f:	b8 03 00 00 00       	mov    eax,0x3
c0010fa4:	31 d2                	xor    edx,edx
c0010fa6:	5b                   	pop    ebx
c0010fa7:	5e                   	pop    esi
c0010fa8:	c3                   	ret    
c0010fa9:	85 c0                	test   eax,eax
c0010fab:	74 1f                	je     c0010fcc <SysFormatDisk(regs*)+0x6d>
c0010fad:	83 f8 09             	cmp    eax,0x9
c0010fb0:	74 0d                	je     c0010fbf <SysFormatDisk(regs*)+0x60>
c0010fb2:	83 c4 04             	add    esp,0x4
c0010fb5:	b8 02 00 00 00       	mov    eax,0x2
c0010fba:	31 d2                	xor    edx,edx
c0010fbc:	5b                   	pop    ebx
c0010fbd:	5e                   	pop    esi
c0010fbe:	c3                   	ret    
c0010fbf:	83 c4 04             	add    esp,0x4
c0010fc2:	b8 01 00 00 00       	mov    eax,0x1
c0010fc7:	31 d2                	xor    edx,edx
c0010fc9:	5b                   	pop    ebx
c0010fca:	5e                   	pop    esi
c0010fcb:	c3                   	ret    
c0010fcc:	83 c4 04             	add    esp,0x4
c0010fcf:	31 c0                	xor    eax,eax
c0010fd1:	31 d2                	xor    edx,edx
c0010fd3:	5b                   	pop    ebx
c0010fd4:	5e                   	pop    esi
c0010fd5:	c3                   	ret    

c0010fd6 <SysSetDiskVolumeLabel(regs*)>:
c0010fd6:	56                   	push   esi
c0010fd7:	53                   	push   ebx
c0010fd8:	83 ec 04             	sub    esp,0x4
c0010fdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fdf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fe2:	83 f8 19             	cmp    eax,0x19
c0010fe5:	77 33                	ja     c001101a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fe7:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010fee:	85 c9                	test   ecx,ecx
c0010ff0:	74 28                	je     c001101a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010ff2:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010ff5:	85 db                	test   ebx,ebx
c0010ff7:	74 21                	je     c001101a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010ff9:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010fff:	85 d2                	test   edx,edx
c0011001:	74 17                	je     c001101a <SysSetDiskVolumeLabel(regs*)+0x44>
c0011003:	8b 32                	mov    esi,DWORD PTR [edx]
c0011005:	53                   	push   ebx
c0011006:	50                   	push   eax
c0011007:	51                   	push   ecx
c0011008:	52                   	push   edx
c0011009:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001100c:	83 c4 10             	add    esp,0x10
c001100f:	89 c2                	mov    edx,eax
c0011011:	83 c4 04             	add    esp,0x4
c0011014:	c1 fa 1f             	sar    edx,0x1f
c0011017:	5b                   	pop    ebx
c0011018:	5e                   	pop    esi
c0011019:	c3                   	ret    
c001101a:	83 c4 04             	add    esp,0x4
c001101d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011022:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011027:	5b                   	pop    ebx
c0011028:	5e                   	pop    esi
c0011029:	c3                   	ret    

c001102a <SysGetDiskVolumeLabel(regs*)>:
c001102a:	57                   	push   edi
c001102b:	56                   	push   esi
c001102c:	53                   	push   ebx
c001102d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011031:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011034:	83 fa 19             	cmp    edx,0x19
c0011037:	77 3c                	ja     c0011075 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011039:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0011040:	85 c9                	test   ecx,ecx
c0011042:	74 31                	je     c0011075 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011044:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011047:	85 db                	test   ebx,ebx
c0011049:	74 2a                	je     c0011075 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001104b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001104e:	85 f6                	test   esi,esi
c0011050:	74 23                	je     c0011075 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011052:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011058:	85 c0                	test   eax,eax
c001105a:	74 19                	je     c0011075 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001105c:	83 ec 0c             	sub    esp,0xc
c001105f:	8b 38                	mov    edi,DWORD PTR [eax]
c0011061:	56                   	push   esi
c0011062:	53                   	push   ebx
c0011063:	52                   	push   edx
c0011064:	51                   	push   ecx
c0011065:	50                   	push   eax
c0011066:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011069:	83 c4 20             	add    esp,0x20
c001106c:	89 c2                	mov    edx,eax
c001106e:	5b                   	pop    ebx
c001106f:	c1 fa 1f             	sar    edx,0x1f
c0011072:	5e                   	pop    esi
c0011073:	5f                   	pop    edi
c0011074:	c3                   	ret    
c0011075:	5b                   	pop    ebx
c0011076:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001107b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011080:	5e                   	pop    esi
c0011081:	5f                   	pop    edi
c0011082:	c3                   	ret    

c0011083 <SysShutdown(regs*)>:
c0011083:	83 ec 0c             	sub    esp,0xc
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001108d:	85 c0                	test   eax,eax
c001108f:	74 18                	je     c00110a9 <SysShutdown(regs*)+0x26>
c0011091:	83 f8 01             	cmp    eax,0x1
c0011094:	74 38                	je     c00110ce <SysShutdown(regs*)+0x4b>
c0011096:	83 f8 02             	cmp    eax,0x2
c0011099:	74 24                	je     c00110bf <SysShutdown(regs*)+0x3c>
c001109b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110a5:	83 c4 0c             	add    esp,0xc
c00110a8:	c3                   	ret    
c00110a9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00110b0:	6a 00                	push   0x0
c00110b2:	6a 00                	push   0x0
c00110b4:	6a 00                	push   0x0
c00110b6:	50                   	push   eax
c00110b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110ba:	83 c4 10             	add    esp,0x10
c00110bd:	eb dc                	jmp    c001109b <SysShutdown(regs*)+0x18>
c00110bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00110c6:	6a 00                	push   0x0
c00110c8:	6a 00                	push   0x0
c00110ca:	6a 01                	push   0x1
c00110cc:	eb e8                	jmp    c00110b6 <SysShutdown(regs*)+0x33>
c00110ce:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110d3:	85 c0                	test   eax,eax
c00110d5:	74 02                	je     c00110d9 <SysShutdown(regs*)+0x56>
c00110d7:	ff d0                	call   eax
c00110d9:	31 c0                	xor    eax,eax
c00110db:	31 d2                	xor    edx,edx
c00110dd:	83 c4 0c             	add    esp,0xc
c00110e0:	c3                   	ret    

c00110e1 <SysRealpath(regs*)>:
c00110e1:	83 ec 0c             	sub    esp,0xc
c00110e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00110eb:	85 d2                	test   edx,edx
c00110ed:	74 07                	je     c00110f6 <SysRealpath(regs*)+0x15>
c00110ef:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00110f2:	85 c0                	test   eax,eax
c00110f4:	75 0b                	jne    c0011101 <SysRealpath(regs*)+0x20>
c00110f6:	b8 01 00 00 00       	mov    eax,0x1
c00110fb:	31 d2                	xor    edx,edx
c00110fd:	83 c4 0c             	add    esp,0xc
c0011100:	c3                   	ret    
c0011101:	83 ec 04             	sub    esp,0x4
c0011104:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001110a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001110d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011113:	51                   	push   ecx
c0011114:	52                   	push   edx
c0011115:	50                   	push   eax
c0011116:	e8 47 9c ff ff       	call   c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)>
c001111b:	83 c4 10             	add    esp,0x10
c001111e:	31 c0                	xor    eax,eax
c0011120:	31 d2                	xor    edx,edx
c0011122:	83 c4 0c             	add    esp,0xc
c0011125:	c3                   	ret    

c0011126 <SysReadDir(regs*)>:
c0011126:	53                   	push   ebx
c0011127:	83 ec 18             	sub    esp,0x18
c001112a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001112e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011131:	83 f8 02             	cmp    eax,0x2
c0011134:	76 61                	jbe    c0011197 <SysReadDir(regs*)+0x71>
c0011136:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001113d:	77 49                	ja     c0011188 <SysReadDir(regs*)+0x62>
c001113f:	83 ec 0c             	sub    esp,0xc
c0011142:	50                   	push   eax
c0011143:	e8 7b 83 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	85 c0                	test   eax,eax
c001114d:	74 39                	je     c0011188 <SysReadDir(regs*)+0x62>
c001114f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011157:	83 ec 0c             	sub    esp,0xc
c001115a:	8b 10                	mov    edx,DWORD PTR [eax]
c001115c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011160:	51                   	push   ecx
c0011161:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011164:	51                   	push   ecx
c0011165:	6a 00                	push   0x0
c0011167:	68 10 01 00 00       	push   0x110
c001116c:	50                   	push   eax
c001116d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011170:	83 c4 20             	add    esp,0x20
c0011173:	85 c0                	test   eax,eax
c0011175:	74 29                	je     c00111a0 <SysReadDir(regs*)+0x7a>
c0011177:	83 f8 07             	cmp    eax,0x7
c001117a:	74 1b                	je     c0011197 <SysReadDir(regs*)+0x71>
c001117c:	b8 02 00 00 00       	mov    eax,0x2
c0011181:	31 d2                	xor    edx,edx
c0011183:	83 c4 18             	add    esp,0x18
c0011186:	5b                   	pop    ebx
c0011187:	c3                   	ret    
c0011188:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001118d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011192:	83 c4 18             	add    esp,0x18
c0011195:	5b                   	pop    ebx
c0011196:	c3                   	ret    
c0011197:	b8 01 00 00 00       	mov    eax,0x1
c001119c:	31 d2                	xor    edx,edx
c001119e:	eb e3                	jmp    c0011183 <SysReadDir(regs*)+0x5d>
c00111a0:	31 c0                	xor    eax,eax
c00111a2:	31 d2                	xor    edx,edx
c00111a4:	eb dd                	jmp    c0011183 <SysReadDir(regs*)+0x5d>

c00111a6 <SysIsATTY(regs*)>:
c00111a6:	83 ec 0c             	sub    esp,0xc
c00111a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111b0:	83 f8 02             	cmp    eax,0x2
c00111b3:	76 07                	jbe    c00111bc <SysIsATTY(regs*)+0x16>
c00111b5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111ba:	75 26                	jne    c00111e2 <SysIsATTY(regs*)+0x3c>
c00111bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111ca:	85 c0                	test   eax,eax
c00111cc:	74 24                	je     c00111f2 <SysIsATTY(regs*)+0x4c>
c00111ce:	83 ec 0c             	sub    esp,0xc
c00111d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00111d3:	50                   	push   eax
c00111d4:	ff 12                	call   DWORD PTR [edx]
c00111d6:	31 d2                	xor    edx,edx
c00111d8:	0f b6 c0             	movzx  eax,al
c00111db:	83 c4 10             	add    esp,0x10
c00111de:	83 c4 0c             	add    esp,0xc
c00111e1:	c3                   	ret    
c00111e2:	83 ec 0c             	sub    esp,0xc
c00111e5:	50                   	push   eax
c00111e6:	e8 d8 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00111eb:	83 c4 10             	add    esp,0x10
c00111ee:	85 c0                	test   eax,eax
c00111f0:	75 dc                	jne    c00111ce <SysIsATTY(regs*)+0x28>
c00111f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111fc:	83 c4 0c             	add    esp,0xc
c00111ff:	c3                   	ret    

c0011200 <SysSeek(regs*)>:
c0011200:	53                   	push   ebx
c0011201:	83 ec 08             	sub    esp,0x8
c0011204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011208:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001120b:	8d 50 fd             	lea    edx,[eax-0x3]
c001120e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011214:	77 32                	ja     c0011248 <SysSeek(regs*)+0x48>
c0011216:	83 ec 0c             	sub    esp,0xc
c0011219:	50                   	push   eax
c001121a:	e8 a4 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001121f:	83 c4 0c             	add    esp,0xc
c0011222:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011225:	31 db                	xor    ebx,ebx
c0011227:	53                   	push   ebx
c0011228:	51                   	push   ecx
c0011229:	50                   	push   eax
c001122a:	e8 63 9e ff ff       	call   c000b092 <File::seek(unsigned long long)>
c001122f:	83 c4 10             	add    esp,0x10
c0011232:	85 c0                	test   eax,eax
c0011234:	0f 95 c0             	setne  al
c0011237:	31 d2                	xor    edx,edx
c0011239:	0f b6 c0             	movzx  eax,al
c001123c:	f7 d8                	neg    eax
c001123e:	83 d2 00             	adc    edx,0x0
c0011241:	83 c4 08             	add    esp,0x8
c0011244:	f7 da                	neg    edx
c0011246:	5b                   	pop    ebx
c0011247:	c3                   	ret    
c0011248:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001124d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011252:	83 c4 08             	add    esp,0x8
c0011255:	5b                   	pop    ebx
c0011256:	c3                   	ret    

c0011257 <SysTell(regs*)>:
c0011257:	53                   	push   ebx
c0011258:	83 ec 08             	sub    esp,0x8
c001125b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001125f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011262:	83 f8 02             	cmp    eax,0x2
c0011265:	76 4e                	jbe    c00112b5 <SysTell(regs*)+0x5e>
c0011267:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001126c:	76 19                	jbe    c0011287 <SysTell(regs*)+0x30>
c001126e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011271:	31 d2                	xor    edx,edx
c0011273:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011279:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011280:	31 c0                	xor    eax,eax
c0011282:	83 c4 08             	add    esp,0x8
c0011285:	5b                   	pop    ebx
c0011286:	c3                   	ret    
c0011287:	83 ec 0c             	sub    esp,0xc
c001128a:	50                   	push   eax
c001128b:	e8 33 82 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011290:	5a                   	pop    edx
c0011291:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011294:	59                   	pop    ecx
c0011295:	53                   	push   ebx
c0011296:	50                   	push   eax
c0011297:	e8 4c 9e ff ff       	call   c000b0e8 <File::tell(unsigned long long*)>
c001129c:	83 c4 10             	add    esp,0x10
c001129f:	85 c0                	test   eax,eax
c00112a1:	0f 95 c0             	setne  al
c00112a4:	31 d2                	xor    edx,edx
c00112a6:	0f b6 c0             	movzx  eax,al
c00112a9:	f7 d8                	neg    eax
c00112ab:	83 d2 00             	adc    edx,0x0
c00112ae:	83 c4 08             	add    esp,0x8
c00112b1:	f7 da                	neg    edx
c00112b3:	5b                   	pop    ebx
c00112b4:	c3                   	ret    
c00112b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112bf:	83 c4 08             	add    esp,0x8
c00112c2:	5b                   	pop    ebx
c00112c3:	c3                   	ret    

c00112c4 <SysSize(regs*)>:
c00112c4:	53                   	push   ebx
c00112c5:	83 ec 18             	sub    esp,0x18
c00112c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112cf:	83 f8 02             	cmp    eax,0x2
c00112d2:	76 54                	jbe    c0011328 <SysSize(regs*)+0x64>
c00112d4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112d9:	76 19                	jbe    c00112f4 <SysSize(regs*)+0x30>
c00112db:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112de:	31 d2                	xor    edx,edx
c00112e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ed:	31 c0                	xor    eax,eax
c00112ef:	83 c4 18             	add    esp,0x18
c00112f2:	5b                   	pop    ebx
c00112f3:	c3                   	ret    
c00112f4:	83 ec 0c             	sub    esp,0xc
c00112f7:	50                   	push   eax
c00112f8:	e8 c6 81 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c00112fd:	83 c4 0c             	add    esp,0xc
c0011300:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011304:	52                   	push   edx
c0011305:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011308:	52                   	push   edx
c0011309:	50                   	push   eax
c001130a:	e8 71 9f ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	85 c0                	test   eax,eax
c0011314:	0f 95 c0             	setne  al
c0011317:	31 d2                	xor    edx,edx
c0011319:	0f b6 c0             	movzx  eax,al
c001131c:	f7 d8                	neg    eax
c001131e:	83 d2 00             	adc    edx,0x0
c0011321:	83 c4 18             	add    esp,0x18
c0011324:	f7 da                	neg    edx
c0011326:	5b                   	pop    ebx
c0011327:	c3                   	ret    
c0011328:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001132d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011332:	83 c4 18             	add    esp,0x18
c0011335:	5b                   	pop    ebx
c0011336:	c3                   	ret    

c0011337 <SysSizeFromFilename(regs*)>:
c0011337:	57                   	push   edi
c0011338:	56                   	push   esi
c0011339:	53                   	push   ebx
c001133a:	83 ec 20             	sub    esp,0x20
c001133d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011341:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011344:	83 fb 02             	cmp    ebx,0x2
c0011347:	0f 86 8a 00 00 00    	jbe    c00113d7 <SysSizeFromFilename(regs*)+0xa0>
c001134d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011353:	76 1b                	jbe    c0011370 <SysSizeFromFilename(regs*)+0x39>
c0011355:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011358:	31 d2                	xor    edx,edx
c001135a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011360:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011367:	83 c4 20             	add    esp,0x20
c001136a:	31 c0                	xor    eax,eax
c001136c:	5b                   	pop    ebx
c001136d:	5e                   	pop    esi
c001136e:	5f                   	pop    edi
c001136f:	c3                   	ret    
c0011370:	83 ec 0c             	sub    esp,0xc
c0011373:	68 14 01 00 00       	push   0x114
c0011378:	e8 31 67 ff ff       	call   c0007aae <malloc>
c001137d:	83 c4 0c             	add    esp,0xc
c0011380:	89 c7                	mov    edi,eax
c0011382:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011387:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001138a:	50                   	push   eax
c001138b:	53                   	push   ebx
c001138c:	57                   	push   edi
c001138d:	e8 86 9b ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011392:	83 c4 0c             	add    esp,0xc
c0011395:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011399:	50                   	push   eax
c001139a:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001139d:	52                   	push   edx
c001139e:	57                   	push   edi
c001139f:	e8 dc 9e ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	85 ff                	test   edi,edi
c00113a9:	74 14                	je     c00113bf <SysSizeFromFilename(regs*)+0x88>
c00113ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113af:	8b 17                	mov    edx,DWORD PTR [edi]
c00113b1:	83 ec 0c             	sub    esp,0xc
c00113b4:	57                   	push   edi
c00113b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113bf:	85 c0                	test   eax,eax
c00113c1:	0f 95 c0             	setne  al
c00113c4:	31 d2                	xor    edx,edx
c00113c6:	0f b6 c0             	movzx  eax,al
c00113c9:	f7 d8                	neg    eax
c00113cb:	83 d2 00             	adc    edx,0x0
c00113ce:	83 c4 20             	add    esp,0x20
c00113d1:	f7 da                	neg    edx
c00113d3:	5b                   	pop    ebx
c00113d4:	5e                   	pop    esi
c00113d5:	5f                   	pop    edi
c00113d6:	c3                   	ret    
c00113d7:	83 c4 20             	add    esp,0x20
c00113da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113df:	5b                   	pop    ebx
c00113e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113e5:	5e                   	pop    esi
c00113e6:	5f                   	pop    edi
c00113e7:	c3                   	ret    

c00113e8 <SysClose(regs*)>:
c00113e8:	53                   	push   ebx
c00113e9:	83 ec 08             	sub    esp,0x8
c00113ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113f3:	83 f8 02             	cmp    eax,0x2
c00113f6:	76 41                	jbe    c0011439 <SysClose(regs*)+0x51>
c00113f8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113fe:	83 fa 01             	cmp    edx,0x1
c0011401:	76 2d                	jbe    c0011430 <SysClose(regs*)+0x48>
c0011403:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011408:	77 2f                	ja     c0011439 <SysClose(regs*)+0x51>
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	50                   	push   eax
c001140e:	e8 b0 80 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011413:	89 c3                	mov    ebx,eax
c0011415:	89 04 24             	mov    DWORD PTR [esp],eax
c0011418:	e8 15 9c ff ff       	call   c000b032 <File::close()>
c001141d:	83 c4 10             	add    esp,0x10
c0011420:	85 db                	test   ebx,ebx
c0011422:	74 0c                	je     c0011430 <SysClose(regs*)+0x48>
c0011424:	83 ec 0c             	sub    esp,0xc
c0011427:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011429:	53                   	push   ebx
c001142a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001142d:	83 c4 10             	add    esp,0x10
c0011430:	31 c0                	xor    eax,eax
c0011432:	31 d2                	xor    edx,edx
c0011434:	83 c4 08             	add    esp,0x8
c0011437:	5b                   	pop    ebx
c0011438:	c3                   	ret    
c0011439:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001143e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011443:	83 c4 08             	add    esp,0x8
c0011446:	5b                   	pop    ebx
c0011447:	c3                   	ret    

c0011448 <SysOpenDir(regs*)>:
c0011448:	56                   	push   esi
c0011449:	53                   	push   ebx
c001144a:	83 ec 04             	sub    esp,0x4
c001144d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011451:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011454:	85 c9                	test   ecx,ecx
c0011456:	74 5d                	je     c00114b5 <SysOpenDir(regs*)+0x6d>
c0011458:	83 ec 0c             	sub    esp,0xc
c001145b:	68 14 01 00 00       	push   0x114
c0011460:	e8 49 66 ff ff       	call   c0007aae <malloc>
c0011465:	83 c4 0c             	add    esp,0xc
c0011468:	89 c6                	mov    esi,eax
c001146a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001146f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011472:	50                   	push   eax
c0011473:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011476:	52                   	push   edx
c0011477:	56                   	push   esi
c0011478:	e8 c1 9f ff ff       	call   c000b43e <Directory::Directory(char const*, Process*)>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 f6                	test   esi,esi
c0011482:	74 31                	je     c00114b5 <SysOpenDir(regs*)+0x6d>
c0011484:	83 ec 0c             	sub    esp,0xc
c0011487:	56                   	push   esi
c0011488:	e8 6d a0 ff ff       	call   c000b4fa <Directory::open()>
c001148d:	83 c4 10             	add    esp,0x10
c0011490:	85 c0                	test   eax,eax
c0011492:	75 21                	jne    c00114b5 <SysOpenDir(regs*)+0x6d>
c0011494:	83 ec 0c             	sub    esp,0xc
c0011497:	56                   	push   esi
c0011498:	e8 29 7d ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c001149d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00114a0:	83 c4 10             	add    esp,0x10
c00114a3:	89 02                	mov    DWORD PTR [edx],eax
c00114a5:	c1 f8 1f             	sar    eax,0x1f
c00114a8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114ab:	83 c4 04             	add    esp,0x4
c00114ae:	31 c0                	xor    eax,eax
c00114b0:	31 d2                	xor    edx,edx
c00114b2:	5b                   	pop    ebx
c00114b3:	5e                   	pop    esi
c00114b4:	c3                   	ret    
c00114b5:	83 c4 04             	add    esp,0x4
c00114b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114c2:	5b                   	pop    ebx
c00114c3:	5e                   	pop    esi
c00114c4:	c3                   	ret    

c00114c5 <SysMakeDir(regs*)>:
c00114c5:	56                   	push   esi
c00114c6:	53                   	push   ebx
c00114c7:	83 ec 10             	sub    esp,0x10
c00114ca:	68 14 01 00 00       	push   0x114
c00114cf:	e8 da 65 ff ff       	call   c0007aae <malloc>
c00114d4:	83 c4 0c             	add    esp,0xc
c00114d7:	89 c3                	mov    ebx,eax
c00114d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114e1:	50                   	push   eax
c00114e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114e6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114e9:	52                   	push   edx
c00114ea:	53                   	push   ebx
c00114eb:	e8 4e 9f ff ff       	call   c000b43e <Directory::Directory(char const*, Process*)>
c00114f0:	83 c4 10             	add    esp,0x10
c00114f3:	85 db                	test   ebx,ebx
c00114f5:	74 2c                	je     c0011523 <SysMakeDir(regs*)+0x5e>
c00114f7:	83 ec 0c             	sub    esp,0xc
c00114fa:	53                   	push   ebx
c00114fb:	e8 da a1 ff ff       	call   c000b6da <Directory::create()>
c0011500:	89 c6                	mov    esi,eax
c0011502:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011504:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011507:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001150a:	83 c4 10             	add    esp,0x10
c001150d:	31 c0                	xor    eax,eax
c001150f:	85 f6                	test   esi,esi
c0011511:	0f 95 c0             	setne  al
c0011514:	31 d2                	xor    edx,edx
c0011516:	f7 d8                	neg    eax
c0011518:	83 d2 00             	adc    edx,0x0
c001151b:	83 c4 04             	add    esp,0x4
c001151e:	f7 da                	neg    edx
c0011520:	5b                   	pop    ebx
c0011521:	5e                   	pop    esi
c0011522:	c3                   	ret    
c0011523:	83 c4 04             	add    esp,0x4
c0011526:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001152b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011530:	5b                   	pop    ebx
c0011531:	5e                   	pop    esi
c0011532:	c3                   	ret    

c0011533 <SysCloseDir(regs*)>:
c0011533:	53                   	push   ebx
c0011534:	83 ec 08             	sub    esp,0x8
c0011537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001153b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001153e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011541:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011547:	77 2f                	ja     c0011578 <SysCloseDir(regs*)+0x45>
c0011549:	83 ec 0c             	sub    esp,0xc
c001154c:	50                   	push   eax
c001154d:	e8 71 7f ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c0011552:	89 c3                	mov    ebx,eax
c0011554:	89 04 24             	mov    DWORD PTR [esp],eax
c0011557:	e8 fa 9f ff ff       	call   c000b556 <Directory::close()>
c001155c:	83 c4 10             	add    esp,0x10
c001155f:	85 db                	test   ebx,ebx
c0011561:	74 0c                	je     c001156f <SysCloseDir(regs*)+0x3c>
c0011563:	83 ec 0c             	sub    esp,0xc
c0011566:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011568:	53                   	push   ebx
c0011569:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001156c:	83 c4 10             	add    esp,0x10
c001156f:	31 c0                	xor    eax,eax
c0011571:	31 d2                	xor    edx,edx
c0011573:	83 c4 08             	add    esp,0x8
c0011576:	5b                   	pop    ebx
c0011577:	c3                   	ret    
c0011578:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001157d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011582:	83 c4 08             	add    esp,0x8
c0011585:	5b                   	pop    ebx
c0011586:	c3                   	ret    

c0011587 <SysWait(regs*)>:
c0011587:	83 ec 10             	sub    esp,0x10
c001158a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001158e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011591:	52                   	push   edx
c0011592:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011595:	51                   	push   ecx
c0011596:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011599:	50                   	push   eax
c001159a:	e8 d5 3c 00 00       	call   c0015274 <waitTask(int, int*, int)>
c001159f:	83 c4 1c             	add    esp,0x1c
c00115a2:	89 c2                	mov    edx,eax
c00115a4:	c1 fa 1f             	sar    edx,0x1f
c00115a7:	c3                   	ret    

c00115a8 <SysNotImpl(regs*)>:
c00115a8:	83 ec 18             	sub    esp,0x18
c00115ab:	68 fe 0c 02 c0       	push   0xc0020cfe
c00115b0:	e8 be f2 ff ff       	call   c0010873 <KePanic(char const*)>
c00115b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115bf:	83 c4 1c             	add    esp,0x1c
c00115c2:	c3                   	ret    

c00115c3 <SysPanic(regs*)>:
c00115c3:	83 ec 18             	sub    esp,0x18
c00115c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115ca:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115cd:	50                   	push   eax
c00115ce:	e8 a0 f2 ff ff       	call   c0010873 <KePanic(char const*)>
c00115d3:	b8 01 00 00 00       	mov    eax,0x1
c00115d8:	31 d2                	xor    edx,edx
c00115da:	83 c4 1c             	add    esp,0x1c
c00115dd:	c3                   	ret    

c00115de <SysRmdir(regs*)>:
c00115de:	56                   	push   esi
c00115df:	53                   	push   ebx
c00115e0:	83 ec 20             	sub    esp,0x20
c00115e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00115e7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115ea:	68 14 01 00 00       	push   0x114
c00115ef:	e8 ba 64 ff ff       	call   c0007aae <malloc>
c00115f4:	83 c4 0c             	add    esp,0xc
c00115f7:	89 c3                	mov    ebx,eax
c00115f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011601:	50                   	push   eax
c0011602:	56                   	push   esi
c0011603:	53                   	push   ebx
c0011604:	e8 0f 99 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011609:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001160c:	e8 3b 9b ff ff       	call   c000b14c <File::unlink()>
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	85 db                	test   ebx,ebx
c0011616:	74 14                	je     c001162c <SysRmdir(regs*)+0x4e>
c0011618:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001161c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001161e:	83 ec 0c             	sub    esp,0xc
c0011621:	53                   	push   ebx
c0011622:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001162c:	85 c0                	test   eax,eax
c001162e:	0f 95 c0             	setne  al
c0011631:	31 d2                	xor    edx,edx
c0011633:	0f b6 c0             	movzx  eax,al
c0011636:	f7 d8                	neg    eax
c0011638:	83 d2 00             	adc    edx,0x0
c001163b:	83 c4 14             	add    esp,0x14
c001163e:	f7 da                	neg    edx
c0011640:	5b                   	pop    ebx
c0011641:	5e                   	pop    esi
c0011642:	c3                   	ret    

c0011643 <SysUnlink(regs*)>:
c0011643:	56                   	push   esi
c0011644:	53                   	push   ebx
c0011645:	83 ec 20             	sub    esp,0x20
c0011648:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001164c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001164f:	68 14 01 00 00       	push   0x114
c0011654:	e8 55 64 ff ff       	call   c0007aae <malloc>
c0011659:	83 c4 0c             	add    esp,0xc
c001165c:	89 c3                	mov    ebx,eax
c001165e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011663:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011666:	50                   	push   eax
c0011667:	56                   	push   esi
c0011668:	53                   	push   ebx
c0011669:	e8 aa 98 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c001166e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011671:	e8 d6 9a ff ff       	call   c000b14c <File::unlink()>
c0011676:	83 c4 10             	add    esp,0x10
c0011679:	85 db                	test   ebx,ebx
c001167b:	74 14                	je     c0011691 <SysUnlink(regs*)+0x4e>
c001167d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011681:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	53                   	push   ebx
c0011687:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001168a:	83 c4 10             	add    esp,0x10
c001168d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011691:	85 c0                	test   eax,eax
c0011693:	0f 95 c0             	setne  al
c0011696:	31 d2                	xor    edx,edx
c0011698:	0f b6 c0             	movzx  eax,al
c001169b:	f7 d8                	neg    eax
c001169d:	83 d2 00             	adc    edx,0x0
c00116a0:	83 c4 14             	add    esp,0x14
c00116a3:	f7 da                	neg    edx
c00116a5:	5b                   	pop    ebx
c00116a6:	5e                   	pop    esi
c00116a7:	c3                   	ret    

c00116a8 <SysGetArgv(regs*)>:
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116af:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116b2:	85 c0                	test   eax,eax
c00116b4:	78 2c                	js     c00116e2 <SysGetArgv(regs*)+0x3a>
c00116b6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116bc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116bf:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116c5:	7d 1b                	jge    c00116e2 <SysGetArgv(regs*)+0x3a>
c00116c7:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116ce:	85 c0                	test   eax,eax
c00116d0:	74 18                	je     c00116ea <SysGetArgv(regs*)+0x42>
c00116d2:	83 ec 08             	sub    esp,0x8
c00116d5:	50                   	push   eax
c00116d6:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116d9:	50                   	push   eax
c00116da:	e8 61 ef fe ff       	call   c0000640 <strcpy>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	31 c0                	xor    eax,eax
c00116e4:	31 d2                	xor    edx,edx
c00116e6:	83 c4 0c             	add    esp,0xc
c00116e9:	c3                   	ret    
c00116ea:	b8 01 00 00 00       	mov    eax,0x1
c00116ef:	31 d2                	xor    edx,edx
c00116f1:	83 c4 0c             	add    esp,0xc
c00116f4:	c3                   	ret    

c00116f5 <SysUSleep(regs*)>:
c00116f5:	83 ec 1c             	sub    esp,0x1c
c00116f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00116fc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00116ff:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011702:	6a 00                	push   0x0
c0011704:	6a 64                	push   0x64
c0011706:	52                   	push   edx
c0011707:	50                   	push   eax
c0011708:	e8 a3 ce 00 00       	call   c001e5b0 <__udivdi3>
c001170d:	83 c4 14             	add    esp,0x14
c0011710:	50                   	push   eax
c0011711:	e8 42 3c 00 00       	call   c0015358 <milliTenthSleep(unsigned int)>
c0011716:	31 c0                	xor    eax,eax
c0011718:	31 d2                	xor    edx,edx
c001171a:	83 c4 1c             	add    esp,0x1c
c001171d:	c3                   	ret    

c001171e <SysSpawn(regs*)>:
c001171e:	56                   	push   esi
c001171f:	53                   	push   ebx
c0011720:	83 ec 04             	sub    esp,0x4
c0011723:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011727:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001172a:	85 f6                	test   esi,esi
c001172c:	75 0a                	jne    c0011738 <SysSpawn(regs*)+0x1a>
c001172e:	83 c4 04             	add    esp,0x4
c0011731:	31 c0                	xor    eax,eax
c0011733:	31 d2                	xor    edx,edx
c0011735:	5b                   	pop    ebx
c0011736:	5e                   	pop    esi
c0011737:	c3                   	ret    
c0011738:	83 ec 0c             	sub    esp,0xc
c001173b:	68 24 07 00 00       	push   0x724
c0011740:	e8 69 63 ff ff       	call   c0007aae <malloc>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001174b:	89 c6                	mov    esi,eax
c001174d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011750:	85 c9                	test   ecx,ecx
c0011752:	75 39                	jne    c001178d <SysSpawn(regs*)+0x6f>
c0011754:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011759:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001175c:	52                   	push   edx
c001175d:	50                   	push   eax
c001175e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011761:	50                   	push   eax
c0011762:	56                   	push   esi
c0011763:	e8 40 32 00 00       	call   c00149a8 <Process::Process(char const*, Process*, char**)>
c0011768:	83 c4 10             	add    esp,0x10
c001176b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011772:	75 ba                	jne    c001172e <SysSpawn(regs*)+0x10>
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	56                   	push   esi
c0011778:	e8 67 37 00 00       	call   c0014ee4 <Process::createUserThread()>
c001177d:	8b 06                	mov    eax,DWORD PTR [esi]
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	89 c2                	mov    edx,eax
c0011784:	83 c4 04             	add    esp,0x4
c0011787:	c1 fa 1f             	sar    edx,0x1f
c001178a:	5b                   	pop    ebx
c001178b:	5e                   	pop    esi
c001178c:	c3                   	ret    
c001178d:	31 c0                	xor    eax,eax
c001178f:	eb cb                	jmp    c001175c <SysSpawn(regs*)+0x3e>

c0011791 <SysGetEnv(regs*)>:
c0011791:	57                   	push   edi
c0011792:	56                   	push   esi
c0011793:	53                   	push   ebx
c0011794:	83 ec 1c             	sub    esp,0x1c
c0011797:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001179b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117a0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00117a3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00117a6:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00117a9:	51                   	push   ecx
c00117aa:	e8 7c ef ff ff       	call   c001072b <Krnl::getProcessTotalEnvCount(Process*)>
c00117af:	83 c4 10             	add    esp,0x10
c00117b2:	39 c7                	cmp    edi,eax
c00117b4:	7c 14                	jl     c00117ca <SysGetEnv(regs*)+0x39>
c00117b6:	85 f6                	test   esi,esi
c00117b8:	75 0b                	jne    c00117c5 <SysGetEnv(regs*)+0x34>
c00117ba:	83 c4 10             	add    esp,0x10
c00117bd:	31 c0                	xor    eax,eax
c00117bf:	5b                   	pop    ebx
c00117c0:	31 d2                	xor    edx,edx
c00117c2:	5e                   	pop    esi
c00117c3:	5f                   	pop    edi
c00117c4:	c3                   	ret    
c00117c5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117c8:	eb f0                	jmp    c00117ba <SysGetEnv(regs*)+0x29>
c00117ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117ce:	83 ec 04             	sub    esp,0x4
c00117d1:	57                   	push   edi
c00117d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117d8:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117db:	57                   	push   edi
c00117dc:	50                   	push   eax
c00117dd:	e8 69 ef ff ff       	call   c001074b <Krnl::getProcessEnvPair(Process*, int)>
c00117e2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117ed:	83 c4 0c             	add    esp,0xc
c00117f0:	85 d2                	test   edx,edx
c00117f2:	75 23                	jne    c0011817 <SysGetEnv(regs*)+0x86>
c00117f4:	83 ec 0c             	sub    esp,0xc
c00117f7:	50                   	push   eax
c00117f8:	e8 73 ed fe ff       	call   c0000570 <strlen>
c00117fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011800:	89 c3                	mov    ebx,eax
c0011802:	e8 69 ed fe ff       	call   c0000570 <strlen>
c0011807:	83 c4 10             	add    esp,0x10
c001180a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	31 d2                	xor    edx,edx
c0011813:	5b                   	pop    ebx
c0011814:	5e                   	pop    esi
c0011815:	5f                   	pop    edi
c0011816:	c3                   	ret    
c0011817:	83 ec 08             	sub    esp,0x8
c001181a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001181d:	50                   	push   eax
c001181e:	56                   	push   esi
c001181f:	e8 1c ee fe ff       	call   c0000640 <strcpy>
c0011824:	58                   	pop    eax
c0011825:	5a                   	pop    edx
c0011826:	68 18 0d 02 c0       	push   0xc0020d18
c001182b:	56                   	push   esi
c001182c:	e8 0f f0 fe ff       	call   c0000840 <strcat>
c0011831:	59                   	pop    ecx
c0011832:	5b                   	pop    ebx
c0011833:	57                   	push   edi
c0011834:	56                   	push   esi
c0011835:	e8 06 f0 fe ff       	call   c0000840 <strcat>
c001183a:	83 c4 10             	add    esp,0x10
c001183d:	e9 78 ff ff ff       	jmp    c00117ba <SysGetEnv(regs*)+0x29>

c0011842 <SysSetFatAttrib(regs*)>:
c0011842:	57                   	push   edi
c0011843:	56                   	push   esi
c0011844:	53                   	push   ebx
c0011845:	83 ec 1c             	sub    esp,0x1c
c0011848:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001184c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001184f:	68 14 01 00 00       	push   0x114
c0011854:	e8 55 62 ff ff       	call   c0007aae <malloc>
c0011859:	83 c4 0c             	add    esp,0xc
c001185c:	89 c3                	mov    ebx,eax
c001185e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011863:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011866:	50                   	push   eax
c0011867:	57                   	push   edi
c0011868:	53                   	push   ebx
c0011869:	e8 aa 96 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c001186e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011871:	83 c4 0c             	add    esp,0xc
c0011874:	0f b6 d4             	movzx  edx,ah
c0011877:	0f b6 c0             	movzx  eax,al
c001187a:	52                   	push   edx
c001187b:	50                   	push   eax
c001187c:	53                   	push   ebx
c001187d:	e8 64 99 ff ff       	call   c000b1e6 <File::chfatattr(unsigned char, unsigned char)>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	85 db                	test   ebx,ebx
c0011887:	74 14                	je     c001189d <SysSetFatAttrib(regs*)+0x5b>
c0011889:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001188d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001188f:	83 ec 0c             	sub    esp,0xc
c0011892:	53                   	push   ebx
c0011893:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001189d:	85 c0                	test   eax,eax
c001189f:	0f 95 c0             	setne  al
c00118a2:	31 d2                	xor    edx,edx
c00118a4:	0f b6 c0             	movzx  eax,al
c00118a7:	f7 d8                	neg    eax
c00118a9:	83 d2 00             	adc    edx,0x0
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	f7 da                	neg    edx
c00118b1:	5b                   	pop    ebx
c00118b2:	5e                   	pop    esi
c00118b3:	5f                   	pop    edi
c00118b4:	c3                   	ret    

c00118b5 <SysPipe(regs*)>:
c00118b5:	57                   	push   edi
c00118b6:	56                   	push   esi
c00118b7:	53                   	push   ebx
c00118b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118bc:	83 ec 0c             	sub    esp,0xc
c00118bf:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00118c2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118c5:	6a 20                	push   0x20
c00118c7:	e8 e2 61 ff ff       	call   c0007aae <malloc>
c00118cc:	89 c3                	mov    ebx,eax
c00118ce:	58                   	pop    eax
c00118cf:	5a                   	pop    edx
c00118d0:	68 00 50 00 00       	push   0x5000
c00118d5:	53                   	push   ebx
c00118d6:	e8 37 6b ff ff       	call   c0008412 <Pipe::Pipe(int)>
c00118db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118de:	e8 e3 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c00118e3:	89 07                	mov    DWORD PTR [edi],eax
c00118e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118e8:	e8 d9 78 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c00118ed:	83 c4 10             	add    esp,0x10
c00118f0:	89 06                	mov    DWORD PTR [esi],eax
c00118f2:	31 d2                	xor    edx,edx
c00118f4:	5b                   	pop    ebx
c00118f5:	31 c0                	xor    eax,eax
c00118f7:	5e                   	pop    esi
c00118f8:	5f                   	pop    edi
c00118f9:	c3                   	ret    

c00118fa <SysGetUnixTime(regs*)>:
c00118fa:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011905:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011909:	e9 10 a0 ff ff       	jmp    c000b91e <Clock::timeInSecondsLocal()>

c001190e <string_ends_with(char const*, char const*)>:
c001190e:	57                   	push   edi
c001190f:	56                   	push   esi
c0011910:	53                   	push   ebx
c0011911:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011915:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011919:	83 ec 0c             	sub    esp,0xc
c001191c:	53                   	push   ebx
c001191d:	e8 4e ec fe ff       	call   c0000570 <strlen>
c0011922:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011925:	89 c6                	mov    esi,eax
c0011927:	e8 44 ec fe ff       	call   c0000570 <strlen>
c001192c:	83 c4 10             	add    esp,0x10
c001192f:	39 c6                	cmp    esi,eax
c0011931:	7d 06                	jge    c0011939 <string_ends_with(char const*, char const*)+0x2b>
c0011933:	5b                   	pop    ebx
c0011934:	31 c0                	xor    eax,eax
c0011936:	5e                   	pop    esi
c0011937:	5f                   	pop    edi
c0011938:	c3                   	ret    
c0011939:	83 ec 08             	sub    esp,0x8
c001193c:	29 c6                	sub    esi,eax
c001193e:	57                   	push   edi
c001193f:	01 f3                	add    ebx,esi
c0011941:	53                   	push   ebx
c0011942:	e8 09 ee fe ff       	call   c0000750 <strcmp>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	85 c0                	test   eax,eax
c001194c:	5b                   	pop    ebx
c001194d:	0f 94 c0             	sete   al
c0011950:	5e                   	pop    esi
c0011951:	0f b6 c0             	movzx  eax,al
c0011954:	5f                   	pop    edi
c0011955:	c3                   	ret    

c0011956 <SysOpen(regs*)>:
c0011956:	56                   	push   esi
c0011957:	53                   	push   ebx
c0011958:	81 ec 04 01 00 00    	sub    esp,0x104
c001195e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011965:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011968:	85 c0                	test   eax,eax
c001196a:	0f 84 bd 01 00 00    	je     c0011b2d <SysOpen(regs*)+0x1d7>
c0011970:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011973:	85 c0                	test   eax,eax
c0011975:	0f 84 b2 01 00 00    	je     c0011b2d <SysOpen(regs*)+0x1d7>
c001197b:	83 ec 04             	sub    esp,0x4
c001197e:	68 1a 0d 02 c0       	push   0xc0020d1a
c0011983:	50                   	push   eax
c0011984:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011988:	56                   	push   esi
c0011989:	e8 d4 93 ff ff       	call   c000ad62 <Fs::standardiseFiles(char*, char const*, char const*)>
c001198e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011991:	e8 da eb fe ff       	call   c0000570 <strlen>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	83 e8 01             	sub    eax,0x1
c001199c:	74 21                	je     c00119bf <SysOpen(regs*)+0x69>
c001199e:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00119a2:	eb 12                	jmp    c00119b6 <SysOpen(regs*)+0x60>
c00119a4:	83 fa 3a             	cmp    edx,0x3a
c00119a7:	74 12                	je     c00119bb <SysOpen(regs*)+0x65>
c00119a9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00119ad:	83 e8 01             	sub    eax,0x1
c00119b0:	74 0d                	je     c00119bf <SysOpen(regs*)+0x69>
c00119b2:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00119b6:	83 fa 2e             	cmp    edx,0x2e
c00119b9:	75 e9                	jne    c00119a4 <SysOpen(regs*)+0x4e>
c00119bb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00119bf:	83 ec 08             	sub    esp,0x8
c00119c2:	68 1e 0d 02 c0       	push   0xc0020d1e
c00119c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119ca:	50                   	push   eax
c00119cb:	e8 3e ff ff ff       	call   c001190e <string_ends_with(char const*, char const*)>
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	85 c0                	test   eax,eax
c00119d5:	74 1d                	je     c00119f4 <SysOpen(regs*)+0x9e>
c00119d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119da:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119e7:	81 c4 04 01 00 00    	add    esp,0x104
c00119ed:	31 c0                	xor    eax,eax
c00119ef:	31 d2                	xor    edx,edx
c00119f1:	5b                   	pop    ebx
c00119f2:	5e                   	pop    esi
c00119f3:	c3                   	ret    
c00119f4:	83 ec 08             	sub    esp,0x8
c00119f7:	68 23 0d 02 c0       	push   0xc0020d23
c00119fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119ff:	50                   	push   eax
c0011a00:	e8 09 ff ff ff       	call   c001190e <string_ends_with(char const*, char const*)>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	85 c0                	test   eax,eax
c0011a0a:	75 cb                	jne    c00119d7 <SysOpen(regs*)+0x81>
c0011a0c:	83 ec 08             	sub    esp,0x8
c0011a0f:	68 1f 0d 02 c0       	push   0xc0020d1f
c0011a14:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a17:	50                   	push   eax
c0011a18:	e8 33 ed fe ff       	call   c0000750 <strcmp>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	85 c0                	test   eax,eax
c0011a22:	74 b3                	je     c00119d7 <SysOpen(regs*)+0x81>
c0011a24:	83 ec 08             	sub    esp,0x8
c0011a27:	68 1e 0d 02 c0       	push   0xc0020d1e
c0011a2c:	56                   	push   esi
c0011a2d:	e8 dc fe ff ff       	call   c001190e <string_ends_with(char const*, char const*)>
c0011a32:	83 c4 10             	add    esp,0x10
c0011a35:	85 c0                	test   eax,eax
c0011a37:	75 9e                	jne    c00119d7 <SysOpen(regs*)+0x81>
c0011a39:	83 ec 08             	sub    esp,0x8
c0011a3c:	68 28 0d 02 c0       	push   0xc0020d28
c0011a41:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a44:	50                   	push   eax
c0011a45:	e8 c4 fe ff ff       	call   c001190e <string_ends_with(char const*, char const*)>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	85 c0                	test   eax,eax
c0011a4f:	0f 85 eb 00 00 00    	jne    c0011b40 <SysOpen(regs*)+0x1ea>
c0011a55:	83 ec 08             	sub    esp,0x8
c0011a58:	68 2d 0d 02 c0       	push   0xc0020d2d
c0011a5d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a60:	50                   	push   eax
c0011a61:	e8 a8 fe ff ff       	call   c001190e <string_ends_with(char const*, char const*)>
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	85 c0                	test   eax,eax
c0011a6b:	0f 85 cf 00 00 00    	jne    c0011b40 <SysOpen(regs*)+0x1ea>
c0011a71:	83 ec 08             	sub    esp,0x8
c0011a74:	68 29 0d 02 c0       	push   0xc0020d29
c0011a79:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a7c:	51                   	push   ecx
c0011a7d:	e8 ce ec fe ff       	call   c0000750 <strcmp>
c0011a82:	83 c4 10             	add    esp,0x10
c0011a85:	85 c0                	test   eax,eax
c0011a87:	0f 84 b3 00 00 00    	je     c0011b40 <SysOpen(regs*)+0x1ea>
c0011a8d:	83 ec 08             	sub    esp,0x8
c0011a90:	68 28 0d 02 c0       	push   0xc0020d28
c0011a95:	56                   	push   esi
c0011a96:	e8 73 fe ff ff       	call   c001190e <string_ends_with(char const*, char const*)>
c0011a9b:	83 c4 10             	add    esp,0x10
c0011a9e:	85 c0                	test   eax,eax
c0011aa0:	0f 85 9a 00 00 00    	jne    c0011b40 <SysOpen(regs*)+0x1ea>
c0011aa6:	83 ec 0c             	sub    esp,0xc
c0011aa9:	68 14 01 00 00       	push   0x114
c0011aae:	e8 fb 5f ff ff       	call   c0007aae <malloc>
c0011ab3:	83 c4 0c             	add    esp,0xc
c0011ab6:	89 c6                	mov    esi,eax
c0011ab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011abd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac0:	50                   	push   eax
c0011ac1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ac4:	52                   	push   edx
c0011ac5:	56                   	push   esi
c0011ac6:	e8 4d 94 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	85 f6                	test   esi,esi
c0011ad0:	74 5b                	je     c0011b2d <SysOpen(regs*)+0x1d7>
c0011ad2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ad5:	0f b6 c2             	movzx  eax,dl
c0011ad8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011adb:	89 d0                	mov    eax,edx
c0011add:	83 e0 01             	and    eax,0x1
c0011ae0:	f6 c2 02             	test   dl,0x2
c0011ae3:	74 03                	je     c0011ae8 <SysOpen(regs*)+0x192>
c0011ae5:	83 c8 02             	or     eax,0x2
c0011ae8:	f6 c2 04             	test   dl,0x4
c0011aeb:	74 03                	je     c0011af0 <SysOpen(regs*)+0x19a>
c0011aed:	83 c8 04             	or     eax,0x4
c0011af0:	f6 c2 08             	test   dl,0x8
c0011af3:	74 03                	je     c0011af8 <SysOpen(regs*)+0x1a2>
c0011af5:	83 c8 0a             	or     eax,0xa
c0011af8:	80 e2 10             	and    dl,0x10
c0011afb:	74 03                	je     c0011b00 <SysOpen(regs*)+0x1aa>
c0011afd:	83 c8 12             	or     eax,0x12
c0011b00:	83 ec 08             	sub    esp,0x8
c0011b03:	50                   	push   eax
c0011b04:	56                   	push   esi
c0011b05:	e8 ca 94 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	85 c0                	test   eax,eax
c0011b0f:	75 1c                	jne    c0011b2d <SysOpen(regs*)+0x1d7>
c0011b11:	83 ec 0c             	sub    esp,0xc
c0011b14:	56                   	push   esi
c0011b15:	e8 ac 76 ff ff       	call   c00091c6 <UnixFile::getFileDescriptor()>
c0011b1a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	89 02                	mov    DWORD PTR [edx],eax
c0011b22:	c1 f8 1f             	sar    eax,0x1f
c0011b25:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b28:	e9 ba fe ff ff       	jmp    c00119e7 <SysOpen(regs*)+0x91>
c0011b2d:	81 c4 04 01 00 00    	add    esp,0x104
c0011b33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b38:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b3d:	5b                   	pop    ebx
c0011b3e:	5e                   	pop    esi
c0011b3f:	c3                   	ret    
c0011b40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b43:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b49:	e9 92 fe ff ff       	jmp    c00119e0 <SysOpen(regs*)+0x8a>

c0011b4e <KeSystemCall(regs*, void*)>:
c0011b4e:	53                   	push   ebx
c0011b4f:	83 ec 08             	sub    esp,0x8
c0011b52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b56:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b59:	83 f8 3b             	cmp    eax,0x3b
c0011b5c:	77 16                	ja     c0011b74 <KeSystemCall(regs*, void*)+0x26>
c0011b5e:	8b 14 85 e0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf20]
c0011b65:	85 d2                	test   edx,edx
c0011b67:	74 0b                	je     c0011b74 <KeSystemCall(regs*, void*)+0x26>
c0011b69:	83 ec 0c             	sub    esp,0xc
c0011b6c:	53                   	push   ebx
c0011b6d:	ff d2                	call   edx
c0011b6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b72:	eb 0d                	jmp    c0011b81 <KeSystemCall(regs*, void*)+0x33>
c0011b74:	52                   	push   edx
c0011b75:	52                   	push   edx
c0011b76:	50                   	push   eax
c0011b77:	68 32 0d 02 c0       	push   0xc0020d32
c0011b7c:	e8 15 8e ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0011b81:	83 c4 10             	add    esp,0x10
c0011b84:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b89:	31 d2                	xor    edx,edx
c0011b8b:	83 c4 08             	add    esp,0x8
c0011b8e:	5b                   	pop    ebx
c0011b8f:	c3                   	ret    

c0011b90 <KeSwitchEndian16(unsigned short)>:
c0011b90:	83 ec 04             	sub    esp,0x4
c0011b93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b97:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b9b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b9f:	c1 f8 08             	sar    eax,0x8
c0011ba2:	89 c2                	mov    edx,eax
c0011ba4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011ba8:	c1 e0 08             	shl    eax,0x8
c0011bab:	09 d0                	or     eax,edx
c0011bad:	83 c4 04             	add    esp,0x4
c0011bb0:	c3                   	ret    
c0011bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0011bb4 <KeSwitchEndian32(unsigned int)>:
c0011bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb8:	c1 e8 18             	shr    eax,0x18
c0011bbb:	89 c2                	mov    edx,eax
c0011bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc1:	c1 e0 08             	shl    eax,0x8
c0011bc4:	25 00 00 ff 00       	and    eax,0xff0000
c0011bc9:	09 c2                	or     edx,eax
c0011bcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcf:	c1 e8 08             	shr    eax,0x8
c0011bd2:	25 00 ff 00 00       	and    eax,0xff00
c0011bd7:	09 c2                	or     edx,eax
c0011bd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bdd:	c1 e0 18             	shl    eax,0x18
c0011be0:	09 d0                	or     eax,edx
c0011be2:	c3                   	ret    
c0011be3:	90                   	nop

c0011be4 <EthernetCRC32(unsigned char*, int)>:
c0011be4:	83 ec 10             	sub    esp,0x10
c0011be7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bec:	75 0a                	jne    c0011bf8 <EthernetCRC32(unsigned char*, int)+0x14>
c0011bee:	b8 00 00 00 00       	mov    eax,0x0
c0011bf3:	e9 8c 00 00 00       	jmp    c0011c84 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011bfd:	7f 09                	jg     c0011c08 <EthernetCRC32(unsigned char*, int)+0x24>
c0011bff:	b8 00 00 00 00       	mov    eax,0x0
c0011c04:	eb 7e                	jmp    c0011c84 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c06:	66 90                	xchg   ax,ax
c0011c08:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c1c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c20:	7d 5a                	jge    c0011c7c <EthernetCRC32(unsigned char*, int)+0x98>
c0011c22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c2a:	01 d0                	add    eax,edx
c0011c2c:	8a 00                	mov    al,BYTE PTR [eax]
c0011c2e:	0f b6 c0             	movzx  eax,al
c0011c31:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c40:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c45:	7f 2d                	jg     c0011c74 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c4b:	83 e0 01             	and    eax,0x1
c0011c4e:	74 10                	je     c0011c60 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c54:	d1 e8                	shr    eax,1
c0011c56:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c5b:	eb 0b                	jmp    c0011c68 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c64:	d1 e8                	shr    eax,1
c0011c66:	66 90                	xchg   ax,ax
c0011c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c6c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c71:	eb cd                	jmp    c0011c40 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c73:	90                   	nop
c0011c74:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c79:	eb 9d                	jmp    c0011c18 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c7b:	90                   	nop
c0011c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c80:	f7 d0                	not    eax
c0011c82:	66 90                	xchg   ax,ax
c0011c84:	83 c4 10             	add    esp,0x10
c0011c87:	c3                   	ret    

c0011c88 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c88:	83 ec 2c             	sub    esp,0x2c
c0011c8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c8f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ca3:	0f b7 c0             	movzx  eax,ax
c0011ca6:	3d 06 08 00 00       	cmp    eax,0x806
c0011cab:	75 13                	jne    c0011cc0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011cad:	83 ec 0c             	sub    esp,0xc
c0011cb0:	68 46 0d 02 c0       	push   0xc0020d46
c0011cb5:	e8 dc 8c ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0011cba:	83 c4 10             	add    esp,0x10
c0011cbd:	eb 25                	jmp    c0011ce4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cbf:	90                   	nop
c0011cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cc7:	0f b7 c0             	movzx  eax,ax
c0011cca:	3d 00 08 00 00       	cmp    eax,0x800
c0011ccf:	75 13                	jne    c0011ce4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cd1:	83 ec 0c             	sub    esp,0xc
c0011cd4:	68 5c 0d 02 c0       	push   0xc0020d5c
c0011cd9:	e8 b8 8c ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0011cde:	83 c4 10             	add    esp,0x10
c0011ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ce4:	90                   	nop
c0011ce5:	83 c4 2c             	add    esp,0x2c
c0011ce8:	c3                   	ret    

c0011ce9 <CmOpen(char const*)>:
c0011ce9:	57                   	push   edi
c0011cea:	56                   	push   esi
c0011ceb:	53                   	push   ebx
c0011cec:	83 ec 1c             	sub    esp,0x1c
c0011cef:	6a 30                	push   0x30
c0011cf1:	e8 b8 5d ff ff       	call   c0007aae <malloc>
c0011cf6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cfd:	89 c3                	mov    ebx,eax
c0011cff:	e8 aa 5d ff ff       	call   c0007aae <malloc>
c0011d04:	83 c4 0c             	add    esp,0xc
c0011d07:	89 c6                	mov    esi,eax
c0011d09:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011d0f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d13:	50                   	push   eax
c0011d14:	e8 ff 91 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0011d19:	83 c4 0c             	add    esp,0xc
c0011d1c:	89 33                	mov    DWORD PTR [ebx],esi
c0011d1e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d22:	50                   	push   eax
c0011d23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d27:	50                   	push   eax
c0011d28:	56                   	push   esi
c0011d29:	e8 52 95 ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0011d2e:	5a                   	pop    edx
c0011d2f:	59                   	pop    ecx
c0011d30:	6a 01                	push   0x1
c0011d32:	ff 33                	push   DWORD PTR [ebx]
c0011d34:	e8 9b 92 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0011d39:	5e                   	pop    esi
c0011d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d3e:	e8 6b 5d ff ff       	call   c0007aae <malloc>
c0011d43:	5a                   	pop    edx
c0011d44:	89 c7                	mov    edi,eax
c0011d46:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d4e:	56                   	push   esi
c0011d4f:	57                   	push   edi
c0011d50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d58:	50                   	push   eax
c0011d59:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d5c:	83 c4 14             	add    esp,0x14
c0011d5f:	ff 33                	push   DWORD PTR [ebx]
c0011d61:	e8 cc 92 ff ff       	call   c000b032 <File::close()>
c0011d66:	59                   	pop    ecx
c0011d67:	58                   	pop    eax
c0011d68:	6a 13                	push   0x13
c0011d6a:	ff 33                	push   DWORD PTR [ebx]
c0011d6c:	e8 63 92 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0011d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d73:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d75:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d78:	57                   	push   edi
c0011d79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d81:	50                   	push   eax
c0011d82:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d85:	83 c4 14             	add    esp,0x14
c0011d88:	57                   	push   edi
c0011d89:	e8 30 5d ff ff       	call   c0007abe <free>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d94:	75 10                	jne    c0011da6 <CmOpen(char const*)+0xbd>
c0011d96:	83 ec 0c             	sub    esp,0xc
c0011d99:	68 71 0d 02 c0       	push   0xc0020d71
c0011d9e:	e8 d0 ea ff ff       	call   c0010873 <KePanic(char const*)>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011da9:	50                   	push   eax
c0011daa:	6a 00                	push   0x0
c0011dac:	6a 00                	push   0x0
c0011dae:	ff 33                	push   DWORD PTR [ebx]
c0011db0:	e8 dd 92 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011db5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011db7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011db9:	89 34 24             	mov    DWORD PTR [esp],esi
c0011dbc:	57                   	push   edi
c0011dbd:	6a 00                	push   0x0
c0011dbf:	6a 2b                	push   0x2b
c0011dc1:	50                   	push   eax
c0011dc2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dc5:	83 c4 1c             	add    esp,0x1c
c0011dc8:	6a 00                	push   0x0
c0011dca:	6a 00                	push   0x0
c0011dcc:	ff 33                	push   DWORD PTR [ebx]
c0011dce:	e8 bf 92 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011dd3:	83 c4 0c             	add    esp,0xc
c0011dd6:	6a 08                	push   0x8
c0011dd8:	68 82 0d 02 c0       	push   0xc0020d82
c0011ddd:	57                   	push   edi
c0011dde:	e8 9d e5 fe ff       	call   c0000380 <memcmp>
c0011de3:	83 c4 10             	add    esp,0x10
c0011de6:	85 c0                	test   eax,eax
c0011de8:	74 10                	je     c0011dfa <CmOpen(char const*)+0x111>
c0011dea:	83 ec 0c             	sub    esp,0xc
c0011ded:	68 8b 0d 02 c0       	push   0xc0020d8b
c0011df2:	e8 7c ea ff ff       	call   c0010873 <KePanic(char const*)>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dfe:	89 d8                	mov    eax,ebx
c0011e00:	83 c4 10             	add    esp,0x10
c0011e03:	5b                   	pop    ebx
c0011e04:	5e                   	pop    esi
c0011e05:	5f                   	pop    edi
c0011e06:	c3                   	ret    

c0011e07 <CmClose(Reghive_Tag*)>:
c0011e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011e0f:	74 0b                	je     c0011e1c <CmClose(Reghive_Tag*)+0x15>
c0011e11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e17:	e9 16 92 ff ff       	jmp    c000b032 <File::close()>
c0011e1c:	c3                   	ret    

c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e1d:	53                   	push   ebx
c0011e1e:	83 ec 18             	sub    esp,0x18
c0011e21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e25:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e29:	74 29                	je     c0011e54 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e2b:	50                   	push   eax
c0011e2c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e31:	99                   	cdq    
c0011e32:	52                   	push   edx
c0011e33:	50                   	push   eax
c0011e34:	ff 33                	push   DWORD PTR [ebx]
c0011e36:	e8 57 92 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011e3b:	5a                   	pop    edx
c0011e3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e3e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e42:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e44:	51                   	push   ecx
c0011e45:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e49:	6a 00                	push   0x0
c0011e4b:	6a 2b                	push   0x2b
c0011e4d:	50                   	push   eax
c0011e4e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e51:	83 c4 20             	add    esp,0x20
c0011e54:	83 c4 18             	add    esp,0x18
c0011e57:	5b                   	pop    ebx
c0011e58:	c3                   	ret    

c0011e59 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e59:	55                   	push   ebp
c0011e5a:	57                   	push   edi
c0011e5b:	56                   	push   esi
c0011e5c:	53                   	push   ebx
c0011e5d:	31 db                	xor    ebx,ebx
c0011e5f:	83 ec 70             	sub    esp,0x70
c0011e62:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e69:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e6d:	50                   	push   eax
c0011e6e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e75:	55                   	push   ebp
c0011e76:	e8 a2 ff ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e83:	c1 e0 08             	shl    eax,0x8
c0011e86:	89 c2                	mov    edx,eax
c0011e88:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e8d:	09 d0                	or     eax,edx
c0011e8f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e94:	c1 e0 08             	shl    eax,0x8
c0011e97:	09 d0                	or     eax,edx
c0011e99:	74 25                	je     c0011ec0 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e9b:	6b fb 0d             	imul   edi,ebx,0xd
c0011e9e:	52                   	push   edx
c0011e9f:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011ea3:	52                   	push   edx
c0011ea4:	50                   	push   eax
c0011ea5:	55                   	push   ebp
c0011ea6:	e8 72 ff ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011eab:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011eaf:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011eb6:	b9 27 00 00 00       	mov    ecx,0x27
c0011ebb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	83 c3 03             	add    ebx,0x3
c0011ec3:	83 fb 15             	cmp    ebx,0x15
c0011ec6:	75 b6                	jne    c0011e7e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011ec8:	83 c4 6c             	add    esp,0x6c
c0011ecb:	5b                   	pop    ebx
c0011ecc:	5e                   	pop    esi
c0011ecd:	5f                   	pop    edi
c0011ece:	5d                   	pop    ebp
c0011ecf:	c3                   	ret    

c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011ed0:	83 ec 40             	sub    esp,0x40
c0011ed3:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ed7:	50                   	push   eax
c0011ed8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ee0:	e8 38 ff ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ee5:	83 c4 10             	add    esp,0x10
c0011ee8:	83 c8 ff             	or     eax,0xffffffff
c0011eeb:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011ef0:	75 19                	jne    c0011f0b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011ef2:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ef7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011efc:	c1 e0 08             	shl    eax,0x8
c0011eff:	09 c2                	or     edx,eax
c0011f01:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011f06:	c1 e0 10             	shl    eax,0x10
c0011f09:	09 d0                	or     eax,edx
c0011f0b:	83 c4 3c             	add    esp,0x3c
c0011f0e:	c3                   	ret    

c0011f0f <CmGetNext(Reghive_Tag*, int)>:
c0011f0f:	83 ec 40             	sub    esp,0x40
c0011f12:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f16:	50                   	push   eax
c0011f17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f1f:	e8 f9 fe ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f24:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f29:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f2e:	c1 e0 08             	shl    eax,0x8
c0011f31:	09 c2                	or     edx,eax
c0011f33:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f38:	83 c4 4c             	add    esp,0x4c
c0011f3b:	c1 e0 10             	shl    eax,0x10
c0011f3e:	09 d0                	or     eax,edx
c0011f40:	c3                   	ret    

c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f41:	53                   	push   ebx
c0011f42:	83 ec 18             	sub    esp,0x18
c0011f45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f49:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f4d:	74 29                	je     c0011f78 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f4f:	50                   	push   eax
c0011f50:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f55:	99                   	cdq    
c0011f56:	52                   	push   edx
c0011f57:	50                   	push   eax
c0011f58:	ff 33                	push   DWORD PTR [ebx]
c0011f5a:	e8 33 91 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011f5f:	5a                   	pop    edx
c0011f60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f62:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f66:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f68:	51                   	push   ecx
c0011f69:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f6d:	6a 00                	push   0x0
c0011f6f:	6a 2b                	push   0x2b
c0011f71:	50                   	push   eax
c0011f72:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f75:	83 c4 20             	add    esp,0x20
c0011f78:	83 c4 18             	add    esp,0x18
c0011f7b:	5b                   	pop    ebx
c0011f7c:	c3                   	ret    

c0011f7d <CmFreeExtent(Reghive_Tag*, int)>:
c0011f7d:	53                   	push   ebx
c0011f7e:	83 ec 3c             	sub    esp,0x3c
c0011f81:	6a 2b                	push   0x2b
c0011f83:	6a 00                	push   0x0
c0011f85:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f89:	53                   	push   ebx
c0011f8a:	e8 61 e5 fe ff       	call   c00004f0 <memset>
c0011f8f:	83 c4 0c             	add    esp,0xc
c0011f92:	53                   	push   ebx
c0011f93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f9b:	e8 a1 ff ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fa0:	83 c4 48             	add    esp,0x48
c0011fa3:	5b                   	pop    ebx
c0011fa4:	c3                   	ret    

c0011fa5 <CmUpdateHeader(Reghive_Tag*)>:
c0011fa5:	83 ec 0c             	sub    esp,0xc
c0011fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fac:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011fb0:	74 10                	je     c0011fc2 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011fb2:	52                   	push   edx
c0011fb3:	8d 50 05             	lea    edx,[eax+0x5]
c0011fb6:	52                   	push   edx
c0011fb7:	6a 00                	push   0x0
c0011fb9:	50                   	push   eax
c0011fba:	e8 82 ff ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fbf:	83 c4 10             	add    esp,0x10
c0011fc2:	83 c4 0c             	add    esp,0xc
c0011fc5:	c3                   	ret    

c0011fc6 <CmExpand(Reghive_Tag*, int)>:
c0011fc6:	57                   	push   edi
c0011fc7:	56                   	push   esi
c0011fc8:	83 ce ff             	or     esi,0xffffffff
c0011fcb:	53                   	push   ebx
c0011fcc:	83 ec 30             	sub    esp,0x30
c0011fcf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011fd3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fd7:	74 5f                	je     c0012038 <CmExpand(Reghive_Tag*, int)+0x72>
c0011fd9:	31 d2                	xor    edx,edx
c0011fdb:	31 f6                	xor    esi,esi
c0011fdd:	50                   	push   eax
c0011fde:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fe2:	52                   	push   edx
c0011fe3:	50                   	push   eax
c0011fe4:	ff 33                	push   DWORD PTR [ebx]
c0011fe6:	e8 a7 90 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0011feb:	83 c4 0c             	add    esp,0xc
c0011fee:	6a 2b                	push   0x2b
c0011ff0:	6a 00                	push   0x0
c0011ff2:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011ff6:	57                   	push   edi
c0011ff7:	e8 f4 e4 fe ff       	call   c00004f0 <memset>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012003:	7d 1b                	jge    c0012020 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012005:	83 ec 0c             	sub    esp,0xc
c0012008:	8b 03                	mov    eax,DWORD PTR [ebx]
c001200a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001200e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012010:	46                   	inc    esi
c0012011:	51                   	push   ecx
c0012012:	57                   	push   edi
c0012013:	6a 00                	push   0x0
c0012015:	6a 2b                	push   0x2b
c0012017:	50                   	push   eax
c0012018:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001201b:	83 c4 20             	add    esp,0x20
c001201e:	eb df                	jmp    c0011fff <CmExpand(Reghive_Tag*, int)+0x39>
c0012020:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012024:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012027:	83 ec 0c             	sub    esp,0xc
c001202a:	01 f2                	add    edx,esi
c001202c:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001202f:	53                   	push   ebx
c0012030:	e8 70 ff ff ff       	call   c0011fa5 <CmUpdateHeader(Reghive_Tag*)>
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	83 c4 30             	add    esp,0x30
c001203b:	89 f0                	mov    eax,esi
c001203d:	5b                   	pop    ebx
c001203e:	5e                   	pop    esi
c001203f:	5f                   	pop    edi
c0012040:	c3                   	ret    

c0012041 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012041:	55                   	push   ebp
c0012042:	57                   	push   edi
c0012043:	56                   	push   esi
c0012044:	53                   	push   ebx
c0012045:	83 cb ff             	or     ebx,0xffffffff
c0012048:	83 ec 1c             	sub    esp,0x1c
c001204b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001204f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012053:	74 68                	je     c00120bd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012055:	be 2b 00 00 00       	mov    esi,0x2b
c001205a:	51                   	push   ecx
c001205b:	31 ff                	xor    edi,edi
c001205d:	6a 00                	push   0x0
c001205f:	31 db                	xor    ebx,ebx
c0012061:	6a 00                	push   0x0
c0012063:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012066:	e8 27 90 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012071:	76 3b                	jbe    c00120ae <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012073:	83 ec 0c             	sub    esp,0xc
c0012076:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012079:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001207d:	8b 10                	mov    edx,DWORD PTR [eax]
c001207f:	51                   	push   ecx
c0012080:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012084:	51                   	push   ecx
c0012085:	6a 00                	push   0x0
c0012087:	6a 01                	push   0x1
c0012089:	50                   	push   eax
c001208a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001208d:	83 c4 20             	add    esp,0x20
c0012090:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012095:	74 26                	je     c00120bd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012097:	43                   	inc    ebx
c0012098:	52                   	push   edx
c0012099:	57                   	push   edi
c001209a:	56                   	push   esi
c001209b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001209e:	e8 ef 8f ff ff       	call   c000b092 <File::seek(unsigned long long)>
c00120a3:	83 c6 2b             	add    esi,0x2b
c00120a6:	83 d7 00             	adc    edi,0x0
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	eb c0                	jmp    c001206e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00120ae:	50                   	push   eax
c00120af:	50                   	push   eax
c00120b0:	6a 40                	push   0x40
c00120b2:	55                   	push   ebp
c00120b3:	e8 0e ff ff ff       	call   c0011fc6 <CmExpand(Reghive_Tag*, int)>
c00120b8:	83 c4 10             	add    esp,0x10
c00120bb:	89 c3                	mov    ebx,eax
c00120bd:	83 c4 1c             	add    esp,0x1c
c00120c0:	89 d8                	mov    eax,ebx
c00120c2:	5b                   	pop    ebx
c00120c3:	5e                   	pop    esi
c00120c4:	5f                   	pop    edi
c00120c5:	5d                   	pop    ebp
c00120c6:	c3                   	ret    

c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120c7:	55                   	push   ebp
c00120c8:	57                   	push   edi
c00120c9:	56                   	push   esi
c00120ca:	53                   	push   ebx
c00120cb:	81 ec 88 00 00 00    	sub    esp,0x88
c00120d1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120d8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120df:	e8 5d ff ff ff       	call   c0012041 <CmFindUnusedExtent(Reghive_Tag*)>
c00120e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120e8:	83 c4 0c             	add    esp,0xc
c00120eb:	6a 2b                	push   0x2b
c00120ed:	6a 00                	push   0x0
c00120ef:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120f3:	55                   	push   ebp
c00120f4:	e8 f7 e3 fe ff       	call   c00004f0 <memset>
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	85 db                	test   ebx,ebx
c00120fe:	74 12                	je     c0012112 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012100:	51                   	push   ecx
c0012101:	55                   	push   ebp
c0012102:	53                   	push   ebx
c0012103:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001210a:	e8 0e fd ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012116:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001211d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012122:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012124:	85 db                	test   ebx,ebx
c0012126:	74 49                	je     c0012171 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012128:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001212d:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012132:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012136:	c1 e0 08             	shl    eax,0x8
c0012139:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001213f:	09 c8                	or     eax,ecx
c0012141:	74 11                	je     c0012154 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012143:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012147:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001214b:	c1 e8 10             	shr    eax,0x10
c001214e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012152:	eb 0f                	jmp    c0012163 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012154:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012159:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001215e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012163:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012167:	c1 ea 08             	shr    edx,0x8
c001216a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001216f:	eb 0f                	jmp    c0012180 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012171:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012176:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001217b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012180:	52                   	push   edx
c0012181:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012185:	50                   	push   eax
c0012186:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001218a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012191:	e8 ab fd ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012196:	83 c4 10             	add    esp,0x10
c0012199:	85 db                	test   ebx,ebx
c001219b:	74 12                	je     c00121af <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001219d:	50                   	push   eax
c001219e:	55                   	push   ebp
c001219f:	53                   	push   ebx
c00121a0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121a7:	e8 95 fd ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00121ac:	83 c4 10             	add    esp,0x10
c00121af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121b3:	83 c4 7c             	add    esp,0x7c
c00121b6:	5b                   	pop    ebx
c00121b7:	5e                   	pop    esi
c00121b8:	5f                   	pop    edi
c00121b9:	5d                   	pop    ebp
c00121ba:	c3                   	ret    

c00121bb <CmSetString(Reghive_Tag*, int, char const*)>:
c00121bb:	55                   	push   ebp
c00121bc:	57                   	push   edi
c00121bd:	56                   	push   esi
c00121be:	53                   	push   ebx
c00121bf:	bb 27 00 00 00       	mov    ebx,0x27
c00121c4:	81 ec 88 00 00 00    	sub    esp,0x88
c00121ca:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121d1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121d8:	e8 93 e3 fe ff       	call   c0000570 <strlen>
c00121dd:	8d 48 26             	lea    ecx,[eax+0x26]
c00121e0:	89 c8                	mov    eax,ecx
c00121e2:	99                   	cdq    
c00121e3:	f7 fb                	idiv   ebx
c00121e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121f2:	7e 10                	jle    c0012204 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	68 9c 0d 02 c0       	push   0xc0020d9c
c00121fc:	e8 72 e6 ff ff       	call   c0010873 <KePanic(char const*)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	31 ff                	xor    edi,edi
c0012206:	50                   	push   eax
c0012207:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001220b:	53                   	push   ebx
c001220c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012213:	56                   	push   esi
c0012214:	e8 04 fc ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012220:	89 d0                	mov    eax,edx
c0012222:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012226:	c1 e0 08             	shl    eax,0x8
c0012229:	09 c2                	or     edx,eax
c001222b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001222f:	c1 e2 08             	shl    edx,0x8
c0012232:	09 c2                	or     edx,eax
c0012234:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012238:	7e 76                	jle    c00122b0 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001223a:	85 d2                	test   edx,edx
c001223c:	75 25                	jne    c0012263 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001223e:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012243:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012247:	50                   	push   eax
c0012248:	6a 00                	push   0x0
c001224a:	6a 00                	push   0x0
c001224c:	56                   	push   esi
c001224d:	e8 75 fe ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012252:	83 c4 10             	add    esp,0x10
c0012255:	89 c2                	mov    edx,eax
c0012257:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c001225a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001225d:	c1 f8 10             	sar    eax,0x10
c0012260:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012263:	55                   	push   ebp
c0012264:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012268:	55                   	push   ebp
c0012269:	52                   	push   edx
c001226a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001226e:	56                   	push   esi
c001226f:	e8 a9 fb ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012274:	83 c4 0c             	add    esp,0xc
c0012277:	6a 27                	push   0x27
c0012279:	6a 00                	push   0x0
c001227b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001227f:	51                   	push   ecx
c0012280:	e8 6b e2 fe ff       	call   c00004f0 <memset>
c0012285:	83 c4 0c             	add    esp,0xc
c0012288:	6b c7 27             	imul   eax,edi,0x27
c001228b:	6a 27                	push   0x27
c001228d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012294:	50                   	push   eax
c0012295:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012299:	51                   	push   ecx
c001229a:	e8 e1 e3 fe ff       	call   c0000680 <strncpy>
c001229f:	83 c4 0c             	add    esp,0xc
c00122a2:	55                   	push   ebp
c00122a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122a7:	52                   	push   edx
c00122a8:	56                   	push   esi
c00122a9:	e8 93 fc ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ae:	eb 19                	jmp    c00122c9 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00122b0:	85 d2                	test   edx,edx
c00122b2:	74 18                	je     c00122cc <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00122b4:	51                   	push   ecx
c00122b5:	51                   	push   ecx
c00122b6:	52                   	push   edx
c00122b7:	56                   	push   esi
c00122b8:	e8 c0 fc ff ff       	call   c0011f7d <CmFreeExtent(Reghive_Tag*, int)>
c00122bd:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00122c1:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122c5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122c9:	83 c4 10             	add    esp,0x10
c00122cc:	47                   	inc    edi
c00122cd:	83 c3 03             	add    ebx,0x3
c00122d0:	83 ff 07             	cmp    edi,0x7
c00122d3:	0f 85 43 ff ff ff    	jne    c001221c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122d9:	50                   	push   eax
c00122da:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122de:	50                   	push   eax
c00122df:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122e6:	56                   	push   esi
c00122e7:	e8 55 fc ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ec:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122f2:	5b                   	pop    ebx
c00122f3:	5e                   	pop    esi
c00122f4:	5f                   	pop    edi
c00122f5:	5d                   	pop    ebp
c00122f6:	c3                   	ret    

c00122f7 <CmGetMatch(char*, char*, bool, bool*)>:
c00122f7:	56                   	push   esi
c00122f8:	53                   	push   ebx
c00122f9:	50                   	push   eax
c00122fa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122fe:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012303:	74 25                	je     c001232a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012305:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012308:	31 db                	xor    ebx,ebx
c001230a:	50                   	push   eax
c001230b:	50                   	push   eax
c001230c:	8d 04 9d e0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde20]
c0012313:	50                   	push   eax
c0012314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012318:	e8 33 e4 fe ff       	call   c0000750 <strcmp>
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	85 c0                	test   eax,eax
c0012322:	74 2e                	je     c0012352 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012324:	43                   	inc    ebx
c0012325:	83 fb 3f             	cmp    ebx,0x3f
c0012328:	75 e0                	jne    c001230a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001232a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001232d:	31 db                	xor    ebx,ebx
c001232f:	8d 04 9d e0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde20]
c0012336:	51                   	push   ecx
c0012337:	51                   	push   ecx
c0012338:	50                   	push   eax
c0012339:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001233d:	e8 0e e4 fe ff       	call   c0000750 <strcmp>
c0012342:	83 c4 10             	add    esp,0x10
c0012345:	85 c0                	test   eax,eax
c0012347:	74 09                	je     c0012352 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012349:	43                   	inc    ebx
c001234a:	83 fb 3f             	cmp    ebx,0x3f
c001234d:	75 e0                	jne    c001232f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001234f:	83 cb ff             	or     ebx,0xffffffff
c0012352:	89 d8                	mov    eax,ebx
c0012354:	5a                   	pop    edx
c0012355:	5b                   	pop    ebx
c0012356:	5e                   	pop    esi
c0012357:	c3                   	ret    

c0012358 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012358:	55                   	push   ebp
c0012359:	31 c0                	xor    eax,eax
c001235b:	57                   	push   edi
c001235c:	56                   	push   esi
c001235d:	53                   	push   ebx
c001235e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012362:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012366:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012368:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001236c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001236f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012373:	83 fd 1f             	cmp    ebp,0x1f
c0012376:	7f 0b                	jg     c0012383 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012378:	0f b6 c2             	movzx  eax,dl
c001237b:	d3 e0                	shl    eax,cl
c001237d:	09 07                	or     DWORD PTR [edi],eax
c001237f:	b0 01                	mov    al,0x1
c0012381:	01 33                	add    DWORD PTR [ebx],esi
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    

c0012388 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012388:	57                   	push   edi
c0012389:	56                   	push   esi
c001238a:	53                   	push   ebx
c001238b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001238f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012393:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012397:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001239b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c001239d:	7c 17                	jl     c00123b6 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001239f:	8b 17                	mov    edx,DWORD PTR [edi]
c00123a1:	b8 01 00 00 00       	mov    eax,0x1
c00123a6:	d3 e0                	shl    eax,cl
c00123a8:	48                   	dec    eax
c00123a9:	21 d0                	and    eax,edx
c00123ab:	d3 ea                	shr    edx,cl
c00123ad:	89 17                	mov    DWORD PTR [edi],edx
c00123af:	29 0b                	sub    DWORD PTR [ebx],ecx
c00123b1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123b4:	eb 05                	jmp    c00123bb <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00123b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123b9:	31 c0                	xor    eax,eax
c00123bb:	5b                   	pop    ebx
c00123bc:	5e                   	pop    esi
c00123bd:	5f                   	pop    edi
c00123be:	c3                   	ret    

c00123bf <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00123bf:	83 ec 40             	sub    esp,0x40
c00123c2:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123c6:	50                   	push   eax
c00123c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123cf:	e8 49 fa ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123d4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123d8:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123dc:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123e0:	89 10                	mov    DWORD PTR [eax],edx
c00123e2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123e5:	83 c4 4c             	add    esp,0x4c
c00123e8:	c3                   	ret    

c00123e9 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123e9:	55                   	push   ebp
c00123ea:	57                   	push   edi
c00123eb:	56                   	push   esi
c00123ec:	53                   	push   ebx
c00123ed:	83 ec 40             	sub    esp,0x40
c00123f0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123f4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123f8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123fc:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012400:	53                   	push   ebx
c0012401:	56                   	push   esi
c0012402:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012406:	e8 12 fa ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001240b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001240f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012413:	83 c4 0c             	add    esp,0xc
c0012416:	53                   	push   ebx
c0012417:	56                   	push   esi
c0012418:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001241c:	e8 20 fb ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012421:	83 c4 4c             	add    esp,0x4c
c0012424:	5b                   	pop    ebx
c0012425:	5e                   	pop    esi
c0012426:	5f                   	pop    edi
c0012427:	5d                   	pop    ebp
c0012428:	c3                   	ret    

c0012429 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012429:	55                   	push   ebp
c001242a:	57                   	push   edi
c001242b:	56                   	push   esi
c001242c:	31 f6                	xor    esi,esi
c001242e:	53                   	push   ebx
c001242f:	31 db                	xor    ebx,ebx
c0012431:	83 ec 40             	sub    esp,0x40
c0012434:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001243c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012444:	6a 12                	push   0x12
c0012446:	68 ee 00 00 00       	push   0xee
c001244b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001244f:	e8 9c e0 fe ff       	call   c00004f0 <memset>
c0012454:	83 c4 10             	add    esp,0x10
c0012457:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001245b:	6a 08                	push   0x8
c001245d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012461:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012465:	50                   	push   eax
c0012466:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001246a:	55                   	push   ebp
c001246b:	57                   	push   edi
c001246c:	e8 e7 fe ff ff       	call   c0012358 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012478:	50                   	push   eax
c0012479:	6a 06                	push   0x6
c001247b:	55                   	push   ebp
c001247c:	57                   	push   edi
c001247d:	e8 06 ff ff ff       	call   c0012388 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001248a:	74 07                	je     c0012493 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c001248c:	46                   	inc    esi
c001248d:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012491:	eb e1                	jmp    c0012474 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012493:	43                   	inc    ebx
c0012494:	83 fb 12             	cmp    ebx,0x12
c0012497:	75 c2                	jne    c001245b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012499:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001249d:	31 db                	xor    ebx,ebx
c001249f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00124a2:	50                   	push   eax
c00124a3:	50                   	push   eax
c00124a4:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00124a9:	43                   	inc    ebx
c00124aa:	8d 04 85 e0 21 02 c0 	lea    eax,[eax*4-0x3ffdde20]
c00124b1:	50                   	push   eax
c00124b2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124b6:	e8 85 e3 fe ff       	call   c0000840 <strcat>
c00124bb:	83 c4 10             	add    esp,0x10
c00124be:	83 fb 18             	cmp    ebx,0x18
c00124c1:	75 df                	jne    c00124a2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00124c3:	83 c4 3c             	add    esp,0x3c
c00124c6:	31 c0                	xor    eax,eax
c00124c8:	5b                   	pop    ebx
c00124c9:	5e                   	pop    esi
c00124ca:	5f                   	pop    edi
c00124cb:	5d                   	pop    ebp
c00124cc:	c3                   	ret    

c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124cd:	83 ec 40             	sub    esp,0x40
c00124d0:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124d4:	50                   	push   eax
c00124d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124dd:	e8 3b f9 ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124e2:	58                   	pop    eax
c00124e3:	5a                   	pop    edx
c00124e4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124e8:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124ec:	50                   	push   eax
c00124ed:	e8 37 ff ff ff       	call   c0012429 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124f2:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124f7:	83 c4 4c             	add    esp,0x4c
c00124fa:	c3                   	ret    

c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124fb:	55                   	push   ebp
c00124fc:	57                   	push   edi
c00124fd:	56                   	push   esi
c00124fe:	53                   	push   ebx
c00124ff:	31 db                	xor    ebx,ebx
c0012501:	83 ec 70             	sub    esp,0x70
c0012504:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001250b:	6a 30                	push   0x30
c001250d:	6a 00                	push   0x0
c001250f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012513:	56                   	push   esi
c0012514:	e8 d7 df fe ff       	call   c00004f0 <memset>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	83 ec 0c             	sub    esp,0xc
c001251f:	57                   	push   edi
c0012520:	e8 4b e0 fe ff       	call   c0000570 <strlen>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	39 d8                	cmp    eax,ebx
c001252a:	76 16                	jbe    c0012542 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012533:	50                   	push   eax
c0012534:	e8 f7 e3 fe ff       	call   c0000930 <toupper>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001253f:	43                   	inc    ebx
c0012540:	eb da                	jmp    c001251c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012542:	31 f6                	xor    esi,esi
c0012544:	52                   	push   edx
c0012545:	31 ff                	xor    edi,edi
c0012547:	6a 18                	push   0x18
c0012549:	6a 3f                	push   0x3f
c001254b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001254f:	50                   	push   eax
c0012550:	e8 9b df fe ff       	call   c00004f0 <memset>
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c001255c:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012560:	84 c0                	test   al,al
c0012562:	0f 84 b0 00 00 00    	je     c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012568:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001256c:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012571:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012575:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c001257a:	8d 6e 01             	lea    ebp,[esi+0x1]
c001257d:	83 ec 0c             	sub    esp,0xc
c0012580:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012584:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012588:	53                   	push   ebx
c0012589:	e8 e2 df fe ff       	call   c0000570 <strlen>
c001258e:	83 c4 10             	add    esp,0x10
c0012591:	85 c0                	test   eax,eax
c0012593:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012597:	74 0b                	je     c00125a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012599:	50                   	push   eax
c001259a:	6a 01                	push   0x1
c001259c:	53                   	push   ebx
c001259d:	8d 44 24 20          	lea    eax,[esp+0x20]
c00125a1:	50                   	push   eax
c00125a2:	eb 0a                	jmp    c00125ae <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00125a4:	50                   	push   eax
c00125a5:	6a 00                	push   0x0
c00125a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00125ab:	50                   	push   eax
c00125ac:	6a 00                	push   0x0
c00125ae:	e8 44 fd ff ff       	call   c00122f7 <CmGetMatch(char*, char*, bool, bool*)>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	83 f8 ff             	cmp    eax,0xffffffff
c00125b9:	75 1a                	jne    c00125d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00125bb:	83 ec 0c             	sub    esp,0xc
c00125be:	68 b1 0d 02 c0       	push   0xc0020db1
c00125c3:	e8 ab e2 ff ff       	call   c0010873 <KePanic(char const*)>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	b8 02 00 00 00       	mov    eax,0x2
c00125d0:	e9 bc 00 00 00       	jmp    c0012691 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00125d5:	83 ff 18             	cmp    edi,0x18
c00125d8:	75 1a                	jne    c00125f4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125da:	83 ec 0c             	sub    esp,0xc
c00125dd:	68 c6 0d 02 c0       	push   0xc0020dc6
c00125e2:	e8 8c e2 ff ff       	call   c0010873 <KePanic(char const*)>
c00125e7:	83 c4 10             	add    esp,0x10
c00125ea:	b8 01 00 00 00       	mov    eax,0x1
c00125ef:	e9 9d 00 00 00       	jmp    c0012691 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00125f4:	47                   	inc    edi
c00125f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125fa:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125fe:	74 02                	je     c0012602 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012600:	89 ee                	mov    esi,ebp
c0012602:	83 ec 0c             	sub    esp,0xc
c0012605:	53                   	push   ebx
c0012606:	e8 65 df fe ff       	call   c0000570 <strlen>
c001260b:	83 c4 10             	add    esp,0x10
c001260e:	85 c0                	test   eax,eax
c0012610:	74 06                	je     c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012612:	46                   	inc    esi
c0012613:	e9 40 ff ff ff       	jmp    c0012558 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012618:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012620:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012628:	31 f6                	xor    esi,esi
c001262a:	50                   	push   eax
c001262b:	31 ff                	xor    edi,edi
c001262d:	6a 12                	push   0x12
c001262f:	68 ee 00 00 00       	push   0xee
c0012634:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001263b:	e8 b0 de fe ff       	call   c00004f0 <memset>
c0012640:	83 c4 10             	add    esp,0x10
c0012643:	83 fe 17             	cmp    esi,0x17
c0012646:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001264a:	7e 26                	jle    c0012672 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c001264c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012650:	50                   	push   eax
c0012651:	6a 08                	push   0x8
c0012653:	55                   	push   ebp
c0012654:	53                   	push   ebx
c0012655:	e8 2e fd ff ff       	call   c0012388 <CmGetShift(unsigned int*, int*, int, bool*)>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012662:	74 26                	je     c001268a <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012664:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001266b:	4e                   	dec    esi
c001266c:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001266f:	47                   	inc    edi
c0012670:	eb 1c                	jmp    c001268e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012672:	6a 06                	push   0x6
c0012674:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012679:	50                   	push   eax
c001267a:	55                   	push   ebp
c001267b:	53                   	push   ebx
c001267c:	e8 d7 fc ff ff       	call   c0012358 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	84 c0                	test   al,al
c0012686:	75 06                	jne    c001268e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012688:	eb c2                	jmp    c001264c <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001268a:	31 c0                	xor    eax,eax
c001268c:	eb 03                	jmp    c0012691 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001268e:	46                   	inc    esi
c001268f:	eb b2                	jmp    c0012643 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012691:	83 c4 6c             	add    esp,0x6c
c0012694:	5b                   	pop    ebx
c0012695:	5e                   	pop    esi
c0012696:	5f                   	pop    edi
c0012697:	5d                   	pop    ebp
c0012698:	c3                   	ret    

c0012699 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012699:	53                   	push   ebx
c001269a:	83 ec 3c             	sub    esp,0x3c
c001269d:	6a 2b                	push   0x2b
c001269f:	6a 00                	push   0x0
c00126a1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00126a5:	53                   	push   ebx
c00126a6:	e8 45 de fe ff       	call   c00004f0 <memset>
c00126ab:	58                   	pop    eax
c00126ac:	5a                   	pop    edx
c00126ad:	8d 44 24 11          	lea    eax,[esp+0x11]
c00126b1:	50                   	push   eax
c00126b2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126b6:	e8 40 fe ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126bb:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00126c0:	83 c4 0c             	add    esp,0xc
c00126c3:	6a 15                	push   0x15
c00126c5:	6a 00                	push   0x0
c00126c7:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126cb:	50                   	push   eax
c00126cc:	e8 1f de fe ff       	call   c00004f0 <memset>
c00126d1:	53                   	push   ebx
c00126d2:	6a 00                	push   0x0
c00126d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126d8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126dc:	e8 e6 f9 ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126e1:	83 c4 58             	add    esp,0x58
c00126e4:	5b                   	pop    ebx
c00126e5:	c3                   	ret    

c00126e6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126e6:	56                   	push   esi
c00126e7:	53                   	push   ebx
c00126e8:	83 ec 48             	sub    esp,0x48
c00126eb:	6a 12                	push   0x12
c00126ed:	68 ff 00 00 00       	push   0xff
c00126f2:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126f6:	56                   	push   esi
c00126f7:	e8 f4 dd fe ff       	call   c00004f0 <memset>
c00126fc:	5a                   	pop    edx
c00126fd:	59                   	pop    ecx
c00126fe:	56                   	push   esi
c00126ff:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012703:	e8 f3 fd ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012708:	83 c4 10             	add    esp,0x10
c001270b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001270f:	85 db                	test   ebx,ebx
c0012711:	74 42                	je     c0012755 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012713:	50                   	push   eax
c0012714:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012718:	50                   	push   eax
c0012719:	53                   	push   ebx
c001271a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001271e:	e8 fa f6 ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012723:	83 c4 0c             	add    esp,0xc
c0012726:	6a 12                	push   0x12
c0012728:	8d 44 24 21          	lea    eax,[esp+0x21]
c001272c:	50                   	push   eax
c001272d:	56                   	push   esi
c001272e:	e8 4d dc fe ff       	call   c0000380 <memcmp>
c0012733:	83 c4 10             	add    esp,0x10
c0012736:	85 c0                	test   eax,eax
c0012738:	74 1e                	je     c0012758 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001273a:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001273f:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012744:	c1 e3 08             	shl    ebx,0x8
c0012747:	09 d8                	or     eax,ebx
c0012749:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001274e:	c1 e3 10             	shl    ebx,0x10
c0012751:	09 c3                	or     ebx,eax
c0012753:	eb ba                	jmp    c001270f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012755:	83 cb ff             	or     ebx,0xffffffff
c0012758:	89 d8                	mov    eax,ebx
c001275a:	83 c4 44             	add    esp,0x44
c001275d:	5b                   	pop    ebx
c001275e:	5e                   	pop    esi
c001275f:	c3                   	ret    

c0012760 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012760:	57                   	push   edi
c0012761:	56                   	push   esi
c0012762:	53                   	push   ebx
c0012763:	83 ec 34             	sub    esp,0x34
c0012766:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001276a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001276e:	6a 2b                	push   0x2b
c0012770:	6a 00                	push   0x0
c0012772:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012776:	53                   	push   ebx
c0012777:	e8 74 dd fe ff       	call   c00004f0 <memset>
c001277c:	58                   	pop    eax
c001277d:	5a                   	pop    edx
c001277e:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012782:	50                   	push   eax
c0012783:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012787:	e8 6f fd ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c001278c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012790:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012794:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012798:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001279c:	53                   	push   ebx
c001279d:	6a 00                	push   0x0
c001279f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127a7:	e8 1b f9 ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127ac:	83 c4 50             	add    esp,0x50
c00127af:	5b                   	pop    ebx
c00127b0:	5e                   	pop    esi
c00127b1:	5f                   	pop    edi
c00127b2:	c3                   	ret    

c00127b3 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00127b3:	55                   	push   ebp
c00127b4:	57                   	push   edi
c00127b5:	56                   	push   esi
c00127b6:	53                   	push   ebx
c00127b7:	83 ec 40             	sub    esp,0x40
c00127ba:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00127be:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127c2:	6a 2b                	push   0x2b
c00127c4:	6a 00                	push   0x0
c00127c6:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127ca:	56                   	push   esi
c00127cb:	e8 20 dd fe ff       	call   c00004f0 <memset>
c00127d0:	5f                   	pop    edi
c00127d1:	89 ef                	mov    edi,ebp
c00127d3:	58                   	pop    eax
c00127d4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127d8:	50                   	push   eax
c00127d9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127dd:	e8 19 fd ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127e2:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127e7:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127ec:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127f1:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	85 ed                	test   ebp,ebp
c00127fb:	74 14                	je     c0012811 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127fd:	51                   	push   ecx
c00127fe:	51                   	push   ecx
c00127ff:	57                   	push   edi
c0012800:	53                   	push   ebx
c0012801:	e8 09 f7 ff ff       	call   c0011f0f <CmGetNext(Reghive_Tag*, int)>
c0012806:	83 c4 10             	add    esp,0x10
c0012809:	85 c0                	test   eax,eax
c001280b:	74 04                	je     c0012811 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001280d:	89 c7                	mov    edi,eax
c001280f:	eb e8                	jmp    c00127f9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012811:	56                   	push   esi
c0012812:	6a 00                	push   0x0
c0012814:	57                   	push   edi
c0012815:	53                   	push   ebx
c0012816:	e8 ac f8 ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001281b:	83 c4 0c             	add    esp,0xc
c001281e:	89 c7                	mov    edi,eax
c0012820:	56                   	push   esi
c0012821:	50                   	push   eax
c0012822:	53                   	push   ebx
c0012823:	e8 f5 f5 ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012828:	58                   	pop    eax
c0012829:	5a                   	pop    edx
c001282a:	6a 6c                	push   0x6c
c001282c:	6a 00                	push   0x0
c001282e:	6a 00                	push   0x0
c0012830:	68 d7 0d 02 c0       	push   0xc0020dd7
c0012835:	57                   	push   edi
c0012836:	53                   	push   ebx
c0012837:	e8 24 ff ff ff       	call   c0012760 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001283c:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012840:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012844:	c1 e8 10             	shr    eax,0x10
c0012847:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001284b:	83 c4 1c             	add    esp,0x1c
c001284e:	56                   	push   esi
c001284f:	57                   	push   edi
c0012850:	53                   	push   ebx
c0012851:	e8 eb f6 ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012856:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001285b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012860:	c1 e0 08             	shl    eax,0x8
c0012863:	09 c2                	or     edx,eax
c0012865:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001286a:	83 c4 4c             	add    esp,0x4c
c001286d:	c1 e0 10             	shl    eax,0x10
c0012870:	5b                   	pop    ebx
c0012871:	09 d0                	or     eax,edx
c0012873:	5e                   	pop    esi
c0012874:	5f                   	pop    edi
c0012875:	5d                   	pop    ebp
c0012876:	c3                   	ret    

c0012877 <zStrtok(char*, char const*)>:
c0012877:	55                   	push   ebp
c0012878:	57                   	push   edi
c0012879:	56                   	push   esi
c001287a:	53                   	push   ebx
c001287b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001287f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012883:	85 db                	test   ebx,ebx
c0012885:	74 2f                	je     c00128b6 <zStrtok(char*, char const*)+0x3f>
c0012887:	85 c0                	test   eax,eax
c0012889:	75 09                	jne    c0012894 <zStrtok(char*, char const*)+0x1d>
c001288b:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012890:	85 c0                	test   eax,eax
c0012892:	74 50                	je     c00128e4 <zStrtok(char*, char const*)+0x6d>
c0012894:	31 c9                	xor    ecx,ecx
c0012896:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001289a:	74 03                	je     c001289f <zStrtok(char*, char const*)+0x28>
c001289c:	41                   	inc    ecx
c001289d:	eb f7                	jmp    c0012896 <zStrtok(char*, char const*)+0x1f>
c001289f:	31 d2                	xor    edx,edx
c00128a1:	39 ca                	cmp    edx,ecx
c00128a3:	74 15                	je     c00128ba <zStrtok(char*, char const*)+0x43>
c00128a5:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00128a9:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00128ac:	8d 3c 10             	lea    edi,[eax+edx*1]
c00128af:	39 ee                	cmp    esi,ebp
c00128b1:	74 13                	je     c00128c6 <zStrtok(char*, char const*)+0x4f>
c00128b3:	42                   	inc    edx
c00128b4:	eb eb                	jmp    c00128a1 <zStrtok(char*, char const*)+0x2a>
c00128b6:	31 c0                	xor    eax,eax
c00128b8:	eb 2a                	jmp    c00128e4 <zStrtok(char*, char const*)+0x6d>
c00128ba:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c00128c4:	eb 1e                	jmp    c00128e4 <zStrtok(char*, char const*)+0x6d>
c00128c6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128c9:	39 ce                	cmp    esi,ecx
c00128cb:	75 0a                	jne    c00128d7 <zStrtok(char*, char const*)+0x60>
c00128cd:	40                   	inc    eax
c00128ce:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128d3:	89 d8                	mov    eax,ebx
c00128d5:	eb 0d                	jmp    c00128e4 <zStrtok(char*, char const*)+0x6d>
c00128d7:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128db:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128de:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128e4:	5b                   	pop    ebx
c00128e5:	5e                   	pop    esi
c00128e6:	5f                   	pop    edi
c00128e7:	5d                   	pop    ebp
c00128e8:	c3                   	ret    

c00128e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128e9:	57                   	push   edi
c00128ea:	56                   	push   esi
c00128eb:	53                   	push   ebx
c00128ec:	81 ec 08 01 00 00    	sub    esp,0x108
c00128f2:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128f9:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012900:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012904:	53                   	push   ebx
c0012905:	e8 36 dd fe ff       	call   c0000640 <strcpy>
c001290a:	59                   	pop    ecx
c001290b:	5e                   	pop    esi
c001290c:	68 3b 11 02 c0       	push   0xc002113b
c0012911:	53                   	push   ebx
c0012912:	bb 01 00 00 00       	mov    ebx,0x1
c0012917:	e8 5b ff ff ff       	call   c0012877 <zStrtok(char*, char const*)>
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	85 c0                	test   eax,eax
c0012921:	74 3b                	je     c001295e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012923:	52                   	push   edx
c0012924:	50                   	push   eax
c0012925:	6a 01                	push   0x1
c0012927:	57                   	push   edi
c0012928:	e8 b9 fd ff ff       	call   c00126e6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001292d:	59                   	pop    ecx
c001292e:	89 c3                	mov    ebx,eax
c0012930:	5e                   	pop    esi
c0012931:	68 3b 11 02 c0       	push   0xc002113b
c0012936:	6a 00                	push   0x0
c0012938:	e8 3a ff ff ff       	call   c0012877 <zStrtok(char*, char const*)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	89 c6                	mov    esi,eax
c0012942:	85 c0                	test   eax,eax
c0012944:	74 18                	je     c001295e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012946:	52                   	push   edx
c0012947:	52                   	push   edx
c0012948:	53                   	push   ebx
c0012949:	57                   	push   edi
c001294a:	e8 81 f5 ff ff       	call   c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	89 c3                	mov    ebx,eax
c0012954:	83 f8 ff             	cmp    eax,0xffffffff
c0012957:	74 05                	je     c001295e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012959:	50                   	push   eax
c001295a:	56                   	push   esi
c001295b:	53                   	push   ebx
c001295c:	eb c9                	jmp    c0012927 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001295e:	81 c4 00 01 00 00    	add    esp,0x100
c0012964:	89 d8                	mov    eax,ebx
c0012966:	5b                   	pop    ebx
c0012967:	5e                   	pop    esi
c0012968:	5f                   	pop    edi
c0012969:	c3                   	ret    

c001296a <CmDisplayTree(Reghive_Tag*, int, int)>:
c001296a:	55                   	push   ebp
c001296b:	57                   	push   edi
c001296c:	56                   	push   esi
c001296d:	53                   	push   ebx
c001296e:	83 ec 5c             	sub    esp,0x5c
c0012971:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012975:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012979:	85 db                	test   ebx,ebx
c001297b:	0f 8e 84 00 00 00    	jle    c0012a05 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012981:	31 ed                	xor    ebp,ebp
c0012983:	57                   	push   edi
c0012984:	6a 32                	push   0x32
c0012986:	6a 00                	push   0x0
c0012988:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001298c:	57                   	push   edi
c001298d:	e8 5e db fe ff       	call   c00004f0 <memset>
c0012992:	83 c4 0c             	add    esp,0xc
c0012995:	57                   	push   edi
c0012996:	53                   	push   ebx
c0012997:	56                   	push   esi
c0012998:	e8 30 fb ff ff       	call   c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001299d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00129a8:	7d 13                	jge    c00129bd <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	45                   	inc    ebp
c00129ae:	68 ac 14 02 c0       	push   0xc00214ac
c00129b3:	e8 de 7f ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00129b8:	83 c4 10             	add    esp,0x10
c00129bb:	eb e7                	jmp    c00129a4 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00129bd:	51                   	push   ecx
c00129be:	57                   	push   edi
c00129bf:	53                   	push   ebx
c00129c0:	68 dd 0d 02 c0       	push   0xc0020ddd
c00129c5:	e8 cc 7f ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00129ca:	83 c4 10             	add    esp,0x10
c00129cd:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129d2:	75 1e                	jne    c00129f2 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129d4:	52                   	push   edx
c00129d5:	52                   	push   edx
c00129d6:	53                   	push   ebx
c00129d7:	56                   	push   esi
c00129d8:	e8 f3 f4 ff ff       	call   c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>
c00129dd:	83 c4 0c             	add    esp,0xc
c00129e0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129e4:	8d 51 04             	lea    edx,[ecx+0x4]
c00129e7:	52                   	push   edx
c00129e8:	50                   	push   eax
c00129e9:	56                   	push   esi
c00129ea:	e8 7b ff ff ff       	call   c001296a <CmDisplayTree(Reghive_Tag*, int, int)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	50                   	push   eax
c00129f3:	50                   	push   eax
c00129f4:	53                   	push   ebx
c00129f5:	56                   	push   esi
c00129f6:	e8 14 f5 ff ff       	call   c0011f0f <CmGetNext(Reghive_Tag*, int)>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	89 c3                	mov    ebx,eax
c0012a00:	e9 74 ff ff ff       	jmp    c0012979 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012a05:	83 c4 5c             	add    esp,0x5c
c0012a08:	5b                   	pop    ebx
c0012a09:	5e                   	pop    esi
c0012a0a:	5f                   	pop    edi
c0012a0b:	5d                   	pop    ebp
c0012a0c:	c3                   	ret    

c0012a0d <CmSplitFinalSlashInPlace(char*)>:
c0012a0d:	53                   	push   ebx
c0012a0e:	83 ec 14             	sub    esp,0x14
c0012a11:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a15:	53                   	push   ebx
c0012a16:	e8 55 db fe ff       	call   c0000570 <strlen>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	48                   	dec    eax
c0012a1f:	85 c0                	test   eax,eax
c0012a21:	74 15                	je     c0012a38 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a23:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a26:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a2a:	75 09                	jne    c0012a35 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a2c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a2f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a33:	eb 05                	jmp    c0012a3a <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a35:	48                   	dec    eax
c0012a36:	eb e7                	jmp    c0012a1f <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a38:	31 c0                	xor    eax,eax
c0012a3a:	83 c4 08             	add    esp,0x8
c0012a3d:	5b                   	pop    ebx
c0012a3e:	c3                   	ret    

c0012a3f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a3f:	55                   	push   ebp
c0012a40:	57                   	push   edi
c0012a41:	56                   	push   esi
c0012a42:	53                   	push   ebx
c0012a43:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a49:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a50:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012a52:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012a55:	80 fa 40             	cmp    dl,0x40
c0012a58:	75 1c                	jne    c0012a76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012a5a:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012a5d:	85 c9                	test   ecx,ecx
c0012a5f:	0f 84 09 01 00 00    	je     c0012b6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012a65:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a68:	83 f9 3a             	cmp    ecx,0x3a
c0012a6b:	74 04                	je     c0012a71 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012a6d:	89 c3                	mov    ebx,eax
c0012a6f:	eb e9                	jmp    c0012a5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012a71:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a74:	89 c3                	mov    ebx,eax
c0012a76:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012a7a:	50                   	push   eax
c0012a7b:	6a 40                	push   0x40
c0012a7d:	6a 00                	push   0x0
c0012a7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a83:	50                   	push   eax
c0012a84:	e8 67 da fe ff       	call   c00004f0 <memset>
c0012a89:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a90:	31 c0                	xor    eax,eax
c0012a92:	83 c4 10             	add    esp,0x10
c0012a95:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012a9a:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a9d:	89 d1                	mov    ecx,edx
c0012a9f:	85 d2                	test   edx,edx
c0012aa1:	0f 84 c7 00 00 00    	je     c0012b6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012aa7:	3d c7 00 00 00       	cmp    eax,0xc7
c0012aac:	0f 8f bc 00 00 00    	jg     c0012b6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012ab2:	83 fa 0a             	cmp    edx,0xa
c0012ab5:	0f 85 a4 00 00 00    	jne    c0012b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012abb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ac0:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012ac5:	89 c8                	mov    eax,ecx
c0012ac7:	a8 df                	test   al,0xdf
c0012ac9:	0f 94 c2             	sete   dl
c0012acc:	83 f9 23             	cmp    ecx,0x23
c0012acf:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ad4:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012ad8:	80 e2 01             	and    dl,0x1
c0012adb:	75 4a                	jne    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012add:	83 e8 09             	sub    eax,0x9
c0012ae0:	3c 01                	cmp    al,0x1
c0012ae2:	76 43                	jbe    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ae4:	83 f9 5b             	cmp    ecx,0x5b
c0012ae7:	75 42                	jne    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012ae9:	83 fe 40             	cmp    esi,0x40
c0012aec:	75 39                	jne    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012aee:	83 ec 0c             	sub    esp,0xc
c0012af1:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012af5:	52                   	push   edx
c0012af6:	e8 75 da fe ff       	call   c0000570 <strlen>
c0012afb:	83 c4 10             	add    esp,0x10
c0012afe:	83 f8 3f             	cmp    eax,0x3f
c0012b01:	77 6b                	ja     c0012b6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b03:	50                   	push   eax
c0012b04:	50                   	push   eax
c0012b05:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012b09:	52                   	push   edx
c0012b0a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012b0e:	52                   	push   edx
c0012b0f:	e8 2c db fe ff       	call   c0000640 <strcpy>
c0012b14:	58                   	pop    eax
c0012b15:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012b19:	52                   	push   edx
c0012b1a:	e8 51 da fe ff       	call   c0000570 <strlen>
c0012b1f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	31 d2                	xor    edx,edx
c0012b29:	eb 3b                	jmp    c0012b66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012b2b:	83 fe 40             	cmp    esi,0x40
c0012b2e:	74 06                	je     c0012b36 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012b30:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012b34:	eb 20                	jmp    c0012b56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012b36:	50                   	push   eax
c0012b37:	50                   	push   eax
c0012b38:	55                   	push   ebp
c0012b39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b3d:	50                   	push   eax
c0012b3e:	e8 0d dc fe ff       	call   c0000750 <strcmp>
c0012b43:	83 c4 10             	add    esp,0x10
c0012b46:	85 c0                	test   eax,eax
c0012b48:	75 dd                	jne    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b4a:	eb e4                	jmp    c0012b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012b4c:	8d 50 01             	lea    edx,[eax+0x1]
c0012b4f:	83 f9 3d             	cmp    ecx,0x3d
c0012b52:	74 1e                	je     c0012b72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012b54:	89 d0                	mov    eax,edx
c0012b56:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012b59:	85 c9                	test   ecx,ecx
c0012b5b:	75 ef                	jne    c0012b4c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012b5d:	eb 0f                	jmp    c0012b6e <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b5f:	8d 50 01             	lea    edx,[eax+0x1]
c0012b62:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b66:	47                   	inc    edi
c0012b67:	89 d0                	mov    eax,edx
c0012b69:	e9 2c ff ff ff       	jmp    c0012a9a <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012b6e:	31 c0                	xor    eax,eax
c0012b70:	eb 33                	jmp    c0012ba5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012b72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b76:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012b79:	50                   	push   eax
c0012b7a:	50                   	push   eax
c0012b7b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b7f:	50                   	push   eax
c0012b80:	53                   	push   ebx
c0012b81:	e8 ca db fe ff       	call   c0000750 <strcmp>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	85 c0                	test   eax,eax
c0012b8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b8f:	75 96                	jne    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b91:	51                   	push   ecx
c0012b92:	51                   	push   ecx
c0012b93:	52                   	push   edx
c0012b94:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b9b:	e8 a0 da fe ff       	call   c0000640 <strcpy>
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	b0 01                	mov    al,0x1
c0012ba5:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012bab:	5b                   	pop    ebx
c0012bac:	5e                   	pop    esi
c0012bad:	5f                   	pop    edi
c0012bae:	5d                   	pop    ebp
c0012baf:	c3                   	ret    

c0012bb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012bb0:	57                   	push   edi
c0012bb1:	56                   	push   esi
c0012bb2:	53                   	push   ebx
c0012bb3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012bb9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012bc0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012bc7:	53                   	push   ebx
c0012bc8:	e8 a3 d9 fe ff       	call   c0000570 <strlen>
c0012bcd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bd0:	89 c7                	mov    edi,eax
c0012bd2:	e8 99 d9 fe ff       	call   c0000570 <strlen>
c0012bd7:	83 c4 10             	add    esp,0x10
c0012bda:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012bde:	3d ff 00 00 00       	cmp    eax,0xff
c0012be3:	0f 87 d3 00 00 00    	ja     c0012cbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012be9:	57                   	push   edi
c0012bea:	57                   	push   edi
c0012beb:	56                   	push   esi
c0012bec:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012bf0:	56                   	push   esi
c0012bf1:	e8 4a da fe ff       	call   c0000640 <strcpy>
c0012bf6:	58                   	pop    eax
c0012bf7:	5a                   	pop    edx
c0012bf8:	68 3b 11 02 c0       	push   0xc002113b
c0012bfd:	56                   	push   esi
c0012bfe:	e8 3d dc fe ff       	call   c0000840 <strcat>
c0012c03:	59                   	pop    ecx
c0012c04:	5f                   	pop    edi
c0012c05:	53                   	push   ebx
c0012c06:	56                   	push   esi
c0012c07:	e8 34 dc fe ff       	call   c0000840 <strcat>
c0012c0c:	58                   	pop    eax
c0012c0d:	5a                   	pop    edx
c0012c0e:	68 e7 0d 02 c0       	push   0xc0020de7
c0012c13:	56                   	push   esi
c0012c14:	e8 27 dc fe ff       	call   c0000840 <strcat>
c0012c19:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c20:	e8 89 4e ff ff       	call   c0007aae <malloc>
c0012c25:	83 c4 0c             	add    esp,0xc
c0012c28:	89 c3                	mov    ebx,eax
c0012c2a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c30:	56                   	push   esi
c0012c31:	50                   	push   eax
c0012c32:	e8 e1 82 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	85 db                	test   ebx,ebx
c0012c3c:	74 7e                	je     c0012cbc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c3e:	51                   	push   ecx
c0012c3f:	51                   	push   ecx
c0012c40:	6a 01                	push   0x1
c0012c42:	53                   	push   ebx
c0012c43:	e8 8c 83 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0012c48:	83 c4 10             	add    esp,0x10
c0012c4b:	85 c0                	test   eax,eax
c0012c4d:	74 08                	je     c0012c57 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c4f:	83 ec 0c             	sub    esp,0xc
c0012c52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c54:	53                   	push   ebx
c0012c55:	eb 5f                	jmp    c0012cb6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c57:	52                   	push   edx
c0012c58:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c5c:	50                   	push   eax
c0012c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c61:	50                   	push   eax
c0012c62:	53                   	push   ebx
c0012c63:	e8 18 86 ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0012c68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	89 c1                	mov    ecx,eax
c0012c71:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c75:	74 31                	je     c0012ca8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c77:	83 ec 0c             	sub    esp,0xc
c0012c7a:	50                   	push   eax
c0012c7b:	e8 2e 4e ff ff       	call   c0007aae <malloc>
c0012c80:	89 c6                	mov    esi,eax
c0012c82:	58                   	pop    eax
c0012c83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c85:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c89:	52                   	push   edx
c0012c8a:	56                   	push   esi
c0012c8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c93:	53                   	push   ebx
c0012c94:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c97:	83 c4 20             	add    esp,0x20
c0012c9a:	85 c0                	test   eax,eax
c0012c9c:	75 0a                	jne    c0012ca8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ca2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012ca6:	74 18                	je     c0012cc0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012ca8:	83 ec 0c             	sub    esp,0xc
c0012cab:	53                   	push   ebx
c0012cac:	e8 81 83 ff ff       	call   c000b032 <File::close()>
c0012cb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cb6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cb9:	83 c4 10             	add    esp,0x10
c0012cbc:	31 c0                	xor    eax,eax
c0012cbe:	eb 3b                	jmp    c0012cfb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012cc0:	83 ec 0c             	sub    esp,0xc
c0012cc3:	53                   	push   ebx
c0012cc4:	e8 69 83 ff ff       	call   c000b032 <File::close()>
c0012cc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ccb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cd1:	83 c4 0c             	add    esp,0xc
c0012cd4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cdb:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012ce2:	56                   	push   esi
c0012ce3:	e8 57 fd ff ff       	call   c0012a3f <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012ce8:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ceb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012cef:	e8 ca 4d ff ff       	call   c0007abe <free>
c0012cf4:	83 c4 10             	add    esp,0x10
c0012cf7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012cfb:	81 c4 20 01 00 00    	add    esp,0x120
c0012d01:	5b                   	pop    ebx
c0012d02:	5e                   	pop    esi
c0012d03:	5f                   	pop    edi
c0012d04:	c3                   	ret    

c0012d05 <Reg::getLine(char*, char*, char*)>:
c0012d05:	57                   	push   edi
c0012d06:	56                   	push   esi
c0012d07:	53                   	push   ebx
c0012d08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d0c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d10:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d14:	57                   	push   edi
c0012d15:	56                   	push   esi
c0012d16:	53                   	push   ebx
c0012d17:	68 ec 0d 02 c0       	push   0xc0020dec
c0012d1c:	e8 8f fe ff ff       	call   c0012bb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	84 c0                	test   al,al
c0012d26:	75 10                	jne    c0012d38 <Reg::getLine(char*, char*, char*)+0x33>
c0012d28:	57                   	push   edi
c0012d29:	56                   	push   esi
c0012d2a:	53                   	push   ebx
c0012d2b:	68 11 0e 02 c0       	push   0xc0020e11
c0012d30:	e8 7b fe ff ff       	call   c0012bb0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	5b                   	pop    ebx
c0012d39:	5e                   	pop    esi
c0012d3a:	5f                   	pop    edi
c0012d3b:	c3                   	ret    

c0012d3c <Reg::readInt(char*, char*, int*)>:
c0012d3c:	55                   	push   ebp
c0012d3d:	57                   	push   edi
c0012d3e:	56                   	push   esi
c0012d3f:	53                   	push   ebx
c0012d40:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d46:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d4a:	55                   	push   ebp
c0012d4b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d52:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d59:	e8 a7 ff ff ff       	call   c0012d05 <Reg::getLine(char*, char*, char*)>
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	84 c0                	test   al,al
c0012d63:	0f 84 b6 00 00 00    	je     c0012e1f <Reg::readInt(char*, char*, int*)+0xe3>
c0012d69:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d6e:	83 fa 2b             	cmp    edx,0x2b
c0012d71:	74 0c                	je     c0012d7f <Reg::readInt(char*, char*, int*)+0x43>
c0012d73:	83 fa 2d             	cmp    edx,0x2d
c0012d76:	75 0e                	jne    c0012d86 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d78:	ba 01 00 00 00       	mov    edx,0x1
c0012d7d:	eb 0b                	jmp    c0012d8a <Reg::readInt(char*, char*, int*)+0x4e>
c0012d7f:	ba 01 00 00 00       	mov    edx,0x1
c0012d84:	eb 02                	jmp    c0012d88 <Reg::readInt(char*, char*, int*)+0x4c>
c0012d86:	31 d2                	xor    edx,edx
c0012d88:	31 c0                	xor    eax,eax
c0012d8a:	be 0a 00 00 00       	mov    esi,0xa
c0012d8f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d94:	75 21                	jne    c0012db7 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d96:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012d9b:	83 f9 78             	cmp    ecx,0x78
c0012d9e:	75 0a                	jne    c0012daa <Reg::readInt(char*, char*, int*)+0x6e>
c0012da0:	83 c2 02             	add    edx,0x2
c0012da3:	be 10 00 00 00       	mov    esi,0x10
c0012da8:	eb 0d                	jmp    c0012db7 <Reg::readInt(char*, char*, int*)+0x7b>
c0012daa:	83 f9 62             	cmp    ecx,0x62
c0012dad:	75 08                	jne    c0012db7 <Reg::readInt(char*, char*, int*)+0x7b>
c0012daf:	83 c2 02             	add    edx,0x2
c0012db2:	be 02 00 00 00       	mov    esi,0x2
c0012db7:	01 d5                	add    ebp,edx
c0012db9:	31 d2                	xor    edx,edx
c0012dbb:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012dbf:	83 f9 0d             	cmp    ecx,0xd
c0012dc2:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012dc6:	0f 94 c3             	sete   bl
c0012dc9:	85 c9                	test   ecx,ecx
c0012dcb:	89 df                	mov    edi,ebx
c0012dcd:	0f 94 c3             	sete   bl
c0012dd0:	09 df                	or     edi,ebx
c0012dd2:	89 fb                	mov    ebx,edi
c0012dd4:	83 e7 01             	and    edi,0x1
c0012dd7:	75 35                	jne    c0012e0e <Reg::readInt(char*, char*, int*)+0xd2>
c0012dd9:	0f af d6             	imul   edx,esi
c0012ddc:	83 fe 10             	cmp    esi,0x10
c0012ddf:	75 26                	jne    c0012e07 <Reg::readInt(char*, char*, int*)+0xcb>
c0012de1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012de5:	83 ef 41             	sub    edi,0x41
c0012de8:	89 fb                	mov    ebx,edi
c0012dea:	80 fb 05             	cmp    bl,0x5
c0012ded:	77 06                	ja     c0012df5 <Reg::readInt(char*, char*, int*)+0xb9>
c0012def:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012df3:	eb 16                	jmp    c0012e0b <Reg::readInt(char*, char*, int*)+0xcf>
c0012df5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012df9:	83 eb 61             	sub    ebx,0x61
c0012dfc:	80 fb 05             	cmp    bl,0x5
c0012dff:	77 06                	ja     c0012e07 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e01:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012e05:	eb 04                	jmp    c0012e0b <Reg::readInt(char*, char*, int*)+0xcf>
c0012e07:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012e0b:	45                   	inc    ebp
c0012e0c:	eb ad                	jmp    c0012dbb <Reg::readInt(char*, char*, int*)+0x7f>
c0012e0e:	84 c0                	test   al,al
c0012e10:	74 02                	je     c0012e14 <Reg::readInt(char*, char*, int*)+0xd8>
c0012e12:	f7 da                	neg    edx
c0012e14:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e1b:	89 10                	mov    DWORD PTR [eax],edx
c0012e1d:	88 d8                	mov    al,bl
c0012e1f:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e25:	5b                   	pop    ebx
c0012e26:	5e                   	pop    esi
c0012e27:	5f                   	pop    edi
c0012e28:	5d                   	pop    ebp
c0012e29:	c3                   	ret    

c0012e2a <Reg::readString(char*, char*, char*, int)>:
c0012e2a:	57                   	push   edi
c0012e2b:	56                   	push   esi
c0012e2c:	53                   	push   ebx
c0012e2d:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e33:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e3a:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e3e:	57                   	push   edi
c0012e3f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e46:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e4d:	e8 b3 fe ff ff       	call   c0012d05 <Reg::getLine(char*, char*, char*)>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	89 c6                	mov    esi,eax
c0012e57:	84 c0                	test   al,al
c0012e59:	74 44                	je     c0012e9f <Reg::readString(char*, char*, char*, int)+0x75>
c0012e5b:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e62:	31 c0                	xor    eax,eax
c0012e64:	4a                   	dec    edx
c0012e65:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e68:	84 c9                	test   cl,cl
c0012e6a:	74 0f                	je     c0012e7b <Reg::readString(char*, char*, char*, int)+0x51>
c0012e6c:	39 c2                	cmp    edx,eax
c0012e6e:	7e 0b                	jle    c0012e7b <Reg::readString(char*, char*, char*, int)+0x51>
c0012e70:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e73:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e78:	40                   	inc    eax
c0012e79:	eb ea                	jmp    c0012e65 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e7b:	83 ec 0c             	sub    esp,0xc
c0012e7e:	53                   	push   ebx
c0012e7f:	e8 ec d6 fe ff       	call   c0000570 <strlen>
c0012e84:	83 c4 10             	add    esp,0x10
c0012e87:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e8c:	75 11                	jne    c0012e9f <Reg::readString(char*, char*, char*, int)+0x75>
c0012e8e:	83 ec 0c             	sub    esp,0xc
c0012e91:	53                   	push   ebx
c0012e92:	e8 d9 d6 fe ff       	call   c0000570 <strlen>
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e9f:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012ea5:	89 f0                	mov    eax,esi
c0012ea7:	5b                   	pop    ebx
c0012ea8:	5e                   	pop    esi
c0012ea9:	5f                   	pop    edi
c0012eaa:	c3                   	ret    

c0012eab <Reg::readBool(char*, char*, bool*)>:
c0012eab:	83 ec 20             	sub    esp,0x20
c0012eae:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012eb2:	50                   	push   eax
c0012eb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ebb:	e8 7c fe ff ff       	call   c0012d3c <Reg::readInt(char*, char*, int*)>
c0012ec0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ec5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012ec9:	0f 95 02             	setne  BYTE PTR [edx]
c0012ecc:	83 c4 2c             	add    esp,0x2c
c0012ecf:	c3                   	ret    

c0012ed0 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012ed0:	53                   	push   ebx
c0012ed1:	83 ec 1c             	sub    esp,0x1c
c0012ed4:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012ed8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012edc:	50                   	push   eax
c0012edd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee5:	e8 c1 ff ff ff       	call   c0012eab <Reg::readBool(char*, char*, bool*)>
c0012eea:	83 c4 10             	add    esp,0x10
c0012eed:	84 c0                	test   al,al
c0012eef:	74 04                	je     c0012ef5 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012ef1:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012ef5:	88 d8                	mov    al,bl
c0012ef7:	83 c4 18             	add    esp,0x18
c0012efa:	5b                   	pop    ebx
c0012efb:	c3                   	ret    

c0012efc <Reg::readIntWithDefault(char*, char*, int)>:
c0012efc:	53                   	push   ebx
c0012efd:	83 ec 1c             	sub    esp,0x1c
c0012f00:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f04:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f08:	50                   	push   eax
c0012f09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f11:	e8 26 fe ff ff       	call   c0012d3c <Reg::readInt(char*, char*, int*)>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	84 c0                	test   al,al
c0012f1b:	74 04                	je     c0012f21 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f1d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f21:	89 d8                	mov    eax,ebx
c0012f23:	83 c4 18             	add    esp,0x18
c0012f26:	5b                   	pop    ebx
c0012f27:	c3                   	ret    

c0012f28 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f28:	57                   	push   edi
c0012f29:	56                   	push   esi
c0012f2a:	56                   	push   esi
c0012f2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f33:	56                   	push   esi
c0012f34:	57                   	push   edi
c0012f35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3d:	e8 e8 fe ff ff       	call   c0012e2a <Reg::readString(char*, char*, char*, int)>
c0012f42:	83 c4 10             	add    esp,0x10
c0012f45:	84 c0                	test   al,al
c0012f47:	75 1a                	jne    c0012f63 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f49:	51                   	push   ecx
c0012f4a:	56                   	push   esi
c0012f4b:	6a 00                	push   0x0
c0012f4d:	57                   	push   edi
c0012f4e:	e8 9d d5 fe ff       	call   c00004f0 <memset>
c0012f53:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f56:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012f5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f5c:	83 c4 10             	add    esp,0x10
c0012f5f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f63:	89 f8                	mov    eax,edi
c0012f65:	5a                   	pop    edx
c0012f66:	5e                   	pop    esi
c0012f67:	5f                   	pop    edi
c0012f68:	c3                   	ret    

c0012f69 <SysEject(regs*)>:
c0012f69:	83 ec 0c             	sub    esp,0xc
c0012f6c:	83 ca ff             	or     edx,0xffffffff
c0012f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f73:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f76:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f7b:	83 e9 41             	sub    ecx,0x41
c0012f7e:	83 f9 19             	cmp    ecx,0x19
c0012f81:	77 18                	ja     c0012f9b <SysEject(regs*)+0x32>
c0012f83:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f8a:	85 c9                	test   ecx,ecx
c0012f8c:	74 0d                	je     c0012f9b <SysEject(regs*)+0x32>
c0012f8e:	83 ec 0c             	sub    esp,0xc
c0012f91:	51                   	push   ecx
c0012f92:	e8 ab a1 ff ff       	call   c000d142 <LogicalDisk::eject()>
c0012f97:	83 c4 10             	add    esp,0x10
c0012f9a:	99                   	cdq    
c0012f9b:	83 c4 0c             	add    esp,0xc
c0012f9e:	c3                   	ret    

c0012f9f <SysExit(regs*)>:
c0012f9f:	83 ec 18             	sub    esp,0x18
c0012fa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fa6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fa9:	e8 1a 2a 00 00       	call   c00159c8 <terminateTask(int)>
c0012fae:	83 c8 ff             	or     eax,0xffffffff
c0012fb1:	83 c4 1c             	add    esp,0x1c
c0012fb4:	89 c2                	mov    edx,eax
c0012fb6:	c3                   	ret    

c0012fb7 <SysGetCwd(regs*)>:
c0012fb7:	83 ec 10             	sub    esp,0x10
c0012fba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fbe:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fc1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fc9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fcc:	e8 3d 7d ff ff       	call   c000ad0e <Fs::getcwd(Process*, char*, int)>
c0012fd1:	83 c4 1c             	add    esp,0x1c
c0012fd4:	99                   	cdq    
c0012fd5:	c3                   	ret    

c0012fd6 <SysGetPID(regs*)>:
c0012fd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fdb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fde:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fe0:	99                   	cdq    
c0012fe1:	c3                   	ret    

c0012fe2 <SysGetRAMData(regs*)>:
c0012fe2:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012fe8:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012ff2:	99                   	cdq    
c0012ff3:	f7 f9                	idiv   ecx
c0012ff5:	c1 e0 18             	shl    eax,0x18
c0012ff8:	09 c8                	or     eax,ecx
c0012ffa:	99                   	cdq    
c0012ffb:	c3                   	ret    

c0012ffc <SysGetVGAPtr(regs*)>:
c0012ffc:	55                   	push   ebp
c0012ffd:	57                   	push   edi
c0012ffe:	56                   	push   esi
c0012fff:	53                   	push   ebx
c0013000:	83 ec 18             	sub    esp,0x18
c0013003:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013007:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001300a:	e8 85 24 00 00       	call   c0015494 <Thr::processFromPID(int)>
c001300f:	83 c4 10             	add    esp,0x10
c0013012:	89 c1                	mov    ecx,eax
c0013014:	b8 01 00 00 00       	mov    eax,0x1
c0013019:	85 c9                	test   ecx,ecx
c001301b:	74 57                	je     c0013074 <SysGetVGAPtr(regs*)+0x78>
c001301d:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013023:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013027:	74 0c                	je     c0013035 <SysGetVGAPtr(regs*)+0x39>
c0013029:	83 ec 0c             	sub    esp,0xc
c001302c:	55                   	push   ebp
c001302d:	e8 11 57 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c0013032:	83 c4 10             	add    esp,0x10
c0013035:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013038:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001303b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013040:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013042:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013045:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013048:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001304e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013051:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013054:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001305a:	50                   	push   eax
c001305b:	50                   	push   eax
c001305c:	68 2c 0e 02 c0       	push   0xc0020e2c
c0013061:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013064:	05 a8 0f 00 00       	add    eax,0xfa8
c0013069:	50                   	push   eax
c001306a:	e8 d1 d5 fe ff       	call   c0000640 <strcpy>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	31 c0                	xor    eax,eax
c0013074:	83 c4 0c             	add    esp,0xc
c0013077:	31 d2                	xor    edx,edx
c0013079:	5b                   	pop    ebx
c001307a:	5e                   	pop    esi
c001307b:	5f                   	pop    edi
c001307c:	5d                   	pop    ebp
c001307d:	c3                   	ret    
c001307e:	66 90                	xchg   ax,ax

c0013080 <SysKill(regs*)>:
c0013080:	53                   	push   ebx
c0013081:	83 ec 08             	sub    esp,0x8
c0013084:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013088:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001308c:	75 16                	jne    c00130a4 <SysKill(regs*)+0x24>
c001308e:	83 ec 0c             	sub    esp,0xc
c0013091:	68 36 0e 02 c0       	push   0xc0020e36
c0013096:	e8 d8 d7 ff ff       	call   c0010873 <KePanic(char const*)>
c001309b:	83 c4 10             	add    esp,0x10
c001309e:	e9 89 00 00 00       	jmp    c001312c <SysKill(regs*)+0xac>
c00130a3:	90                   	nop
c00130a4:	83 ec 0c             	sub    esp,0xc
c00130a7:	68 84 81 02 c0       	push   0xc0028184
c00130ac:	e8 eb ba 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130b1:	8d 76 00             	lea    esi,[esi+0x0]
c00130b4:	83 c4 10             	add    esp,0x10
c00130b7:	85 c0                	test   eax,eax
c00130b9:	74 19                	je     c00130d4 <SysKill(regs*)+0x54>
c00130bb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130be:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130c1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130c3:	74 33                	je     c00130f8 <SysKill(regs*)+0x78>
c00130c5:	52                   	push   edx
c00130c6:	52                   	push   edx
c00130c7:	50                   	push   eax
c00130c8:	68 84 81 02 c0       	push   0xc0028184
c00130cd:	e8 ea bd 00 00       	call   c001eebc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130d2:	eb e0                	jmp    c00130b4 <SysKill(regs*)+0x34>
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	68 78 81 02 c0       	push   0xc0028178
c00130dc:	e8 bb ba 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130e1:	8d 76 00             	lea    esi,[esi+0x0]
c00130e4:	83 c4 10             	add    esp,0x10
c00130e7:	85 c0                	test   eax,eax
c00130e9:	74 41                	je     c001312c <SysKill(regs*)+0xac>
c00130eb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130ee:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130f1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130f3:	75 27                	jne    c001311c <SysKill(regs*)+0x9c>
c00130f5:	8d 76 00             	lea    esi,[esi+0x0]
c00130f8:	51                   	push   ecx
c00130f9:	51                   	push   ecx
c00130fa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013102:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013105:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001310b:	e8 ff db ff ff       	call   c0010d0f <KeRaiseSignal(SigHandlerBlock*, int)>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	31 c0                	xor    eax,eax
c0013115:	31 d2                	xor    edx,edx
c0013117:	eb 1b                	jmp    c0013134 <SysKill(regs*)+0xb4>
c0013119:	8d 76 00             	lea    esi,[esi+0x0]
c001311c:	52                   	push   edx
c001311d:	52                   	push   edx
c001311e:	50                   	push   eax
c001311f:	68 78 81 02 c0       	push   0xc0028178
c0013124:	e8 93 bd 00 00       	call   c001eebc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013129:	eb b9                	jmp    c00130e4 <SysKill(regs*)+0x64>
c001312b:	90                   	nop
c001312c:	83 c8 ff             	or     eax,0xffffffff
c001312f:	89 c2                	mov    edx,eax
c0013131:	8d 76 00             	lea    esi,[esi+0x0]
c0013134:	83 c4 08             	add    esp,0x8
c0013137:	5b                   	pop    ebx
c0013138:	c3                   	ret    

c0013139 <SysLoadDLL(regs*)>:
c0013139:	56                   	push   esi
c001313a:	53                   	push   ebx
c001313b:	31 d2                	xor    edx,edx
c001313d:	51                   	push   ecx
c001313e:	b8 01 00 00 00       	mov    eax,0x1
c0013143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013147:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001314b:	0f 84 8c 00 00 00    	je     c00131dd <SysLoadDLL(regs*)+0xa4>
c0013151:	83 ec 0c             	sub    esp,0xc
c0013154:	68 14 01 00 00       	push   0x114
c0013159:	e8 50 49 ff ff       	call   c0007aae <malloc>
c001315e:	83 c4 0c             	add    esp,0xc
c0013161:	89 c3                	mov    ebx,eax
c0013163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013168:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001316b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001316e:	53                   	push   ebx
c001316f:	e8 a4 7d ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0013174:	83 c4 10             	add    esp,0x10
c0013177:	31 d2                	xor    edx,edx
c0013179:	b8 02 00 00 00       	mov    eax,0x2
c001317e:	85 db                	test   ebx,ebx
c0013180:	74 5b                	je     c00131dd <SysLoadDLL(regs*)+0xa4>
c0013182:	83 ec 0c             	sub    esp,0xc
c0013185:	53                   	push   ebx
c0013186:	e8 b7 80 ff ff       	call   c000b242 <File::exists()>
c001318b:	83 c4 10             	add    esp,0x10
c001318e:	84 c0                	test   al,al
c0013190:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013192:	75 11                	jne    c00131a5 <SysLoadDLL(regs*)+0x6c>
c0013194:	83 ec 0c             	sub    esp,0xc
c0013197:	53                   	push   ebx
c0013198:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001319b:	83 c4 10             	add    esp,0x10
c001319e:	b8 03 00 00 00       	mov    eax,0x3
c00131a3:	eb 36                	jmp    c00131db <SysLoadDLL(regs*)+0xa2>
c00131a5:	83 ec 0c             	sub    esp,0xc
c00131a8:	53                   	push   ebx
c00131a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131ac:	58                   	pop    eax
c00131ad:	5a                   	pop    edx
c00131ae:	6a 00                	push   0x0
c00131b0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131b3:	e8 12 14 00 00       	call   c00145ca <Thr::loadDLL(char const*, bool)>
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	89 c1                	mov    ecx,eax
c00131bd:	31 d2                	xor    edx,edx
c00131bf:	b8 04 00 00 00       	mov    eax,0x4
c00131c4:	85 c9                	test   ecx,ecx
c00131c6:	74 15                	je     c00131dd <SysLoadDLL(regs*)+0xa4>
c00131c8:	53                   	push   ebx
c00131c9:	53                   	push   ebx
c00131ca:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131d0:	51                   	push   ecx
c00131d1:	e8 25 16 00 00       	call   c00147fb <Thr::executeDLL(unsigned long, void*)>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	31 c0                	xor    eax,eax
c00131db:	31 d2                	xor    edx,edx
c00131dd:	59                   	pop    ecx
c00131de:	5b                   	pop    ebx
c00131df:	5e                   	pop    esi
c00131e0:	c3                   	ret    

c00131e1 <SysRead(regs*)>:
c00131e1:	57                   	push   edi
c00131e2:	56                   	push   esi
c00131e3:	53                   	push   ebx
c00131e4:	83 ec 10             	sub    esp,0x10
c00131e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131ee:	83 f8 02             	cmp    eax,0x2
c00131f1:	77 10                	ja     c0013203 <SysRead(regs*)+0x22>
c00131f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131fb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013201:	eb 0e                	jmp    c0013211 <SysRead(regs*)+0x30>
c0013203:	83 ec 0c             	sub    esp,0xc
c0013206:	50                   	push   eax
c0013207:	e8 b7 62 ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001320c:	83 c4 10             	add    esp,0x10
c001320f:	89 c1                	mov    ecx,eax
c0013211:	83 c8 ff             	or     eax,0xffffffff
c0013214:	85 c9                	test   ecx,ecx
c0013216:	89 c2                	mov    edx,eax
c0013218:	74 28                	je     c0013242 <SysRead(regs*)+0x61>
c001321a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013222:	31 ff                	xor    edi,edi
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013229:	8d 54 24 18          	lea    edx,[esp+0x18]
c001322d:	52                   	push   edx
c001322e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013231:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013234:	57                   	push   edi
c0013235:	56                   	push   esi
c0013236:	51                   	push   ecx
c0013237:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001323a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001323e:	83 c4 20             	add    esp,0x20
c0013241:	99                   	cdq    
c0013242:	83 c4 10             	add    esp,0x10
c0013245:	5b                   	pop    ebx
c0013246:	5e                   	pop    esi
c0013247:	5f                   	pop    edi
c0013248:	c3                   	ret    

c0013249 <SysRegisterSignal(regs*)>:
c0013249:	83 ec 18             	sub    esp,0x18
c001324c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013250:	6a 00                	push   0x0
c0013252:	6a 00                	push   0x0
c0013254:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013257:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001325a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001325f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013262:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013268:	e8 6c da ff ff       	call   c0010cd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001326d:	83 c4 2c             	add    esp,0x2c
c0013270:	99                   	cdq    
c0013271:	c3                   	ret    

c0013272 <SysRegistryGetTypeFromPath(regs*)>:
c0013272:	57                   	push   edi
c0013273:	56                   	push   esi
c0013274:	53                   	push   ebx
c0013275:	81 ec 38 01 00 00    	sub    esp,0x138
c001327b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013282:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013285:	68 57 0e 02 c0       	push   0xc0020e57
c001328a:	e8 07 77 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001328f:	5a                   	pop    edx
c0013290:	59                   	pop    ecx
c0013291:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013294:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013297:	e8 4d f6 ff ff       	call   c00128e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001329c:	5f                   	pop    edi
c001329d:	89 c6                	mov    esi,eax
c001329f:	5a                   	pop    edx
c00132a0:	50                   	push   eax
c00132a1:	68 77 0e 02 c0       	push   0xc0020e77
c00132a6:	e8 eb 76 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00132ab:	83 c4 10             	add    esp,0x10
c00132ae:	85 f6                	test   esi,esi
c00132b0:	74 28                	je     c00132da <SysRegistryGetTypeFromPath(regs*)+0x68>
c00132b2:	50                   	push   eax
c00132b3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132b7:	57                   	push   edi
c00132b8:	56                   	push   esi
c00132b9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132bc:	e8 0c f2 ff ff       	call   c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132c1:	83 c4 0c             	add    esp,0xc
c00132c4:	89 c3                	mov    ebx,eax
c00132c6:	57                   	push   edi
c00132c7:	50                   	push   eax
c00132c8:	68 7f 0e 02 c0       	push   0xc0020e7f
c00132cd:	e8 c4 76 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00132d2:	89 d8                	mov    eax,ebx
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	99                   	cdq    
c00132d8:	eb 05                	jmp    c00132df <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132da:	83 c8 ff             	or     eax,0xffffffff
c00132dd:	89 c2                	mov    edx,eax
c00132df:	81 c4 30 01 00 00    	add    esp,0x130
c00132e5:	5b                   	pop    ebx
c00132e6:	5e                   	pop    esi
c00132e7:	5f                   	pop    edi
c00132e8:	c3                   	ret    

c00132e9 <SysRegistryReadExtent(regs*)>:
c00132e9:	83 ec 1c             	sub    esp,0x1c
c00132ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132f0:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00132f3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132f6:	85 c0                	test   eax,eax
c00132f8:	79 1f                	jns    c0013319 <SysRegistryReadExtent(regs*)+0x30>
c00132fa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00132ff:	52                   	push   edx
c0013300:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013304:	52                   	push   edx
c0013305:	50                   	push   eax
c0013306:	51                   	push   ecx
c0013307:	e8 b3 f0 ff ff       	call   c00123bf <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001330c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013310:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013314:	83 c4 10             	add    esp,0x10
c0013317:	eb 14                	jmp    c001332d <SysRegistryReadExtent(regs*)+0x44>
c0013319:	83 ec 04             	sub    esp,0x4
c001331c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001331f:	50                   	push   eax
c0013320:	51                   	push   ecx
c0013321:	e8 33 eb ff ff       	call   c0011e59 <CmGetString(Reghive_Tag*, int, char*)>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	31 c0                	xor    eax,eax
c001332b:	31 d2                	xor    edx,edx
c001332d:	83 c4 1c             	add    esp,0x1c
c0013330:	c3                   	ret    

c0013331 <SysRegistryPathToExtentLookup(regs*)>:
c0013331:	53                   	push   ebx
c0013332:	83 ec 10             	sub    esp,0x10
c0013335:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013339:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001333c:	68 95 0e 02 c0       	push   0xc0020e95
c0013341:	e8 50 76 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0013346:	58                   	pop    eax
c0013347:	5a                   	pop    edx
c0013348:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001334b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001334e:	e8 96 f5 ff ff       	call   c00128e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013353:	83 c4 18             	add    esp,0x18
c0013356:	99                   	cdq    
c0013357:	5b                   	pop    ebx
c0013358:	c3                   	ret    

c0013359 <SysRegistryEnterDirectory(regs*)>:
c0013359:	53                   	push   ebx
c001335a:	83 ec 10             	sub    esp,0x10
c001335d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013361:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013364:	68 b8 0e 02 c0       	push   0xc0020eb8
c0013369:	e8 28 76 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001336e:	58                   	pop    eax
c001336f:	5a                   	pop    edx
c0013370:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013373:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013376:	e8 55 eb ff ff       	call   c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>
c001337b:	83 c4 18             	add    esp,0x18
c001337e:	99                   	cdq    
c001337f:	5b                   	pop    ebx
c0013380:	c3                   	ret    

c0013381 <SysRegistryGetNext(regs*)>:
c0013381:	53                   	push   ebx
c0013382:	83 ec 10             	sub    esp,0x10
c0013385:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013389:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001338c:	68 d6 0e 02 c0       	push   0xc0020ed6
c0013391:	e8 00 76 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0013396:	58                   	pop    eax
c0013397:	5a                   	pop    edx
c0013398:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001339b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001339e:	e8 6c eb ff ff       	call   c0011f0f <CmGetNext(Reghive_Tag*, int)>
c00133a3:	83 c4 18             	add    esp,0x18
c00133a6:	99                   	cdq    
c00133a7:	5b                   	pop    ebx
c00133a8:	c3                   	ret    

c00133a9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00133a9:	57                   	push   edi
c00133aa:	56                   	push   esi
c00133ab:	53                   	push   ebx
c00133ac:	81 ec 34 01 00 00    	sub    esp,0x134
c00133b2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133b9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133bd:	57                   	push   edi
c00133be:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133c1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133c4:	e8 04 f1 ff ff       	call   c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133c9:	89 c3                	mov    ebx,eax
c00133cb:	58                   	pop    eax
c00133cc:	5a                   	pop    edx
c00133cd:	57                   	push   edi
c00133ce:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133d1:	e8 6a d2 fe ff       	call   c0000640 <strcpy>
c00133d6:	89 d8                	mov    eax,ebx
c00133d8:	81 c4 40 01 00 00    	add    esp,0x140
c00133de:	99                   	cdq    
c00133df:	5b                   	pop    ebx
c00133e0:	5e                   	pop    esi
c00133e1:	5f                   	pop    edi
c00133e2:	c3                   	ret    

c00133e3 <SysRegistryOpen(regs*)>:
c00133e3:	83 ec 18             	sub    esp,0x18
c00133e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ea:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133ed:	e8 f7 e8 ff ff       	call   c0011ce9 <CmOpen(char const*)>
c00133f2:	83 c4 1c             	add    esp,0x1c
c00133f5:	99                   	cdq    
c00133f6:	c3                   	ret    

c00133f7 <SysRegistryClose(regs*)>:
c00133f7:	83 ec 18             	sub    esp,0x18
c00133fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013401:	e8 01 ea ff ff       	call   c0011e07 <CmClose(Reghive_Tag*)>
c0013406:	31 c0                	xor    eax,eax
c0013408:	31 d2                	xor    edx,edx
c001340a:	83 c4 1c             	add    esp,0x1c
c001340d:	c3                   	ret    

c001340e <SysSbrk(regs*)>:
c001340e:	56                   	push   esi
c001340f:	53                   	push   ebx
c0013410:	50                   	push   eax
c0013411:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001341a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001341d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013420:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013426:	85 db                	test   ebx,ebx
c0013428:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001342b:	74 02                	je     c001342f <SysSbrk(regs*)+0x21>
c001342d:	79 06                	jns    c0013435 <SysSbrk(regs*)+0x27>
c001342f:	89 f0                	mov    eax,esi
c0013431:	31 d2                	xor    edx,edx
c0013433:	eb 2a                	jmp    c001345f <SysSbrk(regs*)+0x51>
c0013435:	83 c8 ff             	or     eax,0xffffffff
c0013438:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001343e:	89 c2                	mov    edx,eax
c0013440:	77 1d                	ja     c001345f <SysSbrk(regs*)+0x51>
c0013442:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013448:	50                   	push   eax
c0013449:	c1 ea 0c             	shr    edx,0xc
c001344c:	68 07 0c 00 00       	push   0xc07
c0013451:	52                   	push   edx
c0013452:	51                   	push   ecx
c0013453:	e8 b2 69 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c0013458:	89 f0                	mov    eax,esi
c001345a:	31 d2                	xor    edx,edx
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	59                   	pop    ecx
c0013460:	5b                   	pop    ebx
c0013461:	5e                   	pop    esi
c0013462:	c3                   	ret    

c0013463 <SysSetCwd(regs*)>:
c0013463:	83 ec 14             	sub    esp,0x14
c0013466:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001346a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001346d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013472:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013475:	e8 67 7e ff ff       	call   c000b2e1 <Fs::setcwd(Process*, char*)>
c001347a:	83 c4 1c             	add    esp,0x1c
c001347d:	99                   	cdq    
c001347e:	c3                   	ret    

c001347f <SysSetTime(regs*)>:
c001347f:	55                   	push   ebp
c0013480:	31 c9                	xor    ecx,ecx
c0013482:	57                   	push   edi
c0013483:	bd 0c 00 00 00       	mov    ebp,0xc
c0013488:	56                   	push   esi
c0013489:	53                   	push   ebx
c001348a:	31 db                	xor    ebx,ebx
c001348c:	83 ec 10             	sub    esp,0x10
c001348f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013493:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013496:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013499:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001349c:	89 c2                	mov    edx,eax
c001349e:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00134a4:	83 e2 1f             	and    edx,0x1f
c00134a7:	c1 e7 10             	shl    edi,0x10
c00134aa:	42                   	inc    edx
c00134ab:	c1 e8 05             	shr    eax,0x5
c00134ae:	88 d1                	mov    cl,dl
c00134b0:	31 d2                	xor    edx,edx
c00134b2:	f7 f5                	div    ebp
c00134b4:	89 dd                	mov    ebp,ebx
c00134b6:	88 d5                	mov    ch,dl
c00134b8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134be:	0f b7 c1             	movzx  eax,cx
c00134c1:	31 d2                	xor    edx,edx
c00134c3:	09 f8                	or     eax,edi
c00134c5:	bf 3c 00 00 00       	mov    edi,0x3c
c00134ca:	89 c1                	mov    ecx,eax
c00134cc:	89 f0                	mov    eax,esi
c00134ce:	f7 f7                	div    edi
c00134d0:	c1 e2 10             	shl    edx,0x10
c00134d3:	09 d5                	or     ebp,edx
c00134d5:	31 d2                	xor    edx,edx
c00134d7:	89 eb                	mov    ebx,ebp
c00134d9:	f7 f7                	div    edi
c00134db:	bf 10 0e 00 00       	mov    edi,0xe10
c00134e0:	88 d7                	mov    bh,dl
c00134e2:	89 f0                	mov    eax,esi
c00134e4:	31 d2                	xor    edx,edx
c00134e6:	f7 f7                	div    edi
c00134e8:	bf 18 00 00 00       	mov    edi,0x18
c00134ed:	31 d2                	xor    edx,edx
c00134ef:	f7 f7                	div    edi
c00134f1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134f6:	88 d3                	mov    bl,dl
c00134f8:	53                   	push   ebx
c00134f9:	51                   	push   ecx
c00134fa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013500:	e8 d9 85 ff ff       	call   c000bade <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013505:	83 c4 1c             	add    esp,0x1c
c0013508:	83 f0 01             	xor    eax,0x1
c001350b:	5b                   	pop    ebx
c001350c:	0f b6 c0             	movzx  eax,al
c001350f:	5e                   	pop    esi
c0013510:	31 d2                	xor    edx,edx
c0013512:	5f                   	pop    edi
c0013513:	5d                   	pop    ebp
c0013514:	c3                   	ret    

c0013515 <SysTimezone(regs*)>:
c0013515:	53                   	push   ebx
c0013516:	83 ec 08             	sub    esp,0x8
c0013519:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001351d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013521:	75 17                	jne    c001353a <SysTimezone(regs*)+0x25>
c0013523:	83 ec 0c             	sub    esp,0xc
c0013526:	68 ed 0e 02 c0       	push   0xc0020eed
c001352b:	e8 66 74 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0013530:	83 c8 ff             	or     eax,0xffffffff
c0013533:	83 c4 10             	add    esp,0x10
c0013536:	89 c2                	mov    edx,eax
c0013538:	eb 20                	jmp    c001355a <SysTimezone(regs*)+0x45>
c001353a:	83 ec 0c             	sub    esp,0xc
c001353d:	68 02 0f 02 c0       	push   0xc0020f02
c0013542:	e8 4f 74 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0013547:	58                   	pop    eax
c0013548:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001354b:	e8 f8 82 ff ff       	call   c000b848 <User::loadClockSettings(int)>
c0013550:	83 c4 10             	add    esp,0x10
c0013553:	b8 01 00 00 00       	mov    eax,0x1
c0013558:	31 d2                	xor    edx,edx
c001355a:	83 c4 08             	add    esp,0x8
c001355d:	5b                   	pop    ebx
c001355e:	c3                   	ret    

c001355f <SysWrite(regs*)>:
c001355f:	57                   	push   edi
c0013560:	56                   	push   esi
c0013561:	53                   	push   ebx
c0013562:	83 ec 10             	sub    esp,0x10
c0013565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013569:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001356c:	83 f8 02             	cmp    eax,0x2
c001356f:	77 10                	ja     c0013581 <SysWrite(regs*)+0x22>
c0013571:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013576:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013579:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001357f:	eb 0e                	jmp    c001358f <SysWrite(regs*)+0x30>
c0013581:	83 ec 0c             	sub    esp,0xc
c0013584:	50                   	push   eax
c0013585:	e8 39 5f ff ff       	call   c00094c3 <getFromFileDescriptor(int)>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	89 c1                	mov    ecx,eax
c001358f:	83 c8 ff             	or     eax,0xffffffff
c0013592:	85 c9                	test   ecx,ecx
c0013594:	89 c2                	mov    edx,eax
c0013596:	74 28                	je     c00135c0 <SysWrite(regs*)+0x61>
c0013598:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135a0:	31 ff                	xor    edi,edi
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135ab:	52                   	push   edx
c00135ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135af:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135b2:	57                   	push   edi
c00135b3:	56                   	push   esi
c00135b4:	51                   	push   ecx
c00135b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135bc:	83 c4 20             	add    esp,0x20
c00135bf:	99                   	cdq    
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	5b                   	pop    ebx
c00135c4:	5e                   	pop    esi
c00135c5:	5f                   	pop    edi
c00135c6:	c3                   	ret    

c00135c7 <SysWsbe(regs*)>:
c00135c7:	57                   	push   edi
c00135c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00135cd:	56                   	push   esi
c00135ce:	be 41 0f 02 c0       	mov    esi,0xc0020f41
c00135d3:	53                   	push   ebx
c00135d4:	83 ec 30             	sub    esp,0x30
c00135d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135db:	fc                   	cld    
c00135dc:	83 ec 0c             	sub    esp,0xc
c00135df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135e1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135ed:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00135f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00135f5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135f8:	57                   	push   edi
c00135f9:	e8 72 cf fe ff       	call   c0000570 <strlen>
c00135fe:	5a                   	pop    edx
c00135ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013603:	52                   	push   edx
c0013604:	31 d2                	xor    edx,edx
c0013606:	57                   	push   edi
c0013607:	52                   	push   edx
c0013608:	50                   	push   eax
c0013609:	56                   	push   esi
c001360a:	ff d3                	call   ebx
c001360c:	83 c4 14             	add    esp,0x14
c001360f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0013613:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013616:	e8 ad 23 00 00       	call   c00159c8 <terminateTask(int)>
c001361b:	83 c4 40             	add    esp,0x40
c001361e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013623:	5b                   	pop    ebx
c0013624:	31 d2                	xor    edx,edx
c0013626:	5e                   	pop    esi
c0013627:	5f                   	pop    edi
c0013628:	c3                   	ret    

c0013629 <SysYield(regs*)>:
c0013629:	83 ec 0c             	sub    esp,0xc
c001362c:	fa                   	cli    
c001362d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013633:	e8 f0 19 00 00       	call   c0015028 <schedule()>
c0013638:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001363d:	48                   	dec    eax
c001363e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013643:	75 01                	jne    c0013646 <SysYield(regs*)+0x1d>
c0013645:	fb                   	sti    
c0013646:	31 c0                	xor    eax,eax
c0013648:	31 d2                	xor    edx,edx
c001364a:	83 c4 0c             	add    esp,0xc
c001364d:	c3                   	ret    

c001364e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001364e:	55                   	push   ebp
c001364f:	57                   	push   edi
c0013650:	56                   	push   esi
c0013651:	53                   	push   ebx
c0013652:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013658:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013660:	0f 95 c0             	setne  al
c0013663:	31 d2                	xor    edx,edx
c0013665:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001366d:	0f 94 c2             	sete   dl
c0013670:	85 c2                	test   edx,eax
c0013672:	74 34                	je     c00136a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013674:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001367f:	74 27                	je     c00136a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013681:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013688:	05 00 10 00 00       	add    eax,0x1000
c001368d:	89 c1                	mov    ecx,eax
c001368f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013694:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001369a:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00136a1:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00136a8:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00136af:	83 ec 0c             	sub    esp,0xc
c00136b2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136b8:	6a 01                	push   0x1
c00136ba:	e8 5e 5f ff ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	89 c3                	mov    ebx,eax
c00136c4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136ca:	0f 86 25 01 00 00    	jbe    c00137f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00136d0:	c1 ee 0c             	shr    esi,0xc
c00136d3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136e6:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136f1:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00136f8:	29 ef                	sub    edi,ebp
c00136fa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00136fe:	0f 83 f8 00 00 00    	jae    c00137fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013704:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001370a:	76 05                	jbe    c0013711 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001370c:	bf 00 10 00 00       	mov    edi,0x1000
c0013711:	83 ec 0c             	sub    esp,0xc
c0013714:	31 d2                	xor    edx,edx
c0013716:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001371d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001371f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013723:	50                   	push   eax
c0013724:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013728:	56                   	push   esi
c0013729:	52                   	push   edx
c001372a:	57                   	push   edi
c001372b:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013732:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013735:	83 c4 20             	add    esp,0x20
c0013738:	85 c0                	test   eax,eax
c001373a:	75 06                	jne    c0013742 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001373c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013740:	74 13                	je     c0013755 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013742:	83 ec 0c             	sub    esp,0xc
c0013745:	53                   	push   ebx
c0013746:	e8 ee 61 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c001374b:	83 c4 10             	add    esp,0x10
c001374e:	31 c0                	xor    eax,eax
c0013750:	e9 7c 01 00 00       	jmp    c00138d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013755:	fa                   	cli    
c0013756:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001375c:	e8 52 46 ff ff       	call   c0007db3 <Phys::allocatePage()>
c0013761:	6a 07                	push   0x7
c0013763:	89 c7                	mov    edi,eax
c0013765:	53                   	push   ebx
c0013766:	50                   	push   eax
c0013767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001376c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001376f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013775:	e8 8a 65 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001377a:	83 c4 0c             	add    esp,0xc
c001377d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013784:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001378a:	6a 00                	push   0x0
c001378c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013791:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013794:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001379a:	e8 cb 63 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c001379f:	58                   	pop    eax
c00137a0:	5a                   	pop    edx
c00137a1:	68 07 0c 00 00       	push   0xc07
c00137a6:	55                   	push   ebp
c00137a7:	57                   	push   edi
c00137a8:	89 df                	mov    edi,ebx
c00137aa:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00137b1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137b7:	6a 00                	push   0x0
c00137b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137c7:	e8 22 69 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137cc:	b9 00 10 00 00       	mov    ecx,0x1000
c00137d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137d3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137d8:	83 c4 20             	add    esp,0x20
c00137db:	48                   	dec    eax
c00137dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137e1:	85 c0                	test   eax,eax
c00137e3:	75 01                	jne    c00137e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00137e5:	fb                   	sti    
c00137e6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137ec:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137f0:	e9 f1 fe ff ff       	jmp    c00136e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00137f5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137fc:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013803:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013809:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001380f:	0f 86 ae 00 00 00    	jbe    c00138c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013815:	fa                   	cli    
c0013816:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001381c:	c1 ee 0c             	shr    esi,0xc
c001381f:	51                   	push   ecx
c0013820:	31 ff                	xor    edi,edi
c0013822:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013829:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001382f:	6a 00                	push   0x0
c0013831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013836:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013839:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001383f:	e8 26 63 ff ff       	call   c0009b6a <VAS::mapOtherVASIn(bool, VAS*)>
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	e8 67 45 ff ff       	call   c0007db3 <Phys::allocatePage()>
c001384c:	47                   	inc    edi
c001384d:	6a 07                	push   0x7
c001384f:	53                   	push   ebx
c0013850:	50                   	push   eax
c0013851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013855:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001385b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001385e:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013864:	e8 9b 64 ff ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013869:	58                   	pop    eax
c001386a:	5a                   	pop    edx
c001386b:	68 07 0c 00 00       	push   0xc07
c0013870:	55                   	push   ebp
c0013871:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013877:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001387b:	50                   	push   eax
c001387c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013883:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013889:	6a 00                	push   0x0
c001388b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013890:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013893:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013899:	e8 50 68 ff ff       	call   c000a0ee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001389e:	83 c4 1c             	add    esp,0x1c
c00138a1:	68 00 10 00 00       	push   0x1000
c00138a6:	6a 00                	push   0x0
c00138a8:	53                   	push   ebx
c00138a9:	e8 42 cc fe ff       	call   c00004f0 <memset>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	39 fe                	cmp    esi,edi
c00138b3:	77 92                	ja     c0013847 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00138b5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138ba:	48                   	dec    eax
c00138bb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138c0:	75 01                	jne    c00138c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00138c2:	fb                   	sti    
c00138c3:	83 ec 0c             	sub    esp,0xc
c00138c6:	53                   	push   ebx
c00138c7:	e8 6d 60 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00138cc:	83 c4 10             	add    esp,0x10
c00138cf:	b0 01                	mov    al,0x1
c00138d1:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138d7:	5b                   	pop    ebx
c00138d8:	5e                   	pop    esi
c00138d9:	5f                   	pop    edi
c00138da:	5d                   	pop    ebp
c00138db:	c3                   	ret    

c00138dc <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138dc:	55                   	push   ebp
c00138dd:	57                   	push   edi
c00138de:	56                   	push   esi
c00138df:	53                   	push   ebx
c00138e0:	83 ec 48             	sub    esp,0x48
c00138e3:	68 14 01 00 00       	push   0x114
c00138e8:	e8 c1 41 ff ff       	call   c0007aae <malloc>
c00138ed:	83 c4 0c             	add    esp,0xc
c00138f0:	89 c6                	mov    esi,eax
c00138f2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138f6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00138fa:	50                   	push   eax
c00138fb:	e8 18 76 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0013900:	58                   	pop    eax
c0013901:	5a                   	pop    edx
c0013902:	6a 01                	push   0x1
c0013904:	56                   	push   esi
c0013905:	e8 ca 76 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	85 c0                	test   eax,eax
c001390f:	0f 85 43 01 00 00    	jne    c0013a58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013915:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001391d:	83 ec 0c             	sub    esp,0xc
c0013920:	6a 34                	push   0x34
c0013922:	e8 87 41 ff ff       	call   c0007aae <malloc>
c0013927:	89 c3                	mov    ebx,eax
c0013929:	58                   	pop    eax
c001392a:	8b 06                	mov    eax,DWORD PTR [esi]
c001392c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013930:	57                   	push   edi
c0013931:	53                   	push   ebx
c0013932:	6a 00                	push   0x0
c0013934:	6a 34                	push   0x34
c0013936:	56                   	push   esi
c0013937:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001393a:	83 c4 20             	add    esp,0x20
c001393d:	85 c0                	test   eax,eax
c001393f:	0f 85 13 01 00 00    	jne    c0013a58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013945:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001394b:	0f 85 07 01 00 00    	jne    c0013a58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013951:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013954:	85 c0                	test   eax,eax
c0013956:	0f 84 fc 00 00 00    	je     c0013a58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001395c:	31 d2                	xor    edx,edx
c001395e:	55                   	push   ebp
c001395f:	52                   	push   edx
c0013960:	50                   	push   eax
c0013961:	56                   	push   esi
c0013962:	e8 2b 77 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	85 c0                	test   eax,eax
c001396c:	0f 85 e6 00 00 00    	jne    c0013a58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013978:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001397c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013980:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013984:	0f af c2             	imul   eax,edx
c0013987:	50                   	push   eax
c0013988:	e8 21 41 ff ff       	call   c0007aae <malloc>
c001398d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001398f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013993:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013996:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001399a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001399e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00139a2:	0f af c2             	imul   eax,edx
c00139a5:	99                   	cdq    
c00139a6:	52                   	push   edx
c00139a7:	50                   	push   eax
c00139a8:	56                   	push   esi
c00139a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139ac:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00139af:	83 c4 20             	add    esp,0x20
c00139b2:	85 c0                	test   eax,eax
c00139b4:	0f 84 9e 00 00 00    	je     c0013a58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139ba:	31 d2                	xor    edx,edx
c00139bc:	51                   	push   ecx
c00139bd:	52                   	push   edx
c00139be:	50                   	push   eax
c00139bf:	56                   	push   esi
c00139c0:	e8 cd 76 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c00139c5:	83 c4 10             	add    esp,0x10
c00139c8:	85 c0                	test   eax,eax
c00139ca:	0f 85 88 00 00 00    	jne    c0013a58 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139d7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139db:	31 ed                	xor    ebp,ebp
c00139dd:	0f af c2             	imul   eax,edx
c00139e0:	50                   	push   eax
c00139e1:	e8 c8 40 ff ff       	call   c0007aae <malloc>
c00139e6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00139e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00139ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139f7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139fb:	0f af c2             	imul   eax,edx
c00139fe:	99                   	cdq    
c00139ff:	52                   	push   edx
c0013a00:	50                   	push   eax
c0013a01:	56                   	push   esi
c0013a02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a05:	83 c4 20             	add    esp,0x20
c0013a08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a10:	0f b7 fd             	movzx  edi,bp
c0013a13:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013a17:	73 7d                	jae    c0013a96 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013a19:	c1 e7 05             	shl    edi,0x5
c0013a1c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013a20:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013a23:	75 6b                	jne    c0013a90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013a25:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013a28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a2c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013a2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a33:	52                   	push   edx
c0013a34:	31 d2                	xor    edx,edx
c0013a36:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013a39:	52                   	push   edx
c0013a3a:	50                   	push   eax
c0013a3b:	56                   	push   esi
c0013a3c:	e8 51 76 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013a41:	83 c4 10             	add    esp,0x10
c0013a44:	85 c0                	test   eax,eax
c0013a46:	74 17                	je     c0013a5f <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013a48:	83 ec 0c             	sub    esp,0xc
c0013a4b:	68 6d 0f 02 c0       	push   0xc0020f6d
c0013a50:	e8 41 6f ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	31 c0                	xor    eax,eax
c0013a5a:	e9 87 00 00 00       	jmp    c0013ae6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013a5f:	83 ec 0c             	sub    esp,0xc
c0013a62:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013a65:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013a68:	50                   	push   eax
c0013a69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a71:	56                   	push   esi
c0013a72:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a76:	e8 d3 fb ff ff       	call   c001364e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a7f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013a83:	83 c4 20             	add    esp,0x20
c0013a86:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013a8a:	73 04                	jae    c0013a90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013a8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a90:	45                   	inc    ebp
c0013a91:	e9 7a ff ff ff       	jmp    c0013a10 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a96:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013a9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013aa2:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013ab1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ab6:	05 00 10 00 00       	add    eax,0x1000
c0013abb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac2:	e8 f7 3f ff ff       	call   c0007abe <free>
c0013ac7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aca:	e8 ef 3f ff ff       	call   c0007abe <free>
c0013acf:	58                   	pop    eax
c0013ad0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ad4:	e8 e5 3f ff ff       	call   c0007abe <free>
c0013ad9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013adc:	e8 51 75 ff ff       	call   c000b032 <File::close()>
c0013ae1:	83 c4 10             	add    esp,0x10
c0013ae4:	b0 01                	mov    al,0x1
c0013ae6:	83 c4 3c             	add    esp,0x3c
c0013ae9:	5b                   	pop    ebx
c0013aea:	5e                   	pop    esi
c0013aeb:	5f                   	pop    edi
c0013aec:	5d                   	pop    ebp
c0013aed:	c3                   	ret    

c0013aee <Thr::runtimeReferenceHelper()>:
c0013aee:	83 ec 18             	sub    esp,0x18
c0013af1:	68 75 0f 02 c0       	push   0xc0020f75
c0013af6:	e8 9b 6e ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0013afb:	fa                   	cli    
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	eb fe                	jmp    c0013aff <Thr::runtimeReferenceHelper()+0x11>

c0013b01 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b01:	57                   	push   edi
c0013b02:	56                   	push   esi
c0013b03:	53                   	push   ebx
c0013b04:	31 db                	xor    ebx,ebx
c0013b06:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b0c:	7e 3c                	jle    c0013b4a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b0e:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b15:	31 ff                	xor    edi,edi
c0013b17:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b1e:	7e 27                	jle    c0013b47 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b20:	50                   	push   eax
c0013b21:	50                   	push   eax
c0013b22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b26:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b28:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b2f:	50                   	push   eax
c0013b30:	e8 1b cc fe ff       	call   c0000750 <strcmp>
c0013b35:	83 c4 10             	add    esp,0x10
c0013b38:	85 c0                	test   eax,eax
c0013b3a:	75 05                	jne    c0013b41 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b3c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b3f:	eb 0b                	jmp    c0013b4c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b41:	83 c6 10             	add    esi,0x10
c0013b44:	47                   	inc    edi
c0013b45:	eb d0                	jmp    c0013b17 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b47:	43                   	inc    ebx
c0013b48:	eb bc                	jmp    c0013b06 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b4a:	31 c0                	xor    eax,eax
c0013b4c:	5b                   	pop    ebx
c0013b4d:	5e                   	pop    esi
c0013b4e:	5f                   	pop    edi
c0013b4f:	c3                   	ret    

c0013b50 <Thr::loadKernelSymbolTable(char const*)>:
c0013b50:	55                   	push   ebp
c0013b51:	57                   	push   edi
c0013b52:	56                   	push   esi
c0013b53:	53                   	push   ebx
c0013b54:	83 ec 68             	sub    esp,0x68
c0013b57:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b5d:	68 14 01 00 00       	push   0x114
c0013b62:	e8 47 3f ff ff       	call   c0007aae <malloc>
c0013b67:	83 c4 0c             	add    esp,0xc
c0013b6a:	89 c3                	mov    ebx,eax
c0013b6c:	56                   	push   esi
c0013b6d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b71:	50                   	push   eax
c0013b72:	e8 a1 73 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0013b77:	5e                   	pop    esi
c0013b78:	5f                   	pop    edi
c0013b79:	6a 01                	push   0x1
c0013b7b:	53                   	push   ebx
c0013b7c:	e8 53 74 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0013b81:	83 c4 10             	add    esp,0x10
c0013b84:	85 c0                	test   eax,eax
c0013b86:	74 0a                	je     c0013b92 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	68 97 0f 02 c0       	push   0xc0020f97
c0013b90:	eb 34                	jmp    c0013bc6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b92:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b9a:	83 ec 0c             	sub    esp,0xc
c0013b9d:	6a 34                	push   0x34
c0013b9f:	e8 0a 3f ff ff       	call   c0007aae <malloc>
c0013ba4:	59                   	pop    ecx
c0013ba5:	89 c7                	mov    edi,eax
c0013ba7:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013bab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bad:	56                   	push   esi
c0013bae:	57                   	push   edi
c0013baf:	6a 00                	push   0x0
c0013bb1:	6a 34                	push   0x34
c0013bb3:	53                   	push   ebx
c0013bb4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bb7:	83 c4 20             	add    esp,0x20
c0013bba:	85 c0                	test   eax,eax
c0013bbc:	74 17                	je     c0013bd5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013bbe:	83 ec 0c             	sub    esp,0xc
c0013bc1:	68 ae 0f 02 c0       	push   0xc0020fae
c0013bc6:	e8 a8 cc ff ff       	call   c0010873 <KePanic(char const*)>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	31 c0                	xor    eax,eax
c0013bd0:	e9 31 02 00 00       	jmp    c0013e06 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013bd5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013bdb:	75 e1                	jne    c0013bbe <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bdd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013be0:	85 c0                	test   eax,eax
c0013be2:	74 da                	je     c0013bbe <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013be4:	52                   	push   edx
c0013be5:	31 d2                	xor    edx,edx
c0013be7:	52                   	push   edx
c0013be8:	50                   	push   eax
c0013be9:	53                   	push   ebx
c0013bea:	e8 a3 74 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013bef:	83 c4 10             	add    esp,0x10
c0013bf2:	85 c0                	test   eax,eax
c0013bf4:	75 c8                	jne    c0013bbe <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bf6:	83 ec 0c             	sub    esp,0xc
c0013bf9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013bfd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c01:	31 ed                	xor    ebp,ebp
c0013c03:	0f af c2             	imul   eax,edx
c0013c06:	50                   	push   eax
c0013c07:	e8 a2 3e ff ff       	call   c0007aae <malloc>
c0013c0c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c12:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c19:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c1d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c21:	0f af c2             	imul   eax,edx
c0013c24:	99                   	cdq    
c0013c25:	52                   	push   edx
c0013c26:	50                   	push   eax
c0013c27:	53                   	push   ebx
c0013c28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c2b:	83 c4 20             	add    esp,0x20
c0013c2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c36:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c46:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c4e:	0f b7 f5             	movzx  esi,bp
c0013c51:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c55:	0f 83 a7 00 00 00    	jae    c0013d02 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c5b:	6b f6 28             	imul   esi,esi,0x28
c0013c5e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c62:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c65:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c69:	50                   	push   eax
c0013c6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c6e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c72:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c74:	6b c0 28             	imul   eax,eax,0x28
c0013c77:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c7b:	89 d0                	mov    eax,edx
c0013c7d:	31 d2                	xor    edx,edx
c0013c7f:	52                   	push   edx
c0013c80:	50                   	push   eax
c0013c81:	53                   	push   ebx
c0013c82:	e8 0b 74 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013c87:	83 c4 0c             	add    esp,0xc
c0013c8a:	6a 20                	push   0x20
c0013c8c:	6a 00                	push   0x0
c0013c8e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c92:	52                   	push   edx
c0013c93:	e8 58 c8 fe ff       	call   c00004f0 <memset>
c0013c98:	58                   	pop    eax
c0013c99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c9f:	51                   	push   ecx
c0013ca0:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013ca4:	52                   	push   edx
c0013ca5:	6a 00                	push   0x0
c0013ca7:	6a 1f                	push   0x1f
c0013ca9:	53                   	push   ebx
c0013caa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cad:	83 c4 18             	add    esp,0x18
c0013cb0:	68 c5 0f 02 c0       	push   0xc0020fc5
c0013cb5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013cb9:	52                   	push   edx
c0013cba:	e8 91 ca fe ff       	call   c0000750 <strcmp>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	85 c0                	test   eax,eax
c0013cc4:	75 0f                	jne    c0013cd5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cc6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cc9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ccd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cd5:	50                   	push   eax
c0013cd6:	50                   	push   eax
c0013cd7:	68 cd 0f 02 c0       	push   0xc0020fcd
c0013cdc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013ce0:	50                   	push   eax
c0013ce1:	e8 6a ca fe ff       	call   c0000750 <strcmp>
c0013ce6:	83 c4 10             	add    esp,0x10
c0013ce9:	85 c0                	test   eax,eax
c0013ceb:	75 0f                	jne    c0013cfc <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013ced:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cfc:	45                   	inc    ebp
c0013cfd:	e9 4c ff ff ff       	jmp    c0013c4e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d02:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d07:	75 10                	jne    c0013d19 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013d09:	83 ec 0c             	sub    esp,0xc
c0013d0c:	68 d5 0f 02 c0       	push   0xc0020fd5
c0013d11:	e8 5d cb ff ff       	call   c0010873 <KePanic(char const*)>
c0013d16:	83 c4 10             	add    esp,0x10
c0013d19:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d1e:	75 10                	jne    c0013d30 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d20:	83 ec 0c             	sub    esp,0xc
c0013d23:	68 d5 0f 02 c0       	push   0xc0020fd5
c0013d28:	e8 46 cb ff ff       	call   c0010873 <KePanic(char const*)>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	31 d2                	xor    edx,edx
c0013d32:	50                   	push   eax
c0013d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d37:	52                   	push   edx
c0013d38:	50                   	push   eax
c0013d39:	53                   	push   ebx
c0013d3a:	e8 53 73 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013d3f:	5a                   	pop    edx
c0013d40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d44:	e8 65 3d ff ff       	call   c0007aae <malloc>
c0013d49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d51:	31 c9                	xor    ecx,ecx
c0013d53:	5e                   	pop    esi
c0013d54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d56:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d5a:	55                   	push   ebp
c0013d5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d5f:	51                   	push   ecx
c0013d60:	52                   	push   edx
c0013d61:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d65:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d69:	53                   	push   ebx
c0013d6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d6d:	83 c4 14             	add    esp,0x14
c0013d70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d74:	e8 35 3d ff ff       	call   c0007aae <malloc>
c0013d79:	89 c6                	mov    esi,eax
c0013d7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d7d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d80:	56                   	push   esi
c0013d81:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d85:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d89:	51                   	push   ecx
c0013d8a:	52                   	push   edx
c0013d8b:	53                   	push   ebx
c0013d8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d93:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d99:	83 c4 1c             	add    esp,0x1c
c0013d9c:	c1 e8 04             	shr    eax,0x4
c0013d9f:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013da6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013daa:	31 d2                	xor    edx,edx
c0013dac:	52                   	push   edx
c0013dad:	50                   	push   eax
c0013dae:	53                   	push   ebx
c0013daf:	e8 de 72 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013db4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013db6:	31 d2                	xor    edx,edx
c0013db8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dbb:	56                   	push   esi
c0013dbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dc0:	52                   	push   edx
c0013dc1:	50                   	push   eax
c0013dc2:	53                   	push   ebx
c0013dc3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dc6:	83 c4 14             	add    esp,0x14
c0013dc9:	53                   	push   ebx
c0013dca:	e8 63 72 ff ff       	call   c000b032 <File::close()>
c0013dcf:	5d                   	pop    ebp
c0013dd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013dd4:	e8 e5 3c ff ff       	call   c0007abe <free>
c0013dd9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ddc:	e8 dd 3c ff ff       	call   c0007abe <free>
c0013de1:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013de6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013dea:	8d 50 01             	lea    edx,[eax+0x1]
c0013ded:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013df4:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013dfb:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e01:	83 c4 10             	add    esp,0x10
c0013e04:	b0 01                	mov    al,0x1
c0013e06:	83 c4 5c             	add    esp,0x5c
c0013e09:	5b                   	pop    ebx
c0013e0a:	5e                   	pop    esi
c0013e0b:	5f                   	pop    edi
c0013e0c:	5d                   	pop    ebp
c0013e0d:	c3                   	ret    

c0013e0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e0e:	55                   	push   ebp
c0013e0f:	57                   	push   edi
c0013e10:	56                   	push   esi
c0013e11:	53                   	push   ebx
c0013e12:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e18:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e1f:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013e25:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013e29:	68 14 01 00 00       	push   0x114
c0013e2e:	e8 7b 3c ff ff       	call   c0007aae <malloc>
c0013e33:	83 c4 0c             	add    esp,0xc
c0013e36:	89 c5                	mov    ebp,eax
c0013e38:	53                   	push   ebx
c0013e39:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e40:	50                   	push   eax
c0013e41:	e8 d2 70 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0013e46:	5e                   	pop    esi
c0013e47:	5f                   	pop    edi
c0013e48:	6a 01                	push   0x1
c0013e4a:	55                   	push   ebp
c0013e4b:	e8 84 71 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0013e50:	83 c4 10             	add    esp,0x10
c0013e53:	85 c0                	test   eax,eax
c0013e55:	0f 85 aa 06 00 00    	jne    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013e5b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e63:	83 ec 0c             	sub    esp,0xc
c0013e66:	6a 34                	push   0x34
c0013e68:	e8 41 3c ff ff       	call   c0007aae <malloc>
c0013e6d:	5b                   	pop    ebx
c0013e6e:	89 c7                	mov    edi,eax
c0013e70:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e74:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e77:	53                   	push   ebx
c0013e78:	57                   	push   edi
c0013e79:	6a 00                	push   0x0
c0013e7b:	6a 34                	push   0x34
c0013e7d:	55                   	push   ebp
c0013e7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e81:	83 c4 20             	add    esp,0x20
c0013e84:	85 c0                	test   eax,eax
c0013e86:	0f 85 79 06 00 00    	jne    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013e8c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013e92:	0f 85 6d 06 00 00    	jne    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013e98:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013e9b:	85 c0                	test   eax,eax
c0013e9d:	0f 84 62 06 00 00    	je     c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013ea3:	31 d2                	xor    edx,edx
c0013ea5:	51                   	push   ecx
c0013ea6:	52                   	push   edx
c0013ea7:	50                   	push   eax
c0013ea8:	55                   	push   ebp
c0013ea9:	e8 e4 71 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013eae:	83 c4 10             	add    esp,0x10
c0013eb1:	85 c0                	test   eax,eax
c0013eb3:	0f 85 4c 06 00 00    	jne    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013eb9:	83 ec 0c             	sub    esp,0xc
c0013ebc:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013ebf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ec3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013ec7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ecb:	0f af c2             	imul   eax,edx
c0013ece:	50                   	push   eax
c0013ecf:	e8 da 3b ff ff       	call   c0007aae <malloc>
c0013ed4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ed7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013edb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ede:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ee2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ee6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013eea:	0f af c2             	imul   eax,edx
c0013eed:	99                   	cdq    
c0013eee:	52                   	push   edx
c0013eef:	50                   	push   eax
c0013ef0:	55                   	push   ebp
c0013ef1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ef4:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013ef7:	83 c4 20             	add    esp,0x20
c0013efa:	85 c0                	test   eax,eax
c0013efc:	0f 84 03 06 00 00    	je     c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f02:	52                   	push   edx
c0013f03:	31 d2                	xor    edx,edx
c0013f05:	52                   	push   edx
c0013f06:	50                   	push   eax
c0013f07:	55                   	push   ebp
c0013f08:	e8 85 71 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013f0d:	83 c4 10             	add    esp,0x10
c0013f10:	85 c0                	test   eax,eax
c0013f12:	0f 85 ed 05 00 00    	jne    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f18:	83 ec 0c             	sub    esp,0xc
c0013f1b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f1f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f23:	31 f6                	xor    esi,esi
c0013f25:	0f af c2             	imul   eax,edx
c0013f28:	50                   	push   eax
c0013f29:	e8 80 3b ff ff       	call   c0007aae <malloc>
c0013f2e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013f35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f3c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f40:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f44:	0f af c2             	imul   eax,edx
c0013f47:	99                   	cdq    
c0013f48:	52                   	push   edx
c0013f49:	50                   	push   eax
c0013f4a:	55                   	push   ebp
c0013f4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f4e:	83 c4 20             	add    esp,0x20
c0013f51:	0f b7 de             	movzx  ebx,si
c0013f54:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0013f58:	0f 83 87 00 00 00    	jae    c0013fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013f5e:	c1 e3 05             	shl    ebx,0x5
c0013f61:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013f65:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013f68:	75 75                	jne    c0013fdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013f6a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013f6d:	31 d2                	xor    edx,edx
c0013f6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f73:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013f76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f7a:	50                   	push   eax
c0013f7b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f7e:	52                   	push   edx
c0013f7f:	50                   	push   eax
c0013f80:	55                   	push   ebp
c0013f81:	e8 0c 71 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0013f86:	83 c4 10             	add    esp,0x10
c0013f89:	85 c0                	test   eax,eax
c0013f8b:	0f 85 74 05 00 00    	jne    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f91:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f98:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f9b:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0013f9f:	31 d2                	xor    edx,edx
c0013fa1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013fa5:	83 ec 0c             	sub    esp,0xc
c0013fa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013fac:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fb3:	50                   	push   eax
c0013fb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbc:	52                   	push   edx
c0013fbd:	50                   	push   eax
c0013fbe:	55                   	push   ebp
c0013fbf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fc2:	83 c4 1c             	add    esp,0x1c
c0013fc5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013fc8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013fcb:	50                   	push   eax
c0013fcc:	6a 00                	push   0x0
c0013fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fd2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013fd6:	50                   	push   eax
c0013fd7:	e8 14 c5 fe ff       	call   c00004f0 <memset>
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	46                   	inc    esi
c0013fe0:	e9 6c ff ff ff       	jmp    c0013f51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013fe5:	53                   	push   ebx
c0013fe6:	31 db                	xor    ebx,ebx
c0013fe8:	68 00 01 00 00       	push   0x100
c0013fed:	6a 00                	push   0x0
c0013fef:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013ff3:	50                   	push   eax
c0013ff4:	e8 f7 c4 fe ff       	call   c00004f0 <memset>
c0013ff9:	83 c4 0c             	add    esp,0xc
c0013ffc:	68 00 01 00 00       	push   0x100
c0014001:	6a 00                	push   0x0
c0014003:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001400a:	50                   	push   eax
c001400b:	e8 e0 c4 fe ff       	call   c00004f0 <memset>
c0014010:	83 c4 10             	add    esp,0x10
c0014013:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001401b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014023:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001402b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014033:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001403b:	0f b7 f3             	movzx  esi,bx
c001403e:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014042:	0f 83 2d 01 00 00    	jae    c0014175 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014048:	6b f6 28             	imul   esi,esi,0x28
c001404b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001404f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014052:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014056:	52                   	push   edx
c0014057:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001405b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001405f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014061:	6b d2 28             	imul   edx,edx,0x28
c0014064:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014068:	31 d2                	xor    edx,edx
c001406a:	52                   	push   edx
c001406b:	50                   	push   eax
c001406c:	55                   	push   ebp
c001406d:	e8 20 70 ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0014072:	83 c4 0c             	add    esp,0xc
c0014075:	6a 20                	push   0x20
c0014077:	6a 00                	push   0x0
c0014079:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014080:	51                   	push   ecx
c0014081:	e8 6a c4 fe ff       	call   c00004f0 <memset>
c0014086:	59                   	pop    ecx
c0014087:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001408a:	8d 54 24 58          	lea    edx,[esp+0x58]
c001408e:	52                   	push   edx
c001408f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014096:	51                   	push   ecx
c0014097:	6a 00                	push   0x0
c0014099:	6a 1f                	push   0x1f
c001409b:	55                   	push   ebp
c001409c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001409f:	83 c4 1c             	add    esp,0x1c
c00140a2:	6a 09                	push   0x9
c00140a4:	68 ef 0f 02 c0       	push   0xc0020fef
c00140a9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140b0:	51                   	push   ecx
c00140b1:	e8 ca c2 fe ff       	call   c0000380 <memcmp>
c00140b6:	83 c4 10             	add    esp,0x10
c00140b9:	85 c0                	test   eax,eax
c00140bb:	75 21                	jne    c00140de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00140bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140c5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00140c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00140cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140d0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140d7:	89 d0                	mov    eax,edx
c00140d9:	40                   	inc    eax
c00140da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140de:	50                   	push   eax
c00140df:	6a 09                	push   0x9
c00140e1:	68 f9 0f 02 c0       	push   0xc0020ff9
c00140e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140ed:	50                   	push   eax
c00140ee:	e8 8d c2 fe ff       	call   c0000380 <memcmp>
c00140f3:	83 c4 10             	add    esp,0x10
c00140f6:	85 c0                	test   eax,eax
c00140f8:	75 21                	jne    c001411b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00140fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014102:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014106:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001410a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001410d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014114:	89 d0                	mov    eax,edx
c0014116:	40                   	inc    eax
c0014117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001411b:	50                   	push   eax
c001411c:	50                   	push   eax
c001411d:	68 c5 0f 02 c0       	push   0xc0020fc5
c0014122:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014129:	50                   	push   eax
c001412a:	e8 21 c6 fe ff       	call   c0000750 <strcmp>
c001412f:	83 c4 10             	add    esp,0x10
c0014132:	85 c0                	test   eax,eax
c0014134:	75 0f                	jne    c0014145 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014136:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014139:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001413d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014141:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014145:	50                   	push   eax
c0014146:	50                   	push   eax
c0014147:	68 cd 0f 02 c0       	push   0xc0020fcd
c001414c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014153:	50                   	push   eax
c0014154:	e8 f7 c5 fe ff       	call   c0000750 <strcmp>
c0014159:	83 c4 10             	add    esp,0x10
c001415c:	85 c0                	test   eax,eax
c001415e:	75 0f                	jne    c001416f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014160:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014163:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001416b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001416f:	43                   	inc    ebx
c0014170:	e9 c6 fe ff ff       	jmp    c001403b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014175:	31 d2                	xor    edx,edx
c0014177:	50                   	push   eax
c0014178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001417c:	52                   	push   edx
c001417d:	50                   	push   eax
c001417e:	55                   	push   ebp
c001417f:	e8 0e 6f ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0014184:	58                   	pop    eax
c0014185:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014189:	e8 20 39 ff ff       	call   c0007aae <malloc>
c001418e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014191:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014195:	31 d2                	xor    edx,edx
c0014197:	58                   	pop    eax
c0014198:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001419c:	53                   	push   ebx
c001419d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00141a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141a5:	52                   	push   edx
c00141a6:	50                   	push   eax
c00141a7:	55                   	push   ebp
c00141a8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141ab:	83 c4 14             	add    esp,0x14
c00141ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00141b2:	e8 f7 38 ff ff       	call   c0007aae <malloc>
c00141b7:	31 d2                	xor    edx,edx
c00141b9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141bd:	83 c4 0c             	add    esp,0xc
c00141c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141c4:	52                   	push   edx
c00141c5:	50                   	push   eax
c00141c6:	55                   	push   ebp
c00141c7:	e8 c6 6e ff ff       	call   c000b092 <File::seek(unsigned long long)>
c00141cc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00141cf:	31 d2                	xor    edx,edx
c00141d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141dc:	52                   	push   edx
c00141dd:	50                   	push   eax
c00141de:	55                   	push   ebp
c00141df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141e2:	83 c4 20             	add    esp,0x20
c00141e5:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00141ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00141f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00141f6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141fa:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00141fe:	0f 84 05 03 00 00    	je     c0014509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014204:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001420b:	31 d2                	xor    edx,edx
c001420d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014211:	c1 e8 03             	shr    eax,0x3
c0014214:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014218:	51                   	push   ecx
c0014219:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001421d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014221:	52                   	push   edx
c0014222:	50                   	push   eax
c0014223:	55                   	push   ebp
c0014224:	e8 69 6e ff ff       	call   c000b092 <File::seek(unsigned long long)>
c0014229:	5b                   	pop    ebx
c001422a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001422e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014235:	e8 74 38 ff ff       	call   c0007aae <malloc>
c001423a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001423d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014241:	31 d2                	xor    edx,edx
c0014243:	5e                   	pop    esi
c0014244:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014248:	50                   	push   eax
c0014249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014251:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014258:	52                   	push   edx
c0014259:	50                   	push   eax
c001425a:	55                   	push   ebp
c001425b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001425e:	83 c4 20             	add    esp,0x20
c0014261:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014269:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001426d:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014271:	0f 8d 76 02 00 00    	jge    c00144ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014277:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001427b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001427f:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014284:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001428b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001428f:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014293:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014297:	c1 e8 08             	shr    eax,0x8
c001429a:	89 c6                	mov    esi,eax
c001429c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00142a0:	c1 e6 04             	shl    esi,0x4
c00142a3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00142a7:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00142aa:	85 db                	test   ebx,ebx
c00142ac:	0f 85 b3 00 00 00    	jne    c0014365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00142b2:	83 ec 0c             	sub    esp,0xc
c00142b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142b9:	03 06                	add    eax,DWORD PTR [esi]
c00142bb:	50                   	push   eax
c00142bc:	e8 40 f8 ff ff       	call   c0013b01 <Thr::getAddressOfKernelSymbol(char const*)>
c00142c1:	83 c4 10             	add    esp,0x10
c00142c4:	89 c3                	mov    ebx,eax
c00142c6:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00142cb:	85 c0                	test   eax,eax
c00142cd:	0f 85 92 00 00 00    	jne    c0014365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00142d3:	83 ec 0c             	sub    esp,0xc
c00142d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142da:	03 06                	add    eax,DWORD PTR [esi]
c00142dc:	50                   	push   eax
c00142dd:	e8 7e c7 ff ff       	call   c0010a60 <KeResolveCompatibilitySymbol(char*)>
c00142e2:	83 c4 10             	add    esp,0x10
c00142e5:	89 c3                	mov    ebx,eax
c00142e7:	85 c0                	test   eax,eax
c00142e9:	75 7a                	jne    c0014365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00142eb:	51                   	push   ecx
c00142ec:	51                   	push   ecx
c00142ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142f1:	03 06                	add    eax,DWORD PTR [esi]
c00142f3:	50                   	push   eax
c00142f4:	68 03 10 02 c0       	push   0xc0021003
c00142f9:	e8 98 66 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00142fe:	58                   	pop    eax
c00142ff:	5a                   	pop    edx
c0014300:	68 1d 10 02 c0       	push   0xc002101d
c0014305:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001430c:	50                   	push   eax
c001430d:	e8 2e c3 fe ff       	call   c0000640 <strcpy>
c0014312:	59                   	pop    ecx
c0014313:	58                   	pop    eax
c0014314:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014318:	03 06                	add    eax,DWORD PTR [esi]
c001431a:	50                   	push   eax
c001431b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014322:	50                   	push   eax
c0014323:	e8 18 c5 fe ff       	call   c0000840 <strcat>
c0014328:	58                   	pop    eax
c0014329:	5a                   	pop    edx
c001432a:	68 b3 10 02 c0       	push   0xc00210b3
c001432f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014336:	50                   	push   eax
c0014337:	e8 04 c5 fe ff       	call   c0000840 <strcat>
c001433c:	83 c4 10             	add    esp,0x10
c001433f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014344:	0f 84 5d 01 00 00    	je     c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001434a:	83 ec 0c             	sub    esp,0xc
c001434d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014354:	50                   	push   eax
c0014355:	e8 19 c5 ff ff       	call   c0010873 <KePanic(char const*)>
c001435a:	83 c4 10             	add    esp,0x10
c001435d:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014361:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014365:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001436a:	83 f8 01             	cmp    eax,0x1
c001436d:	0f 85 8f 00 00 00    	jne    c0014402 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014373:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001437a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001437e:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014382:	01 ce                	add    esi,ecx
c0014384:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001438c:	0f 94 c0             	sete   al
c001438f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014397:	0f 94 c2             	sete   dl
c001439a:	09 c2                	or     edx,eax
c001439c:	8b 06                	mov    eax,DWORD PTR [esi]
c001439e:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00143a3:	0f b6 d2             	movzx  edx,dl
c00143a6:	74 41                	je     c00143e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00143a8:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00143ab:	85 d2                	test   edx,edx
c00143ad:	75 15                	jne    c00143c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00143af:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00143b3:	66 83 f8 0c          	cmp    ax,0xc
c00143b7:	76 05                	jbe    c00143be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00143b9:	b8 0c 00 00 00       	mov    eax,0xc
c00143be:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143c2:	76 37                	jbe    c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143c4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00143c8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143cd:	0f 84 d4 00 00 00    	je     c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00143d3:	83 ec 0c             	sub    esp,0xc
c00143d6:	68 34 10 02 c0       	push   0xc0021034
c00143db:	e8 93 c4 ff ff       	call   c0010873 <KePanic(char const*)>
c00143e0:	83 c4 10             	add    esp,0x10
c00143e3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00143e7:	eb 12                	jmp    c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143e9:	01 c1                	add    ecx,eax
c00143eb:	85 d2                	test   edx,edx
c00143ed:	75 0c                	jne    c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143ef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00143f3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143f7:	77 02                	ja     c00143fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143f9:	01 d9                	add    ecx,ebx
c00143fb:	89 0e                	mov    DWORD PTR [esi],ecx
c00143fd:	e9 e2 00 00 00       	jmp    c00144e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014402:	83 f8 02             	cmp    eax,0x2
c0014405:	75 77                	jne    c001447e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014407:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001440e:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014412:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014416:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001441e:	74 21                	je     c0014441 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014420:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014428:	74 17                	je     c0014441 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001442a:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001442e:	b8 0a 00 00 00       	mov    eax,0xa
c0014433:	83 fa 0e             	cmp    edx,0xe
c0014436:	77 03                	ja     c001443b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014438:	8d 42 fc             	lea    eax,[edx-0x4]
c001443b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001443f:	76 17                	jbe    c0014458 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014441:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014446:	74 5f                	je     c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014448:	83 ec 0c             	sub    esp,0xc
c001444b:	68 50 10 02 c0       	push   0xc0021050
c0014450:	e8 1e c4 ff ff       	call   c0010873 <KePanic(char const*)>
c0014455:	83 c4 10             	add    esp,0x10
c0014458:	8b 06                	mov    eax,DWORD PTR [esi]
c001445a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001445f:	74 13                	je     c0014474 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014461:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014465:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001446c:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014470:	01 d0                	add    eax,edx
c0014472:	eb 04                	jmp    c0014478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014474:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014478:	01 c3                	add    ebx,eax
c001447a:	89 1e                	mov    DWORD PTR [esi],ebx
c001447c:	eb 66                	jmp    c00144e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001447e:	52                   	push   edx
c001447f:	52                   	push   edx
c0014480:	50                   	push   eax
c0014481:	68 6c 10 02 c0       	push   0xc002106c
c0014486:	e8 0b 65 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001448b:	83 c4 10             	add    esp,0x10
c001448e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014493:	74 12                	je     c00144a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014495:	83 ec 0c             	sub    esp,0xc
c0014498:	68 77 10 02 c0       	push   0xc0021077
c001449d:	e8 d1 c3 ff ff       	call   c0010873 <KePanic(char const*)>
c00144a2:	83 c4 10             	add    esp,0x10
c00144a5:	eb 3d                	jmp    c00144e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00144a7:	83 ec 0c             	sub    esp,0xc
c00144aa:	55                   	push   ebp
c00144ab:	e8 82 6b ff ff       	call   c000b032 <File::close()>
c00144b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144b3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144b9:	59                   	pop    ecx
c00144ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144be:	e8 fb 35 ff ff       	call   c0007abe <free>
c00144c3:	5b                   	pop    ebx
c00144c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144c8:	e8 f1 35 ff ff       	call   c0007abe <free>
c00144cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144d0:	e8 e9 35 ff ff       	call   c0007abe <free>
c00144d5:	5e                   	pop    esi
c00144d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144da:	e8 df 35 ff ff       	call   c0007abe <free>
c00144df:	83 c4 10             	add    esp,0x10
c00144e2:	eb 21                	jmp    c0014505 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00144e4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00144e8:	e9 7c fd ff ff       	jmp    c0014269 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00144ed:	83 ec 0c             	sub    esp,0xc
c00144f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144f4:	e8 c5 35 ff ff       	call   c0007abe <free>
c00144f9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00144fd:	83 c4 10             	add    esp,0x10
c0014500:	e9 f1 fc ff ff       	jmp    c00141f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014505:	31 c0                	xor    eax,eax
c0014507:	eb 33                	jmp    c001453c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014509:	83 ec 0c             	sub    esp,0xc
c001450c:	55                   	push   ebp
c001450d:	e8 20 6b ff ff       	call   c000b032 <File::close()>
c0014512:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014515:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014518:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001451b:	58                   	pop    eax
c001451c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014520:	e8 99 35 ff ff       	call   c0007abe <free>
c0014525:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014528:	e8 91 35 ff ff       	call   c0007abe <free>
c001452d:	5a                   	pop    edx
c001452e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014532:	e8 87 35 ff ff       	call   c0007abe <free>
c0014537:	83 c4 10             	add    esp,0x10
c001453a:	b0 01                	mov    al,0x1
c001453c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014542:	5b                   	pop    ebx
c0014543:	5e                   	pop    esi
c0014544:	5f                   	pop    edi
c0014545:	5d                   	pop    ebp
c0014546:	c3                   	ret    

c0014547 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014547:	56                   	push   esi
c0014548:	31 d2                	xor    edx,edx
c001454a:	53                   	push   ebx
c001454b:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014551:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014555:	39 d3                	cmp    ebx,edx
c0014557:	7e 1b                	jle    c0014574 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014559:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014560:	39 c8                	cmp    eax,ecx
c0014562:	77 0d                	ja     c0014571 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014564:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001456b:	01 c6                	add    esi,eax
c001456d:	39 ce                	cmp    esi,ecx
c001456f:	77 05                	ja     c0014576 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014571:	42                   	inc    edx
c0014572:	eb e1                	jmp    c0014555 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014574:	31 c0                	xor    eax,eax
c0014576:	5b                   	pop    ebx
c0014577:	5e                   	pop    esi
c0014578:	c3                   	ret    

c0014579 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014579:	53                   	push   ebx
c001457a:	31 c0                	xor    eax,eax
c001457c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014580:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014586:	39 c3                	cmp    ebx,eax
c0014588:	7e 22                	jle    c00145ac <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001458a:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014591:	39 ca                	cmp    edx,ecx
c0014593:	77 14                	ja     c00145a9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014595:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c001459c:	39 ca                	cmp    edx,ecx
c001459e:	76 09                	jbe    c00145a9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145a0:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145a7:	eb 05                	jmp    c00145ae <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145a9:	40                   	inc    eax
c00145aa:	eb da                	jmp    c0014586 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145ac:	31 c0                	xor    eax,eax
c00145ae:	5b                   	pop    ebx
c00145af:	c3                   	ret    

c00145b0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145b0:	53                   	push   ebx
c00145b1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145b5:	53                   	push   ebx
c00145b6:	e8 8c ff ff ff       	call   c0014547 <Thr::getDriverBaseFromAddress(unsigned long)>
c00145bb:	5a                   	pop    edx
c00145bc:	31 d2                	xor    edx,edx
c00145be:	85 c0                	test   eax,eax
c00145c0:	74 04                	je     c00145c6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145c2:	89 da                	mov    edx,ebx
c00145c4:	29 c2                	sub    edx,eax
c00145c6:	89 d0                	mov    eax,edx
c00145c8:	5b                   	pop    ebx
c00145c9:	c3                   	ret    

c00145ca <Thr::loadDLL(char const*, bool)>:
c00145ca:	55                   	push   ebp
c00145cb:	57                   	push   edi
c00145cc:	56                   	push   esi
c00145cd:	53                   	push   ebx
c00145ce:	81 ec 34 01 00 00    	sub    esp,0x134
c00145d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00145db:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00145e2:	56                   	push   esi
c00145e3:	68 8f 10 02 c0       	push   0xc002108f
c00145e8:	e8 a9 63 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00145ed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145f4:	e8 b5 34 ff ff       	call   c0007aae <malloc>
c00145f9:	83 c4 0c             	add    esp,0xc
c00145fc:	89 c3                	mov    ebx,eax
c00145fe:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014604:	56                   	push   esi
c0014605:	50                   	push   eax
c0014606:	e8 0d 69 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c001460b:	83 c4 10             	add    esp,0x10
c001460e:	85 db                	test   ebx,ebx
c0014610:	75 3c                	jne    c001464e <Thr::loadDLL(char const*, bool)+0x84>
c0014612:	89 f8                	mov    eax,edi
c0014614:	84 c0                	test   al,al
c0014616:	0f 84 d2 01 00 00    	je     c00147ee <Thr::loadDLL(char const*, bool)+0x224>
c001461c:	55                   	push   ebp
c001461d:	55                   	push   ebp
c001461e:	68 a0 10 02 c0       	push   0xc00210a0
c0014623:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014627:	55                   	push   ebp
c0014628:	e8 13 c0 fe ff       	call   c0000640 <strcpy>
c001462d:	58                   	pop    eax
c001462e:	5a                   	pop    edx
c001462f:	56                   	push   esi
c0014630:	55                   	push   ebp
c0014631:	e8 0a c2 fe ff       	call   c0000840 <strcat>
c0014636:	59                   	pop    ecx
c0014637:	58                   	pop    eax
c0014638:	68 b3 10 02 c0       	push   0xc00210b3
c001463d:	55                   	push   ebp
c001463e:	e8 fd c1 fe ff       	call   c0000840 <strcat>
c0014643:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014646:	e8 28 c2 ff ff       	call   c0010873 <KePanic(char const*)>
c001464b:	83 c4 10             	add    esp,0x10
c001464e:	51                   	push   ecx
c001464f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014653:	50                   	push   eax
c0014654:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014658:	50                   	push   eax
c0014659:	53                   	push   ebx
c001465a:	e8 21 6c ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c001465f:	83 c4 10             	add    esp,0x10
c0014662:	85 db                	test   ebx,ebx
c0014664:	74 0c                	je     c0014672 <Thr::loadDLL(char const*, bool)+0xa8>
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	8b 03                	mov    eax,DWORD PTR [ebx]
c001466b:	53                   	push   ebx
c001466c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001466f:	83 c4 10             	add    esp,0x10
c0014672:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014677:	75 0a                	jne    c0014683 <Thr::loadDLL(char const*, bool)+0xb9>
c0014679:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001467d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014681:	75 3c                	jne    c00146bf <Thr::loadDLL(char const*, bool)+0xf5>
c0014683:	89 f8                	mov    eax,edi
c0014685:	84 c0                	test   al,al
c0014687:	0f 84 49 01 00 00    	je     c00147d6 <Thr::loadDLL(char const*, bool)+0x20c>
c001468d:	51                   	push   ecx
c001468e:	51                   	push   ecx
c001468f:	68 a0 10 02 c0       	push   0xc00210a0
c0014694:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014698:	53                   	push   ebx
c0014699:	e8 a2 bf fe ff       	call   c0000640 <strcpy>
c001469e:	5d                   	pop    ebp
c001469f:	58                   	pop    eax
c00146a0:	56                   	push   esi
c00146a1:	53                   	push   ebx
c00146a2:	e8 99 c1 fe ff       	call   c0000840 <strcat>
c00146a7:	58                   	pop    eax
c00146a8:	5a                   	pop    edx
c00146a9:	68 b3 10 02 c0       	push   0xc00210b3
c00146ae:	53                   	push   ebx
c00146af:	e8 8c c1 fe ff       	call   c0000840 <strcat>
c00146b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146b7:	e8 b7 c1 ff ff       	call   c0010873 <KePanic(char const*)>
c00146bc:	83 c4 10             	add    esp,0x10
c00146bf:	52                   	push   edx
c00146c0:	6a 03                	push   0x3
c00146c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146ca:	05 ff 0f 00 00       	add    eax,0xfff
c00146cf:	83 d2 00             	adc    edx,0x0
c00146d2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146d6:	50                   	push   eax
c00146d7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146dd:	e8 28 57 ff ff       	call   c0009e0a <VAS::allocatePages(int, int)>
c00146e2:	59                   	pop    ecx
c00146e3:	89 c3                	mov    ebx,eax
c00146e5:	5d                   	pop    ebp
c00146e6:	50                   	push   eax
c00146e7:	68 32 fc 01 c0       	push   0xc001fc32
c00146ec:	e8 a5 62 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00146f1:	89 34 24             	mov    DWORD PTR [esp],esi
c00146f4:	e8 77 be fe ff       	call   c0000570 <strlen>
c00146f9:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00146ff:	40                   	inc    eax
c0014700:	89 04 24             	mov    DWORD PTR [esp],eax
c0014703:	e8 a6 33 ff ff       	call   c0007aae <malloc>
c0014708:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c001470f:	58                   	pop    eax
c0014710:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014715:	5a                   	pop    edx
c0014716:	56                   	push   esi
c0014717:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001471e:	e8 1d bf fe ff       	call   c0000640 <strcpy>
c0014723:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014728:	8d 50 01             	lea    edx,[eax+0x1]
c001472b:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014732:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014738:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001473c:	83 c4 0c             	add    esp,0xc
c001473f:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014746:	6a 01                	push   0x1
c0014748:	53                   	push   ebx
c0014749:	56                   	push   esi
c001474a:	e8 bf f6 ff ff       	call   c0013e0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001474f:	83 c4 10             	add    esp,0x10
c0014752:	0f b6 c0             	movzx  eax,al
c0014755:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014759:	85 c0                	test   eax,eax
c001475b:	0f 85 89 00 00 00    	jne    c00147ea <Thr::loadDLL(char const*, bool)+0x220>
c0014761:	89 f8                	mov    eax,edi
c0014763:	84 c0                	test   al,al
c0014765:	74 73                	je     c00147da <Thr::loadDLL(char const*, bool)+0x210>
c0014767:	83 ec 0c             	sub    esp,0xc
c001476a:	68 b5 10 02 c0       	push   0xc00210b5
c001476f:	e8 ff c0 ff ff       	call   c0010873 <KePanic(char const*)>
c0014774:	83 c4 10             	add    esp,0x10
c0014777:	eb 61                	jmp    c00147da <Thr::loadDLL(char const*, bool)+0x210>
c0014779:	50                   	push   eax
c001477a:	50                   	push   eax
c001477b:	89 e8                	mov    eax,ebp
c001477d:	c1 e0 0c             	shl    eax,0xc
c0014780:	01 d8                	add    eax,ebx
c0014782:	50                   	push   eax
c0014783:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014789:	e8 8c 51 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c001478e:	83 c4 10             	add    esp,0x10
c0014791:	8b 00                	mov    eax,DWORD PTR [eax]
c0014793:	a8 60                	test   al,0x60
c0014795:	75 11                	jne    c00147a8 <Thr::loadDLL(char const*, bool)+0x1de>
c0014797:	83 ec 0c             	sub    esp,0xc
c001479a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001479f:	50                   	push   eax
c00147a0:	e8 a5 35 ff ff       	call   c0007d4a <Phys::freePage(unsigned long)>
c00147a5:	83 c4 10             	add    esp,0x10
c00147a8:	45                   	inc    ebp
c00147a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147b1:	05 ff 0f 00 00       	add    eax,0xfff
c00147b6:	bf 00 00 00 00       	mov    edi,0x0
c00147bb:	83 d2 00             	adc    edx,0x0
c00147be:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147c2:	c1 ea 0c             	shr    edx,0xc
c00147c5:	39 c5                	cmp    ebp,eax
c00147c7:	89 d1                	mov    ecx,edx
c00147c9:	89 f8                	mov    eax,edi
c00147cb:	19 c8                	sbb    eax,ecx
c00147cd:	72 aa                	jb     c0014779 <Thr::loadDLL(char const*, bool)+0x1af>
c00147cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147d4:	75 18                	jne    c00147ee <Thr::loadDLL(char const*, bool)+0x224>
c00147d6:	31 db                	xor    ebx,ebx
c00147d8:	eb 14                	jmp    c00147ee <Thr::loadDLL(char const*, bool)+0x224>
c00147da:	83 ec 0c             	sub    esp,0xc
c00147dd:	68 d4 10 02 c0       	push   0xc00210d4
c00147e2:	e8 8c c0 ff ff       	call   c0010873 <KePanic(char const*)>
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	31 ed                	xor    ebp,ebp
c00147ec:	eb bb                	jmp    c00147a9 <Thr::loadDLL(char const*, bool)+0x1df>
c00147ee:	81 c4 2c 01 00 00    	add    esp,0x12c
c00147f4:	89 d8                	mov    eax,ebx
c00147f6:	5b                   	pop    ebx
c00147f7:	5e                   	pop    esi
c00147f8:	5f                   	pop    edi
c00147f9:	5d                   	pop    ebp
c00147fa:	c3                   	ret    

c00147fb <Thr::executeDLL(unsigned long, void*)>:
c00147fb:	56                   	push   esi
c00147fc:	53                   	push   ebx
c00147fd:	52                   	push   edx
c00147fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014802:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014806:	85 db                	test   ebx,ebx
c0014808:	75 10                	jne    c001481a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001480a:	83 ec 0c             	sub    esp,0xc
c001480d:	68 f0 10 02 c0       	push   0xc00210f0
c0014812:	e8 5c c0 ff ff       	call   c0010873 <KePanic(char const*)>
c0014817:	83 c4 10             	add    esp,0x10
c001481a:	50                   	push   eax
c001481b:	50                   	push   eax
c001481c:	53                   	push   ebx
c001481d:	68 1a 11 02 c0       	push   0xc002111a
c0014822:	e8 6f 61 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0014827:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001482b:	89 d8                	mov    eax,ebx
c001482d:	83 c4 14             	add    esp,0x14
c0014830:	5b                   	pop    ebx
c0014831:	5e                   	pop    esi
c0014832:	ff e0                	jmp    eax

c0014834 <userModeEntryPoint(void*)>:
c0014834:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014839:	83 e8 01             	sub    eax,0x1
c001483c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014841:	75 01                	jne    c0014844 <userModeEntryPoint(void*)+0x10>
c0014843:	fb                   	sti    
c0014844:	fb                   	sti    
c0014845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001484a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001484d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014853:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014857:	e9 e3 b9 fe ff       	jmp    c000023f <goToUsermode>

c001485c <changeTSS>:
c001485c:	83 ec 14             	sub    esp,0x14
c001485f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014864:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014867:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001486c:	c1 e2 15             	shl    edx,0x15
c001486f:	29 d0                	sub    eax,edx
c0014871:	50                   	push   eax
c0014872:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014877:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001487d:	05 7c 11 00 00       	add    eax,0x117c
c0014882:	50                   	push   eax
c0014883:	e8 dc 46 ff ff       	call   c0008f64 <TSS::setESP(unsigned long)>
c0014888:	83 c4 1c             	add    esp,0x1c
c001488b:	c3                   	ret    

c001488c <switchToThread(ThreadControlBlock*)>:
c001488c:	57                   	push   edi
c001488d:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0014893:	56                   	push   esi
c0014894:	85 c9                	test   ecx,ecx
c0014896:	53                   	push   ebx
c0014897:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001489b:	0f 85 8b 00 00 00    	jne    c001492c <switchToThread(ThreadControlBlock*)+0xa0>
c00148a1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00148a5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00148ab:	74 7b                	je     c0014928 <switchToThread(ThreadControlBlock*)+0x9c>
c00148ad:	b8 00 04 00 00       	mov    eax,0x400
c00148b2:	29 d0                	sub    eax,edx
c00148b4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148b7:	d1 f8                	sar    eax,1
c00148b9:	01 d0                	add    eax,edx
c00148bb:	90                   	nop
c00148bc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148bf:	e8 9b 27 00 00       	call   c001705f <HalQueryPerformanceCounter()>
c00148c4:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148c9:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c00148cf:	89 c6                	mov    esi,eax
c00148d1:	89 d7                	mov    edi,edx
c00148d3:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148d9:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148de:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c00148e4:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00148ea:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c00148f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00148f6:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00148fc:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00148ff:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014902:	01 c6                	add    esi,eax
c0014904:	11 d7                	adc    edi,edx
c0014906:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014909:	83 ec 0c             	sub    esp,0xc
c001490c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001490f:	53                   	push   ebx
c0014910:	e8 62 b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014915:	0f 20 c0             	mov    eax,cr0
c0014918:	83 c8 08             	or     eax,0x8
c001491b:	0f 22 c0             	mov    cr0,eax
c001491e:	83 c4 10             	add    esp,0x10
c0014921:	5b                   	pop    ebx
c0014922:	5e                   	pop    esi
c0014923:	5f                   	pop    edi
c0014924:	c3                   	ret    
c0014925:	8d 76 00             	lea    esi,[esi+0x0]
c0014928:	31 c0                	xor    eax,eax
c001492a:	eb 90                	jmp    c00148bc <switchToThread(ThreadControlBlock*)+0x30>
c001492c:	5b                   	pop    ebx
c001492d:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014937:	5e                   	pop    esi
c0014938:	5f                   	pop    edi
c0014939:	c3                   	ret    
c001493a:	66 90                	xchg   ax,ax

c001493c <Process::addArgs(char**)>:
c001493c:	57                   	push   edi
c001493d:	56                   	push   esi
c001493e:	53                   	push   ebx
c001493f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014943:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014947:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014951:	85 ff                	test   edi,edi
c0014953:	74 4f                	je     c00149a4 <Process::addArgs(char**)+0x68>
c0014955:	8b 07                	mov    eax,DWORD PTR [edi]
c0014957:	85 c0                	test   eax,eax
c0014959:	74 49                	je     c00149a4 <Process::addArgs(char**)+0x68>
c001495b:	31 db                	xor    ebx,ebx
c001495d:	8d 76 00             	lea    esi,[esi+0x0]
c0014960:	83 ec 0c             	sub    esp,0xc
c0014963:	50                   	push   eax
c0014964:	e8 07 bc fe ff       	call   c0000570 <strlen>
c0014969:	83 c0 01             	add    eax,0x1
c001496c:	89 04 24             	mov    DWORD PTR [esp],eax
c001496f:	e8 3a 31 ff ff       	call   c0007aae <malloc>
c0014974:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001497b:	5a                   	pop    edx
c001497c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001497f:	59                   	pop    ecx
c0014980:	83 c3 01             	add    ebx,0x1
c0014983:	52                   	push   edx
c0014984:	50                   	push   eax
c0014985:	e8 b6 bc fe ff       	call   c0000640 <strcpy>
c001498a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014990:	83 c4 10             	add    esp,0x10
c0014993:	83 c1 01             	add    ecx,0x1
c0014996:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c001499c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001499f:	85 c0                	test   eax,eax
c00149a1:	75 bd                	jne    c0014960 <Process::addArgs(char**)+0x24>
c00149a3:	90                   	nop
c00149a4:	5b                   	pop    ebx
c00149a5:	5e                   	pop    esi
c00149a6:	5f                   	pop    edi
c00149a7:	c3                   	ret    

c00149a8 <Process::Process(char const*, Process*, char**)>:
c00149a8:	56                   	push   esi
c00149a9:	53                   	push   ebx
c00149aa:	83 ec 14             	sub    esp,0x14
c00149ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149b1:	05 0c 02 00 00       	add    eax,0x20c
c00149b6:	bb 07 00 00 00       	mov    ebx,0x7
c00149bb:	89 c6                	mov    esi,eax
c00149bd:	8d 76 00             	lea    esi,[esi+0x0]
c00149c0:	85 db                	test   ebx,ebx
c00149c2:	78 14                	js     c00149d8 <Process::Process(char const*, Process*, char**)+0x30>
c00149c4:	83 ec 0c             	sub    esp,0xc
c00149c7:	56                   	push   esi
c00149c8:	e8 fb a4 00 00       	call   c001eec8 <ThreadControlBlock::ThreadControlBlock()>
c00149cd:	83 c4 10             	add    esp,0x10
c00149d0:	83 c6 5f             	add    esi,0x5f
c00149d3:	83 eb 01             	sub    ebx,0x1
c00149d6:	eb e8                	jmp    c00149c0 <Process::Process(char const*, Process*, char**)+0x18>
c00149d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149dc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00149e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149e7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00149ee:	83 ec 0c             	sub    esp,0xc
c00149f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149f5:	e8 6e bc ff ff       	call   c0010668 <Krnl::newProcessEnv(Process*)>
c00149fa:	83 c4 10             	add    esp,0x10
c00149fd:	89 c2                	mov    edx,eax
c00149ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a03:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a0d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a16:	a1 e0 22 02 c0       	mov    eax,ds:0xc00222e0
c0014a1b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a1e:	89 15 e0 22 02 c0    	mov    DWORD PTR ds:0xc00222e0,edx
c0014a24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a28:	89 02                	mov    DWORD PTR [edx],eax
c0014a2a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a32:	83 ec 0c             	sub    esp,0xc
c0014a35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a39:	e8 70 30 ff ff       	call   c0007aae <malloc>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	89 c3                	mov    ebx,eax
c0014a43:	83 ec 08             	sub    esp,0x8
c0014a46:	6a 00                	push   0x0
c0014a48:	53                   	push   ebx
c0014a49:	e8 96 57 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014a4e:	83 c4 10             	add    esp,0x10
c0014a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a55:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a5f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a71:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a77:	e8 12 c2 ff ff       	call   c0010c8e <KeInitSignals()>
c0014a7c:	89 c2                	mov    edx,eax
c0014a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a82:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a8c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a92:	85 c0                	test   eax,eax
c0014a94:	74 42                	je     c0014ad8 <Process::Process(char const*, Process*, char**)+0x130>
c0014a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a9a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aa0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aaa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac4:	05 0c 01 00 00       	add    eax,0x10c
c0014ac9:	83 ec 08             	sub    esp,0x8
c0014acc:	52                   	push   edx
c0014acd:	50                   	push   eax
c0014ace:	e8 6d bb fe ff       	call   c0000640 <strcpy>
c0014ad3:	83 c4 10             	add    esp,0x10
c0014ad6:	eb 64                	jmp    c0014b3c <Process::Process(char const*, Process*, char**)+0x194>
c0014ad8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014ae0:	83 ec 0c             	sub    esp,0xc
c0014ae3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ae7:	e8 c2 2f ff ff       	call   c0007aae <malloc>
c0014aec:	83 c4 10             	add    esp,0x10
c0014aef:	89 c3                	mov    ebx,eax
c0014af1:	83 ec 08             	sub    esp,0x8
c0014af4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014af8:	53                   	push   ebx
c0014af9:	e8 52 41 ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014afe:	83 c4 10             	add    esp,0x10
c0014b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b05:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b15:	83 ec 0c             	sub    esp,0xc
c0014b18:	50                   	push   eax
c0014b19:	e8 d0 39 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014b1e:	83 c4 10             	add    esp,0x10
c0014b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b25:	05 0c 01 00 00       	add    eax,0x10c
c0014b2a:	83 ec 08             	sub    esp,0x8
c0014b2d:	68 39 11 02 c0       	push   0xc0021139
c0014b32:	50                   	push   eax
c0014b33:	e8 08 bb fe ff       	call   c0000640 <strcpy>
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	90                   	nop
c0014b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b40:	83 c0 0c             	add    eax,0xc
c0014b43:	83 ec 08             	sub    esp,0x8
c0014b46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b4a:	50                   	push   eax
c0014b4b:	e8 f0 ba fe ff       	call   c0000640 <strcpy>
c0014b50:	83 c4 10             	add    esp,0x10
c0014b53:	83 ec 08             	sub    esp,0x8
c0014b56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b5e:	e8 d9 fd ff ff       	call   c001493c <Process::addArgs(char**)>
c0014b63:	83 c4 10             	add    esp,0x10
c0014b66:	83 ec 08             	sub    esp,0x8
c0014b69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b71:	e8 66 ed ff ff       	call   c00138dc <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b7d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014b81:	83 f0 01             	xor    eax,0x1
c0014b84:	88 c2                	mov    dl,al
c0014b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b8a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014b90:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014b95:	83 ec 04             	sub    esp,0x4
c0014b98:	50                   	push   eax
c0014b99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b9d:	68 90 11 02 c0       	push   0xc0021190
c0014ba2:	e8 ef 5d ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0014ba7:	83 c4 10             	add    esp,0x10
c0014baa:	90                   	nop
c0014bab:	83 c4 14             	add    esp,0x14
c0014bae:	5b                   	pop    ebx
c0014baf:	5e                   	pop    esi
c0014bb0:	c3                   	ret    
c0014bb1:	90                   	nop
c0014bb2:	66 90                	xchg   ax,ax

c0014bb4 <Process::Process(bool, char const*, Process*, char**)>:
c0014bb4:	56                   	push   esi
c0014bb5:	53                   	push   ebx
c0014bb6:	83 ec 24             	sub    esp,0x24
c0014bb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bbd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014bc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bc5:	05 0c 02 00 00       	add    eax,0x20c
c0014bca:	bb 07 00 00 00       	mov    ebx,0x7
c0014bcf:	89 c6                	mov    esi,eax
c0014bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0014bd4:	85 db                	test   ebx,ebx
c0014bd6:	78 14                	js     c0014bec <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014bd8:	83 ec 0c             	sub    esp,0xc
c0014bdb:	56                   	push   esi
c0014bdc:	e8 e7 a2 00 00       	call   c001eec8 <ThreadControlBlock::ThreadControlBlock()>
c0014be1:	83 c4 10             	add    esp,0x10
c0014be4:	83 c6 5f             	add    esi,0x5f
c0014be7:	83 eb 01             	sub    ebx,0x1
c0014bea:	eb e8                	jmp    c0014bd4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014bec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bf0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014bf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bfb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c02:	83 ec 0c             	sub    esp,0xc
c0014c05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c09:	e8 5a ba ff ff       	call   c0010668 <Krnl::newProcessEnv(Process*)>
c0014c0e:	83 c4 10             	add    esp,0x10
c0014c11:	89 c2                	mov    edx,eax
c0014c13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c17:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c21:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c2a:	a1 e0 22 02 c0       	mov    eax,ds:0xc00222e0
c0014c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c32:	89 15 e0 22 02 c0    	mov    DWORD PTR ds:0xc00222e0,edx
c0014c38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c3c:	89 02                	mov    DWORD PTR [edx],eax
c0014c3e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c46:	83 ec 0c             	sub    esp,0xc
c0014c49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c4d:	e8 5c 2e ff ff       	call   c0007aae <malloc>
c0014c52:	83 c4 10             	add    esp,0x10
c0014c55:	89 c3                	mov    ebx,eax
c0014c57:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c5c:	83 ec 08             	sub    esp,0x8
c0014c5f:	50                   	push   eax
c0014c60:	53                   	push   ebx
c0014c61:	e8 7e 55 ff ff       	call   c000a1e4 <VAS::VAS(bool)>
c0014c66:	83 c4 10             	add    esp,0x10
c0014c69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c77:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c85:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c89:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014c8f:	e8 fa bf ff ff       	call   c0010c8e <KeInitSignals()>
c0014c94:	89 c2                	mov    edx,eax
c0014c96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c9a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014caa:	85 c0                	test   eax,eax
c0014cac:	74 42                	je     c0014cf0 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014cae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cb8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014cbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014cc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ccc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cd2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdc:	05 0c 01 00 00       	add    eax,0x10c
c0014ce1:	83 ec 08             	sub    esp,0x8
c0014ce4:	52                   	push   edx
c0014ce5:	50                   	push   eax
c0014ce6:	e8 55 b9 fe ff       	call   c0000640 <strcpy>
c0014ceb:	83 c4 10             	add    esp,0x10
c0014cee:	eb 64                	jmp    c0014d54 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014cf0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014cf8:	83 ec 0c             	sub    esp,0xc
c0014cfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014cff:	e8 aa 2d ff ff       	call   c0007aae <malloc>
c0014d04:	83 c4 10             	add    esp,0x10
c0014d07:	89 c3                	mov    ebx,eax
c0014d09:	83 ec 08             	sub    esp,0x8
c0014d0c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d10:	53                   	push   ebx
c0014d11:	e8 3a 3f ff ff       	call   c0008c50 <VgaText::VgaText(char const*)>
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d1d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d27:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d2d:	83 ec 0c             	sub    esp,0xc
c0014d30:	50                   	push   eax
c0014d31:	e8 b8 37 ff ff       	call   c00084ee <addToTerminalCycle(VgaText*)>
c0014d36:	83 c4 10             	add    esp,0x10
c0014d39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d3d:	05 0c 01 00 00       	add    eax,0x10c
c0014d42:	83 ec 08             	sub    esp,0x8
c0014d45:	68 39 11 02 c0       	push   0xc0021139
c0014d4a:	50                   	push   eax
c0014d4b:	e8 f0 b8 fe ff       	call   c0000640 <strcpy>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	90                   	nop
c0014d54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d58:	83 c0 0c             	add    eax,0xc
c0014d5b:	83 ec 08             	sub    esp,0x8
c0014d5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d62:	50                   	push   eax
c0014d63:	e8 d8 b8 fe ff       	call   c0000640 <strcpy>
c0014d68:	83 c4 10             	add    esp,0x10
c0014d6b:	83 ec 08             	sub    esp,0x8
c0014d6e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d76:	e8 c1 fb ff ff       	call   c001493c <Process::addArgs(char**)>
c0014d7b:	83 c4 10             	add    esp,0x10
c0014d7e:	90                   	nop
c0014d7f:	83 c4 24             	add    esp,0x24
c0014d82:	5b                   	pop    ebx
c0014d83:	5e                   	pop    esi
c0014d84:	c3                   	ret    
c0014d85:	8d 76 00             	lea    esi,[esi+0x0]

c0014d88 <taskStartupFunction>:
c0014d88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d8d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014d90:	c3                   	ret    
c0014d91:	90                   	nop
c0014d92:	66 90                	xchg   ax,ax

c0014d94 <Semaphore::Semaphore(int)>:
c0014d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d9c:	89 10                	mov    DWORD PTR [eax],edx
c0014d9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014da2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014da9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014db4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014db8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014dbf:	90                   	nop
c0014dc0:	c3                   	ret    
c0014dc1:	90                   	nop
c0014dc2:	66 90                	xchg   ax,ax

c0014dc4 <Mutex::Mutex()>:
c0014dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc8:	6a 01                	push   0x1
c0014dca:	50                   	push   eax
c0014dcb:	e8 c4 ff ff ff       	call   c0014d94 <Semaphore::Semaphore(int)>
c0014dd0:	83 c4 08             	add    esp,0x8
c0014dd3:	90                   	nop
c0014dd4:	c3                   	ret    
c0014dd5:	90                   	nop
c0014dd6:	66 90                	xchg   ax,ax

c0014dd8 <Process::createThread(void (*)(void*), void*, int)>:
c0014dd8:	57                   	push   edi
c0014dd9:	31 c9                	xor    ecx,ecx
c0014ddb:	56                   	push   esi
c0014ddc:	53                   	push   ebx
c0014ddd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014de1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014de8:	89 f2                	mov    edx,esi
c0014dea:	66 90                	xchg   ax,ax
c0014dec:	0f b7 c2             	movzx  eax,dx
c0014def:	80 e2 01             	and    dl,0x1
c0014df2:	74 14                	je     c0014e08 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014df4:	d1 f8                	sar    eax,1
c0014df6:	83 c1 01             	add    ecx,0x1
c0014df9:	89 c2                	mov    edx,eax
c0014dfb:	83 f9 10             	cmp    ecx,0x10
c0014dfe:	75 ec                	jne    c0014dec <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e00:	31 db                	xor    ebx,ebx
c0014e02:	89 d8                	mov    eax,ebx
c0014e04:	5b                   	pop    ebx
c0014e05:	5e                   	pop    esi
c0014e06:	5f                   	pop    edi
c0014e07:	c3                   	ret    
c0014e08:	b8 01 00 00 00       	mov    eax,0x1
c0014e0d:	d3 e0                	shl    eax,cl
c0014e0f:	09 c6                	or     esi,eax
c0014e11:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014e14:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e1b:	01 c0                	add    eax,eax
c0014e1d:	01 c8                	add    eax,ecx
c0014e1f:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e22:	01 d8                	add    eax,ebx
c0014e24:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e2b:	75 0b                	jne    c0014e38 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e2d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e37:	90                   	nop
c0014e38:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e3e:	83 ec 0c             	sub    esp,0xc
c0014e41:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e44:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014e47:	01 c0                	add    eax,eax
c0014e49:	01 c8                	add    eax,ecx
c0014e4b:	8d 3c 80             	lea    edi,[eax+eax*4]
c0014e4e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014e51:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e57:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014e5d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e61:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e67:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e6d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e73:	89 ca                	mov    edx,ecx
c0014e75:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014e7c:	f7 da                	neg    edx
c0014e7e:	c1 e2 15             	shl    edx,0x15
c0014e81:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e87:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e91:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014e9b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014ea1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ea5:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014eab:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014eb5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014ebf:	68 00 01 00 00       	push   0x100
c0014ec4:	e8 e5 2b ff ff       	call   c0007aae <malloc>
c0014ec9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014ecc:	58                   	pop    eax
c0014ecd:	5a                   	pop    edx
c0014ece:	53                   	push   ebx
c0014ecf:	68 84 81 02 c0       	push   0xc0028184
c0014ed4:	e8 87 9d 00 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ed9:	83 c4 10             	add    esp,0x10
c0014edc:	89 d8                	mov    eax,ebx
c0014ede:	5b                   	pop    ebx
c0014edf:	5e                   	pop    esi
c0014ee0:	5f                   	pop    edi
c0014ee1:	c3                   	ret    
c0014ee2:	66 90                	xchg   ax,ax

c0014ee4 <Process::createUserThread()>:
c0014ee4:	83 ec 0c             	sub    esp,0xc
c0014ee7:	68 80 00 00 00       	push   0x80
c0014eec:	6a 00                	push   0x0
c0014eee:	68 34 48 01 c0       	push   0xc0014834
c0014ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ef7:	50                   	push   eax
c0014ef8:	e8 db fe ff ff       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c0014efd:	83 c4 1c             	add    esp,0x1c
c0014f00:	c3                   	ret    
c0014f01:	8d 76 00             	lea    esi,[esi+0x0]

c0014f04 <setupMultitasking(void (*)())>:
c0014f04:	56                   	push   esi
c0014f05:	53                   	push   ebx
c0014f06:	83 ec 04             	sub    esp,0x4
c0014f09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f0d:	eb 11                	jmp    c0014f20 <setupMultitasking(void (*)())+0x1c>
c0014f0f:	90                   	nop
c0014f10:	83 ec 0c             	sub    esp,0xc
c0014f13:	68 84 81 02 c0       	push   0xc0028184
c0014f18:	e8 87 9c 00 00       	call   c001eba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f1d:	83 c4 10             	add    esp,0x10
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	68 84 81 02 c0       	push   0xc0028184
c0014f28:	e8 53 9c 00 00       	call   c001eb80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f2d:	83 c4 10             	add    esp,0x10
c0014f30:	84 c0                	test   al,al
c0014f32:	74 dc                	je     c0014f10 <setupMultitasking(void (*)())+0xc>
c0014f34:	83 ec 0c             	sub    esp,0xc
c0014f37:	68 24 07 00 00       	push   0x724
c0014f3c:	e8 6d 2b ff ff       	call   c0007aae <malloc>
c0014f41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f48:	89 c3                	mov    ebx,eax
c0014f4a:	6a 00                	push   0x0
c0014f4c:	68 3d 11 02 c0       	push   0xc002113d
c0014f51:	6a 01                	push   0x1
c0014f53:	50                   	push   eax
c0014f54:	e8 5b fc ff ff       	call   c0014bb4 <Process::Process(bool, char const*, Process*, char**)>
c0014f59:	83 c4 14             	add    esp,0x14
c0014f5c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f62:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f68:	50                   	push   eax
c0014f69:	e8 d5 37 ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c0014f6e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f75:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f7f:	83 c8 01             	or     eax,0x1
c0014f82:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f89:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f8f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f92:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014f9c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fa2:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fa8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014fb2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014fbc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014fc6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fcc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014fd6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014fdc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014fe6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014fed:	e8 bc 2a ff ff       	call   c0007aae <malloc>
c0014ff2:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014ff8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014ffe:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015004:	5a                   	pop    edx
c0015005:	59                   	pop    ecx
c0015006:	68 39 11 02 c0       	push   0xc0021139
c001500b:	50                   	push   eax
c001500c:	e8 2f b6 fe ff       	call   c0000640 <strcpy>
c0015011:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015018:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001501c:	83 c4 14             	add    esp,0x14
c001501f:	5b                   	pop    ebx
c0015020:	5e                   	pop    esi
c0015021:	e9 43 b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015026:	66 90                	xchg   ax,ax

c0015028 <schedule()>:
c0015028:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c001502e:	85 d2                	test   edx,edx
c0015030:	74 0e                	je     c0015040 <schedule()+0x18>
c0015032:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c001503c:	c3                   	ret    
c001503d:	8d 76 00             	lea    esi,[esi+0x0]
c0015040:	53                   	push   ebx
c0015041:	83 ec 14             	sub    esp,0x14
c0015044:	68 84 81 02 c0       	push   0xc0028184
c0015049:	e8 32 9b 00 00       	call   c001eb80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001504e:	83 c4 10             	add    esp,0x10
c0015051:	84 c0                	test   al,al
c0015053:	75 3f                	jne    c0015094 <schedule()+0x6c>
c0015055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001505a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001505d:	83 fa 01             	cmp    edx,0x1
c0015060:	74 3a                	je     c001509c <schedule()+0x74>
c0015062:	66 90                	xchg   ax,ax
c0015064:	83 ec 0c             	sub    esp,0xc
c0015067:	68 84 81 02 c0       	push   0xc0028184
c001506c:	e8 2b 9b 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015071:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015078:	89 c3                	mov    ebx,eax
c001507a:	e8 25 9b 00 00       	call   c001eba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001507f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015086:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015089:	e8 fe f7 ff ff       	call   c001488c <switchToThread(ThreadControlBlock*)>
c001508e:	83 c4 10             	add    esp,0x10
c0015091:	8d 76 00             	lea    esi,[esi+0x0]
c0015094:	83 c4 08             	add    esp,0x8
c0015097:	5b                   	pop    ebx
c0015098:	c3                   	ret    
c0015099:	8d 76 00             	lea    esi,[esi+0x0]
c001509c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150a3:	83 ec 08             	sub    esp,0x8
c00150a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150ab:	50                   	push   eax
c00150ac:	68 84 81 02 c0       	push   0xc0028184
c00150b1:	e8 aa 9b 00 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	eb a9                	jmp    c0015064 <schedule()+0x3c>
c00150bb:	90                   	nop

c00150bc <Semaphore::tryAcquire()>:
c00150bc:	53                   	push   ebx
c00150bd:	83 ec 08             	sub    esp,0x8
c00150c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150c4:	fa                   	cli    
c00150c5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00150ca:	8d 50 01             	lea    edx,[eax+0x1]
c00150cd:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150d3:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c00150d9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00150dc:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00150e2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00150e5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00150e7:	7c 33                	jl     c001511c <Semaphore::tryAcquire()+0x60>
c00150e9:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c00150ef:	85 d2                	test   edx,edx
c00150f1:	75 0d                	jne    c0015100 <Semaphore::tryAcquire()+0x44>
c00150f3:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00150f9:	85 d2                	test   edx,edx
c00150fb:	75 6f                	jne    c001516c <Semaphore::tryAcquire()+0xb0>
c00150fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015100:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015105:	85 c0                	test   eax,eax
c0015107:	74 0b                	je     c0015114 <Semaphore::tryAcquire()+0x58>
c0015109:	8d 76 00             	lea    esi,[esi+0x0]
c001510c:	31 c0                	xor    eax,eax
c001510e:	83 c4 08             	add    esp,0x8
c0015111:	5b                   	pop    ebx
c0015112:	c3                   	ret    
c0015113:	90                   	nop
c0015114:	fb                   	sti    
c0015115:	83 c4 08             	add    esp,0x8
c0015118:	5b                   	pop    ebx
c0015119:	c3                   	ret    
c001511a:	66 90                	xchg   ax,ax
c001511c:	83 c3 01             	add    ebx,0x1
c001511f:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c0015125:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015128:	85 d2                	test   edx,edx
c001512a:	75 24                	jne    c0015150 <Semaphore::tryAcquire()+0x94>
c001512c:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015132:	85 c9                	test   ecx,ecx
c0015134:	74 1a                	je     c0015150 <Semaphore::tryAcquire()+0x94>
c0015136:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015140:	e8 e3 fe ff ff       	call   c0015028 <schedule()>
c0015145:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001514a:	83 e8 01             	sub    eax,0x1
c001514d:	8d 76 00             	lea    esi,[esi+0x0]
c0015150:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015155:	85 c0                	test   eax,eax
c0015157:	75 0b                	jne    c0015164 <Semaphore::tryAcquire()+0xa8>
c0015159:	fb                   	sti    
c001515a:	b0 01                	mov    al,0x1
c001515c:	83 c4 08             	add    esp,0x8
c001515f:	5b                   	pop    ebx
c0015160:	c3                   	ret    
c0015161:	8d 76 00             	lea    esi,[esi+0x0]
c0015164:	b0 01                	mov    al,0x1
c0015166:	83 c4 08             	add    esp,0x8
c0015169:	5b                   	pop    ebx
c001516a:	c3                   	ret    
c001516b:	90                   	nop
c001516c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015176:	e8 ad fe ff ff       	call   c0015028 <schedule()>
c001517b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015180:	83 e8 01             	sub    eax,0x1
c0015183:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015188:	85 c0                	test   eax,eax
c001518a:	75 80                	jne    c001510c <Semaphore::tryAcquire()+0x50>
c001518c:	eb 86                	jmp    c0015114 <Semaphore::tryAcquire()+0x58>
c001518e:	66 90                	xchg   ax,ax

c0015190 <Semaphore::assertLocked(char const*)>:
c0015190:	83 ec 0c             	sub    esp,0xc
c0015193:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015197:	fa                   	cli    
c0015198:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001519e:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151a3:	83 c1 01             	add    ecx,0x1
c00151a6:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00151ac:	8d 48 01             	lea    ecx,[eax+0x1]
c00151af:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151b5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151b7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151ba:	7c 28                	jl     c00151e4 <Semaphore::assertLocked(char const*)+0x54>
c00151bc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151c1:	85 c0                	test   eax,eax
c00151c3:	75 0b                	jne    c00151d0 <Semaphore::assertLocked(char const*)+0x40>
c00151c5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151ca:	85 c0                	test   eax,eax
c00151cc:	75 32                	jne    c0015200 <Semaphore::assertLocked(char const*)+0x70>
c00151ce:	66 90                	xchg   ax,ax
c00151d0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151d5:	83 e8 01             	sub    eax,0x1
c00151d8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151dd:	75 01                	jne    c00151e0 <Semaphore::assertLocked(char const*)+0x50>
c00151df:	fb                   	sti    
c00151e0:	83 c4 0c             	add    esp,0xc
c00151e3:	c3                   	ret    
c00151e4:	83 ec 0c             	sub    esp,0xc
c00151e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151eb:	52                   	push   edx
c00151ec:	e8 82 b6 ff ff       	call   c0010873 <KePanic(char const*)>
c00151f1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151f6:	83 c4 10             	add    esp,0x10
c00151f9:	83 e8 01             	sub    eax,0x1
c00151fc:	eb be                	jmp    c00151bc <Semaphore::assertLocked(char const*)+0x2c>
c00151fe:	66 90                	xchg   ax,ax
c0015200:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001520a:	e8 19 fe ff ff       	call   c0015028 <schedule()>
c001520f:	eb bf                	jmp    c00151d0 <Semaphore::assertLocked(char const*)+0x40>
c0015211:	8d 76 00             	lea    esi,[esi+0x0]

c0015214 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015214:	83 ec 0c             	sub    esp,0xc
c0015217:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001521c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015220:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015223:	e8 00 fe ff ff       	call   c0015028 <schedule()>
c0015228:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001522d:	83 e8 01             	sub    eax,0x1
c0015230:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015235:	75 01                	jne    c0015238 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015237:	fb                   	sti    
c0015238:	83 c4 0c             	add    esp,0xc
c001523b:	c3                   	ret    

c001523c <blockTask(TaskState)>:
c001523c:	83 ec 0c             	sub    esp,0xc
c001523f:	fa                   	cli    
c0015240:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015245:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015249:	83 c0 01             	add    eax,0x1
c001524c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015251:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015256:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015259:	e8 ca fd ff ff       	call   c0015028 <schedule()>
c001525e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015263:	83 e8 01             	sub    eax,0x1
c0015266:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001526b:	75 03                	jne    c0015270 <blockTask(TaskState)+0x34>
c001526d:	fb                   	sti    
c001526e:	66 90                	xchg   ax,ax
c0015270:	83 c4 0c             	add    esp,0xc
c0015273:	c3                   	ret    

c0015274 <waitTask(int, int*, int)>:
c0015274:	83 ec 18             	sub    esp,0x18
c0015277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001527c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015280:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015283:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001528c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001528f:	6a 07                	push   0x7
c0015291:	e8 a6 ff ff ff       	call   c001523c <blockTask(TaskState)>
c0015296:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00152a1:	85 d2                	test   edx,edx
c00152a3:	74 0b                	je     c00152b0 <waitTask(int, int*, int)+0x3c>
c00152a5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00152a8:	89 02                	mov    DWORD PTR [edx],eax
c00152aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152af:	90                   	nop
c00152b0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00152b3:	83 c4 0c             	add    esp,0xc
c00152b6:	c3                   	ret    
c00152b7:	90                   	nop

c00152b8 <milliTenthSleepUntil(unsigned int)>:
c00152b8:	83 ec 0c             	sub    esp,0xc
c00152bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152bf:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152c5:	76 05                	jbe    c00152cc <milliTenthSleepUntil(unsigned int)+0x14>
c00152c7:	90                   	nop
c00152c8:	83 c4 0c             	add    esp,0xc
c00152cb:	c3                   	ret    
c00152cc:	fa                   	cli    
c00152cd:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152d3:	83 ec 08             	sub    esp,0x8
c00152d6:	83 c2 01             	add    edx,0x1
c00152d9:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00152df:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00152e5:	83 c1 01             	add    ecx,0x1
c00152e8:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152ee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152f4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152fc:	50                   	push   eax
c00152fd:	68 78 81 02 c0       	push   0xc0028178
c0015302:	e8 59 99 00 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015307:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001530e:	e8 29 ff ff ff       	call   c001523c <blockTask(TaskState)>
c0015313:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015318:	83 c4 10             	add    esp,0x10
c001531b:	83 e8 01             	sub    eax,0x1
c001531e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015323:	85 c0                	test   eax,eax
c0015325:	75 09                	jne    c0015330 <milliTenthSleepUntil(unsigned int)+0x78>
c0015327:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001532c:	85 c0                	test   eax,eax
c001532e:	75 14                	jne    c0015344 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015330:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015335:	83 e8 01             	sub    eax,0x1
c0015338:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001533d:	75 89                	jne    c00152c8 <milliTenthSleepUntil(unsigned int)+0x10>
c001533f:	fb                   	sti    
c0015340:	83 c4 0c             	add    esp,0xc
c0015343:	c3                   	ret    
c0015344:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001534e:	e8 d5 fc ff ff       	call   c0015028 <schedule()>
c0015353:	eb db                	jmp    c0015330 <milliTenthSleepUntil(unsigned int)+0x78>
c0015355:	8d 76 00             	lea    esi,[esi+0x0]

c0015358 <milliTenthSleep(unsigned int)>:
c0015358:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001535c:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015361:	01 c2                	add    edx,eax
c0015363:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015367:	e9 4c ff ff ff       	jmp    c00152b8 <milliTenthSleepUntil(unsigned int)>

c001536c <sleep(unsigned int)>:
c001536c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015370:	8d 04 80             	lea    eax,[eax+eax*4]
c0015373:	8d 04 80             	lea    eax,[eax+eax*4]
c0015376:	8d 04 80             	lea    eax,[eax+eax*4]
c0015379:	8d 04 80             	lea    eax,[eax+eax*4]
c001537c:	c1 e0 04             	shl    eax,0x4
c001537f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015383:	eb d3                	jmp    c0015358 <milliTenthSleep(unsigned int)>
c0015385:	90                   	nop
c0015386:	66 90                	xchg   ax,ax

c0015388 <Semaphore::acquire()>:
c0015388:	83 ec 0c             	sub    esp,0xc
c001538b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001538f:	fa                   	cli    
c0015390:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015395:	83 c0 01             	add    eax,0x1
c0015398:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001539d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153a2:	8d 48 01             	lea    ecx,[eax+0x1]
c00153a5:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153ab:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00153ae:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00153b0:	7d 2e                	jge    c00153e0 <Semaphore::acquire()+0x58>
c00153b2:	83 c1 01             	add    ecx,0x1
c00153b5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153b8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153bd:	85 c0                	test   eax,eax
c00153bf:	75 0b                	jne    c00153cc <Semaphore::acquire()+0x44>
c00153c1:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153c6:	85 c0                	test   eax,eax
c00153c8:	75 66                	jne    c0015430 <Semaphore::acquire()+0xa8>
c00153ca:	66 90                	xchg   ax,ax
c00153cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153d1:	83 e8 01             	sub    eax,0x1
c00153d4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153d9:	75 01                	jne    c00153dc <Semaphore::acquire()+0x54>
c00153db:	fb                   	sti    
c00153dc:	83 c4 0c             	add    esp,0xc
c00153df:	c3                   	ret    
c00153e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153ec:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153ef:	85 c9                	test   ecx,ecx
c00153f1:	74 51                	je     c0015444 <Semaphore::acquire()+0xbc>
c00153f3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153f6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153fc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00153ff:	90                   	nop
c0015400:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015405:	83 ec 0c             	sub    esp,0xc
c0015408:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001540b:	68 bc 11 02 c0       	push   0xc00211bc
c0015410:	e8 81 55 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0015415:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001541c:	e8 1b fe ff ff       	call   c001523c <blockTask(TaskState)>
c0015421:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	83 e8 01             	sub    eax,0x1
c001542c:	eb 8a                	jmp    c00153b8 <Semaphore::acquire()+0x30>
c001542e:	66 90                	xchg   ax,ax
c0015430:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001543a:	e8 e9 fb ff ff       	call   c0015028 <schedule()>
c001543f:	eb 8b                	jmp    c00153cc <Semaphore::acquire()+0x44>
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015449:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001544c:	eb b2                	jmp    c0015400 <Semaphore::acquire()+0x78>
c001544e:	66 90                	xchg   ax,ax

c0015450 <taskReturned>:
c0015450:	83 ec 18             	sub    esp,0x18
c0015453:	68 dc 11 02 c0       	push   0xc00211dc
c0015458:	e8 16 b4 ff ff       	call   c0010873 <KePanic(char const*)>
c001545d:	83 c4 10             	add    esp,0x10
c0015460:	83 ec 0c             	sub    esp,0xc
c0015463:	6a 02                	push   0x2
c0015465:	e8 d2 fd ff ff       	call   c001523c <blockTask(TaskState)>
c001546a:	fa                   	cli    
c001546b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015470:	83 c0 01             	add    eax,0x1
c0015473:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015478:	e8 ab fb ff ff       	call   c0015028 <schedule()>
c001547d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	83 e8 01             	sub    eax,0x1
c0015488:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001548d:	85 c0                	test   eax,eax
c001548f:	75 cf                	jne    c0015460 <taskReturned+0x10>
c0015491:	fb                   	sti    
c0015492:	eb cc                	jmp    c0015460 <taskReturned+0x10>

c0015494 <Thr::processFromPID(int)>:
c0015494:	57                   	push   edi
c0015495:	56                   	push   esi
c0015496:	53                   	push   ebx
c0015497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001549b:	fa                   	cli    
c001549c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154a2:	83 ec 0c             	sub    esp,0xc
c00154a5:	83 c1 01             	add    ecx,0x1
c00154a8:	68 84 81 02 c0       	push   0xc0028184
c00154ad:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00154b3:	e8 e4 96 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154b8:	83 c4 10             	add    esp,0x10
c00154bb:	89 c7                	mov    edi,eax
c00154bd:	eb 15                	jmp    c00154d4 <Thr::processFromPID(int)+0x40>
c00154bf:	90                   	nop
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	68 84 81 02 c0       	push   0xc0028184
c00154c8:	e8 cf 96 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154cd:	83 c4 10             	add    esp,0x10
c00154d0:	39 f8                	cmp    eax,edi
c00154d2:	74 50                	je     c0015524 <Thr::processFromPID(int)+0x90>
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	68 84 81 02 c0       	push   0xc0028184
c00154dc:	e8 bb 96 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e1:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154e8:	89 c3                	mov    ebx,eax
c00154ea:	e8 b5 96 00 00       	call   c001eba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154ef:	58                   	pop    eax
c00154f0:	5a                   	pop    edx
c00154f1:	53                   	push   ebx
c00154f2:	68 84 81 02 c0       	push   0xc0028184
c00154f7:	e8 64 97 00 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154ff:	83 c4 10             	add    esp,0x10
c0015502:	39 30                	cmp    DWORD PTR [eax],esi
c0015504:	75 ba                	jne    c00154c0 <Thr::processFromPID(int)+0x2c>
c0015506:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001550b:	83 e8 01             	sub    eax,0x1
c001550e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015513:	74 0b                	je     c0015520 <Thr::processFromPID(int)+0x8c>
c0015515:	8d 76 00             	lea    esi,[esi+0x0]
c0015518:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001551b:	5b                   	pop    ebx
c001551c:	5e                   	pop    esi
c001551d:	5f                   	pop    edi
c001551e:	c3                   	ret    
c001551f:	90                   	nop
c0015520:	fb                   	sti    
c0015521:	eb f5                	jmp    c0015518 <Thr::processFromPID(int)+0x84>
c0015523:	90                   	nop
c0015524:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015529:	83 e8 01             	sub    eax,0x1
c001552c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015531:	75 05                	jne    c0015538 <Thr::processFromPID(int)+0xa4>
c0015533:	fb                   	sti    
c0015534:	5b                   	pop    ebx
c0015535:	5e                   	pop    esi
c0015536:	5f                   	pop    edi
c0015537:	c3                   	ret    
c0015538:	5b                   	pop    ebx
c0015539:	31 c0                	xor    eax,eax
c001553b:	5e                   	pop    esi
c001553c:	5f                   	pop    edi
c001553d:	c3                   	ret    
c001553e:	66 90                	xchg   ax,ax

c0015540 <unblockTask(ThreadControlBlock*)>:
c0015540:	53                   	push   ebx
c0015541:	83 ec 08             	sub    esp,0x8
c0015544:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015548:	fa                   	cli    
c0015549:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001554e:	83 c0 01             	add    eax,0x1
c0015551:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015556:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015559:	85 c0                	test   eax,eax
c001555b:	74 67                	je     c00155c4 <unblockTask(ThreadControlBlock*)+0x84>
c001555d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015560:	83 f8 01             	cmp    eax,0x1
c0015563:	74 37                	je     c001559c <unblockTask(ThreadControlBlock*)+0x5c>
c0015565:	83 ec 0c             	sub    esp,0xc
c0015568:	68 84 81 02 c0       	push   0xc0028184
c001556d:	e8 2a 96 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015572:	83 c4 10             	add    esp,0x10
c0015575:	85 c0                	test   eax,eax
c0015577:	75 1b                	jne    c0015594 <unblockTask(ThreadControlBlock*)+0x54>
c0015579:	eb 5d                	jmp    c00155d8 <unblockTask(ThreadControlBlock*)+0x98>
c001557b:	90                   	nop
c001557c:	83 ec 08             	sub    esp,0x8
c001557f:	50                   	push   eax
c0015580:	68 84 81 02 c0       	push   0xc0028184
c0015585:	e8 32 99 00 00       	call   c001eebc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	85 c0                	test   eax,eax
c001558f:	74 47                	je     c00155d8 <unblockTask(ThreadControlBlock*)+0x98>
c0015591:	8d 76 00             	lea    esi,[esi+0x0]
c0015594:	39 c3                	cmp    ebx,eax
c0015596:	75 e4                	jne    c001557c <unblockTask(ThreadControlBlock*)+0x3c>
c0015598:	eb 12                	jmp    c00155ac <unblockTask(ThreadControlBlock*)+0x6c>
c001559a:	66 90                	xchg   ax,ax
c001559c:	83 ec 0c             	sub    esp,0xc
c001559f:	68 5b 11 02 c0       	push   0xc002115b
c00155a4:	e8 ed 53 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155b1:	83 e8 01             	sub    eax,0x1
c00155b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155b9:	75 01                	jne    c00155bc <unblockTask(ThreadControlBlock*)+0x7c>
c00155bb:	fb                   	sti    
c00155bc:	83 c4 08             	add    esp,0x8
c00155bf:	5b                   	pop    ebx
c00155c0:	c3                   	ret    
c00155c1:	8d 76 00             	lea    esi,[esi+0x0]
c00155c4:	83 ec 0c             	sub    esp,0xc
c00155c7:	68 44 11 02 c0       	push   0xc0021144
c00155cc:	e8 c5 53 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	eb d6                	jmp    c00155ac <unblockTask(ThreadControlBlock*)+0x6c>
c00155d6:	66 90                	xchg   ax,ax
c00155d8:	83 ec 08             	sub    esp,0x8
c00155db:	53                   	push   ebx
c00155dc:	68 84 81 02 c0       	push   0xc0028184
c00155e1:	e8 7a 96 00 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155e6:	83 c4 10             	add    esp,0x10
c00155e9:	eb c1                	jmp    c00155ac <unblockTask(ThreadControlBlock*)+0x6c>
c00155eb:	90                   	nop

c00155ec <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155ec:	55                   	push   ebp
c00155ed:	57                   	push   edi
c00155ee:	56                   	push   esi
c00155ef:	53                   	push   ebx
c00155f0:	83 ec 1c             	sub    esp,0x1c
c00155f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155fa:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015600:	85 ed                	test   ebp,ebp
c0015602:	7e 28                	jle    c001562c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015604:	31 f6                	xor    esi,esi
c0015606:	66 90                	xchg   ax,ax
c0015608:	83 ec 0c             	sub    esp,0xc
c001560b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015612:	83 c6 01             	add    esi,0x1
c0015615:	57                   	push   edi
c0015616:	e8 a3 24 ff ff       	call   c0007abe <free>
c001561b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015627:	7f df                	jg     c0015608 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015629:	8d 76 00             	lea    esi,[esi+0x0]
c001562c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015636:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001563b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001563e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015641:	d3 c0                	rol    eax,cl
c0015643:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001564a:	21 c8                	and    eax,ecx
c001564c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015653:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015656:	89 f7                	mov    edi,esi
c0015658:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015660:	0f 85 72 01 00 00    	jne    c00157d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015666:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001566c:	85 ed                	test   ebp,ebp
c001566e:	74 1c                	je     c001568c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	55                   	push   ebp
c0015674:	e8 0b af ff ff       	call   c0010584 <EnvVarContainer::~EnvVarContainer()>
c0015679:	59                   	pop    ecx
c001567a:	5e                   	pop    esi
c001567b:	6a 0c                	push   0xc
c001567d:	55                   	push   ebp
c001567e:	e8 e6 51 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c0015683:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	89 f7                	mov    edi,esi
c001568b:	90                   	nop
c001568c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015692:	85 c0                	test   eax,eax
c0015694:	0f 84 b2 00 00 00    	je     c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001569a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001569d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00156a1:	31 c9                	xor    ecx,ecx
c00156a3:	eb 17                	jmp    c00156bc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00156a5:	8d 76 00             	lea    esi,[esi+0x0]
c00156a8:	83 c1 01             	add    ecx,0x1
c00156ab:	83 f9 10             	cmp    ecx,0x10
c00156ae:	0f 84 98 00 00 00    	je     c001574c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156b4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156ba:	66 90                	xchg   ax,ax
c00156bc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156c3:	d3 fa                	sar    edx,cl
c00156c5:	80 e2 01             	and    dl,0x1
c00156c8:	74 de                	je     c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156ca:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00156cd:	01 d2                	add    edx,edx
c00156cf:	01 ca                	add    edx,ecx
c00156d1:	8d 14 92             	lea    edx,[edx+edx*4]
c00156d4:	01 d0                	add    eax,edx
c00156d6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156dc:	83 fd 07             	cmp    ebp,0x7
c00156df:	75 c7                	jne    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156e1:	05 40 02 00 00       	add    eax,0x240
c00156e6:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156e9:	83 fd ff             	cmp    ebp,0xffffffff
c00156ec:	0f 8c ee 00 00 00    	jl     c00157e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00156f2:	0f 84 ac 01 00 00    	je     c00158a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00156f8:	85 ed                	test   ebp,ebp
c00156fa:	0f 84 90 01 00 00    	je     c0015890 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015700:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015702:	75 a4                	jne    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015704:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001570a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001570e:	01 d0                	add    eax,edx
c0015710:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015714:	83 ec 0c             	sub    esp,0xc
c0015717:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001571d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015720:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015726:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001572d:	50                   	push   eax
c001572e:	e8 0d fe ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015739:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001573d:	89 f7                	mov    edi,esi
c001573f:	83 c1 01             	add    ecx,0x1
c0015742:	83 f9 10             	cmp    ecx,0x10
c0015745:	0f 85 69 ff ff ff    	jne    c00156b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001574b:	90                   	nop
c001574c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015752:	85 c0                	test   eax,eax
c0015754:	74 62                	je     c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015756:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001575c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015762:	74 54                	je     c00157b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015764:	83 ec 0c             	sub    esp,0xc
c0015767:	68 84 81 02 c0       	push   0xc0028184
c001576c:	e8 2b 94 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015771:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015778:	89 c7                	mov    edi,eax
c001577a:	e8 01 94 00 00       	call   c001eb80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001577f:	83 c4 10             	add    esp,0x10
c0015782:	84 c0                	test   al,al
c0015784:	0f 84 ce 00 00 00    	je     c0015858 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001578a:	66 90                	xchg   ax,ax
c001578c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001578f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015795:	85 d2                	test   edx,edx
c0015797:	74 0f                	je     c00157a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015799:	83 ec 0c             	sub    esp,0xc
c001579c:	8b 02                	mov    eax,DWORD PTR [edx]
c001579e:	52                   	push   edx
c001579f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157a2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00157b2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157b5:	8d 76 00             	lea    esi,[esi+0x0]
c00157b8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157be:	85 db                	test   ebx,ebx
c00157c0:	74 16                	je     c00157d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157c2:	83 ec 0c             	sub    esp,0xc
c00157c5:	53                   	push   ebx
c00157c6:	e8 cb 43 ff ff       	call   c0009b96 <VAS::~VAS()>
c00157cb:	58                   	pop    eax
c00157cc:	5a                   	pop    edx
c00157cd:	6a 14                	push   0x14
c00157cf:	53                   	push   ebx
c00157d0:	e8 94 50 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c00157d5:	83 c4 10             	add    esp,0x10
c00157d8:	83 c4 1c             	add    esp,0x1c
c00157db:	5b                   	pop    ebx
c00157dc:	5e                   	pop    esi
c00157dd:	5f                   	pop    edi
c00157de:	5d                   	pop    ebp
c00157df:	c3                   	ret    
c00157e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157e4:	83 ec 0c             	sub    esp,0xc
c00157e7:	68 10 12 02 c0       	push   0xc0021210
c00157ec:	e8 82 b0 ff ff       	call   c0010873 <KePanic(char const*)>
c00157f1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	89 f7                	mov    edi,esi
c00157f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157fd:	e9 a6 fe ff ff       	jmp    c00156a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015802:	66 90                	xchg   ax,ax
c0015804:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001580a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015810:	75 1e                	jne    c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015812:	83 ec 0c             	sub    esp,0xc
c0015815:	68 78 12 02 c0       	push   0xc0021278
c001581a:	e8 77 51 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001581f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015826:	e8 11 fa ff ff       	call   c001523c <blockTask(TaskState)>
c001582b:	83 c4 10             	add    esp,0x10
c001582e:	66 90                	xchg   ax,ax
c0015830:	83 ec 08             	sub    esp,0x8
c0015833:	56                   	push   esi
c0015834:	68 84 81 02 c0       	push   0xc0028184
c0015839:	e8 22 94 00 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001583e:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015845:	e8 52 93 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001584a:	83 c4 10             	add    esp,0x10
c001584d:	39 f8                	cmp    eax,edi
c001584f:	0f 84 37 ff ff ff    	je     c001578c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015855:	8d 76 00             	lea    esi,[esi+0x0]
c0015858:	83 ec 0c             	sub    esp,0xc
c001585b:	68 84 81 02 c0       	push   0xc0028184
c0015860:	e8 37 93 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015865:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001586c:	89 c6                	mov    esi,eax
c001586e:	e8 31 93 00 00       	call   c001eba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	39 f3                	cmp    ebx,esi
c0015878:	74 b6                	je     c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001587a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001587d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015880:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015886:	75 a8                	jne    c0015830 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015888:	e9 77 ff ff ff       	jmp    c0015804 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001588d:	8d 76 00             	lea    esi,[esi+0x0]
c0015890:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	68 44 12 02 c0       	push   0xc0021244
c001589c:	e9 4b ff ff ff       	jmp    c00157ec <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158a1:	8d 76 00             	lea    esi,[esi+0x0]
c00158a4:	8b 36                	mov    esi,DWORD PTR [esi]
c00158a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158aa:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00158ad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158b0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158b6:	01 d7                	add    edi,edx
c00158b8:	89 f8                	mov    eax,edi
c00158ba:	e9 51 fe ff ff       	jmp    c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158bf:	90                   	nop

c00158c0 <cleanerTaskFunction(void*)>:
c00158c0:	53                   	push   ebx
c00158c1:	83 ec 08             	sub    esp,0x8
c00158c4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158c9:	83 e8 01             	sub    eax,0x1
c00158cc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158d1:	75 01                	jne    c00158d4 <cleanerTaskFunction(void*)+0x14>
c00158d3:	fb                   	sti    
c00158d4:	fa                   	cli    
c00158d5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158da:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158e1:	8d 50 01             	lea    edx,[eax+0x1]
c00158e4:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158ea:	0f 84 c4 00 00 00    	je     c00159b4 <cleanerTaskFunction(void*)+0xf4>
c00158f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158f5:	85 c0                	test   eax,eax
c00158f7:	75 03                	jne    c00158fc <cleanerTaskFunction(void*)+0x3c>
c00158f9:	fb                   	sti    
c00158fa:	66 90                	xchg   ax,ax
c00158fc:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015903:	fa                   	cli    
c0015904:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001590a:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015910:	83 c2 01             	add    edx,0x1
c0015913:	83 c1 01             	add    ecx,0x1
c0015916:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001591c:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015922:	fa                   	cli    
c0015923:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015929:	83 c3 01             	add    ebx,0x1
c001592c:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015932:	eb 28                	jmp    c001595c <cleanerTaskFunction(void*)+0x9c>
c0015934:	83 ec 0c             	sub    esp,0xc
c0015937:	68 6c 81 02 c0       	push   0xc002816c
c001593c:	e8 5b 92 00 00       	call   c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015941:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015948:	89 c3                	mov    ebx,eax
c001594a:	e8 55 92 00 00       	call   c001eba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001594f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015952:	e8 95 fc ff ff       	call   c00155ec <cleanupTerminatedTask(ThreadControlBlock*)>
c0015957:	83 c4 10             	add    esp,0x10
c001595a:	66 90                	xchg   ax,ax
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	68 6c 81 02 c0       	push   0xc002816c
c0015964:	e8 17 92 00 00       	call   c001eb80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015969:	83 c4 10             	add    esp,0x10
c001596c:	84 c0                	test   al,al
c001596e:	74 c4                	je     c0015934 <cleanerTaskFunction(void*)+0x74>
c0015970:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015975:	83 e8 01             	sub    eax,0x1
c0015978:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001597d:	75 01                	jne    c0015980 <cleanerTaskFunction(void*)+0xc0>
c001597f:	fb                   	sti    
c0015980:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015985:	83 e8 01             	sub    eax,0x1
c0015988:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001598d:	0f 85 31 ff ff ff    	jne    c00158c4 <cleanerTaskFunction(void*)+0x4>
c0015993:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015998:	85 c0                	test   eax,eax
c001599a:	0f 84 24 ff ff ff    	je     c00158c4 <cleanerTaskFunction(void*)+0x4>
c00159a0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159aa:	e8 79 f6 ff ff       	call   c0015028 <schedule()>
c00159af:	e9 10 ff ff ff       	jmp    c00158c4 <cleanerTaskFunction(void*)+0x4>
c00159b4:	83 ec 0c             	sub    esp,0xc
c00159b7:	6a 02                	push   0x2
c00159b9:	e8 56 f8 ff ff       	call   c0015214 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159be:	83 c4 10             	add    esp,0x10
c00159c1:	e9 36 ff ff ff       	jmp    c00158fc <cleanerTaskFunction(void*)+0x3c>
c00159c6:	66 90                	xchg   ax,ax

c00159c8 <terminateTask(int)>:
c00159c8:	83 ec 14             	sub    esp,0x14
c00159cb:	fa                   	cli    
c00159cc:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159d2:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159d8:	83 c2 01             	add    edx,0x1
c00159db:	83 c1 01             	add    ecx,0x1
c00159de:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159e4:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159ea:	fa                   	cli    
c00159eb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159f4:	83 c0 01             	add    eax,0x1
c00159f7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a01:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a09:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a0c:	50                   	push   eax
c0015a0d:	68 6c 81 02 c0       	push   0xc002816c
c0015a12:	e8 49 92 00 00       	call   c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a26:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a2b:	85 c0                	test   eax,eax
c0015a2d:	74 65                	je     c0015a94 <terminateTask(int)+0xcc>
c0015a2f:	83 ec 0c             	sub    esp,0xc
c0015a32:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a39:	50                   	push   eax
c0015a3a:	e8 01 fb ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015a3f:	83 c4 10             	add    esp,0x10
c0015a42:	66 90                	xchg   ax,ax
c0015a44:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a49:	83 e8 01             	sub    eax,0x1
c0015a4c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a51:	75 01                	jne    c0015a54 <terminateTask(int)+0x8c>
c0015a53:	fb                   	sti    
c0015a54:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a59:	83 e8 01             	sub    eax,0x1
c0015a5c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a61:	75 09                	jne    c0015a6c <terminateTask(int)+0xa4>
c0015a63:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a6a:	75 3c                	jne    c0015aa8 <terminateTask(int)+0xe0>
c0015a6c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a71:	83 e8 01             	sub    eax,0x1
c0015a74:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a79:	75 01                	jne    c0015a7c <terminateTask(int)+0xb4>
c0015a7b:	fb                   	sti    
c0015a7c:	fa                   	cli    
c0015a7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a82:	83 c0 01             	add    eax,0x1
c0015a85:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a8a:	66 90                	xchg   ax,ax
c0015a8c:	e8 97 f5 ff ff       	call   c0015028 <schedule()>
c0015a91:	eb d9                	jmp    c0015a6c <terminateTask(int)+0xa4>
c0015a93:	90                   	nop
c0015a94:	83 ec 0c             	sub    esp,0xc
c0015a97:	68 72 11 02 c0       	push   0xc0021172
c0015a9c:	e8 f5 4e ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	eb 9e                	jmp    c0015a44 <terminateTask(int)+0x7c>
c0015aa6:	66 90                	xchg   ax,ax
c0015aa8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ab2:	eb d8                	jmp    c0015a8c <terminateTask(int)+0xc4>

c0015ab4 <Thr::terminateFromIRQ(int)>:
c0015ab4:	83 ec 18             	sub    esp,0x18
c0015ab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015abb:	50                   	push   eax
c0015abc:	e8 07 ff ff ff       	call   c00159c8 <terminateTask(int)>
c0015ac1:	90                   	nop
c0015ac2:	66 90                	xchg   ax,ax

c0015ac4 <Semaphore::release()>:
c0015ac4:	83 ec 0c             	sub    esp,0xc
c0015ac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015acb:	fa                   	cli    
c0015acc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ad1:	83 c0 01             	add    eax,0x1
c0015ad4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ad9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ade:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ae1:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015ae7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015aea:	85 c9                	test   ecx,ecx
c0015aec:	74 42                	je     c0015b30 <Semaphore::release()+0x6c>
c0015aee:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015af1:	83 ec 0c             	sub    esp,0xc
c0015af4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015af7:	51                   	push   ecx
c0015af8:	e8 43 fa ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015afd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b02:	83 c4 10             	add    esp,0x10
c0015b05:	83 e8 01             	sub    eax,0x1
c0015b08:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b0d:	85 c0                	test   eax,eax
c0015b0f:	75 0b                	jne    c0015b1c <Semaphore::release()+0x58>
c0015b11:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b16:	85 c0                	test   eax,eax
c0015b18:	75 22                	jne    c0015b3c <Semaphore::release()+0x78>
c0015b1a:	66 90                	xchg   ax,ax
c0015b1c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b21:	83 e8 01             	sub    eax,0x1
c0015b24:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b29:	75 01                	jne    c0015b2c <Semaphore::release()+0x68>
c0015b2b:	fb                   	sti    
c0015b2c:	83 c4 0c             	add    esp,0xc
c0015b2f:	c3                   	ret    
c0015b30:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b33:	83 e9 01             	sub    ecx,0x1
c0015b36:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b39:	eb cd                	jmp    c0015b08 <Semaphore::release()+0x44>
c0015b3b:	90                   	nop
c0015b3c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b46:	e8 dd f4 ff ff       	call   c0015028 <schedule()>
c0015b4b:	eb cf                	jmp    c0015b1c <Semaphore::release()+0x58>
c0015b4d:	8d 76 00             	lea    esi,[esi+0x0]

c0015b50 <__static_initialization_and_destruction_0(int, int)>:
c0015b50:	83 ec 0c             	sub    esp,0xc
c0015b53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b58:	0f 85 8e 00 00 00    	jne    c0015bec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b5e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b66:	0f 85 80 00 00 00    	jne    c0015bec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	68 84 81 02 c0       	push   0xc0028184
c0015b74:	e8 9b 93 00 00       	call   c001ef14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	83 ec 04             	sub    esp,0x4
c0015b7f:	68 0c 1e 02 c0       	push   0xc0021e0c
c0015b84:	68 84 81 02 c0       	push   0xc0028184
c0015b89:	68 c4 ee 01 c0       	push   0xc001eec4
c0015b8e:	e8 86 4c ff ff       	call   c000a819 <__cxa_atexit>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	83 ec 0c             	sub    esp,0xc
c0015b99:	68 78 81 02 c0       	push   0xc0028178
c0015b9e:	e8 71 93 00 00       	call   c001ef14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	83 ec 04             	sub    esp,0x4
c0015ba9:	68 0c 1e 02 c0       	push   0xc0021e0c
c0015bae:	68 78 81 02 c0       	push   0xc0028178
c0015bb3:	68 c4 ee 01 c0       	push   0xc001eec4
c0015bb8:	e8 5c 4c ff ff       	call   c000a819 <__cxa_atexit>
c0015bbd:	83 c4 10             	add    esp,0x10
c0015bc0:	83 ec 0c             	sub    esp,0xc
c0015bc3:	68 6c 81 02 c0       	push   0xc002816c
c0015bc8:	e8 47 93 00 00       	call   c001ef14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bcd:	83 c4 10             	add    esp,0x10
c0015bd0:	83 ec 04             	sub    esp,0x4
c0015bd3:	68 0c 1e 02 c0       	push   0xc0021e0c
c0015bd8:	68 6c 81 02 c0       	push   0xc002816c
c0015bdd:	68 c4 ee 01 c0       	push   0xc001eec4
c0015be2:	e8 32 4c ff ff       	call   c000a819 <__cxa_atexit>
c0015be7:	83 c4 10             	add    esp,0x10
c0015bea:	66 90                	xchg   ax,ax
c0015bec:	90                   	nop
c0015bed:	83 c4 0c             	add    esp,0xc
c0015bf0:	c3                   	ret    
c0015bf1:	8d 76 00             	lea    esi,[esi+0x0]

c0015bf4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	83 ec 08             	sub    esp,0x8
c0015bfa:	68 ff ff 00 00       	push   0xffff
c0015bff:	6a 01                	push   0x1
c0015c01:	e8 4a ff ff ff       	call   c0015b50 <__static_initialization_and_destruction_0(int, int)>
c0015c06:	83 c4 10             	add    esp,0x10
c0015c09:	83 c4 0c             	add    esp,0xc
c0015c0c:	c3                   	ret    

c0015c0d <Vm::inbv(unsigned short)>:
c0015c0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c11:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c16:	75 06                	jne    c0015c1e <Vm::inbv(unsigned short)+0x11>
c0015c18:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c1d:	c3                   	ret    
c0015c1e:	ec                   	in     al,dx
c0015c1f:	c3                   	ret    

c0015c20 <Vm::outbv(unsigned short, unsigned char)>:
c0015c20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c28:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c2d:	75 25                	jne    c0015c54 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c2f:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c35:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c38:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c3e:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c44:	83 fa 20             	cmp    edx,0x20
c0015c47:	75 0c                	jne    c0015c55 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c49:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c53:	c3                   	ret    
c0015c54:	ee                   	out    dx,al
c0015c55:	c3                   	ret    

c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c56:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c5b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c60:	c1 e0 04             	shl    eax,0x4
c0015c63:	01 d0                	add    eax,edx
c0015c65:	c3                   	ret    

c0015c66 <Vm::getSegment(unsigned int)>:
c0015c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c6a:	c1 e8 10             	shr    eax,0x10
c0015c6d:	c3                   	ret    

c0015c6e <Vm::getOffset(unsigned int)>:
c0015c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c72:	c3                   	ret    

c0015c73 <Vm::mainloop2()>:
c0015c73:	83 ec 18             	sub    esp,0x18
c0015c76:	fa                   	cli    
c0015c77:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c7d:	6a 02                	push   0x2
c0015c7f:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c86:	e8 89 f5 ff ff       	call   c0015214 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c90:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c94:	52                   	push   edx
c0015c95:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c99:	52                   	push   edx
c0015c9a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c9e:	52                   	push   edx
c0015c9f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ca3:	50                   	push   eax
c0015ca4:	e8 66 a5 fe ff       	call   c000020f <goToVM86>
c0015ca9:	83 c4 2c             	add    esp,0x2c
c0015cac:	c3                   	ret    

c0015cad <Vm::mainVm8086Loop(void*)>:
c0015cad:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cb2:	48                   	dec    eax
c0015cb3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cb8:	75 01                	jne    c0015cbb <Vm::mainVm8086Loop(void*)+0xe>
c0015cba:	fb                   	sti    
c0015cbb:	eb b6                	jmp    c0015c73 <Vm::mainloop2()>

c0015cbd <Vm::mainloop3(unsigned long)>:
c0015cbd:	83 ec 18             	sub    esp,0x18
c0015cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc4:	fa                   	cli    
c0015cc5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ccb:	6a 02                	push   0x2
c0015ccd:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cd4:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cd9:	e8 36 f5 ff ff       	call   c0015214 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cde:	83 c4 1c             	add    esp,0x1c
c0015ce1:	eb 90                	jmp    c0015c73 <Vm::mainloop2()>

c0015ce3 <Vm::initialise8086()>:
c0015ce3:	83 ec 0c             	sub    esp,0xc
c0015ce6:	68 80 00 00 00       	push   0x80
c0015ceb:	6a 00                	push   0x0
c0015ced:	68 ad 5c 01 c0       	push   0xc0015cad
c0015cf2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015cf8:	e8 db f0 ff ff       	call   c0014dd8 <Process::createThread(void (*)(void*), void*, int)>
c0015cfd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d04:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d09:	68 00 01 00 00       	push   0x100
c0015d0e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d13:	6a 00                	push   0x0
c0015d15:	6a 00                	push   0x0
c0015d17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d1d:	e8 f6 42 ff ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d22:	83 c4 2c             	add    esp,0x2c
c0015d25:	c3                   	ret    

c0015d26 <Vm::finish8086()>:
c0015d26:	53                   	push   ebx
c0015d27:	83 ec 08             	sub    esp,0x8
c0015d2a:	fa                   	cli    
c0015d2b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d31:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d38:	75 15                	jne    c0015d4f <Vm::finish8086()+0x29>
c0015d3a:	e8 e9 f2 ff ff       	call   c0015028 <schedule()>
c0015d3f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d44:	48                   	dec    eax
c0015d45:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d4a:	75 de                	jne    c0015d2a <Vm::finish8086()+0x4>
c0015d4c:	fb                   	sti    
c0015d4d:	eb db                	jmp    c0015d2a <Vm::finish8086()+0x4>
c0015d4f:	83 ec 0c             	sub    esp,0xc
c0015d52:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d58:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d5e:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d65:	e8 d6 f7 ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015d6a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d6f:	83 c4 10             	add    esp,0x10
c0015d72:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d75:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d7b:	85 d2                	test   edx,edx
c0015d7d:	75 01                	jne    c0015d80 <Vm::finish8086()+0x5a>
c0015d7f:	fb                   	sti    
c0015d80:	89 d8                	mov    eax,ebx
c0015d82:	83 c4 08             	add    esp,0x8
c0015d85:	5b                   	pop    ebx
c0015d86:	c3                   	ret    

c0015d87 <Vm::getOutput8086(unsigned char*)>:
c0015d87:	57                   	push   edi
c0015d88:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d8e:	56                   	push   esi
c0015d8f:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d94:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d9a:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d9f:	5e                   	pop    esi
c0015da0:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015daa:	5f                   	pop    edi
c0015dab:	c3                   	ret    

c0015dac <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015dac:	55                   	push   ebp
c0015dad:	57                   	push   edi
c0015dae:	56                   	push   esi
c0015daf:	53                   	push   ebx
c0015db0:	83 ec 0c             	sub    esp,0xc
c0015db3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015db7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015dbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015dbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015dc3:	fa                   	cli    
c0015dc4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dca:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015dd1:	75 15                	jne    c0015de8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015dd3:	e8 50 f2 ff ff       	call   c0015028 <schedule()>
c0015dd8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ddd:	48                   	dec    eax
c0015dde:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015de3:	75 de                	jne    c0015dc3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015de5:	fb                   	sti    
c0015de6:	eb db                	jmp    c0015dc3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015de8:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015ded:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015df7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dfb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015dff:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e03:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e07:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e0b:	0f b7 ff             	movzx  edi,di
c0015e0e:	0f b7 f6             	movzx  esi,si
c0015e11:	50                   	push   eax
c0015e12:	6a 20                	push   0x20
c0015e14:	6a 00                	push   0x0
c0015e16:	68 e0 81 02 c0       	push   0xc00281e0
c0015e1b:	e8 d0 a6 fe ff       	call   c00004f0 <memset>
c0015e20:	5a                   	pop    edx
c0015e21:	59                   	pop    ecx
c0015e22:	57                   	push   edi
c0015e23:	56                   	push   esi
c0015e24:	e8 2d fe ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	89 c7                	mov    edi,eax
c0015e2e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e38:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e3d:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e44:	48                   	dec    eax
c0015e45:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e4a:	75 01                	jne    c0015e4d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e4c:	fb                   	sti    
c0015e4d:	83 ec 0c             	sub    esp,0xc
c0015e50:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e56:	e8 e5 f6 ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015e5b:	83 c4 1c             	add    esp,0x1c
c0015e5e:	b0 01                	mov    al,0x1
c0015e60:	5b                   	pop    ebx
c0015e61:	5e                   	pop    esi
c0015e62:	5f                   	pop    edi
c0015e63:	5d                   	pop    ebp
c0015e64:	c3                   	ret    

c0015e65 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e65:	55                   	push   ebp
c0015e66:	57                   	push   edi
c0015e67:	56                   	push   esi
c0015e68:	53                   	push   ebx
c0015e69:	83 ec 2c             	sub    esp,0x2c
c0015e6c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015e70:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015e74:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e78:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015e7c:	fa                   	cli    
c0015e7d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e83:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015e8a:	89 f0                	mov    eax,esi
c0015e8c:	84 c0                	test   al,al
c0015e8e:	75 1d                	jne    c0015ead <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015e90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e94:	e8 8f f1 ff ff       	call   c0015028 <schedule()>
c0015e99:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ea2:	48                   	dec    eax
c0015ea3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ea8:	75 d2                	jne    c0015e7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015eaa:	fb                   	sti    
c0015eab:	eb cf                	jmp    c0015e7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015ead:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015eb2:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ebc:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ec0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015ec4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015ec8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015ecc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ed0:	50                   	push   eax
c0015ed1:	6a 20                	push   0x20
c0015ed3:	6a 00                	push   0x0
c0015ed5:	68 e0 81 02 c0       	push   0xc00281e0
c0015eda:	e8 11 a6 fe ff       	call   c00004f0 <memset>
c0015edf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ee6:	e8 c3 1b ff ff       	call   c0007aae <malloc>
c0015eeb:	83 c4 0c             	add    esp,0xc
c0015eee:	89 c3                	mov    ebx,eax
c0015ef0:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ef6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015efa:	50                   	push   eax
c0015efb:	e8 18 50 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c0015f00:	83 c4 10             	add    esp,0x10
c0015f03:	85 db                	test   ebx,ebx
c0015f05:	75 0a                	jne    c0015f11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015f07:	83 ec 0c             	sub    esp,0xc
c0015f0a:	68 a0 12 02 c0       	push   0xc00212a0
c0015f0f:	eb 2b                	jmp    c0015f3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015f11:	50                   	push   eax
c0015f12:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f16:	50                   	push   eax
c0015f17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f1b:	50                   	push   eax
c0015f1c:	53                   	push   ebx
c0015f1d:	e8 5e 53 ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c0015f22:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f26:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f32:	74 27                	je     c0015f5b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015f34:	83 ec 0c             	sub    esp,0xc
c0015f37:	68 b4 12 02 c0       	push   0xc00212b4
c0015f3c:	e8 32 a9 ff ff       	call   c0010873 <KePanic(char const*)>
c0015f41:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f46:	83 c4 10             	add    esp,0x10
c0015f49:	48                   	dec    eax
c0015f4a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f4f:	85 c0                	test   eax,eax
c0015f51:	75 01                	jne    c0015f54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f53:	fb                   	sti    
c0015f54:	31 f6                	xor    esi,esi
c0015f56:	e9 8f 00 00 00       	jmp    c0015fea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f5b:	51                   	push   ecx
c0015f5c:	51                   	push   ecx
c0015f5d:	6a 01                	push   0x1
c0015f5f:	53                   	push   ebx
c0015f60:	e8 6f 50 ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c0015f65:	83 c4 10             	add    esp,0x10
c0015f68:	85 c0                	test   eax,eax
c0015f6a:	74 26                	je     c0015f92 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0015f6c:	83 ec 0c             	sub    esp,0xc
c0015f6f:	68 cd 12 02 c0       	push   0xc00212cd
c0015f74:	e8 fa a8 ff ff       	call   c0010873 <KePanic(char const*)>
c0015f79:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f7e:	83 c4 10             	add    esp,0x10
c0015f81:	48                   	dec    eax
c0015f82:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f87:	85 c0                	test   eax,eax
c0015f89:	75 c9                	jne    c0015f54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f8b:	fb                   	sti    
c0015f8c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f90:	eb 58                	jmp    c0015fea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f92:	0f b7 ed             	movzx  ebp,bp
c0015f95:	50                   	push   eax
c0015f96:	0f b7 ff             	movzx  edi,di
c0015f99:	50                   	push   eax
c0015f9a:	55                   	push   ebp
c0015f9b:	57                   	push   edi
c0015f9c:	e8 b5 fc ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fa1:	5a                   	pop    edx
c0015fa2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fa4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015fa8:	51                   	push   ecx
c0015fa9:	50                   	push   eax
c0015faa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb2:	53                   	push   ebx
c0015fb3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fb6:	83 c4 14             	add    esp,0x14
c0015fb9:	53                   	push   ebx
c0015fba:	e8 73 50 ff ff       	call   c000b032 <File::close()>
c0015fbf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fc4:	83 c4 10             	add    esp,0x10
c0015fc7:	48                   	dec    eax
c0015fc8:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015fcf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fd4:	85 c0                	test   eax,eax
c0015fd6:	75 01                	jne    c0015fd9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c0015fd8:	fb                   	sti    
c0015fd9:	83 ec 0c             	sub    esp,0xc
c0015fdc:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fe2:	e8 59 f5 ff ff       	call   c0015540 <unblockTask(ThreadControlBlock*)>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	83 c4 2c             	add    esp,0x2c
c0015fed:	89 f0                	mov    eax,esi
c0015fef:	5b                   	pop    ebx
c0015ff0:	5e                   	pop    esi
c0015ff1:	5f                   	pop    edi
c0015ff2:	5d                   	pop    ebp
c0015ff3:	c3                   	ret    

c0015ff4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015ff4:	57                   	push   edi
c0015ff5:	56                   	push   esi
c0015ff6:	53                   	push   ebx
c0015ff7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016003:	83 e8 06             	sub    eax,0x6
c0016006:	0f b7 c0             	movzx  eax,ax
c0016009:	50                   	push   eax
c001600a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001600f:	50                   	push   eax
c0016010:	e8 41 fc ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016015:	5a                   	pop    edx
c0016016:	5e                   	pop    esi
c0016017:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001601a:	8d 56 fa             	lea    edx,[esi-0x6]
c001601d:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0016020:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016026:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016029:	8d 56 02             	lea    edx,[esi+0x2]
c001602c:	66 89 10             	mov    WORD PTR [eax],dx
c001602f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016032:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016036:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016039:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001603d:	89 d6                	mov    esi,edx
c001603f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016045:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c001604b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001604f:	74 05                	je     c0016056 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0016051:	80 ce 02             	or     dh,0x2
c0016054:	89 d6                	mov    esi,edx
c0016056:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001605a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001605f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016063:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001606b:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001606e:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0016076:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016079:	5b                   	pop    ebx
c001607a:	5e                   	pop    esi
c001607b:	5f                   	pop    edi
c001607c:	c3                   	ret    

c001607d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001607d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016082:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016087:	c1 e0 04             	shl    eax,0x4
c001608a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001608d:	c3                   	ret    

c001608e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001608e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016093:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016098:	c1 e0 04             	shl    eax,0x4
c001609b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001609f:	c3                   	ret    

c00160a0 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00160a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160aa:	c1 e0 04             	shl    eax,0x4
c00160ad:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00160b0:	c3                   	ret    

c00160b1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00160b1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160b6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160bb:	c1 e0 04             	shl    eax,0x4
c00160be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160c2:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160c5:	c3                   	ret    

c00160c6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160d0:	c1 e0 04             	shl    eax,0x4
c00160d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160d7:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160db:	c3                   	ret    

c00160dc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160e6:	c1 e0 04             	shl    eax,0x4
c00160e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160ed:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160f0:	c3                   	ret    

c00160f1 <Vm::faultHandler(regs*)>:
c00160f1:	55                   	push   ebp
c00160f2:	57                   	push   edi
c00160f3:	56                   	push   esi
c00160f4:	53                   	push   ebx
c00160f5:	83 ec 2c             	sub    esp,0x2c
c00160f8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00160fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160ff:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016103:	0f b7 f8             	movzx  edi,ax
c0016106:	52                   	push   edx
c0016107:	0f b7 c0             	movzx  eax,ax
c001610a:	50                   	push   eax
c001610b:	e8 46 fb ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016110:	5a                   	pop    edx
c0016111:	59                   	pop    ecx
c0016112:	89 c1                	mov    ecx,eax
c0016114:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016117:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001611b:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016124:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016127:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001612b:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016130:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016134:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016138:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001613c:	e8 15 fb ff ff       	call   c0015c56 <Vm::realToLinear(unsigned short, unsigned short)>
c0016141:	5e                   	pop    esi
c0016142:	be 06 00 00 00       	mov    esi,0x6
c0016147:	5d                   	pop    ebp
c0016148:	31 ed                	xor    ebp,ebp
c001614a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001614f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016152:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016158:	0f 84 54 02 00 00    	je     c00163b2 <Vm::faultHandler(regs*)+0x2c1>
c001615e:	0f 87 94 00 00 00    	ja     c00161f8 <Vm::faultHandler(regs*)+0x107>
c0016164:	83 fa 66             	cmp    edx,0x66
c0016167:	0f 84 c2 01 00 00    	je     c001632f <Vm::faultHandler(regs*)+0x23e>
c001616d:	77 47                	ja     c00161b6 <Vm::faultHandler(regs*)+0xc5>
c001616f:	83 fa 36             	cmp    edx,0x36
c0016172:	0f 84 aa 01 00 00    	je     c0016322 <Vm::faultHandler(regs*)+0x231>
c0016178:	77 1a                	ja     c0016194 <Vm::faultHandler(regs*)+0xa3>
c001617a:	83 fa 26             	cmp    edx,0x26
c001617d:	0f 84 78 01 00 00    	je     c00162fb <Vm::faultHandler(regs*)+0x20a>
c0016183:	83 fa 2e             	cmp    edx,0x2e
c0016186:	0f 85 01 06 00 00    	jne    c001678d <Vm::faultHandler(regs*)+0x69c>
c001618c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001618f:	31 f6                	xor    esi,esi
c0016191:	41                   	inc    ecx
c0016192:	eb bb                	jmp    c001614f <Vm::faultHandler(regs*)+0x5e>
c0016194:	83 fa 64             	cmp    edx,0x64
c0016197:	0f 84 6b 01 00 00    	je     c0016308 <Vm::faultHandler(regs*)+0x217>
c001619d:	0f 87 72 01 00 00    	ja     c0016315 <Vm::faultHandler(regs*)+0x224>
c00161a3:	83 fa 3e             	cmp    edx,0x3e
c00161a6:	0f 85 e1 05 00 00    	jne    c001678d <Vm::faultHandler(regs*)+0x69c>
c00161ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161af:	be 01 00 00 00       	mov    esi,0x1
c00161b4:	eb db                	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c00161b6:	83 fa 6d             	cmp    edx,0x6d
c00161b9:	0f 84 14 03 00 00    	je     c00164d3 <Vm::faultHandler(regs*)+0x3e2>
c00161bf:	77 17                	ja     c00161d8 <Vm::faultHandler(regs*)+0xe7>
c00161c1:	83 fa 67             	cmp    edx,0x67
c00161c4:	0f 84 72 01 00 00    	je     c001633c <Vm::faultHandler(regs*)+0x24b>
c00161ca:	83 fa 6c             	cmp    edx,0x6c
c00161cd:	0f 84 91 02 00 00    	je     c0016464 <Vm::faultHandler(regs*)+0x373>
c00161d3:	e9 b5 05 00 00       	jmp    c001678d <Vm::faultHandler(regs*)+0x69c>
c00161d8:	83 fa 6f             	cmp    edx,0x6f
c00161db:	0f 84 1d 04 00 00    	je     c00165fe <Vm::faultHandler(regs*)+0x50d>
c00161e1:	0f 82 7f 03 00 00    	jb     c0016566 <Vm::faultHandler(regs*)+0x475>
c00161e7:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00161ed:	0f 84 56 01 00 00    	je     c0016349 <Vm::faultHandler(regs*)+0x258>
c00161f3:	e9 95 05 00 00       	jmp    c001678d <Vm::faultHandler(regs*)+0x69c>
c00161f8:	81 fa ec 00 00 00    	cmp    edx,0xec
c00161fe:	0f 84 31 05 00 00    	je     c0016735 <Vm::faultHandler(regs*)+0x644>
c0016204:	0f 87 89 00 00 00    	ja     c0016293 <Vm::faultHandler(regs*)+0x1a2>
c001620a:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016210:	0f 84 b0 04 00 00    	je     c00166c6 <Vm::faultHandler(regs*)+0x5d5>
c0016216:	77 58                	ja     c0016270 <Vm::faultHandler(regs*)+0x17f>
c0016218:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001621e:	0f 84 ee 01 00 00    	je     c0016412 <Vm::faultHandler(regs*)+0x321>
c0016224:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001622a:	0f 85 5d 05 00 00    	jne    c001678d <Vm::faultHandler(regs*)+0x69c>
c0016230:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016233:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016236:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001623a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001623d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0016241:	81 ca 00 02 02 00    	or     edx,0x20200
c0016247:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001624a:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c001624e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016254:	c1 e8 09             	shr    eax,0x9
c0016257:	83 e0 01             	and    eax,0x1
c001625a:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001625d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016260:	83 c0 06             	add    eax,0x6
c0016263:	25 ff ff 00 00       	and    eax,0xffff
c0016268:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001626b:	e9 19 05 00 00       	jmp    c0016789 <Vm::faultHandler(regs*)+0x698>
c0016270:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016276:	0f 84 8f 04 00 00    	je     c001670b <Vm::faultHandler(regs*)+0x61a>
c001627c:	0f 82 60 04 00 00    	jb     c00166e2 <Vm::faultHandler(regs*)+0x5f1>
c0016282:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016288:	0f 84 94 04 00 00    	je     c0016722 <Vm::faultHandler(regs*)+0x631>
c001628e:	e9 fa 04 00 00       	jmp    c001678d <Vm::faultHandler(regs*)+0x69c>
c0016293:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016299:	0f 84 d7 04 00 00    	je     c0016776 <Vm::faultHandler(regs*)+0x685>
c001629f:	77 2e                	ja     c00162cf <Vm::faultHandler(regs*)+0x1de>
c00162a1:	81 fa ed 00 00 00    	cmp    edx,0xed
c00162a7:	0f 84 a4 04 00 00    	je     c0016751 <Vm::faultHandler(regs*)+0x660>
c00162ad:	81 fa ee 00 00 00    	cmp    edx,0xee
c00162b3:	0f 85 d4 04 00 00    	jne    c001678d <Vm::faultHandler(regs*)+0x69c>
c00162b9:	50                   	push   eax
c00162ba:	50                   	push   eax
c00162bb:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162bf:	50                   	push   eax
c00162c0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162c4:	50                   	push   eax
c00162c5:	e8 56 f9 ff ff       	call   c0015c20 <Vm::outbv(unsigned short, unsigned char)>
c00162ca:	e9 9f 04 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x67d>
c00162cf:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162d5:	0f 84 6d 01 00 00    	je     c0016448 <Vm::faultHandler(regs*)+0x357>
c00162db:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162e1:	0f 84 6f 01 00 00    	je     c0016456 <Vm::faultHandler(regs*)+0x365>
c00162e7:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00162ed:	0f 85 9a 04 00 00    	jne    c001678d <Vm::faultHandler(regs*)+0x69c>
c00162f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162f6:	e9 96 fe ff ff       	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c00162fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162fe:	be 02 00 00 00       	mov    esi,0x2
c0016303:	e9 89 fe ff ff       	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c0016308:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001630b:	be 03 00 00 00       	mov    esi,0x3
c0016310:	e9 7c fe ff ff       	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c0016315:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016318:	be 04 00 00 00       	mov    esi,0x4
c001631d:	e9 6f fe ff ff       	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c0016322:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016325:	be 05 00 00 00       	mov    esi,0x5
c001632a:	e9 62 fe ff ff       	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c001632f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016332:	bd 01 00 00 00       	mov    ebp,0x1
c0016337:	e9 55 fe ff ff       	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c001633c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001633f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016344:	e9 48 fe ff ff       	jmp    c0016191 <Vm::faultHandler(regs*)+0xa0>
c0016349:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001634c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016350:	83 e5 01             	and    ebp,0x1
c0016353:	74 30                	je     c0016385 <Vm::faultHandler(regs*)+0x294>
c0016355:	83 e9 04             	sub    ecx,0x4
c0016358:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001635e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016364:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016367:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001636a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016370:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016374:	0f 84 0c 04 00 00    	je     c0016786 <Vm::faultHandler(regs*)+0x695>
c001637a:	80 ce 02             	or     dh,0x2
c001637d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016380:	e9 01 04 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c0016385:	83 e9 02             	sub    ecx,0x2
c0016388:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001638e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016391:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016395:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001639b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001639f:	74 05                	je     c00163a6 <Vm::faultHandler(regs*)+0x2b5>
c00163a1:	80 ce 02             	or     dh,0x2
c00163a4:	eb 03                	jmp    c00163a9 <Vm::faultHandler(regs*)+0x2b8>
c00163a6:	80 e6 fd             	and    dh,0xfd
c00163a9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163ad:	e9 d4 03 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c00163b2:	83 e5 01             	and    ebp,0x1
c00163b5:	74 2a                	je     c00163e1 <Vm::faultHandler(regs*)+0x2f0>
c00163b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00163b9:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163bf:	81 ca 00 02 02 00    	or     edx,0x20200
c00163c5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00163ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163d0:	c1 e8 09             	shr    eax,0x9
c00163d3:	83 e0 01             	and    eax,0x1
c00163d6:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163dc:	83 c0 04             	add    eax,0x4
c00163df:	eb 24                	jmp    c0016405 <Vm::faultHandler(regs*)+0x314>
c00163e1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163e4:	81 ca 00 02 02 00    	or     edx,0x20200
c00163ea:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163ed:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00163f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163f6:	c1 e8 09             	shr    eax,0x9
c00163f9:	83 e0 01             	and    eax,0x1
c00163fc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163ff:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016402:	83 c0 02             	add    eax,0x2
c0016405:	25 ff ff 00 00       	and    eax,0xffff
c001640a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001640d:	e9 74 03 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c0016412:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016416:	3d ee 00 00 00       	cmp    eax,0xee
c001641b:	75 10                	jne    c001642d <Vm::faultHandler(regs*)+0x33c>
c001641d:	83 ec 0c             	sub    esp,0xc
c0016420:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016423:	e8 95 f8 ff ff       	call   c0015cbd <Vm::mainloop3(unsigned long)>
c0016428:	e9 44 03 00 00       	jmp    c0016771 <Vm::faultHandler(regs*)+0x680>
c001642d:	83 ec 0c             	sub    esp,0xc
c0016430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016434:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016438:	51                   	push   ecx
c0016439:	50                   	push   eax
c001643a:	53                   	push   ebx
c001643b:	e8 b4 fb ff ff       	call   c0015ff4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016440:	83 c4 20             	add    esp,0x20
c0016443:	e9 41 03 00 00       	jmp    c0016789 <Vm::faultHandler(regs*)+0x698>
c0016448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016451:	e9 30 03 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c0016456:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001645b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001645f:	e9 22 03 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c0016464:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016467:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001646c:	74 2b                	je     c0016499 <Vm::faultHandler(regs*)+0x3a8>
c001646e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016475:	76 22                	jbe    c0016499 <Vm::faultHandler(regs*)+0x3a8>
c0016477:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001647b:	50                   	push   eax
c001647c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016480:	50                   	push   eax
c0016481:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016485:	50                   	push   eax
c0016486:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001648a:	50                   	push   eax
c001648b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001648f:	50                   	push   eax
c0016490:	6a 6c                	push   0x6c
c0016492:	6a 6c                	push   0x6c
c0016494:	e9 bd 01 00 00       	jmp    c0016656 <Vm::faultHandler(regs*)+0x565>
c0016499:	83 ec 0c             	sub    esp,0xc
c001649c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00164a0:	0f b7 f6             	movzx  esi,si
c00164a3:	50                   	push   eax
c00164a4:	e8 64 f7 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00164a9:	83 c4 0c             	add    esp,0xc
c00164ac:	0f b6 c0             	movzx  eax,al
c00164af:	50                   	push   eax
c00164b0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00164b4:	50                   	push   eax
c00164b5:	56                   	push   esi
c00164b6:	e8 f6 fb ff ff       	call   c00160b1 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164bb:	83 c4 10             	add    esp,0x10
c00164be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164c1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164c5:	74 03                	je     c00164ca <Vm::faultHandler(regs*)+0x3d9>
c00164c7:	48                   	dec    eax
c00164c8:	eb 01                	jmp    c00164cb <Vm::faultHandler(regs*)+0x3da>
c00164ca:	40                   	inc    eax
c00164cb:	0f b7 c0             	movzx  eax,ax
c00164ce:	e9 8b 00 00 00       	jmp    c001655e <Vm::faultHandler(regs*)+0x46d>
c00164d3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164d9:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164de:	74 29                	je     c0016509 <Vm::faultHandler(regs*)+0x418>
c00164e0:	3d ff ff 00 00       	cmp    eax,0xffff
c00164e5:	76 22                	jbe    c0016509 <Vm::faultHandler(regs*)+0x418>
c00164e7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164eb:	50                   	push   eax
c00164ec:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164f0:	50                   	push   eax
c00164f1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164f5:	50                   	push   eax
c00164f6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164fa:	50                   	push   eax
c00164fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164ff:	50                   	push   eax
c0016500:	6a 6d                	push   0x6d
c0016502:	6a 6d                	push   0x6d
c0016504:	e9 4d 01 00 00       	jmp    c0016656 <Vm::faultHandler(regs*)+0x565>
c0016509:	0f b7 c8             	movzx  ecx,ax
c001650c:	0f b7 f6             	movzx  esi,si
c001650f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016512:	83 e5 01             	and    ebp,0x1
c0016515:	74 20                	je     c0016537 <Vm::faultHandler(regs*)+0x446>
c0016517:	ed                   	in     eax,dx
c0016518:	55                   	push   ebp
c0016519:	50                   	push   eax
c001651a:	51                   	push   ecx
c001651b:	56                   	push   esi
c001651c:	e8 bb fb ff ff       	call   c00160dc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016527:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001652b:	74 05                	je     c0016532 <Vm::faultHandler(regs*)+0x441>
c001652d:	83 e8 04             	sub    eax,0x4
c0016530:	eb 27                	jmp    c0016559 <Vm::faultHandler(regs*)+0x468>
c0016532:	83 c0 04             	add    eax,0x4
c0016535:	eb 22                	jmp    c0016559 <Vm::faultHandler(regs*)+0x468>
c0016537:	66 ed                	in     ax,dx
c0016539:	0f b7 c0             	movzx  eax,ax
c001653c:	57                   	push   edi
c001653d:	50                   	push   eax
c001653e:	51                   	push   ecx
c001653f:	56                   	push   esi
c0016540:	e8 81 fb ff ff       	call   c00160c6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016545:	83 c4 10             	add    esp,0x10
c0016548:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001654b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001654f:	74 05                	je     c0016556 <Vm::faultHandler(regs*)+0x465>
c0016551:	83 e8 02             	sub    eax,0x2
c0016554:	eb 03                	jmp    c0016559 <Vm::faultHandler(regs*)+0x468>
c0016556:	83 c0 02             	add    eax,0x2
c0016559:	25 ff ff 00 00       	and    eax,0xffff
c001655e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016561:	e9 20 02 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c0016566:	8d 46 ff             	lea    eax,[esi-0x1]
c0016569:	0f b6 f0             	movzx  esi,al
c001656c:	83 fe 05             	cmp    esi,0x5
c001656f:	77 23                	ja     c0016594 <Vm::faultHandler(regs*)+0x4a3>
c0016571:	ff 24 b5 40 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecc0]
c0016578:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001657d:	eb 15                	jmp    c0016594 <Vm::faultHandler(regs*)+0x4a3>
c001657f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016583:	eb 0f                	jmp    c0016594 <Vm::faultHandler(regs*)+0x4a3>
c0016585:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016589:	eb 09                	jmp    c0016594 <Vm::faultHandler(regs*)+0x4a3>
c001658b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001658f:	eb 03                	jmp    c0016594 <Vm::faultHandler(regs*)+0x4a3>
c0016591:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016594:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016597:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001659c:	74 29                	je     c00165c7 <Vm::faultHandler(regs*)+0x4d6>
c001659e:	3d ff ff 00 00       	cmp    eax,0xffff
c00165a3:	76 22                	jbe    c00165c7 <Vm::faultHandler(regs*)+0x4d6>
c00165a5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165a9:	50                   	push   eax
c00165aa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165ae:	50                   	push   eax
c00165af:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165b3:	50                   	push   eax
c00165b4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165b8:	50                   	push   eax
c00165b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165bd:	50                   	push   eax
c00165be:	6a 6e                	push   0x6e
c00165c0:	6a 6e                	push   0x6e
c00165c2:	e9 8f 00 00 00       	jmp    c0016656 <Vm::faultHandler(regs*)+0x565>
c00165c7:	0f b7 c0             	movzx  eax,ax
c00165ca:	52                   	push   edx
c00165cb:	52                   	push   edx
c00165cc:	50                   	push   eax
c00165cd:	57                   	push   edi
c00165ce:	e8 aa fa ff ff       	call   c001607d <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165d3:	59                   	pop    ecx
c00165d4:	0f b6 c0             	movzx  eax,al
c00165d7:	5e                   	pop    esi
c00165d8:	50                   	push   eax
c00165d9:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165dd:	50                   	push   eax
c00165de:	e8 3d f6 ff ff       	call   c0015c20 <Vm::outbv(unsigned short, unsigned char)>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165e9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165ed:	74 03                	je     c00165f2 <Vm::faultHandler(regs*)+0x501>
c00165ef:	48                   	dec    eax
c00165f0:	eb 01                	jmp    c00165f3 <Vm::faultHandler(regs*)+0x502>
c00165f2:	40                   	inc    eax
c00165f3:	0f b7 c0             	movzx  eax,ax
c00165f6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00165f9:	e9 88 01 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c00165fe:	8d 46 ff             	lea    eax,[esi-0x1]
c0016601:	0f b6 f0             	movzx  esi,al
c0016604:	83 fe 05             	cmp    esi,0x5
c0016607:	77 1e                	ja     c0016627 <Vm::faultHandler(regs*)+0x536>
c0016609:	ff 24 b5 58 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdeca8]
c0016610:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016614:	eb 11                	jmp    c0016627 <Vm::faultHandler(regs*)+0x536>
c0016616:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016619:	eb 0c                	jmp    c0016627 <Vm::faultHandler(regs*)+0x536>
c001661b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001661e:	eb 07                	jmp    c0016627 <Vm::faultHandler(regs*)+0x536>
c0016620:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016623:	eb 02                	jmp    c0016627 <Vm::faultHandler(regs*)+0x536>
c0016625:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016627:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001662a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001662f:	74 37                	je     c0016668 <Vm::faultHandler(regs*)+0x577>
c0016631:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016637:	76 2f                	jbe    c0016668 <Vm::faultHandler(regs*)+0x577>
c0016639:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001663d:	50                   	push   eax
c001663e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016642:	50                   	push   eax
c0016643:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016647:	50                   	push   eax
c0016648:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001664c:	50                   	push   eax
c001664d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016651:	50                   	push   eax
c0016652:	6a 6f                	push   0x6f
c0016654:	6a 6f                	push   0x6f
c0016656:	68 e6 12 02 c0       	push   0xc00212e6
c001665b:	e8 36 43 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016660:	83 c4 20             	add    esp,0x20
c0016663:	e9 83 01 00 00       	jmp    c00167eb <Vm::faultHandler(regs*)+0x6fa>
c0016668:	0f b7 d7             	movzx  edx,di
c001666b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001666e:	0f b7 c6             	movzx  eax,si
c0016671:	81 e1 00 04 00 00    	and    ecx,0x400
c0016677:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001667a:	83 e5 01             	and    ebp,0x1
c001667d:	74 1d                	je     c001669c <Vm::faultHandler(regs*)+0x5ab>
c001667f:	55                   	push   ebp
c0016680:	55                   	push   ebp
c0016681:	50                   	push   eax
c0016682:	52                   	push   edx
c0016683:	e8 18 fa ff ff       	call   c00160a0 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016688:	83 c4 10             	add    esp,0x10
c001668b:	89 fa                	mov    edx,edi
c001668d:	ef                   	out    dx,eax
c001668e:	85 c9                	test   ecx,ecx
c0016690:	74 05                	je     c0016697 <Vm::faultHandler(regs*)+0x5a6>
c0016692:	83 ee 04             	sub    esi,0x4
c0016695:	eb 21                	jmp    c00166b8 <Vm::faultHandler(regs*)+0x5c7>
c0016697:	83 c6 04             	add    esi,0x4
c001669a:	eb 1c                	jmp    c00166b8 <Vm::faultHandler(regs*)+0x5c7>
c001669c:	55                   	push   ebp
c001669d:	55                   	push   ebp
c001669e:	50                   	push   eax
c001669f:	52                   	push   edx
c00166a0:	e8 e9 f9 ff ff       	call   c001608e <Vm::readWordFromReal(unsigned short, unsigned short)>
c00166a5:	83 c4 10             	add    esp,0x10
c00166a8:	89 fa                	mov    edx,edi
c00166aa:	66 ef                	out    dx,ax
c00166ac:	85 c9                	test   ecx,ecx
c00166ae:	74 05                	je     c00166b5 <Vm::faultHandler(regs*)+0x5c4>
c00166b0:	83 ee 02             	sub    esi,0x2
c00166b3:	eb 03                	jmp    c00166b8 <Vm::faultHandler(regs*)+0x5c7>
c00166b5:	83 c6 02             	add    esi,0x2
c00166b8:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166be:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166c1:	e9 c0 00 00 00       	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c00166c6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166cd:	83 ec 0c             	sub    esp,0xc
c00166d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166d4:	50                   	push   eax
c00166d5:	e8 33 f5 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00166da:	0f b6 c0             	movzx  eax,al
c00166dd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166e0:	eb 3a                	jmp    c001671c <Vm::faultHandler(regs*)+0x62b>
c00166e2:	83 e5 01             	and    ebp,0x1
c00166e5:	74 07                	je     c00166ee <Vm::faultHandler(regs*)+0x5fd>
c00166e7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166eb:	ed                   	in     eax,dx
c00166ec:	eb 14                	jmp    c0016702 <Vm::faultHandler(regs*)+0x611>
c00166ee:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00166f1:	66 31 f6             	xor    si,si
c00166f4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00166f7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166fb:	66 ed                	in     ax,dx
c00166fd:	0f b7 c0             	movzx  eax,ax
c0016700:	09 f0                	or     eax,esi
c0016702:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016705:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016709:	eb 7e                	jmp    c0016789 <Vm::faultHandler(regs*)+0x698>
c001670b:	52                   	push   edx
c001670c:	52                   	push   edx
c001670d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016711:	50                   	push   eax
c0016712:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016716:	50                   	push   eax
c0016717:	e8 04 f5 ff ff       	call   c0015c20 <Vm::outbv(unsigned short, unsigned char)>
c001671c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016720:	eb 4f                	jmp    c0016771 <Vm::faultHandler(regs*)+0x680>
c0016722:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016725:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016729:	83 e5 01             	and    ebp,0x1
c001672c:	74 03                	je     c0016731 <Vm::faultHandler(regs*)+0x640>
c001672e:	ef                   	out    dx,eax
c001672f:	eb d4                	jmp    c0016705 <Vm::faultHandler(regs*)+0x614>
c0016731:	66 ef                	out    dx,ax
c0016733:	eb d0                	jmp    c0016705 <Vm::faultHandler(regs*)+0x614>
c0016735:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001673c:	83 ec 0c             	sub    esp,0xc
c001673f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016743:	50                   	push   eax
c0016744:	e8 c4 f4 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c0016749:	0f b6 c0             	movzx  eax,al
c001674c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001674f:	eb 1d                	jmp    c001676e <Vm::faultHandler(regs*)+0x67d>
c0016751:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016754:	83 e5 01             	and    ebp,0x1
c0016757:	74 03                	je     c001675c <Vm::faultHandler(regs*)+0x66b>
c0016759:	ed                   	in     eax,dx
c001675a:	eb 0d                	jmp    c0016769 <Vm::faultHandler(regs*)+0x678>
c001675c:	66 ed                	in     ax,dx
c001675e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016761:	0f b7 c0             	movzx  eax,ax
c0016764:	66 31 d2             	xor    dx,dx
c0016767:	09 d0                	or     eax,edx
c0016769:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001676c:	eb 18                	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c001676e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016771:	83 c4 10             	add    esp,0x10
c0016774:	eb 13                	jmp    c0016789 <Vm::faultHandler(regs*)+0x698>
c0016776:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016779:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001677c:	83 e5 01             	and    ebp,0x1
c001677f:	74 03                	je     c0016784 <Vm::faultHandler(regs*)+0x693>
c0016781:	ef                   	out    dx,eax
c0016782:	eb 02                	jmp    c0016786 <Vm::faultHandler(regs*)+0x695>
c0016784:	66 ef                	out    dx,ax
c0016786:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016789:	b0 01                	mov    al,0x1
c001678b:	eb 60                	jmp    c00167ed <Vm::faultHandler(regs*)+0x6fc>
c001678d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016791:	50                   	push   eax
c0016792:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016796:	50                   	push   eax
c0016797:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001679b:	50                   	push   eax
c001679c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167a0:	50                   	push   eax
c00167a1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167a5:	50                   	push   eax
c00167a6:	52                   	push   edx
c00167a7:	52                   	push   edx
c00167a8:	68 13 13 02 c0       	push   0xc0021313
c00167ad:	e8 e4 41 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00167b2:	83 c4 20             	add    esp,0x20
c00167b5:	83 ec 0c             	sub    esp,0xc
c00167b8:	6a 60                	push   0x60
c00167ba:	e8 4e f4 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00167bf:	83 c4 10             	add    esp,0x10
c00167c2:	0f b6 d0             	movzx  edx,al
c00167c5:	83 fa 1c             	cmp    edx,0x1c
c00167c8:	74 05                	je     c00167cf <Vm::faultHandler(regs*)+0x6de>
c00167ca:	83 fa 5a             	cmp    edx,0x5a
c00167cd:	75 e6                	jne    c00167b5 <Vm::faultHandler(regs*)+0x6c4>
c00167cf:	0f b6 c0             	movzx  eax,al
c00167d2:	83 f8 1c             	cmp    eax,0x1c
c00167d5:	74 05                	je     c00167dc <Vm::faultHandler(regs*)+0x6eb>
c00167d7:	83 f8 5a             	cmp    eax,0x5a
c00167da:	75 0f                	jne    c00167eb <Vm::faultHandler(regs*)+0x6fa>
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	6a 60                	push   0x60
c00167e1:	e8 27 f4 ff ff       	call   c0015c0d <Vm::inbv(unsigned short)>
c00167e6:	83 c4 10             	add    esp,0x10
c00167e9:	eb e4                	jmp    c00167cf <Vm::faultHandler(regs*)+0x6de>
c00167eb:	31 c0                	xor    eax,eax
c00167ed:	83 c4 2c             	add    esp,0x2c
c00167f0:	5b                   	pop    ebx
c00167f1:	5e                   	pop    esi
c00167f2:	5f                   	pop    edi
c00167f3:	5d                   	pop    ebp
c00167f4:	c3                   	ret    

c00167f5 <noCopro(unsigned long)>:
c00167f5:	c3                   	ret    

c00167f6 <nmiHandler(regs*, void*)>:
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00167fe:	83 ec 0c             	sub    esp,0xc
c0016801:	50                   	push   eax
c0016802:	e8 a7 0a ff ff       	call   c00072ae <Computer::handleNMI()>
c0016807:	83 c4 10             	add    esp,0x10
c001680a:	90                   	nop
c001680b:	83 c4 0c             	add    esp,0xc
c001680e:	c3                   	ret    

c001680f <doubleFault(regs*, void*)>:
c001680f:	55                   	push   ebp
c0016810:	89 e5                	mov    ebp,esp
c0016812:	83 ec 08             	sub    esp,0x8
c0016815:	83 ec 0c             	sub    esp,0xc
c0016818:	68 70 13 02 c0       	push   0xc0021370
c001681d:	e8 51 a0 ff ff       	call   c0010873 <KePanic(char const*)>
c0016822:	83 c4 10             	add    esp,0x10
c0016825:	90                   	nop
c0016826:	c9                   	leave  
c0016827:	c3                   	ret    

c0016828 <displayDebugInfo(regs*)>:
c0016828:	83 ec 1c             	sub    esp,0x1c
c001682b:	0f 20 c0             	mov    eax,cr0
c001682e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016832:	0f 20 d0             	mov    eax,cr2
c0016835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016839:	0f 20 d8             	mov    eax,cr3
c001683c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016840:	0f 20 e0             	mov    eax,cr4
c0016843:	89 04 24             	mov    DWORD PTR [esp],eax
c0016846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001684d:	83 ec 08             	sub    esp,0x8
c0016850:	50                   	push   eax
c0016851:	68 8c 13 02 c0       	push   0xc002138c
c0016856:	e8 3b 41 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016862:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016865:	83 ec 08             	sub    esp,0x8
c0016868:	50                   	push   eax
c0016869:	68 7d 13 02 c0       	push   0xc002137d
c001686e:	e8 23 41 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001687d:	83 ec 08             	sub    esp,0x8
c0016880:	50                   	push   eax
c0016881:	68 88 13 02 c0       	push   0xc0021388
c0016886:	e8 0b 41 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016892:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016895:	83 ec 08             	sub    esp,0x8
c0016898:	50                   	push   eax
c0016899:	68 97 13 02 c0       	push   0xc0021397
c001689e:	e8 f3 40 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00168a3:	83 c4 10             	add    esp,0x10
c00168a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168aa:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00168ad:	83 ec 08             	sub    esp,0x8
c00168b0:	50                   	push   eax
c00168b1:	68 a2 13 02 c0       	push   0xc00213a2
c00168b6:	e8 db 40 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	83 ec 08             	sub    esp,0x8
c00168c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168c5:	68 ad 13 02 c0       	push   0xc00213ad
c00168ca:	e8 c7 40 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00168cf:	83 c4 10             	add    esp,0x10
c00168d2:	83 ec 08             	sub    esp,0x8
c00168d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168d9:	68 b8 13 02 c0       	push   0xc00213b8
c00168de:	e8 b3 40 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00168e3:	83 c4 10             	add    esp,0x10
c00168e6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f1:	83 ec 0c             	sub    esp,0xc
c00168f4:	50                   	push   eax
c00168f5:	e8 49 1e ff ff       	call   c0008743 <setActiveTerminal(VgaText*)>
c00168fa:	83 c4 10             	add    esp,0x10
c00168fd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016902:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016908:	83 ec 08             	sub    esp,0x8
c001690b:	68 c3 13 02 c0       	push   0xc00213c3
c0016910:	50                   	push   eax
c0016911:	e8 7a 21 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016916:	83 c4 10             	add    esp,0x10
c0016919:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001691e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016924:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016928:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001692b:	83 ec 08             	sub    esp,0x8
c001692e:	52                   	push   edx
c001692f:	50                   	push   eax
c0016930:	e8 15 21 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016935:	83 c4 10             	add    esp,0x10
c0016938:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001693d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016943:	83 ec 08             	sub    esp,0x8
c0016946:	68 d1 13 02 c0       	push   0xc00213d1
c001694b:	50                   	push   eax
c001694c:	e8 3f 21 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016951:	83 c4 10             	add    esp,0x10
c0016954:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016959:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001695f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016964:	8b 12                	mov    edx,DWORD PTR [edx]
c0016966:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016969:	83 c2 0c             	add    edx,0xc
c001696c:	83 ec 08             	sub    esp,0x8
c001696f:	52                   	push   edx
c0016970:	50                   	push   eax
c0016971:	e8 1a 21 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016976:	83 c4 10             	add    esp,0x10
c0016979:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001697e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016984:	83 ec 08             	sub    esp,0x8
c0016987:	68 da 13 02 c0       	push   0xc00213da
c001698c:	50                   	push   eax
c001698d:	e8 fe 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016992:	83 c4 10             	add    esp,0x10
c0016995:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169a4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00169a7:	83 ec 08             	sub    esp,0x8
c00169aa:	52                   	push   edx
c00169ab:	50                   	push   eax
c00169ac:	e8 99 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169bf:	83 ec 08             	sub    esp,0x8
c00169c2:	68 e2 13 02 c0       	push   0xc00213e2
c00169c7:	50                   	push   eax
c00169c8:	e8 c3 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c00169cd:	83 c4 10             	add    esp,0x10
c00169d0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169df:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00169e2:	83 ec 08             	sub    esp,0x8
c00169e5:	52                   	push   edx
c00169e6:	50                   	push   eax
c00169e7:	e8 5e 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169fa:	83 ec 08             	sub    esp,0x8
c00169fd:	68 ea 13 02 c0       	push   0xc00213ea
c0016a02:	50                   	push   eax
c0016a03:	e8 88 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a1a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a1d:	83 ec 08             	sub    esp,0x8
c0016a20:	52                   	push   edx
c0016a21:	50                   	push   eax
c0016a22:	e8 23 20 ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a35:	83 ec 08             	sub    esp,0x8
c0016a38:	68 f2 13 02 c0       	push   0xc00213f2
c0016a3d:	50                   	push   eax
c0016a3e:	e8 4d 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a43:	83 c4 10             	add    esp,0x10
c0016a46:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a55:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a58:	83 ec 08             	sub    esp,0x8
c0016a5b:	52                   	push   edx
c0016a5c:	50                   	push   eax
c0016a5d:	e8 e8 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a70:	83 ec 08             	sub    esp,0x8
c0016a73:	68 fa 13 02 c0       	push   0xc00213fa
c0016a78:	50                   	push   eax
c0016a79:	e8 12 20 ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016a7e:	83 c4 10             	add    esp,0x10
c0016a81:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a90:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a93:	83 ec 08             	sub    esp,0x8
c0016a96:	52                   	push   edx
c0016a97:	50                   	push   eax
c0016a98:	e8 ad 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016a9d:	83 c4 10             	add    esp,0x10
c0016aa0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aab:	83 ec 08             	sub    esp,0x8
c0016aae:	68 02 14 02 c0       	push   0xc0021402
c0016ab3:	50                   	push   eax
c0016ab4:	e8 d7 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016ab9:	83 c4 10             	add    esp,0x10
c0016abc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ac7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016acb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016ace:	83 ec 08             	sub    esp,0x8
c0016ad1:	52                   	push   edx
c0016ad2:	50                   	push   eax
c0016ad3:	e8 72 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016ad8:	83 c4 10             	add    esp,0x10
c0016adb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ae6:	83 ec 08             	sub    esp,0x8
c0016ae9:	68 0a 14 02 c0       	push   0xc002140a
c0016aee:	50                   	push   eax
c0016aef:	e8 9c 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016af4:	83 c4 10             	add    esp,0x10
c0016af7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016afc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b02:	83 ec 08             	sub    esp,0x8
c0016b05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b09:	50                   	push   eax
c0016b0a:	e8 3b 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b1d:	83 ec 08             	sub    esp,0x8
c0016b20:	68 13 14 02 c0       	push   0xc0021413
c0016b25:	50                   	push   eax
c0016b26:	e8 65 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b2b:	83 c4 10             	add    esp,0x10
c0016b2e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b39:	83 ec 08             	sub    esp,0x8
c0016b3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b40:	50                   	push   eax
c0016b41:	e8 04 1f ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b46:	83 c4 10             	add    esp,0x10
c0016b49:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b54:	83 ec 08             	sub    esp,0x8
c0016b57:	68 1b 14 02 c0       	push   0xc002141b
c0016b5c:	50                   	push   eax
c0016b5d:	e8 2e 1f ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016b62:	83 c4 10             	add    esp,0x10
c0016b65:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b70:	83 ec 08             	sub    esp,0x8
c0016b73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b77:	50                   	push   eax
c0016b78:	e8 cd 1e ff ff       	call   c0008a4a <VgaText::putx(unsigned int)>
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	fa                   	cli    
c0016b81:	f4                   	hlt    
c0016b82:	eb fe                	jmp    c0016b82 <displayDebugInfo(regs*)+0x35a>

c0016b84 <HalSystemIdle()>:
c0016b84:	56                   	push   esi
c0016b85:	53                   	push   ebx
c0016b86:	83 ec 14             	sub    esp,0x14
c0016b89:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b94:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b9a:	83 e0 04             	and    eax,0x4
c0016b9d:	0f b6 c0             	movzx  eax,al
c0016ba0:	85 c0                	test   eax,eax
c0016ba2:	0f 95 c0             	setne  al
c0016ba5:	0f b6 c0             	movzx  eax,al
c0016ba8:	85 c0                	test   eax,eax
c0016baa:	74 4c                	je     c0016bf8 <HalSystemIdle()+0x74>
c0016bac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bb1:	83 ec 08             	sub    esp,0x8
c0016bb4:	68 e1 00 00 00       	push   0xe1
c0016bb9:	50                   	push   eax
c0016bba:	e8 f9 04 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bca:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bd3:	83 e2 02             	and    edx,0x2
c0016bd6:	89 d3                	mov    ebx,edx
c0016bd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bdc:	83 e2 00             	and    edx,0x0
c0016bdf:	89 d6                	mov    esi,edx
c0016be1:	56                   	push   esi
c0016be2:	53                   	push   ebx
c0016be3:	68 e1 00 00 00       	push   0xe1
c0016be8:	50                   	push   eax
c0016be9:	e8 f6 04 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016bee:	83 c4 10             	add    esp,0x10
c0016bf1:	e8 9e 95 fe ff       	call   c0000194 <doTPAUSE>
c0016bf6:	eb 01                	jmp    c0016bf9 <HalSystemIdle()+0x75>
c0016bf8:	f4                   	hlt    
c0016bf9:	90                   	nop
c0016bfa:	83 c4 14             	add    esp,0x14
c0016bfd:	5b                   	pop    ebx
c0016bfe:	5e                   	pop    esi
c0016bff:	c3                   	ret    

c0016c00 <displayProgramFault(char const*)>:
c0016c00:	83 ec 0c             	sub    esp,0xc
c0016c03:	83 ec 0c             	sub    esp,0xc
c0016c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0a:	e8 87 3d ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c19:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c22:	85 c0                	test   eax,eax
c0016c24:	74 21                	je     c0016c47 <displayProgramFault(char const*)+0x47>
c0016c26:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c36:	6a 04                	push   0x4
c0016c38:	6a 0f                	push   0xf
c0016c3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c3e:	50                   	push   eax
c0016c3f:	e8 be 1e ff ff       	call   c0008b02 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c44:	83 c4 10             	add    esp,0x10
c0016c47:	90                   	nop
c0016c48:	83 c4 0c             	add    esp,0xc
c0016c4b:	c3                   	ret    

c0016c4c <gpFault(regs*, void*)>:
c0016c4c:	83 ec 1c             	sub    esp,0x1c
c0016c4f:	c7 05 10 82 02 c0 f1 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00160f1
c0016c59:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c5e:	85 c0                	test   eax,eax
c0016c60:	74 1e                	je     c0016c80 <gpFault(regs*, void*)+0x34>
c0016c62:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c67:	83 ec 0c             	sub    esp,0xc
c0016c6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c6e:	ff d0                	call   eax
c0016c70:	83 c4 10             	add    esp,0x10
c0016c73:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c77:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c7c:	85 c0                	test   eax,eax
c0016c7e:	75 2e                	jne    c0016cae <gpFault(regs*, void*)+0x62>
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	68 23 14 02 c0       	push   0xc0021423
c0016c88:	e8 73 ff ff ff       	call   c0016c00 <displayProgramFault(char const*)>
c0016c8d:	83 c4 10             	add    esp,0x10
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c97:	e8 8c fb ff ff       	call   c0016828 <displayDebugInfo(regs*)>
c0016c9c:	83 c4 10             	add    esp,0x10
c0016c9f:	83 ec 0c             	sub    esp,0xc
c0016ca2:	6a 00                	push   0x0
c0016ca4:	e8 0b ee ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016ca9:	83 c4 10             	add    esp,0x10
c0016cac:	eb 01                	jmp    c0016caf <gpFault(regs*, void*)+0x63>
c0016cae:	90                   	nop
c0016caf:	83 c4 1c             	add    esp,0x1c
c0016cb2:	c3                   	ret    

c0016cb3 <pgFault(regs*, void*)>:
c0016cb3:	83 ec 1c             	sub    esp,0x1c
c0016cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cba:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016cbd:	0f 20 d0             	mov    eax,cr2
c0016cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cc8:	83 ec 04             	sub    esp,0x4
c0016ccb:	52                   	push   edx
c0016ccc:	50                   	push   eax
c0016ccd:	68 00 15 02 c0       	push   0xc0021500
c0016cd2:	e8 bf 3c ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ce1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ce4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016cea:	0f 20 d2             	mov    edx,cr2
c0016ced:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cf1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cf5:	83 ec 08             	sub    esp,0x8
c0016cf8:	52                   	push   edx
c0016cf9:	50                   	push   eax
c0016cfa:	e8 43 38 ff ff       	call   c000a542 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	0f b6 c0             	movzx  eax,al
c0016d05:	85 c0                	test   eax,eax
c0016d07:	75 2e                	jne    c0016d37 <pgFault(regs*, void*)+0x84>
c0016d09:	83 ec 0c             	sub    esp,0xc
c0016d0c:	68 3c 14 02 c0       	push   0xc002143c
c0016d11:	e8 ea fe ff ff       	call   c0016c00 <displayProgramFault(char const*)>
c0016d16:	83 c4 10             	add    esp,0x10
c0016d19:	83 ec 0c             	sub    esp,0xc
c0016d1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d20:	e8 03 fb ff ff       	call   c0016828 <displayDebugInfo(regs*)>
c0016d25:	83 c4 10             	add    esp,0x10
c0016d28:	83 ec 0c             	sub    esp,0xc
c0016d2b:	6a 00                	push   0x0
c0016d2d:	e8 82 ed ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016d32:	83 c4 10             	add    esp,0x10
c0016d35:	eb 01                	jmp    c0016d38 <pgFault(regs*, void*)+0x85>
c0016d37:	90                   	nop
c0016d38:	83 c4 1c             	add    esp,0x1c
c0016d3b:	c3                   	ret    

c0016d3c <otherISRHandler(regs*, void*)>:
c0016d3c:	83 ec 0c             	sub    esp,0xc
c0016d3f:	83 ec 0c             	sub    esp,0xc
c0016d42:	68 28 15 02 c0       	push   0xc0021528
c0016d47:	e8 b4 fe ff ff       	call   c0016c00 <displayProgramFault(char const*)>
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	83 ec 0c             	sub    esp,0xc
c0016d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d56:	e8 cd fa ff ff       	call   c0016828 <displayDebugInfo(regs*)>
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	83 ec 0c             	sub    esp,0xc
c0016d61:	6a 00                	push   0x0
c0016d63:	e8 4c ed ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016d68:	83 c4 10             	add    esp,0x10
c0016d6b:	90                   	nop
c0016d6c:	83 c4 0c             	add    esp,0xc
c0016d6f:	c3                   	ret    

c0016d70 <opcodeFault(regs*, void*)>:
c0016d70:	55                   	push   ebp
c0016d71:	89 e5                	mov    ebp,esp
c0016d73:	83 ec 08             	sub    esp,0x8
c0016d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d79:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d7c:	83 ec 08             	sub    esp,0x8
c0016d7f:	50                   	push   eax
c0016d80:	68 47 14 02 c0       	push   0xc0021447
c0016d85:	e8 0c 3c ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d98:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016d9e:	0f b6 c0             	movzx  eax,al
c0016da1:	85 c0                	test   eax,eax
c0016da3:	74 21                	je     c0016dc6 <opcodeFault(regs*, void*)+0x56>
c0016da5:	83 ec 0c             	sub    esp,0xc
c0016da8:	68 50 15 02 c0       	push   0xc0021550
c0016dad:	e8 e4 3b ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016db2:	83 c4 10             	add    esp,0x10
c0016db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016db8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016dbb:	8d 50 19             	lea    edx,[eax+0x19]
c0016dbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dc1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016dc4:	eb 2b                	jmp    c0016df1 <opcodeFault(regs*, void*)+0x81>
c0016dc6:	83 ec 0c             	sub    esp,0xc
c0016dc9:	68 55 14 02 c0       	push   0xc0021455
c0016dce:	e8 2d fe ff ff       	call   c0016c00 <displayProgramFault(char const*)>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016ddc:	e8 47 fa ff ff       	call   c0016828 <displayDebugInfo(regs*)>
c0016de1:	83 c4 10             	add    esp,0x10
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	6a 00                	push   0x0
c0016de9:	e8 c6 ec ff ff       	call   c0015ab4 <Thr::terminateFromIRQ(int)>
c0016dee:	83 c4 10             	add    esp,0x10
c0016df1:	c9                   	leave  
c0016df2:	c3                   	ret    

c0016df3 <i386SaveCoprocessor(void*)>:
c0016df3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df7:	83 c0 3f             	add    eax,0x3f
c0016dfa:	83 e0 c0             	and    eax,0xffffffc0
c0016dfd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e01:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e07 <i386LoadCoprocessor(void*)>:
c0016e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e0b:	83 c0 3f             	add    eax,0x3f
c0016e0e:	83 e0 c0             	and    eax,0xffffffc0
c0016e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e15:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016e1b <x87EmulHandler(regs*, void*)>:
c0016e1b:	53                   	push   ebx
c0016e1c:	83 ec 08             	sub    esp,0x8
c0016e1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e24:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e28:	74 10                	je     c0016e3a <x87EmulHandler(regs*, void*)+0x1f>
c0016e2a:	83 ec 0c             	sub    esp,0xc
c0016e2d:	68 62 14 02 c0       	push   0xc0021462
c0016e32:	e8 3c 9a ff ff       	call   c0010873 <KePanic(char const*)>
c0016e37:	83 c4 10             	add    esp,0x10
c0016e3a:	0f 20 c0             	mov    eax,cr0
c0016e3d:	a8 08                	test   al,0x8
c0016e3f:	74 59                	je     c0016e9a <x87EmulHandler(regs*, void*)+0x7f>
c0016e41:	0f 06                	clts   
c0016e43:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e48:	85 c0                	test   eax,eax
c0016e4a:	74 0e                	je     c0016e5a <x87EmulHandler(regs*, void*)+0x3f>
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e52:	e8 9c ff ff ff       	call   c0016df3 <i386SaveCoprocessor(void*)>
c0016e57:	83 c4 10             	add    esp,0x10
c0016e5a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e60:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e64:	75 12                	jne    c0016e78 <x87EmulHandler(regs*, void*)+0x5d>
c0016e66:	83 ec 0c             	sub    esp,0xc
c0016e69:	68 40 02 00 00       	push   0x240
c0016e6e:	e8 3b 0c ff ff       	call   c0007aae <malloc>
c0016e73:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e76:	eb 10                	jmp    c0016e88 <x87EmulHandler(regs*, void*)+0x6d>
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e80:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e83:	e8 7f ff ff ff       	call   c0016e07 <i386LoadCoprocessor(void*)>
c0016e88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e8d:	83 c4 10             	add    esp,0x10
c0016e90:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016e95:	83 c4 08             	add    esp,0x8
c0016e98:	5b                   	pop    ebx
c0016e99:	c3                   	ret    
c0016e9a:	83 ec 0c             	sub    esp,0xc
c0016e9d:	68 76 14 02 c0       	push   0xc0021476
c0016ea2:	e8 ef 3a ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016ea7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016eaf:	83 c4 18             	add    esp,0x18
c0016eb2:	5b                   	pop    ebx
c0016eb3:	e9 fc eb ff ff       	jmp    c0015ab4 <Thr::terminateFromIRQ(int)>

c0016eb8 <HalInitialiseCoprocessor()>:
c0016eb8:	83 ec 10             	sub    esp,0x10
c0016ebb:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016ec5:	6a 00                	push   0x0
c0016ec7:	68 1b 6e 01 c0       	push   0xc0016e1b
c0016ecc:	6a 07                	push   0x7
c0016ece:	e8 2b 54 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ed3:	e8 c8 6f 00 00       	call   c001dea0 <avxDetect>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	85 c0                	test   eax,eax
c0016edd:	74 1c                	je     c0016efb <HalInitialiseCoprocessor()+0x43>
c0016edf:	c7 05 0c 82 02 c0 ca de 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001deca
c0016ee9:	c7 05 08 82 02 c0 db de 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dedb
c0016ef3:	83 c4 0c             	add    esp,0xc
c0016ef6:	e9 f1 6f 00 00       	jmp    c001deec <avxInit>
c0016efb:	e8 30 73 00 00       	call   c001e230 <absolutelyNoChanceInHell>
c0016f00:	85 c0                	test   eax,eax
c0016f02:	74 1c                	je     c0016f20 <HalInitialiseCoprocessor()+0x68>
c0016f04:	c7 05 0c 82 02 c0 48 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e248
c0016f0e:	c7 05 08 82 02 c0 50 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e250
c0016f18:	83 c4 0c             	add    esp,0xc
c0016f1b:	e9 38 73 00 00       	jmp    c001e258 <sseInit>
c0016f20:	e8 51 73 00 00       	call   c001e276 <x87Detect>
c0016f25:	85 c0                	test   eax,eax
c0016f27:	74 1c                	je     c0016f45 <HalInitialiseCoprocessor()+0x8d>
c0016f29:	c7 05 0c 82 02 c0 91 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e291
c0016f33:	c7 05 08 82 02 c0 98 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e298
c0016f3d:	83 c4 0c             	add    esp,0xc
c0016f40:	e9 5a 73 00 00       	jmp    c001e29f <x87Init>
c0016f45:	c7 05 0c 82 02 c0 f5 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00167f5
c0016f4f:	c7 05 08 82 02 c0 f5 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc00167f5
c0016f59:	0f 20 c0             	mov    eax,cr0
c0016f5c:	83 c8 04             	or     eax,0x4
c0016f5f:	0f 22 c0             	mov    cr0,eax
c0016f62:	83 c4 0c             	add    esp,0xc
c0016f65:	c3                   	ret    

c0016f66 <HalPanic(char const*)>:
c0016f66:	53                   	push   ebx
c0016f67:	83 ec 10             	sub    esp,0x10
c0016f6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f6e:	fa                   	cli    
c0016f6f:	53                   	push   ebx
c0016f70:	68 8c 14 02 c0       	push   0xc002148c
c0016f75:	e8 1c 3a ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0016f7a:	83 c4 0c             	add    esp,0xc
c0016f7d:	6a 01                	push   0x1
c0016f7f:	6a 0f                	push   0xf
c0016f81:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f87:	e8 12 16 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f8c:	58                   	pop    eax
c0016f8d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f93:	e8 f6 17 ff ff       	call   c000878e <VgaText::clearScreen()>
c0016f98:	5a                   	pop    edx
c0016f99:	59                   	pop    ecx
c0016f9a:	68 e4 fc 01 c0       	push   0xc001fce4
c0016f9f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fa5:	e8 2c 16 ff ff       	call   c00085d6 <VgaText::setTitle(char*)>
c0016faa:	83 c4 0c             	add    esp,0xc
c0016fad:	6a 01                	push   0x1
c0016faf:	6a 0f                	push   0xf
c0016fb1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fb7:	e8 e2 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fbc:	58                   	pop    eax
c0016fbd:	5a                   	pop    edx
c0016fbe:	68 a5 14 02 c0       	push   0xc00214a5
c0016fc3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc9:	e8 c2 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016fce:	83 c4 0c             	add    esp,0xc
c0016fd1:	6a 0f                	push   0xf
c0016fd3:	6a 01                	push   0x1
c0016fd5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fdb:	e8 be 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fe0:	59                   	pop    ecx
c0016fe1:	58                   	pop    eax
c0016fe2:	68 ae 14 02 c0       	push   0xc00214ae
c0016fe7:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fed:	e8 9e 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0016ff2:	83 c4 0c             	add    esp,0xc
c0016ff5:	6a 01                	push   0x1
c0016ff7:	6a 0f                	push   0xf
c0016ff9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fff:	e8 9a 15 ff ff       	call   c000859e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017004:	58                   	pop    eax
c0017005:	5a                   	pop    edx
c0017006:	68 f2 14 02 c0       	push   0xc00214f2
c001700b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017011:	e8 7a 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017016:	59                   	pop    ecx
c0017017:	58                   	pop    eax
c0017018:	68 bb 14 02 c0       	push   0xc00214bb
c001701d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017023:	e8 68 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017028:	58                   	pop    eax
c0017029:	5a                   	pop    edx
c001702a:	68 f5 14 02 c0       	push   0xc00214f5
c001702f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017035:	e8 56 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c001703a:	59                   	pop    ecx
c001703b:	58                   	pop    eax
c001703c:	53                   	push   ebx
c001703d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017043:	e8 48 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c0017048:	58                   	pop    eax
c0017049:	5a                   	pop    edx
c001704a:	68 f2 14 02 c0       	push   0xc00214f2
c001704f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017055:	e8 36 1a ff ff       	call   c0008a90 <VgaText::puts(char const*)>
c001705a:	83 c4 10             	add    esp,0x10
c001705d:	eb fe                	jmp    c001705d <HalPanic(char const*)+0xf7>

c001705f <HalQueryPerformanceCounter()>:
c001705f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017064:	31 d2                	xor    edx,edx
c0017066:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001706c:	31 c0                	xor    eax,eax
c001706e:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017075:	74 02                	je     c0017079 <HalQueryPerformanceCounter()+0x1a>
c0017077:	0f 31                	rdtsc  
c0017079:	c3                   	ret    

c001707a <HalInitialise()>:
c001707a:	53                   	push   ebx
c001707b:	83 ec 08             	sub    esp,0x8
c001707e:	e8 ab 54 ff ff       	call   c000c52e <setupINTS()>
c0017083:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c001708a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001708f:	75 0f                	jne    c00170a0 <HalInitialise()+0x26>
c0017091:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017097:	83 e2 fe             	and    edx,0xfffffffe
c001709a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170a0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170a6:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c00170ad:	83 e2 fe             	and    edx,0xfffffffe
c00170b0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170b6:	e8 a1 02 00 00       	call   c001735c <picOpen()>
c00170bb:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170c2:	74 0a                	je     c00170ce <HalInitialise()+0x54>
c00170c4:	e8 e3 01 00 00       	call   c00172ac <picDisable()>
c00170c9:	e8 40 67 00 00       	call   c001d80e <apicOpen()>
c00170ce:	bb 0f 00 00 00       	mov    ebx,0xf
c00170d3:	50                   	push   eax
c00170d4:	6a 00                	push   0x0
c00170d6:	68 3c 6d 01 c0       	push   0xc0016d3c
c00170db:	6a 00                	push   0x0
c00170dd:	e8 1c 52 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170e2:	83 c4 0c             	add    esp,0xc
c00170e5:	6a 00                	push   0x0
c00170e7:	68 3c 6d 01 c0       	push   0xc0016d3c
c00170ec:	6a 01                	push   0x1
c00170ee:	e8 0b 52 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f3:	83 c4 0c             	add    esp,0xc
c00170f6:	6a 00                	push   0x0
c00170f8:	68 f6 67 01 c0       	push   0xc00167f6
c00170fd:	6a 02                	push   0x2
c00170ff:	e8 fa 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017104:	83 c4 0c             	add    esp,0xc
c0017107:	6a 00                	push   0x0
c0017109:	68 3c 6d 01 c0       	push   0xc0016d3c
c001710e:	6a 03                	push   0x3
c0017110:	e8 e9 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017115:	83 c4 0c             	add    esp,0xc
c0017118:	6a 00                	push   0x0
c001711a:	68 3c 6d 01 c0       	push   0xc0016d3c
c001711f:	6a 04                	push   0x4
c0017121:	e8 d8 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017126:	83 c4 0c             	add    esp,0xc
c0017129:	6a 00                	push   0x0
c001712b:	68 3c 6d 01 c0       	push   0xc0016d3c
c0017130:	6a 05                	push   0x5
c0017132:	e8 c7 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017137:	83 c4 0c             	add    esp,0xc
c001713a:	6a 00                	push   0x0
c001713c:	68 70 6d 01 c0       	push   0xc0016d70
c0017141:	6a 06                	push   0x6
c0017143:	e8 b6 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017148:	83 c4 0c             	add    esp,0xc
c001714b:	6a 00                	push   0x0
c001714d:	68 0f 68 01 c0       	push   0xc001680f
c0017152:	6a 08                	push   0x8
c0017154:	e8 a5 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017159:	83 c4 0c             	add    esp,0xc
c001715c:	6a 00                	push   0x0
c001715e:	68 3c 6d 01 c0       	push   0xc0016d3c
c0017163:	6a 09                	push   0x9
c0017165:	e8 94 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c001716a:	83 c4 0c             	add    esp,0xc
c001716d:	6a 00                	push   0x0
c001716f:	68 3c 6d 01 c0       	push   0xc0016d3c
c0017174:	6a 0a                	push   0xa
c0017176:	e8 83 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c001717b:	83 c4 0c             	add    esp,0xc
c001717e:	6a 00                	push   0x0
c0017180:	68 3c 6d 01 c0       	push   0xc0016d3c
c0017185:	6a 0b                	push   0xb
c0017187:	e8 72 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c001718c:	83 c4 0c             	add    esp,0xc
c001718f:	6a 00                	push   0x0
c0017191:	68 4c 6c 01 c0       	push   0xc0016c4c
c0017196:	6a 0d                	push   0xd
c0017198:	e8 61 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c001719d:	83 c4 0c             	add    esp,0xc
c00171a0:	6a 00                	push   0x0
c00171a2:	68 b3 6c 01 c0       	push   0xc0016cb3
c00171a7:	6a 0e                	push   0xe
c00171a9:	e8 50 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171ae:	83 c4 10             	add    esp,0x10
c00171b1:	50                   	push   eax
c00171b2:	6a 00                	push   0x0
c00171b4:	68 3c 6d 01 c0       	push   0xc0016d3c
c00171b9:	53                   	push   ebx
c00171ba:	43                   	inc    ebx
c00171bb:	e8 3e 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171c0:	83 c4 10             	add    esp,0x10
c00171c3:	83 fb 1e             	cmp    ebx,0x1e
c00171c6:	75 e9                	jne    c00171b1 <HalInitialise()+0x137>
c00171c8:	50                   	push   eax
c00171c9:	6a 00                	push   0x0
c00171cb:	68 4e 1b 01 c0       	push   0xc0011b4e
c00171d0:	6a 60                	push   0x60
c00171d2:	e8 27 51 ff ff       	call   c000c2fe <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171d7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171dc:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00171e6:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00171ed:	e8 bc 08 ff ff       	call   c0007aae <malloc>
c00171f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00171f5:	89 c3                	mov    ebx,eax
c00171f7:	e8 3e 09 00 00       	call   c0017b3a <RTC::RTC()>
c00171fc:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017206:	5a                   	pop    edx
c0017207:	59                   	pop    ecx
c0017208:	53                   	push   ebx
c0017209:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001720f:	e8 b6 4b ff ff       	call   c000bdca <Device::addChild(Device*)>
c0017214:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017216:	6a 00                	push   0x0
c0017218:	6a 00                	push   0x0
c001721a:	6a 00                	push   0x0
c001721c:	53                   	push   ebx
c001721d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017220:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017225:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001722b:	83 c4 28             	add    esp,0x28
c001722e:	5b                   	pop    ebx
c001722f:	c3                   	ret    

c0017230 <HalMakeBeep(int)>:
c0017230:	53                   	push   ebx
c0017231:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017235:	85 db                	test   ebx,ebx
c0017237:	75 07                	jne    c0017240 <HalMakeBeep(int)+0x10>
c0017239:	e4 61                	in     al,0x61
c001723b:	83 e0 fc             	and    eax,0xfffffffc
c001723e:	eb 26                	jmp    c0017266 <HalMakeBeep(int)+0x36>
c0017240:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017245:	99                   	cdq    
c0017246:	f7 fb                	idiv   ebx
c0017248:	89 c1                	mov    ecx,eax
c001724a:	b0 b6                	mov    al,0xb6
c001724c:	e6 43                	out    0x43,al
c001724e:	88 c8                	mov    al,cl
c0017250:	e6 42                	out    0x42,al
c0017252:	89 c8                	mov    eax,ecx
c0017254:	c1 e8 08             	shr    eax,0x8
c0017257:	e6 42                	out    0x42,al
c0017259:	e4 61                	in     al,0x61
c001725b:	89 c2                	mov    edx,eax
c001725d:	83 ca 03             	or     edx,0x3
c0017260:	38 d0                	cmp    al,dl
c0017262:	74 04                	je     c0017268 <HalMakeBeep(int)+0x38>
c0017264:	88 d0                	mov    al,dl
c0017266:	e6 61                	out    0x61,al
c0017268:	5b                   	pop    ebx
c0017269:	c3                   	ret    

c001726a <HalGetRand()>:
c001726a:	31 c0                	xor    eax,eax
c001726c:	c3                   	ret    

c001726d <HalEndOfInterrupt(int)>:
c001726d:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017274:	74 23                	je     c0017299 <HalEndOfInterrupt(int)+0x2c>
c0017276:	83 ec 14             	sub    esp,0x14
c0017279:	6a 1b                	push   0x1b
c001727b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017281:	e8 32 fe fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0017286:	25 00 f0 ff ff       	and    eax,0xfffff000
c001728b:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017295:	83 c4 1c             	add    esp,0x1c
c0017298:	c3                   	ret    
c0017299:	e9 42 02 00 00       	jmp    c00174e0 <picEOI(int)>

c001729e <HalRestart()>:
c001729e:	c3                   	ret    

c001729f <HalShutdown()>:
c001729f:	c3                   	ret    

c00172a0 <HalSleep()>:
c00172a0:	c3                   	ret    
c00172a1:	66 90                	xchg   ax,ax
c00172a3:	90                   	nop

c00172a4 <picIoWait()>:
c00172a4:	eb 00                	jmp    c00172a6 <picIoWait()+0x2>
c00172a6:	eb 00                	jmp    c00172a8 <picIoWait()+0x4>
c00172a8:	90                   	nop
c00172a9:	c3                   	ret    
c00172aa:	66 90                	xchg   ax,ax

c00172ac <picDisable()>:
c00172ac:	83 ec 10             	sub    esp,0x10
c00172af:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00172b6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172c4:	ee                   	out    dx,al
c00172c5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172cc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00172d1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172d5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00172da:	ee                   	out    dx,al
c00172db:	90                   	nop
c00172dc:	83 c4 10             	add    esp,0x10
c00172df:	c3                   	ret    

c00172e0 <picGetIRQReg(int)>:
c00172e0:	83 ec 10             	sub    esp,0x10
c00172e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172e7:	0f b6 c0             	movzx  eax,al
c00172ea:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00172f1:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00172f5:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00172f9:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00172fe:	ee                   	out    dx,al
c00172ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017303:	0f b6 c0             	movzx  eax,al
c0017306:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001730d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017311:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017315:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001731a:	ee                   	out    dx,al
c001731b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017322:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017327:	89 c2                	mov    edx,eax
c0017329:	ec                   	in     al,dx
c001732a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001732e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017332:	0f b6 c0             	movzx  eax,al
c0017335:	c1 e0 08             	shl    eax,0x8
c0017338:	89 c1                	mov    ecx,eax
c001733a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017341:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017346:	89 c2                	mov    edx,eax
c0017348:	ec                   	in     al,dx
c0017349:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001734d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017351:	0f b6 c0             	movzx  eax,al
c0017354:	09 c8                	or     eax,ecx
c0017356:	83 c4 10             	add    esp,0x10
c0017359:	c3                   	ret    
c001735a:	66 90                	xchg   ax,ax

c001735c <picOpen()>:
c001735c:	83 ec 50             	sub    esp,0x50
c001735f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017366:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001736b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001736f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017373:	ee                   	out    dx,al
c0017374:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001737b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017380:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017388:	ee                   	out    dx,al
c0017389:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017391:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017399:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00173a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173a4:	89 c2                	mov    edx,eax
c00173a6:	ec                   	in     al,dx
c00173a7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00173ab:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00173af:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00173b3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173be:	89 c2                	mov    edx,eax
c00173c0:	ec                   	in     al,dx
c00173c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173c5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173c9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173cd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00173d4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00173d9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173e1:	ee                   	out    dx,al
c00173e2:	e8 bd fe ff ff       	call   c00172a4 <picIoWait()>
c00173e7:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00173ee:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00173f3:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00173f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00173fb:	ee                   	out    dx,al
c00173fc:	e8 a3 fe ff ff       	call   c00172a4 <picIoWait()>
c0017401:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017405:	0f b6 c0             	movzx  eax,al
c0017408:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001740f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017413:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017417:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001741b:	ee                   	out    dx,al
c001741c:	e8 83 fe ff ff       	call   c00172a4 <picIoWait()>
c0017421:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017425:	0f b6 c0             	movzx  eax,al
c0017428:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001742f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017433:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017437:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001743b:	ee                   	out    dx,al
c001743c:	e8 63 fe ff ff       	call   c00172a4 <picIoWait()>
c0017441:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017448:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001744d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017451:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017455:	ee                   	out    dx,al
c0017456:	e8 49 fe ff ff       	call   c00172a4 <picIoWait()>
c001745b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017462:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017467:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001746b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001746f:	ee                   	out    dx,al
c0017470:	e8 2f fe ff ff       	call   c00172a4 <picIoWait()>
c0017475:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001747c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017481:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017485:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017489:	ee                   	out    dx,al
c001748a:	e8 15 fe ff ff       	call   c00172a4 <picIoWait()>
c001748f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017496:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001749b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001749f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174a3:	ee                   	out    dx,al
c00174a4:	e8 fb fd ff ff       	call   c00172a4 <picIoWait()>
c00174a9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00174ae:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00174b5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174b9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174bd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174c1:	ee                   	out    dx,al
c00174c2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174c7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174ce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00174d2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00174d6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174da:	ee                   	out    dx,al
c00174db:	90                   	nop
c00174dc:	83 c4 50             	add    esp,0x50
c00174df:	c3                   	ret    

c00174e0 <picEOI(int)>:
c00174e0:	83 ec 10             	sub    esp,0x10
c00174e3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174e8:	75 1e                	jne    c0017508 <picEOI(int)+0x28>
c00174ea:	6a 0b                	push   0xb
c00174ec:	e8 ef fd ff ff       	call   c00172e0 <picGetIRQReg(int)>
c00174f1:	83 c4 04             	add    esp,0x4
c00174f4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00174f9:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00174fe:	25 80 00 00 00       	and    eax,0x80
c0017503:	74 73                	je     c0017578 <picEOI(int)+0x98>
c0017505:	8d 76 00             	lea    esi,[esi+0x0]
c0017508:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001750d:	75 31                	jne    c0017540 <picEOI(int)+0x60>
c001750f:	6a 0b                	push   0xb
c0017511:	e8 ca fd ff ff       	call   c00172e0 <picGetIRQReg(int)>
c0017516:	83 c4 04             	add    esp,0x4
c0017519:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001751e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017522:	98                   	cwde   
c0017523:	85 c0                	test   eax,eax
c0017525:	78 19                	js     c0017540 <picEOI(int)+0x60>
c0017527:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001752e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017533:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017537:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001753c:	ee                   	out    dx,al
c001753d:	eb 3d                	jmp    c001757c <picEOI(int)+0x9c>
c001753f:	90                   	nop
c0017540:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017545:	7e 19                	jle    c0017560 <picEOI(int)+0x80>
c0017547:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001754e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017553:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017557:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001755c:	ee                   	out    dx,al
c001755d:	8d 76 00             	lea    esi,[esi+0x0]
c0017560:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017567:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001756c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017570:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017575:	ee                   	out    dx,al
c0017576:	eb 04                	jmp    c001757c <picEOI(int)+0x9c>
c0017578:	90                   	nop
c0017579:	8d 76 00             	lea    esi,[esi+0x0]
c001757c:	83 c4 10             	add    esp,0x10
c001757f:	c3                   	ret    

c0017580 <RTC::open(int, int, void*)>:
c0017580:	31 c0                	xor    eax,eax
c0017582:	c3                   	ret    
c0017583:	90                   	nop

c0017584 <RTC::close(int, int, void*)>:
c0017584:	31 c0                	xor    eax,eax
c0017586:	c3                   	ret    
c0017587:	90                   	nop

c0017588 <RTC::timeInSecondsUTC()>:
c0017588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001758c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017592:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017598:	c3                   	ret    
c0017599:	90                   	nop

c001759a <RTC::timeInDatetimeUTC()>:
c001759a:	53                   	push   ebx
c001759b:	83 ec 14             	sub    esp,0x14
c001759e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00175a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00175a8:	50                   	push   eax
c00175a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00175ac:	83 c4 0c             	add    esp,0xc
c00175af:	52                   	push   edx
c00175b0:	50                   	push   eax
c00175b1:	53                   	push   ebx
c00175b2:	e8 87 45 ff ff       	call   c000bb3e <secondsToDatetime(unsigned long long)>
c00175b7:	89 d8                	mov    eax,ebx
c00175b9:	83 c4 14             	add    esp,0x14
c00175bc:	5b                   	pop    ebx
c00175bd:	c2 04 00             	ret    0x4

c00175c0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175c0:	56                   	push   esi
c00175c1:	53                   	push   ebx
c00175c2:	83 ec 14             	sub    esp,0x14
c00175c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175cb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175ce:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175d2:	52                   	push   edx
c00175d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175db:	50                   	push   eax
c00175dc:	e8 5d 45 ff ff       	call   c000bb3e <secondsToDatetime(unsigned long long)>
c00175e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175ed:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00175f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175f5:	89 f0                	mov    eax,esi
c00175f7:	83 c4 20             	add    esp,0x20
c00175fa:	5b                   	pop    ebx
c00175fb:	5e                   	pop    esi
c00175fc:	ff e0                	jmp    eax

c00175fe <RTC::~RTC()>:
c00175fe:	83 ec 0c             	sub    esp,0xc
c0017601:	ba 90 15 02 c0       	mov    edx,0xc0021590
c0017606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760a:	89 10                	mov    DWORD PTR [eax],edx
c001760c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	50                   	push   eax
c0017614:	e8 b7 42 ff ff       	call   c000b8d0 <Clock::~Clock()>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	90                   	nop
c001761d:	83 c4 0c             	add    esp,0xc
c0017620:	c3                   	ret    
c0017621:	90                   	nop

c0017622 <RTC::~RTC()>:
c0017622:	83 ec 0c             	sub    esp,0xc
c0017625:	83 ec 0c             	sub    esp,0xc
c0017628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001762c:	e8 cd ff ff ff       	call   c00175fe <RTC::~RTC()>
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	83 ec 08             	sub    esp,0x8
c0017637:	68 60 01 00 00       	push   0x160
c001763c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017640:	e8 24 32 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c0017645:	83 c4 10             	add    esp,0x10
c0017648:	83 c4 0c             	add    esp,0xc
c001764b:	c3                   	ret    

c001764c <RTC::get_update_in_progress_flag()>:
c001764c:	83 ec 14             	sub    esp,0x14
c001764f:	6a 0a                	push   0xa
c0017651:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017657:	e8 14 fb fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001765c:	83 c4 1c             	add    esp,0x1c
c001765f:	0f b6 c0             	movzx  eax,al
c0017662:	c1 e8 07             	shr    eax,0x7
c0017665:	c3                   	ret    

c0017666 <RTC::completeRTCRefresh()>:
c0017666:	55                   	push   ebp
c0017667:	57                   	push   edi
c0017668:	56                   	push   esi
c0017669:	53                   	push   ebx
c001766a:	83 ec 3c             	sub    esp,0x3c
c001766d:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017673:	83 ec 0c             	sub    esp,0xc
c0017676:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001767a:	e8 cd ff ff ff       	call   c001764c <RTC::get_update_in_progress_flag()>
c001767f:	83 c4 10             	add    esp,0x10
c0017682:	84 c0                	test   al,al
c0017684:	74 0e                	je     c0017694 <RTC::completeRTCRefresh()+0x2e>
c0017686:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001768c:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017692:	73 df                	jae    c0017673 <RTC::completeRTCRefresh()+0xd>
c0017694:	51                   	push   ecx
c0017695:	51                   	push   ecx
c0017696:	6a 00                	push   0x0
c0017698:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001769e:	e8 cd fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176a3:	5b                   	pop    ebx
c00176a4:	89 c7                	mov    edi,eax
c00176a6:	5e                   	pop    esi
c00176a7:	6a 02                	push   0x2
c00176a9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176af:	e8 bc fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176b4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176b8:	5d                   	pop    ebp
c00176b9:	58                   	pop    eax
c00176ba:	6a 04                	push   0x4
c00176bc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176c2:	e8 a9 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176c7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176cb:	58                   	pop    eax
c00176cc:	5a                   	pop    edx
c00176cd:	6a 07                	push   0x7
c00176cf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176d5:	e8 96 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176da:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00176de:	59                   	pop    ecx
c00176df:	5b                   	pop    ebx
c00176e0:	6a 08                	push   0x8
c00176e2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176e8:	e8 83 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176ed:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00176f1:	5e                   	pop    esi
c00176f2:	5d                   	pop    ebp
c00176f3:	6a 09                	push   0x9
c00176f5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176fb:	e8 70 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017700:	0f b6 c0             	movzx  eax,al
c0017703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017710:	83 ec 0c             	sub    esp,0xc
c0017713:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017717:	e8 30 ff ff ff       	call   c001764c <RTC::get_update_in_progress_flag()>
c001771c:	83 c4 10             	add    esp,0x10
c001771f:	84 c0                	test   al,al
c0017721:	74 0e                	je     c0017731 <RTC::completeRTCRefresh()+0xcb>
c0017723:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017729:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001772f:	73 df                	jae    c0017710 <RTC::completeRTCRefresh()+0xaa>
c0017731:	51                   	push   ecx
c0017732:	51                   	push   ecx
c0017733:	6a 00                	push   0x0
c0017735:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001773b:	e8 30 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017740:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017744:	5b                   	pop    ebx
c0017745:	5e                   	pop    esi
c0017746:	6a 02                	push   0x2
c0017748:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001774e:	e8 1d fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017753:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017757:	5d                   	pop    ebp
c0017758:	58                   	pop    eax
c0017759:	6a 04                	push   0x4
c001775b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017761:	e8 0a fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017766:	88 c3                	mov    bl,al
c0017768:	58                   	pop    eax
c0017769:	5a                   	pop    edx
c001776a:	6a 07                	push   0x7
c001776c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017772:	e8 f9 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017777:	59                   	pop    ecx
c0017778:	89 c6                	mov    esi,eax
c001777a:	5d                   	pop    ebp
c001777b:	6a 08                	push   0x8
c001777d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017783:	e8 e8 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017788:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001778c:	58                   	pop    eax
c001778d:	5a                   	pop    edx
c001778e:	6a 09                	push   0x9
c0017790:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017796:	e8 d5 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001779b:	89 f9                	mov    ecx,edi
c001779d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00177a1:	0f b6 e8             	movzx  ebp,al
c00177a4:	83 c4 10             	add    esp,0x10
c00177a7:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00177ab:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00177b0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00177b5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00177b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177bd:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00177c1:	0f 94 c0             	sete   al
c00177c4:	0f b6 fb             	movzx  edi,bl
c00177c7:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00177cb:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00177d0:	0f 94 c2             	sete   dl
c00177d3:	21 d0                	and    eax,edx
c00177d5:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00177d9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00177dd:	0f 94 c2             	sete   dl
c00177e0:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00177e4:	21 c2                	and    edx,eax
c00177e6:	89 f0                	mov    eax,esi
c00177e8:	0f b6 c0             	movzx  eax,al
c00177eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177ef:	89 f0                	mov    eax,esi
c00177f1:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00177f5:	0f 94 c0             	sete   al
c00177f8:	21 d0                	and    eax,edx
c00177fa:	31 d2                	xor    edx,edx
c00177fc:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017800:	0f 94 c2             	sete   dl
c0017803:	85 c2                	test   edx,eax
c0017805:	75 27                	jne    c001782e <RTC::completeRTCRefresh()+0x1c8>
c0017807:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001780b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001780f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017813:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017817:	89 f0                	mov    eax,esi
c0017819:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001781d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017821:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017825:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017829:	e9 dc fe ff ff       	jmp    c001770a <RTC::completeRTCRefresh()+0xa4>
c001782e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017832:	75 d3                	jne    c0017807 <RTC::completeRTCRefresh()+0x1a1>
c0017834:	52                   	push   edx
c0017835:	52                   	push   edx
c0017836:	6a 0b                	push   0xb
c0017838:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001783e:	e8 2d f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017843:	83 c4 10             	add    esp,0x10
c0017846:	a8 04                	test   al,0x4
c0017848:	75 7a                	jne    c00178c4 <RTC::completeRTCRefresh()+0x25e>
c001784a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001784e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017852:	83 e1 0f             	and    ecx,0xf
c0017855:	c1 ea 04             	shr    edx,0x4
c0017858:	c1 ef 04             	shr    edi,0x4
c001785b:	6b d2 0a             	imul   edx,edx,0xa
c001785e:	83 e6 0f             	and    esi,0xf
c0017861:	01 d1                	add    ecx,edx
c0017863:	c1 ed 04             	shr    ebp,0x4
c0017866:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001786a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001786e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017872:	c1 ea 04             	shr    edx,0x4
c0017875:	83 e1 0f             	and    ecx,0xf
c0017878:	6b d2 0a             	imul   edx,edx,0xa
c001787b:	6b ed 0a             	imul   ebp,ebp,0xa
c001787e:	01 d1                	add    ecx,edx
c0017880:	89 fa                	mov    edx,edi
c0017882:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017886:	83 e2 07             	and    edx,0x7
c0017889:	89 d9                	mov    ecx,ebx
c001788b:	6b d2 0a             	imul   edx,edx,0xa
c001788e:	83 e1 0f             	and    ecx,0xf
c0017891:	83 e3 80             	and    ebx,0xffffff80
c0017894:	01 d1                	add    ecx,edx
c0017896:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001789a:	09 cb                	or     ebx,ecx
c001789c:	c1 ea 04             	shr    edx,0x4
c001789f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00178a3:	6b d2 0a             	imul   edx,edx,0xa
c00178a6:	83 e1 0f             	and    ecx,0xf
c00178a9:	01 d6                	add    esi,edx
c00178ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178af:	c1 ea 04             	shr    edx,0x4
c00178b2:	6b d2 0a             	imul   edx,edx,0xa
c00178b5:	01 d1                	add    ecx,edx
c00178b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178bb:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00178bf:	83 e2 0f             	and    edx,0xf
c00178c2:	01 d5                	add    ebp,edx
c00178c4:	a8 02                	test   al,0x2
c00178c6:	75 15                	jne    c00178dd <RTC::completeRTCRefresh()+0x277>
c00178c8:	f6 c3 80             	test   bl,0x80
c00178cb:	74 10                	je     c00178dd <RTC::completeRTCRefresh()+0x277>
c00178cd:	83 e3 7f             	and    ebx,0x7f
c00178d0:	b9 18 00 00 00       	mov    ecx,0x18
c00178d5:	8d 43 0c             	lea    eax,[ebx+0xc]
c00178d8:	99                   	cdq    
c00178d9:	f7 f9                	idiv   ecx
c00178db:	88 d3                	mov    bl,dl
c00178dd:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00178e3:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00178e9:	77 06                	ja     c00178f1 <RTC::completeRTCRefresh()+0x28b>
c00178eb:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00178f1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00178f6:	31 c9                	xor    ecx,ecx
c00178f8:	c1 e0 10             	shl    eax,0x10
c00178fb:	89 cd                	mov    ebp,ecx
c00178fd:	c1 e7 10             	shl    edi,0x10
c0017900:	31 d2                	xor    edx,edx
c0017902:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017908:	09 c5                	or     ebp,eax
c001790a:	89 f0                	mov    eax,esi
c001790c:	89 e9                	mov    ecx,ebp
c001790e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017912:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017916:	88 c2                	mov    dl,al
c0017918:	88 d9                	mov    cl,bl
c001791a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001791e:	0f b7 c2             	movzx  eax,dx
c0017921:	09 f8                	or     eax,edi
c0017923:	89 c2                	mov    edx,eax
c0017925:	50                   	push   eax
c0017926:	50                   	push   eax
c0017927:	51                   	push   ecx
c0017928:	52                   	push   edx
c0017929:	e8 91 40 ff ff       	call   c000b9bf <datetimeToSeconds(datetime_t)>
c001792e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017932:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017938:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001793e:	83 c4 4c             	add    esp,0x4c
c0017941:	5b                   	pop    ebx
c0017942:	5e                   	pop    esi
c0017943:	5f                   	pop    edi
c0017944:	5d                   	pop    ebp
c0017945:	c3                   	ret    

c0017946 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017946:	55                   	push   ebp
c0017947:	57                   	push   edi
c0017948:	56                   	push   esi
c0017949:	53                   	push   ebx
c001794a:	83 ec 30             	sub    esp,0x30
c001794d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017951:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017955:	6a 00                	push   0x0
c0017957:	6a 00                	push   0x0
c0017959:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001795f:	e8 26 f9 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017964:	83 c4 0c             	add    esp,0xc
c0017967:	6a 00                	push   0x0
c0017969:	6a 02                	push   0x2
c001796b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017971:	e8 14 f9 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017976:	31 d2                	xor    edx,edx
c0017978:	89 f9                	mov    ecx,edi
c001797a:	89 f8                	mov    eax,edi
c001797c:	c1 e9 10             	shr    ecx,0x10
c001797f:	0f b6 c4             	movzx  eax,ah
c0017982:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017986:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001798a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001798e:	b9 64 00 00 00       	mov    ecx,0x64
c0017993:	89 f0                	mov    eax,esi
c0017995:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017999:	89 f0                	mov    eax,esi
c001799b:	0f b6 c4             	movzx  eax,ah
c001799e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00179a2:	89 f0                	mov    eax,esi
c00179a4:	c1 e8 10             	shr    eax,0x10
c00179a7:	f7 f1                	div    ecx
c00179a9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179ad:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00179b1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179b5:	59                   	pop    ecx
c00179b6:	5b                   	pop    ebx
c00179b7:	89 fb                	mov    ebx,edi
c00179b9:	6a 0b                	push   0xb
c00179bb:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179c1:	e8 aa f7 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00179c6:	83 c4 10             	add    esp,0x10
c00179c9:	89 c5                	mov    ebp,eax
c00179cb:	a8 04                	test   al,0x4
c00179cd:	75 6e                	jne    c0017a3d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179d3:	31 d2                	xor    edx,edx
c00179d5:	0f b6 c1             	movzx  eax,cl
c00179d8:	b9 0a 00 00 00       	mov    ecx,0xa
c00179dd:	f7 f1                	div    ecx
c00179df:	c1 e0 04             	shl    eax,0x4
c00179e2:	09 d0                	or     eax,edx
c00179e4:	31 d2                	xor    edx,edx
c00179e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179ea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179ef:	f7 f1                	div    ecx
c00179f1:	c1 e0 04             	shl    eax,0x4
c00179f4:	09 d0                	or     eax,edx
c00179f6:	31 d2                	xor    edx,edx
c00179f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179fc:	0f b6 c3             	movzx  eax,bl
c00179ff:	f7 f1                	div    ecx
c0017a01:	c1 e0 04             	shl    eax,0x4
c0017a04:	09 d0                	or     eax,edx
c0017a06:	31 d2                	xor    edx,edx
c0017a08:	89 c3                	mov    ebx,eax
c0017a0a:	89 f0                	mov    eax,esi
c0017a0c:	0f b6 c0             	movzx  eax,al
c0017a0f:	f7 f1                	div    ecx
c0017a11:	c1 e0 04             	shl    eax,0x4
c0017a14:	09 d0                	or     eax,edx
c0017a16:	31 d2                	xor    edx,edx
c0017a18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a1c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a21:	f7 f1                	div    ecx
c0017a23:	c1 e0 04             	shl    eax,0x4
c0017a26:	09 d0                	or     eax,edx
c0017a28:	31 d2                	xor    edx,edx
c0017a2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a32:	f7 f1                	div    ecx
c0017a34:	c1 e0 04             	shl    eax,0x4
c0017a37:	09 d0                	or     eax,edx
c0017a39:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a3d:	83 e5 02             	and    ebp,0x2
c0017a40:	75 1e                	jne    c0017a60 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a42:	0f b6 c3             	movzx  eax,bl
c0017a45:	83 f8 0b             	cmp    eax,0xb
c0017a48:	76 10                	jbe    c0017a5a <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a4a:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a4d:	88 d3                	mov    bl,dl
c0017a4f:	84 d2                	test   dl,dl
c0017a51:	75 02                	jne    c0017a55 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a53:	b3 0c                	mov    bl,0xc
c0017a55:	83 cb 80             	or     ebx,0xffffff80
c0017a58:	eb 06                	jmp    c0017a60 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a5a:	85 c0                	test   eax,eax
c0017a5c:	75 02                	jne    c0017a60 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a5e:	b3 0c                	mov    bl,0xc
c0017a60:	0f b6 db             	movzx  ebx,bl
c0017a63:	50                   	push   eax
c0017a64:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a69:	52                   	push   edx
c0017a6a:	6a 00                	push   0x0
c0017a6c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a72:	e8 13 f8 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a77:	83 c4 0c             	add    esp,0xc
c0017a7a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a7f:	50                   	push   eax
c0017a80:	6a 02                	push   0x2
c0017a82:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a88:	e8 fd f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a8d:	83 c4 0c             	add    esp,0xc
c0017a90:	53                   	push   ebx
c0017a91:	6a 04                	push   0x4
c0017a93:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a99:	e8 ec f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a9e:	83 c4 0c             	add    esp,0xc
c0017aa1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017aa6:	52                   	push   edx
c0017aa7:	6a 07                	push   0x7
c0017aa9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aaf:	e8 d6 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ab4:	83 c4 0c             	add    esp,0xc
c0017ab7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017abc:	50                   	push   eax
c0017abd:	6a 08                	push   0x8
c0017abf:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ac5:	e8 c0 f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aca:	83 c4 0c             	add    esp,0xc
c0017acd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017ad2:	55                   	push   ebp
c0017ad3:	6a 09                	push   0x9
c0017ad5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017adb:	e8 aa f7 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ae0:	5a                   	pop    edx
c0017ae1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ae5:	e8 7c fb ff ff       	call   c0017666 <RTC::completeRTCRefresh()>
c0017aea:	83 c4 3c             	add    esp,0x3c
c0017aed:	b0 01                	mov    al,0x1
c0017aef:	5b                   	pop    ebx
c0017af0:	5e                   	pop    esi
c0017af1:	5f                   	pop    edi
c0017af2:	5d                   	pop    ebp
c0017af3:	c3                   	ret    

c0017af4 <rtcIRQHandler(regs*, void*)>:
c0017af4:	53                   	push   ebx
c0017af5:	83 ec 10             	sub    esp,0x10
c0017af8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017afc:	6a 0c                	push   0xc
c0017afe:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017b04:	e8 67 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b09:	83 c4 10             	add    esp,0x10
c0017b0c:	a8 80                	test   al,0x80
c0017b0e:	74 24                	je     c0017b34 <rtcIRQHandler(regs*, void*)+0x40>
c0017b10:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017b17:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b1e:	66 ff 05 14 82 02 c0 	inc    WORD PTR ds:0xc0028214
c0017b25:	75 0d                	jne    c0017b34 <rtcIRQHandler(regs*, void*)+0x40>
c0017b27:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b2b:	83 c4 08             	add    esp,0x8
c0017b2e:	5b                   	pop    ebx
c0017b2f:	e9 32 fb ff ff       	jmp    c0017666 <RTC::completeRTCRefresh()>
c0017b34:	83 c4 08             	add    esp,0x8
c0017b37:	5b                   	pop    ebx
c0017b38:	c3                   	ret    
c0017b39:	90                   	nop

c0017b3a <RTC::RTC()>:
c0017b3a:	83 ec 1c             	sub    esp,0x1c
c0017b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b41:	83 ec 08             	sub    esp,0x8
c0017b44:	68 73 15 02 c0       	push   0xc0021573
c0017b49:	50                   	push   eax
c0017b4a:	e8 4b 3d ff ff       	call   c000b89a <Clock::Clock(char const*)>
c0017b4f:	83 c4 10             	add    esp,0x10
c0017b52:	ba 90 15 02 c0       	mov    edx,0xc0021590
c0017b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5b:	89 10                	mov    DWORD PTR [eax],edx
c0017b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b61:	83 ec 0c             	sub    esp,0xc
c0017b64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b68:	6a 01                	push   0x1
c0017b6a:	68 f4 7a 01 c0       	push   0xc0017af4
c0017b6f:	6a 08                	push   0x8
c0017b71:	50                   	push   eax
c0017b72:	e8 ff 41 ff ff       	call   c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017b77:	83 c4 20             	add    esp,0x20
c0017b7a:	89 c2                	mov    edx,eax
c0017b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b80:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b86:	fa                   	cli    
c0017b87:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b8c:	83 c0 01             	add    eax,0x1
c0017b8f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b94:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b99:	83 ec 08             	sub    esp,0x8
c0017b9c:	6a 0b                	push   0xb
c0017b9e:	50                   	push   eax
c0017b9f:	e8 cc f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ba4:	83 c4 10             	add    esp,0x10
c0017ba7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017bab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017bb0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017bb4:	83 ca 10             	or     edx,0x10
c0017bb7:	0f b6 d2             	movzx  edx,dl
c0017bba:	83 ec 04             	sub    esp,0x4
c0017bbd:	52                   	push   edx
c0017bbe:	6a 0b                	push   0xb
c0017bc0:	50                   	push   eax
c0017bc1:	e8 c4 f6 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	83 ec 0c             	sub    esp,0xc
c0017bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bd0:	e8 91 fa ff ff       	call   c0017666 <RTC::completeRTCRefresh()>
c0017bd5:	83 c4 10             	add    esp,0x10
c0017bd8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bdd:	83 e8 01             	sub    eax,0x1
c0017be0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017be5:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bea:	85 c0                	test   eax,eax
c0017bec:	75 01                	jne    c0017bef <RTC::RTC()+0xb5>
c0017bee:	fb                   	sti    
c0017bef:	90                   	nop
c0017bf0:	83 c4 1c             	add    esp,0x1c
c0017bf3:	c3                   	ret    

c0017bf4 <HalConsoleScroll(int, int)>:
c0017bf4:	83 ec 10             	sub    esp,0x10
c0017bf7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017bff:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017c07:	90                   	nop
c0017c08:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c0d:	0f 8f e1 00 00 00    	jg     c0017cf4 <HalConsoleScroll(int, int)+0x100>
c0017c13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c1b:	90                   	nop
c0017c1c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c24:	0f 8f be 00 00 00    	jg     c0017ce8 <HalConsoleScroll(int, int)+0xf4>
c0017c2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c2e:	89 d0                	mov    eax,edx
c0017c30:	c1 e0 02             	shl    eax,0x2
c0017c33:	01 d0                	add    eax,edx
c0017c35:	c1 e0 05             	shl    eax,0x5
c0017c38:	89 c2                	mov    edx,eax
c0017c3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c3e:	01 d0                	add    eax,edx
c0017c40:	89 c2                	mov    edx,eax
c0017c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c46:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c4d:	89 d0                	mov    eax,edx
c0017c4f:	c1 e0 02             	shl    eax,0x2
c0017c52:	01 d0                	add    eax,edx
c0017c54:	c1 e0 05             	shl    eax,0x5
c0017c57:	89 c2                	mov    edx,eax
c0017c59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c5d:	01 d0                	add    eax,edx
c0017c5f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c69:	01 c2                	add    edx,eax
c0017c6b:	8a 01                	mov    al,BYTE PTR [ecx]
c0017c6d:	88 02                	mov    BYTE PTR [edx],al
c0017c6f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c74:	75 66                	jne    c0017cdc <HalConsoleScroll(int, int)+0xe8>
c0017c76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c7a:	83 e0 01             	and    eax,0x1
c0017c7d:	74 39                	je     c0017cb8 <HalConsoleScroll(int, int)+0xc4>
c0017c7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c83:	83 e0 0f             	and    eax,0xf
c0017c86:	88 c2                	mov    dl,al
c0017c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c8c:	c1 e0 04             	shl    eax,0x4
c0017c8f:	09 d0                	or     eax,edx
c0017c91:	88 c1                	mov    cl,al
c0017c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c97:	89 d0                	mov    eax,edx
c0017c99:	c1 e0 02             	shl    eax,0x2
c0017c9c:	01 d0                	add    eax,edx
c0017c9e:	c1 e0 05             	shl    eax,0x5
c0017ca1:	89 c2                	mov    edx,eax
c0017ca3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ca7:	01 d0                	add    eax,edx
c0017ca9:	89 c2                	mov    edx,eax
c0017cab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017caf:	01 d0                	add    eax,edx
c0017cb1:	88 ca                	mov    dl,cl
c0017cb3:	88 10                	mov    BYTE PTR [eax],dl
c0017cb5:	eb 25                	jmp    c0017cdc <HalConsoleScroll(int, int)+0xe8>
c0017cb7:	90                   	nop
c0017cb8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cbc:	89 d0                	mov    eax,edx
c0017cbe:	c1 e0 02             	shl    eax,0x2
c0017cc1:	01 d0                	add    eax,edx
c0017cc3:	c1 e0 05             	shl    eax,0x5
c0017cc6:	89 c2                	mov    edx,eax
c0017cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ccc:	01 d0                	add    eax,edx
c0017cce:	89 c2                	mov    edx,eax
c0017cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cd4:	01 d0                	add    eax,edx
c0017cd6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017cdc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017ce1:	e9 36 ff ff ff       	jmp    c0017c1c <HalConsoleScroll(int, int)+0x28>
c0017ce6:	66 90                	xchg   ax,ax
c0017ce8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017ced:	e9 16 ff ff ff       	jmp    c0017c08 <HalConsoleScroll(int, int)+0x14>
c0017cf2:	66 90                	xchg   ax,ax
c0017cf4:	90                   	nop
c0017cf5:	83 c4 10             	add    esp,0x10
c0017cf8:	c3                   	ret    
c0017cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0017cfc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017cfc:	83 ec 14             	sub    esp,0x14
c0017cff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017d03:	88 04 24             	mov    BYTE PTR [esp],al
c0017d06:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017d09:	0f b6 c0             	movzx  eax,al
c0017d0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d10:	89 d1                	mov    ecx,edx
c0017d12:	83 e1 0f             	and    ecx,0xf
c0017d15:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d19:	c1 e2 04             	shl    edx,0x4
c0017d1c:	0f b6 d2             	movzx  edx,dl
c0017d1f:	09 ca                	or     edx,ecx
c0017d21:	c1 e2 08             	shl    edx,0x8
c0017d24:	09 d0                	or     eax,edx
c0017d26:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d2b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d37:	89 d0                	mov    eax,edx
c0017d39:	c1 e0 02             	shl    eax,0x2
c0017d3c:	01 d0                	add    eax,edx
c0017d3e:	c1 e0 04             	shl    eax,0x4
c0017d41:	89 c2                	mov    edx,eax
c0017d43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d47:	01 d0                	add    eax,edx
c0017d49:	01 c0                	add    eax,eax
c0017d4b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d53:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017d58:	66 89 02             	mov    WORD PTR [edx],ax
c0017d5b:	90                   	nop
c0017d5c:	83 c4 14             	add    esp,0x14
c0017d5f:	c3                   	ret    

c0017d60 <HalConsoleCursorUpdate(int, int)>:
c0017d60:	83 ec 20             	sub    esp,0x20
c0017d63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d67:	89 c2                	mov    edx,eax
c0017d69:	c1 e2 02             	shl    edx,0x2
c0017d6c:	01 d0                	add    eax,edx
c0017d6e:	c1 e0 04             	shl    eax,0x4
c0017d71:	89 c2                	mov    edx,eax
c0017d73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d77:	01 d0                	add    eax,edx
c0017d79:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d7e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d85:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d8a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d92:	ee                   	out    dx,al
c0017d93:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d98:	0f b6 c0             	movzx  eax,al
c0017d9b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017da2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017da6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017daa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017dae:	ee                   	out    dx,al
c0017daf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017db6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017dbb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017dbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dc3:	ee                   	out    dx,al
c0017dc4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017dc9:	c1 e8 08             	shr    eax,0x8
c0017dcc:	0f b6 c0             	movzx  eax,al
c0017dcf:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017dd6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017dda:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017dde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017de2:	ee                   	out    dx,al
c0017de3:	90                   	nop
c0017de4:	83 c4 20             	add    esp,0x20
c0017de7:	c3                   	ret    

c0017de8 <FAT::getName()>:
c0017de8:	b8 c4 15 02 c0       	mov    eax,0xc00215c4
c0017ded:	c3                   	ret    
c0017dee:	66 90                	xchg   ax,ax

c0017df0 <FAT::tell(void*, unsigned long long*)>:
c0017df0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017df5:	75 09                	jne    c0017e00 <FAT::tell(void*, unsigned long long*)+0x10>
c0017df7:	b8 04 00 00 00       	mov    eax,0x4
c0017dfc:	c3                   	ret    
c0017dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0017e00:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e05:	75 09                	jne    c0017e10 <FAT::tell(void*, unsigned long long*)+0x20>
c0017e07:	b8 04 00 00 00       	mov    eax,0x4
c0017e0c:	c3                   	ret    
c0017e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e14:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017e17:	ba 00 00 00 00       	mov    edx,0x0
c0017e1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e20:	89 01                	mov    DWORD PTR [ecx],eax
c0017e22:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e25:	b8 00 00 00 00       	mov    eax,0x0
c0017e2a:	c3                   	ret    
c0017e2b:	90                   	nop

c0017e2c <FAT::stat(void*, unsigned long long*)>:
c0017e2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e31:	75 09                	jne    c0017e3c <FAT::stat(void*, unsigned long long*)+0x10>
c0017e33:	b8 04 00 00 00       	mov    eax,0x4
c0017e38:	c3                   	ret    
c0017e39:	8d 76 00             	lea    esi,[esi+0x0]
c0017e3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e41:	75 09                	jne    c0017e4c <FAT::stat(void*, unsigned long long*)+0x20>
c0017e43:	b8 04 00 00 00       	mov    eax,0x4
c0017e48:	c3                   	ret    
c0017e49:	8d 76 00             	lea    esi,[esi+0x0]
c0017e4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e53:	ba 00 00 00 00       	mov    edx,0x0
c0017e58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e5c:	89 01                	mov    DWORD PTR [ecx],eax
c0017e5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e61:	b8 00 00 00 00       	mov    eax,0x0
c0017e66:	c3                   	ret    
c0017e67:	90                   	nop

c0017e68 <FAT::~FAT()>:
c0017e68:	83 ec 0c             	sub    esp,0xc
c0017e6b:	ba 10 16 02 c0       	mov    edx,0xc0021610
c0017e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e74:	89 10                	mov    DWORD PTR [eax],edx
c0017e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e7a:	83 ec 0c             	sub    esp,0xc
c0017e7d:	50                   	push   eax
c0017e7e:	e8 59 2e ff ff       	call   c000acdc <Filesystem::~Filesystem()>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	90                   	nop
c0017e87:	83 c4 0c             	add    esp,0xc
c0017e8a:	c3                   	ret    
c0017e8b:	90                   	nop

c0017e8c <FAT::~FAT()>:
c0017e8c:	83 ec 0c             	sub    esp,0xc
c0017e8f:	83 ec 0c             	sub    esp,0xc
c0017e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e96:	e8 cd ff ff ff       	call   c0017e68 <FAT::~FAT()>
c0017e9b:	83 c4 10             	add    esp,0x10
c0017e9e:	83 ec 08             	sub    esp,0x8
c0017ea1:	6a 08                	push   0x8
c0017ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ea7:	e8 bd 29 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c0017eac:	83 c4 10             	add    esp,0x10
c0017eaf:	83 c4 0c             	add    esp,0xc
c0017eb2:	c3                   	ret    
c0017eb3:	90                   	nop

c0017eb4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017eb4:	83 ec 1c             	sub    esp,0x1c
c0017eb7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017ebe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017ec3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec7:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ece:	83 f8 ff             	cmp    eax,0xffffffff
c0017ed1:	75 35                	jne    c0017f08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017ed3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ed7:	88 c2                	mov    dl,al
c0017ed9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ede:	01 d0                	add    eax,edx
c0017ee0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ee4:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017eea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eee:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017ef5:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017efa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017efe:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f05:	eb 19                	jmp    c0017f20 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017f07:	90                   	nop
c0017f08:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f0c:	88 c2                	mov    dl,al
c0017f0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f12:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f19:	01 d0                	add    eax,edx
c0017f1b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f1f:	90                   	nop
c0017f20:	83 ec 04             	sub    esp,0x4
c0017f23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f2b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f2f:	50                   	push   eax
c0017f30:	e8 9a d0 fe ff       	call   c0004fcf <f_getlabel>
c0017f35:	83 c4 10             	add    esp,0x10
c0017f38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f41:	75 09                	jne    c0017f4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f43:	b8 00 00 00 00       	mov    eax,0x0
c0017f48:	eb 0a                	jmp    c0017f54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f4a:	66 90                	xchg   ax,ax
c0017f4c:	b8 01 00 00 00       	mov    eax,0x1
c0017f51:	8d 76 00             	lea    esi,[esi+0x0]
c0017f54:	83 c4 1c             	add    esp,0x1c
c0017f57:	c3                   	ret    

c0017f58 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f58:	57                   	push   edi
c0017f59:	83 ec 58             	sub    esp,0x58
c0017f5c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f64:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f68:	b8 00 00 00 00       	mov    eax,0x0
c0017f6d:	b9 0f 00 00 00       	mov    ecx,0xf
c0017f72:	fc                   	cld    
c0017f73:	89 d7                	mov    edi,edx
c0017f75:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017f77:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f7b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f82:	83 f8 ff             	cmp    eax,0xffffffff
c0017f85:	75 35                	jne    c0017fbc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017f87:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f8b:	88 c2                	mov    dl,al
c0017f8d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f92:	01 d0                	add    eax,edx
c0017f94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f98:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f9e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fa2:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fa9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fae:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017fb2:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fb9:	eb 19                	jmp    c0017fd4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017fbb:	90                   	nop
c0017fbc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fc0:	88 c2                	mov    dl,al
c0017fc2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fc6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fcd:	01 d0                	add    eax,edx
c0017fcf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fd3:	90                   	nop
c0017fd4:	83 ec 08             	sub    esp,0x8
c0017fd7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017fdb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fdf:	50                   	push   eax
c0017fe0:	e8 5b 88 fe ff       	call   c0000840 <strcat>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	83 ec 0c             	sub    esp,0xc
c0017feb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fef:	50                   	push   eax
c0017ff0:	e8 2b d1 fe ff       	call   c0005120 <f_setlabel>
c0017ff5:	83 c4 10             	add    esp,0x10
c0017ff8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017ffc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018001:	75 09                	jne    c001800c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018003:	b8 00 00 00 00       	mov    eax,0x0
c0018008:	eb 0a                	jmp    c0018014 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001800a:	66 90                	xchg   ax,ax
c001800c:	b8 01 00 00 00       	mov    eax,0x1
c0018011:	8d 76 00             	lea    esi,[esi+0x0]
c0018014:	83 c4 58             	add    esp,0x58
c0018017:	5f                   	pop    edi
c0018018:	c3                   	ret    
c0018019:	90                   	nop
c001801a:	66 90                	xchg   ax,ax

c001801c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001801c:	83 ec 2c             	sub    esp,0x2c
c001801f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018027:	83 ec 08             	sub    esp,0x8
c001802a:	68 e8 15 02 c0       	push   0xc00215e8
c001802f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018033:	e8 18 87 fe ff       	call   c0000750 <strcmp>
c0018038:	83 c4 10             	add    esp,0x10
c001803b:	85 c0                	test   eax,eax
c001803d:	0f 94 c0             	sete   al
c0018040:	0f b6 c0             	movzx  eax,al
c0018043:	85 c0                	test   eax,eax
c0018045:	74 0d                	je     c0018054 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018047:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001804f:	e9 c0 00 00 00       	jmp    c0018114 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018054:	83 ec 08             	sub    esp,0x8
c0018057:	68 da 15 02 c0       	push   0xc00215da
c001805c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018060:	e8 eb 86 fe ff       	call   c0000750 <strcmp>
c0018065:	83 c4 10             	add    esp,0x10
c0018068:	85 c0                	test   eax,eax
c001806a:	0f 94 c0             	sete   al
c001806d:	0f b6 c0             	movzx  eax,al
c0018070:	85 c0                	test   eax,eax
c0018072:	74 10                	je     c0018084 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018074:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001807c:	e9 93 00 00 00       	jmp    c0018114 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018081:	8d 76 00             	lea    esi,[esi+0x0]
c0018084:	83 ec 08             	sub    esp,0x8
c0018087:	68 e0 15 02 c0       	push   0xc00215e0
c001808c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018090:	e8 bb 86 fe ff       	call   c0000750 <strcmp>
c0018095:	83 c4 10             	add    esp,0x10
c0018098:	85 c0                	test   eax,eax
c001809a:	0f 94 c0             	sete   al
c001809d:	0f b6 c0             	movzx  eax,al
c00180a0:	85 c0                	test   eax,eax
c00180a2:	74 0c                	je     c00180b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00180a4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180ac:	eb 66                	jmp    c0018114 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180ae:	66 90                	xchg   ax,ax
c00180b0:	83 ec 08             	sub    esp,0x8
c00180b3:	68 9c f3 01 c0       	push   0xc001f39c
c00180b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180bc:	e8 8f 86 fe ff       	call   c0000750 <strcmp>
c00180c1:	83 c4 10             	add    esp,0x10
c00180c4:	85 c0                	test   eax,eax
c00180c6:	0f 94 c0             	sete   al
c00180c9:	0f b6 c0             	movzx  eax,al
c00180cc:	85 c0                	test   eax,eax
c00180ce:	74 0c                	je     c00180dc <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00180d0:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00180d8:	eb 3a                	jmp    c0018114 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180da:	66 90                	xchg   ax,ax
c00180dc:	83 ec 08             	sub    esp,0x8
c00180df:	68 e6 15 02 c0       	push   0xc00215e6
c00180e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180e8:	e8 63 86 fe ff       	call   c0000750 <strcmp>
c00180ed:	83 c4 10             	add    esp,0x10
c00180f0:	85 c0                	test   eax,eax
c00180f2:	0f 94 c0             	sete   al
c00180f5:	0f b6 c0             	movzx  eax,al
c00180f8:	85 c0                	test   eax,eax
c00180fa:	74 0c                	je     c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00180fc:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018104:	eb 0e                	jmp    c0018114 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018106:	66 90                	xchg   ax,ax
c0018108:	b8 08 00 00 00       	mov    eax,0x8
c001810d:	e9 ea 00 00 00       	jmp    c00181fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018112:	66 90                	xchg   ax,ax
c0018114:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001811b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018120:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018124:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001812b:	83 f8 ff             	cmp    eax,0xffffffff
c001812e:	75 34                	jne    c0018164 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018130:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018134:	88 c2                	mov    dl,al
c0018136:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001813b:	01 d0                	add    eax,edx
c001813d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018141:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018147:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001814b:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018152:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018157:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001815b:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018162:	eb 18                	jmp    c001817c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018164:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018168:	88 c2                	mov    dl,al
c001816a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001816e:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018175:	01 d0                	add    eax,edx
c0018177:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001817b:	90                   	nop
c001817c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018180:	88 04 24             	mov    BYTE PTR [esp],al
c0018183:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018187:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001818b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018193:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018198:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00181a0:	83 ec 0c             	sub    esp,0xc
c00181a3:	68 00 20 00 00       	push   0x2000
c00181a8:	e8 01 f9 fe ff       	call   c0007aae <malloc>
c00181ad:	83 c4 10             	add    esp,0x10
c00181b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181b4:	68 00 20 00 00       	push   0x2000
c00181b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181c1:	50                   	push   eax
c00181c2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00181c6:	50                   	push   eax
c00181c7:	e8 51 d2 fe ff       	call   c000541d <f_mkfs>
c00181cc:	83 c4 10             	add    esp,0x10
c00181cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00181d8:	75 0a                	jne    c00181e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00181da:	b8 00 00 00 00       	mov    eax,0x0
c00181df:	eb 1b                	jmp    c00181fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181e1:	8d 76 00             	lea    esi,[esi+0x0]
c00181e4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00181e9:	75 09                	jne    c00181f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00181eb:	b8 09 00 00 00       	mov    eax,0x9
c00181f0:	eb 0a                	jmp    c00181fc <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181f2:	66 90                	xchg   ax,ax
c00181f4:	b8 01 00 00 00       	mov    eax,0x1
c00181f9:	8d 76 00             	lea    esi,[esi+0x0]
c00181fc:	83 c4 2c             	add    esp,0x2c
c00181ff:	c3                   	ret    

c0018200 <FAT::tryMount(LogicalDisk*, int)>:
c0018200:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018206:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001820b:	83 f8 14             	cmp    eax,0x14
c001820e:	75 18                	jne    c0018228 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018210:	83 ec 0c             	sub    esp,0xc
c0018213:	68 ec 15 02 c0       	push   0xc00215ec
c0018218:	e8 56 86 ff ff       	call   c0010873 <KePanic(char const*)>
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	b0 00                	mov    al,0x0
c0018222:	e9 ed 01 00 00       	jmp    c0018414 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018227:	90                   	nop
c0018228:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001822f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018235:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001823b:	3d 00 02 00 00       	cmp    eax,0x200
c0018240:	74 0a                	je     c001824c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018242:	b0 00                	mov    al,0x0
c0018244:	e9 cb 01 00 00       	jmp    c0018414 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018249:	8d 76 00             	lea    esi,[esi+0x0]
c001824c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018254:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001825b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018262:	83 f8 ff             	cmp    eax,0xffffffff
c0018265:	74 09                	je     c0018270 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018267:	b0 01                	mov    al,0x1
c0018269:	e9 a6 01 00 00       	jmp    c0018414 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001826e:	66 90                	xchg   ax,ax
c0018270:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001827a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018282:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018289:	88 c2                	mov    dl,al
c001828b:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018290:	01 d0                	add    eax,edx
c0018292:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018299:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001829f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00182a6:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182ad:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182b2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00182b9:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182c0:	83 ec 0c             	sub    esp,0xc
c00182c3:	68 34 02 00 00       	push   0x234
c00182c8:	e8 e1 f7 fe ff       	call   c0007aae <malloc>
c00182cd:	83 c4 10             	add    esp,0x10
c00182d0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00182d7:	83 ec 04             	sub    esp,0x4
c00182da:	6a 00                	push   0x0
c00182dc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182e3:	50                   	push   eax
c00182e4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00182eb:	e8 08 b9 fe ff       	call   c0003bf8 <f_mount>
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00182fa:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018302:	74 1c                	je     c0018320 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018304:	83 ec 0c             	sub    esp,0xc
c0018307:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001830e:	e8 bb f7 fe ff       	call   c0007ace <rfree>
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	b0 00                	mov    al,0x0
c0018318:	e9 f7 00 00 00       	jmp    c0018414 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001831d:	8d 76 00             	lea    esi,[esi+0x0]
c0018320:	83 ec 04             	sub    esp,0x4
c0018323:	68 00 01 00 00       	push   0x100
c0018328:	6a 00                	push   0x0
c001832a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018331:	50                   	push   eax
c0018332:	e8 b9 81 fe ff       	call   c00004f0 <memset>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	83 ec 08             	sub    esp,0x8
c001833d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018344:	50                   	push   eax
c0018345:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001834c:	50                   	push   eax
c001834d:	e8 ee 84 fe ff       	call   c0000840 <strcat>
c0018352:	83 c4 10             	add    esp,0x10
c0018355:	83 ec 08             	sub    esp,0x8
c0018358:	68 fa 15 02 c0       	push   0xc00215fa
c001835d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018364:	50                   	push   eax
c0018365:	e8 d6 84 fe ff       	call   c0000840 <strcat>
c001836a:	83 c4 10             	add    esp,0x10
c001836d:	83 ec 04             	sub    esp,0x4
c0018370:	6a 01                	push   0x1
c0018372:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018379:	50                   	push   eax
c001837a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001837e:	50                   	push   eax
c001837f:	e8 d6 b8 fe ff       	call   c0003c5a <f_open>
c0018384:	83 c4 10             	add    esp,0x10
c0018387:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001838e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018395:	85 c0                	test   eax,eax
c0018397:	74 0b                	je     c00183a4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018399:	78 31                	js     c00183cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001839b:	83 e8 04             	sub    eax,0x4
c001839e:	83 f8 01             	cmp    eax,0x1
c00183a1:	77 29                	ja     c00183cc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00183a3:	90                   	nop
c00183a4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00183ac:	83 ec 0c             	sub    esp,0xc
c00183af:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183b3:	50                   	push   eax
c00183b4:	e8 70 c0 fe ff       	call   c0004429 <f_close>
c00183b9:	83 c4 10             	add    esp,0x10
c00183bc:	90                   	nop
c00183bd:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00183c5:	85 c0                	test   eax,eax
c00183c7:	74 43                	je     c001840c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00183c9:	eb 31                	jmp    c00183fc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00183cb:	90                   	nop
c00183cc:	83 ec 0c             	sub    esp,0xc
c00183cf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183d6:	e8 f3 f6 fe ff       	call   c0007ace <rfree>
c00183db:	83 c4 10             	add    esp,0x10
c00183de:	83 ec 04             	sub    esp,0x4
c00183e1:	6a 00                	push   0x0
c00183e3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183ea:	50                   	push   eax
c00183eb:	6a 00                	push   0x0
c00183ed:	e8 06 b8 fe ff       	call   c0003bf8 <f_mount>
c00183f2:	83 c4 10             	add    esp,0x10
c00183f5:	b0 00                	mov    al,0x0
c00183f7:	eb 1b                	jmp    c0018414 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183f9:	8d 76 00             	lea    esi,[esi+0x0]
c00183fc:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018401:	83 c0 01             	add    eax,0x1
c0018404:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018409:	8d 76 00             	lea    esi,[esi+0x0]
c001840c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018413:	90                   	nop
c0018414:	81 c4 4c 03 00 00    	add    esp,0x34c
c001841a:	c3                   	ret    
c001841b:	90                   	nop

c001841c <FAT::allocateSwapfile(char const*, int)>:
c001841c:	55                   	push   ebp
c001841d:	57                   	push   edi
c001841e:	56                   	push   esi
c001841f:	53                   	push   ebx
c0018420:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018426:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018431:	83 ec 0c             	sub    esp,0xc
c0018434:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001843b:	e8 6e f6 fe ff       	call   c0007aae <malloc>
c0018440:	83 c4 10             	add    esp,0x10
c0018443:	89 c7                	mov    edi,eax
c0018445:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001844a:	83 ec 04             	sub    esp,0x4
c001844d:	50                   	push   eax
c001844e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018455:	57                   	push   edi
c0018456:	e8 bd 2a ff ff       	call   c000af18 <File::File(char const*, Process*)>
c001845b:	83 c4 10             	add    esp,0x10
c001845e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018465:	83 ec 04             	sub    esp,0x4
c0018468:	8d 44 24 13          	lea    eax,[esp+0x13]
c001846c:	50                   	push   eax
c001846d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018471:	50                   	push   eax
c0018472:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018479:	e8 02 2e ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c001847e:	83 c4 10             	add    esp,0x10
c0018481:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018488:	c1 e0 14             	shl    eax,0x14
c001848b:	89 c7                	mov    edi,eax
c001848d:	89 c5                	mov    ebp,eax
c001848f:	c1 fd 1f             	sar    ebp,0x1f
c0018492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018496:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001849a:	89 f9                	mov    ecx,edi
c001849c:	31 c1                	xor    ecx,eax
c001849e:	89 cb                	mov    ebx,ecx
c00184a0:	89 e9                	mov    ecx,ebp
c00184a2:	31 d1                	xor    ecx,edx
c00184a4:	89 ce                	mov    esi,ecx
c00184a6:	89 f0                	mov    eax,esi
c00184a8:	09 d8                	or     eax,ebx
c00184aa:	0f 84 9c 00 00 00    	je     c001854c <FAT::allocateSwapfile(char const*, int)+0x130>
c00184b0:	83 ec 0c             	sub    esp,0xc
c00184b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184ba:	e8 8d 2c ff ff       	call   c000b14c <File::unlink()>
c00184bf:	83 c4 10             	add    esp,0x10
c00184c2:	83 ec 08             	sub    esp,0x8
c00184c5:	6a 12                	push   0x12
c00184c7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184ce:	e8 01 2b ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c00184d3:	83 c4 10             	add    esp,0x10
c00184d6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184dd:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00184e3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00184ea:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184f1:	c1 e0 14             	shl    eax,0x14
c00184f4:	83 ec 04             	sub    esp,0x4
c00184f7:	6a 01                	push   0x1
c00184f9:	50                   	push   eax
c00184fa:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018501:	e8 aa cd fe ff       	call   c00052b0 <f_expand>
c0018506:	83 c4 10             	add    esp,0x10
c0018509:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018510:	8b 00                	mov    eax,DWORD PTR [eax]
c0018512:	83 c0 10             	add    eax,0x10
c0018515:	8b 00                	mov    eax,DWORD PTR [eax]
c0018517:	83 ec 0c             	sub    esp,0xc
c001851a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001851e:	52                   	push   edx
c001851f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018523:	52                   	push   edx
c0018524:	6a 00                	push   0x0
c0018526:	68 00 04 00 00       	push   0x400
c001852b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018532:	ff d0                	call   eax
c0018534:	83 c4 20             	add    esp,0x20
c0018537:	83 ec 0c             	sub    esp,0xc
c001853a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018541:	e8 ec 2a ff ff       	call   c000b032 <File::close()>
c0018546:	83 c4 10             	add    esp,0x10
c0018549:	8d 76 00             	lea    esi,[esi+0x0]
c001854c:	83 ec 08             	sub    esp,0x8
c001854f:	6a 01                	push   0x1
c0018551:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018558:	e8 77 2a ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c001855d:	83 c4 10             	add    esp,0x10
c0018560:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018567:	8b 00                	mov    eax,DWORD PTR [eax]
c0018569:	83 c0 0c             	add    eax,0xc
c001856c:	8b 00                	mov    eax,DWORD PTR [eax]
c001856e:	83 ec 0c             	sub    esp,0xc
c0018571:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018575:	52                   	push   edx
c0018576:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001857a:	52                   	push   edx
c001857b:	6a 00                	push   0x0
c001857d:	6a 04                	push   0x4
c001857f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018586:	ff d0                	call   eax
c0018588:	83 c4 20             	add    esp,0x20
c001858b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018592:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018598:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001859f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00185a6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00185a9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00185b0:	83 ec 0c             	sub    esp,0xc
c00185b3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185ba:	e8 73 2a ff ff       	call   c000b032 <File::close()>
c00185bf:	83 c4 10             	add    esp,0x10
c00185c2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00185c9:	ba 00 00 00 00       	mov    edx,0x0
c00185ce:	81 c4 3c 04 00 00    	add    esp,0x43c
c00185d4:	5b                   	pop    ebx
c00185d5:	5e                   	pop    esi
c00185d6:	5f                   	pop    edi
c00185d7:	5d                   	pop    ebp
c00185d8:	c3                   	ret    
c00185d9:	90                   	nop
c00185da:	66 90                	xchg   ax,ax

c00185dc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185dc:	57                   	push   edi
c00185dd:	56                   	push   esi
c00185de:	53                   	push   ebx
c00185df:	81 ec 50 02 00 00    	sub    esp,0x250
c00185e5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00185ed:	74 0d                	je     c00185fc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00185ef:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00185f7:	75 0f                	jne    c0018608 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00185f9:	8d 76 00             	lea    esi,[esi+0x0]
c00185fc:	b8 04 00 00 00       	mov    eax,0x4
c0018601:	e9 3a 01 00 00       	jmp    c0018740 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018606:	66 90                	xchg   ax,ax
c0018608:	83 ec 08             	sub    esp,0x8
c001860b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018612:	50                   	push   eax
c0018613:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001861a:	e8 d7 c0 fe ff       	call   c00046f6 <f_readdir>
c001861f:	83 c4 10             	add    esp,0x10
c0018622:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018629:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018630:	83 ec 0c             	sub    esp,0xc
c0018633:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001863a:	83 c0 16             	add    eax,0x16
c001863d:	50                   	push   eax
c001863e:	e8 2d 7f fe ff       	call   c0000570 <strlen>
c0018643:	83 c4 10             	add    esp,0x10
c0018646:	ba 00 00 00 00       	mov    edx,0x0
c001864b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001864f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018653:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001865a:	0f b6 c0             	movzx  eax,al
c001865d:	83 e0 10             	and    eax,0x10
c0018660:	74 0a                	je     c001866c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018662:	b8 02 00 00 00       	mov    eax,0x2
c0018667:	eb 0b                	jmp    c0018674 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018669:	8d 76 00             	lea    esi,[esi+0x0]
c001866c:	b8 01 00 00 00       	mov    eax,0x1
c0018671:	8d 76 00             	lea    esi,[esi+0x0]
c0018674:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018678:	83 ec 08             	sub    esp,0x8
c001867b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018682:	83 c0 16             	add    eax,0x16
c0018685:	50                   	push   eax
c0018686:	8d 44 24 14          	lea    eax,[esp+0x14]
c001868a:	83 c0 10             	add    eax,0x10
c001868d:	50                   	push   eax
c001868e:	e8 ad 7f fe ff       	call   c0000640 <strcpy>
c0018693:	83 c4 10             	add    esp,0x10
c0018696:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001869d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00186a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186a8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00186af:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00186b6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186bd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00186c4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00186cb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00186d2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00186d9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00186e0:	89 c6                	mov    esi,eax
c00186e2:	89 d7                	mov    edi,edx
c00186e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186e6:	89 c8                	mov    eax,ecx
c00186e8:	89 fa                	mov    edx,edi
c00186ea:	89 f3                	mov    ebx,esi
c00186ec:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00186f3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00186fa:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018701:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018708:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001870e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018715:	0f be c0             	movsx  eax,al
c0018718:	85 c0                	test   eax,eax
c001871a:	75 08                	jne    c0018724 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001871c:	b8 07 00 00 00       	mov    eax,0x7
c0018721:	eb 1d                	jmp    c0018740 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018723:	90                   	nop
c0018724:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001872b:	85 c0                	test   eax,eax
c001872d:	75 09                	jne    c0018738 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001872f:	b8 00 00 00 00       	mov    eax,0x0
c0018734:	eb 0a                	jmp    c0018740 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018736:	66 90                	xchg   ax,ax
c0018738:	b8 01 00 00 00       	mov    eax,0x1
c001873d:	8d 76 00             	lea    esi,[esi+0x0]
c0018740:	81 c4 50 02 00 00    	add    esp,0x250
c0018746:	5b                   	pop    ebx
c0018747:	5e                   	pop    esi
c0018748:	5f                   	pop    edi
c0018749:	c3                   	ret    
c001874a:	66 90                	xchg   ax,ax

c001874c <FAT::read(void*, unsigned long, void*, int*)>:
c001874c:	83 ec 1c             	sub    esp,0x1c
c001874f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018754:	74 0a                	je     c0018760 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018756:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001875b:	75 0b                	jne    c0018768 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001875d:	8d 76 00             	lea    esi,[esi+0x0]
c0018760:	b8 04 00 00 00       	mov    eax,0x4
c0018765:	eb 41                	jmp    c00187a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018767:	90                   	nop
c0018768:	8d 44 24 08          	lea    eax,[esp+0x8]
c001876c:	50                   	push   eax
c001876d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018771:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018775:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018779:	e8 9f b7 fe ff       	call   c0003f1d <f_read>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018785:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018789:	89 c2                	mov    edx,eax
c001878b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001878f:	89 10                	mov    DWORD PTR [eax],edx
c0018791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018795:	85 c0                	test   eax,eax
c0018797:	75 07                	jne    c00187a0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018799:	b8 00 00 00 00       	mov    eax,0x0
c001879e:	eb 08                	jmp    c00187a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00187a0:	b8 01 00 00 00       	mov    eax,0x1
c00187a5:	8d 76 00             	lea    esi,[esi+0x0]
c00187a8:	83 c4 1c             	add    esp,0x1c
c00187ab:	c3                   	ret    

c00187ac <FAT::write(void*, unsigned long, void*, int*)>:
c00187ac:	83 ec 1c             	sub    esp,0x1c
c00187af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187b4:	74 0a                	je     c00187c0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00187b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187bb:	75 0b                	jne    c00187c8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00187bd:	8d 76 00             	lea    esi,[esi+0x0]
c00187c0:	b8 04 00 00 00       	mov    eax,0x4
c00187c5:	eb 41                	jmp    c0018808 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187c7:	90                   	nop
c00187c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187cc:	50                   	push   eax
c00187cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187d9:	e8 3e b9 fe ff       	call   c000411c <f_write>
c00187de:	83 c4 10             	add    esp,0x10
c00187e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e9:	89 c2                	mov    edx,eax
c00187eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187ef:	89 10                	mov    DWORD PTR [eax],edx
c00187f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187f5:	85 c0                	test   eax,eax
c00187f7:	75 07                	jne    c0018800 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00187f9:	b8 00 00 00 00       	mov    eax,0x0
c00187fe:	eb 08                	jmp    c0018808 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018800:	b8 01 00 00 00       	mov    eax,0x1
c0018805:	8d 76 00             	lea    esi,[esi+0x0]
c0018808:	83 c4 1c             	add    esp,0x1c
c001880b:	c3                   	ret    

c001880c <FAT::close(void*)>:
c001880c:	83 ec 1c             	sub    esp,0x1c
c001880f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018814:	75 0a                	jne    c0018820 <FAT::close(void*)+0x14>
c0018816:	b8 04 00 00 00       	mov    eax,0x4
c001881b:	eb 3f                	jmp    c001885c <FAT::close(void*)+0x50>
c001881d:	8d 76 00             	lea    esi,[esi+0x0]
c0018820:	83 ec 0c             	sub    esp,0xc
c0018823:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018827:	e8 fd bb fe ff       	call   c0004429 <f_close>
c001882c:	83 c4 10             	add    esp,0x10
c001882f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018833:	83 ec 0c             	sub    esp,0xc
c0018836:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001883a:	e8 7f f2 fe ff       	call   c0007abe <free>
c001883f:	83 c4 10             	add    esp,0x10
c0018842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018846:	85 c0                	test   eax,eax
c0018848:	75 0a                	jne    c0018854 <FAT::close(void*)+0x48>
c001884a:	b8 00 00 00 00       	mov    eax,0x0
c001884f:	eb 0b                	jmp    c001885c <FAT::close(void*)+0x50>
c0018851:	8d 76 00             	lea    esi,[esi+0x0]
c0018854:	b8 01 00 00 00       	mov    eax,0x1
c0018859:	8d 76 00             	lea    esi,[esi+0x0]
c001885c:	83 c4 1c             	add    esp,0x1c
c001885f:	c3                   	ret    

c0018860 <FAT::closeDir(void*)>:
c0018860:	83 ec 1c             	sub    esp,0x1c
c0018863:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018868:	75 0a                	jne    c0018874 <FAT::closeDir(void*)+0x14>
c001886a:	b8 04 00 00 00       	mov    eax,0x4
c001886f:	eb 3f                	jmp    c00188b0 <FAT::closeDir(void*)+0x50>
c0018871:	8d 76 00             	lea    esi,[esi+0x0]
c0018874:	83 ec 0c             	sub    esp,0xc
c0018877:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001887b:	e8 54 be fe ff       	call   c00046d4 <f_closedir>
c0018880:	83 c4 10             	add    esp,0x10
c0018883:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018887:	83 ec 0c             	sub    esp,0xc
c001888a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001888e:	e8 2b f2 fe ff       	call   c0007abe <free>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001889a:	85 c0                	test   eax,eax
c001889c:	75 0a                	jne    c00188a8 <FAT::closeDir(void*)+0x48>
c001889e:	b8 00 00 00 00       	mov    eax,0x0
c00188a3:	eb 0b                	jmp    c00188b0 <FAT::closeDir(void*)+0x50>
c00188a5:	8d 76 00             	lea    esi,[esi+0x0]
c00188a8:	b8 01 00 00 00       	mov    eax,0x1
c00188ad:	8d 76 00             	lea    esi,[esi+0x0]
c00188b0:	83 c4 1c             	add    esp,0x1c
c00188b3:	c3                   	ret    

c00188b4 <FAT::seek(void*, unsigned long long)>:
c00188b4:	83 ec 2c             	sub    esp,0x2c
c00188b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188c7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00188cc:	75 0a                	jne    c00188d8 <FAT::seek(void*, unsigned long long)+0x24>
c00188ce:	b8 04 00 00 00       	mov    eax,0x4
c00188d3:	eb 33                	jmp    c0018908 <FAT::seek(void*, unsigned long long)+0x54>
c00188d5:	8d 76 00             	lea    esi,[esi+0x0]
c00188d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188dc:	83 ec 08             	sub    esp,0x8
c00188df:	50                   	push   eax
c00188e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188e4:	e8 6f bb fe ff       	call   c0004458 <f_lseek>
c00188e9:	83 c4 10             	add    esp,0x10
c00188ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00188f4:	85 c0                	test   eax,eax
c00188f6:	75 08                	jne    c0018900 <FAT::seek(void*, unsigned long long)+0x4c>
c00188f8:	b8 00 00 00 00       	mov    eax,0x0
c00188fd:	eb 09                	jmp    c0018908 <FAT::seek(void*, unsigned long long)+0x54>
c00188ff:	90                   	nop
c0018900:	b8 01 00 00 00       	mov    eax,0x1
c0018905:	8d 76 00             	lea    esi,[esi+0x0]
c0018908:	83 c4 2c             	add    esp,0x2c
c001890b:	c3                   	ret    

c001890c <fatWrapperReadDisk>:
c001890c:	53                   	push   ebx
c001890d:	83 ec 18             	sub    esp,0x18
c0018910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018914:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018918:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001891d:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018924:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018928:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001892c:	ba 00 00 00 00       	mov    edx,0x0
c0018931:	83 ec 0c             	sub    esp,0xc
c0018934:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018938:	53                   	push   ebx
c0018939:	52                   	push   edx
c001893a:	50                   	push   eax
c001893b:	51                   	push   ecx
c001893c:	e8 6b 48 ff ff       	call   c000d1ac <LogicalDisk::read(unsigned long long, int, void*)>
c0018941:	83 c4 20             	add    esp,0x20
c0018944:	83 c4 18             	add    esp,0x18
c0018947:	5b                   	pop    ebx
c0018948:	c3                   	ret    
c0018949:	8d 76 00             	lea    esi,[esi+0x0]

c001894c <fatWrapperWriteDisk>:
c001894c:	53                   	push   ebx
c001894d:	83 ec 18             	sub    esp,0x18
c0018950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018954:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018958:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001895d:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018964:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018968:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001896c:	ba 00 00 00 00       	mov    edx,0x0
c0018971:	83 ec 0c             	sub    esp,0xc
c0018974:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018978:	53                   	push   ebx
c0018979:	52                   	push   edx
c001897a:	50                   	push   eax
c001897b:	51                   	push   ecx
c001897c:	e8 97 48 ff ff       	call   c000d218 <LogicalDisk::write(unsigned long long, int, void*)>
c0018981:	83 c4 20             	add    esp,0x20
c0018984:	83 c4 18             	add    esp,0x18
c0018987:	5b                   	pop    ebx
c0018988:	c3                   	ret    
c0018989:	8d 76 00             	lea    esi,[esi+0x0]

c001898c <fatWrapperIoctl>:
c001898c:	53                   	push   ebx
c001898d:	83 ec 28             	sub    esp,0x28
c0018990:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018994:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018998:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001899c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189a5:	83 f8 02             	cmp    eax,0x2
c00189a8:	75 32                	jne    c00189dc <fatWrapperIoctl+0x50>
c00189aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189b7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189c4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189ce:	66 89 02             	mov    WORD PTR [edx],ax
c00189d1:	b8 00 00 00 00       	mov    eax,0x0
c00189d6:	e9 c5 00 00 00       	jmp    c0018aa0 <fatWrapperIoctl+0x114>
c00189db:	90                   	nop
c00189dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189e1:	83 f8 01             	cmp    eax,0x1
c00189e4:	75 6a                	jne    c0018a50 <fatWrapperIoctl+0xc4>
c00189e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189f3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018a00:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018a06:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a0c:	89 c8                	mov    eax,ecx
c0018a0e:	89 da                	mov    edx,ebx
c0018a10:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a14:	c1 e0 0a             	shl    eax,0xa
c0018a17:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a1c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a23:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a29:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a2f:	89 cb                	mov    ebx,ecx
c0018a31:	c1 fb 1f             	sar    ebx,0x1f
c0018a34:	53                   	push   ebx
c0018a35:	51                   	push   ecx
c0018a36:	52                   	push   edx
c0018a37:	50                   	push   eax
c0018a38:	e8 73 5b 00 00       	call   c001e5b0 <__udivdi3>
c0018a3d:	83 c4 10             	add    esp,0x10
c0018a40:	89 c2                	mov    edx,eax
c0018a42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a46:	89 10                	mov    DWORD PTR [eax],edx
c0018a48:	b8 00 00 00 00       	mov    eax,0x0
c0018a4d:	eb 51                	jmp    c0018aa0 <fatWrapperIoctl+0x114>
c0018a4f:	90                   	nop
c0018a50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a55:	85 c0                	test   eax,eax
c0018a57:	75 07                	jne    c0018a60 <fatWrapperIoctl+0xd4>
c0018a59:	b8 00 00 00 00       	mov    eax,0x0
c0018a5e:	eb 40                	jmp    c0018aa0 <fatWrapperIoctl+0x114>
c0018a60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a65:	83 f8 03             	cmp    eax,0x3
c0018a68:	75 1a                	jne    c0018a84 <fatWrapperIoctl+0xf8>
c0018a6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a76:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a7c:	b8 00 00 00 00       	mov    eax,0x0
c0018a81:	eb 1d                	jmp    c0018aa0 <fatWrapperIoctl+0x114>
c0018a83:	90                   	nop
c0018a84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a89:	83 f8 04             	cmp    eax,0x4
c0018a8c:	75 0a                	jne    c0018a98 <fatWrapperIoctl+0x10c>
c0018a8e:	b8 00 00 00 00       	mov    eax,0x0
c0018a93:	eb 0b                	jmp    c0018aa0 <fatWrapperIoctl+0x114>
c0018a95:	8d 76 00             	lea    esi,[esi+0x0]
c0018a98:	b8 04 00 00 00       	mov    eax,0x4
c0018a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa0:	83 c4 28             	add    esp,0x28
c0018aa3:	5b                   	pop    ebx
c0018aa4:	c3                   	ret    
c0018aa5:	90                   	nop
c0018aa6:	66 90                	xchg   ax,ax

c0018aa8 <FAT::FAT()>:
c0018aa8:	83 ec 1c             	sub    esp,0x1c
c0018aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aaf:	83 ec 0c             	sub    esp,0xc
c0018ab2:	50                   	push   eax
c0018ab3:	e8 00 22 ff ff       	call   c000acb8 <Filesystem::Filesystem()>
c0018ab8:	83 c4 10             	add    esp,0x10
c0018abb:	ba 10 16 02 c0       	mov    edx,0xc0021610
c0018ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ac4:	89 10                	mov    DWORD PTR [eax],edx
c0018ac6:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018ad0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018ad8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018add:	7f 19                	jg     c0018af8 <FAT::FAT()+0x50>
c0018adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ae3:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018aee:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018af3:	eb e3                	jmp    c0018ad8 <FAT::FAT()+0x30>
c0018af5:	8d 76 00             	lea    esi,[esi+0x0]
c0018af8:	90                   	nop
c0018af9:	83 c4 1c             	add    esp,0x1c
c0018afc:	c3                   	ret    
c0018afd:	90                   	nop
c0018afe:	66 90                	xchg   ax,ax

c0018b00 <FAT::fixFilepath(char*)>:
c0018b00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b04:	8a 00                	mov    al,BYTE PTR [eax]
c0018b06:	0f be c0             	movsx  eax,al
c0018b09:	83 f8 40             	cmp    eax,0x40
c0018b0c:	7e 2e                	jle    c0018b3c <FAT::fixFilepath(char*)+0x3c>
c0018b0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b12:	8a 00                	mov    al,BYTE PTR [eax]
c0018b14:	83 e8 41             	sub    eax,0x41
c0018b17:	88 c2                	mov    dl,al
c0018b19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b1d:	88 10                	mov    BYTE PTR [eax],dl
c0018b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b23:	8a 00                	mov    al,BYTE PTR [eax]
c0018b25:	0f be c0             	movsx  eax,al
c0018b28:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b2f:	83 c0 30             	add    eax,0x30
c0018b32:	88 c2                	mov    dl,al
c0018b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b38:	88 10                	mov    BYTE PTR [eax],dl
c0018b3a:	66 90                	xchg   ax,ax
c0018b3c:	90                   	nop
c0018b3d:	c3                   	ret    
c0018b3e:	66 90                	xchg   ax,ax

c0018b40 <FAT::open(char const*, void**, FileOpenMode)>:
c0018b40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b4e:	74 0c                	je     c0018b5c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b58:	75 0e                	jne    c0018b68 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b5a:	66 90                	xchg   ax,ax
c0018b5c:	b8 04 00 00 00       	mov    eax,0x4
c0018b61:	e9 46 01 00 00       	jmp    c0018cac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b66:	66 90                	xchg   ax,ax
c0018b68:	83 ec 08             	sub    esp,0x8
c0018b6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b76:	50                   	push   eax
c0018b77:	e8 c4 7a fe ff       	call   c0000640 <strcpy>
c0018b7c:	83 c4 10             	add    esp,0x10
c0018b7f:	83 ec 08             	sub    esp,0x8
c0018b82:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b86:	50                   	push   eax
c0018b87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b8e:	e8 6d ff ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018b93:	83 c4 10             	add    esp,0x10
c0018b96:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018ba5:	83 e0 01             	and    eax,0x1
c0018ba8:	74 12                	je     c0018bbc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018baa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bb1:	83 c8 01             	or     eax,0x1
c0018bb4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bbb:	90                   	nop
c0018bbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bc3:	83 e0 04             	and    eax,0x4
c0018bc6:	74 24                	je     c0018bec <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018bc8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bcf:	83 c8 30             	or     eax,0x30
c0018bd2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bd9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018be0:	83 c8 02             	or     eax,0x2
c0018be3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bea:	66 90                	xchg   ax,ax
c0018bec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bf3:	83 e0 02             	and    eax,0x2
c0018bf6:	74 14                	je     c0018c0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018bf8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bff:	83 c8 02             	or     eax,0x2
c0018c02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c09:	8d 76 00             	lea    esi,[esi+0x0]
c0018c0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c13:	83 e0 08             	and    eax,0x8
c0018c16:	74 14                	je     c0018c2c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c18:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c1f:	83 c8 04             	or     eax,0x4
c0018c22:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c29:	8d 76 00             	lea    esi,[esi+0x0]
c0018c2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c33:	83 e0 10             	and    eax,0x10
c0018c36:	74 14                	je     c0018c4c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c3f:	83 c8 08             	or     eax,0x8
c0018c42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c49:	8d 76 00             	lea    esi,[esi+0x0]
c0018c4c:	83 ec 0c             	sub    esp,0xc
c0018c4f:	68 28 02 00 00       	push   0x228
c0018c54:	e8 55 ee fe ff       	call   c0007aae <malloc>
c0018c59:	83 c4 10             	add    esp,0x10
c0018c5c:	89 c2                	mov    edx,eax
c0018c5e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c65:	89 10                	mov    DWORD PTR [eax],edx
c0018c67:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c6f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c78:	83 ec 04             	sub    esp,0x4
c0018c7b:	52                   	push   edx
c0018c7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c80:	52                   	push   edx
c0018c81:	50                   	push   eax
c0018c82:	e8 d3 af fe ff       	call   c0003c5a <f_open>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c91:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c99:	74 09                	je     c0018ca4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c9b:	b8 01 00 00 00       	mov    eax,0x1
c0018ca0:	eb 0a                	jmp    c0018cac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018ca2:	66 90                	xchg   ax,ax
c0018ca4:	b8 00 00 00 00       	mov    eax,0x0
c0018ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018cb2:	c3                   	ret    
c0018cb3:	90                   	nop

c0018cb4 <FAT::openDir(char const*, void**)>:
c0018cb4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018cba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018cc2:	74 0c                	je     c0018cd0 <FAT::openDir(char const*, void**)+0x1c>
c0018cc4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018ccc:	75 0e                	jne    c0018cdc <FAT::openDir(char const*, void**)+0x28>
c0018cce:	66 90                	xchg   ax,ax
c0018cd0:	b8 04 00 00 00       	mov    eax,0x4
c0018cd5:	e9 82 00 00 00       	jmp    c0018d5c <FAT::openDir(char const*, void**)+0xa8>
c0018cda:	66 90                	xchg   ax,ax
c0018cdc:	83 ec 08             	sub    esp,0x8
c0018cdf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ce6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cea:	50                   	push   eax
c0018ceb:	e8 50 79 fe ff       	call   c0000640 <strcpy>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	83 ec 08             	sub    esp,0x8
c0018cf6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018cfa:	50                   	push   eax
c0018cfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018d02:	e8 f9 fd ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018d07:	83 c4 10             	add    esp,0x10
c0018d0a:	83 ec 0c             	sub    esp,0xc
c0018d0d:	6a 30                	push   0x30
c0018d0f:	e8 9a ed fe ff       	call   c0007aae <malloc>
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	89 c2                	mov    edx,eax
c0018d19:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d20:	89 10                	mov    DWORD PTR [eax],edx
c0018d22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2b:	83 ec 08             	sub    esp,0x8
c0018d2e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d32:	52                   	push   edx
c0018d33:	50                   	push   eax
c0018d34:	e8 d0 b8 fe ff       	call   c0004609 <f_opendir>
c0018d39:	83 c4 10             	add    esp,0x10
c0018d3c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d43:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d4b:	74 07                	je     c0018d54 <FAT::openDir(char const*, void**)+0xa0>
c0018d4d:	b8 01 00 00 00       	mov    eax,0x1
c0018d52:	eb 08                	jmp    c0018d5c <FAT::openDir(char const*, void**)+0xa8>
c0018d54:	b8 00 00 00 00       	mov    eax,0x0
c0018d59:	8d 76 00             	lea    esi,[esi+0x0]
c0018d5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d62:	c3                   	ret    
c0018d63:	90                   	nop

c0018d64 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d64:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d6a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d72:	75 0c                	jne    c0018d80 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d74:	b8 04 00 00 00       	mov    eax,0x4
c0018d79:	e9 d6 00 00 00       	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d7e:	66 90                	xchg   ax,ax
c0018d80:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d88:	75 0a                	jne    c0018d94 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d8a:	b8 04 00 00 00       	mov    eax,0x4
c0018d8f:	e9 c0 00 00 00       	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d94:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d9c:	75 0a                	jne    c0018da8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d9e:	b8 04 00 00 00       	mov    eax,0x4
c0018da3:	e9 ac 00 00 00       	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018da8:	83 ec 08             	sub    esp,0x8
c0018dab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018db2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018db9:	50                   	push   eax
c0018dba:	e8 81 78 fe ff       	call   c0000640 <strcpy>
c0018dbf:	83 c4 10             	add    esp,0x10
c0018dc2:	83 ec 08             	sub    esp,0x8
c0018dc5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018dcc:	50                   	push   eax
c0018dcd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018dd4:	e8 27 fd ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	83 ec 08             	sub    esp,0x8
c0018ddf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018de3:	50                   	push   eax
c0018de4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018deb:	50                   	push   eax
c0018dec:	e8 97 b9 fe ff       	call   c0004788 <f_stat>
c0018df1:	83 c4 10             	add    esp,0x10
c0018df4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018dfb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018e02:	85 c0                	test   eax,eax
c0018e04:	74 0a                	je     c0018e10 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018e06:	83 f8 04             	cmp    eax,0x4
c0018e09:	74 39                	je     c0018e44 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018e0b:	eb 3f                	jmp    c0018e4c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e14:	0f b6 c0             	movzx  eax,al
c0018e17:	83 e0 10             	and    eax,0x10
c0018e1a:	0f 95 c2             	setne  dl
c0018e1d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e24:	88 10                	mov    BYTE PTR [eax],dl
c0018e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e2a:	ba 00 00 00 00       	mov    edx,0x0
c0018e2f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e36:	89 01                	mov    DWORD PTR [ecx],eax
c0018e38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e3b:	b8 00 00 00 00       	mov    eax,0x0
c0018e40:	eb 12                	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e42:	66 90                	xchg   ax,ax
c0018e44:	b8 02 00 00 00       	mov    eax,0x2
c0018e49:	eb 09                	jmp    c0018e54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e4b:	90                   	nop
c0018e4c:	b8 01 00 00 00       	mov    eax,0x1
c0018e51:	8d 76 00             	lea    esi,[esi+0x0]
c0018e54:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e5a:	c3                   	ret    
c0018e5b:	90                   	nop

c0018e5c <FAT::unlink(char const*)>:
c0018e5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e6a:	75 08                	jne    c0018e74 <FAT::unlink(char const*)+0x18>
c0018e6c:	b8 04 00 00 00       	mov    eax,0x4
c0018e71:	eb 61                	jmp    c0018ed4 <FAT::unlink(char const*)+0x78>
c0018e73:	90                   	nop
c0018e74:	83 ec 08             	sub    esp,0x8
c0018e77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e82:	50                   	push   eax
c0018e83:	e8 b8 77 fe ff       	call   c0000640 <strcpy>
c0018e88:	83 c4 10             	add    esp,0x10
c0018e8b:	83 ec 08             	sub    esp,0x8
c0018e8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e92:	50                   	push   eax
c0018e93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e9a:	e8 61 fc ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018e9f:	83 c4 10             	add    esp,0x10
c0018ea2:	83 ec 0c             	sub    esp,0xc
c0018ea5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ea9:	50                   	push   eax
c0018eaa:	e8 4b bb fe ff       	call   c00049fa <f_unlink>
c0018eaf:	83 c4 10             	add    esp,0x10
c0018eb2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018eb9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018ec0:	85 c0                	test   eax,eax
c0018ec2:	75 08                	jne    c0018ecc <FAT::unlink(char const*)+0x70>
c0018ec4:	b8 00 00 00 00       	mov    eax,0x0
c0018ec9:	eb 09                	jmp    c0018ed4 <FAT::unlink(char const*)+0x78>
c0018ecb:	90                   	nop
c0018ecc:	b8 01 00 00 00       	mov    eax,0x1
c0018ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ed4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018eda:	c3                   	ret    
c0018edb:	90                   	nop

c0018edc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018edc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018ee2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018ee9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018ef0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018ef4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018ef8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f00:	75 0a                	jne    c0018f0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018f02:	b8 04 00 00 00       	mov    eax,0x4
c0018f07:	e9 7c 01 00 00       	jmp    c0019088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018f0c:	83 ec 08             	sub    esp,0x8
c0018f0f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f16:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f1a:	50                   	push   eax
c0018f1b:	e8 20 77 fe ff       	call   c0000640 <strcpy>
c0018f20:	83 c4 10             	add    esp,0x10
c0018f23:	83 ec 08             	sub    esp,0x8
c0018f26:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f2a:	50                   	push   eax
c0018f2b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f32:	e8 c9 fb ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f42:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f4a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f4f:	83 e0 01             	and    eax,0x1
c0018f52:	74 14                	je     c0018f68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0018f54:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f5b:	83 c8 01             	or     eax,0x1
c0018f5e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f65:	8d 76 00             	lea    esi,[esi+0x0]
c0018f68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f6d:	83 e0 02             	and    eax,0x2
c0018f70:	74 12                	je     c0018f84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0018f72:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f79:	83 c8 20             	or     eax,0x20
c0018f7c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f83:	90                   	nop
c0018f84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f89:	83 e0 04             	and    eax,0x4
c0018f8c:	74 12                	je     c0018fa0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0018f8e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f95:	83 c8 04             	or     eax,0x4
c0018f98:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f9f:	90                   	nop
c0018fa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fa5:	83 e0 08             	and    eax,0x8
c0018fa8:	74 12                	je     c0018fbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0018faa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fb1:	83 c8 02             	or     eax,0x2
c0018fb4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fbb:	90                   	nop
c0018fbc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fc1:	83 e0 01             	and    eax,0x1
c0018fc4:	74 12                	je     c0018fd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018fc6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fcd:	83 c8 01             	or     eax,0x1
c0018fd0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fd7:	90                   	nop
c0018fd8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fdd:	83 e0 02             	and    eax,0x2
c0018fe0:	74 12                	je     c0018ff4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0018fe2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fe9:	83 c8 20             	or     eax,0x20
c0018fec:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018ff3:	90                   	nop
c0018ff4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ff9:	83 e0 04             	and    eax,0x4
c0018ffc:	74 12                	je     c0019010 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0018ffe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019005:	83 c8 04             	or     eax,0x4
c0019008:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001900f:	90                   	nop
c0019010:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019015:	83 e0 08             	and    eax,0x8
c0019018:	74 12                	je     c001902c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001901a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019021:	83 c8 02             	or     eax,0x2
c0019024:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001902b:	90                   	nop
c001902c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019033:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001903a:	09 d0                	or     eax,edx
c001903c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019043:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001904b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019053:	83 ec 04             	sub    esp,0x4
c0019056:	52                   	push   edx
c0019057:	50                   	push   eax
c0019058:	8d 44 24 24          	lea    eax,[esp+0x24]
c001905c:	50                   	push   eax
c001905d:	e8 0d be fe ff       	call   c0004e6f <f_chmod>
c0019062:	83 c4 10             	add    esp,0x10
c0019065:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001906c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019073:	85 c0                	test   eax,eax
c0019075:	75 09                	jne    c0019080 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019077:	b8 00 00 00 00       	mov    eax,0x0
c001907c:	eb 0a                	jmp    c0019088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001907e:	66 90                	xchg   ax,ax
c0019080:	b8 01 00 00 00       	mov    eax,0x1
c0019085:	8d 76 00             	lea    esi,[esi+0x0]
c0019088:	81 c4 2c 01 00 00    	add    esp,0x12c
c001908e:	c3                   	ret    
c001908f:	90                   	nop

c0019090 <FAT::rename(char const*, char const*)>:
c0019090:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019096:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001909e:	74 0c                	je     c00190ac <FAT::rename(char const*, char const*)+0x1c>
c00190a0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00190a8:	75 0e                	jne    c00190b8 <FAT::rename(char const*, char const*)+0x28>
c00190aa:	66 90                	xchg   ax,ax
c00190ac:	b8 04 00 00 00       	mov    eax,0x4
c00190b1:	e9 9e 00 00 00       	jmp    c0019154 <FAT::rename(char const*, char const*)+0xc4>
c00190b6:	66 90                	xchg   ax,ax
c00190b8:	83 ec 08             	sub    esp,0x8
c00190bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190c9:	50                   	push   eax
c00190ca:	e8 71 75 fe ff       	call   c0000640 <strcpy>
c00190cf:	83 c4 10             	add    esp,0x10
c00190d2:	83 ec 08             	sub    esp,0x8
c00190d5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00190dc:	50                   	push   eax
c00190dd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190e4:	e8 17 fa ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c00190e9:	83 c4 10             	add    esp,0x10
c00190ec:	83 ec 08             	sub    esp,0x8
c00190ef:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00190f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190fa:	50                   	push   eax
c00190fb:	e8 40 75 fe ff       	call   c0000640 <strcpy>
c0019100:	83 c4 10             	add    esp,0x10
c0019103:	83 ec 08             	sub    esp,0x8
c0019106:	8d 44 24 14          	lea    eax,[esp+0x14]
c001910a:	50                   	push   eax
c001910b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019112:	e8 e9 f9 ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	83 ec 08             	sub    esp,0x8
c001911d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019121:	50                   	push   eax
c0019122:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019129:	50                   	push   eax
c001912a:	e8 88 bb fe ff       	call   c0004cb7 <f_rename>
c001912f:	83 c4 10             	add    esp,0x10
c0019132:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019139:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019140:	85 c0                	test   eax,eax
c0019142:	75 08                	jne    c001914c <FAT::rename(char const*, char const*)+0xbc>
c0019144:	b8 00 00 00 00       	mov    eax,0x0
c0019149:	eb 09                	jmp    c0019154 <FAT::rename(char const*, char const*)+0xc4>
c001914b:	90                   	nop
c001914c:	b8 01 00 00 00       	mov    eax,0x1
c0019151:	8d 76 00             	lea    esi,[esi+0x0]
c0019154:	81 c4 1c 02 00 00    	add    esp,0x21c
c001915a:	c3                   	ret    
c001915b:	90                   	nop

c001915c <FAT::mkdir(char const*)>:
c001915c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019162:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001916a:	75 08                	jne    c0019174 <FAT::mkdir(char const*)+0x18>
c001916c:	b8 04 00 00 00       	mov    eax,0x4
c0019171:	eb 61                	jmp    c00191d4 <FAT::mkdir(char const*)+0x78>
c0019173:	90                   	nop
c0019174:	83 ec 08             	sub    esp,0x8
c0019177:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001917e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019182:	50                   	push   eax
c0019183:	e8 b8 74 fe ff       	call   c0000640 <strcpy>
c0019188:	83 c4 10             	add    esp,0x10
c001918b:	83 ec 08             	sub    esp,0x8
c001918e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019192:	50                   	push   eax
c0019193:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001919a:	e8 61 f9 ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c001919f:	83 c4 10             	add    esp,0x10
c00191a2:	83 ec 0c             	sub    esp,0xc
c00191a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00191a9:	50                   	push   eax
c00191aa:	e8 6d b9 fe ff       	call   c0004b1c <f_mkdir>
c00191af:	83 c4 10             	add    esp,0x10
c00191b2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191b9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00191c0:	85 c0                	test   eax,eax
c00191c2:	75 08                	jne    c00191cc <FAT::mkdir(char const*)+0x70>
c00191c4:	b8 00 00 00 00       	mov    eax,0x0
c00191c9:	eb 09                	jmp    c00191d4 <FAT::mkdir(char const*)+0x78>
c00191cb:	90                   	nop
c00191cc:	b8 01 00 00 00       	mov    eax,0x1
c00191d1:	8d 76 00             	lea    esi,[esi+0x0]
c00191d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191da:	c3                   	ret    
c00191db:	90                   	nop

c00191dc <FAT::exists(char const*)>:
c00191dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00191e2:	83 ec 08             	sub    esp,0x8
c00191e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191ec:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191f0:	50                   	push   eax
c00191f1:	e8 4a 74 fe ff       	call   c0000640 <strcpy>
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	83 ec 08             	sub    esp,0x8
c00191fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019200:	50                   	push   eax
c0019201:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019208:	e8 f3 f8 ff ff       	call   c0018b00 <FAT::fixFilepath(char*)>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	83 ec 08             	sub    esp,0x8
c0019213:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001921a:	50                   	push   eax
c001921b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001921f:	50                   	push   eax
c0019220:	e8 63 b5 fe ff       	call   c0004788 <f_stat>
c0019225:	83 c4 10             	add    esp,0x10
c0019228:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001922f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019236:	85 c0                	test   eax,eax
c0019238:	75 06                	jne    c0019240 <FAT::exists(char const*)+0x64>
c001923a:	b0 01                	mov    al,0x1
c001923c:	eb 06                	jmp    c0019244 <FAT::exists(char const*)+0x68>
c001923e:	66 90                	xchg   ax,ax
c0019240:	b0 00                	mov    al,0x0
c0019242:	66 90                	xchg   ax,ax
c0019244:	81 c4 2c 02 00 00    	add    esp,0x22c
c001924a:	c3                   	ret    
c001924b:	90                   	nop

c001924c <isoReadDiscSectorHelper>:
c001924c:	83 ec 2c             	sub    esp,0x2c
c001924f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019253:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019257:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001925c:	83 e8 41             	sub    eax,0x41
c001925f:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0019266:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001926a:	ba 00 00 00 00       	mov    edx,0x0
c001926f:	83 ec 0c             	sub    esp,0xc
c0019272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019276:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001927a:	52                   	push   edx
c001927b:	50                   	push   eax
c001927c:	51                   	push   ecx
c001927d:	e8 2a 3f ff ff       	call   c000d1ac <LogicalDisk::read(unsigned long long, int, void*)>
c0019282:	83 c4 20             	add    esp,0x20
c0019285:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019289:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001928e:	74 0c                	je     c001929c <isoReadDiscSectorHelper+0x50>
c0019290:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019294:	c1 e0 0b             	shl    eax,0xb
c0019297:	eb 0b                	jmp    c00192a4 <isoReadDiscSectorHelper+0x58>
c0019299:	8d 76 00             	lea    esi,[esi+0x0]
c001929c:	b8 00 00 00 00       	mov    eax,0x0
c00192a1:	8d 76 00             	lea    esi,[esi+0x0]
c00192a4:	83 c4 2c             	add    esp,0x2c
c00192a7:	c3                   	ret    

c00192a8 <iso_kprintf>:
c00192a8:	83 ec 0c             	sub    esp,0xc
c00192ab:	83 ec 08             	sub    esp,0x8
c00192ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192b2:	68 19 10 02 c0       	push   0xc0021019
c00192b7:	e8 da 16 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	90                   	nop
c00192c0:	83 c4 0c             	add    esp,0xc
c00192c3:	c3                   	ret    

c00192c4 <iso_kprintfd>:
c00192c4:	83 ec 0c             	sub    esp,0xc
c00192c7:	83 ec 08             	sub    esp,0x8
c00192ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192ce:	68 3b 00 02 c0       	push   0xc002003b
c00192d3:	e8 be 16 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	90                   	nop
c00192dc:	83 c4 0c             	add    esp,0xc
c00192df:	c3                   	ret    

c00192e0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00192e0:	b8 08 00 00 00       	mov    eax,0x8
c00192e5:	c3                   	ret    

c00192e6 <ISO9660::getName()>:
c00192e6:	b8 70 16 02 c0       	mov    eax,0xc0021670
c00192eb:	c3                   	ret    

c00192ec <ISO9660::closeDir(void*)>:
c00192ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00192f2:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00192f5:	90                   	nop

c00192f6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00192f6:	b8 01 00 00 00       	mov    eax,0x1
c00192fb:	c3                   	ret    

c00192fc <ISO9660::unlink(char const*)>:
c00192fc:	b8 01 00 00 00       	mov    eax,0x1
c0019301:	c3                   	ret    

c0019302 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019302:	b8 03 00 00 00       	mov    eax,0x3
c0019307:	c3                   	ret    

c0019308 <ISO9660::rename(char const*, char const*)>:
c0019308:	b8 01 00 00 00       	mov    eax,0x1
c001930d:	c3                   	ret    

c001930e <ISO9660::mkdir(char const*)>:
c001930e:	b8 01 00 00 00       	mov    eax,0x1
c0019313:	c3                   	ret    

c0019314 <ISO9660::~ISO9660()>:
c0019314:	83 ec 0c             	sub    esp,0xc
c0019317:	ba b0 17 02 c0       	mov    edx,0xc00217b0
c001931c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019320:	89 10                	mov    DWORD PTR [eax],edx
c0019322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019326:	83 ec 0c             	sub    esp,0xc
c0019329:	50                   	push   eax
c001932a:	e8 ad 19 ff ff       	call   c000acdc <Filesystem::~Filesystem()>
c001932f:	83 c4 10             	add    esp,0x10
c0019332:	90                   	nop
c0019333:	83 c4 0c             	add    esp,0xc
c0019336:	c3                   	ret    
c0019337:	90                   	nop

c0019338 <ISO9660::~ISO9660()>:
c0019338:	83 ec 0c             	sub    esp,0xc
c001933b:	83 ec 0c             	sub    esp,0xc
c001933e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019342:	e8 cd ff ff ff       	call   c0019314 <ISO9660::~ISO9660()>
c0019347:	83 c4 10             	add    esp,0x10
c001934a:	83 ec 08             	sub    esp,0x8
c001934d:	6a 08                	push   0x8
c001934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019353:	e8 11 15 ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c0019358:	83 c4 10             	add    esp,0x10
c001935b:	83 c4 0c             	add    esp,0xc
c001935e:	c3                   	ret    
c001935f:	90                   	nop

c0019360 <ISO9660::exists(char const*)>:
c0019360:	83 ec 18             	sub    esp,0x18
c0019363:	68 8b 16 02 c0       	push   0xc002168b
c0019368:	e8 06 75 ff ff       	call   c0010873 <KePanic(char const*)>
c001936d:	31 c0                	xor    eax,eax
c001936f:	83 c4 1c             	add    esp,0x1c
c0019372:	c3                   	ret    
c0019373:	90                   	nop

c0019374 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019374:	56                   	push   esi
c0019375:	53                   	push   ebx
c0019376:	53                   	push   ebx
c0019377:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001937b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001937f:	85 db                	test   ebx,ebx
c0019381:	0f 84 ca 00 00 00    	je     c0019451 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019387:	85 f6                	test   esi,esi
c0019389:	0f 84 c2 00 00 00    	je     c0019451 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001938f:	b8 03 00 00 00       	mov    eax,0x3
c0019394:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019399:	0f 85 b7 00 00 00    	jne    c0019456 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001939f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00193a1:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00193a8:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00193ae:	74 1b                	je     c00193cb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00193b0:	85 c0                	test   eax,eax
c00193b2:	74 10                	je     c00193c4 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00193b4:	83 ec 0c             	sub    esp,0xc
c00193b7:	68 a9 16 02 c0       	push   0xc00216a9
c00193bc:	e8 b2 74 ff ff       	call   c0010873 <KePanic(char const*)>
c00193c1:	83 c4 10             	add    esp,0x10
c00193c4:	8a 03                	mov    al,BYTE PTR [ebx]
c00193c6:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193ce:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193d5:	85 c0                	test   eax,eax
c00193d7:	74 09                	je     c00193e2 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00193d9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00193e0:	74 48                	je     c001942a <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00193e2:	83 ec 0c             	sub    esp,0xc
c00193e5:	68 b9 16 02 c0       	push   0xc00216b9
c00193ea:	e8 a7 15 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00193ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193f2:	83 c4 10             	add    esp,0x10
c00193f5:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193fc:	85 c0                	test   eax,eax
c00193fe:	74 17                	je     c0019417 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019400:	83 ec 0c             	sub    esp,0xc
c0019403:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001940a:	68 d9 16 02 c0       	push   0xc00216d9
c001940f:	e8 82 15 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0019414:	83 c4 10             	add    esp,0x10
c0019417:	83 ec 0c             	sub    esp,0xc
c001941a:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019421:	50                   	push   eax
c0019422:	e8 1f d6 fe ff       	call   c0006a46 <init_percd>
c0019427:	83 c4 10             	add    esp,0x10
c001942a:	83 c3 03             	add    ebx,0x3
c001942d:	51                   	push   ecx
c001942e:	51                   	push   ecx
c001942f:	6a 00                	push   0x0
c0019431:	53                   	push   ebx
c0019432:	e8 d6 d0 fe ff       	call   c000650d <iso_open>
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	89 c2                	mov    edx,eax
c001943c:	b8 01 00 00 00       	mov    eax,0x1
c0019441:	83 fa ff             	cmp    edx,0xffffffff
c0019444:	74 10                	je     c0019456 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019446:	83 c2 32             	add    edx,0x32
c0019449:	31 c0                	xor    eax,eax
c001944b:	01 d2                	add    edx,edx
c001944d:	89 16                	mov    DWORD PTR [esi],edx
c001944f:	eb 05                	jmp    c0019456 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019451:	b8 04 00 00 00       	mov    eax,0x4
c0019456:	5a                   	pop    edx
c0019457:	5b                   	pop    ebx
c0019458:	5e                   	pop    esi
c0019459:	c3                   	ret    

c001945a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001945a:	53                   	push   ebx
c001945b:	83 ec 08             	sub    esp,0x8
c001945e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019462:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019466:	85 c0                	test   eax,eax
c0019468:	74 2d                	je     c0019497 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001946a:	85 db                	test   ebx,ebx
c001946c:	74 29                	je     c0019497 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001946e:	b9 02 00 00 00       	mov    ecx,0x2
c0019473:	52                   	push   edx
c0019474:	99                   	cdq    
c0019475:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019479:	f7 f9                	idiv   ecx
c001947b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001947f:	83 e8 32             	sub    eax,0x32
c0019482:	50                   	push   eax
c0019483:	e8 2d d1 fe ff       	call   c00065b5 <iso_read>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	89 03                	mov    DWORD PTR [ebx],eax
c001948d:	09 d0                	or     eax,edx
c001948f:	0f 94 c0             	sete   al
c0019492:	0f b6 c0             	movzx  eax,al
c0019495:	eb 05                	jmp    c001949c <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0019497:	b8 04 00 00 00       	mov    eax,0x4
c001949c:	83 c4 08             	add    esp,0x8
c001949f:	5b                   	pop    ebx
c00194a0:	c3                   	ret    
c00194a1:	90                   	nop

c00194a2 <ISO9660::seek(void*, unsigned long long)>:
c00194a2:	57                   	push   edi
c00194a3:	56                   	push   esi
c00194a4:	b8 04 00 00 00       	mov    eax,0x4
c00194a9:	51                   	push   ecx
c00194aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00194b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194b6:	85 d2                	test   edx,edx
c00194b8:	74 26                	je     c00194e0 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00194ba:	6a 00                	push   0x0
c00194bc:	b9 02 00 00 00       	mov    ecx,0x2
c00194c1:	57                   	push   edi
c00194c2:	89 d0                	mov    eax,edx
c00194c4:	56                   	push   esi
c00194c5:	99                   	cdq    
c00194c6:	f7 f9                	idiv   ecx
c00194c8:	83 e8 32             	sub    eax,0x32
c00194cb:	50                   	push   eax
c00194cc:	e8 fa d1 fe ff       	call   c00066cb <iso_seek>
c00194d1:	83 c4 10             	add    esp,0x10
c00194d4:	31 f0                	xor    eax,esi
c00194d6:	31 fa                	xor    edx,edi
c00194d8:	09 d0                	or     eax,edx
c00194da:	0f 95 c0             	setne  al
c00194dd:	0f b6 c0             	movzx  eax,al
c00194e0:	5a                   	pop    edx
c00194e1:	5e                   	pop    esi
c00194e2:	5f                   	pop    edi
c00194e3:	c3                   	ret    

c00194e4 <ISO9660::tell(void*, unsigned long long*)>:
c00194e4:	53                   	push   ebx
c00194e5:	83 ec 08             	sub    esp,0x8
c00194e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00194f0:	85 c0                	test   eax,eax
c00194f2:	74 24                	je     c0019518 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194f4:	85 db                	test   ebx,ebx
c00194f6:	74 20                	je     c0019518 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194f8:	83 ec 0c             	sub    esp,0xc
c00194fb:	b9 02 00 00 00       	mov    ecx,0x2
c0019500:	99                   	cdq    
c0019501:	f7 f9                	idiv   ecx
c0019503:	83 e8 32             	sub    eax,0x32
c0019506:	50                   	push   eax
c0019507:	e8 43 d2 fe ff       	call   c000674f <iso_tell>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	89 03                	mov    DWORD PTR [ebx],eax
c0019511:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019514:	31 c0                	xor    eax,eax
c0019516:	eb 05                	jmp    c001951d <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019518:	b8 04 00 00 00       	mov    eax,0x4
c001951d:	83 c4 08             	add    esp,0x8
c0019520:	5b                   	pop    ebx
c0019521:	c3                   	ret    

c0019522 <ISO9660::stat(void*, unsigned long long*)>:
c0019522:	53                   	push   ebx
c0019523:	83 ec 14             	sub    esp,0x14
c0019526:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001952a:	68 fd 16 02 c0       	push   0xc00216fd
c001952f:	e8 62 14 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0019534:	83 c4 10             	add    esp,0x10
c0019537:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001953c:	74 2c                	je     c001956a <ISO9660::stat(void*, unsigned long long*)+0x48>
c001953e:	85 db                	test   ebx,ebx
c0019540:	74 28                	je     c001956a <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019542:	83 ec 0c             	sub    esp,0xc
c0019545:	b9 02 00 00 00       	mov    ecx,0x2
c001954a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001954e:	99                   	cdq    
c001954f:	f7 f9                	idiv   ecx
c0019551:	83 e8 32             	sub    eax,0x32
c0019554:	50                   	push   eax
c0019555:	e8 26 d2 fe ff       	call   c0006780 <iso_total>
c001955a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019561:	89 03                	mov    DWORD PTR [ebx],eax
c0019563:	83 c4 10             	add    esp,0x10
c0019566:	31 c0                	xor    eax,eax
c0019568:	eb 05                	jmp    c001956f <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001956a:	b8 04 00 00 00       	mov    eax,0x4
c001956f:	83 c4 08             	add    esp,0x8
c0019572:	5b                   	pop    ebx
c0019573:	c3                   	ret    

c0019574 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019574:	55                   	push   ebp
c0019575:	57                   	push   edi
c0019576:	56                   	push   esi
c0019577:	53                   	push   ebx
c0019578:	83 ec 18             	sub    esp,0x18
c001957b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001957f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019583:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019587:	68 05 17 02 c0       	push   0xc0021705
c001958c:	e8 05 14 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0019591:	83 c4 10             	add    esp,0x10
c0019594:	85 ff                	test   edi,edi
c0019596:	0f 94 c0             	sete   al
c0019599:	85 f6                	test   esi,esi
c001959b:	0f 94 c2             	sete   dl
c001959e:	09 d0                	or     eax,edx
c00195a0:	a8 01                	test   al,0x1
c00195a2:	0f 85 dd 00 00 00    	jne    c0019685 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195a8:	85 db                	test   ebx,ebx
c00195aa:	0f 84 d5 00 00 00    	je     c0019685 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195b0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00195b3:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00195b9:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195c0:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195c7:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00195c9:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00195cf:	74 1b                	je     c00195ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00195d1:	85 c0                	test   eax,eax
c00195d3:	74 10                	je     c00195e5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00195d5:	83 ec 0c             	sub    esp,0xc
c00195d8:	68 a9 16 02 c0       	push   0xc00216a9
c00195dd:	e8 91 72 ff ff       	call   c0010873 <KePanic(char const*)>
c00195e2:	83 c4 10             	add    esp,0x10
c00195e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00195e7:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00195ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195ef:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195f6:	85 c0                	test   eax,eax
c00195f8:	74 09                	je     c0019603 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00195fa:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019601:	74 51                	je     c0019654 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019603:	83 ec 0c             	sub    esp,0xc
c0019606:	68 0d 17 02 c0       	push   0xc002170d
c001960b:	e8 86 13 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c0019610:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c001961e:	74 21                	je     c0019641 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	68 2d 17 02 c0       	push   0xc002172d
c0019628:	e8 69 13 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001962d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019630:	83 c4 10             	add    esp,0x10
c0019633:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001963a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019641:	83 ec 0c             	sub    esp,0xc
c0019644:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001964b:	50                   	push   eax
c001964c:	e8 f5 d3 fe ff       	call   c0006a46 <init_percd>
c0019651:	83 c4 10             	add    esp,0x10
c0019654:	83 c3 03             	add    ebx,0x3
c0019657:	52                   	push   edx
c0019658:	52                   	push   edx
c0019659:	6a 00                	push   0x0
c001965b:	53                   	push   ebx
c001965c:	e8 ac ce fe ff       	call   c000650d <iso_open>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	89 c5                	mov    ebp,eax
c0019666:	83 f8 ff             	cmp    eax,0xffffffff
c0019669:	75 21                	jne    c001968c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001966b:	50                   	push   eax
c001966c:	50                   	push   eax
c001966d:	6a 01                	push   0x1
c001966f:	53                   	push   ebx
c0019670:	e8 98 ce fe ff       	call   c000650d <iso_open>
c0019675:	83 c4 10             	add    esp,0x10
c0019678:	ba 02 00 00 00       	mov    edx,0x2
c001967d:	40                   	inc    eax
c001967e:	74 2b                	je     c00196ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019680:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019683:	eb 24                	jmp    c00196a9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019685:	ba 04 00 00 00       	mov    edx,0x4
c001968a:	eb 1f                	jmp    c00196ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001968c:	83 ec 0c             	sub    esp,0xc
c001968f:	50                   	push   eax
c0019690:	e8 eb d0 fe ff       	call   c0006780 <iso_total>
c0019695:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001969c:	89 07                	mov    DWORD PTR [edi],eax
c001969e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00196a1:	e8 f1 ce fe ff       	call   c0006597 <iso_close>
c00196a6:	83 c4 10             	add    esp,0x10
c00196a9:	31 d2                	xor    edx,edx
c00196ab:	83 c4 0c             	add    esp,0xc
c00196ae:	89 d0                	mov    eax,edx
c00196b0:	5b                   	pop    ebx
c00196b1:	5e                   	pop    esi
c00196b2:	5f                   	pop    edi
c00196b3:	5d                   	pop    ebp
c00196b4:	c3                   	ret    
c00196b5:	90                   	nop

c00196b6 <ISO9660::close(void*)>:
c00196b6:	83 ec 0c             	sub    esp,0xc
c00196b9:	b8 04 00 00 00       	mov    eax,0x4
c00196be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196c2:	85 d2                	test   edx,edx
c00196c4:	74 1b                	je     c00196e1 <ISO9660::close(void*)+0x2b>
c00196c6:	83 ec 0c             	sub    esp,0xc
c00196c9:	b9 02 00 00 00       	mov    ecx,0x2
c00196ce:	89 d0                	mov    eax,edx
c00196d0:	99                   	cdq    
c00196d1:	f7 f9                	idiv   ecx
c00196d3:	83 e8 32             	sub    eax,0x32
c00196d6:	50                   	push   eax
c00196d7:	e8 bb ce fe ff       	call   c0006597 <iso_close>
c00196dc:	83 c4 10             	add    esp,0x10
c00196df:	31 c0                	xor    eax,eax
c00196e1:	83 c4 0c             	add    esp,0xc
c00196e4:	c3                   	ret    
c00196e5:	90                   	nop

c00196e6 <ISO9660::openDir(char const*, void**)>:
c00196e6:	56                   	push   esi
c00196e7:	53                   	push   ebx
c00196e8:	50                   	push   eax
c00196e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00196f1:	85 db                	test   ebx,ebx
c00196f3:	0f 84 bd 00 00 00    	je     c00197b6 <ISO9660::openDir(char const*, void**)+0xd0>
c00196f9:	85 f6                	test   esi,esi
c00196fb:	0f 84 b5 00 00 00    	je     c00197b6 <ISO9660::openDir(char const*, void**)+0xd0>
c0019701:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019703:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001970a:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019710:	74 1b                	je     c001972d <ISO9660::openDir(char const*, void**)+0x47>
c0019712:	85 c0                	test   eax,eax
c0019714:	74 10                	je     c0019726 <ISO9660::openDir(char const*, void**)+0x40>
c0019716:	83 ec 0c             	sub    esp,0xc
c0019719:	68 a9 16 02 c0       	push   0xc00216a9
c001971e:	e8 50 71 ff ff       	call   c0010873 <KePanic(char const*)>
c0019723:	83 c4 10             	add    esp,0x10
c0019726:	8a 03                	mov    al,BYTE PTR [ebx]
c0019728:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001972d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019730:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019737:	85 c0                	test   eax,eax
c0019739:	74 10                	je     c001974b <ISO9660::openDir(char const*, void**)+0x65>
c001973b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019742:	74 1a                	je     c001975e <ISO9660::openDir(char const*, void**)+0x78>
c0019744:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001974b:	83 ec 0c             	sub    esp,0xc
c001974e:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019755:	50                   	push   eax
c0019756:	e8 eb d2 fe ff       	call   c0006a46 <init_percd>
c001975b:	83 c4 10             	add    esp,0x10
c001975e:	83 c3 03             	add    ebx,0x3
c0019761:	50                   	push   eax
c0019762:	50                   	push   eax
c0019763:	6a 01                	push   0x1
c0019765:	53                   	push   ebx
c0019766:	e8 a2 cd fe ff       	call   c000650d <iso_open>
c001976b:	83 c4 10             	add    esp,0x10
c001976e:	89 c3                	mov    ebx,eax
c0019770:	83 f8 ff             	cmp    eax,0xffffffff
c0019773:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019778:	75 1c                	jne    c0019796 <ISO9660::openDir(char const*, void**)+0xb0>
c001977a:	53                   	push   ebx
c001977b:	53                   	push   ebx
c001977c:	68 51 17 02 c0       	push   0xc0021751
c0019781:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019787:	e8 04 f3 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001978c:	83 c4 10             	add    esp,0x10
c001978f:	b8 01 00 00 00       	mov    eax,0x1
c0019794:	eb 25                	jmp    c00197bb <ISO9660::openDir(char const*, void**)+0xd5>
c0019796:	01 db                	add    ebx,ebx
c0019798:	51                   	push   ecx
c0019799:	83 c3 65             	add    ebx,0x65
c001979c:	51                   	push   ecx
c001979d:	68 64 17 02 c0       	push   0xc0021764
c00197a2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197a8:	e8 e3 f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c00197ad:	89 1e                	mov    DWORD PTR [esi],ebx
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	31 c0                	xor    eax,eax
c00197b4:	eb 05                	jmp    c00197bb <ISO9660::openDir(char const*, void**)+0xd5>
c00197b6:	b8 04 00 00 00       	mov    eax,0x4
c00197bb:	5a                   	pop    edx
c00197bc:	5b                   	pop    ebx
c00197bd:	5e                   	pop    esi
c00197be:	c3                   	ret    
c00197bf:	90                   	nop

c00197c0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00197c0:	55                   	push   ebp
c00197c1:	57                   	push   edi
c00197c2:	56                   	push   esi
c00197c3:	53                   	push   ebx
c00197c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197ca:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00197d1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00197d8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00197e0:	0f 84 e7 00 00 00    	je     c00198cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197e6:	85 db                	test   ebx,ebx
c00197e8:	0f 84 df 00 00 00    	je     c00198cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197ee:	83 ec 0c             	sub    esp,0xc
c00197f1:	68 77 17 02 c0       	push   0xc0021777
c00197f6:	e8 9b 11 ff ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c00197fb:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019802:	b9 02 00 00 00       	mov    ecx,0x2
c0019807:	99                   	cdq    
c0019808:	f7 f9                	idiv   ecx
c001980a:	83 e8 32             	sub    eax,0x32
c001980d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019810:	e8 bd cf fe ff       	call   c00067d2 <iso_readdir>
c0019815:	83 c4 10             	add    esp,0x10
c0019818:	89 c6                	mov    esi,eax
c001981a:	85 c0                	test   eax,eax
c001981c:	75 37                	jne    c0019855 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001981e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019823:	56                   	push   esi
c0019824:	56                   	push   esi
c0019825:	68 82 17 02 c0       	push   0xc0021782
c001982a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019830:	e8 5b f2 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c0019835:	83 c4 0c             	add    esp,0xc
c0019838:	68 10 01 00 00       	push   0x110
c001983d:	6a 00                	push   0x0
c001983f:	57                   	push   edi
c0019840:	e8 ab 6c fe ff       	call   c00004f0 <memset>
c0019845:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001984b:	83 c4 10             	add    esp,0x10
c001984e:	b8 01 00 00 00       	mov    eax,0x1
c0019853:	eb 7d                	jmp    c00198d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019855:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001985b:	8d 68 08             	lea    ebp,[eax+0x8]
c001985e:	83 ec 0c             	sub    esp,0xc
c0019861:	55                   	push   ebp
c0019862:	e8 09 6d fe ff       	call   c0000570 <strlen>
c0019867:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001986f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019873:	83 c4 10             	add    esp,0x10
c0019876:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001987a:	75 0a                	jne    c0019886 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001987c:	b8 02 00 00 00       	mov    eax,0x2
c0019881:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019884:	74 05                	je     c001988b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019886:	b8 01 00 00 00       	mov    eax,0x1
c001988b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001988f:	50                   	push   eax
c0019890:	50                   	push   eax
c0019891:	55                   	push   ebp
c0019892:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019896:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001989a:	50                   	push   eax
c001989b:	e8 a0 6d fe ff       	call   c0000640 <strcpy>
c00198a0:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00198a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198a9:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00198af:	5a                   	pop    edx
c00198b0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198b5:	59                   	pop    ecx
c00198b6:	68 95 17 02 c0       	push   0xc0021795
c00198bb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198c1:	e8 ca f1 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	31 c0                	xor    eax,eax
c00198cb:	eb 05                	jmp    c00198d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00198cd:	b8 04 00 00 00       	mov    eax,0x4
c00198d2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198d8:	5b                   	pop    ebx
c00198d9:	5e                   	pop    esi
c00198da:	5f                   	pop    edi
c00198db:	5d                   	pop    ebp
c00198dc:	c3                   	ret    

c00198dd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00198dd:	57                   	push   edi
c00198de:	56                   	push   esi
c00198df:	53                   	push   ebx
c00198e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00198ec:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00198f2:	0f be cb             	movsx  ecx,bl
c00198f5:	75 0b                	jne    c0019902 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00198f7:	0f be 05 e4 22 02 c0 	movsx  eax,BYTE PTR ds:0xc00222e4
c00198fe:	39 c8                	cmp    eax,ecx
c0019900:	74 47                	je     c0019949 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019902:	83 ec 0c             	sub    esp,0xc
c0019905:	31 d2                	xor    edx,edx
c0019907:	68 40 83 02 c0       	push   0xc0028340
c001990c:	6a 01                	push   0x1
c001990e:	52                   	push   edx
c001990f:	56                   	push   esi
c0019910:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c0019917:	e8 90 38 ff ff       	call   c000d1ac <LogicalDisk::read(unsigned long long, int, void*)>
c001991c:	83 c4 20             	add    esp,0x20
c001991f:	85 c0                	test   eax,eax
c0019921:	75 0e                	jne    c0019931 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019923:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019929:	88 1d e4 22 02 c0    	mov    BYTE PTR ds:0xc00222e4,bl
c001992f:	eb 18                	jmp    c0019949 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019931:	50                   	push   eax
c0019932:	68 00 08 00 00       	push   0x800
c0019937:	6a 00                	push   0x0
c0019939:	57                   	push   edi
c001993a:	e8 b1 6b fe ff       	call   c00004f0 <memset>
c001993f:	83 c4 10             	add    esp,0x10
c0019942:	b8 01 00 00 00       	mov    eax,0x1
c0019947:	eb 0e                	jmp    c0019957 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019949:	be 40 83 02 c0       	mov    esi,0xc0028340
c001994e:	b9 00 08 00 00       	mov    ecx,0x800
c0019953:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019955:	31 c0                	xor    eax,eax
c0019957:	5b                   	pop    ebx
c0019958:	5e                   	pop    esi
c0019959:	5f                   	pop    edi
c001995a:	c3                   	ret    
c001995b:	90                   	nop

c001995c <ISO9660::tryMount(LogicalDisk*, int)>:
c001995c:	53                   	push   ebx
c001995d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019963:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c001996d:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019974:	8d 58 41             	lea    ebx,[eax+0x41]
c0019977:	0f be db             	movsx  ebx,bl
c001997a:	53                   	push   ebx
c001997b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001997f:	50                   	push   eax
c0019980:	6a 10                	push   0x10
c0019982:	e8 56 ff ff ff       	call   c00198dd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019987:	83 c4 10             	add    esp,0x10
c001998a:	31 d2                	xor    edx,edx
c001998c:	85 c0                	test   eax,eax
c001998e:	75 33                	jne    c00199c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019990:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019995:	75 2c                	jne    c00199c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019997:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001999c:	75 25                	jne    c00199c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001999e:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00199a3:	75 1e                	jne    c00199c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199a5:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00199aa:	75 17                	jne    c00199c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199ac:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00199b1:	75 10                	jne    c00199c3 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199b3:	83 ec 0c             	sub    esp,0xc
c00199b6:	53                   	push   ebx
c00199b7:	e8 8a d0 fe ff       	call   c0006a46 <init_percd>
c00199bc:	83 c4 10             	add    esp,0x10
c00199bf:	40                   	inc    eax
c00199c0:	0f 95 c2             	setne  dl
c00199c3:	88 d0                	mov    al,dl
c00199c5:	81 c4 08 08 00 00    	add    esp,0x808
c00199cb:	5b                   	pop    ebx
c00199cc:	c3                   	ret    
c00199cd:	90                   	nop

c00199ce <ISO9660::ISO9660()>:
c00199ce:	83 ec 0c             	sub    esp,0xc
c00199d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199d5:	83 ec 0c             	sub    esp,0xc
c00199d8:	50                   	push   eax
c00199d9:	e8 da 12 ff ff       	call   c000acb8 <Filesystem::Filesystem()>
c00199de:	83 c4 10             	add    esp,0x10
c00199e1:	ba b0 17 02 c0       	mov    edx,0xc00217b0
c00199e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ea:	89 10                	mov    DWORD PTR [eax],edx
c00199ec:	e8 67 d1 fe ff       	call   c0006b58 <fs_iso9660_init>
c00199f1:	90                   	nop
c00199f2:	83 c4 0c             	add    esp,0xc
c00199f5:	c3                   	ret    

c00199f6 <SoundCard::beginPlayback()>:
c00199f6:	c7 44 24 04 10 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021810
c00199fe:	e9 70 6e ff ff       	jmp    c0010873 <KePanic(char const*)>
c0019a03:	90                   	nop

c0019a04 <SoundCard::stopPlayback()>:
c0019a04:	c7 44 24 04 10 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021810
c0019a0c:	e9 62 6e ff ff       	jmp    c0010873 <KePanic(char const*)>
c0019a11:	90                   	nop

c0019a12 <SoundCard::SoundCard(char const*)>:
c0019a12:	83 ec 1c             	sub    esp,0x1c
c0019a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a19:	83 ec 08             	sub    esp,0x8
c0019a1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a20:	50                   	push   eax
c0019a21:	e8 3c 25 ff ff       	call   c000bf62 <Device::Device(char const*)>
c0019a26:	83 c4 10             	add    esp,0x10
c0019a29:	ba 5c 18 02 c0       	mov    edx,0xc002185c
c0019a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a32:	89 10                	mov    DWORD PTR [eax],edx
c0019a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a38:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a43:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a51:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a5f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a6d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a7f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a84:	7f 1a                	jg     c0019aa0 <SoundCard::SoundCard(char const*)+0x8e>
c0019a86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a8e:	83 c2 54             	add    edx,0x54
c0019a91:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a99:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a9e:	eb df                	jmp    c0019a7f <SoundCard::SoundCard(char const*)+0x6d>
c0019aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa4:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019aab:	90                   	nop
c0019aac:	83 c4 1c             	add    esp,0x1c
c0019aaf:	c3                   	ret    

c0019ab0 <SoundCard::~SoundCard()>:
c0019ab0:	83 ec 0c             	sub    esp,0xc
c0019ab3:	ba 5c 18 02 c0       	mov    edx,0xc002185c
c0019ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019abc:	89 10                	mov    DWORD PTR [eax],edx
c0019abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ac2:	83 ec 0c             	sub    esp,0xc
c0019ac5:	50                   	push   eax
c0019ac6:	e8 01 22 ff ff       	call   c000bccc <Device::~Device()>
c0019acb:	83 c4 10             	add    esp,0x10
c0019ace:	90                   	nop
c0019acf:	83 c4 0c             	add    esp,0xc
c0019ad2:	c3                   	ret    
c0019ad3:	90                   	nop

c0019ad4 <SoundCard::~SoundCard()>:
c0019ad4:	83 ec 0c             	sub    esp,0xc
c0019ad7:	83 ec 0c             	sub    esp,0xc
c0019ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ade:	e8 cd ff ff ff       	call   c0019ab0 <SoundCard::~SoundCard()>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	83 ec 08             	sub    esp,0x8
c0019ae9:	68 e8 01 00 00       	push   0x1e8
c0019aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019af2:	e8 72 0d ff ff       	call   c000a869 <operator delete(void*, unsigned long)>
c0019af7:	83 c4 10             	add    esp,0x10
c0019afa:	83 c4 0c             	add    esp,0xc
c0019afd:	c3                   	ret    

c0019afe <SoundCard::configureRates(int, int, int)>:
c0019afe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b02:	31 c0                	xor    eax,eax
c0019b04:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019b0b:	75 20                	jne    c0019b2d <SoundCard::configureRates(int, int, int)+0x2f>
c0019b0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b11:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b1b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b25:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b2b:	b0 01                	mov    al,0x1
c0019b2d:	c3                   	ret    

c0019b2e <SoundCard::getSamples16(int, short*)>:
c0019b2e:	55                   	push   ebp
c0019b2f:	57                   	push   edi
c0019b30:	31 ff                	xor    edi,edi
c0019b32:	56                   	push   esi
c0019b33:	53                   	push   ebx
c0019b34:	31 db                	xor    ebx,ebx
c0019b36:	83 ec 10             	sub    esp,0x10
c0019b39:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b3d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b41:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b44:	50                   	push   eax
c0019b45:	6a 00                	push   0x0
c0019b47:	55                   	push   ebp
c0019b48:	e8 a3 69 fe ff       	call   c00004f0 <memset>
c0019b4d:	83 c4 10             	add    esp,0x10
c0019b50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b54:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019b5b:	85 c0                	test   eax,eax
c0019b5d:	74 1b                	je     c0019b7a <SoundCard::getSamples16(int, short*)+0x4c>
c0019b5f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b63:	75 15                	jne    c0019b7a <SoundCard::getSamples16(int, short*)+0x4c>
c0019b65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b69:	55                   	push   ebp
c0019b6a:	56                   	push   esi
c0019b6b:	50                   	push   eax
c0019b6c:	e8 f3 02 00 00       	call   c0019e64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b71:	83 c4 10             	add    esp,0x10
c0019b74:	39 c7                	cmp    edi,eax
c0019b76:	7d 02                	jge    c0019b7a <SoundCard::getSamples16(int, short*)+0x4c>
c0019b78:	89 c7                	mov    edi,eax
c0019b7a:	43                   	inc    ebx
c0019b7b:	83 fb 20             	cmp    ebx,0x20
c0019b7e:	75 d0                	jne    c0019b50 <SoundCard::getSamples16(int, short*)+0x22>
c0019b80:	83 c4 0c             	add    esp,0xc
c0019b83:	89 f8                	mov    eax,edi
c0019b85:	5b                   	pop    ebx
c0019b86:	5e                   	pop    esi
c0019b87:	5f                   	pop    edi
c0019b88:	5d                   	pop    ebp
c0019b89:	c3                   	ret    

c0019b8a <SoundCard::getSamples32(int, int*)>:
c0019b8a:	55                   	push   ebp
c0019b8b:	57                   	push   edi
c0019b8c:	31 ff                	xor    edi,edi
c0019b8e:	56                   	push   esi
c0019b8f:	31 f6                	xor    esi,esi
c0019b91:	53                   	push   ebx
c0019b92:	83 ec 10             	sub    esp,0x10
c0019b95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b99:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019b9d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019ba1:	c1 e0 02             	shl    eax,0x2
c0019ba4:	50                   	push   eax
c0019ba5:	6a 00                	push   0x0
c0019ba7:	55                   	push   ebp
c0019ba8:	e8 43 69 fe ff       	call   c00004f0 <memset>
c0019bad:	83 c4 10             	add    esp,0x10
c0019bb0:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019bb7:	85 c0                	test   eax,eax
c0019bb9:	74 1b                	je     c0019bd6 <SoundCard::getSamples32(int, int*)+0x4c>
c0019bbb:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bbf:	75 15                	jne    c0019bd6 <SoundCard::getSamples32(int, int*)+0x4c>
c0019bc1:	53                   	push   ebx
c0019bc2:	55                   	push   ebp
c0019bc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019bc7:	50                   	push   eax
c0019bc8:	e8 63 03 00 00       	call   c0019f30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019bcd:	83 c4 10             	add    esp,0x10
c0019bd0:	39 c6                	cmp    esi,eax
c0019bd2:	7d 02                	jge    c0019bd6 <SoundCard::getSamples32(int, int*)+0x4c>
c0019bd4:	89 c6                	mov    esi,eax
c0019bd6:	47                   	inc    edi
c0019bd7:	83 ff 20             	cmp    edi,0x20
c0019bda:	75 d4                	jne    c0019bb0 <SoundCard::getSamples32(int, int*)+0x26>
c0019bdc:	85 f6                	test   esi,esi
c0019bde:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019be5:	75 0f                	jne    c0019bf6 <SoundCard::getSamples32(int, int*)+0x6c>
c0019be7:	85 c0                	test   eax,eax
c0019be9:	74 1b                	je     c0019c06 <SoundCard::getSamples32(int, int*)+0x7c>
c0019beb:	83 ec 0c             	sub    esp,0xc
c0019bee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bf0:	53                   	push   ebx
c0019bf1:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019bf4:	eb 0d                	jmp    c0019c03 <SoundCard::getSamples32(int, int*)+0x79>
c0019bf6:	85 c0                	test   eax,eax
c0019bf8:	75 0c                	jne    c0019c06 <SoundCard::getSamples32(int, int*)+0x7c>
c0019bfa:	83 ec 0c             	sub    esp,0xc
c0019bfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bff:	53                   	push   ebx
c0019c00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019c03:	83 c4 10             	add    esp,0x10
c0019c06:	83 c4 0c             	add    esp,0xc
c0019c09:	89 f0                	mov    eax,esi
c0019c0b:	5b                   	pop    ebx
c0019c0c:	5e                   	pop    esi
c0019c0d:	5f                   	pop    edi
c0019c0e:	5d                   	pop    ebp
c0019c0f:	c3                   	ret    

c0019c10 <SoundCard::addChannel(SoundPort*)>:
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	31 c0                	xor    eax,eax
c0019c15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c19:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c21:	74 1b                	je     c0019c3e <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c23:	40                   	inc    eax
c0019c24:	83 f8 20             	cmp    eax,0x20
c0019c27:	75 f0                	jne    c0019c19 <SoundCard::addChannel(SoundPort*)+0x9>
c0019c29:	83 ec 0c             	sub    esp,0xc
c0019c2c:	68 35 18 02 c0       	push   0xc0021835
c0019c31:	e8 3d 6c ff ff       	call   c0010873 <KePanic(char const*)>
c0019c36:	83 c4 10             	add    esp,0x10
c0019c39:	83 c8 ff             	or     eax,0xffffffff
c0019c3c:	eb 0b                	jmp    c0019c49 <SoundCard::addChannel(SoundPort*)+0x39>
c0019c3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c42:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c49:	83 c4 0c             	add    esp,0xc
c0019c4c:	c3                   	ret    
c0019c4d:	90                   	nop

c0019c4e <SoundCard::removeChannel(int)>:
c0019c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c56:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c61:	c3                   	ret    
c0019c62:	66 90                	xchg   ax,ax

c0019c64 <SoundPort::SoundPort(int, int, int, int)>:
c0019c64:	83 ec 0c             	sub    esp,0xc
c0019c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c6b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c76:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c82:	89 10                	mov    DWORD PTR [eax],edx
c0019c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c97:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c9a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c9f:	75 13                	jne    c0019cb4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ca7:	05 a0 0f 00 00       	add    eax,0xfa0
c0019cac:	01 c0                	add    eax,eax
c0019cae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019cb2:	66 90                	xchg   ax,ax
c0019cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019cbc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019cd1:	c1 e0 02             	shl    eax,0x2
c0019cd4:	83 ec 0c             	sub    esp,0xc
c0019cd7:	50                   	push   eax
c0019cd8:	e8 d1 dd fe ff       	call   c0007aae <malloc>
c0019cdd:	83 c4 10             	add    esp,0x10
c0019ce0:	89 c2                	mov    edx,eax
c0019ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ce6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019ce9:	90                   	nop
c0019cea:	83 c4 0c             	add    esp,0xc
c0019ced:	c3                   	ret    
c0019cee:	66 90                	xchg   ax,ax

c0019cf0 <SoundPort::~SoundPort()>:
c0019cf0:	83 ec 0c             	sub    esp,0xc
c0019cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cfa:	85 c0                	test   eax,eax
c0019cfc:	74 1e                	je     c0019d1c <SoundPort::~SoundPort()+0x2c>
c0019cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019d05:	83 ec 0c             	sub    esp,0xc
c0019d08:	50                   	push   eax
c0019d09:	e8 b0 dd fe ff       	call   c0007abe <free>
c0019d0e:	83 c4 10             	add    esp,0x10
c0019d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d15:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d1c:	90                   	nop
c0019d1d:	83 c4 0c             	add    esp,0xc
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop
c0019d22:	66 90                	xchg   ax,ax

c0019d24 <SoundPort::unpause()>:
c0019d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d28:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d2c:	c3                   	ret    
c0019d2d:	90                   	nop
c0019d2e:	66 90                	xchg   ax,ax

c0019d30 <SoundPort::pause()>:
c0019d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d34:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d38:	c3                   	ret    
c0019d39:	90                   	nop
c0019d3a:	66 90                	xchg   ax,ax

c0019d3c <SoundPort::getBufferUsed()>:
c0019d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d43:	c3                   	ret    

c0019d44 <SoundPort::getBufferSize()>:
c0019d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d48:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d4b:	c3                   	ret    

c0019d4c <SoundPort::buffer16(short*, int)>:
c0019d4c:	55                   	push   ebp
c0019d4d:	57                   	push   edi
c0019d4e:	56                   	push   esi
c0019d4f:	53                   	push   ebx
c0019d50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d54:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d58:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d5b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d5e:	74 68                	je     c0019dc8 <SoundPort::buffer16(short*, int)+0x7c>
c0019d60:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d64:	85 c9                	test   ecx,ecx
c0019d66:	7e 60                	jle    c0019dc8 <SoundPort::buffer16(short*, int)+0x7c>
c0019d68:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d6c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d6f:	c1 e1 0f             	shl    ecx,0xf
c0019d72:	8d 70 01             	lea    esi,[eax+0x1]
c0019d75:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d78:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d7b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d7e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d81:	74 4d                	je     c0019dd0 <SoundPort::buffer16(short*, int)+0x84>
c0019d83:	31 f6                	xor    esi,esi
c0019d85:	eb 21                	jmp    c0019da8 <SoundPort::buffer16(short*, int)+0x5c>
c0019d87:	90                   	nop
c0019d88:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d8d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d90:	c1 e3 0f             	shl    ebx,0xf
c0019d93:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d96:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d99:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019da2:	74 1c                	je     c0019dc0 <SoundPort::buffer16(short*, int)+0x74>
c0019da4:	89 c6                	mov    esi,eax
c0019da6:	66 90                	xchg   ax,ax
c0019da8:	8d 46 01             	lea    eax,[esi+0x1]
c0019dab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019daf:	75 d7                	jne    c0019d88 <SoundPort::buffer16(short*, int)+0x3c>
c0019db1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019db5:	8d 76 00             	lea    esi,[esi+0x0]
c0019db8:	5b                   	pop    ebx
c0019db9:	5e                   	pop    esi
c0019dba:	5f                   	pop    edi
c0019dbb:	5d                   	pop    ebp
c0019dbc:	c3                   	ret    
c0019dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc0:	5b                   	pop    ebx
c0019dc1:	8d 46 02             	lea    eax,[esi+0x2]
c0019dc4:	5e                   	pop    esi
c0019dc5:	5f                   	pop    edi
c0019dc6:	5d                   	pop    ebp
c0019dc7:	c3                   	ret    
c0019dc8:	5b                   	pop    ebx
c0019dc9:	31 c0                	xor    eax,eax
c0019dcb:	5e                   	pop    esi
c0019dcc:	5f                   	pop    edi
c0019dcd:	5d                   	pop    ebp
c0019dce:	c3                   	ret    
c0019dcf:	90                   	nop
c0019dd0:	b8 01 00 00 00       	mov    eax,0x1
c0019dd5:	eb e1                	jmp    c0019db8 <SoundPort::buffer16(short*, int)+0x6c>
c0019dd7:	90                   	nop

c0019dd8 <SoundPort::buffer32(int*, int)>:
c0019dd8:	55                   	push   ebp
c0019dd9:	57                   	push   edi
c0019dda:	56                   	push   esi
c0019ddb:	53                   	push   ebx
c0019ddc:	83 ec 04             	sub    esp,0x4
c0019ddf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019de7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019dee:	89 04 24             	mov    DWORD PTR [esp],eax
c0019df1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019df4:	74 5a                	je     c0019e50 <SoundPort::buffer32(int*, int)+0x78>
c0019df6:	85 c0                	test   eax,eax
c0019df8:	7e 56                	jle    c0019e50 <SoundPort::buffer32(int*, int)+0x78>
c0019dfa:	8d 71 01             	lea    esi,[ecx+0x1]
c0019dfd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019e00:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019e03:	8b 37                	mov    esi,DWORD PTR [edi]
c0019e05:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019e08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e0e:	74 4c                	je     c0019e5c <SoundPort::buffer32(int*, int)+0x84>
c0019e10:	31 f6                	xor    esi,esi
c0019e12:	eb 1c                	jmp    c0019e30 <SoundPort::buffer32(int*, int)+0x58>
c0019e14:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e17:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e1a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e1d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e20:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e2a:	74 18                	je     c0019e44 <SoundPort::buffer32(int*, int)+0x6c>
c0019e2c:	89 de                	mov    esi,ebx
c0019e2e:	66 90                	xchg   ax,ax
c0019e30:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e33:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e36:	75 dc                	jne    c0019e14 <SoundPort::buffer32(int*, int)+0x3c>
c0019e38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e3b:	90                   	nop
c0019e3c:	83 c4 04             	add    esp,0x4
c0019e3f:	5b                   	pop    ebx
c0019e40:	5e                   	pop    esi
c0019e41:	5f                   	pop    edi
c0019e42:	5d                   	pop    ebp
c0019e43:	c3                   	ret    
c0019e44:	83 c4 04             	add    esp,0x4
c0019e47:	8d 46 02             	lea    eax,[esi+0x2]
c0019e4a:	5b                   	pop    ebx
c0019e4b:	5e                   	pop    esi
c0019e4c:	5f                   	pop    edi
c0019e4d:	5d                   	pop    ebp
c0019e4e:	c3                   	ret    
c0019e4f:	90                   	nop
c0019e50:	83 c4 04             	add    esp,0x4
c0019e53:	31 c0                	xor    eax,eax
c0019e55:	5b                   	pop    ebx
c0019e56:	5e                   	pop    esi
c0019e57:	5f                   	pop    edi
c0019e58:	5d                   	pop    ebp
c0019e59:	c3                   	ret    
c0019e5a:	66 90                	xchg   ax,ax
c0019e5c:	b8 01 00 00 00       	mov    eax,0x1
c0019e61:	eb d9                	jmp    c0019e3c <SoundPort::buffer32(int*, int)+0x64>
c0019e63:	90                   	nop

c0019e64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e64:	57                   	push   edi
c0019e65:	56                   	push   esi
c0019e66:	53                   	push   ebx
c0019e67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019e6f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019e75:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e77:	74 13                	je     c0019e8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019e79:	83 ec 0c             	sub    esp,0xc
c0019e7c:	68 88 18 02 c0       	push   0xc0021888
c0019e81:	e8 ed 69 ff ff       	call   c0010873 <KePanic(char const*)>
c0019e86:	83 c4 10             	add    esp,0x10
c0019e89:	8d 76 00             	lea    esi,[esi+0x0]
c0019e8c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0019e92:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e95:	74 11                	je     c0019ea8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019e97:	83 ec 0c             	sub    esp,0xc
c0019e9a:	68 c7 18 02 c0       	push   0xc00218c7
c0019e9f:	e8 cf 69 ff ff       	call   c0010873 <KePanic(char const*)>
c0019ea4:	83 c4 10             	add    esp,0x10
c0019ea7:	90                   	nop
c0019ea8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019eae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019eb1:	74 11                	je     c0019ec4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019eb3:	83 ec 0c             	sub    esp,0xc
c0019eb6:	68 c7 18 02 c0       	push   0xc00218c7
c0019ebb:	e8 b3 69 ff ff       	call   c0010873 <KePanic(char const*)>
c0019ec0:	83 c4 10             	add    esp,0x10
c0019ec3:	90                   	nop
c0019ec4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019ec7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019ecb:	7e 07                	jle    c0019ed4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019ecd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed4:	85 f6                	test   esi,esi
c0019ed6:	7e 2c                	jle    c0019f04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019ed8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019edc:	8d 3c 36             	lea    edi,[esi+esi*1]
c0019edf:	31 c9                	xor    ecx,ecx
c0019ee1:	01 d7                	add    edi,edx
c0019ee3:	90                   	nop
c0019ee4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019ee7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019eea:	85 c0                	test   eax,eax
c0019eec:	79 06                	jns    c0019ef4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019eee:	05 ff 7f 00 00       	add    eax,0x7fff
c0019ef3:	90                   	nop
c0019ef4:	c1 f8 0f             	sar    eax,0xf
c0019ef7:	83 c1 04             	add    ecx,0x4
c0019efa:	66 01 02             	add    WORD PTR [edx],ax
c0019efd:	83 c2 02             	add    edx,0x2
c0019f00:	39 d7                	cmp    edi,edx
c0019f02:	75 e0                	jne    c0019ee4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019f04:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019f0a:	83 ec 04             	sub    esp,0x4
c0019f0d:	29 f0                	sub    eax,esi
c0019f0f:	c1 e0 02             	shl    eax,0x2
c0019f12:	50                   	push   eax
c0019f13:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f16:	50                   	push   eax
c0019f17:	52                   	push   edx
c0019f18:	e8 b3 64 fe ff       	call   c00003d0 <memmove>
c0019f1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f20:	83 c4 10             	add    esp,0x10
c0019f23:	29 f0                	sub    eax,esi
c0019f25:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f28:	89 f0                	mov    eax,esi
c0019f2a:	5b                   	pop    ebx
c0019f2b:	5e                   	pop    esi
c0019f2c:	5f                   	pop    edi
c0019f2d:	c3                   	ret    
c0019f2e:	66 90                	xchg   ax,ax

c0019f30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f30:	57                   	push   edi
c0019f31:	56                   	push   esi
c0019f32:	53                   	push   ebx
c0019f33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f37:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f3f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019f45:	39 06                	cmp    DWORD PTR [esi],eax
c0019f47:	74 13                	je     c0019f5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019f49:	83 ec 0c             	sub    esp,0xc
c0019f4c:	68 a8 18 02 c0       	push   0xc00218a8
c0019f51:	e8 1d 69 ff ff       	call   c0010873 <KePanic(char const*)>
c0019f56:	83 c4 10             	add    esp,0x10
c0019f59:	8d 76 00             	lea    esi,[esi+0x0]
c0019f5c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019f62:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019f65:	74 11                	je     c0019f78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019f67:	83 ec 0c             	sub    esp,0xc
c0019f6a:	68 e3 18 02 c0       	push   0xc00218e3
c0019f6f:	e8 ff 68 ff ff       	call   c0010873 <KePanic(char const*)>
c0019f74:	83 c4 10             	add    esp,0x10
c0019f77:	90                   	nop
c0019f78:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019f7e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019f81:	74 11                	je     c0019f94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019f83:	83 ec 0c             	sub    esp,0xc
c0019f86:	68 e3 18 02 c0       	push   0xc00218e3
c0019f8b:	e8 e3 68 ff ff       	call   c0010873 <KePanic(char const*)>
c0019f90:	83 c4 10             	add    esp,0x10
c0019f93:	90                   	nop
c0019f94:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019f97:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0019f9b:	7e 07                	jle    c0019fa4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019f9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fa4:	85 ff                	test   edi,edi
c0019fa6:	7e 1c                	jle    c0019fc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0019fa8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019faf:	31 c0                	xor    eax,eax
c0019fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019fb7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019fba:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0019fbd:	83 c0 04             	add    eax,0x4
c0019fc0:	39 c1                	cmp    ecx,eax
c0019fc2:	75 f0                	jne    c0019fb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019fc4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019fc7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fca:	83 ec 04             	sub    esp,0x4
c0019fcd:	29 f8                	sub    eax,edi
c0019fcf:	c1 e0 02             	shl    eax,0x2
c0019fd2:	50                   	push   eax
c0019fd3:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019fd6:	50                   	push   eax
c0019fd7:	52                   	push   edx
c0019fd8:	e8 f3 63 fe ff       	call   c00003d0 <memmove>
c0019fdd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fe0:	83 c4 10             	add    esp,0x10
c0019fe3:	29 f8                	sub    eax,edi
c0019fe5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0019fe8:	89 f8                	mov    eax,edi
c0019fea:	5b                   	pop    ebx
c0019feb:	5e                   	pop    esi
c0019fec:	5f                   	pop    edi
c0019fed:	c3                   	ret    

c0019fee <PCI::open(int, int, void*)>:
c0019fee:	83 ec 18             	sub    esp,0x18
c0019ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ff5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ff9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019fff:	8b 10                	mov    edx,DWORD PTR [eax]
c001a001:	50                   	push   eax
c001a002:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a005:	31 c0                	xor    eax,eax
c001a007:	83 c4 1c             	add    esp,0x1c
c001a00a:	c3                   	ret    
c001a00b:	90                   	nop

c001a00c <PCI::close(int, int, void*)>:
c001a00c:	31 c0                	xor    eax,eax
c001a00e:	c3                   	ret    
c001a00f:	90                   	nop

c001a010 <PCI::PCI()>:
c001a010:	83 ec 0c             	sub    esp,0xc
c001a013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a017:	83 ec 08             	sub    esp,0x8
c001a01a:	68 ff 18 02 c0       	push   0xc00218ff
c001a01f:	50                   	push   eax
c001a020:	e8 07 17 ff ff       	call   c000b72c <Bus::Bus(char const*)>
c001a025:	83 c4 10             	add    esp,0x10
c001a028:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c001a02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a031:	89 10                	mov    DWORD PTR [eax],edx
c001a033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a037:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a045:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a04e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a054:	0f b6 d0             	movzx  edx,al
c001a057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a066:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a06c:	0f b6 d0             	movzx  edx,al
c001a06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a073:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a07c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a082:	8d 50 01             	lea    edx,[eax+0x1]
c001a085:	88 d1                	mov    cl,dl
c001a087:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a08b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a091:	0f b6 d0             	movzx  edx,al
c001a094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a098:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a09c:	83 c9 c0             	or     ecx,0xffffffc0
c001a09f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a0a3:	90                   	nop
c001a0a4:	83 c4 0c             	add    esp,0xc
c001a0a7:	c3                   	ret    

c001a0a8 <PCI::readBAR8(unsigned int, int)>:
c001a0a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0b0:	f6 c2 01             	test   dl,0x1
c001a0b3:	74 07                	je     c001a0bc <PCI::readBAR8(unsigned int, int)+0x14>
c001a0b5:	83 e2 fc             	and    edx,0xfffffffc
c001a0b8:	01 c2                	add    edx,eax
c001a0ba:	ec                   	in     al,dx
c001a0bb:	c3                   	ret    
c001a0bc:	83 e2 f0             	and    edx,0xfffffff0
c001a0bf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a0c2:	c3                   	ret    
c001a0c3:	90                   	nop

c001a0c4 <PCI::readBAR16(unsigned int, int)>:
c001a0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0cc:	f6 c2 01             	test   dl,0x1
c001a0cf:	74 08                	je     c001a0d9 <PCI::readBAR16(unsigned int, int)+0x15>
c001a0d1:	83 e2 fc             	and    edx,0xfffffffc
c001a0d4:	01 c2                	add    edx,eax
c001a0d6:	66 ed                	in     ax,dx
c001a0d8:	c3                   	ret    
c001a0d9:	83 e2 f0             	and    edx,0xfffffff0
c001a0dc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a0e0:	c3                   	ret    
c001a0e1:	90                   	nop

c001a0e2 <PCI::readBAR32(unsigned int, int)>:
c001a0e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0ea:	f6 c2 01             	test   dl,0x1
c001a0ed:	74 07                	je     c001a0f6 <PCI::readBAR32(unsigned int, int)+0x14>
c001a0ef:	83 e2 fc             	and    edx,0xfffffffc
c001a0f2:	01 c2                	add    edx,eax
c001a0f4:	ed                   	in     eax,dx
c001a0f5:	c3                   	ret    
c001a0f6:	83 e2 f0             	and    edx,0xfffffff0
c001a0f9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a0fc:	c3                   	ret    
c001a0fd:	90                   	nop

c001a0fe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a0fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a106:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a10a:	f6 c2 01             	test   dl,0x1
c001a10d:	74 07                	je     c001a116 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a10f:	83 e2 fc             	and    edx,0xfffffffc
c001a112:	01 ca                	add    edx,ecx
c001a114:	ee                   	out    dx,al
c001a115:	c3                   	ret    
c001a116:	83 e2 f0             	and    edx,0xfffffff0
c001a119:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a11c:	c3                   	ret    
c001a11d:	90                   	nop

c001a11e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a11e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a126:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a12a:	f6 c2 01             	test   dl,0x1
c001a12d:	74 08                	je     c001a137 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a12f:	83 e2 fc             	and    edx,0xfffffffc
c001a132:	01 ca                	add    edx,ecx
c001a134:	66 ef                	out    dx,ax
c001a136:	c3                   	ret    
c001a137:	83 e2 f0             	and    edx,0xfffffff0
c001a13a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a13e:	c3                   	ret    
c001a13f:	90                   	nop

c001a140 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a140:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a144:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a148:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a14c:	f6 c2 01             	test   dl,0x1
c001a14f:	74 07                	je     c001a158 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a151:	83 e2 fc             	and    edx,0xfffffffc
c001a154:	01 ca                	add    edx,ecx
c001a156:	ef                   	out    dx,eax
c001a157:	c3                   	ret    
c001a158:	83 e2 f0             	and    edx,0xfffffff0
c001a15b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a15e:	c3                   	ret    
c001a15f:	90                   	nop

c001a160 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a160:	55                   	push   ebp
c001a161:	57                   	push   edi
c001a162:	56                   	push   esi
c001a163:	53                   	push   ebx
c001a164:	83 ec 0c             	sub    esp,0xc
c001a167:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a16c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a170:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a174:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a178:	83 fe 07             	cmp    esi,0x7
c001a17b:	76 10                	jbe    c001a18d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a17d:	83 ec 0c             	sub    esp,0xc
c001a180:	68 07 19 02 c0       	push   0xc0021907
c001a185:	e8 e9 66 ff ff       	call   c0010873 <KePanic(char const*)>
c001a18a:	83 c4 10             	add    esp,0x10
c001a18d:	0f b6 db             	movzx  ebx,bl
c001a190:	83 fb 0f             	cmp    ebx,0xf
c001a193:	76 10                	jbe    c001a1a5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a195:	83 ec 0c             	sub    esp,0xc
c001a198:	68 37 19 02 c0       	push   0xc0021937
c001a19d:	e8 d1 66 ff ff       	call   c0010873 <KePanic(char const*)>
c001a1a2:	83 c4 10             	add    esp,0x10
c001a1a5:	8d 04 36             	lea    eax,[esi+esi*1]
c001a1a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1ad:	83 c8 f0             	or     eax,0xfffffff0
c001a1b0:	ee                   	out    dx,al
c001a1b1:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a1b6:	89 e8                	mov    eax,ebp
c001a1b8:	ee                   	out    dx,al
c001a1b9:	83 c4 0c             	add    esp,0xc
c001a1bc:	89 d8                	mov    eax,ebx
c001a1be:	89 f9                	mov    ecx,edi
c001a1c0:	c1 e0 08             	shl    eax,0x8
c001a1c3:	0f b6 d9             	movzx  ebx,cl
c001a1c6:	83 e3 fc             	and    ebx,0xfffffffc
c001a1c9:	09 d8                	or     eax,ebx
c001a1cb:	5b                   	pop    ebx
c001a1cc:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a1d1:	5e                   	pop    esi
c001a1d2:	5f                   	pop    edi
c001a1d3:	5d                   	pop    ebp
c001a1d4:	c3                   	ret    
c001a1d5:	90                   	nop

c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1d6:	57                   	push   edi
c001a1d7:	56                   	push   esi
c001a1d8:	53                   	push   ebx
c001a1d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a1dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1e1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a1e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1f3:	83 ff 01             	cmp    edi,0x1
c001a1f6:	75 3f                	jne    c001a237 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a1f8:	89 de                	mov    esi,ebx
c001a1fa:	0f b6 c0             	movzx  eax,al
c001a1fd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a203:	c1 e0 10             	shl    eax,0x10
c001a206:	0f b6 c9             	movzx  ecx,cl
c001a209:	09 f0                	or     eax,esi
c001a20b:	c1 e1 08             	shl    ecx,0x8
c001a20e:	0f b6 d2             	movzx  edx,dl
c001a211:	09 c8                	or     eax,ecx
c001a213:	c1 e2 0b             	shl    edx,0xb
c001a216:	09 d0                	or     eax,edx
c001a218:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a21d:	0d 00 00 00 80       	or     eax,0x80000000
c001a222:	ef                   	out    dx,eax
c001a223:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a228:	ed                   	in     eax,dx
c001a229:	83 e3 02             	and    ebx,0x2
c001a22c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a233:	d3 e8                	shr    eax,cl
c001a235:	eb 44                	jmp    c001a27b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a237:	83 ff 02             	cmp    edi,0x2
c001a23a:	75 2d                	jne    c001a269 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a23c:	83 ec 0c             	sub    esp,0xc
c001a23f:	0f b6 c9             	movzx  ecx,cl
c001a242:	0f b6 d2             	movzx  edx,dl
c001a245:	0f b6 fb             	movzx  edi,bl
c001a248:	0f b6 c0             	movzx  eax,al
c001a24b:	57                   	push   edi
c001a24c:	51                   	push   ecx
c001a24d:	52                   	push   edx
c001a24e:	50                   	push   eax
c001a24f:	56                   	push   esi
c001a250:	e8 0b ff ff ff       	call   c001a160 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a255:	89 c2                	mov    edx,eax
c001a257:	ed                   	in     eax,dx
c001a258:	83 e3 02             	and    ebx,0x2
c001a25b:	83 c4 20             	add    esp,0x20
c001a25e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a265:	d3 e8                	shr    eax,cl
c001a267:	eb 12                	jmp    c001a27b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a269:	83 ec 0c             	sub    esp,0xc
c001a26c:	68 67 19 02 c0       	push   0xc0021967
c001a271:	e8 fd 65 ff ff       	call   c0010873 <KePanic(char const*)>
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	31 c0                	xor    eax,eax
c001a27b:	5b                   	pop    ebx
c001a27c:	5e                   	pop    esi
c001a27d:	5f                   	pop    edi
c001a27e:	c3                   	ret    
c001a27f:	90                   	nop

c001a280 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a280:	83 ec 18             	sub    esp,0x18
c001a283:	6a 00                	push   0x0
c001a285:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a28a:	50                   	push   eax
c001a28b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a290:	50                   	push   eax
c001a291:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a296:	50                   	push   eax
c001a297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a29b:	e8 36 ff ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2a0:	83 c4 2c             	add    esp,0x2c
c001a2a3:	c3                   	ret    

c001a2a4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a2a4:	83 ec 18             	sub    esp,0x18
c001a2a7:	6a 0e                	push   0xe
c001a2a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ae:	50                   	push   eax
c001a2af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2b4:	50                   	push   eax
c001a2b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ba:	50                   	push   eax
c001a2bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2bf:	e8 12 ff ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2c4:	83 c4 2c             	add    esp,0x2c
c001a2c7:	0f b6 c0             	movzx  eax,al
c001a2ca:	c3                   	ret    
c001a2cb:	90                   	nop

c001a2cc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a2cc:	55                   	push   ebp
c001a2cd:	57                   	push   edi
c001a2ce:	56                   	push   esi
c001a2cf:	53                   	push   ebx
c001a2d0:	83 ec 18             	sub    esp,0x18
c001a2d3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a2d8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a2dd:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a2e2:	6a 0a                	push   0xa
c001a2e4:	56                   	push   esi
c001a2e5:	55                   	push   ebp
c001a2e6:	57                   	push   edi
c001a2e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2eb:	e8 e6 fe ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2f0:	83 c4 14             	add    esp,0x14
c001a2f3:	89 c3                	mov    ebx,eax
c001a2f5:	6a 0a                	push   0xa
c001a2f7:	0f b6 db             	movzx  ebx,bl
c001a2fa:	56                   	push   esi
c001a2fb:	55                   	push   ebp
c001a2fc:	57                   	push   edi
c001a2fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a301:	e8 d0 fe ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a306:	83 c4 2c             	add    esp,0x2c
c001a309:	25 00 ff 00 00       	and    eax,0xff00
c001a30e:	09 d8                	or     eax,ebx
c001a310:	5b                   	pop    ebx
c001a311:	5e                   	pop    esi
c001a312:	5f                   	pop    edi
c001a313:	5d                   	pop    ebp
c001a314:	c3                   	ret    
c001a315:	90                   	nop

c001a316 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a316:	83 ec 18             	sub    esp,0x18
c001a319:	6a 08                	push   0x8
c001a31b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a320:	50                   	push   eax
c001a321:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a326:	50                   	push   eax
c001a327:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a32c:	50                   	push   eax
c001a32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a331:	e8 a0 fe ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a336:	83 c4 2c             	add    esp,0x2c
c001a339:	0f b6 c4             	movzx  eax,ah
c001a33c:	c3                   	ret    
c001a33d:	90                   	nop

c001a33e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a33e:	83 ec 18             	sub    esp,0x18
c001a341:	6a 08                	push   0x8
c001a343:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a348:	50                   	push   eax
c001a349:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34e:	50                   	push   eax
c001a34f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a354:	50                   	push   eax
c001a355:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a359:	e8 78 fe ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a35e:	83 c4 2c             	add    esp,0x2c
c001a361:	c3                   	ret    

c001a362 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a362:	83 ec 18             	sub    esp,0x18
c001a365:	6a 3c                	push   0x3c
c001a367:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a36c:	50                   	push   eax
c001a36d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a372:	50                   	push   eax
c001a373:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a378:	50                   	push   eax
c001a379:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a37d:	e8 54 fe ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a382:	83 c4 2c             	add    esp,0x2c
c001a385:	c3                   	ret    

c001a386 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a386:	83 ec 18             	sub    esp,0x18
c001a389:	6a 18                	push   0x18
c001a38b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a390:	50                   	push   eax
c001a391:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a396:	50                   	push   eax
c001a397:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a39c:	50                   	push   eax
c001a39d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3a1:	e8 30 fe ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3a6:	83 c4 2c             	add    esp,0x2c
c001a3a9:	0f b6 c4             	movzx  eax,ah
c001a3ac:	c3                   	ret    
c001a3ad:	90                   	nop

c001a3ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a3ae:	55                   	push   ebp
c001a3af:	57                   	push   edi
c001a3b0:	56                   	push   esi
c001a3b1:	53                   	push   ebx
c001a3b2:	83 ec 28             	sub    esp,0x28
c001a3b5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3b9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a3be:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a3c3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a3c8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a3cf:	8d 43 12             	lea    eax,[ebx+0x12]
c001a3d2:	83 c3 10             	add    ebx,0x10
c001a3d5:	0f b6 c0             	movzx  eax,al
c001a3d8:	0f b6 db             	movzx  ebx,bl
c001a3db:	50                   	push   eax
c001a3dc:	51                   	push   ecx
c001a3dd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a3e1:	57                   	push   edi
c001a3e2:	55                   	push   ebp
c001a3e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3e7:	e8 ea fd ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3ec:	83 c4 14             	add    esp,0x14
c001a3ef:	89 c6                	mov    esi,eax
c001a3f1:	53                   	push   ebx
c001a3f2:	c1 e6 10             	shl    esi,0x10
c001a3f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a3f9:	51                   	push   ecx
c001a3fa:	57                   	push   edi
c001a3fb:	55                   	push   ebp
c001a3fc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a400:	e8 d1 fd ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a405:	83 c4 3c             	add    esp,0x3c
c001a408:	0f b7 c0             	movzx  eax,ax
c001a40b:	5b                   	pop    ebx
c001a40c:	09 f0                	or     eax,esi
c001a40e:	5e                   	pop    esi
c001a40f:	5f                   	pop    edi
c001a410:	5d                   	pop    ebp
c001a411:	c3                   	ret    

c001a412 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a412:	55                   	push   ebp
c001a413:	57                   	push   edi
c001a414:	56                   	push   esi
c001a415:	53                   	push   ebx
c001a416:	83 ec 0c             	sub    esp,0xc
c001a419:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a41d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a421:	89 f5                	mov    ebp,esi
c001a423:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a429:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a42d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a431:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a435:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a439:	83 f9 01             	cmp    ecx,0x1
c001a43c:	75 5d                	jne    c001a49b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a43e:	0f b6 c8             	movzx  ecx,al
c001a441:	0f b6 d2             	movzx  edx,dl
c001a444:	c1 e1 10             	shl    ecx,0x10
c001a447:	c1 e2 0b             	shl    edx,0xb
c001a44a:	89 f0                	mov    eax,esi
c001a44c:	25 fc 00 00 00       	and    eax,0xfc
c001a451:	09 c1                	or     ecx,eax
c001a453:	89 e8                	mov    eax,ebp
c001a455:	0f b6 c0             	movzx  eax,al
c001a458:	c1 e0 08             	shl    eax,0x8
c001a45b:	09 c1                	or     ecx,eax
c001a45d:	09 d1                	or     ecx,edx
c001a45f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a464:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a46a:	89 c8                	mov    eax,ecx
c001a46c:	ef                   	out    dx,eax
c001a46d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a472:	ed                   	in     eax,dx
c001a473:	0f b7 db             	movzx  ebx,bx
c001a476:	83 e6 02             	and    esi,0x2
c001a479:	74 0a                	je     c001a485 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a47b:	0f b7 d0             	movzx  edx,ax
c001a47e:	c1 e3 10             	shl    ebx,0x10
c001a481:	09 d3                	or     ebx,edx
c001a483:	eb 05                	jmp    c001a48a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a485:	66 31 c0             	xor    ax,ax
c001a488:	09 c3                	or     ebx,eax
c001a48a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a48f:	89 c8                	mov    eax,ecx
c001a491:	ef                   	out    dx,eax
c001a492:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a497:	89 d8                	mov    eax,ebx
c001a499:	eb 41                	jmp    c001a4dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a49b:	83 f9 02             	cmp    ecx,0x2
c001a49e:	75 45                	jne    c001a4e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	0f b6 d2             	movzx  edx,dl
c001a4a6:	89 f1                	mov    ecx,esi
c001a4a8:	0f b6 c0             	movzx  eax,al
c001a4ab:	0f b6 f1             	movzx  esi,cl
c001a4ae:	89 e9                	mov    ecx,ebp
c001a4b0:	56                   	push   esi
c001a4b1:	0f b6 c9             	movzx  ecx,cl
c001a4b4:	51                   	push   ecx
c001a4b5:	52                   	push   edx
c001a4b6:	50                   	push   eax
c001a4b7:	57                   	push   edi
c001a4b8:	e8 a3 fc ff ff       	call   c001a160 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4bd:	89 c2                	mov    edx,eax
c001a4bf:	ed                   	in     eax,dx
c001a4c0:	83 c4 20             	add    esp,0x20
c001a4c3:	0f b7 db             	movzx  ebx,bx
c001a4c6:	f6 c2 02             	test   dl,0x2
c001a4c9:	74 0c                	je     c001a4d7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a4cb:	0f b7 c8             	movzx  ecx,ax
c001a4ce:	89 d8                	mov    eax,ebx
c001a4d0:	c1 e0 10             	shl    eax,0x10
c001a4d3:	09 c8                	or     eax,ecx
c001a4d5:	eb 05                	jmp    c001a4dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a4d7:	66 31 c0             	xor    ax,ax
c001a4da:	09 d8                	or     eax,ebx
c001a4dc:	ef                   	out    dx,eax
c001a4dd:	83 c4 0c             	add    esp,0xc
c001a4e0:	5b                   	pop    ebx
c001a4e1:	5e                   	pop    esi
c001a4e2:	5f                   	pop    edi
c001a4e3:	5d                   	pop    ebp
c001a4e4:	c3                   	ret    
c001a4e5:	c7 44 24 20 67 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021967
c001a4ed:	83 c4 0c             	add    esp,0xc
c001a4f0:	5b                   	pop    ebx
c001a4f1:	5e                   	pop    esi
c001a4f2:	5f                   	pop    edi
c001a4f3:	5d                   	pop    ebp
c001a4f4:	e9 7a 63 ff ff       	jmp    c0010873 <KePanic(char const*)>
c001a4f9:	90                   	nop

c001a4fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a4fa:	55                   	push   ebp
c001a4fb:	57                   	push   edi
c001a4fc:	56                   	push   esi
c001a4fd:	53                   	push   ebx
c001a4fe:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a504:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a50b:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a512:	0f 85 bd 00 00 00    	jne    c001a5d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a518:	83 ec 0c             	sub    esp,0xc
c001a51b:	68 14 01 00 00       	push   0x114
c001a520:	e8 89 d5 fe ff       	call   c0007aae <malloc>
c001a525:	83 c4 0c             	add    esp,0xc
c001a528:	89 c3                	mov    ebx,eax
c001a52a:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a530:	68 6d 19 02 c0       	push   0xc002196d
c001a535:	50                   	push   eax
c001a536:	e8 dd 09 ff ff       	call   c000af18 <File::File(char const*, Process*)>
c001a53b:	83 c4 10             	add    esp,0x10
c001a53e:	85 db                	test   ebx,ebx
c001a540:	0f 84 67 02 00 00    	je     c001a7ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a546:	56                   	push   esi
c001a547:	56                   	push   esi
c001a548:	6a 01                	push   0x1
c001a54a:	53                   	push   ebx
c001a54b:	e8 84 0a ff ff       	call   c000afd4 <File::open(FileOpenMode)>
c001a550:	83 c4 10             	add    esp,0x10
c001a553:	85 c0                	test   eax,eax
c001a555:	0f 85 52 02 00 00    	jne    c001a7ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a55b:	52                   	push   edx
c001a55c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a560:	50                   	push   eax
c001a561:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a565:	50                   	push   eax
c001a566:	53                   	push   ebx
c001a567:	e8 14 0d ff ff       	call   c000b280 <File::stat(unsigned long long*, bool*)>
c001a56c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a570:	40                   	inc    eax
c001a571:	89 04 24             	mov    DWORD PTR [esp],eax
c001a574:	e8 35 d5 fe ff       	call   c0007aae <malloc>
c001a579:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a57d:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a582:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a586:	59                   	pop    ecx
c001a587:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a589:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a58d:	51                   	push   ecx
c001a58e:	50                   	push   eax
c001a58f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a593:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a597:	53                   	push   ebx
c001a598:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a59b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a59f:	83 c4 20             	add    esp,0x20
c001a5a2:	89 c8                	mov    eax,ecx
c001a5a4:	99                   	cdq    
c001a5a5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a5a9:	0f 85 fe 01 00 00    	jne    c001a7ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5af:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a5b3:	0f 85 f4 01 00 00    	jne    c001a7ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5b9:	83 ec 0c             	sub    esp,0xc
c001a5bc:	53                   	push   ebx
c001a5bd:	e8 70 0a ff ff       	call   c000b032 <File::close()>
c001a5c2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5c6:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a5cd:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a5d2:	83 c4 10             	add    esp,0x10
c001a5d5:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a5da:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a5e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5e4:	31 f6                	xor    esi,esi
c001a5e6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a5ee:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a5f5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a5fa:	31 c9                	xor    ecx,ecx
c001a5fc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a604:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a609:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a611:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a615:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a61d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a621:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a625:	0f 8e 82 01 00 00    	jle    c001a7ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a62b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a62e:	d4 40                	aam    0x40
c001a630:	d5 39                	aad    0x39
c001a632:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a636:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a63a:	d4 40                	aam    0x40
c001a63c:	d5 39                	aad    0x39
c001a63e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a642:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a646:	d4 40                	aam    0x40
c001a648:	d5 39                	aad    0x39
c001a64a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a64e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a652:	d4 40                	aam    0x40
c001a654:	d5 39                	aad    0x39
c001a656:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a65a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a65e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a662:	3c 56                	cmp    al,0x56
c001a664:	74 43                	je     c001a6a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a666:	d4 40                	aam    0x40
c001a668:	d5 39                	aad    0x39
c001a66a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a66d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a671:	0f b6 c9             	movzx  ecx,cl
c001a674:	c1 e1 04             	shl    ecx,0x4
c001a677:	d4 40                	aam    0x40
c001a679:	d5 39                	aad    0x39
c001a67b:	83 e8 30             	sub    eax,0x30
c001a67e:	0f b6 c0             	movzx  eax,al
c001a681:	09 c1                	or     ecx,eax
c001a683:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a687:	c1 e1 04             	shl    ecx,0x4
c001a68a:	d4 40                	aam    0x40
c001a68c:	d5 39                	aad    0x39
c001a68e:	83 e8 30             	sub    eax,0x30
c001a691:	0f b6 c0             	movzx  eax,al
c001a694:	09 c1                	or     ecx,eax
c001a696:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a69a:	c1 e1 04             	shl    ecx,0x4
c001a69d:	d4 40                	aam    0x40
c001a69f:	d5 39                	aad    0x39
c001a6a1:	83 e8 30             	sub    eax,0x30
c001a6a4:	0f b6 c0             	movzx  eax,al
c001a6a7:	09 c1                	or     ecx,eax
c001a6a9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a6ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a6b1:	3c 58                	cmp    al,0x58
c001a6b3:	74 47                	je     c001a6fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a6b5:	d4 40                	aam    0x40
c001a6b7:	d5 39                	aad    0x39
c001a6b9:	8d 50 d0             	lea    edx,[eax-0x30]
c001a6bc:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a6c0:	0f b6 d2             	movzx  edx,dl
c001a6c3:	c1 e2 04             	shl    edx,0x4
c001a6c6:	d4 40                	aam    0x40
c001a6c8:	d5 39                	aad    0x39
c001a6ca:	83 e8 30             	sub    eax,0x30
c001a6cd:	0f b6 c0             	movzx  eax,al
c001a6d0:	09 c2                	or     edx,eax
c001a6d2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a6d6:	c1 e2 04             	shl    edx,0x4
c001a6d9:	d4 40                	aam    0x40
c001a6db:	d5 39                	aad    0x39
c001a6dd:	83 e8 30             	sub    eax,0x30
c001a6e0:	0f b6 c0             	movzx  eax,al
c001a6e3:	09 c2                	or     edx,eax
c001a6e5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a6e9:	c1 e2 04             	shl    edx,0x4
c001a6ec:	d4 40                	aam    0x40
c001a6ee:	d5 39                	aad    0x39
c001a6f0:	83 e8 30             	sub    eax,0x30
c001a6f3:	0f b6 c0             	movzx  eax,al
c001a6f6:	09 c2                	or     edx,eax
c001a6f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6fc:	83 c6 10             	add    esi,0x10
c001a6ff:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a703:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a707:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a70b:	83 fa 0a             	cmp    edx,0xa
c001a70e:	74 0b                	je     c001a71b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a710:	47                   	inc    edi
c001a711:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a715:	75 19                	jne    c001a730 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a717:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a71b:	31 c0                	xor    eax,eax
c001a71d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a722:	0f 94 c0             	sete   al
c001a725:	01 c6                	add    esi,eax
c001a727:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a72c:	75 0b                	jne    c001a739 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a72e:	eb 14                	jmp    c001a744 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a730:	46                   	inc    esi
c001a731:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a734:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a737:	eb ca                	jmp    c001a703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a739:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a73e:	0f 85 dd fe ff ff    	jne    c001a621 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a744:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a749:	74 10                	je     c001a75b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a74b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a750:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a755:	0f 85 c6 fe ff ff    	jne    c001a621 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a75b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a75f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a763:	83 e8 30             	sub    eax,0x30
c001a766:	83 ef 30             	sub    edi,0x30
c001a769:	c1 e0 04             	shl    eax,0x4
c001a76c:	09 f8                	or     eax,edi
c001a76e:	0f b6 c0             	movzx  eax,al
c001a771:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a775:	0f 85 a6 fe ff ff    	jne    c001a621 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a77b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a77f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a783:	83 e8 30             	sub    eax,0x30
c001a786:	83 ef 30             	sub    edi,0x30
c001a789:	c1 e0 04             	shl    eax,0x4
c001a78c:	09 f8                	or     eax,edi
c001a78e:	0f b6 c0             	movzx  eax,al
c001a791:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a795:	0f 85 86 fe ff ff    	jne    c001a621 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a79b:	50                   	push   eax
c001a79c:	50                   	push   eax
c001a79d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a7a1:	50                   	push   eax
c001a7a2:	55                   	push   ebp
c001a7a3:	e8 98 5e fe ff       	call   c0000640 <strcpy>
c001a7a8:	83 c4 10             	add    esp,0x10
c001a7ab:	eb 06                	jmp    c001a7b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a7ad:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a7b1:	31 ed                	xor    ebp,ebp
c001a7b3:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a7b9:	89 e8                	mov    eax,ebp
c001a7bb:	5b                   	pop    ebx
c001a7bc:	5e                   	pop    esi
c001a7bd:	5f                   	pop    edi
c001a7be:	5d                   	pop    ebp
c001a7bf:	c3                   	ret    

c001a7c0 <PCI::checkBus(unsigned char)>:
c001a7c0:	56                   	push   esi
c001a7c1:	53                   	push   ebx
c001a7c2:	31 db                	xor    ebx,ebx
c001a7c4:	51                   	push   ecx
c001a7c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a7ca:	52                   	push   edx
c001a7cb:	53                   	push   ebx
c001a7cc:	43                   	inc    ebx
c001a7cd:	56                   	push   esi
c001a7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7d2:	e8 03 03 00 00       	call   c001aada <PCI::checkDevice(unsigned char, unsigned char)>
c001a7d7:	83 c4 10             	add    esp,0x10
c001a7da:	83 fb 20             	cmp    ebx,0x20
c001a7dd:	75 eb                	jne    c001a7ca <PCI::checkBus(unsigned char)+0xa>
c001a7df:	58                   	pop    eax
c001a7e0:	5b                   	pop    ebx
c001a7e1:	5e                   	pop    esi
c001a7e2:	c3                   	ret    
c001a7e3:	90                   	nop

c001a7e4 <PCI::foundDevice(PCIDeviceInfo)>:
c001a7e4:	55                   	push   ebp
c001a7e5:	57                   	push   edi
c001a7e6:	56                   	push   esi
c001a7e7:	53                   	push   ebx
c001a7e8:	83 ec 1c             	sub    esp,0x1c
c001a7eb:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a7f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7f4:	3d ff ff 00 00       	cmp    eax,0xffff
c001a7f9:	0f 84 57 01 00 00    	je     c001a956 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a7ff:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a804:	66 3d 06 04          	cmp    ax,0x406
c001a808:	75 2c                	jne    c001a836 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a80a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a80f:	50                   	push   eax
c001a810:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a815:	50                   	push   eax
c001a816:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a81b:	50                   	push   eax
c001a81c:	53                   	push   ebx
c001a81d:	e8 64 fb ff ff       	call   c001a386 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a822:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a826:	0f b6 c0             	movzx  eax,al
c001a829:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a82d:	83 c4 2c             	add    esp,0x2c
c001a830:	5b                   	pop    ebx
c001a831:	5e                   	pop    esi
c001a832:	5f                   	pop    edi
c001a833:	5d                   	pop    ebp
c001a834:	eb 8a                	jmp    c001a7c0 <PCI::checkBus(unsigned char)>
c001a836:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a83a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a840:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a844:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a848:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a84d:	85 d2                	test   edx,edx
c001a84f:	74 36                	je     c001a887 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a851:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a854:	85 c9                	test   ecx,ecx
c001a856:	74 2b                	je     c001a883 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a858:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a85e:	31 ee                	xor    esi,ebp
c001a860:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a866:	75 1b                	jne    c001a883 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a868:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a86c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a872:	75 0f                	jne    c001a883 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a874:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a87b:	39 f9                	cmp    ecx,edi
c001a87d:	0f 84 d3 00 00 00    	je     c001a956 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a883:	8b 12                	mov    edx,DWORD PTR [edx]
c001a885:	eb c6                	jmp    c001a84d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a887:	3d 01 06 00 00       	cmp    eax,0x601
c001a88c:	75 19                	jne    c001a8a7 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a88e:	83 ec 0c             	sub    esp,0xc
c001a891:	68 64 01 00 00       	push   0x164
c001a896:	e8 13 d2 fe ff       	call   c0007aae <malloc>
c001a89b:	89 c5                	mov    ebp,eax
c001a89d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8a0:	e8 a1 0e 00 00       	call   c001b746 <SATABus::SATABus()>
c001a8a5:	eb 1e                	jmp    c001a8c5 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a8a7:	3d 01 01 00 00       	cmp    eax,0x101
c001a8ac:	75 62                	jne    c001a910 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a8ae:	83 ec 0c             	sub    esp,0xc
c001a8b1:	68 70 02 00 00       	push   0x270
c001a8b6:	e8 f3 d1 fe ff       	call   c0007aae <malloc>
c001a8bb:	89 c5                	mov    ebp,eax
c001a8bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8c0:	e8 e5 02 00 00       	call   c001abaa <IDE::IDE()>
c001a8c5:	5f                   	pop    edi
c001a8c6:	58                   	pop    eax
c001a8c7:	55                   	push   ebp
c001a8c8:	53                   	push   ebx
c001a8c9:	e8 fc 14 ff ff       	call   c000bdca <Device::addChild(Device*)>
c001a8ce:	83 ec 1c             	sub    esp,0x1c
c001a8d1:	b9 09 00 00 00       	mov    ecx,0x9
c001a8d6:	fc                   	cld    
c001a8d7:	89 e7                	mov    edi,esp
c001a8d9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a8dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8df:	55                   	push   ebp
c001a8e0:	e8 2b 14 ff ff       	call   c000bd10 <Device::preOpenPCI(PCIDeviceInfo)>
c001a8e5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8e8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a8ec:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a8f4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a8fc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a904:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a907:	83 c4 4c             	add    esp,0x4c
c001a90a:	5b                   	pop    ebx
c001a90b:	5e                   	pop    esi
c001a90c:	5f                   	pop    edi
c001a90d:	5d                   	pop    ebp
c001a90e:	ff e0                	jmp    eax
c001a910:	83 ec 0c             	sub    esp,0xc
c001a913:	68 58 01 00 00       	push   0x158
c001a918:	e8 91 d1 fe ff       	call   c0007aae <malloc>
c001a91d:	89 c5                	mov    ebp,eax
c001a91f:	58                   	pop    eax
c001a920:	5a                   	pop    edx
c001a921:	68 86 19 02 c0       	push   0xc0021986
c001a926:	55                   	push   ebp
c001a927:	e8 3c 17 ff ff       	call   c000c068 <DriverlessDevice::DriverlessDevice(char const*)>
c001a92c:	59                   	pop    ecx
c001a92d:	5e                   	pop    esi
c001a92e:	55                   	push   ebp
c001a92f:	53                   	push   ebx
c001a930:	e8 95 14 ff ff       	call   c000bdca <Device::addChild(Device*)>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	b9 09 00 00 00       	mov    ecx,0x9
c001a93d:	fc                   	cld    
c001a93e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a942:	89 fe                	mov    esi,edi
c001a944:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a946:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001a94a:	83 c4 1c             	add    esp,0x1c
c001a94d:	5b                   	pop    ebx
c001a94e:	5e                   	pop    esi
c001a94f:	5f                   	pop    edi
c001a950:	5d                   	pop    ebp
c001a951:	e9 ba 13 ff ff       	jmp    c000bd10 <Device::preOpenPCI(PCIDeviceInfo)>
c001a956:	83 c4 1c             	add    esp,0x1c
c001a959:	5b                   	pop    ebx
c001a95a:	5e                   	pop    esi
c001a95b:	5f                   	pop    edi
c001a95c:	5d                   	pop    ebp
c001a95d:	c3                   	ret    

c001a95e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a95e:	55                   	push   ebp
c001a95f:	57                   	push   edi
c001a960:	56                   	push   esi
c001a961:	53                   	push   ebx
c001a962:	83 ec 68             	sub    esp,0x68
c001a965:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a969:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a970:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a974:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a97b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a980:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a984:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a98b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a990:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a994:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a999:	6a 0c                	push   0xc
c001a99b:	57                   	push   edi
c001a99c:	53                   	push   ebx
c001a99d:	56                   	push   esi
c001a99e:	55                   	push   ebp
c001a99f:	e8 32 f8 ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9a4:	83 c4 20             	add    esp,0x20
c001a9a7:	57                   	push   edi
c001a9a8:	53                   	push   ebx
c001a9a9:	56                   	push   esi
c001a9aa:	55                   	push   ebp
c001a9ab:	e8 1c f9 ff ff       	call   c001a2cc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a9b0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a9b5:	57                   	push   edi
c001a9b6:	53                   	push   ebx
c001a9b7:	56                   	push   esi
c001a9b8:	55                   	push   ebp
c001a9b9:	e8 a4 f9 ff ff       	call   c001a362 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a9be:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a9c2:	83 c4 14             	add    esp,0x14
c001a9c5:	6a 3c                	push   0x3c
c001a9c7:	57                   	push   edi
c001a9c8:	53                   	push   ebx
c001a9c9:	56                   	push   esi
c001a9ca:	55                   	push   ebp
c001a9cb:	e8 06 f8 ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9d0:	0f b6 c4             	movzx  eax,ah
c001a9d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9d7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a9db:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a9df:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001a9e4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a9ea:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a9f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9f4:	83 c4 20             	add    esp,0x20
c001a9f7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001a9fc:	74 30                	je     c001aa2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9fe:	31 c0                	xor    eax,eax
c001aa00:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001aa04:	7e 28                	jle    c001aa2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001aa06:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa0e:	39 cb                	cmp    ebx,ecx
c001aa10:	75 19                	jne    c001aa2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa12:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa1a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa1e:	75 0b                	jne    c001aa2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa20:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa27:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa2b:	40                   	inc    eax
c001aa2c:	eb d2                	jmp    c001aa00 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa2e:	31 d2                	xor    edx,edx
c001aa30:	83 ec 0c             	sub    esp,0xc
c001aa33:	57                   	push   edi
c001aa34:	53                   	push   ebx
c001aa35:	56                   	push   esi
c001aa36:	52                   	push   edx
c001aa37:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa3b:	55                   	push   ebp
c001aa3c:	e8 6d f9 ff ff       	call   c001a3ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa45:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa49:	42                   	inc    edx
c001aa4a:	83 c4 20             	add    esp,0x20
c001aa4d:	83 fa 06             	cmp    edx,0x6
c001aa50:	75 de                	jne    c001aa30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa5a:	c1 e2 08             	shl    edx,0x8
c001aa5d:	83 ec 0c             	sub    esp,0xc
c001aa60:	0f b6 c4             	movzx  eax,ah
c001aa63:	09 d0                	or     eax,edx
c001aa65:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa6a:	6a 02                	push   0x2
c001aa6c:	57                   	push   edi
c001aa6d:	53                   	push   ebx
c001aa6e:	56                   	push   esi
c001aa6f:	55                   	push   ebp
c001aa70:	e8 61 f7 ff ff       	call   c001a1d6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa75:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa7a:	83 c4 20             	add    esp,0x20
c001aa7d:	57                   	push   edi
c001aa7e:	53                   	push   ebx
c001aa7f:	56                   	push   esi
c001aa80:	55                   	push   ebp
c001aa81:	e8 90 f8 ff ff       	call   c001a316 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa86:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aa8a:	57                   	push   edi
c001aa8b:	53                   	push   ebx
c001aa8c:	56                   	push   esi
c001aa8d:	55                   	push   ebp
c001aa8e:	e8 ed f7 ff ff       	call   c001a280 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa93:	b9 09 00 00 00       	mov    ecx,0x9
c001aa98:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aa9d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aaa1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aaa5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aaa9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aaad:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aab1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aab5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aab9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aabd:	83 ec 0c             	sub    esp,0xc
c001aac0:	fc                   	cld    
c001aac1:	89 e7                	mov    edi,esp
c001aac3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aac7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aac9:	55                   	push   ebp
c001aaca:	e8 15 fd ff ff       	call   c001a7e4 <PCI::foundDevice(PCIDeviceInfo)>
c001aacf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aad5:	5b                   	pop    ebx
c001aad6:	5e                   	pop    esi
c001aad7:	5f                   	pop    edi
c001aad8:	5d                   	pop    ebp
c001aad9:	c3                   	ret    

c001aada <PCI::checkDevice(unsigned char, unsigned char)>:
c001aada:	55                   	push   ebp
c001aadb:	57                   	push   edi
c001aadc:	56                   	push   esi
c001aadd:	53                   	push   ebx
c001aade:	83 ec 0c             	sub    esp,0xc
c001aae1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aae5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aaea:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aaef:	6a 00                	push   0x0
c001aaf1:	56                   	push   esi
c001aaf2:	57                   	push   edi
c001aaf3:	55                   	push   ebp
c001aaf4:	e8 87 f7 ff ff       	call   c001a280 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aaf9:	6a 00                	push   0x0
c001aafb:	56                   	push   esi
c001aafc:	57                   	push   edi
c001aafd:	55                   	push   ebp
c001aafe:	e8 5b fe ff ff       	call   c001a95e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab03:	83 c4 20             	add    esp,0x20
c001ab06:	6a 00                	push   0x0
c001ab08:	56                   	push   esi
c001ab09:	57                   	push   edi
c001ab0a:	55                   	push   ebp
c001ab0b:	e8 94 f7 ff ff       	call   c001a2a4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	a8 80                	test   al,0x80
c001ab15:	74 2d                	je     c001ab44 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab17:	bb 01 00 00 00       	mov    ebx,0x1
c001ab1c:	53                   	push   ebx
c001ab1d:	56                   	push   esi
c001ab1e:	57                   	push   edi
c001ab1f:	55                   	push   ebp
c001ab20:	e8 5b f7 ff ff       	call   c001a280 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab25:	83 c4 10             	add    esp,0x10
c001ab28:	0f b7 c0             	movzx  eax,ax
c001ab2b:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab30:	74 0c                	je     c001ab3e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab32:	53                   	push   ebx
c001ab33:	56                   	push   esi
c001ab34:	57                   	push   edi
c001ab35:	55                   	push   ebp
c001ab36:	e8 23 fe ff ff       	call   c001a95e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab3b:	83 c4 10             	add    esp,0x10
c001ab3e:	43                   	inc    ebx
c001ab3f:	83 fb 08             	cmp    ebx,0x8
c001ab42:	75 d8                	jne    c001ab1c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab44:	83 c4 0c             	add    esp,0xc
c001ab47:	5b                   	pop    ebx
c001ab48:	5e                   	pop    esi
c001ab49:	5f                   	pop    edi
c001ab4a:	5d                   	pop    ebp
c001ab4b:	c3                   	ret    

c001ab4c <PCI::detect()>:
c001ab4c:	56                   	push   esi
c001ab4d:	53                   	push   ebx
c001ab4e:	53                   	push   ebx
c001ab4f:	31 db                	xor    ebx,ebx
c001ab51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab55:	6a 00                	push   0x0
c001ab57:	6a 00                	push   0x0
c001ab59:	6a 00                	push   0x0
c001ab5b:	56                   	push   esi
c001ab5c:	e8 43 f7 ff ff       	call   c001a2a4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	a8 80                	test   al,0x80
c001ab66:	75 21                	jne    c001ab89 <PCI::detect()+0x3d>
c001ab68:	51                   	push   ecx
c001ab69:	51                   	push   ecx
c001ab6a:	6a 00                	push   0x0
c001ab6c:	56                   	push   esi
c001ab6d:	e8 4e fc ff ff       	call   c001a7c0 <PCI::checkBus(unsigned char)>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	eb 2a                	jmp    c001aba1 <PCI::detect()+0x55>
c001ab77:	52                   	push   edx
c001ab78:	52                   	push   edx
c001ab79:	53                   	push   ebx
c001ab7a:	43                   	inc    ebx
c001ab7b:	56                   	push   esi
c001ab7c:	e8 3f fc ff ff       	call   c001a7c0 <PCI::checkBus(unsigned char)>
c001ab81:	83 c4 10             	add    esp,0x10
c001ab84:	83 fb 08             	cmp    ebx,0x8
c001ab87:	74 18                	je     c001aba1 <PCI::detect()+0x55>
c001ab89:	53                   	push   ebx
c001ab8a:	6a 00                	push   0x0
c001ab8c:	6a 00                	push   0x0
c001ab8e:	56                   	push   esi
c001ab8f:	e8 ec f6 ff ff       	call   c001a280 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab94:	83 c4 10             	add    esp,0x10
c001ab97:	0f b7 c0             	movzx  eax,ax
c001ab9a:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab9f:	74 d6                	je     c001ab77 <PCI::detect()+0x2b>
c001aba1:	58                   	pop    eax
c001aba2:	5b                   	pop    ebx
c001aba3:	5e                   	pop    esi
c001aba4:	c3                   	ret    
c001aba5:	90                   	nop

c001aba6 <IDE::close(int, int, void*)>:
c001aba6:	83 c8 ff             	or     eax,0xffffffff
c001aba9:	c3                   	ret    

c001abaa <IDE::IDE()>:
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb1:	83 ec 08             	sub    esp,0x8
c001abb4:	68 cc 19 02 c0       	push   0xc00219cc
c001abb9:	50                   	push   eax
c001abba:	e8 4d 15 ff ff       	call   c000c10c <HardDiskController::HardDiskController(char const*)>
c001abbf:	83 c4 10             	add    esp,0x10
c001abc2:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c001abc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcb:	89 10                	mov    DWORD PTR [eax],edx
c001abcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abd1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001abd8:	90                   	nop
c001abd9:	83 c4 0c             	add    esp,0xc
c001abdc:	c3                   	ret    
c001abdd:	90                   	nop

c001abde <IDE::prepareInterrupt(unsigned char)>:
c001abde:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abe3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abe7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001abef:	c3                   	ret    

c001abf0 <selectDrive(unsigned char, unsigned char)>:
c001abf0:	c3                   	ret    
c001abf1:	90                   	nop

c001abf2 <IDE::getBase(unsigned char)>:
c001abf2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001abf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abfb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ac03:	c3                   	ret    

c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ac04:	55                   	push   ebp
c001ac05:	57                   	push   edi
c001ac06:	56                   	push   esi
c001ac07:	53                   	push   ebx
c001ac08:	83 ec 1c             	sub    esp,0x1c
c001ac0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac13:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac16:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac1e:	80 f9 03             	cmp    cl,0x3
c001ac21:	77 4f                	ja     c001ac72 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac27:	0f b6 fa             	movzx  edi,dl
c001ac2a:	0f b6 db             	movzx  ebx,bl
c001ac2d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ac30:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ac35:	80 ca 80             	or     dl,0x80
c001ac38:	52                   	push   edx
c001ac39:	6a 0c                	push   0xc
c001ac3b:	57                   	push   edi
c001ac3c:	56                   	push   esi
c001ac3d:	e8 c2 ff ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac42:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ac47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac4b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac4f:	ee                   	out    dx,al
c001ac50:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ac55:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ac59:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ac5d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac61:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac69:	83 c4 2c             	add    esp,0x2c
c001ac6c:	5b                   	pop    ebx
c001ac6d:	5e                   	pop    esi
c001ac6e:	5f                   	pop    edi
c001ac6f:	5d                   	pop    ebp
c001ac70:	eb 92                	jmp    c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac72:	0f b6 cb             	movzx  ecx,bl
c001ac75:	83 f9 07             	cmp    ecx,0x7
c001ac78:	77 12                	ja     c001ac8c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac7a:	0f b6 d2             	movzx  edx,dl
c001ac7d:	0f b6 db             	movzx  ebx,bl
c001ac80:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ac88:	01 da                	add    edx,ebx
c001ac8a:	eb 2f                	jmp    c001acbb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac8c:	83 f9 0d             	cmp    ecx,0xd
c001ac8f:	77 13                	ja     c001aca4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ac91:	0f b6 d2             	movzx  edx,dl
c001ac94:	0f b6 db             	movzx  ebx,bl
c001ac97:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ac9e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001aca2:	eb 17                	jmp    c001acbb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001aca4:	83 f9 15             	cmp    ecx,0x15
c001aca7:	77 13                	ja     c001acbc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001aca9:	0f b6 d2             	movzx  edx,dl
c001acac:	0f b6 db             	movzx  ebx,bl
c001acaf:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001acb7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001acbb:	ee                   	out    dx,al
c001acbc:	83 c4 1c             	add    esp,0x1c
c001acbf:	5b                   	pop    ebx
c001acc0:	5e                   	pop    esi
c001acc1:	5f                   	pop    edi
c001acc2:	5d                   	pop    ebp
c001acc3:	c3                   	ret    

c001acc4 <IDE::read(unsigned char, unsigned char)>:
c001acc4:	55                   	push   ebp
c001acc5:	57                   	push   edi
c001acc6:	56                   	push   esi
c001acc7:	53                   	push   ebx
c001acc8:	83 ec 1c             	sub    esp,0x1c
c001accb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001accf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001acd3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001acd6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001acda:	3c 03                	cmp    al,0x3
c001acdc:	77 40                	ja     c001ad1e <IDE::read(unsigned char, unsigned char)+0x5a>
c001acde:	0f b6 f9             	movzx  edi,cl
c001ace1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ace4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ace9:	0c 80                	or     al,0x80
c001aceb:	50                   	push   eax
c001acec:	6a 0c                	push   0xc
c001acee:	57                   	push   edi
c001acef:	56                   	push   esi
c001acf0:	e8 0f ff ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acf5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001acfa:	0f b6 d3             	movzx  edx,bl
c001acfd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ad01:	ec                   	in     al,dx
c001ad02:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ad06:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ad0b:	52                   	push   edx
c001ad0c:	6a 0c                	push   0xc
c001ad0e:	57                   	push   edi
c001ad0f:	56                   	push   esi
c001ad10:	e8 ef fe ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad15:	83 c4 20             	add    esp,0x20
c001ad18:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ad1c:	eb 4c                	jmp    c001ad6a <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad1e:	0f b6 d3             	movzx  edx,bl
c001ad21:	83 fa 07             	cmp    edx,0x7
c001ad24:	77 12                	ja     c001ad38 <IDE::read(unsigned char, unsigned char)+0x74>
c001ad26:	0f b6 c9             	movzx  ecx,cl
c001ad29:	0f b6 d3             	movzx  edx,bl
c001ad2c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ad34:	01 c2                	add    edx,eax
c001ad36:	eb 31                	jmp    c001ad69 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad38:	83 fa 0d             	cmp    edx,0xd
c001ad3b:	77 13                	ja     c001ad50 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ad3d:	0f b6 c9             	movzx  ecx,cl
c001ad40:	0f b6 d3             	movzx  edx,bl
c001ad43:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ad4a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad4e:	eb 19                	jmp    c001ad69 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad50:	31 c0                	xor    eax,eax
c001ad52:	83 fa 15             	cmp    edx,0x15
c001ad55:	77 13                	ja     c001ad6a <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad57:	0f b6 c9             	movzx  ecx,cl
c001ad5a:	0f b6 d3             	movzx  edx,bl
c001ad5d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ad65:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad69:	ec                   	in     al,dx
c001ad6a:	83 c4 1c             	add    esp,0x1c
c001ad6d:	5b                   	pop    ebx
c001ad6e:	5e                   	pop    esi
c001ad6f:	5f                   	pop    edi
c001ad70:	5d                   	pop    ebp
c001ad71:	c3                   	ret    

c001ad72 <IDE::waitInterrupt(unsigned char)>:
c001ad72:	55                   	push   ebp
c001ad73:	57                   	push   edi
c001ad74:	56                   	push   esi
c001ad75:	53                   	push   ebx
c001ad76:	31 db                	xor    ebx,ebx
c001ad78:	83 ec 0c             	sub    esp,0xc
c001ad7b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad7f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ad84:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ad8c:	89 e8                	mov    eax,ebp
c001ad8e:	84 c0                	test   al,al
c001ad90:	75 30                	jne    c001adc2 <IDE::waitInterrupt(unsigned char)+0x50>
c001ad92:	50                   	push   eax
c001ad93:	6a 0c                	push   0xc
c001ad95:	56                   	push   esi
c001ad96:	57                   	push   edi
c001ad97:	e8 28 ff ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001ad9c:	83 c4 10             	add    esp,0x10
c001ad9f:	a8 01                	test   al,0x1
c001ada1:	75 27                	jne    c001adca <IDE::waitInterrupt(unsigned char)+0x58>
c001ada3:	f6 c3 04             	test   bl,0x4
c001ada6:	75 12                	jne    c001adba <IDE::waitInterrupt(unsigned char)+0x48>
c001ada8:	83 fb 32             	cmp    ebx,0x32
c001adab:	7e 0d                	jle    c001adba <IDE::waitInterrupt(unsigned char)+0x48>
c001adad:	83 ec 0c             	sub    esp,0xc
c001adb0:	6a 64                	push   0x64
c001adb2:	e8 a1 a5 ff ff       	call   c0015358 <milliTenthSleep(unsigned int)>
c001adb7:	83 c4 10             	add    esp,0x10
c001adba:	83 fb 3c             	cmp    ebx,0x3c
c001adbd:	74 0b                	je     c001adca <IDE::waitInterrupt(unsigned char)+0x58>
c001adbf:	43                   	inc    ebx
c001adc0:	eb c2                	jmp    c001ad84 <IDE::waitInterrupt(unsigned char)+0x12>
c001adc2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001adca:	83 c4 0c             	add    esp,0xc
c001adcd:	89 e8                	mov    eax,ebp
c001adcf:	5b                   	pop    ebx
c001add0:	5e                   	pop    esi
c001add1:	5f                   	pop    edi
c001add2:	5d                   	pop    ebp
c001add3:	c3                   	ret    

c001add4 <ideChannel0IRQHandler(regs*, void*)>:
c001add4:	83 ec 10             	sub    esp,0x10
c001add7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001addb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ade2:	6a 07                	push   0x7
c001ade4:	6a 00                	push   0x0
c001ade6:	50                   	push   eax
c001ade7:	e8 d8 fe ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001adec:	83 c4 1c             	add    esp,0x1c
c001adef:	c3                   	ret    

c001adf0 <ideChannel1IRQHandler(regs*, void*)>:
c001adf0:	83 ec 10             	sub    esp,0x10
c001adf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adf7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001adfe:	6a 07                	push   0x7
c001ae00:	6a 01                	push   0x1
c001ae02:	50                   	push   eax
c001ae03:	e8 bc fe ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001ae08:	83 c4 1c             	add    esp,0x1c
c001ae0b:	c3                   	ret    

c001ae0c <IDE::enableIRQs(unsigned char, bool)>:
c001ae0c:	57                   	push   edi
c001ae0d:	b8 02 00 00 00       	mov    eax,0x2
c001ae12:	56                   	push   esi
c001ae13:	53                   	push   ebx
c001ae14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae1c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae21:	74 02                	je     c001ae25 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae23:	31 c0                	xor    eax,eax
c001ae25:	0f b6 db             	movzx  ebx,bl
c001ae28:	bf 04 00 00 00       	mov    edi,0x4
c001ae2d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae34:	50                   	push   eax
c001ae35:	6a 0c                	push   0xc
c001ae37:	53                   	push   ebx
c001ae38:	56                   	push   esi
c001ae39:	e8 c6 fd ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae3e:	83 c4 10             	add    esp,0x10
c001ae41:	50                   	push   eax
c001ae42:	6a 0c                	push   0xc
c001ae44:	53                   	push   ebx
c001ae45:	56                   	push   esi
c001ae46:	e8 79 fe ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001ae4b:	83 c4 10             	add    esp,0x10
c001ae4e:	4f                   	dec    edi
c001ae4f:	75 f0                	jne    c001ae41 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae51:	5b                   	pop    ebx
c001ae52:	5e                   	pop    esi
c001ae53:	5f                   	pop    edi
c001ae54:	c3                   	ret    
c001ae55:	90                   	nop

c001ae56 <IDE::open(int, int, void*)>:
c001ae56:	55                   	push   ebp
c001ae57:	57                   	push   edi
c001ae58:	56                   	push   esi
c001ae59:	53                   	push   ebx
c001ae5a:	83 ec 1c             	sub    esp,0x1c
c001ae5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae61:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae6a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae73:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae7a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae81:	0f 85 de 02 00 00    	jne    c001b165 <IDE::open(int, int, void*)+0x30f>
c001ae87:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ae8d:	88 04 24             	mov    BYTE PTR [esp],al
c001ae90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ae93:	83 e0 7f             	and    eax,0x7f
c001ae96:	83 f8 05             	cmp    eax,0x5
c001ae99:	74 05                	je     c001aea0 <IDE::open(int, int, void*)+0x4a>
c001ae9b:	83 f8 0f             	cmp    eax,0xf
c001ae9e:	75 32                	jne    c001aed2 <IDE::open(int, int, void*)+0x7c>
c001aea0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001aea6:	83 e0 fc             	and    eax,0xfffffffc
c001aea9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aeb0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001aeb6:	83 e0 fc             	and    eax,0xfffffffc
c001aeb9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aec0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001aec6:	83 e0 fc             	and    eax,0xfffffffc
c001aec9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aed0:	eb 14                	jmp    c001aee6 <IDE::open(int, int, void*)+0x90>
c001aed2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001aedc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001aee6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001aeed:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001aef4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aef8:	89 c6                	mov    esi,eax
c001aefa:	bf f8 0c 00 00       	mov    edi,0xcf8
c001aeff:	c1 e6 10             	shl    esi,0x10
c001af02:	89 e8                	mov    eax,ebp
c001af04:	89 fa                	mov    edx,edi
c001af06:	c1 e0 0b             	shl    eax,0xb
c001af09:	09 f0                	or     eax,esi
c001af0b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001af12:	c1 e6 08             	shl    esi,0x8
c001af15:	09 c6                	or     esi,eax
c001af17:	89 f0                	mov    eax,esi
c001af19:	0d 08 00 00 80       	or     eax,0x80000008
c001af1e:	ef                   	out    dx,eax
c001af1f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001af24:	89 ca                	mov    edx,ecx
c001af26:	ed                   	in     eax,dx
c001af27:	c1 e8 10             	shr    eax,0x10
c001af2a:	3d ff ff 00 00       	cmp    eax,0xffff
c001af2f:	0f 84 f9 00 00 00    	je     c001b02e <IDE::open(int, int, void*)+0x1d8>
c001af35:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001af3b:	89 fa                	mov    edx,edi
c001af3d:	89 f0                	mov    eax,esi
c001af3f:	ef                   	out    dx,eax
c001af40:	b0 fe                	mov    al,0xfe
c001af42:	89 ca                	mov    edx,ecx
c001af44:	ee                   	out    dx,al
c001af45:	89 f0                	mov    eax,esi
c001af47:	89 fa                	mov    edx,edi
c001af49:	ef                   	out    dx,eax
c001af4a:	89 ca                	mov    edx,ecx
c001af4c:	ed                   	in     eax,dx
c001af4d:	3c fe                	cmp    al,0xfe
c001af4f:	0f 85 a9 00 00 00    	jne    c001affe <IDE::open(int, int, void*)+0x1a8>
c001af55:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af5b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af62:	74 33                	je     c001af97 <IDE::open(int, int, void*)+0x141>
c001af64:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af6a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af6e:	40                   	inc    eax
c001af6f:	83 ec 0c             	sub    esp,0xc
c001af72:	0f b6 c0             	movzx  eax,al
c001af75:	50                   	push   eax
c001af76:	55                   	push   ebp
c001af77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af7b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af81:	51                   	push   ecx
c001af82:	e8 b5 3d ff ff       	call   c000ed3c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001af87:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001af8c:	83 c4 1c             	add    esp,0x1c
c001af8f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af95:	eb 0a                	jmp    c001afa1 <IDE::open(int, int, void*)+0x14b>
c001af97:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001afa1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001afa8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001afaf:	c1 e1 10             	shl    ecx,0x10
c001afb2:	c1 e0 08             	shl    eax,0x8
c001afb5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001afba:	09 c1                	or     ecx,eax
c001afbc:	89 fa                	mov    edx,edi
c001afbe:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001afc5:	c1 e0 0b             	shl    eax,0xb
c001afc8:	09 c1                	or     ecx,eax
c001afca:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001afd0:	89 c8                	mov    eax,ecx
c001afd2:	ef                   	out    dx,eax
c001afd3:	be fc 0c 00 00       	mov    esi,0xcfc
c001afd8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001afde:	89 f2                	mov    edx,esi
c001afe0:	ee                   	out    dx,al
c001afe1:	89 c8                	mov    eax,ecx
c001afe3:	89 fa                	mov    edx,edi
c001afe5:	ef                   	out    dx,eax
c001afe6:	89 f2                	mov    edx,esi
c001afe8:	ed                   	in     eax,dx
c001afe9:	0f b6 c0             	movzx  eax,al
c001afec:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001aff2:	74 4a                	je     c001b03e <IDE::open(int, int, void*)+0x1e8>
c001aff4:	83 ec 0c             	sub    esp,0xc
c001aff7:	68 e4 19 02 c0       	push   0xc00219e4
c001affc:	eb 38                	jmp    c001b036 <IDE::open(int, int, void*)+0x1e0>
c001affe:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b007:	75 1b                	jne    c001b024 <IDE::open(int, int, void*)+0x1ce>
c001b009:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b00d:	3d 80 00 00 00       	cmp    eax,0x80
c001b012:	74 07                	je     c001b01b <IDE::open(int, int, void*)+0x1c5>
c001b014:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b019:	75 09                	jne    c001b024 <IDE::open(int, int, void*)+0x1ce>
c001b01b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b022:	eb 1a                	jmp    c001b03e <IDE::open(int, int, void*)+0x1e8>
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	68 ec 19 02 c0       	push   0xc00219ec
c001b02c:	eb 08                	jmp    c001b036 <IDE::open(int, int, void*)+0x1e0>
c001b02e:	83 ec 0c             	sub    esp,0xc
c001b031:	68 1d 1a 02 c0       	push   0xc0021a1d
c001b036:	e8 38 58 ff ff       	call   c0010873 <KePanic(char const*)>
c001b03b:	83 c4 10             	add    esp,0x10
c001b03e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b045:	74 1a                	je     c001b061 <IDE::open(int, int, void*)+0x20b>
c001b047:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b04d:	83 e0 fc             	and    eax,0xfffffffc
c001b050:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b057:	83 c0 08             	add    eax,0x8
c001b05a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b061:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b067:	89 c2                	mov    edx,eax
c001b069:	83 e2 0f             	and    edx,0xf
c001b06c:	83 fa 08             	cmp    edx,0x8
c001b06f:	75 0a                	jne    c001b07b <IDE::open(int, int, void*)+0x225>
c001b071:	83 e8 02             	sub    eax,0x2
c001b074:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b07b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b081:	89 c2                	mov    edx,eax
c001b083:	83 e2 0f             	and    edx,0xf
c001b086:	83 fa 08             	cmp    edx,0x8
c001b089:	75 0a                	jne    c001b095 <IDE::open(int, int, void*)+0x23f>
c001b08b:	83 e8 02             	sub    eax,0x2
c001b08e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b095:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b09c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b0a3:	89 d0                	mov    eax,edx
c001b0a5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0a8:	8d 7a 01             	lea    edi,[edx+0x1]
c001b0ab:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0af:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b0b3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0b7:	83 e1 3f             	and    ecx,0x3f
c001b0ba:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0be:	89 f9                	mov    ecx,edi
c001b0c0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b0c7:	0f b6 c9             	movzx  ecx,cl
c001b0ca:	8d 78 02             	lea    edi,[eax+0x2]
c001b0cd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0d0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0d4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b0d8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0dc:	83 e2 3f             	and    edx,0x3f
c001b0df:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0e3:	89 f9                	mov    ecx,edi
c001b0e5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b0eb:	0f b6 d1             	movzx  edx,cl
c001b0ee:	8d 78 03             	lea    edi,[eax+0x3]
c001b0f1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0f4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0f8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b0fc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b100:	83 e1 3f             	and    ecx,0x3f
c001b103:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b107:	89 f9                	mov    ecx,edi
c001b109:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b10f:	0f b6 c9             	movzx  ecx,cl
c001b112:	8d 78 04             	lea    edi,[eax+0x4]
c001b115:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b118:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b11c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b120:	89 fa                	mov    edx,edi
c001b122:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b128:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b12c:	83 e2 3f             	and    edx,0x3f
c001b12f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b133:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b13a:	66 85 f6             	test   si,si
c001b13d:	74 65                	je     c001b1a4 <IDE::open(int, int, void*)+0x34e>
c001b13f:	89 f9                	mov    ecx,edi
c001b141:	83 c0 05             	add    eax,0x5
c001b144:	0f b6 d1             	movzx  edx,cl
c001b147:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b14a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b14e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b152:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b158:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b15c:	83 e0 3f             	and    eax,0x3f
c001b15f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b163:	eb 3f                	jmp    c001b1a4 <IDE::open(int, int, void*)+0x34e>
c001b165:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b16b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b172:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b179:	05 06 02 00 00       	add    eax,0x206
c001b17e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b185:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b18c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b193:	05 06 02 00 00       	add    eax,0x206
c001b198:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b19f:	e9 bd fe ff ff       	jmp    c001b061 <IDE::open(int, int, void*)+0x20b>
c001b1a4:	50                   	push   eax
c001b1a5:	50                   	push   eax
c001b1a6:	6a 00                	push   0x0
c001b1a8:	53                   	push   ebx
c001b1a9:	e8 30 fa ff ff       	call   c001abde <IDE::prepareInterrupt(unsigned char)>
c001b1ae:	5a                   	pop    edx
c001b1af:	59                   	pop    ecx
c001b1b0:	6a 01                	push   0x1
c001b1b2:	53                   	push   ebx
c001b1b3:	e8 26 fa ff ff       	call   c001abde <IDE::prepareInterrupt(unsigned char)>
c001b1b8:	83 c4 0c             	add    esp,0xc
c001b1bb:	6a 00                	push   0x0
c001b1bd:	6a 00                	push   0x0
c001b1bf:	53                   	push   ebx
c001b1c0:	e8 47 fc ff ff       	call   c001ae0c <IDE::enableIRQs(unsigned char, bool)>
c001b1c5:	83 c4 0c             	add    esp,0xc
c001b1c8:	6a 00                	push   0x0
c001b1ca:	6a 01                	push   0x1
c001b1cc:	53                   	push   ebx
c001b1cd:	e8 3a fc ff ff       	call   c001ae0c <IDE::enableIRQs(unsigned char, bool)>
c001b1d2:	83 c4 10             	add    esp,0x10
c001b1d5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b1dc:	74 34                	je     c001b212 <IDE::open(int, int, void*)+0x3bc>
c001b1de:	83 ec 0c             	sub    esp,0xc
c001b1e1:	53                   	push   ebx
c001b1e2:	6a 01                	push   0x1
c001b1e4:	68 d4 ad 01 c0       	push   0xc001add4
c001b1e9:	6a 0e                	push   0xe
c001b1eb:	53                   	push   ebx
c001b1ec:	e8 85 0b ff ff       	call   c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1f1:	83 c4 14             	add    esp,0x14
c001b1f4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b1fa:	53                   	push   ebx
c001b1fb:	6a 01                	push   0x1
c001b1fd:	68 f0 ad 01 c0       	push   0xc001adf0
c001b202:	6a 0f                	push   0xf
c001b204:	53                   	push   ebx
c001b205:	e8 6c 0b ff ff       	call   c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b20a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b210:	eb 38                	jmp    c001b24a <IDE::open(int, int, void*)+0x3f4>
c001b212:	83 ec 0c             	sub    esp,0xc
c001b215:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b21f:	53                   	push   ebx
c001b220:	6a 00                	push   0x0
c001b222:	68 d4 ad 01 c0       	push   0xc001add4
c001b227:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b22d:	53                   	push   ebx
c001b22e:	e8 43 0b ff ff       	call   c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b233:	83 c4 14             	add    esp,0x14
c001b236:	53                   	push   ebx
c001b237:	6a 00                	push   0x0
c001b239:	68 f0 ad 01 c0       	push   0xc001adf0
c001b23e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b244:	53                   	push   ebx
c001b245:	e8 2c 0b ff ff       	call   c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b24a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b24c:	83 c4 20             	add    esp,0x20
c001b24f:	83 ec 0c             	sub    esp,0xc
c001b252:	53                   	push   ebx
c001b253:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b256:	83 c4 0c             	add    esp,0xc
c001b259:	6a 07                	push   0x7
c001b25b:	6a 00                	push   0x0
c001b25d:	53                   	push   ebx
c001b25e:	e8 61 fa ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b263:	83 c4 0c             	add    esp,0xc
c001b266:	6a 07                	push   0x7
c001b268:	6a 01                	push   0x1
c001b26a:	53                   	push   ebx
c001b26b:	e8 54 fa ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b270:	83 c4 0c             	add    esp,0xc
c001b273:	6a 01                	push   0x1
c001b275:	6a 00                	push   0x0
c001b277:	53                   	push   ebx
c001b278:	e8 8f fb ff ff       	call   c001ae0c <IDE::enableIRQs(unsigned char, bool)>
c001b27d:	83 c4 0c             	add    esp,0xc
c001b280:	6a 01                	push   0x1
c001b282:	6a 01                	push   0x1
c001b284:	53                   	push   ebx
c001b285:	e8 82 fb ff ff       	call   c001ae0c <IDE::enableIRQs(unsigned char, bool)>
c001b28a:	83 c4 2c             	add    esp,0x2c
c001b28d:	31 c0                	xor    eax,eax
c001b28f:	5b                   	pop    ebx
c001b290:	5e                   	pop    esi
c001b291:	5f                   	pop    edi
c001b292:	5d                   	pop    ebp
c001b293:	c3                   	ret    

c001b294 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b294:	55                   	push   ebp
c001b295:	57                   	push   edi
c001b296:	56                   	push   esi
c001b297:	53                   	push   ebx
c001b298:	83 ec 1c             	sub    esp,0x1c
c001b29b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b29f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2a3:	8d 42 f8             	lea    eax,[edx-0x8]
c001b2a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b2aa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b2ae:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b2b2:	3c 03                	cmp    al,0x3
c001b2b4:	77 5a                	ja     c001b310 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b2b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2be:	0f b6 db             	movzx  ebx,bl
c001b2c1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b2c4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2c9:	0c 80                	or     al,0x80
c001b2cb:	50                   	push   eax
c001b2cc:	6a 0c                	push   0xc
c001b2ce:	53                   	push   ebx
c001b2cf:	56                   	push   esi
c001b2d0:	e8 2f f9 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2d5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b2da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2e2:	0f b6 d2             	movzx  edx,dl
c001b2e5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b2e9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b2eb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2f0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b2f4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2fc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b304:	83 c4 2c             	add    esp,0x2c
c001b307:	5b                   	pop    ebx
c001b308:	5e                   	pop    esi
c001b309:	5f                   	pop    edi
c001b30a:	5d                   	pop    ebp
c001b30b:	e9 f4 f8 ff ff       	jmp    c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b310:	0f b6 c2             	movzx  eax,dl
c001b313:	83 f8 07             	cmp    eax,0x7
c001b316:	77 12                	ja     c001b32a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b318:	0f b6 c2             	movzx  eax,dl
c001b31b:	0f b6 db             	movzx  ebx,bl
c001b31e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b326:	01 c2                	add    edx,eax
c001b328:	eb 2f                	jmp    c001b359 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b32a:	83 f8 0d             	cmp    eax,0xd
c001b32d:	77 13                	ja     c001b342 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b32f:	0f b6 db             	movzx  ebx,bl
c001b332:	0f b6 d2             	movzx  edx,dl
c001b335:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b33c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b340:	eb 17                	jmp    c001b359 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b342:	83 f8 15             	cmp    eax,0x15
c001b345:	77 14                	ja     c001b35b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b347:	0f b6 db             	movzx  ebx,bl
c001b34a:	0f b6 d2             	movzx  edx,dl
c001b34d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b355:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b359:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b35b:	83 c4 1c             	add    esp,0x1c
c001b35e:	5b                   	pop    ebx
c001b35f:	5e                   	pop    esi
c001b360:	5f                   	pop    edi
c001b361:	5d                   	pop    ebp
c001b362:	c3                   	ret    
c001b363:	90                   	nop

c001b364 <IDE::detect()>:
c001b364:	55                   	push   ebp
c001b365:	57                   	push   edi
c001b366:	56                   	push   esi
c001b367:	53                   	push   ebx
c001b368:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b36e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b375:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b37c:	0f 85 a4 02 00 00    	jne    c001b626 <IDE::detect()+0x2c2>
c001b382:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b389:	31 f6                	xor    esi,esi
c001b38b:	31 ed                	xor    ebp,ebp
c001b38d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b395:	89 e8                	mov    eax,ebp
c001b397:	c1 e0 06             	shl    eax,0x6
c001b39a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b3a2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b3a6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b3aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3ae:	c1 e0 04             	shl    eax,0x4
c001b3b1:	83 c8 a0             	or     eax,0xffffffa0
c001b3b4:	0f b6 c0             	movzx  eax,al
c001b3b7:	50                   	push   eax
c001b3b8:	6a 06                	push   0x6
c001b3ba:	56                   	push   esi
c001b3bb:	53                   	push   ebx
c001b3bc:	e8 43 f8 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3c1:	83 c4 0c             	add    esp,0xc
c001b3c4:	6a 0c                	push   0xc
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 f7 f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	6a 0c                	push   0xc
c001b3d2:	56                   	push   esi
c001b3d3:	53                   	push   ebx
c001b3d4:	e8 eb f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b3d9:	83 c4 0c             	add    esp,0xc
c001b3dc:	6a 0c                	push   0xc
c001b3de:	56                   	push   esi
c001b3df:	53                   	push   ebx
c001b3e0:	e8 df f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b3e5:	83 c4 0c             	add    esp,0xc
c001b3e8:	6a 0c                	push   0xc
c001b3ea:	56                   	push   esi
c001b3eb:	53                   	push   ebx
c001b3ec:	e8 d3 f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b3f1:	68 ec 00 00 00       	push   0xec
c001b3f6:	6a 07                	push   0x7
c001b3f8:	56                   	push   esi
c001b3f9:	53                   	push   ebx
c001b3fa:	e8 05 f8 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3ff:	83 c4 1c             	add    esp,0x1c
c001b402:	6a 0c                	push   0xc
c001b404:	56                   	push   esi
c001b405:	53                   	push   ebx
c001b406:	e8 b9 f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b40b:	83 c4 0c             	add    esp,0xc
c001b40e:	6a 0c                	push   0xc
c001b410:	56                   	push   esi
c001b411:	53                   	push   ebx
c001b412:	e8 ad f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b417:	83 c4 0c             	add    esp,0xc
c001b41a:	6a 0c                	push   0xc
c001b41c:	56                   	push   esi
c001b41d:	53                   	push   ebx
c001b41e:	e8 a1 f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b423:	83 c4 0c             	add    esp,0xc
c001b426:	6a 0c                	push   0xc
c001b428:	56                   	push   esi
c001b429:	53                   	push   ebx
c001b42a:	e8 95 f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b42f:	83 c4 0c             	add    esp,0xc
c001b432:	6a 0c                	push   0xc
c001b434:	56                   	push   esi
c001b435:	53                   	push   ebx
c001b436:	e8 89 f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	84 c0                	test   al,al
c001b440:	0f 84 60 01 00 00    	je     c001b5a6 <IDE::detect()+0x242>
c001b446:	31 ff                	xor    edi,edi
c001b448:	50                   	push   eax
c001b449:	6a 0c                	push   0xc
c001b44b:	56                   	push   esi
c001b44c:	53                   	push   ebx
c001b44d:	e8 72 f8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b452:	83 c4 10             	add    esp,0x10
c001b455:	a8 01                	test   al,0x1
c001b457:	0f 85 6a 01 00 00    	jne    c001b5c7 <IDE::detect()+0x263>
c001b45d:	a8 80                	test   al,0x80
c001b45f:	75 04                	jne    c001b465 <IDE::detect()+0x101>
c001b461:	a8 08                	test   al,0x8
c001b463:	75 23                	jne    c001b488 <IDE::detect()+0x124>
c001b465:	47                   	inc    edi
c001b466:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b46c:	7e da                	jle    c001b448 <IDE::detect()+0xe4>
c001b46e:	83 ec 0c             	sub    esp,0xc
c001b471:	6a 32                	push   0x32
c001b473:	e8 e0 9e ff ff       	call   c0015358 <milliTenthSleep(unsigned int)>
c001b478:	83 c4 10             	add    esp,0x10
c001b47b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b481:	75 c5                	jne    c001b448 <IDE::detect()+0xe4>
c001b483:	e9 3f 01 00 00       	jmp    c001b5c7 <IDE::detect()+0x263>
c001b488:	31 c9                	xor    ecx,ecx
c001b48a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b48e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b492:	83 ec 0c             	sub    esp,0xc
c001b495:	68 80 00 00 00       	push   0x80
c001b49a:	57                   	push   edi
c001b49b:	6a 00                	push   0x0
c001b49d:	56                   	push   esi
c001b49e:	53                   	push   ebx
c001b49f:	e8 f0 fd ff ff       	call   c001b294 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b4a4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b4a9:	89 e8                	mov    eax,ebp
c001b4ab:	89 d1                	mov    ecx,edx
c001b4ad:	c1 e0 06             	shl    eax,0x6
c001b4b0:	01 d8                	add    eax,ebx
c001b4b2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b4b9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b4c0:	89 f2                	mov    edx,esi
c001b4c2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b4c8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b4cc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b4d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4d6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b4dd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b4e5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b4ec:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b4f4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b4fa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b501:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b507:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b50b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b50f:	83 c4 20             	add    esp,0x20
c001b512:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b515:	83 c0 02             	add    eax,0x2
c001b518:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b51e:	83 c7 02             	add    edi,0x2
c001b521:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b524:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b52a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b52e:	75 e2                	jne    c001b512 <IDE::detect()+0x1ae>
c001b530:	89 e8                	mov    eax,ebp
c001b532:	c1 e0 06             	shl    eax,0x6
c001b535:	01 d8                	add    eax,ebx
c001b537:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b53e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b545:	c1 ea 09             	shr    edx,0x9
c001b548:	83 e2 01             	and    edx,0x1
c001b54b:	80 e1 01             	and    cl,0x1
c001b54e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b554:	75 22                	jne    c001b578 <IDE::detect()+0x214>
c001b556:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b55d:	74 46                	je     c001b5a5 <IDE::detect()+0x241>
c001b55f:	83 ec 0c             	sub    esp,0xc
c001b562:	68 7c 01 00 00       	push   0x17c
c001b567:	e8 42 c5 fe ff       	call   c0007aae <malloc>
c001b56c:	89 c7                	mov    edi,eax
c001b56e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b571:	e8 1a 05 00 00       	call   c001ba90 <ATA::ATA()>
c001b576:	eb 17                	jmp    c001b58f <IDE::detect()+0x22b>
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	68 84 01 00 00       	push   0x184
c001b580:	e8 29 c5 fe ff       	call   c0007aae <malloc>
c001b585:	89 c7                	mov    edi,eax
c001b587:	89 04 24             	mov    DWORD PTR [esp],eax
c001b58a:	e8 45 0e 00 00       	call   c001c3d4 <ATAPI::ATAPI()>
c001b58f:	5a                   	pop    edx
c001b590:	59                   	pop    ecx
c001b591:	57                   	push   edi
c001b592:	53                   	push   ebx
c001b593:	e8 32 08 ff ff       	call   c000bdca <Device::addChild(Device*)>
c001b598:	8b 07                	mov    eax,DWORD PTR [edi]
c001b59a:	53                   	push   ebx
c001b59b:	55                   	push   ebp
c001b59c:	6a 00                	push   0x0
c001b59e:	57                   	push   edi
c001b59f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5a2:	83 c4 20             	add    esp,0x20
c001b5a5:	45                   	inc    ebp
c001b5a6:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b5ab:	74 0d                	je     c001b5ba <IDE::detect()+0x256>
c001b5ad:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b5b5:	e9 db fd ff ff       	jmp    c001b395 <IDE::detect()+0x31>
c001b5ba:	4e                   	dec    esi
c001b5bb:	74 69                	je     c001b626 <IDE::detect()+0x2c2>
c001b5bd:	be 01 00 00 00       	mov    esi,0x1
c001b5c2:	e9 c6 fd ff ff       	jmp    c001b38d <IDE::detect()+0x29>
c001b5c7:	50                   	push   eax
c001b5c8:	6a 04                	push   0x4
c001b5ca:	56                   	push   esi
c001b5cb:	53                   	push   ebx
c001b5cc:	e8 f3 f6 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b5d1:	83 c4 0c             	add    esp,0xc
c001b5d4:	89 c7                	mov    edi,eax
c001b5d6:	6a 05                	push   0x5
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	e8 e5 f6 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b5df:	83 c4 10             	add    esp,0x10
c001b5e2:	89 f9                	mov    ecx,edi
c001b5e4:	0f b6 c0             	movzx  eax,al
c001b5e7:	0f b6 f9             	movzx  edi,cl
c001b5ea:	83 ff 14             	cmp    edi,0x14
c001b5ed:	75 07                	jne    c001b5f6 <IDE::detect()+0x292>
c001b5ef:	3d eb 00 00 00       	cmp    eax,0xeb
c001b5f4:	eb 0a                	jmp    c001b600 <IDE::detect()+0x29c>
c001b5f6:	3d 96 00 00 00       	cmp    eax,0x96
c001b5fb:	75 a9                	jne    c001b5a6 <IDE::detect()+0x242>
c001b5fd:	83 ff 69             	cmp    edi,0x69
c001b600:	75 a4                	jne    c001b5a6 <IDE::detect()+0x242>
c001b602:	68 a1 00 00 00       	push   0xa1
c001b607:	6a 07                	push   0x7
c001b609:	56                   	push   esi
c001b60a:	53                   	push   ebx
c001b60b:	e8 f4 f5 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b610:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b617:	e8 3c 9d ff ff       	call   c0015358 <milliTenthSleep(unsigned int)>
c001b61c:	83 c4 10             	add    esp,0x10
c001b61f:	b1 01                	mov    cl,0x1
c001b621:	e9 64 fe ff ff       	jmp    c001b48a <IDE::detect()+0x126>
c001b626:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b62c:	5b                   	pop    ebx
c001b62d:	5e                   	pop    esi
c001b62e:	5f                   	pop    edi
c001b62f:	5d                   	pop    ebp
c001b630:	c3                   	ret    
c001b631:	90                   	nop

c001b632 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b632:	55                   	push   ebp
c001b633:	57                   	push   edi
c001b634:	56                   	push   esi
c001b635:	53                   	push   ebx
c001b636:	83 ec 1c             	sub    esp,0x1c
c001b639:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b63d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b645:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b649:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b64d:	88 c3                	mov    bl,al
c001b64f:	25 ff 00 00 00       	and    eax,0xff
c001b654:	0f 84 88 00 00 00    	je     c001b6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b65a:	83 ec 0c             	sub    esp,0xc
c001b65d:	89 c7                	mov    edi,eax
c001b65f:	68 47 1a 02 c0       	push   0xc0021a47
c001b664:	e8 2d f3 fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001b669:	83 c4 10             	add    esp,0x10
c001b66c:	83 ff 01             	cmp    edi,0x1
c001b66f:	74 6b                	je     c001b6dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b671:	83 ff 02             	cmp    edi,0x2
c001b674:	75 58                	jne    c001b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b676:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b67b:	01 ff                	add    edi,edi
c001b67d:	50                   	push   eax
c001b67e:	09 fe                	or     esi,edi
c001b680:	6a 01                	push   0x1
c001b682:	89 f0                	mov    eax,esi
c001b684:	0f b6 f0             	movzx  esi,al
c001b687:	c1 e6 06             	shl    esi,0x6
c001b68a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b692:	50                   	push   eax
c001b693:	55                   	push   ebp
c001b694:	e8 2b f6 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	a8 01                	test   al,0x1
c001b69e:	74 02                	je     c001b6a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b6a0:	b3 07                	mov    bl,0x7
c001b6a2:	a8 02                	test   al,0x2
c001b6a4:	74 02                	je     c001b6a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b6a6:	b3 03                	mov    bl,0x3
c001b6a8:	a8 04                	test   al,0x4
c001b6aa:	74 02                	je     c001b6ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b6ac:	b3 14                	mov    bl,0x14
c001b6ae:	a8 08                	test   al,0x8
c001b6b0:	74 02                	je     c001b6b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b6b2:	b3 03                	mov    bl,0x3
c001b6b4:	a8 10                	test   al,0x10
c001b6b6:	74 02                	je     c001b6ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b6b8:	b3 15                	mov    bl,0x15
c001b6ba:	a8 20                	test   al,0x20
c001b6bc:	74 02                	je     c001b6c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b6be:	b3 03                	mov    bl,0x3
c001b6c0:	a8 40                	test   al,0x40
c001b6c2:	74 02                	je     c001b6c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b6c4:	b3 16                	mov    bl,0x16
c001b6c6:	a8 80                	test   al,0x80
c001b6c8:	74 18                	je     c001b6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6ca:	b3 0d                	mov    bl,0xd
c001b6cc:	eb 14                	jmp    c001b6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6ce:	83 ff 03             	cmp    edi,0x3
c001b6d1:	74 0d                	je     c001b6e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b6d3:	83 ff 04             	cmp    edi,0x4
c001b6d6:	75 0a                	jne    c001b6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6d8:	b3 08                	mov    bl,0x8
c001b6da:	eb 06                	jmp    c001b6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6dc:	b3 13                	mov    bl,0x13
c001b6de:	eb 02                	jmp    c001b6e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6e0:	b3 17                	mov    bl,0x17
c001b6e2:	83 c4 1c             	add    esp,0x1c
c001b6e5:	88 d8                	mov    al,bl
c001b6e7:	5b                   	pop    ebx
c001b6e8:	5e                   	pop    esi
c001b6e9:	5f                   	pop    edi
c001b6ea:	5d                   	pop    ebp
c001b6eb:	c3                   	ret    

c001b6ec <IDE::polling(unsigned char, unsigned int)>:
c001b6ec:	57                   	push   edi
c001b6ed:	56                   	push   esi
c001b6ee:	53                   	push   ebx
c001b6ef:	bb 04 00 00 00       	mov    ebx,0x4
c001b6f4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b6f8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b6fd:	52                   	push   edx
c001b6fe:	6a 0c                	push   0xc
c001b700:	56                   	push   esi
c001b701:	57                   	push   edi
c001b702:	e8 bd f5 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b707:	83 c4 10             	add    esp,0x10
c001b70a:	4b                   	dec    ebx
c001b70b:	75 f0                	jne    c001b6fd <IDE::polling(unsigned char, unsigned int)+0x11>
c001b70d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b712:	50                   	push   eax
c001b713:	6a 0c                	push   0xc
c001b715:	56                   	push   esi
c001b716:	57                   	push   edi
c001b717:	e8 a8 f5 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001b71c:	83 c4 10             	add    esp,0x10
c001b71f:	a8 01                	test   al,0x1
c001b721:	75 17                	jne    c001b73a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b723:	a8 20                	test   al,0x20
c001b725:	75 0f                	jne    c001b736 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b727:	4b                   	dec    ebx
c001b728:	74 10                	je     c001b73a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b72a:	a8 80                	test   al,0x80
c001b72c:	75 e4                	jne    c001b712 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b72e:	a8 08                	test   al,0x8
c001b730:	74 e0                	je     c001b712 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b732:	31 c0                	xor    eax,eax
c001b734:	eb 06                	jmp    c001b73c <IDE::polling(unsigned char, unsigned int)+0x50>
c001b736:	b0 01                	mov    al,0x1
c001b738:	eb 02                	jmp    c001b73c <IDE::polling(unsigned char, unsigned int)+0x50>
c001b73a:	b0 02                	mov    al,0x2
c001b73c:	5b                   	pop    ebx
c001b73d:	5e                   	pop    esi
c001b73e:	5f                   	pop    edi
c001b73f:	c3                   	ret    

c001b740 <SATABus::close(int, int, void*)>:
c001b740:	31 c0                	xor    eax,eax
c001b742:	c3                   	ret    
c001b743:	90                   	nop

c001b744 <SATABus::detect()>:
c001b744:	c3                   	ret    
c001b745:	90                   	nop

c001b746 <SATABus::SATABus()>:
c001b746:	83 ec 0c             	sub    esp,0xc
c001b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74d:	83 ec 08             	sub    esp,0x8
c001b750:	68 80 1a 02 c0       	push   0xc0021a80
c001b755:	50                   	push   eax
c001b756:	e8 b1 09 ff ff       	call   c000c10c <HardDiskController::HardDiskController(char const*)>
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	ba ac 1a 02 c0       	mov    edx,0xc0021aac
c001b763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b767:	89 10                	mov    DWORD PTR [eax],edx
c001b769:	83 ec 0c             	sub    esp,0xc
c001b76c:	6a 50                	push   0x50
c001b76e:	e8 0f c7 fe ff       	call   c0007e82 <Phys::allocateContiguousPages(int)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	89 c2                	mov    edx,eax
c001b778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b77c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b782:	83 ec 0c             	sub    esp,0xc
c001b785:	6a 50                	push   0x50
c001b787:	e8 91 de fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001b78c:	83 c4 10             	add    esp,0x10
c001b78f:	89 c2                	mov    edx,eax
c001b791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b795:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b79b:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b7a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7a4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b7aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7ae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b7b4:	83 ec 0c             	sub    esp,0xc
c001b7b7:	6a 03                	push   0x3
c001b7b9:	6a 50                	push   0x50
c001b7bb:	51                   	push   ecx
c001b7bc:	52                   	push   edx
c001b7bd:	50                   	push   eax
c001b7be:	e8 55 e8 fe ff       	call   c000a018 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b7c3:	83 c4 20             	add    esp,0x20
c001b7c6:	90                   	nop
c001b7c7:	83 c4 0c             	add    esp,0xc
c001b7ca:	c3                   	ret    
c001b7cb:	90                   	nop

c001b7cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b7cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7d0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b7d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b7d6:	09 c2                	or     edx,eax
c001b7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b7e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7e4:	31 c0                	xor    eax,eax
c001b7e6:	c1 e9 08             	shr    ecx,0x8
c001b7e9:	83 e1 0f             	and    ecx,0xf
c001b7ec:	39 c8                	cmp    eax,ecx
c001b7ee:	74 0a                	je     c001b7fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b7f0:	f6 c2 01             	test   dl,0x1
c001b7f3:	74 08                	je     c001b7fd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b7f5:	d1 ea                	shr    edx,1
c001b7f7:	40                   	inc    eax
c001b7f8:	eb f2                	jmp    c001b7ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b7fa:	83 c8 ff             	or     eax,0xffffffff
c001b7fd:	c3                   	ret    

c001b7fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b7fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b802:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b805:	89 c2                	mov    edx,eax
c001b807:	c1 ea 08             	shr    edx,0x8
c001b80a:	83 e2 0f             	and    edx,0xf
c001b80d:	4a                   	dec    edx
c001b80e:	75 32                	jne    c001b842 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b810:	83 e0 0f             	and    eax,0xf
c001b813:	83 f8 03             	cmp    eax,0x3
c001b816:	75 2a                	jne    c001b842 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b818:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b81b:	b8 02 00 00 00       	mov    eax,0x2
c001b820:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b826:	74 1c                	je     c001b844 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b828:	b8 04 00 00 00       	mov    eax,0x4
c001b82d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b833:	74 0f                	je     c001b844 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b835:	31 c0                	xor    eax,eax
c001b837:	83 fa 03             	cmp    edx,0x3
c001b83a:	0f 94 c0             	sete   al
c001b83d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b841:	c3                   	ret    
c001b842:	31 c0                	xor    eax,eax
c001b844:	c3                   	ret    
c001b845:	90                   	nop

c001b846 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b846:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b84a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b84d:	0f ba e2 0f          	bt     edx,0xf
c001b851:	72 f7                	jb     c001b84a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b853:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b856:	83 ca 10             	or     edx,0x10
c001b859:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b85c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b85f:	83 ca 01             	or     edx,0x1
c001b862:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b865:	c3                   	ret    

c001b866 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b866:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b86a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b86d:	83 e2 fe             	and    edx,0xfffffffe
c001b870:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b873:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b876:	83 e2 ef             	and    edx,0xffffffef
c001b879:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b87c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b87f:	0f ba e2 0e          	bt     edx,0xe
c001b883:	72 f7                	jb     c001b87c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b885:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b888:	0f ba e2 0f          	bt     edx,0xf
c001b88c:	72 ee                	jb     c001b87c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b88e:	c3                   	ret    
c001b88f:	90                   	nop

c001b890 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b890:	55                   	push   ebp
c001b891:	57                   	push   edi
c001b892:	56                   	push   esi
c001b893:	53                   	push   ebx
c001b894:	83 ec 1c             	sub    esp,0x1c
c001b897:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b89b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b89f:	53                   	push   ebx
c001b8a0:	56                   	push   esi
c001b8a1:	e8 c0 ff ff ff       	call   c001b866 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b8a6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b8aa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b8b0:	83 ec 0c             	sub    esp,0xc
c001b8b3:	c1 e5 0a             	shl    ebp,0xa
c001b8b6:	01 e8                	add    eax,ebp
c001b8b8:	89 03                	mov    DWORD PTR [ebx],eax
c001b8ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8bc:	68 00 04 00 00       	push   0x400
c001b8c1:	6a 00                	push   0x0
c001b8c3:	50                   	push   eax
c001b8c4:	e8 27 4c fe ff       	call   c00004f0 <memset>
c001b8c9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b8cf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b8d3:	01 e8                	add    eax,ebp
c001b8d5:	83 c4 1c             	add    esp,0x1c
c001b8d8:	89 03                	mov    DWORD PTR [ebx],eax
c001b8da:	c1 e2 08             	shl    edx,0x8
c001b8dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8e4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b8ea:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b8f0:	01 f8                	add    eax,edi
c001b8f2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b8f5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b8f8:	68 00 01 00 00       	push   0x100
c001b8fd:	6a 00                	push   0x0
c001b8ff:	50                   	push   eax
c001b900:	e8 eb 4b fe ff       	call   c00004f0 <memset>
c001b905:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b90b:	01 fa                	add    edx,edi
c001b90d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b911:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b914:	c1 e7 0d             	shl    edi,0xd
c001b917:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b91e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b924:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b92a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b92e:	31 ff                	xor    edi,edi
c001b930:	83 c4 10             	add    esp,0x10
c001b933:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b93d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b943:	83 c5 20             	add    ebp,0x20
c001b946:	01 f8                	add    eax,edi
c001b948:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b94b:	52                   	push   edx
c001b94c:	68 00 01 00 00       	push   0x100
c001b951:	6a 00                	push   0x0
c001b953:	50                   	push   eax
c001b954:	e8 97 4b fe ff       	call   c00004f0 <memset>
c001b959:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b95d:	83 c4 10             	add    esp,0x10
c001b960:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b966:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b96d:	01 f8                	add    eax,edi
c001b96f:	81 c7 00 01 00 00    	add    edi,0x100
c001b975:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b978:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b97e:	75 b3                	jne    c001b933 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b980:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b987:	50                   	push   eax
c001b988:	50                   	push   eax
c001b989:	53                   	push   ebx
c001b98a:	56                   	push   esi
c001b98b:	e8 b6 fe ff ff       	call   c001b846 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b990:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b997:	83 c4 2c             	add    esp,0x2c
c001b99a:	5b                   	pop    ebx
c001b99b:	5e                   	pop    esi
c001b99c:	5f                   	pop    edi
c001b99d:	5d                   	pop    ebp
c001b99e:	c3                   	ret    
c001b99f:	90                   	nop

c001b9a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b9a0:	55                   	push   ebp
c001b9a1:	57                   	push   edi
c001b9a2:	56                   	push   esi
c001b9a3:	53                   	push   ebx
c001b9a4:	31 db                	xor    ebx,ebx
c001b9a6:	83 ec 0c             	sub    esp,0xc
c001b9a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b9b1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b9b4:	f7 c7 01 00 00 00    	test   edi,0x1
c001b9ba:	74 7a                	je     c001ba36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9c0:	89 d8                	mov    eax,ebx
c001b9c2:	c1 e0 07             	shl    eax,0x7
c001b9c5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b9cc:	55                   	push   ebp
c001b9cd:	56                   	push   esi
c001b9ce:	e8 2b fe ff ff       	call   c001b7fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b9d3:	5a                   	pop    edx
c001b9d4:	83 f8 01             	cmp    eax,0x1
c001b9d7:	59                   	pop    ecx
c001b9d8:	75 21                	jne    c001b9fb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b9da:	50                   	push   eax
c001b9db:	53                   	push   ebx
c001b9dc:	55                   	push   ebp
c001b9dd:	56                   	push   esi
c001b9de:	e8 ad fe ff ff       	call   c001b890 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9e3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b9ea:	e8 bf c0 fe ff       	call   c0007aae <malloc>
c001b9ef:	89 c5                	mov    ebp,eax
c001b9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9f4:	e8 99 10 00 00       	call   c001ca92 <SATA::SATA()>
c001b9f9:	eb 24                	jmp    c001ba1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b9fb:	83 f8 04             	cmp    eax,0x4
c001b9fe:	75 36                	jne    c001ba36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ba00:	51                   	push   ecx
c001ba01:	53                   	push   ebx
c001ba02:	55                   	push   ebp
c001ba03:	56                   	push   esi
c001ba04:	e8 87 fe ff ff       	call   c001b890 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ba09:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ba10:	e8 99 c0 fe ff       	call   c0007aae <malloc>
c001ba15:	89 c5                	mov    ebp,eax
c001ba17:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba1a:	e8 d5 17 00 00       	call   c001d1f4 <SATAPI::SATAPI()>
c001ba1f:	58                   	pop    eax
c001ba20:	5a                   	pop    edx
c001ba21:	55                   	push   ebp
c001ba22:	56                   	push   esi
c001ba23:	e8 a2 03 ff ff       	call   c000bdca <Device::addChild(Device*)>
c001ba28:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba2b:	56                   	push   esi
c001ba2c:	6a 00                	push   0x0
c001ba2e:	53                   	push   ebx
c001ba2f:	55                   	push   ebp
c001ba30:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba33:	83 c4 20             	add    esp,0x20
c001ba36:	d1 ef                	shr    edi,1
c001ba38:	43                   	inc    ebx
c001ba39:	83 fb 20             	cmp    ebx,0x20
c001ba3c:	0f 85 72 ff ff ff    	jne    c001b9b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba42:	83 c4 0c             	add    esp,0xc
c001ba45:	5b                   	pop    ebx
c001ba46:	5e                   	pop    esi
c001ba47:	5f                   	pop    edi
c001ba48:	5d                   	pop    ebp
c001ba49:	c3                   	ret    

c001ba4a <SATABus::open(int, int, void*)>:
c001ba4a:	83 ec 14             	sub    esp,0x14
c001ba4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba51:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba57:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba5d:	52                   	push   edx
c001ba5e:	50                   	push   eax
c001ba5f:	e8 3c ff ff ff       	call   c001b9a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba64:	31 c0                	xor    eax,eax
c001ba66:	83 c4 1c             	add    esp,0x1c
c001ba69:	c3                   	ret    

c001ba6a <ATA::close(int, int, void*)>:
c001ba6a:	83 ec 0c             	sub    esp,0xc
c001ba6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba77:	85 c0                	test   eax,eax
c001ba79:	74 0c                	je     c001ba87 <ATA::close(int, int, void*)+0x1d>
c001ba7b:	83 ec 0c             	sub    esp,0xc
c001ba7e:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba80:	50                   	push   eax
c001ba81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba84:	83 c4 10             	add    esp,0x10
c001ba87:	31 c0                	xor    eax,eax
c001ba89:	83 c4 0c             	add    esp,0xc
c001ba8c:	c3                   	ret    
c001ba8d:	90                   	nop

c001ba8e <ATA::powerSaving(PowerSavingLevel)>:
c001ba8e:	c3                   	ret    
c001ba8f:	90                   	nop

c001ba90 <ATA::ATA()>:
c001ba90:	83 ec 0c             	sub    esp,0xc
c001ba93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba97:	83 ec 04             	sub    esp,0x4
c001ba9a:	68 00 02 00 00       	push   0x200
c001ba9f:	68 79 1b 02 c0       	push   0xc0021b79
c001baa4:	50                   	push   eax
c001baa5:	e8 ec 06 ff ff       	call   c000c196 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001baaa:	83 c4 10             	add    esp,0x10
c001baad:	ba ec 1a 02 c0       	mov    edx,0xc0021aec
c001bab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab6:	89 10                	mov    DWORD PTR [eax],edx
c001bab8:	90                   	nop
c001bab9:	83 c4 0c             	add    esp,0xc
c001babc:	c3                   	ret    
c001babd:	90                   	nop

c001babe <ATA::flush(bool)>:
c001babe:	53                   	push   ebx
c001babf:	83 ec 08             	sub    esp,0x8
c001bac2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bac6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bacb:	83 f8 01             	cmp    eax,0x1
c001bace:	19 c0                	sbb    eax,eax
c001bad0:	83 e0 fd             	and    eax,0xfffffffd
c001bad3:	05 ea 00 00 00       	add    eax,0xea
c001bad8:	50                   	push   eax
c001bad9:	6a 07                	push   0x7
c001badb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bae2:	50                   	push   eax
c001bae3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bae9:	e8 16 f1 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baee:	83 c4 0c             	add    esp,0xc
c001baf1:	6a 00                	push   0x0
c001baf3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bafa:	50                   	push   eax
c001bafb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bb01:	e8 e6 fb ff ff       	call   c001b6ec <IDE::polling(unsigned char, unsigned int)>
c001bb06:	83 c4 18             	add    esp,0x18
c001bb09:	5b                   	pop    ebx
c001bb0a:	c3                   	ret    
c001bb0b:	90                   	nop

c001bb0c <ATA::readyForCommand()>:
c001bb0c:	56                   	push   esi
c001bb0d:	53                   	push   ebx
c001bb0e:	53                   	push   ebx
c001bb0f:	31 db                	xor    ebx,ebx
c001bb11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb15:	51                   	push   ecx
c001bb16:	6a 0c                	push   0xc
c001bb18:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb1f:	50                   	push   eax
c001bb20:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb26:	e8 99 f1 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	a8 88                	test   al,0x88
c001bb30:	74 1f                	je     c001bb51 <ATA::readyForCommand()+0x45>
c001bb32:	43                   	inc    ebx
c001bb33:	83 fb 63             	cmp    ebx,0x63
c001bb36:	7e dd                	jle    c001bb15 <ATA::readyForCommand()+0x9>
c001bb38:	83 ec 0c             	sub    esp,0xc
c001bb3b:	6a 0a                	push   0xa
c001bb3d:	e8 16 98 ff ff       	call   c0015358 <milliTenthSleep(unsigned int)>
c001bb42:	83 c4 10             	add    esp,0x10
c001bb45:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb4b:	75 c8                	jne    c001bb15 <ATA::readyForCommand()+0x9>
c001bb4d:	31 c0                	xor    eax,eax
c001bb4f:	eb 02                	jmp    c001bb53 <ATA::readyForCommand()+0x47>
c001bb51:	b0 01                	mov    al,0x1
c001bb53:	5a                   	pop    edx
c001bb54:	5b                   	pop    ebx
c001bb55:	5e                   	pop    esi
c001bb56:	c3                   	ret    
c001bb57:	90                   	nop

c001bb58 <ATA::access(unsigned long long, int, void*, bool)>:
c001bb58:	55                   	push   ebp
c001bb59:	57                   	push   edi
c001bb5a:	56                   	push   esi
c001bb5b:	53                   	push   ebx
c001bb5c:	83 ec 2c             	sub    esp,0x2c
c001bb5f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb67:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb6f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb73:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bb7b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb85:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bb8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb8f:	c1 e0 06             	shl    eax,0x6
c001bb92:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bb9a:	74 5d                	je     c001bbf9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bb9c:	89 fa                	mov    edx,edi
c001bb9e:	89 f0                	mov    eax,esi
c001bba0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bba4:	c1 ea 1c             	shr    edx,0x1c
c001bba7:	89 d1                	mov    ecx,edx
c001bba9:	09 c1                	or     ecx,eax
c001bbab:	74 25                	je     c001bbd2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bbad:	31 ed                	xor    ebp,ebp
c001bbaf:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bbb6:	89 fa                	mov    edx,edi
c001bbb8:	89 f0                	mov    eax,esi
c001bbba:	0f ad d0             	shrd   eax,edx,cl
c001bbbd:	d3 ea                	shr    edx,cl
c001bbbf:	f6 c1 20             	test   cl,0x20
c001bbc2:	74 02                	je     c001bbc6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bbc4:	89 d0                	mov    eax,edx
c001bbc6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bbca:	45                   	inc    ebp
c001bbcb:	83 fd 06             	cmp    ebp,0x6
c001bbce:	75 df                	jne    c001bbaf <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bbd0:	eb 76                	jmp    c001bc48 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bbd2:	89 f0                	mov    eax,esi
c001bbd4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bbd9:	89 fa                	mov    edx,edi
c001bbdb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbe2:	0f ac d0 10          	shrd   eax,edx,0x10
c001bbe6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbeb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bbef:	c1 ee 18             	shr    esi,0x18
c001bbf2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001bbf7:	eb 56                	jmp    c001bc4f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bbf9:	6a 00                	push   0x0
c001bbfb:	6a 3f                	push   0x3f
c001bbfd:	57                   	push   edi
c001bbfe:	56                   	push   esi
c001bbff:	e8 ac 2a 00 00       	call   c001e6b0 <__umoddi3>
c001bc04:	83 c4 10             	add    esp,0x10
c001bc07:	40                   	inc    eax
c001bc08:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bc0c:	6a 00                	push   0x0
c001bc0e:	68 f0 03 00 00       	push   0x3f0
c001bc13:	57                   	push   edi
c001bc14:	56                   	push   esi
c001bc15:	e8 96 29 00 00       	call   c001e5b0 <__udivdi3>
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc22:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc29:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc2e:	6a 00                	push   0x0
c001bc30:	6a 3f                	push   0x3f
c001bc32:	57                   	push   edi
c001bc33:	56                   	push   esi
c001bc34:	e8 77 29 00 00       	call   c001e5b0 <__udivdi3>
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	83 e0 0f             	and    eax,0xf
c001bc3f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001bc44:	89 c6                	mov    esi,eax
c001bc46:	eb 07                	jmp    c001bc4f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bc48:	31 f6                	xor    esi,esi
c001bc4a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001bc4f:	bf 01 00 00 00       	mov    edi,0x1
c001bc54:	50                   	push   eax
c001bc55:	6a 00                	push   0x0
c001bc57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc5e:	50                   	push   eax
c001bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc63:	e8 a4 f1 ff ff       	call   c001ae0c <IDE::enableIRQs(unsigned char, bool)>
c001bc68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc6b:	e8 9c fe ff ff       	call   c001bb0c <ATA::readyForCommand()>
c001bc70:	83 c4 10             	add    esp,0x10
c001bc73:	84 c0                	test   al,al
c001bc75:	0f 84 69 02 00 00    	je     c001bee4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bc7b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc81:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc87:	c1 e0 04             	shl    eax,0x4
c001bc8a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bc91:	09 c6                	or     esi,eax
c001bc93:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001bc98:	75 05                	jne    c001bc9f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bc9a:	83 ce a0             	or     esi,0xffffffa0
c001bc9d:	eb 03                	jmp    c001bca2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001bc9f:	83 ce e0             	or     esi,0xffffffe0
c001bca2:	89 f0                	mov    eax,esi
c001bca4:	0f b6 f0             	movzx  esi,al
c001bca7:	56                   	push   esi
c001bca8:	6a 06                	push   0x6
c001bcaa:	51                   	push   ecx
c001bcab:	52                   	push   edx
c001bcac:	e8 53 ef ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcb1:	83 c4 10             	add    esp,0x10
c001bcb4:	6a 00                	push   0x0
c001bcb6:	6a 01                	push   0x1
c001bcb8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcbf:	50                   	push   eax
c001bcc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcc6:	e8 39 ef ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bccb:	83 c4 10             	add    esp,0x10
c001bcce:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001bcd3:	83 f8 02             	cmp    eax,0x2
c001bcd6:	75 6e                	jne    c001bd46 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001bcd8:	6a 00                	push   0x0
c001bcda:	6a 08                	push   0x8
c001bcdc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bce3:	50                   	push   eax
c001bce4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcea:	e8 15 ef ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcef:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bcf4:	50                   	push   eax
c001bcf5:	6a 09                	push   0x9
c001bcf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcfe:	50                   	push   eax
c001bcff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd05:	e8 fa ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd0a:	83 c4 20             	add    esp,0x20
c001bd0d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bd12:	50                   	push   eax
c001bd13:	6a 0a                	push   0xa
c001bd15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd1c:	50                   	push   eax
c001bd1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd23:	e8 dc ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd28:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd2d:	50                   	push   eax
c001bd2e:	6a 0b                	push   0xb
c001bd30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd37:	50                   	push   eax
c001bd38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd3e:	e8 c1 ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd43:	83 c4 20             	add    esp,0x20
c001bd46:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd4b:	50                   	push   eax
c001bd4c:	6a 02                	push   0x2
c001bd4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd55:	50                   	push   eax
c001bd56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd5c:	e8 a3 ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd61:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd66:	50                   	push   eax
c001bd67:	6a 03                	push   0x3
c001bd69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd70:	50                   	push   eax
c001bd71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd77:	e8 88 ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd7c:	83 c4 20             	add    esp,0x20
c001bd7f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd84:	50                   	push   eax
c001bd85:	6a 04                	push   0x4
c001bd87:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd8e:	50                   	push   eax
c001bd8f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd95:	e8 6a ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd9a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd9f:	50                   	push   eax
c001bda0:	6a 05                	push   0x5
c001bda2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bda9:	50                   	push   eax
c001bdaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdb0:	e8 4f ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdb5:	83 c4 20             	add    esp,0x20
c001bdb8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bdbd:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001bdc2:	74 11                	je     c001bdd5 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001bdc4:	b8 30 00 00 00       	mov    eax,0x30
c001bdc9:	83 fa 02             	cmp    edx,0x2
c001bdcc:	75 16                	jne    c001bde4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001bdce:	b8 34 00 00 00       	mov    eax,0x34
c001bdd3:	eb 0f                	jmp    c001bde4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001bdd5:	b8 20 00 00 00       	mov    eax,0x20
c001bdda:	83 fa 02             	cmp    edx,0x2
c001bddd:	75 05                	jne    c001bde4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001bddf:	b8 24 00 00 00       	mov    eax,0x24
c001bde4:	50                   	push   eax
c001bde5:	6a 07                	push   0x7
c001bde7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdee:	50                   	push   eax
c001bdef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdf5:	e8 0a ee ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdfa:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bdfe:	83 c4 10             	add    esp,0x10
c001be01:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001be06:	85 f6                	test   esi,esi
c001be08:	0f 84 b3 00 00 00    	je     c001bec1 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001be0e:	50                   	push   eax
c001be0f:	6a 01                	push   0x1
c001be11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be18:	50                   	push   eax
c001be19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be1f:	e8 c8 f8 ff ff       	call   c001b6ec <IDE::polling(unsigned char, unsigned int)>
c001be24:	83 c4 10             	add    esp,0x10
c001be27:	0f b6 f8             	movzx  edi,al
c001be2a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be30:	85 ff                	test   edi,edi
c001be32:	74 1d                	je     c001be51 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001be34:	57                   	push   edi
c001be35:	0f b6 d2             	movzx  edx,dl
c001be38:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be3f:	50                   	push   eax
c001be40:	52                   	push   edx
c001be41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be47:	e8 e6 f7 ff ff       	call   c001b632 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be4c:	e9 90 00 00 00       	jmp    c001bee1 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001be51:	85 ed                	test   ebp,ebp
c001be53:	74 3b                	je     c001be90 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001be55:	31 c9                	xor    ecx,ecx
c001be57:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001be5f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001be63:	50                   	push   eax
c001be64:	50                   	push   eax
c001be65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be6c:	50                   	push   eax
c001be6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be73:	e8 7a ed ff ff       	call   c001abf2 <IDE::getBase(unsigned char)>
c001be78:	89 c2                	mov    edx,eax
c001be7a:	89 f8                	mov    eax,edi
c001be7c:	66 ef                	out    dx,ax
c001be7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001be82:	83 c4 10             	add    esp,0x10
c001be85:	41                   	inc    ecx
c001be86:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001be8c:	75 c9                	jne    c001be57 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001be8e:	eb 23                	jmp    c001beb3 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001be90:	0f b6 d2             	movzx  edx,dl
c001be93:	51                   	push   ecx
c001be94:	51                   	push   ecx
c001be95:	52                   	push   edx
c001be96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be9c:	e8 51 ed ff ff       	call   c001abf2 <IDE::getBase(unsigned char)>
c001bea1:	b9 00 01 00 00       	mov    ecx,0x100
c001bea6:	89 c2                	mov    edx,eax
c001bea8:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001beac:	fc                   	cld    
c001bead:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001beb0:	83 c4 10             	add    esp,0x10
c001beb3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bebb:	4e                   	dec    esi
c001bebc:	e9 45 ff ff ff       	jmp    c001be06 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001bec1:	31 ff                	xor    edi,edi
c001bec3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bec8:	74 1a                	je     c001bee4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001beca:	50                   	push   eax
c001becb:	50                   	push   eax
c001becc:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001bed1:	83 f8 02             	cmp    eax,0x2
c001bed4:	0f 94 c0             	sete   al
c001bed7:	0f b6 c0             	movzx  eax,al
c001beda:	50                   	push   eax
c001bedb:	53                   	push   ebx
c001bedc:	e8 dd fb ff ff       	call   c001babe <ATA::flush(bool)>
c001bee1:	83 c4 10             	add    esp,0x10
c001bee4:	83 c4 2c             	add    esp,0x2c
c001bee7:	89 f8                	mov    eax,edi
c001bee9:	5b                   	pop    ebx
c001beea:	5e                   	pop    esi
c001beeb:	5f                   	pop    edi
c001beec:	5d                   	pop    ebp
c001beed:	c3                   	ret    

c001beee <ATA::detectCHS()>:
c001beee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bef2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bef8:	c1 e0 06             	shl    eax,0x6
c001befb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf01:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf0b:	c7 44 24 04 d0 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ad0
c001bf13:	e9 5b 49 ff ff       	jmp    c0010873 <KePanic(char const*)>

c001bf18 <ATA::open(int, int, void*)>:
c001bf18:	53                   	push   ebx
c001bf19:	83 ec 08             	sub    esp,0x8
c001bf1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf28:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf2e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf34:	c1 e0 06             	shl    eax,0x6
c001bf37:	01 d0                	add    eax,edx
c001bf39:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf40:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf46:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf4d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf57:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bf5d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf64:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bf6b:	75 0c                	jne    c001bf79 <ATA::open(int, int, void*)+0x61>
c001bf6d:	83 ec 0c             	sub    esp,0xc
c001bf70:	53                   	push   ebx
c001bf71:	e8 78 ff ff ff       	call   c001beee <ATA::detectCHS()>
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bf7f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf85:	c1 e0 06             	shl    eax,0x6
c001bf88:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bf8f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf99:	d1 e8                	shr    eax,1
c001bf9b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bfa1:	6a 04                	push   0x4
c001bfa3:	6a 0c                	push   0xc
c001bfa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfac:	50                   	push   eax
c001bfad:	52                   	push   edx
c001bfae:	e8 51 ec ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb3:	90                   	nop
c001bfb4:	90                   	nop
c001bfb5:	6a 00                	push   0x0
c001bfb7:	6a 0c                	push   0xc
c001bfb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfc0:	50                   	push   eax
c001bfc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bfc7:	e8 38 ec ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfcc:	83 c4 14             	add    esp,0x14
c001bfcf:	53                   	push   ebx
c001bfd0:	e8 29 02 ff ff       	call   c000c1fe <PhysicalDisk::startCache()>
c001bfd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfd8:	e8 65 14 ff ff       	call   c000d442 <createPartitionsForDisk(PhysicalDisk*)>
c001bfdd:	31 c0                	xor    eax,eax
c001bfdf:	83 c4 18             	add    esp,0x18
c001bfe2:	5b                   	pop    ebx
c001bfe3:	c3                   	ret    

c001bfe4 <combineCharAndColour(char, unsigned char)>:
c001bfe4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfe9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bfef:	c1 e0 08             	shl    eax,0x8
c001bff2:	09 d0                	or     eax,edx
c001bff4:	c3                   	ret    

c001bff5 <combineColours(unsigned char, unsigned char)>:
c001bff5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bffa:	c1 e0 04             	shl    eax,0x4
c001bffd:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c001:	c3                   	ret    

c001c002 <ATA::read(unsigned long long, int, void*)>:
c001c002:	55                   	push   ebp
c001c003:	57                   	push   edi
c001c004:	56                   	push   esi
c001c005:	be 04 00 00 00       	mov    esi,0x4
c001c00a:	53                   	push   ebx
c001c00b:	83 ec 0c             	sub    esp,0xc
c001c00e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c012:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c016:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c019:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c01d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c021:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c027:	0f 87 a1 01 00 00    	ja     c001c1ce <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c02d:	be 06 00 00 00       	mov    esi,0x6
c001c032:	85 c9                	test   ecx,ecx
c001c034:	0f 84 94 01 00 00    	je     c001c1ce <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c03a:	55                   	push   ebp
c001c03b:	55                   	push   ebp
c001c03c:	6a 00                	push   0x0
c001c03e:	51                   	push   ecx
c001c03f:	53                   	push   ebx
c001c040:	52                   	push   edx
c001c041:	50                   	push   eax
c001c042:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c046:	e8 0d fb ff ff       	call   c001bb58 <ATA::access(unsigned long long, int, void*, bool)>
c001c04b:	83 c4 20             	add    esp,0x20
c001c04e:	89 c6                	mov    esi,eax
c001c050:	85 c0                	test   eax,eax
c001c052:	0f 85 71 01 00 00    	jne    c001c1c9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c058:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c05e:	89 da                	mov    edx,ebx
c001c060:	50                   	push   eax
c001c061:	bd 10 27 00 00       	mov    ebp,0x2710
c001c066:	50                   	push   eax
c001c067:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c06d:	6a 0f                	push   0xf
c001c06f:	6a 00                	push   0x0
c001c071:	e8 7f ff ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001c076:	59                   	pop    ecx
c001c077:	b9 0a 00 00 00       	mov    ecx,0xa
c001c07c:	5b                   	pop    ebx
c001c07d:	0f b6 d8             	movzx  ebx,al
c001c080:	89 d0                	mov    eax,edx
c001c082:	53                   	push   ebx
c001c083:	99                   	cdq    
c001c084:	f7 fd                	idiv   ebp
c001c086:	99                   	cdq    
c001c087:	f7 f9                	idiv   ecx
c001c089:	83 c2 30             	add    edx,0x30
c001c08c:	0f b6 d2             	movzx  edx,dl
c001c08f:	52                   	push   edx
c001c090:	e8 4f ff ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c095:	5f                   	pop    edi
c001c096:	bf e8 03 00 00       	mov    edi,0x3e8
c001c09b:	5a                   	pop    edx
c001c09c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c0a2:	53                   	push   ebx
c001c0a3:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0a8:	99                   	cdq    
c001c0a9:	f7 ff                	idiv   edi
c001c0ab:	99                   	cdq    
c001c0ac:	f7 f9                	idiv   ecx
c001c0ae:	8d 42 30             	lea    eax,[edx+0x30]
c001c0b1:	0f b6 c0             	movzx  eax,al
c001c0b4:	50                   	push   eax
c001c0b5:	e8 2a ff ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c0ba:	5f                   	pop    edi
c001c0bb:	bf 64 00 00 00       	mov    edi,0x64
c001c0c0:	5a                   	pop    edx
c001c0c1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c0c7:	53                   	push   ebx
c001c0c8:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0cd:	99                   	cdq    
c001c0ce:	f7 ff                	idiv   edi
c001c0d0:	99                   	cdq    
c001c0d1:	f7 f9                	idiv   ecx
c001c0d3:	8d 42 30             	lea    eax,[edx+0x30]
c001c0d6:	0f b6 c0             	movzx  eax,al
c001c0d9:	50                   	push   eax
c001c0da:	e8 05 ff ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c0df:	5a                   	pop    edx
c001c0e0:	5a                   	pop    edx
c001c0e1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c0e7:	53                   	push   ebx
c001c0e8:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0ed:	99                   	cdq    
c001c0ee:	f7 f9                	idiv   ecx
c001c0f0:	99                   	cdq    
c001c0f1:	f7 f9                	idiv   ecx
c001c0f3:	8d 42 30             	lea    eax,[edx+0x30]
c001c0f6:	0f b6 c0             	movzx  eax,al
c001c0f9:	50                   	push   eax
c001c0fa:	e8 e5 fe ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c0ff:	5a                   	pop    edx
c001c100:	5a                   	pop    edx
c001c101:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c107:	53                   	push   ebx
c001c108:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c10d:	99                   	cdq    
c001c10e:	f7 f9                	idiv   ecx
c001c110:	83 c2 30             	add    edx,0x30
c001c113:	0f b6 d2             	movzx  edx,dl
c001c116:	52                   	push   edx
c001c117:	e8 c8 fe ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c11c:	5a                   	pop    edx
c001c11d:	5a                   	pop    edx
c001c11e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c124:	53                   	push   ebx
c001c125:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c12a:	99                   	cdq    
c001c12b:	f7 fd                	idiv   ebp
c001c12d:	99                   	cdq    
c001c12e:	f7 f9                	idiv   ecx
c001c130:	8d 42 30             	lea    eax,[edx+0x30]
c001c133:	0f b6 c0             	movzx  eax,al
c001c136:	50                   	push   eax
c001c137:	e8 a8 fe ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c13c:	5d                   	pop    ebp
c001c13d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c142:	5a                   	pop    edx
c001c143:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c149:	53                   	push   ebx
c001c14a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c14f:	99                   	cdq    
c001c150:	f7 fd                	idiv   ebp
c001c152:	99                   	cdq    
c001c153:	f7 f9                	idiv   ecx
c001c155:	8d 42 30             	lea    eax,[edx+0x30]
c001c158:	0f b6 c0             	movzx  eax,al
c001c15b:	50                   	push   eax
c001c15c:	e8 83 fe ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c161:	5d                   	pop    ebp
c001c162:	5a                   	pop    edx
c001c163:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c169:	53                   	push   ebx
c001c16a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c16f:	99                   	cdq    
c001c170:	f7 ff                	idiv   edi
c001c172:	99                   	cdq    
c001c173:	f7 f9                	idiv   ecx
c001c175:	8d 42 30             	lea    eax,[edx+0x30]
c001c178:	0f b6 c0             	movzx  eax,al
c001c17b:	50                   	push   eax
c001c17c:	e8 63 fe ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c181:	5f                   	pop    edi
c001c182:	5d                   	pop    ebp
c001c183:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c189:	53                   	push   ebx
c001c18a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c18f:	99                   	cdq    
c001c190:	f7 f9                	idiv   ecx
c001c192:	99                   	cdq    
c001c193:	f7 f9                	idiv   ecx
c001c195:	8d 42 30             	lea    eax,[edx+0x30]
c001c198:	0f b6 c0             	movzx  eax,al
c001c19b:	50                   	push   eax
c001c19c:	e8 43 fe ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c1a1:	5a                   	pop    edx
c001c1a2:	5f                   	pop    edi
c001c1a3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c1a9:	53                   	push   ebx
c001c1aa:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1af:	99                   	cdq    
c001c1b0:	f7 f9                	idiv   ecx
c001c1b2:	83 c2 30             	add    edx,0x30
c001c1b5:	0f b6 d2             	movzx  edx,dl
c001c1b8:	52                   	push   edx
c001c1b9:	e8 26 fe ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c1be:	83 c4 10             	add    esp,0x10
c001c1c1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c1c7:	eb 05                	jmp    c001c1ce <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c1c9:	be 01 00 00 00       	mov    esi,0x1
c001c1ce:	83 c4 0c             	add    esp,0xc
c001c1d1:	89 f0                	mov    eax,esi
c001c1d3:	5b                   	pop    ebx
c001c1d4:	5e                   	pop    esi
c001c1d5:	5f                   	pop    edi
c001c1d6:	5d                   	pop    ebp
c001c1d7:	c3                   	ret    

c001c1d8 <ATA::write(unsigned long long, int, void*)>:
c001c1d8:	55                   	push   ebp
c001c1d9:	57                   	push   edi
c001c1da:	56                   	push   esi
c001c1db:	be 04 00 00 00       	mov    esi,0x4
c001c1e0:	53                   	push   ebx
c001c1e1:	83 ec 0c             	sub    esp,0xc
c001c1e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c1e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1ec:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c1ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c1f3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c1f7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c1fd:	0f 87 9c 01 00 00    	ja     c001c39f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c203:	be 06 00 00 00       	mov    esi,0x6
c001c208:	85 c9                	test   ecx,ecx
c001c20a:	0f 84 8f 01 00 00    	je     c001c39f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c210:	55                   	push   ebp
c001c211:	55                   	push   ebp
c001c212:	6a 01                	push   0x1
c001c214:	51                   	push   ecx
c001c215:	53                   	push   ebx
c001c216:	52                   	push   edx
c001c217:	50                   	push   eax
c001c218:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c21c:	e8 37 f9 ff ff       	call   c001bb58 <ATA::access(unsigned long long, int, void*, bool)>
c001c221:	83 c4 20             	add    esp,0x20
c001c224:	89 c6                	mov    esi,eax
c001c226:	85 c0                	test   eax,eax
c001c228:	0f 85 6c 01 00 00    	jne    c001c39a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c22e:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c234:	bd 10 27 00 00       	mov    ebp,0x2710
c001c239:	50                   	push   eax
c001c23a:	50                   	push   eax
c001c23b:	6a 0f                	push   0xf
c001c23d:	6a 00                	push   0x0
c001c23f:	e8 b1 fd ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001c244:	5a                   	pop    edx
c001c245:	0f b6 d8             	movzx  ebx,al
c001c248:	59                   	pop    ecx
c001c249:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c24e:	53                   	push   ebx
c001c24f:	b9 0a 00 00 00       	mov    ecx,0xa
c001c254:	99                   	cdq    
c001c255:	f7 fd                	idiv   ebp
c001c257:	99                   	cdq    
c001c258:	f7 f9                	idiv   ecx
c001c25a:	8d 42 30             	lea    eax,[edx+0x30]
c001c25d:	0f b6 c0             	movzx  eax,al
c001c260:	50                   	push   eax
c001c261:	e8 7e fd ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c266:	5f                   	pop    edi
c001c267:	bf e8 03 00 00       	mov    edi,0x3e8
c001c26c:	5a                   	pop    edx
c001c26d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c273:	53                   	push   ebx
c001c274:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c279:	99                   	cdq    
c001c27a:	f7 ff                	idiv   edi
c001c27c:	99                   	cdq    
c001c27d:	f7 f9                	idiv   ecx
c001c27f:	8d 42 30             	lea    eax,[edx+0x30]
c001c282:	0f b6 c0             	movzx  eax,al
c001c285:	50                   	push   eax
c001c286:	e8 59 fd ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c28b:	5f                   	pop    edi
c001c28c:	bf 64 00 00 00       	mov    edi,0x64
c001c291:	5a                   	pop    edx
c001c292:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c298:	53                   	push   ebx
c001c299:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c29e:	99                   	cdq    
c001c29f:	f7 ff                	idiv   edi
c001c2a1:	99                   	cdq    
c001c2a2:	f7 f9                	idiv   ecx
c001c2a4:	8d 42 30             	lea    eax,[edx+0x30]
c001c2a7:	0f b6 c0             	movzx  eax,al
c001c2aa:	50                   	push   eax
c001c2ab:	e8 34 fd ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c2b0:	5a                   	pop    edx
c001c2b1:	5a                   	pop    edx
c001c2b2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c2b8:	53                   	push   ebx
c001c2b9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2be:	99                   	cdq    
c001c2bf:	f7 f9                	idiv   ecx
c001c2c1:	99                   	cdq    
c001c2c2:	f7 f9                	idiv   ecx
c001c2c4:	8d 42 30             	lea    eax,[edx+0x30]
c001c2c7:	0f b6 c0             	movzx  eax,al
c001c2ca:	50                   	push   eax
c001c2cb:	e8 14 fd ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c2d0:	5a                   	pop    edx
c001c2d1:	5a                   	pop    edx
c001c2d2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c2d8:	53                   	push   ebx
c001c2d9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2de:	99                   	cdq    
c001c2df:	f7 f9                	idiv   ecx
c001c2e1:	8d 42 30             	lea    eax,[edx+0x30]
c001c2e4:	0f b6 c0             	movzx  eax,al
c001c2e7:	50                   	push   eax
c001c2e8:	e8 f7 fc ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c2ed:	5a                   	pop    edx
c001c2ee:	5a                   	pop    edx
c001c2ef:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c2f5:	53                   	push   ebx
c001c2f6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c2fb:	99                   	cdq    
c001c2fc:	f7 fd                	idiv   ebp
c001c2fe:	99                   	cdq    
c001c2ff:	f7 f9                	idiv   ecx
c001c301:	8d 42 30             	lea    eax,[edx+0x30]
c001c304:	0f b6 c0             	movzx  eax,al
c001c307:	50                   	push   eax
c001c308:	e8 d7 fc ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c30d:	5d                   	pop    ebp
c001c30e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c313:	5a                   	pop    edx
c001c314:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c31a:	53                   	push   ebx
c001c31b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c320:	99                   	cdq    
c001c321:	f7 fd                	idiv   ebp
c001c323:	99                   	cdq    
c001c324:	f7 f9                	idiv   ecx
c001c326:	8d 42 30             	lea    eax,[edx+0x30]
c001c329:	0f b6 c0             	movzx  eax,al
c001c32c:	50                   	push   eax
c001c32d:	e8 b2 fc ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c332:	5d                   	pop    ebp
c001c333:	5a                   	pop    edx
c001c334:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c33a:	53                   	push   ebx
c001c33b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c340:	99                   	cdq    
c001c341:	f7 ff                	idiv   edi
c001c343:	99                   	cdq    
c001c344:	f7 f9                	idiv   ecx
c001c346:	8d 42 30             	lea    eax,[edx+0x30]
c001c349:	0f b6 c0             	movzx  eax,al
c001c34c:	50                   	push   eax
c001c34d:	e8 92 fc ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c352:	5f                   	pop    edi
c001c353:	5d                   	pop    ebp
c001c354:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c35a:	53                   	push   ebx
c001c35b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c360:	99                   	cdq    
c001c361:	f7 f9                	idiv   ecx
c001c363:	99                   	cdq    
c001c364:	f7 f9                	idiv   ecx
c001c366:	8d 42 30             	lea    eax,[edx+0x30]
c001c369:	0f b6 c0             	movzx  eax,al
c001c36c:	50                   	push   eax
c001c36d:	e8 72 fc ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c372:	5a                   	pop    edx
c001c373:	5f                   	pop    edi
c001c374:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c37a:	53                   	push   ebx
c001c37b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c380:	99                   	cdq    
c001c381:	f7 f9                	idiv   ecx
c001c383:	83 c2 30             	add    edx,0x30
c001c386:	0f b6 d2             	movzx  edx,dl
c001c389:	52                   	push   edx
c001c38a:	e8 55 fc ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001c38f:	83 c4 10             	add    esp,0x10
c001c392:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c398:	eb 05                	jmp    c001c39f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c39a:	be 01 00 00 00       	mov    esi,0x1
c001c39f:	83 c4 0c             	add    esp,0xc
c001c3a2:	89 f0                	mov    eax,esi
c001c3a4:	5b                   	pop    ebx
c001c3a5:	5e                   	pop    esi
c001c3a6:	5f                   	pop    edi
c001c3a7:	5d                   	pop    ebp
c001c3a8:	c3                   	ret    
c001c3a9:	90                   	nop

c001c3aa <ATAPI::write(unsigned long long, int, void*)>:
c001c3aa:	b8 03 00 00 00       	mov    eax,0x3
c001c3af:	c3                   	ret    

c001c3b0 <ATAPI::close(int, int, void*)>:
c001c3b0:	83 ec 0c             	sub    esp,0xc
c001c3b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c3bd:	85 c0                	test   eax,eax
c001c3bf:	74 0c                	je     c001c3cd <ATAPI::close(int, int, void*)+0x1d>
c001c3c1:	83 ec 0c             	sub    esp,0xc
c001c3c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001c3c6:	50                   	push   eax
c001c3c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c3ca:	83 c4 10             	add    esp,0x10
c001c3cd:	31 c0                	xor    eax,eax
c001c3cf:	83 c4 0c             	add    esp,0xc
c001c3d2:	c3                   	ret    
c001c3d3:	90                   	nop

c001c3d4 <ATAPI::ATAPI()>:
c001c3d4:	83 ec 0c             	sub    esp,0xc
c001c3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3db:	83 ec 04             	sub    esp,0x4
c001c3de:	68 00 08 00 00       	push   0x800
c001c3e3:	68 19 1c 02 c0       	push   0xc0021c19
c001c3e8:	50                   	push   eax
c001c3e9:	e8 a8 fd fe ff       	call   c000c196 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3ee:	83 c4 10             	add    esp,0x10
c001c3f1:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c001c3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fa:	89 10                	mov    DWORD PTR [eax],edx
c001c3fc:	90                   	nop
c001c3fd:	83 c4 0c             	add    esp,0xc
c001c400:	c3                   	ret    
c001c401:	90                   	nop

c001c402 <ATAPI::readyForCommand()>:
c001c402:	56                   	push   esi
c001c403:	53                   	push   ebx
c001c404:	53                   	push   ebx
c001c405:	31 db                	xor    ebx,ebx
c001c407:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c40b:	51                   	push   ecx
c001c40c:	6a 0c                	push   0xc
c001c40e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c415:	50                   	push   eax
c001c416:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c41c:	e8 a3 e8 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	a8 88                	test   al,0x88
c001c426:	74 25                	je     c001c44d <ATAPI::readyForCommand()+0x4b>
c001c428:	43                   	inc    ebx
c001c429:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c42f:	7e da                	jle    c001c40b <ATAPI::readyForCommand()+0x9>
c001c431:	83 ec 0c             	sub    esp,0xc
c001c434:	68 5e 01 00 00       	push   0x15e
c001c439:	e8 1a 8f ff ff       	call   c0015358 <milliTenthSleep(unsigned int)>
c001c43e:	83 c4 10             	add    esp,0x10
c001c441:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c447:	75 c2                	jne    c001c40b <ATAPI::readyForCommand()+0x9>
c001c449:	31 c0                	xor    eax,eax
c001c44b:	eb 02                	jmp    c001c44f <ATAPI::readyForCommand()+0x4d>
c001c44d:	b0 01                	mov    al,0x1
c001c44f:	5a                   	pop    edx
c001c450:	5b                   	pop    ebx
c001c451:	5e                   	pop    esi
c001c452:	c3                   	ret    
c001c453:	90                   	nop

c001c454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c454:	55                   	push   ebp
c001c455:	57                   	push   edi
c001c456:	56                   	push   esi
c001c457:	53                   	push   ebx
c001c458:	83 ec 20             	sub    esp,0x20
c001c45b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c45f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c463:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c467:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c46b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c46f:	6a 01                	push   0x1
c001c471:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c478:	50                   	push   eax
c001c479:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c47f:	e8 88 e9 ff ff       	call   c001ae0c <IDE::enableIRQs(unsigned char, bool)>
c001c484:	5e                   	pop    esi
c001c485:	58                   	pop    eax
c001c486:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c48d:	50                   	push   eax
c001c48e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c494:	e8 45 e7 ff ff       	call   c001abde <IDE::prepareInterrupt(unsigned char)>
c001c499:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c49c:	e8 61 ff ff ff       	call   c001c402 <ATAPI::readyForCommand()>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	84 c0                	test   al,al
c001c4a6:	75 0a                	jne    c001c4b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c4a8:	bb 01 00 00 00       	mov    ebx,0x1
c001c4ad:	e9 60 02 00 00       	jmp    c001c712 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c4b2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c4b8:	c1 e0 04             	shl    eax,0x4
c001c4bb:	0f b6 c0             	movzx  eax,al
c001c4be:	50                   	push   eax
c001c4bf:	6a 06                	push   0x6
c001c4c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4c8:	50                   	push   eax
c001c4c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4cf:	e8 30 e7 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4d4:	6a 00                	push   0x0
c001c4d6:	6a 01                	push   0x1
c001c4d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4df:	50                   	push   eax
c001c4e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4e6:	e8 19 e7 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4eb:	83 c4 20             	add    esp,0x20
c001c4ee:	0f b6 c3             	movzx  eax,bl
c001c4f1:	0f b6 df             	movzx  ebx,bh
c001c4f4:	50                   	push   eax
c001c4f5:	6a 04                	push   0x4
c001c4f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4fe:	50                   	push   eax
c001c4ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c505:	e8 fa e6 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c50a:	53                   	push   ebx
c001c50b:	6a 05                	push   0x5
c001c50d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c514:	50                   	push   eax
c001c515:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c51b:	e8 e4 e6 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c520:	83 c4 20             	add    esp,0x20
c001c523:	68 a0 00 00 00       	push   0xa0
c001c528:	6a 07                	push   0x7
c001c52a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c531:	50                   	push   eax
c001c532:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c538:	e8 c7 e6 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c53d:	83 c4 0c             	add    esp,0xc
c001c540:	6a 01                	push   0x1
c001c542:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c549:	50                   	push   eax
c001c54a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c550:	e8 97 f1 ff ff       	call   c001b6ec <IDE::polling(unsigned char, unsigned int)>
c001c555:	83 c4 10             	add    esp,0x10
c001c558:	0f b6 d8             	movzx  ebx,al
c001c55b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c561:	85 db                	test   ebx,ebx
c001c563:	74 20                	je     c001c585 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c565:	53                   	push   ebx
c001c566:	0f b6 c0             	movzx  eax,al
c001c569:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c570:	52                   	push   edx
c001c571:	50                   	push   eax
c001c572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c578:	e8 b5 f0 ff ff       	call   c001b632 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c57d:	83 c4 10             	add    esp,0x10
c001c580:	e9 8d 01 00 00       	jmp    c001c712 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c585:	0f b6 c0             	movzx  eax,al
c001c588:	53                   	push   ebx
c001c589:	53                   	push   ebx
c001c58a:	50                   	push   eax
c001c58b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c591:	e8 5c e6 ff ff       	call   c001abf2 <IDE::getBase(unsigned char)>
c001c596:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c59a:	b9 06 00 00 00       	mov    ecx,0x6
c001c59f:	89 c2                	mov    edx,eax
c001c5a1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c5a4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c5a8:	83 c4 10             	add    esp,0x10
c001c5ab:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5b4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c5ba:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c5c1:	85 db                	test   ebx,ebx
c001c5c3:	0f 84 ec 00 00 00    	je     c001c6b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c5c9:	51                   	push   ecx
c001c5ca:	51                   	push   ecx
c001c5cb:	52                   	push   edx
c001c5cc:	50                   	push   eax
c001c5cd:	e8 a0 e7 ff ff       	call   c001ad72 <IDE::waitInterrupt(unsigned char)>
c001c5d2:	83 c4 10             	add    esp,0x10
c001c5d5:	84 c0                	test   al,al
c001c5d7:	0f 84 cb fe ff ff    	je     c001c4a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c5dd:	56                   	push   esi
c001c5de:	56                   	push   esi
c001c5df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5e6:	50                   	push   eax
c001c5e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5ed:	e8 ec e5 ff ff       	call   c001abde <IDE::prepareInterrupt(unsigned char)>
c001c5f2:	83 c4 0c             	add    esp,0xc
c001c5f5:	6a 04                	push   0x4
c001c5f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5fe:	50                   	push   eax
c001c5ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c605:	e8 ba e6 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001c60a:	83 c4 0c             	add    esp,0xc
c001c60d:	89 c6                	mov    esi,eax
c001c60f:	6a 05                	push   0x5
c001c611:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c618:	50                   	push   eax
c001c619:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c61f:	e8 a0 e6 ff ff       	call   c001acc4 <IDE::read(unsigned char, unsigned char)>
c001c624:	89 f1                	mov    ecx,esi
c001c626:	0f b6 c0             	movzx  eax,al
c001c629:	0f b6 f1             	movzx  esi,cl
c001c62c:	c1 e0 08             	shl    eax,0x8
c001c62f:	09 c6                	or     esi,eax
c001c631:	d1 fe                	sar    esi,1
c001c633:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c637:	83 c4 10             	add    esp,0x10
c001c63a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c63f:	74 41                	je     c001c682 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c641:	31 c9                	xor    ecx,ecx
c001c643:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c649:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c650:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c654:	75 0a                	jne    c001c660 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c656:	01 c9                	add    ecx,ecx
c001c658:	01 cd                	add    ebp,ecx
c001c65a:	4b                   	dec    ebx
c001c65b:	e9 54 ff ff ff       	jmp    c001c5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c660:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c665:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c669:	51                   	push   ecx
c001c66a:	51                   	push   ecx
c001c66b:	52                   	push   edx
c001c66c:	50                   	push   eax
c001c66d:	e8 80 e5 ff ff       	call   c001abf2 <IDE::getBase(unsigned char)>
c001c672:	89 c2                	mov    edx,eax
c001c674:	89 f0                	mov    eax,esi
c001c676:	66 ef                	out    dx,ax
c001c678:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c67c:	83 c4 10             	add    esp,0x10
c001c67f:	41                   	inc    ecx
c001c680:	eb c1                	jmp    c001c643 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c682:	31 f6                	xor    esi,esi
c001c684:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c68a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c691:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c695:	75 06                	jne    c001c69d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c697:	01 f6                	add    esi,esi
c001c699:	01 f5                	add    ebp,esi
c001c69b:	eb bd                	jmp    c001c65a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c69d:	51                   	push   ecx
c001c69e:	51                   	push   ecx
c001c69f:	52                   	push   edx
c001c6a0:	50                   	push   eax
c001c6a1:	e8 4c e5 ff ff       	call   c001abf2 <IDE::getBase(unsigned char)>
c001c6a6:	89 c2                	mov    edx,eax
c001c6a8:	66 ed                	in     ax,dx
c001c6aa:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	46                   	inc    esi
c001c6b3:	eb cf                	jmp    c001c684 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c6b5:	51                   	push   ecx
c001c6b6:	51                   	push   ecx
c001c6b7:	52                   	push   edx
c001c6b8:	50                   	push   eax
c001c6b9:	e8 b4 e6 ff ff       	call   c001ad72 <IDE::waitInterrupt(unsigned char)>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	84 c0                	test   al,al
c001c6c3:	0f 84 df fd ff ff    	je     c001c4a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c6c9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6ce:	52                   	push   edx
c001c6cf:	52                   	push   edx
c001c6d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6d7:	50                   	push   eax
c001c6d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6de:	e8 fb e4 ff ff       	call   c001abde <IDE::prepareInterrupt(unsigned char)>
c001c6e3:	83 c4 10             	add    esp,0x10
c001c6e6:	50                   	push   eax
c001c6e7:	50                   	push   eax
c001c6e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6ef:	50                   	push   eax
c001c6f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6f6:	e8 f7 e4 ff ff       	call   c001abf2 <IDE::getBase(unsigned char)>
c001c6fb:	8d 50 07             	lea    edx,[eax+0x7]
c001c6fe:	ec                   	in     al,dx
c001c6ff:	83 c4 10             	add    esp,0x10
c001c702:	a8 88                	test   al,0x88
c001c704:	74 0a                	je     c001c710 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c706:	4b                   	dec    ebx
c001c707:	75 dd                	jne    c001c6e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c709:	bb 02 00 00 00       	mov    ebx,0x2
c001c70e:	eb 02                	jmp    c001c712 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c710:	31 db                	xor    ebx,ebx
c001c712:	83 c4 1c             	add    esp,0x1c
c001c715:	89 d8                	mov    eax,ebx
c001c717:	5b                   	pop    ebx
c001c718:	5e                   	pop    esi
c001c719:	5f                   	pop    edi
c001c71a:	5d                   	pop    ebp
c001c71b:	c3                   	ret    

c001c71c <ATAPI::diskRemoved()>:
c001c71c:	53                   	push   ebx
c001c71d:	83 ec 14             	sub    esp,0x14
c001c720:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c724:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c72b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c731:	e8 fc 09 ff ff       	call   c000d132 <LogicalDisk::unmount()>
c001c736:	58                   	pop    eax
c001c737:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c73d:	e8 d2 13 ff ff       	call   c000db14 <VCache::writeWriteBuffer()>
c001c742:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c748:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c74c:	83 c4 18             	add    esp,0x18
c001c74f:	5b                   	pop    ebx
c001c750:	e9 af 13 ff ff       	jmp    c000db04 <VCache::invalidateReadBuffer()>
c001c755:	90                   	nop

c001c756 <ATAPI::eject()>:
c001c756:	57                   	push   edi
c001c757:	b9 03 00 00 00       	mov    ecx,0x3
c001c75c:	53                   	push   ebx
c001c75d:	83 ec 14             	sub    esp,0x14
c001c760:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c764:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c768:	fc                   	cld    
c001c769:	31 c0                	xor    eax,eax
c001c76b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c76d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c772:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c777:	50                   	push   eax
c001c778:	50                   	push   eax
c001c779:	6a 00                	push   0x0
c001c77b:	6a 00                	push   0x0
c001c77d:	6a 00                	push   0x0
c001c77f:	6a 02                	push   0x2
c001c781:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c785:	50                   	push   eax
c001c786:	53                   	push   ebx
c001c787:	e8 c8 fc ff ff       	call   c001c454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c78c:	83 c4 14             	add    esp,0x14
c001c78f:	53                   	push   ebx
c001c790:	e8 87 ff ff ff       	call   c001c71c <ATAPI::diskRemoved()>
c001c795:	83 c4 24             	add    esp,0x24
c001c798:	31 c0                	xor    eax,eax
c001c79a:	5b                   	pop    ebx
c001c79b:	5f                   	pop    edi
c001c79c:	c3                   	ret    
c001c79d:	90                   	nop

c001c79e <ATAPI::diskInserted()>:
c001c79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c7a9:	c3                   	ret    

c001c7aa <ATAPI::detectMedia()>:
c001c7aa:	56                   	push   esi
c001c7ab:	53                   	push   ebx
c001c7ac:	83 ec 28             	sub    esp,0x28
c001c7af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c7b3:	6a 0c                	push   0xc
c001c7b5:	6a 00                	push   0x0
c001c7b7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c7bb:	56                   	push   esi
c001c7bc:	e8 2f 3d fe ff       	call   c00004f0 <memset>
c001c7c1:	58                   	pop    eax
c001c7c2:	5a                   	pop    edx
c001c7c3:	6a 00                	push   0x0
c001c7c5:	6a 00                	push   0x0
c001c7c7:	6a 00                	push   0x0
c001c7c9:	6a 00                	push   0x0
c001c7cb:	56                   	push   esi
c001c7cc:	53                   	push   ebx
c001c7cd:	e8 82 fc ff ff       	call   c001c454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7d2:	83 c4 1c             	add    esp,0x1c
c001c7d5:	6a 0c                	push   0xc
c001c7d7:	6a 00                	push   0x0
c001c7d9:	56                   	push   esi
c001c7da:	e8 11 3d fe ff       	call   c00004f0 <memset>
c001c7df:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c7e4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c7e9:	59                   	pop    ecx
c001c7ea:	58                   	pop    eax
c001c7eb:	6a 01                	push   0x1
c001c7ed:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c7f1:	50                   	push   eax
c001c7f2:	6a 00                	push   0x0
c001c7f4:	6a 12                	push   0x12
c001c7f6:	56                   	push   esi
c001c7f7:	53                   	push   ebx
c001c7f8:	e8 57 fc ff ff       	call   c001c454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7fd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c801:	83 c4 20             	add    esp,0x20
c001c804:	83 e0 7f             	and    eax,0x7f
c001c807:	83 f8 70             	cmp    eax,0x70
c001c80a:	74 15                	je     c001c821 <ATAPI::detectMedia()+0x77>
c001c80c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c813:	75 0c                	jne    c001c821 <ATAPI::detectMedia()+0x77>
c001c815:	83 ec 0c             	sub    esp,0xc
c001c818:	53                   	push   ebx
c001c819:	e8 80 ff ff ff       	call   c001c79e <ATAPI::diskInserted()>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c825:	83 e0 0f             	and    eax,0xf
c001c828:	83 f8 02             	cmp    eax,0x2
c001c82b:	75 1b                	jne    c001c848 <ATAPI::detectMedia()+0x9e>
c001c82d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c832:	75 2d                	jne    c001c861 <ATAPI::detectMedia()+0xb7>
c001c834:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c83b:	74 24                	je     c001c861 <ATAPI::detectMedia()+0xb7>
c001c83d:	83 ec 0c             	sub    esp,0xc
c001c840:	53                   	push   ebx
c001c841:	e8 d6 fe ff ff       	call   c001c71c <ATAPI::diskRemoved()>
c001c846:	eb 16                	jmp    c001c85e <ATAPI::detectMedia()+0xb4>
c001c848:	85 c0                	test   eax,eax
c001c84a:	75 15                	jne    c001c861 <ATAPI::detectMedia()+0xb7>
c001c84c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c853:	75 0c                	jne    c001c861 <ATAPI::detectMedia()+0xb7>
c001c855:	83 ec 0c             	sub    esp,0xc
c001c858:	53                   	push   ebx
c001c859:	e8 40 ff ff ff       	call   c001c79e <ATAPI::diskInserted()>
c001c85e:	83 c4 10             	add    esp,0x10
c001c861:	83 c4 24             	add    esp,0x24
c001c864:	5b                   	pop    ebx
c001c865:	5e                   	pop    esi
c001c866:	c3                   	ret    
c001c867:	90                   	nop

c001c868 <ATAPI::open(int, int, void*)>:
c001c868:	56                   	push   esi
c001c869:	53                   	push   ebx
c001c86a:	50                   	push   eax
c001c86b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c86f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c873:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c877:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c87d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c883:	c1 e0 06             	shl    eax,0x6
c001c886:	01 d0                	add    eax,edx
c001c888:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c88f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c895:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c89c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c8a6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c8ac:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c8b3:	6a 04                	push   0x4
c001c8b5:	6a 0c                	push   0xc
c001c8b7:	51                   	push   ecx
c001c8b8:	52                   	push   edx
c001c8b9:	e8 46 e3 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8be:	90                   	nop
c001c8bf:	90                   	nop
c001c8c0:	6a 00                	push   0x0
c001c8c2:	6a 0c                	push   0xc
c001c8c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8cb:	50                   	push   eax
c001c8cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d2:	e8 2d e3 ff ff       	call   c001ac04 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d7:	83 c4 14             	add    esp,0x14
c001c8da:	68 78 01 00 00       	push   0x178
c001c8df:	e8 ca b1 fe ff       	call   c0007aae <malloc>
c001c8e4:	83 c4 0c             	add    esp,0xc
c001c8e7:	89 c6                	mov    esi,eax
c001c8e9:	6a 00                	push   0x0
c001c8eb:	68 ff ff ff 7f       	push   0x7fffffff
c001c8f0:	6a 00                	push   0x0
c001c8f2:	6a 00                	push   0x0
c001c8f4:	53                   	push   ebx
c001c8f5:	68 cb 1c 02 c0       	push   0xc0021ccb
c001c8fa:	50                   	push   eax
c001c8fb:	e8 70 06 ff ff       	call   c000cf70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c900:	83 c4 14             	add    esp,0x14
c001c903:	56                   	push   esi
c001c904:	e8 27 07 ff ff       	call   c000d030 <LogicalDisk::assignDriveLetter()>
c001c909:	5a                   	pop    edx
c001c90a:	0f be c0             	movsx  eax,al
c001c90d:	59                   	pop    ecx
c001c90e:	50                   	push   eax
c001c90f:	68 1c 1b 02 c0       	push   0xc0021b1c
c001c914:	e8 7d e0 fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001c919:	58                   	pop    eax
c001c91a:	5a                   	pop    edx
c001c91b:	56                   	push   esi
c001c91c:	53                   	push   ebx
c001c91d:	e8 a8 f4 fe ff       	call   c000bdca <Device::addChild(Device*)>
c001c922:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c92b:	e8 ce f8 fe ff       	call   c000c1fe <PhysicalDisk::startCache()>
c001c930:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c937:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c93a:	e8 6b fe ff ff       	call   c001c7aa <ATAPI::detectMedia()>
c001c93f:	83 c4 14             	add    esp,0x14
c001c942:	31 c0                	xor    eax,eax
c001c944:	5b                   	pop    ebx
c001c945:	5e                   	pop    esi
c001c946:	c3                   	ret    
c001c947:	90                   	nop

c001c948 <ATAPI::read(unsigned long long, int, void*)>:
c001c948:	55                   	push   ebp
c001c949:	57                   	push   edi
c001c94a:	56                   	push   esi
c001c94b:	53                   	push   ebx
c001c94c:	83 ec 1c             	sub    esp,0x1c
c001c94f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c953:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c957:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c95b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c962:	74 3c                	je     c001c9a0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c964:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c968:	b9 03 00 00 00       	mov    ecx,0x3
c001c96d:	fc                   	cld    
c001c96e:	31 c0                	xor    eax,eax
c001c970:	0f ce                	bswap  esi
c001c972:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c974:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c979:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c97d:	89 e8                	mov    eax,ebp
c001c97f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c983:	50                   	push   eax
c001c984:	50                   	push   eax
c001c985:	55                   	push   ebp
c001c986:	c1 e5 0b             	shl    ebp,0xb
c001c989:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c98d:	6a 00                	push   0x0
c001c98f:	55                   	push   ebp
c001c990:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c994:	50                   	push   eax
c001c995:	53                   	push   ebx
c001c996:	e8 b9 fa ff ff       	call   c001c454 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c99b:	83 c4 20             	add    esp,0x20
c001c99e:	eb 1a                	jmp    c001c9ba <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c9a0:	83 ec 0c             	sub    esp,0xc
c001c9a3:	53                   	push   ebx
c001c9a4:	e8 01 fe ff ff       	call   c001c7aa <ATAPI::detectMedia()>
c001c9a9:	83 c4 10             	add    esp,0x10
c001c9ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9b3:	75 af                	jne    c001c964 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c9b5:	b8 02 00 00 00       	mov    eax,0x2
c001c9ba:	83 c4 1c             	add    esp,0x1c
c001c9bd:	5b                   	pop    ebx
c001c9be:	5e                   	pop    esi
c001c9bf:	5f                   	pop    edi
c001c9c0:	5d                   	pop    ebp
c001c9c1:	c3                   	ret    

c001c9c2 <SATA::close(int, int, void*)>:
c001c9c2:	83 ec 0c             	sub    esp,0xc
c001c9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9cf:	85 c0                	test   eax,eax
c001c9d1:	74 0c                	je     c001c9df <SATA::close(int, int, void*)+0x1d>
c001c9d3:	83 ec 0c             	sub    esp,0xc
c001c9d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9d8:	50                   	push   eax
c001c9d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9dc:	83 c4 10             	add    esp,0x10
c001c9df:	31 c0                	xor    eax,eax
c001c9e1:	83 c4 0c             	add    esp,0xc
c001c9e4:	c3                   	ret    
c001c9e5:	90                   	nop

c001c9e6 <SATA::powerSaving(PowerSavingLevel)>:
c001c9e6:	c3                   	ret    
c001c9e7:	90                   	nop

c001c9e8 <SATA::open(int, int, void*)>:
c001c9e8:	56                   	push   esi
c001c9e9:	53                   	push   ebx
c001c9ea:	50                   	push   eax
c001c9eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9f3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c9fd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca03:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca1b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca21:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca28:	e8 86 b3 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001ca2d:	89 c6                	mov    esi,eax
c001ca2f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca35:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca3b:	e8 73 b3 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001ca40:	39 c6                	cmp    esi,eax
c001ca42:	74 10                	je     c001ca54 <SATA::open(int, int, void*)+0x6c>
c001ca44:	83 ec 0c             	sub    esp,0xc
c001ca47:	68 64 1b 02 c0       	push   0xc0021b64
c001ca4c:	e8 22 3e ff ff       	call   c0010873 <KePanic(char const*)>
c001ca51:	83 c4 10             	add    esp,0x10
c001ca54:	83 ec 0c             	sub    esp,0xc
c001ca57:	6a 02                	push   0x2
c001ca59:	e8 bf cb fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001ca5e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca64:	6a 03                	push   0x3
c001ca66:	50                   	push   eax
c001ca67:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ca6d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ca73:	e8 8c d2 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca78:	83 c4 14             	add    esp,0x14
c001ca7b:	53                   	push   ebx
c001ca7c:	e8 7d f7 fe ff       	call   c000c1fe <PhysicalDisk::startCache()>
c001ca81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca84:	e8 b9 09 ff ff       	call   c000d442 <createPartitionsForDisk(PhysicalDisk*)>
c001ca89:	83 c4 14             	add    esp,0x14
c001ca8c:	31 c0                	xor    eax,eax
c001ca8e:	5b                   	pop    ebx
c001ca8f:	5e                   	pop    esi
c001ca90:	c3                   	ret    
c001ca91:	90                   	nop

c001ca92 <SATA::SATA()>:
c001ca92:	83 ec 0c             	sub    esp,0xc
c001ca95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca99:	83 ec 04             	sub    esp,0x4
c001ca9c:	68 00 02 00 00       	push   0x200
c001caa1:	68 78 1b 02 c0       	push   0xc0021b78
c001caa6:	50                   	push   eax
c001caa7:	e8 ea f6 fe ff       	call   c000c196 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001caac:	83 c4 10             	add    esp,0x10
c001caaf:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c001cab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab8:	89 10                	mov    DWORD PTR [eax],edx
c001caba:	90                   	nop
c001cabb:	83 c4 0c             	add    esp,0xc
c001cabe:	c3                   	ret    
c001cabf:	90                   	nop

c001cac0 <SATA::access(unsigned long long, int, void*, bool)>:
c001cac0:	55                   	push   ebp
c001cac1:	57                   	push   edi
c001cac2:	56                   	push   esi
c001cac3:	53                   	push   ebx
c001cac4:	83 ec 2c             	sub    esp,0x2c
c001cac7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cacb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cacf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cad3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cad7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cadb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cae0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cae4:	7e 10                	jle    c001caf6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cae6:	83 ec 0c             	sub    esp,0xc
c001cae9:	68 88 1b 02 c0       	push   0xc0021b88
c001caee:	e8 80 3d ff ff       	call   c0010873 <KePanic(char const*)>
c001caf3:	83 c4 10             	add    esp,0x10
c001caf6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cafc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cb08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb0c:	89 d0                	mov    eax,edx
c001cb0e:	c1 e0 07             	shl    eax,0x7
c001cb11:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cb15:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb1f:	51                   	push   ecx
c001cb20:	8d 42 02             	lea    eax,[edx+0x2]
c001cb23:	51                   	push   ecx
c001cb24:	c1 e0 07             	shl    eax,0x7
c001cb27:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb2b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cb2f:	50                   	push   eax
c001cb30:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb36:	e8 91 ec ff ff       	call   c001b7cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb3f:	83 c4 10             	add    esp,0x10
c001cb42:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cb47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb4b:	0f 84 57 01 00 00    	je     c001cca8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cb51:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb55:	c1 e0 09             	shl    eax,0x9
c001cb58:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cb5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb61:	74 0e                	je     c001cb71 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cb63:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cb69:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb6d:	89 c1                	mov    ecx,eax
c001cb6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb71:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb7b:	8d 42 02             	lea    eax,[edx+0x2]
c001cb7e:	c1 e0 07             	shl    eax,0x7
c001cb81:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cb85:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb87:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cb8d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cb93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb97:	c1 e1 05             	shl    ecx,0x5
c001cb9a:	01 c8                	add    eax,ecx
c001cb9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cba0:	83 e1 01             	and    ecx,0x1
c001cba3:	89 ce                	mov    esi,ecx
c001cba5:	8a 08                	mov    cl,BYTE PTR [eax]
c001cba7:	c1 e6 06             	shl    esi,0x6
c001cbaa:	83 e1 bf             	and    ecx,0xffffffbf
c001cbad:	09 f1                	or     ecx,esi
c001cbaf:	88 08                	mov    BYTE PTR [eax],cl
c001cbb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbb3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cbb9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cbbf:	89 08                	mov    DWORD PTR [eax],ecx
c001cbc1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbc7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cbcd:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cbd3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cbd6:	50                   	push   eax
c001cbd7:	68 90 00 00 00       	push   0x90
c001cbdc:	6a 00                	push   0x0
c001cbde:	56                   	push   esi
c001cbdf:	e8 0c 39 fe ff       	call   c00004f0 <memset>
c001cbe4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cbea:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cbf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbf4:	83 c4 10             	add    esp,0x10
c001cbf7:	48                   	dec    eax
c001cbf8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cbfd:	89 c1                	mov    ecx,eax
c001cbff:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc05:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc0a:	09 c8                	or     eax,ecx
c001cc0c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc12:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc18:	83 c8 80             	or     eax,0xffffff80
c001cc1b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc21:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc28:	25 00 7f 00 00       	and    eax,0x7f00
c001cc2d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc32:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cc37:	66 89 06             	mov    WORD PTR [esi],ax
c001cc3a:	b0 35                	mov    al,0x35
c001cc3c:	75 02                	jne    c001cc40 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001cc3e:	b0 25                	mov    al,0x25
c001cc40:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc43:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001cc47:	89 e8                	mov    eax,ebp
c001cc49:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc4d:	c1 e8 10             	shr    eax,0x10
c001cc50:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc53:	89 e8                	mov    eax,ebp
c001cc55:	c1 e8 18             	shr    eax,0x18
c001cc58:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc5f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cc62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc66:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cc69:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc6d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cc71:	89 d6                	mov    esi,edx
c001cc73:	31 c0                	xor    eax,eax
c001cc75:	c1 e6 07             	shl    esi,0x7
c001cc78:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc7c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cc82:	80 e1 88             	and    cl,0x88
c001cc85:	74 0a                	je     c001cc91 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cc87:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc8c:	74 0a                	je     c001cc98 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cc8e:	40                   	inc    eax
c001cc8f:	eb eb                	jmp    c001cc7c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cc91:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc96:	75 17                	jne    c001ccaf <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cc98:	83 ec 0c             	sub    esp,0xc
c001cc9b:	68 c1 1b 02 c0       	push   0xc0021bc1
c001cca0:	e8 f1 dc fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	b8 01 00 00 00       	mov    eax,0x1
c001ccad:	eb 5d                	jmp    c001cd0c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001ccaf:	b8 01 00 00 00       	mov    eax,0x1
c001ccb4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ccb8:	c1 e2 07             	shl    edx,0x7
c001ccbb:	d3 e0                	shl    eax,cl
c001ccbd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ccc1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ccc7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cccd:	85 c8                	test   eax,ecx
c001cccf:	74 16                	je     c001cce7 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001ccd1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ccd7:	0f ba e1 1e          	bt     ecx,0x1e
c001ccdb:	73 ea                	jae    c001ccc7 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001ccdd:	83 ec 0c             	sub    esp,0xc
c001cce0:	68 cf 1b 02 c0       	push   0xc0021bcf
c001cce5:	eb b9                	jmp    c001cca0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cce7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cced:	0f ba e0 1e          	bt     eax,0x1e
c001ccf1:	72 b5                	jb     c001cca8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ccf3:	31 c0                	xor    eax,eax
c001ccf5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ccfa:	75 10                	jne    c001cd0c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001ccfc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd02:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cd0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd0c:	83 c4 2c             	add    esp,0x2c
c001cd0f:	5b                   	pop    ebx
c001cd10:	5e                   	pop    esi
c001cd11:	5f                   	pop    edi
c001cd12:	5d                   	pop    ebp
c001cd13:	c3                   	ret    

c001cd14 <SATA::read(unsigned long long, int, void*)>:
c001cd14:	55                   	push   ebp
c001cd15:	57                   	push   edi
c001cd16:	56                   	push   esi
c001cd17:	be 04 00 00 00       	mov    esi,0x4
c001cd1c:	53                   	push   ebx
c001cd1d:	83 ec 0c             	sub    esp,0xc
c001cd20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd28:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd2f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd33:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd39:	0f 87 1a 02 00 00    	ja     c001cf59 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd3f:	be 06 00 00 00       	mov    esi,0x6
c001cd44:	85 c9                	test   ecx,ecx
c001cd46:	0f 84 0d 02 00 00    	je     c001cf59 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd4c:	56                   	push   esi
c001cd4d:	56                   	push   esi
c001cd4e:	6a 00                	push   0x0
c001cd50:	51                   	push   ecx
c001cd51:	53                   	push   ebx
c001cd52:	52                   	push   edx
c001cd53:	50                   	push   eax
c001cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd58:	e8 63 fd ff ff       	call   c001cac0 <SATA::access(unsigned long long, int, void*, bool)>
c001cd5d:	83 c4 20             	add    esp,0x20
c001cd60:	89 c6                	mov    esi,eax
c001cd62:	85 c0                	test   eax,eax
c001cd64:	0f 85 ea 01 00 00    	jne    c001cf54 <SATA::read(unsigned long long, int, void*)+0x240>
c001cd6a:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cd70:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd75:	50                   	push   eax
c001cd76:	50                   	push   eax
c001cd77:	6a 0f                	push   0xf
c001cd79:	6a 00                	push   0x0
c001cd7b:	e8 75 f2 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001cd80:	5a                   	pop    edx
c001cd81:	0f b6 c0             	movzx  eax,al
c001cd84:	59                   	pop    ecx
c001cd85:	b9 10 27 00 00       	mov    ecx,0x2710
c001cd8a:	50                   	push   eax
c001cd8b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd90:	99                   	cdq    
c001cd91:	f7 f9                	idiv   ecx
c001cd93:	99                   	cdq    
c001cd94:	f7 fb                	idiv   ebx
c001cd96:	8d 42 30             	lea    eax,[edx+0x30]
c001cd99:	0f b6 c0             	movzx  eax,al
c001cd9c:	50                   	push   eax
c001cd9d:	e8 42 f2 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001cda2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cda8:	5f                   	pop    edi
c001cda9:	5d                   	pop    ebp
c001cdaa:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cdaf:	6a 0f                	push   0xf
c001cdb1:	6a 00                	push   0x0
c001cdb3:	e8 3d f2 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001cdb8:	5a                   	pop    edx
c001cdb9:	0f b6 c0             	movzx  eax,al
c001cdbc:	59                   	pop    ecx
c001cdbd:	50                   	push   eax
c001cdbe:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdc3:	99                   	cdq    
c001cdc4:	f7 fd                	idiv   ebp
c001cdc6:	99                   	cdq    
c001cdc7:	f7 fb                	idiv   ebx
c001cdc9:	8d 42 30             	lea    eax,[edx+0x30]
c001cdcc:	0f b6 c0             	movzx  eax,al
c001cdcf:	50                   	push   eax
c001cdd0:	e8 0f f2 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001cdd5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cddb:	5f                   	pop    edi
c001cddc:	bf 64 00 00 00       	mov    edi,0x64
c001cde1:	58                   	pop    eax
c001cde2:	6a 0f                	push   0xf
c001cde4:	6a 00                	push   0x0
c001cde6:	e8 0a f2 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001cdeb:	5a                   	pop    edx
c001cdec:	0f b6 c0             	movzx  eax,al
c001cdef:	59                   	pop    ecx
c001cdf0:	50                   	push   eax
c001cdf1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdf6:	99                   	cdq    
c001cdf7:	f7 ff                	idiv   edi
c001cdf9:	99                   	cdq    
c001cdfa:	f7 fb                	idiv   ebx
c001cdfc:	8d 42 30             	lea    eax,[edx+0x30]
c001cdff:	0f b6 c0             	movzx  eax,al
c001ce02:	50                   	push   eax
c001ce03:	e8 dc f1 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001ce08:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce0e:	58                   	pop    eax
c001ce0f:	5a                   	pop    edx
c001ce10:	6a 0f                	push   0xf
c001ce12:	6a 00                	push   0x0
c001ce14:	e8 dc f1 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001ce19:	59                   	pop    ecx
c001ce1a:	0f b6 c0             	movzx  eax,al
c001ce1d:	5a                   	pop    edx
c001ce1e:	50                   	push   eax
c001ce1f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce24:	99                   	cdq    
c001ce25:	f7 fb                	idiv   ebx
c001ce27:	99                   	cdq    
c001ce28:	f7 fb                	idiv   ebx
c001ce2a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce2d:	0f b6 c0             	movzx  eax,al
c001ce30:	50                   	push   eax
c001ce31:	e8 ae f1 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001ce36:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce3c:	59                   	pop    ecx
c001ce3d:	58                   	pop    eax
c001ce3e:	6a 0f                	push   0xf
c001ce40:	6a 00                	push   0x0
c001ce42:	e8 ae f1 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001ce47:	5a                   	pop    edx
c001ce48:	0f b6 c0             	movzx  eax,al
c001ce4b:	59                   	pop    ecx
c001ce4c:	50                   	push   eax
c001ce4d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce52:	99                   	cdq    
c001ce53:	f7 fb                	idiv   ebx
c001ce55:	8d 42 30             	lea    eax,[edx+0x30]
c001ce58:	0f b6 c0             	movzx  eax,al
c001ce5b:	50                   	push   eax
c001ce5c:	e8 83 f1 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001ce61:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce67:	58                   	pop    eax
c001ce68:	5a                   	pop    edx
c001ce69:	6a 0f                	push   0xf
c001ce6b:	6a 00                	push   0x0
c001ce6d:	e8 83 f1 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001ce72:	59                   	pop    ecx
c001ce73:	0f b6 c0             	movzx  eax,al
c001ce76:	5a                   	pop    edx
c001ce77:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce7c:	50                   	push   eax
c001ce7d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce82:	99                   	cdq    
c001ce83:	f7 f9                	idiv   ecx
c001ce85:	99                   	cdq    
c001ce86:	f7 fb                	idiv   ebx
c001ce88:	8d 42 30             	lea    eax,[edx+0x30]
c001ce8b:	0f b6 c0             	movzx  eax,al
c001ce8e:	50                   	push   eax
c001ce8f:	e8 50 f1 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001ce94:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce9a:	59                   	pop    ecx
c001ce9b:	58                   	pop    eax
c001ce9c:	6a 0f                	push   0xf
c001ce9e:	6a 00                	push   0x0
c001cea0:	e8 50 f1 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001cea5:	5a                   	pop    edx
c001cea6:	0f b6 c0             	movzx  eax,al
c001cea9:	59                   	pop    ecx
c001ceaa:	50                   	push   eax
c001ceab:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ceb0:	99                   	cdq    
c001ceb1:	f7 fd                	idiv   ebp
c001ceb3:	99                   	cdq    
c001ceb4:	f7 fb                	idiv   ebx
c001ceb6:	8d 42 30             	lea    eax,[edx+0x30]
c001ceb9:	0f b6 c0             	movzx  eax,al
c001cebc:	50                   	push   eax
c001cebd:	e8 22 f1 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001cec2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cec8:	5d                   	pop    ebp
c001cec9:	58                   	pop    eax
c001ceca:	6a 0f                	push   0xf
c001cecc:	6a 00                	push   0x0
c001cece:	e8 22 f1 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001ced3:	5a                   	pop    edx
c001ced4:	0f b6 c0             	movzx  eax,al
c001ced7:	59                   	pop    ecx
c001ced8:	50                   	push   eax
c001ced9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cede:	99                   	cdq    
c001cedf:	f7 ff                	idiv   edi
c001cee1:	99                   	cdq    
c001cee2:	f7 fb                	idiv   ebx
c001cee4:	8d 42 30             	lea    eax,[edx+0x30]
c001cee7:	0f b6 c0             	movzx  eax,al
c001ceea:	50                   	push   eax
c001ceeb:	e8 f4 f0 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001cef0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cef6:	5f                   	pop    edi
c001cef7:	5d                   	pop    ebp
c001cef8:	6a 0f                	push   0xf
c001cefa:	6a 00                	push   0x0
c001cefc:	e8 f4 f0 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001cf01:	5a                   	pop    edx
c001cf02:	0f b6 c0             	movzx  eax,al
c001cf05:	59                   	pop    ecx
c001cf06:	50                   	push   eax
c001cf07:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf0c:	99                   	cdq    
c001cf0d:	f7 fb                	idiv   ebx
c001cf0f:	99                   	cdq    
c001cf10:	f7 fb                	idiv   ebx
c001cf12:	8d 42 30             	lea    eax,[edx+0x30]
c001cf15:	0f b6 c0             	movzx  eax,al
c001cf18:	50                   	push   eax
c001cf19:	e8 c6 f0 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001cf1e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf24:	5f                   	pop    edi
c001cf25:	5d                   	pop    ebp
c001cf26:	6a 0f                	push   0xf
c001cf28:	6a 00                	push   0x0
c001cf2a:	e8 c6 f0 ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001cf2f:	5a                   	pop    edx
c001cf30:	0f b6 c0             	movzx  eax,al
c001cf33:	59                   	pop    ecx
c001cf34:	50                   	push   eax
c001cf35:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf3a:	99                   	cdq    
c001cf3b:	f7 fb                	idiv   ebx
c001cf3d:	83 c2 30             	add    edx,0x30
c001cf40:	0f b6 d2             	movzx  edx,dl
c001cf43:	52                   	push   edx
c001cf44:	e8 9b f0 ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001cf49:	83 c4 10             	add    esp,0x10
c001cf4c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf52:	eb 05                	jmp    c001cf59 <SATA::read(unsigned long long, int, void*)+0x245>
c001cf54:	be 01 00 00 00       	mov    esi,0x1
c001cf59:	83 c4 0c             	add    esp,0xc
c001cf5c:	89 f0                	mov    eax,esi
c001cf5e:	5b                   	pop    ebx
c001cf5f:	5e                   	pop    esi
c001cf60:	5f                   	pop    edi
c001cf61:	5d                   	pop    ebp
c001cf62:	c3                   	ret    
c001cf63:	90                   	nop

c001cf64 <SATA::write(unsigned long long, int, void*)>:
c001cf64:	55                   	push   ebp
c001cf65:	b8 04 00 00 00       	mov    eax,0x4
c001cf6a:	57                   	push   edi
c001cf6b:	56                   	push   esi
c001cf6c:	53                   	push   ebx
c001cf6d:	83 ec 1c             	sub    esp,0x1c
c001cf70:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cf74:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001cf78:	8d 75 ff             	lea    esi,[ebp-0x1]
c001cf7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cf7f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001cf83:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cf89:	0f 87 32 02 00 00    	ja     c001d1c1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cf8f:	b8 06 00 00 00       	mov    eax,0x6
c001cf94:	85 ff                	test   edi,edi
c001cf96:	0f 84 25 02 00 00    	je     c001d1c1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cf9c:	89 ee                	mov    esi,ebp
c001cf9e:	c1 e6 09             	shl    esi,0x9
c001cfa1:	01 fe                	add    esi,edi
c001cfa3:	89 c8                	mov    eax,ecx
c001cfa5:	89 da                	mov    edx,ebx
c001cfa7:	83 c0 01             	add    eax,0x1
c001cfaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cfae:	83 d2 00             	adc    edx,0x0
c001cfb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cfb5:	50                   	push   eax
c001cfb6:	50                   	push   eax
c001cfb7:	6a 01                	push   0x1
c001cfb9:	57                   	push   edi
c001cfba:	81 c7 00 02 00 00    	add    edi,0x200
c001cfc0:	6a 01                	push   0x1
c001cfc2:	53                   	push   ebx
c001cfc3:	51                   	push   ecx
c001cfc4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cfc8:	e8 f3 fa ff ff       	call   c001cac0 <SATA::access(unsigned long long, int, void*, bool)>
c001cfcd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfd1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cfd5:	83 c4 20             	add    esp,0x20
c001cfd8:	39 f7                	cmp    edi,esi
c001cfda:	75 c7                	jne    c001cfa3 <SATA::write(unsigned long long, int, void*)+0x3f>
c001cfdc:	bb 0a 00 00 00       	mov    ebx,0xa
c001cfe1:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001cfe7:	bd 10 27 00 00       	mov    ebp,0x2710
c001cfec:	50                   	push   eax
c001cfed:	50                   	push   eax
c001cfee:	6a 0f                	push   0xf
c001cff0:	6a 00                	push   0x0
c001cff2:	e8 fe ef ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001cff7:	5a                   	pop    edx
c001cff8:	0f b6 c0             	movzx  eax,al
c001cffb:	59                   	pop    ecx
c001cffc:	50                   	push   eax
c001cffd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d002:	99                   	cdq    
c001d003:	f7 fd                	idiv   ebp
c001d005:	99                   	cdq    
c001d006:	f7 fb                	idiv   ebx
c001d008:	8d 42 30             	lea    eax,[edx+0x30]
c001d00b:	0f b6 c0             	movzx  eax,al
c001d00e:	50                   	push   eax
c001d00f:	e8 d0 ef ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d014:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d01a:	5e                   	pop    esi
c001d01b:	5f                   	pop    edi
c001d01c:	bf e8 03 00 00       	mov    edi,0x3e8
c001d021:	6a 0f                	push   0xf
c001d023:	6a 00                	push   0x0
c001d025:	e8 cb ef ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d02a:	5a                   	pop    edx
c001d02b:	0f b6 c0             	movzx  eax,al
c001d02e:	59                   	pop    ecx
c001d02f:	50                   	push   eax
c001d030:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d035:	99                   	cdq    
c001d036:	f7 ff                	idiv   edi
c001d038:	99                   	cdq    
c001d039:	f7 fb                	idiv   ebx
c001d03b:	8d 42 30             	lea    eax,[edx+0x30]
c001d03e:	0f b6 c0             	movzx  eax,al
c001d041:	50                   	push   eax
c001d042:	e8 9d ef ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d047:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d04d:	5e                   	pop    esi
c001d04e:	be 64 00 00 00       	mov    esi,0x64
c001d053:	58                   	pop    eax
c001d054:	6a 0f                	push   0xf
c001d056:	6a 00                	push   0x0
c001d058:	e8 98 ef ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d05d:	5a                   	pop    edx
c001d05e:	0f b6 c0             	movzx  eax,al
c001d061:	59                   	pop    ecx
c001d062:	50                   	push   eax
c001d063:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d068:	99                   	cdq    
c001d069:	f7 fe                	idiv   esi
c001d06b:	99                   	cdq    
c001d06c:	f7 fb                	idiv   ebx
c001d06e:	8d 42 30             	lea    eax,[edx+0x30]
c001d071:	0f b6 c0             	movzx  eax,al
c001d074:	50                   	push   eax
c001d075:	e8 6a ef ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d07a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d080:	58                   	pop    eax
c001d081:	5a                   	pop    edx
c001d082:	6a 0f                	push   0xf
c001d084:	6a 00                	push   0x0
c001d086:	e8 6a ef ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d08b:	59                   	pop    ecx
c001d08c:	0f b6 c0             	movzx  eax,al
c001d08f:	5a                   	pop    edx
c001d090:	50                   	push   eax
c001d091:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d096:	99                   	cdq    
c001d097:	f7 fb                	idiv   ebx
c001d099:	99                   	cdq    
c001d09a:	f7 fb                	idiv   ebx
c001d09c:	8d 42 30             	lea    eax,[edx+0x30]
c001d09f:	0f b6 c0             	movzx  eax,al
c001d0a2:	50                   	push   eax
c001d0a3:	e8 3c ef ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d0a8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d0ae:	59                   	pop    ecx
c001d0af:	58                   	pop    eax
c001d0b0:	6a 0f                	push   0xf
c001d0b2:	6a 00                	push   0x0
c001d0b4:	e8 3c ef ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d0b9:	5a                   	pop    edx
c001d0ba:	0f b6 c0             	movzx  eax,al
c001d0bd:	59                   	pop    ecx
c001d0be:	50                   	push   eax
c001d0bf:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0c4:	99                   	cdq    
c001d0c5:	f7 fb                	idiv   ebx
c001d0c7:	83 c2 30             	add    edx,0x30
c001d0ca:	0f b6 d2             	movzx  edx,dl
c001d0cd:	52                   	push   edx
c001d0ce:	e8 11 ef ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d0d3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0d9:	58                   	pop    eax
c001d0da:	5a                   	pop    edx
c001d0db:	6a 0f                	push   0xf
c001d0dd:	6a 00                	push   0x0
c001d0df:	e8 11 ef ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d0e4:	59                   	pop    ecx
c001d0e5:	0f b6 c0             	movzx  eax,al
c001d0e8:	5a                   	pop    edx
c001d0e9:	50                   	push   eax
c001d0ea:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0ef:	99                   	cdq    
c001d0f0:	f7 fd                	idiv   ebp
c001d0f2:	99                   	cdq    
c001d0f3:	f7 fb                	idiv   ebx
c001d0f5:	8d 42 30             	lea    eax,[edx+0x30]
c001d0f8:	0f b6 c0             	movzx  eax,al
c001d0fb:	50                   	push   eax
c001d0fc:	e8 e3 ee ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d101:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d107:	59                   	pop    ecx
c001d108:	5d                   	pop    ebp
c001d109:	6a 0f                	push   0xf
c001d10b:	6a 00                	push   0x0
c001d10d:	e8 e3 ee ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d112:	5a                   	pop    edx
c001d113:	0f b6 c0             	movzx  eax,al
c001d116:	59                   	pop    ecx
c001d117:	50                   	push   eax
c001d118:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d11d:	99                   	cdq    
c001d11e:	f7 ff                	idiv   edi
c001d120:	99                   	cdq    
c001d121:	f7 fb                	idiv   ebx
c001d123:	8d 42 30             	lea    eax,[edx+0x30]
c001d126:	0f b6 c0             	movzx  eax,al
c001d129:	50                   	push   eax
c001d12a:	e8 b5 ee ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d12f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d135:	5f                   	pop    edi
c001d136:	5d                   	pop    ebp
c001d137:	6a 0f                	push   0xf
c001d139:	6a 00                	push   0x0
c001d13b:	e8 b5 ee ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d140:	5a                   	pop    edx
c001d141:	0f b6 c0             	movzx  eax,al
c001d144:	59                   	pop    ecx
c001d145:	50                   	push   eax
c001d146:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d14b:	99                   	cdq    
c001d14c:	f7 fe                	idiv   esi
c001d14e:	99                   	cdq    
c001d14f:	f7 fb                	idiv   ebx
c001d151:	8d 42 30             	lea    eax,[edx+0x30]
c001d154:	0f b6 c0             	movzx  eax,al
c001d157:	50                   	push   eax
c001d158:	e8 87 ee ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d15d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d163:	5e                   	pop    esi
c001d164:	5f                   	pop    edi
c001d165:	6a 0f                	push   0xf
c001d167:	6a 00                	push   0x0
c001d169:	e8 87 ee ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d16e:	5d                   	pop    ebp
c001d16f:	0f b6 c0             	movzx  eax,al
c001d172:	5a                   	pop    edx
c001d173:	50                   	push   eax
c001d174:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d179:	99                   	cdq    
c001d17a:	f7 fb                	idiv   ebx
c001d17c:	99                   	cdq    
c001d17d:	f7 fb                	idiv   ebx
c001d17f:	8d 42 30             	lea    eax,[edx+0x30]
c001d182:	0f b6 c0             	movzx  eax,al
c001d185:	50                   	push   eax
c001d186:	e8 59 ee ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d18b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d191:	59                   	pop    ecx
c001d192:	5e                   	pop    esi
c001d193:	6a 0f                	push   0xf
c001d195:	6a 00                	push   0x0
c001d197:	e8 59 ee ff ff       	call   c001bff5 <combineColours(unsigned char, unsigned char)>
c001d19c:	5f                   	pop    edi
c001d19d:	0f b6 c0             	movzx  eax,al
c001d1a0:	5d                   	pop    ebp
c001d1a1:	50                   	push   eax
c001d1a2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1a7:	99                   	cdq    
c001d1a8:	f7 fb                	idiv   ebx
c001d1aa:	83 c2 30             	add    edx,0x30
c001d1ad:	0f b6 d2             	movzx  edx,dl
c001d1b0:	52                   	push   edx
c001d1b1:	e8 2e ee ff ff       	call   c001bfe4 <combineCharAndColour(char, unsigned char)>
c001d1b6:	83 c4 10             	add    esp,0x10
c001d1b9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d1bf:	31 c0                	xor    eax,eax
c001d1c1:	83 c4 1c             	add    esp,0x1c
c001d1c4:	5b                   	pop    ebx
c001d1c5:	5e                   	pop    esi
c001d1c6:	5f                   	pop    edi
c001d1c7:	5d                   	pop    ebp
c001d1c8:	c3                   	ret    
c001d1c9:	90                   	nop

c001d1ca <SATAPI::write(unsigned long long, int, void*)>:
c001d1ca:	b8 03 00 00 00       	mov    eax,0x3
c001d1cf:	c3                   	ret    

c001d1d0 <SATAPI::close(int, int, void*)>:
c001d1d0:	83 ec 0c             	sub    esp,0xc
c001d1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1dd:	85 c0                	test   eax,eax
c001d1df:	74 0c                	je     c001d1ed <SATAPI::close(int, int, void*)+0x1d>
c001d1e1:	83 ec 0c             	sub    esp,0xc
c001d1e4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1e6:	50                   	push   eax
c001d1e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d1ea:	83 c4 10             	add    esp,0x10
c001d1ed:	31 c0                	xor    eax,eax
c001d1ef:	83 c4 0c             	add    esp,0xc
c001d1f2:	c3                   	ret    
c001d1f3:	90                   	nop

c001d1f4 <SATAPI::SATAPI()>:
c001d1f4:	83 ec 0c             	sub    esp,0xc
c001d1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1fb:	83 ec 04             	sub    esp,0x4
c001d1fe:	68 00 08 00 00       	push   0x800
c001d203:	68 18 1c 02 c0       	push   0xc0021c18
c001d208:	50                   	push   eax
c001d209:	e8 88 ef fe ff       	call   c000c196 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d20e:	83 c4 10             	add    esp,0x10
c001d211:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c001d216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d21a:	89 10                	mov    DWORD PTR [eax],edx
c001d21c:	90                   	nop
c001d21d:	83 c4 0c             	add    esp,0xc
c001d220:	c3                   	ret    
c001d221:	90                   	nop

c001d222 <SATAPI::diskRemoved()>:
c001d222:	c3                   	ret    
c001d223:	90                   	nop

c001d224 <SATAPI::diskInserted()>:
c001d224:	83 ec 18             	sub    esp,0x18
c001d227:	68 24 1c 02 c0       	push   0xc0021c24
c001d22c:	e8 65 d7 fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001d231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d235:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d23c:	83 c4 1c             	add    esp,0x1c
c001d23f:	c3                   	ret    

c001d240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d240:	55                   	push   ebp
c001d241:	57                   	push   edi
c001d242:	56                   	push   esi
c001d243:	53                   	push   ebx
c001d244:	83 ec 34             	sub    esp,0x34
c001d247:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d24b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d24f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d253:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d257:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d25b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d261:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d267:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d26b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d271:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d275:	83 c0 02             	add    eax,0x2
c001d278:	c1 e0 07             	shl    eax,0x7
c001d27b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d27f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d287:	c1 e0 07             	shl    eax,0x7
c001d28a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d28e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d292:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d29c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d2a0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d2a6:	e8 21 e5 ff ff       	call   c001b7cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d2ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2af:	83 c4 10             	add    esp,0x10
c001d2b2:	b8 01 00 00 00       	mov    eax,0x1
c001d2b7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d2bc:	0f 84 53 02 00 00    	je     c001d515 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d2c2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2ce:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d2d4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d2da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2de:	c1 e1 05             	shl    ecx,0x5
c001d2e1:	01 c8                	add    eax,ecx
c001d2e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d2e5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d2eb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d2f1:	89 08                	mov    DWORD PTR [eax],ecx
c001d2f3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2f9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d2ff:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d305:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d308:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d30b:	50                   	push   eax
c001d30c:	68 90 00 00 00       	push   0x90
c001d311:	6a 00                	push   0x0
c001d313:	53                   	push   ebx
c001d314:	e8 d7 31 fe ff       	call   c00004f0 <memset>
c001d319:	b9 0c 00 00 00       	mov    ecx,0xc
c001d31e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d322:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d324:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d32a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d32e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d334:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d338:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d33c:	48                   	dec    eax
c001d33d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d342:	89 c1                	mov    ecx,eax
c001d344:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d34a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d34f:	09 c8                	or     eax,ecx
c001d351:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d357:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d35d:	83 c8 80             	or     eax,0xffffff80
c001d360:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d366:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d369:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d36d:	25 00 7f 00 00       	and    eax,0x7f00
c001d372:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d376:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d37b:	66 89 03             	mov    WORD PTR [ebx],ax
c001d37e:	89 d0                	mov    eax,edx
c001d380:	c1 ea 18             	shr    edx,0x18
c001d383:	c1 e8 10             	shr    eax,0x10
c001d386:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d389:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d38c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d390:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d393:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d397:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d39a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d39e:	83 c4 10             	add    esp,0x10
c001d3a1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d3a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3a9:	31 c0                	xor    eax,eax
c001d3ab:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d3b1:	80 e1 88             	and    cl,0x88
c001d3b4:	74 0a                	je     c001d3c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d3b6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3bb:	74 0a                	je     c001d3c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d3bd:	40                   	inc    eax
c001d3be:	eb eb                	jmp    c001d3ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d3c0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3c5:	75 43                	jne    c001d40a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d3c7:	83 ec 0c             	sub    esp,0xc
c001d3ca:	68 3c 1c 02 c0       	push   0xc0021c3c
c001d3cf:	e8 c2 d5 fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001d3d4:	58                   	pop    eax
c001d3d5:	5a                   	pop    edx
c001d3d6:	68 51 1c 02 c0       	push   0xc0021c51
c001d3db:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d3e1:	e8 aa b6 fe ff       	call   c0008a90 <VgaText::puts(char const*)>
c001d3e6:	59                   	pop    ecx
c001d3e7:	5b                   	pop    ebx
c001d3e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3ec:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3f2:	e8 6f e4 ff ff       	call   c001b866 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d3f7:	5e                   	pop    esi
c001d3f8:	5f                   	pop    edi
c001d3f9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3fd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d403:	e8 3e e4 ff ff       	call   c001b846 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d408:	eb 48                	jmp    c001d452 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d40a:	be 01 00 00 00       	mov    esi,0x1
c001d40f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d413:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d417:	d3 e6                	shl    esi,cl
c001d419:	c1 e7 07             	shl    edi,0x7
c001d41c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d422:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d427:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d42b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d431:	85 c6                	test   esi,eax
c001d433:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d439:	0f 84 a3 00 00 00    	je     c001d4e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d43f:	0f ba e0 1e          	bt     eax,0x1e
c001d443:	73 1a                	jae    c001d45f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d445:	83 ec 0c             	sub    esp,0xc
c001d448:	68 63 1c 02 c0       	push   0xc0021c63
c001d44d:	e8 44 d5 fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001d452:	83 c4 10             	add    esp,0x10
c001d455:	b8 01 00 00 00       	mov    eax,0x1
c001d45a:	e9 b6 00 00 00       	jmp    c001d515 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d45f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d465:	83 f8 0d             	cmp    eax,0xd
c001d468:	77 0a                	ja     c001d474 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	68 c8 00 00 00       	push   0xc8
c001d472:	eb 28                	jmp    c001d49c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d474:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d47a:	83 f8 0d             	cmp    eax,0xd
c001d47d:	77 0a                	ja     c001d489 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d47f:	83 ec 0c             	sub    esp,0xc
c001d482:	68 58 02 00 00       	push   0x258
c001d487:	eb 13                	jmp    c001d49c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d489:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d48f:	83 f8 06             	cmp    eax,0x6
c001d492:	77 10                	ja     c001d4a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d494:	83 ec 0c             	sub    esp,0xc
c001d497:	68 dc 05 00 00       	push   0x5dc
c001d49c:	e8 b7 7e ff ff       	call   c0015358 <milliTenthSleep(unsigned int)>
c001d4a1:	83 c4 10             	add    esp,0x10
c001d4a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d4a8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d4ab:	75 06                	jne    c001d4b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d4ad:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d4b1:	74 15                	je     c001d4c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d4b3:	83 fb 06             	cmp    ebx,0x6
c001d4b6:	77 10                	ja     c001d4c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d4b8:	83 ec 0c             	sub    esp,0xc
c001d4bb:	68 c4 09 00 00       	push   0x9c4
c001d4c0:	e8 93 7e ff ff       	call   c0015358 <milliTenthSleep(unsigned int)>
c001d4c5:	83 c4 10             	add    esp,0x10
c001d4c8:	43                   	inc    ebx
c001d4c9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d4cf:	0f 85 56 ff ff ff    	jne    c001d42b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d4d5:	83 ec 0c             	sub    esp,0xc
c001d4d8:	68 76 1c 02 c0       	push   0xc0021c76
c001d4dd:	e9 6b ff ff ff       	jmp    c001d44d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d4e2:	0f ba e0 1e          	bt     eax,0x1e
c001d4e6:	73 0d                	jae    c001d4f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	68 8a 1c 02 c0       	push   0xc0021c8a
c001d4f0:	e9 58 ff ff ff       	jmp    c001d44d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d4f5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d4fa:	74 17                	je     c001d513 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d4fc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d501:	74 10                	je     c001d513 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d503:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d509:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d50d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d511:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d513:	31 c0                	xor    eax,eax
c001d515:	83 c4 2c             	add    esp,0x2c
c001d518:	5b                   	pop    ebx
c001d519:	5e                   	pop    esi
c001d51a:	5f                   	pop    edi
c001d51b:	5d                   	pop    ebp
c001d51c:	c3                   	ret    
c001d51d:	90                   	nop

c001d51e <SATAPI::eject()>:
c001d51e:	57                   	push   edi
c001d51f:	b9 03 00 00 00       	mov    ecx,0x3
c001d524:	83 ec 18             	sub    esp,0x18
c001d527:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d52b:	fc                   	cld    
c001d52c:	31 c0                	xor    eax,eax
c001d52e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d530:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d535:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d53a:	50                   	push   eax
c001d53b:	6a 00                	push   0x0
c001d53d:	6a 00                	push   0x0
c001d53f:	6a 00                	push   0x0
c001d541:	6a 00                	push   0x0
c001d543:	6a 02                	push   0x2
c001d545:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d549:	50                   	push   eax
c001d54a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d54e:	e8 ed fc ff ff       	call   c001d240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d553:	31 c0                	xor    eax,eax
c001d555:	83 c4 38             	add    esp,0x38
c001d558:	5f                   	pop    edi
c001d559:	c3                   	ret    

c001d55a <SATAPI::detectMedia()>:
c001d55a:	53                   	push   ebx
c001d55b:	83 ec 14             	sub    esp,0x14
c001d55e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d562:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d568:	e8 a7 05 ff ff       	call   c000db14 <VCache::writeWriteBuffer()>
c001d56d:	59                   	pop    ecx
c001d56e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d574:	e8 8b 05 ff ff       	call   c000db04 <VCache::invalidateReadBuffer()>
c001d579:	c7 04 24 9f 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c9f
c001d580:	e8 11 d4 fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001d585:	83 c4 10             	add    esp,0x10
c001d588:	31 c0                	xor    eax,eax
c001d58a:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d591:	85 d2                	test   edx,edx
c001d593:	74 0f                	je     c001d5a4 <SATAPI::detectMedia()+0x4a>
c001d595:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d59b:	75 07                	jne    c001d5a4 <SATAPI::detectMedia()+0x4a>
c001d59d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d5a4:	40                   	inc    eax
c001d5a5:	83 f8 1a             	cmp    eax,0x1a
c001d5a8:	75 e0                	jne    c001d58a <SATAPI::detectMedia()+0x30>
c001d5aa:	83 c4 08             	add    esp,0x8
c001d5ad:	5b                   	pop    ebx
c001d5ae:	c3                   	ret    
c001d5af:	90                   	nop

c001d5b0 <SATAPI::open(int, int, void*)>:
c001d5b0:	56                   	push   esi
c001d5b1:	53                   	push   ebx
c001d5b2:	51                   	push   ecx
c001d5b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5bb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5cb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5e9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5f0:	e8 be a7 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d5f5:	89 c6                	mov    esi,eax
c001d5f7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d5fd:	81 c6 00 10 00 00    	add    esi,0x1000
c001d603:	e8 ab a7 fe ff       	call   c0007db3 <Phys::allocatePage()>
c001d608:	39 c6                	cmp    esi,eax
c001d60a:	74 10                	je     c001d61c <SATAPI::open(int, int, void*)+0x6c>
c001d60c:	83 ec 0c             	sub    esp,0xc
c001d60f:	68 b4 1c 02 c0       	push   0xc0021cb4
c001d614:	e8 5a 32 ff ff       	call   c0010873 <KePanic(char const*)>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	83 ec 0c             	sub    esp,0xc
c001d61f:	6a 02                	push   0x2
c001d621:	e8 f7 bf fe ff       	call   c000961d <Virt::allocateKernelVirtualPages(int)>
c001d626:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d62c:	6a 03                	push   0x3
c001d62e:	50                   	push   eax
c001d62f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d635:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d63b:	e8 c4 c6 fe ff       	call   c0009d04 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d640:	83 c4 14             	add    esp,0x14
c001d643:	68 78 01 00 00       	push   0x178
c001d648:	e8 61 a4 fe ff       	call   c0007aae <malloc>
c001d64d:	83 c4 0c             	add    esp,0xc
c001d650:	89 c6                	mov    esi,eax
c001d652:	6a 00                	push   0x0
c001d654:	68 ff ff ff 7f       	push   0x7fffffff
c001d659:	6a 00                	push   0x0
c001d65b:	6a 00                	push   0x0
c001d65d:	53                   	push   ebx
c001d65e:	68 ca 1c 02 c0       	push   0xc0021cca
c001d663:	50                   	push   eax
c001d664:	e8 07 f9 fe ff       	call   c000cf70 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d669:	83 c4 14             	add    esp,0x14
c001d66c:	56                   	push   esi
c001d66d:	e8 be f9 fe ff       	call   c000d030 <LogicalDisk::assignDriveLetter()>
c001d672:	5a                   	pop    edx
c001d673:	0f be c0             	movsx  eax,al
c001d676:	59                   	pop    ecx
c001d677:	50                   	push   eax
c001d678:	68 1c 1b 02 c0       	push   0xc0021b1c
c001d67d:	e8 14 d3 fe ff       	call   c000a996 <Dbg::kprintf(char const*, ...)>
c001d682:	58                   	pop    eax
c001d683:	5a                   	pop    edx
c001d684:	56                   	push   esi
c001d685:	53                   	push   ebx
c001d686:	e8 3f e7 fe ff       	call   c000bdca <Device::addChild(Device*)>
c001d68b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d694:	e8 65 eb fe ff       	call   c000c1fe <PhysicalDisk::startCache()>
c001d699:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d6a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6a3:	e8 b2 fe ff ff       	call   c001d55a <SATAPI::detectMedia()>
c001d6a8:	83 c4 14             	add    esp,0x14
c001d6ab:	31 c0                	xor    eax,eax
c001d6ad:	5b                   	pop    ebx
c001d6ae:	5e                   	pop    esi
c001d6af:	c3                   	ret    

c001d6b0 <SATAPI::read(unsigned long long, int, void*)>:
c001d6b0:	57                   	push   edi
c001d6b1:	56                   	push   esi
c001d6b2:	53                   	push   ebx
c001d6b3:	83 ec 30             	sub    esp,0x30
c001d6b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d6ba:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d6be:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d6c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d6ce:	83 fe 04             	cmp    esi,0x4
c001d6d1:	7e 10                	jle    c001d6e3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d6d3:	83 ec 0c             	sub    esp,0xc
c001d6d6:	68 d8 1c 02 c0       	push   0xc0021cd8
c001d6db:	e8 93 31 ff ff       	call   c0010873 <KePanic(char const*)>
c001d6e0:	83 c4 10             	add    esp,0x10
c001d6e3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d6e9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6ef:	51                   	push   ecx
c001d6f0:	50                   	push   eax
c001d6f1:	83 c0 02             	add    eax,0x2
c001d6f4:	c1 e0 07             	shl    eax,0x7
c001d6f7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d6fd:	50                   	push   eax
c001d6fe:	52                   	push   edx
c001d6ff:	e8 8c e1 ff ff       	call   c001b890 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d704:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d708:	b9 03 00 00 00       	mov    ecx,0x3
c001d70d:	fc                   	cld    
c001d70e:	31 c0                	xor    eax,eax
c001d710:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d712:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d717:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d71c:	83 c4 0c             	add    esp,0xc
c001d71f:	6a 00                	push   0x0
c001d721:	6a 00                	push   0x0
c001d723:	6a 00                	push   0x0
c001d725:	6a 00                	push   0x0
c001d727:	6a 02                	push   0x2
c001d729:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d72d:	50                   	push   eax
c001d72e:	53                   	push   ebx
c001d72f:	e8 0c fb ff ff       	call   c001d240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d734:	83 c4 20             	add    esp,0x20
c001d737:	85 c0                	test   eax,eax
c001d739:	75 44                	jne    c001d77f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d73b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d73f:	b9 03 00 00 00       	mov    ecx,0x3
c001d744:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d74a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d74f:	0f c8                	bswap  eax
c001d751:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d755:	89 f0                	mov    eax,esi
c001d757:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d75b:	50                   	push   eax
c001d75c:	56                   	push   esi
c001d75d:	c1 e6 0b             	shl    esi,0xb
c001d760:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d76c:	56                   	push   esi
c001d76d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d771:	50                   	push   eax
c001d772:	53                   	push   ebx
c001d773:	e8 c8 fa ff ff       	call   c001d240 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d778:	83 c4 20             	add    esp,0x20
c001d77b:	85 c0                	test   eax,eax
c001d77d:	74 14                	je     c001d793 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d783:	83 ec 0c             	sub    esp,0xc
c001d786:	53                   	push   ebx
c001d787:	e8 ce fd ff ff       	call   c001d55a <SATAPI::detectMedia()>
c001d78c:	83 c4 10             	add    esp,0x10
c001d78f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d793:	83 c4 30             	add    esp,0x30
c001d796:	5b                   	pop    ebx
c001d797:	5e                   	pop    esi
c001d798:	5f                   	pop    edi
c001d799:	c3                   	ret    

c001d79a <IOAPIC::close(int, int, void*)>:
c001d79a:	b8 00 00 00 00       	mov    eax,0x0
c001d79f:	c3                   	ret    

c001d7a0 <apicGetBase()>:
c001d7a0:	55                   	push   ebp
c001d7a1:	89 e5                	mov    ebp,esp
c001d7a3:	83 ec 18             	sub    esp,0x18
c001d7a6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7ab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d7b1:	83 e0 08             	and    eax,0x8
c001d7b4:	0f b6 c0             	movzx  eax,al
c001d7b7:	85 c0                	test   eax,eax
c001d7b9:	75 07                	jne    c001d7c2 <apicGetBase()+0x22>
c001d7bb:	b8 00 00 00 00       	mov    eax,0x0
c001d7c0:	eb 21                	jmp    c001d7e3 <apicGetBase()+0x43>
c001d7c2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7c7:	83 ec 08             	sub    esp,0x8
c001d7ca:	6a 1b                	push   0x1b
c001d7cc:	50                   	push   eax
c001d7cd:	e8 e6 98 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001d7d2:	83 c4 10             	add    esp,0x10
c001d7d5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d7d8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d7db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d7de:	25 00 00 ff ff       	and    eax,0xffff0000
c001d7e3:	c9                   	leave  
c001d7e4:	c3                   	ret    
c001d7e5:	90                   	nop

c001d7e6 <IOAPIC::IOAPIC()>:
c001d7e6:	83 ec 0c             	sub    esp,0xc
c001d7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ed:	83 ec 08             	sub    esp,0x8
c001d7f0:	68 3c 1d 02 c0       	push   0xc0021d3c
c001d7f5:	50                   	push   eax
c001d7f6:	e8 67 e7 fe ff       	call   c000bf62 <Device::Device(char const*)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c001d803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d807:	89 10                	mov    DWORD PTR [eax],edx
c001d809:	90                   	nop
c001d80a:	83 c4 0c             	add    esp,0xc
c001d80d:	c3                   	ret    

c001d80e <apicOpen()>:
c001d80e:	55                   	push   ebp
c001d80f:	89 e5                	mov    ebp,esp
c001d811:	53                   	push   ebx
c001d812:	83 ec 34             	sub    esp,0x34
c001d815:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d81a:	83 f0 01             	xor    eax,0x1
c001d81d:	0f b6 c0             	movzx  eax,al
c001d820:	85 c0                	test   eax,eax
c001d822:	0f 84 a3 00 00 00    	je     c001d8cb <apicOpen()+0xbd>
c001d828:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d82c:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d831:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d835:	0f b6 c0             	movzx  eax,al
c001d838:	39 c2                	cmp    edx,eax
c001d83a:	0f 83 84 00 00 00    	jae    c001d8c4 <apicOpen()+0xb6>
c001d840:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d847:	83 ec 0c             	sub    esp,0xc
c001d84a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d84d:	e8 5c a2 fe ff       	call   c0007aae <malloc>
c001d852:	83 c4 10             	add    esp,0x10
c001d855:	89 c3                	mov    ebx,eax
c001d857:	83 ec 0c             	sub    esp,0xc
c001d85a:	53                   	push   ebx
c001d85b:	e8 86 ff ff ff       	call   c001d7e6 <IOAPIC::IOAPIC()>
c001d860:	83 c4 10             	add    esp,0x10
c001d863:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d866:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d86a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d86d:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d874:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d879:	83 c0 01             	add    eax,0x1
c001d87c:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d881:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d886:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d88c:	83 ec 08             	sub    esp,0x8
c001d88f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d892:	50                   	push   eax
c001d893:	e8 32 e5 fe ff       	call   c000bdca <Device::addChild(Device*)>
c001d898:	83 c4 10             	add    esp,0x10
c001d89b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d89e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8a0:	83 c0 08             	add    eax,0x8
c001d8a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8a5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8a9:	6a 00                	push   0x0
c001d8ab:	6a 00                	push   0x0
c001d8ad:	52                   	push   edx
c001d8ae:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8b1:	ff d0                	call   eax
c001d8b3:	83 c4 10             	add    esp,0x10
c001d8b6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d8b9:	83 c0 01             	add    eax,0x1
c001d8bc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d8bf:	e9 68 ff ff ff       	jmp    c001d82c <apicOpen()+0x1e>
c001d8c4:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d8cb:	e8 d0 fe ff ff       	call   c001d7a0 <apicGetBase()>
c001d8d0:	05 f0 00 00 00       	add    eax,0xf0
c001d8d5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d8d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8db:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8dd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d8e0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d8e7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d8ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8f1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8f4:	89 10                	mov    DWORD PTR [eax],edx
c001d8f6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d8fd:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d902:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d905:	7d 7c                	jge    c001d983 <apicOpen()+0x175>
c001d907:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d90a:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d911:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d914:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d917:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d91e:	c1 e8 08             	shr    eax,0x8
c001d921:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d925:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d928:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d92f:	c1 e8 18             	shr    eax,0x18
c001d932:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d935:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d939:	3d ff 00 00 00       	cmp    eax,0xff
c001d93e:	75 3a                	jne    c001d97a <apicOpen()+0x16c>
c001d940:	e8 5b fe ff ff       	call   c001d7a0 <apicGetBase()>
c001d945:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d949:	83 fa 01             	cmp    edx,0x1
c001d94c:	75 07                	jne    c001d955 <apicOpen()+0x147>
c001d94e:	ba 60 03 00 00       	mov    edx,0x360
c001d953:	eb 05                	jmp    c001d95a <apicOpen()+0x14c>
c001d955:	ba 50 03 00 00       	mov    edx,0x350
c001d95a:	01 d0                	add    eax,edx
c001d95c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d95f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d962:	8b 00                	mov    eax,DWORD PTR [eax]
c001d964:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d967:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d96e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d972:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d975:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d978:	89 10                	mov    DWORD PTR [eax],edx
c001d97a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d97e:	e9 7a ff ff ff       	jmp    c001d8fd <apicOpen()+0xef>
c001d983:	90                   	nop
c001d984:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d987:	c9                   	leave  
c001d988:	c3                   	ret    
c001d989:	90                   	nop

c001d98a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d98a:	55                   	push   ebp
c001d98b:	89 e5                	mov    ebp,esp
c001d98d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d990:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d996:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d999:	72 1d                	jb     c001d9b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d99b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d99e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9a7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9ad:	01 d0                	add    eax,edx
c001d9af:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9b2:	73 04                	jae    c001d9b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9b4:	b0 01                	mov    al,0x1
c001d9b6:	eb 02                	jmp    c001d9ba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d9b8:	b0 00                	mov    al,0x0
c001d9ba:	5d                   	pop    ebp
c001d9bb:	c3                   	ret    

c001d9bc <IOAPIC::read(int)>:
c001d9bc:	55                   	push   ebp
c001d9bd:	89 e5                	mov    ebp,esp
c001d9bf:	83 ec 10             	sub    esp,0x10
c001d9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9d1:	0f b6 d0             	movzx  edx,al
c001d9d4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9d7:	89 10                	mov    DWORD PTR [eax],edx
c001d9d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9dc:	83 c0 10             	add    eax,0x10
c001d9df:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9e1:	c9                   	leave  
c001d9e2:	c3                   	ret    
c001d9e3:	90                   	nop

c001d9e4 <IOAPIC::open(int, int, void*)>:
c001d9e4:	55                   	push   ebp
c001d9e5:	89 e5                	mov    ebp,esp
c001d9e7:	57                   	push   edi
c001d9e8:	56                   	push   esi
c001d9e9:	53                   	push   ebx
c001d9ea:	83 ec 04             	sub    esp,0x4
c001d9ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d9f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da02:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da0c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da1b:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da25:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da2e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da37:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da3d:	0f b6 f0             	movzx  esi,al
c001da40:	89 d0                	mov    eax,edx
c001da42:	ba 00 00 00 00       	mov    edx,0x0
c001da47:	89 c7                	mov    edi,eax
c001da49:	83 e7 ff             	and    edi,0xffffffff
c001da4c:	89 f9                	mov    ecx,edi
c001da4e:	0f b6 da             	movzx  ebx,dl
c001da51:	89 c8                	mov    eax,ecx
c001da53:	89 da                	mov    edx,ebx
c001da55:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da58:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da5b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da5f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001da63:	83 e0 00             	and    eax,0x0
c001da66:	09 d0                	or     eax,edx
c001da68:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001da6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da6f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da75:	8d 50 01             	lea    edx,[eax+0x1]
c001da78:	88 d1                	mov    cl,dl
c001da7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001da7d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001da83:	0f b6 d0             	movzx  edx,al
c001da86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da89:	83 c2 08             	add    edx,0x8
c001da8c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001da90:	0f b6 c9             	movzx  ecx,cl
c001da93:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001da99:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001da9d:	6a 01                	push   0x1
c001da9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001daa2:	e8 15 ff ff ff       	call   c001d9bc <IOAPIC::read(int)>
c001daa7:	83 c4 08             	add    esp,0x8
c001daaa:	c1 f8 10             	sar    eax,0x10
c001daad:	0f b6 c0             	movzx  eax,al
c001dab0:	8d 50 01             	lea    edx,[eax+0x1]
c001dab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dab6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001dabc:	b8 00 00 00 00       	mov    eax,0x0
c001dac1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001dac4:	5b                   	pop    ebx
c001dac5:	5e                   	pop    esi
c001dac6:	5f                   	pop    edi
c001dac7:	5d                   	pop    ebp
c001dac8:	c3                   	ret    
c001dac9:	90                   	nop

c001daca <IOAPIC::write(int, int)>:
c001daca:	55                   	push   ebp
c001dacb:	89 e5                	mov    ebp,esp
c001dacd:	83 ec 10             	sub    esp,0x10
c001dad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dad3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dad9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dadc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dadf:	0f b6 d0             	movzx  edx,al
c001dae2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dae5:	89 10                	mov    DWORD PTR [eax],edx
c001dae7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001daea:	8d 50 10             	lea    edx,[eax+0x10]
c001daed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001daf0:	89 02                	mov    DWORD PTR [edx],eax
c001daf2:	90                   	nop
c001daf3:	c9                   	leave  
c001daf4:	c3                   	ret    
c001daf5:	90                   	nop

c001daf6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001daf6:	55                   	push   ebp
c001daf7:	89 e5                	mov    ebp,esp
c001daf9:	53                   	push   ebx
c001dafa:	83 ec 2c             	sub    esp,0x2c
c001dafd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db00:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db03:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db06:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db09:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db0c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db0f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db12:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001db15:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001db18:	88 d8                	mov    al,bl
c001db1a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db1d:	88 c8                	mov    al,cl
c001db1f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db22:	88 d0                	mov    al,dl
c001db24:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db27:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db2b:	83 c0 08             	add    eax,0x8
c001db2e:	01 c0                	add    eax,eax
c001db30:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db33:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db37:	83 c0 08             	add    eax,0x8
c001db3a:	01 c0                	add    eax,eax
c001db3c:	83 c0 01             	add    eax,0x1
c001db3f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db45:	50                   	push   eax
c001db46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db49:	e8 6e fe ff ff       	call   c001d9bc <IOAPIC::read(int)>
c001db4e:	83 c4 08             	add    esp,0x8
c001db51:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db54:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db5b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db5e:	c1 e0 18             	shl    eax,0x18
c001db61:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001db64:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db67:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db6a:	52                   	push   edx
c001db6b:	50                   	push   eax
c001db6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db6f:	e8 56 ff ff ff       	call   c001daca <IOAPIC::write(int, int)>
c001db74:	83 c4 0c             	add    esp,0xc
c001db77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db7a:	50                   	push   eax
c001db7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db7e:	e8 39 fe ff ff       	call   c001d9bc <IOAPIC::read(int)>
c001db83:	83 c4 08             	add    esp,0x8
c001db86:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001db89:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001db90:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001db97:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001db9e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dba2:	85 c0                	test   eax,eax
c001dba4:	74 09                	je     c001dbaf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dba6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dbad:	eb 07                	jmp    c001dbb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dbaf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dbb6:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dbba:	85 c0                	test   eax,eax
c001dbbc:	74 09                	je     c001dbc7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dbbe:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dbc5:	eb 07                	jmp    c001dbce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dbc7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dbce:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dbd5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dbd9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dbdc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dbdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbe2:	52                   	push   edx
c001dbe3:	50                   	push   eax
c001dbe4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbe7:	e8 de fe ff ff       	call   c001daca <IOAPIC::write(int, int)>
c001dbec:	83 c4 0c             	add    esp,0xc
c001dbef:	90                   	nop
c001dbf0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dbf3:	c9                   	leave  
c001dbf4:	c3                   	ret    
c001dbf5:	66 90                	xchg   ax,ax
c001dbf7:	90                   	nop

c001dbf8 <APICTimer::close(int, int, void*)>:
c001dbf8:	b8 00 00 00 00       	mov    eax,0x0
c001dbfd:	c3                   	ret    
c001dbfe:	66 90                	xchg   ax,ax

c001dc00 <apicTimerHandler(regs*, void*)>:
c001dc00:	83 ec 0c             	sub    esp,0xc
c001dc03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc07:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc09:	b8 10 27 00 00       	mov    eax,0x2710
c001dc0e:	ba 00 00 00 00       	mov    edx,0x0
c001dc13:	f7 f1                	div    ecx
c001dc15:	83 ec 0c             	sub    esp,0xc
c001dc18:	50                   	push   eax
c001dc19:	e8 0e fc fe ff       	call   c000d82c <timerHandler(unsigned int)>
c001dc1e:	83 c4 10             	add    esp,0x10
c001dc21:	90                   	nop
c001dc22:	83 c4 0c             	add    esp,0xc
c001dc25:	c3                   	ret    
c001dc26:	66 90                	xchg   ax,ax

c001dc28 <APICTimer::open(int, int, void*)>:
c001dc28:	83 ec 0c             	sub    esp,0xc
c001dc2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc31:	83 c0 24             	add    eax,0x24
c001dc34:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc36:	83 ec 08             	sub    esp,0x8
c001dc39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc41:	ff d0                	call   eax
c001dc43:	83 c4 10             	add    esp,0x10
c001dc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc4e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc5c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc66:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc6c:	83 ec 0c             	sub    esp,0xc
c001dc6f:	51                   	push   ecx
c001dc70:	6a 01                	push   0x1
c001dc72:	68 00 dc 01 c0       	push   0xc001dc00
c001dc77:	52                   	push   edx
c001dc78:	50                   	push   eax
c001dc79:	e8 f8 e0 fe ff       	call   c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc7e:	83 c4 20             	add    esp,0x20
c001dc81:	89 c2                	mov    edx,eax
c001dc83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc87:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc8d:	b8 00 00 00 00       	mov    eax,0x0
c001dc92:	83 c4 0c             	add    esp,0xc
c001dc95:	c3                   	ret    
c001dc96:	66 90                	xchg   ax,ax

c001dc98 <APICTimer::write(int)>:
c001dc98:	83 ec 0c             	sub    esp,0xc
c001dc9b:	83 ec 0c             	sub    esp,0xc
c001dc9e:	68 70 1d 02 c0       	push   0xc0021d70
c001dca3:	e8 cb 2b ff ff       	call   c0010873 <KePanic(char const*)>
c001dca8:	83 c4 10             	add    esp,0x10
c001dcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcb3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcb9:	90                   	nop
c001dcba:	83 c4 0c             	add    esp,0xc
c001dcbd:	c3                   	ret    
c001dcbe:	66 90                	xchg   ax,ax

c001dcc0 <APICTimer::APICTimer()>:
c001dcc0:	83 ec 0c             	sub    esp,0xc
c001dcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc7:	83 ec 08             	sub    esp,0x8
c001dcca:	68 80 1d 02 c0       	push   0xc0021d80
c001dccf:	50                   	push   eax
c001dcd0:	e8 8b fa fe ff       	call   c000d760 <Timer::Timer(char const*)>
c001dcd5:	83 c4 10             	add    esp,0x10
c001dcd8:	ba 94 1d 02 c0       	mov    edx,0xc0021d94
c001dcdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce1:	89 10                	mov    DWORD PTR [eax],edx
c001dce3:	90                   	nop
c001dce4:	83 c4 0c             	add    esp,0xc
c001dce7:	c3                   	ret    

c001dce8 <PIT::write(int)>:
c001dce8:	83 ec 10             	sub    esp,0x10
c001dceb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcf3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcfd:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd02:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd07:	89 c2                	mov    edx,eax
c001dd09:	c1 fa 1f             	sar    edx,0x1f
c001dd0c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd14:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd1b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd20:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd24:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd29:	ee                   	out    dx,al
c001dd2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd2e:	0f b6 c0             	movzx  eax,al
c001dd31:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd38:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd3c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd40:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd45:	ee                   	out    dx,al
c001dd46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd4a:	c1 f8 08             	sar    eax,0x8
c001dd4d:	0f b6 c0             	movzx  eax,al
c001dd50:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd57:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd5b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd5f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd64:	ee                   	out    dx,al
c001dd65:	90                   	nop
c001dd66:	83 c4 10             	add    esp,0x10
c001dd69:	c3                   	ret    
c001dd6a:	66 90                	xchg   ax,ax

c001dd6c <pitHandler(regs*, void*)>:
c001dd6c:	83 ec 0c             	sub    esp,0xc
c001dd6f:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dd75:	b8 10 27 00 00       	mov    eax,0x2710
c001dd7a:	89 c2                	mov    edx,eax
c001dd7c:	c1 fa 1f             	sar    edx,0x1f
c001dd7f:	f7 f9                	idiv   ecx
c001dd81:	83 ec 0c             	sub    esp,0xc
c001dd84:	50                   	push   eax
c001dd85:	e8 a2 fa fe ff       	call   c000d82c <timerHandler(unsigned int)>
c001dd8a:	83 c4 10             	add    esp,0x10
c001dd8d:	90                   	nop
c001dd8e:	83 c4 0c             	add    esp,0xc
c001dd91:	c3                   	ret    
c001dd92:	66 90                	xchg   ax,ax

c001dd94 <PIT::open(int, int, void*)>:
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd9d:	83 c0 24             	add    eax,0x24
c001dda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dda2:	83 ec 08             	sub    esp,0x8
c001dda5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dda9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddad:	ff d0                	call   eax
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb6:	83 ec 0c             	sub    esp,0xc
c001ddb9:	6a 00                	push   0x0
c001ddbb:	6a 01                	push   0x1
c001ddbd:	68 6c dd 01 c0       	push   0xc001dd6c
c001ddc2:	6a 00                	push   0x0
c001ddc4:	50                   	push   eax
c001ddc5:	e8 ac df fe ff       	call   c000bd76 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ddca:	83 c4 20             	add    esp,0x20
c001ddcd:	89 c2                	mov    edx,eax
c001ddcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ddd9:	b8 00 00 00 00       	mov    eax,0x0
c001ddde:	83 c4 0c             	add    esp,0xc
c001dde1:	c3                   	ret    
c001dde2:	66 90                	xchg   ax,ax

c001dde4 <PIT::close(int, int, void*)>:
c001dde4:	83 ec 0c             	sub    esp,0xc
c001dde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddeb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ddf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf9:	6a 01                	push   0x1
c001ddfb:	68 6c dd 01 c0       	push   0xc001dd6c
c001de00:	6a 00                	push   0x0
c001de02:	50                   	push   eax
c001de03:	e8 a4 df fe ff       	call   c000bdac <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de08:	83 c4 10             	add    esp,0x10
c001de0b:	b8 00 00 00 00       	mov    eax,0x0
c001de10:	83 c4 0c             	add    esp,0xc
c001de13:	c3                   	ret    

c001de14 <PIT::PIT()>:
c001de14:	83 ec 0c             	sub    esp,0xc
c001de17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1b:	83 ec 08             	sub    esp,0x8
c001de1e:	68 bc 1d 02 c0       	push   0xc0021dbc
c001de23:	50                   	push   eax
c001de24:	e8 37 f9 fe ff       	call   c000d760 <Timer::Timer(char const*)>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c001de31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de35:	89 10                	mov    DWORD PTR [eax],edx
c001de37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de41:	0f b6 d0             	movzx  edx,al
c001de44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de48:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de59:	0f b6 d0             	movzx  edx,al
c001de5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de60:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001de65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de6f:	8d 50 01             	lea    edx,[eax+0x1]
c001de72:	88 d1                	mov    cl,dl
c001de74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de78:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001de7e:	0f b6 d0             	movzx  edx,al
c001de81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de85:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001de89:	83 e1 3f             	and    ecx,0x3f
c001de8c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001de90:	90                   	nop
c001de91:	83 c4 0c             	add    esp,0xc
c001de94:	c3                   	ret    
c001de95:	66 90                	xchg   ax,ax
c001de97:	66 90                	xchg   ax,ax
c001de99:	66 90                	xchg   ax,ax
c001de9b:	66 90                	xchg   ax,ax
c001de9d:	66 90                	xchg   ax,ax
c001de9f:	90                   	nop

c001dea0 <avxDetect>:
c001dea0:	b8 01 00 00 00       	mov    eax,0x1
c001dea5:	0f a2                	cpuid  
c001dea7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001dead:	74 15                	je     c001dec4 <avxDetect.noAVX>
c001deaf:	b8 01 00 00 00       	mov    eax,0x1
c001deb4:	0f a2                	cpuid  
c001deb6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001debc:	74 06                	je     c001dec4 <avxDetect.noAVX>
c001debe:	b8 01 00 00 00       	mov    eax,0x1
c001dec3:	c3                   	ret    

c001dec4 <avxDetect.noAVX>:
c001dec4:	b8 00 00 00 00       	mov    eax,0x0
c001dec9:	c3                   	ret    

c001deca <avxSave>:
c001deca:	53                   	push   ebx
c001decb:	52                   	push   edx
c001decc:	31 c0                	xor    eax,eax
c001dece:	48                   	dec    eax
c001decf:	89 c2                	mov    edx,eax
c001ded1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ded5:	0f ae 23             	xsave  [ebx]
c001ded8:	5a                   	pop    edx
c001ded9:	5b                   	pop    ebx
c001deda:	c3                   	ret    

c001dedb <avxLoad>:
c001dedb:	53                   	push   ebx
c001dedc:	52                   	push   edx
c001dedd:	31 c0                	xor    eax,eax
c001dedf:	48                   	dec    eax
c001dee0:	89 c2                	mov    edx,eax
c001dee2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dee6:	0f ae 2b             	xrstor [ebx]
c001dee9:	5a                   	pop    edx
c001deea:	5b                   	pop    ebx
c001deeb:	c3                   	ret    

c001deec <avxInit>:
c001deec:	e8 67 03 00 00       	call   c001e258 <sseInit>
c001def1:	50                   	push   eax
c001def2:	51                   	push   ecx
c001def3:	0f 20 e0             	mov    eax,cr4
c001def6:	0d 00 00 04 00       	or     eax,0x40000
c001defb:	0f 22 e0             	mov    cr4,eax
c001defe:	31 c9                	xor    ecx,ecx
c001df00:	0f 01 d0             	xgetbv 
c001df03:	0d 07 00 00 00       	or     eax,0x7
c001df08:	0f 01 d1             	xsetbv 
c001df0b:	59                   	pop    ecx
c001df0c:	58                   	pop    eax
c001df0d:	c3                   	ret    

c001df0e <avxClose>:
c001df0e:	c3                   	ret    

c001df0f <wouldSheSayYes>:
c001df0f:	c3                   	ret    
c001df10:	49                   	dec    ecx
c001df11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001df15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001df19:	75 20                	jne    c001df3b <isr0+0xb>
c001df1b:	4e                   	dec    esi
c001df1c:	79 61                	jns    c001df7f <isr7+0x3>
c001df1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df23:	66 90                	xchg   ax,ax
c001df25:	66 90                	xchg   ax,ax
c001df27:	66 90                	xchg   ax,ax
c001df29:	66 90                	xchg   ax,ax
c001df2b:	66 90                	xchg   ax,ax
c001df2d:	66 90                	xchg   ax,ax
c001df2f:	90                   	nop

c001df30 <isr0>:
c001df30:	fa                   	cli    
c001df31:	68 00 00 00 00       	push   0x0
c001df36:	68 00 00 00 00       	push   0x0
c001df3b:	e9 56 01 00 00       	jmp    c001e096 <int_common_stub>

c001df40 <isr1>:
c001df40:	fa                   	cli    
c001df41:	6a 00                	push   0x0
c001df43:	6a 01                	push   0x1
c001df45:	e9 4c 01 00 00       	jmp    c001e096 <int_common_stub>

c001df4a <isr2>:
c001df4a:	fa                   	cli    
c001df4b:	6a 00                	push   0x0
c001df4d:	6a 02                	push   0x2
c001df4f:	e9 42 01 00 00       	jmp    c001e096 <int_common_stub>

c001df54 <isr3>:
c001df54:	fa                   	cli    
c001df55:	6a 00                	push   0x0
c001df57:	6a 03                	push   0x3
c001df59:	e9 38 01 00 00       	jmp    c001e096 <int_common_stub>

c001df5e <isr4>:
c001df5e:	fa                   	cli    
c001df5f:	6a 00                	push   0x0
c001df61:	6a 04                	push   0x4
c001df63:	e9 2e 01 00 00       	jmp    c001e096 <int_common_stub>

c001df68 <isr5>:
c001df68:	fa                   	cli    
c001df69:	6a 00                	push   0x0
c001df6b:	6a 05                	push   0x5
c001df6d:	e9 24 01 00 00       	jmp    c001e096 <int_common_stub>

c001df72 <isr6>:
c001df72:	fa                   	cli    
c001df73:	6a 00                	push   0x0
c001df75:	6a 06                	push   0x6
c001df77:	e9 1a 01 00 00       	jmp    c001e096 <int_common_stub>

c001df7c <isr7>:
c001df7c:	fa                   	cli    
c001df7d:	6a 00                	push   0x0
c001df7f:	6a 07                	push   0x7
c001df81:	e9 10 01 00 00       	jmp    c001e096 <int_common_stub>

c001df86 <isr8>:
c001df86:	fa                   	cli    
c001df87:	6a 08                	push   0x8
c001df89:	e9 08 01 00 00       	jmp    c001e096 <int_common_stub>

c001df8e <isr9>:
c001df8e:	fa                   	cli    
c001df8f:	6a 00                	push   0x0
c001df91:	6a 09                	push   0x9
c001df93:	e9 fe 00 00 00       	jmp    c001e096 <int_common_stub>

c001df98 <isr10>:
c001df98:	fa                   	cli    
c001df99:	6a 0a                	push   0xa
c001df9b:	e9 f6 00 00 00       	jmp    c001e096 <int_common_stub>

c001dfa0 <isr11>:
c001dfa0:	fa                   	cli    
c001dfa1:	6a 0b                	push   0xb
c001dfa3:	e9 ee 00 00 00       	jmp    c001e096 <int_common_stub>

c001dfa8 <isr12>:
c001dfa8:	fa                   	cli    
c001dfa9:	6a 0c                	push   0xc
c001dfab:	e9 e6 00 00 00       	jmp    c001e096 <int_common_stub>

c001dfb0 <isr13>:
c001dfb0:	fa                   	cli    
c001dfb1:	6a 0d                	push   0xd
c001dfb3:	53                   	push   ebx
c001dfb4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfb8:	81 fb 86 e1 01 c0    	cmp    ebx,0xc001e186
c001dfbe:	5b                   	pop    ebx
c001dfbf:	0f 84 c3 01 00 00    	je     c001e188 <finishSignal2>
c001dfc5:	e9 cc 00 00 00       	jmp    c001e096 <int_common_stub>

c001dfca <isr14>:
c001dfca:	fa                   	cli    
c001dfcb:	6a 0e                	push   0xe
c001dfcd:	e9 c4 00 00 00       	jmp    c001e096 <int_common_stub>

c001dfd2 <isr15>:
c001dfd2:	fa                   	cli    
c001dfd3:	6a 00                	push   0x0
c001dfd5:	6a 0f                	push   0xf
c001dfd7:	e9 ba 00 00 00       	jmp    c001e096 <int_common_stub>

c001dfdc <isr16>:
c001dfdc:	fa                   	cli    
c001dfdd:	6a 00                	push   0x0
c001dfdf:	6a 10                	push   0x10
c001dfe1:	e9 b0 00 00 00       	jmp    c001e096 <int_common_stub>

c001dfe6 <isr17>:
c001dfe6:	fa                   	cli    
c001dfe7:	6a 00                	push   0x0
c001dfe9:	6a 11                	push   0x11
c001dfeb:	e9 a6 00 00 00       	jmp    c001e096 <int_common_stub>

c001dff0 <isr18>:
c001dff0:	fa                   	cli    
c001dff1:	6a 00                	push   0x0
c001dff3:	6a 12                	push   0x12
c001dff5:	e9 9c 00 00 00       	jmp    c001e096 <int_common_stub>

c001dffa <irq3>:
c001dffa:	fa                   	cli    
c001dffb:	6a 00                	push   0x0
c001dffd:	6a 23                	push   0x23
c001dfff:	e9 92 00 00 00       	jmp    c001e096 <int_common_stub>

c001e004 <irq4>:
c001e004:	fa                   	cli    
c001e005:	6a 00                	push   0x0
c001e007:	6a 24                	push   0x24
c001e009:	e9 88 00 00 00       	jmp    c001e096 <int_common_stub>

c001e00e <irq5>:
c001e00e:	fa                   	cli    
c001e00f:	6a 00                	push   0x0
c001e011:	6a 25                	push   0x25
c001e013:	e9 7e 00 00 00       	jmp    c001e096 <int_common_stub>

c001e018 <irq6>:
c001e018:	fa                   	cli    
c001e019:	6a 00                	push   0x0
c001e01b:	6a 26                	push   0x26
c001e01d:	e9 74 00 00 00       	jmp    c001e096 <int_common_stub>

c001e022 <irq7>:
c001e022:	fa                   	cli    
c001e023:	6a 00                	push   0x0
c001e025:	6a 27                	push   0x27
c001e027:	e9 6a 00 00 00       	jmp    c001e096 <int_common_stub>

c001e02c <irq8>:
c001e02c:	fa                   	cli    
c001e02d:	6a 00                	push   0x0
c001e02f:	6a 28                	push   0x28
c001e031:	e9 60 00 00 00       	jmp    c001e096 <int_common_stub>

c001e036 <irq9>:
c001e036:	fa                   	cli    
c001e037:	6a 00                	push   0x0
c001e039:	6a 29                	push   0x29
c001e03b:	e9 56 00 00 00       	jmp    c001e096 <int_common_stub>

c001e040 <irq10>:
c001e040:	fa                   	cli    
c001e041:	6a 00                	push   0x0
c001e043:	6a 2a                	push   0x2a
c001e045:	e9 4c 00 00 00       	jmp    c001e096 <int_common_stub>

c001e04a <irq11>:
c001e04a:	fa                   	cli    
c001e04b:	6a 00                	push   0x0
c001e04d:	6a 2b                	push   0x2b
c001e04f:	e9 42 00 00 00       	jmp    c001e096 <int_common_stub>

c001e054 <irq12>:
c001e054:	fa                   	cli    
c001e055:	6a 00                	push   0x0
c001e057:	6a 2c                	push   0x2c
c001e059:	e9 38 00 00 00       	jmp    c001e096 <int_common_stub>

c001e05e <irq13>:
c001e05e:	fa                   	cli    
c001e05f:	6a 00                	push   0x0
c001e061:	6a 2d                	push   0x2d
c001e063:	e9 2e 00 00 00       	jmp    c001e096 <int_common_stub>

c001e068 <irq14>:
c001e068:	fa                   	cli    
c001e069:	6a 00                	push   0x0
c001e06b:	6a 2e                	push   0x2e
c001e06d:	e9 24 00 00 00       	jmp    c001e096 <int_common_stub>

c001e072 <irq15>:
c001e072:	fa                   	cli    
c001e073:	6a 00                	push   0x0
c001e075:	6a 2f                	push   0x2f
c001e077:	e9 1a 00 00 00       	jmp    c001e096 <int_common_stub>

c001e07c <irq1>:
c001e07c:	fa                   	cli    
c001e07d:	6a 00                	push   0x0
c001e07f:	6a 21                	push   0x21
c001e081:	eb 13                	jmp    c001e096 <int_common_stub>

c001e083 <irq2>:
c001e083:	fa                   	cli    
c001e084:	6a 00                	push   0x0
c001e086:	6a 22                	push   0x22
c001e088:	eb 0c                	jmp    c001e096 <int_common_stub>

c001e08a <isr96>:
c001e08a:	6a 00                	push   0x0
c001e08c:	6a 60                	push   0x60
c001e08e:	fb                   	sti    
c001e08f:	eb 37                	jmp    c001e0c8 <syscall_common_stub>

c001e091 <irq0>:
c001e091:	fa                   	cli    
c001e092:	6a 00                	push   0x0
c001e094:	6a 20                	push   0x20

c001e096 <int_common_stub>:
c001e096:	60                   	pusha  
c001e097:	1e                   	push   ds
c001e098:	06                   	push   es
c001e099:	0f a0                	push   fs
c001e09b:	0f a8                	push   gs
c001e09d:	66 b8 10 00          	mov    ax,0x10
c001e0a1:	66 8e d8             	mov    ds,ax
c001e0a4:	66 8e c0             	mov    es,ax
c001e0a7:	66 8e e0             	mov    fs,ax
c001e0aa:	66 8e e8             	mov    gs,ax
c001e0ad:	54                   	push   esp
c001e0ae:	fc                   	cld    
c001e0af:	e8 c0 e1 fe ff       	call   c000c274 <int_handler>
c001e0b4:	81 c4 04 00 00 00    	add    esp,0x4
c001e0ba:	0f a9                	pop    gs
c001e0bc:	0f a1                	pop    fs
c001e0be:	07                   	pop    es
c001e0bf:	1f                   	pop    ds
c001e0c0:	61                   	popa   
c001e0c1:	81 c4 08 00 00 00    	add    esp,0x8
c001e0c7:	cf                   	iret   

c001e0c8 <syscall_common_stub>:
c001e0c8:	60                   	pusha  
c001e0c9:	1e                   	push   ds
c001e0ca:	06                   	push   es
c001e0cb:	0f a0                	push   fs
c001e0cd:	0f a8                	push   gs
c001e0cf:	66 b8 10 00          	mov    ax,0x10
c001e0d3:	66 8e d8             	mov    ds,ax
c001e0d6:	66 8e c0             	mov    es,ax
c001e0d9:	66 8e e0             	mov    fs,ax
c001e0dc:	66 8e e8             	mov    gs,ax
c001e0df:	54                   	push   esp
c001e0e0:	fc                   	cld    
c001e0e1:	e8 8e e1 fe ff       	call   c000c274 <int_handler>
c001e0e6:	81 c4 04 00 00 00    	add    esp,0x4
c001e0ec:	0f a9                	pop    gs
c001e0ee:	0f a1                	pop    fs
c001e0f0:	07                   	pop    es
c001e0f1:	1f                   	pop    ds
c001e0f2:	e8 84 2d ff ff       	call   c0010e7b <KiCheckSignalZ>
c001e0f7:	3d 00 00 00 00       	cmp    eax,0x0
c001e0fc:	0f 84 c0 00 00 00    	je     c001e1c2 <skipSignals>
c001e102:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e107:	61                   	popa   
c001e108:	53                   	push   ebx
c001e109:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e10f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e112:	5b                   	pop    ebx
c001e113:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e118:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e11b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e11e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e121:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e124:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e127:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e12a:	81 c4 08 00 00 00    	add    esp,0x8
c001e130:	5e                   	pop    esi
c001e131:	5b                   	pop    ebx
c001e132:	59                   	pop    ecx
c001e133:	5a                   	pop    edx
c001e134:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e137:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e13a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e13d:	52                   	push   edx
c001e13e:	51                   	push   ecx
c001e13f:	53                   	push   ebx
c001e140:	56                   	push   esi
c001e141:	81 ec 08 00 00 00    	sub    esp,0x8
c001e147:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e14a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e14d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e150:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e153:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e156:	60                   	pusha  
c001e157:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e15d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e160:	89 e3                	mov    ebx,esp
c001e162:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e165:	52                   	push   edx
c001e166:	68 86 e1 01 c0       	push   0xc001e186
c001e16b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e16e:	89 dc                	mov    esp,ebx
c001e170:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e173:	68 23 00 00 00       	push   0x23
c001e178:	51                   	push   ecx
c001e179:	68 02 02 00 00       	push   0x202
c001e17e:	68 1b 00 00 00       	push   0x1b
c001e183:	ff 36                	push   DWORD PTR [esi]
c001e185:	cf                   	iret   

c001e186 <finishSignal>:
c001e186:	cd 0f                	int    0xf

c001e188 <finishSignal2>:
c001e188:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e18e:	e8 65 2d ff ff       	call   c0010ef8 <KiFinishSignalZ>
c001e193:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e199:	68 23 00 00 00       	push   0x23
c001e19e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e1a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e1a4:	68 1b 00 00 00       	push   0x1b
c001e1a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e1ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e1af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e1b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e1b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e1b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e1bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e1be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e1c1:	cf                   	iret   

c001e1c2 <skipSignals>:
c001e1c2:	61                   	popa   
c001e1c3:	81 c4 08 00 00 00    	add    esp,0x8
c001e1c9:	cf                   	iret   
c001e1ca:	90                   	nop
c001e1cb:	90                   	nop

c001e1cc <irq16>:
c001e1cc:	fa                   	cli    
c001e1cd:	6a 00                	push   0x0
c001e1cf:	6a 30                	push   0x30
c001e1d1:	e9 c0 fe ff ff       	jmp    c001e096 <int_common_stub>

c001e1d6 <irq17>:
c001e1d6:	fa                   	cli    
c001e1d7:	6a 00                	push   0x0
c001e1d9:	6a 31                	push   0x31
c001e1db:	e9 b6 fe ff ff       	jmp    c001e096 <int_common_stub>

c001e1e0 <irq18>:
c001e1e0:	fa                   	cli    
c001e1e1:	6a 00                	push   0x0
c001e1e3:	6a 32                	push   0x32
c001e1e5:	e9 ac fe ff ff       	jmp    c001e096 <int_common_stub>

c001e1ea <irq19>:
c001e1ea:	fa                   	cli    
c001e1eb:	6a 00                	push   0x0
c001e1ed:	6a 33                	push   0x33
c001e1ef:	e9 a2 fe ff ff       	jmp    c001e096 <int_common_stub>

c001e1f4 <irq20>:
c001e1f4:	fa                   	cli    
c001e1f5:	6a 00                	push   0x0
c001e1f7:	6a 34                	push   0x34
c001e1f9:	e9 98 fe ff ff       	jmp    c001e096 <int_common_stub>

c001e1fe <irq21>:
c001e1fe:	fa                   	cli    
c001e1ff:	6a 00                	push   0x0
c001e201:	6a 35                	push   0x35
c001e203:	e9 8e fe ff ff       	jmp    c001e096 <int_common_stub>

c001e208 <irq22>:
c001e208:	fa                   	cli    
c001e209:	6a 00                	push   0x0
c001e20b:	6a 36                	push   0x36
c001e20d:	e9 84 fe ff ff       	jmp    c001e096 <int_common_stub>

c001e212 <irq23>:
c001e212:	fa                   	cli    
c001e213:	6a 00                	push   0x0
c001e215:	6a 37                	push   0x37
c001e217:	e9 7a fe ff ff       	jmp    c001e096 <int_common_stub>
c001e21c:	66 90                	xchg   ax,ax
c001e21e:	66 90                	xchg   ax,ax

c001e220 <i386GetRDRAND>:
c001e220:	b9 64 00 00 00       	mov    ecx,0x64

c001e225 <retry>:
c001e225:	0f c7 f0             	rdrand eax
c001e228:	72 05                	jb     c001e22f <retry.done>
c001e22a:	e2 f9                	loop   c001e225 <retry>

c001e22c <retry.fail>:
c001e22c:	31 c0                	xor    eax,eax
c001e22e:	c3                   	ret    

c001e22f <retry.done>:
c001e22f:	c3                   	ret    

c001e230 <absolutelyNoChanceInHell>:
c001e230:	b8 01 00 00 00       	mov    eax,0x1
c001e235:	0f a2                	cpuid  
c001e237:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e23d:	74 06                	je     c001e245 <sseDetect.noSSE>
c001e23f:	b8 01 00 00 00       	mov    eax,0x1
c001e244:	c3                   	ret    

c001e245 <sseDetect.noSSE>:
c001e245:	31 c0                	xor    eax,eax
c001e247:	c3                   	ret    

c001e248 <sseSave>:
c001e248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e24c:	0f ae 00             	fxsave [eax]
c001e24f:	c3                   	ret    

c001e250 <sseLoad>:
c001e250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e254:	0f ae 08             	fxrstor [eax]
c001e257:	c3                   	ret    

c001e258 <sseInit>:
c001e258:	e8 42 00 00 00       	call   c001e29f <x87Init>
c001e25d:	0f 20 e0             	mov    eax,cr4
c001e260:	66 0d 00 06          	or     ax,0x600
c001e264:	0f 22 e0             	mov    cr4,eax
c001e267:	c3                   	ret    

c001e268 <sseClose>:
c001e268:	c3                   	ret    
c001e269:	66 90                	xchg   ax,ax
c001e26b:	66 90                	xchg   ax,ax
c001e26d:	66 90                	xchg   ax,ax
c001e26f:	90                   	nop

c001e270 <value_37F>:
c001e270:	7f 03                	jg     c001e275 <value_37A+0x1>

c001e272 <value_37E>:
c001e272:	7e 03                	jle    c001e277 <x87Detect+0x1>

c001e274 <value_37A>:
c001e274:	7a 03                	jp     c001e279 <x87Detect+0x3>

c001e276 <x87Detect>:
c001e276:	b8 01 00 00 00       	mov    eax,0x1
c001e27b:	0f a2                	cpuid  
c001e27d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e283:	74 06                	je     c001e28b <x87Detect.nox87>
c001e285:	b8 01 00 00 00       	mov    eax,0x1
c001e28a:	c3                   	ret    

c001e28b <x87Detect.nox87>:
c001e28b:	b8 00 00 00 00       	mov    eax,0x0
c001e290:	c3                   	ret    

c001e291 <x87Save>:
c001e291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e295:	dd 30                	fnsave [eax]
c001e297:	c3                   	ret    

c001e298 <x87Load>:
c001e298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e29c:	dd 20                	frstor [eax]
c001e29e:	c3                   	ret    

c001e29f <x87Init>:
c001e29f:	0f 20 c0             	mov    eax,cr0
c001e2a2:	66 25 fb ff          	and    ax,0xfffb
c001e2a6:	66 0d 22 00          	or     ax,0x22
c001e2aa:	0f 22 c0             	mov    cr0,eax
c001e2ad:	db e3                	fninit 
c001e2af:	0f 06                	clts   
c001e2b1:	d9 2d 74 e2 01 c0    	fldcw  WORD PTR ds:0xc001e274
c001e2b7:	c3                   	ret    

c001e2b8 <x87Close>:
c001e2b8:	c3                   	ret    
c001e2b9:	66 90                	xchg   ax,ax
c001e2bb:	90                   	nop

c001e2bc <__do_global_ctors_aux>:
c001e2bc:	a1 70 f2 01 c0       	mov    eax,ds:0xc001f270
c001e2c1:	83 f8 ff             	cmp    eax,0xffffffff
c001e2c4:	74 1a                	je     c001e2e0 <__do_global_ctors_aux+0x24>
c001e2c6:	55                   	push   ebp
c001e2c7:	89 e5                	mov    ebp,esp
c001e2c9:	53                   	push   ebx
c001e2ca:	52                   	push   edx
c001e2cb:	bb 70 f2 01 c0       	mov    ebx,0xc001f270
c001e2d0:	ff d0                	call   eax
c001e2d2:	83 eb 04             	sub    ebx,0x4
c001e2d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2d7:	83 f8 ff             	cmp    eax,0xffffffff
c001e2da:	75 f4                	jne    c001e2d0 <__do_global_ctors_aux+0x14>
c001e2dc:	58                   	pop    eax
c001e2dd:	5b                   	pop    ebx
c001e2de:	5d                   	pop    ebp
c001e2df:	c3                   	ret    
c001e2e0:	c3                   	ret    
c001e2e1:	66 90                	xchg   ax,ax
c001e2e3:	90                   	nop

c001e2e4 <__divdi3>:
c001e2e4:	55                   	push   ebp
c001e2e5:	57                   	push   edi
c001e2e6:	56                   	push   esi
c001e2e7:	53                   	push   ebx
c001e2e8:	83 ec 1c             	sub    esp,0x1c
c001e2eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e2ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e2f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e2fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e2fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e302:	85 db                	test   ebx,ebx
c001e304:	0f 88 8e 00 00 00    	js     c001e398 <__divdi3+0xb4>
c001e30a:	89 dd                	mov    ebp,ebx
c001e30c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e314:	89 d3                	mov    ebx,edx
c001e316:	85 d2                	test   edx,edx
c001e318:	79 0d                	jns    c001e327 <__divdi3+0x43>
c001e31a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e31e:	f7 d8                	neg    eax
c001e320:	83 d2 00             	adc    edx,0x0
c001e323:	f7 da                	neg    edx
c001e325:	89 d3                	mov    ebx,edx
c001e327:	89 c7                	mov    edi,eax
c001e329:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e32c:	85 db                	test   ebx,ebx
c001e32e:	75 48                	jne    c001e378 <__divdi3+0x94>
c001e330:	39 ef                	cmp    edi,ebp
c001e332:	76 24                	jbe    c001e358 <__divdi3+0x74>
c001e334:	89 ea                	mov    edx,ebp
c001e336:	f7 f7                	div    edi
c001e338:	89 c1                	mov    ecx,eax
c001e33a:	31 f6                	xor    esi,esi
c001e33c:	89 c8                	mov    eax,ecx
c001e33e:	89 f2                	mov    edx,esi
c001e340:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e344:	85 c9                	test   ecx,ecx
c001e346:	74 07                	je     c001e34f <__divdi3+0x6b>
c001e348:	f7 d8                	neg    eax
c001e34a:	83 d2 00             	adc    edx,0x0
c001e34d:	f7 da                	neg    edx
c001e34f:	83 c4 1c             	add    esp,0x1c
c001e352:	5b                   	pop    ebx
c001e353:	5e                   	pop    esi
c001e354:	5f                   	pop    edi
c001e355:	5d                   	pop    ebp
c001e356:	c3                   	ret    
c001e357:	90                   	nop
c001e358:	85 ff                	test   edi,edi
c001e35a:	75 0b                	jne    c001e367 <__divdi3+0x83>
c001e35c:	b8 01 00 00 00       	mov    eax,0x1
c001e361:	31 d2                	xor    edx,edx
c001e363:	f7 f3                	div    ebx
c001e365:	89 c7                	mov    edi,eax
c001e367:	31 d2                	xor    edx,edx
c001e369:	89 e8                	mov    eax,ebp
c001e36b:	f7 f7                	div    edi
c001e36d:	89 c6                	mov    esi,eax
c001e36f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e372:	f7 f7                	div    edi
c001e374:	89 c1                	mov    ecx,eax
c001e376:	eb c4                	jmp    c001e33c <__divdi3+0x58>
c001e378:	39 eb                	cmp    ebx,ebp
c001e37a:	77 3c                	ja     c001e3b8 <__divdi3+0xd4>
c001e37c:	0f bd f3             	bsr    esi,ebx
c001e37f:	83 f6 1f             	xor    esi,0x1f
c001e382:	75 40                	jne    c001e3c4 <__divdi3+0xe0>
c001e384:	39 eb                	cmp    ebx,ebp
c001e386:	72 09                	jb     c001e391 <__divdi3+0xad>
c001e388:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e38b:	0f 87 97 00 00 00    	ja     c001e428 <__divdi3+0x144>
c001e391:	b9 01 00 00 00       	mov    ecx,0x1
c001e396:	eb a4                	jmp    c001e33c <__divdi3+0x58>
c001e398:	f7 d9                	neg    ecx
c001e39a:	83 d3 00             	adc    ebx,0x0
c001e39d:	f7 db                	neg    ebx
c001e39f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3a6:	89 dd                	mov    ebp,ebx
c001e3a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e3b0:	e9 5f ff ff ff       	jmp    c001e314 <__divdi3+0x30>
c001e3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e3b8:	31 f6                	xor    esi,esi
c001e3ba:	31 c9                	xor    ecx,ecx
c001e3bc:	e9 7b ff ff ff       	jmp    c001e33c <__divdi3+0x58>
c001e3c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3c4:	b8 20 00 00 00       	mov    eax,0x20
c001e3c9:	29 f0                	sub    eax,esi
c001e3cb:	89 f1                	mov    ecx,esi
c001e3cd:	d3 e3                	shl    ebx,cl
c001e3cf:	89 fa                	mov    edx,edi
c001e3d1:	88 c1                	mov    cl,al
c001e3d3:	d3 ea                	shr    edx,cl
c001e3d5:	09 da                	or     edx,ebx
c001e3d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3db:	89 f1                	mov    ecx,esi
c001e3dd:	d3 e7                	shl    edi,cl
c001e3df:	89 eb                	mov    ebx,ebp
c001e3e1:	88 c1                	mov    cl,al
c001e3e3:	d3 eb                	shr    ebx,cl
c001e3e5:	89 f1                	mov    ecx,esi
c001e3e7:	d3 e5                	shl    ebp,cl
c001e3e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e3ec:	88 c1                	mov    cl,al
c001e3ee:	d3 ea                	shr    edx,cl
c001e3f0:	09 d5                	or     ebp,edx
c001e3f2:	89 e8                	mov    eax,ebp
c001e3f4:	89 da                	mov    edx,ebx
c001e3f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e3fa:	89 d3                	mov    ebx,edx
c001e3fc:	89 c5                	mov    ebp,eax
c001e3fe:	f7 e7                	mul    edi
c001e400:	39 d3                	cmp    ebx,edx
c001e402:	72 18                	jb     c001e41c <__divdi3+0x138>
c001e404:	74 0a                	je     c001e410 <__divdi3+0x12c>
c001e406:	89 e9                	mov    ecx,ebp
c001e408:	31 f6                	xor    esi,esi
c001e40a:	e9 2d ff ff ff       	jmp    c001e33c <__divdi3+0x58>
c001e40f:	90                   	nop
c001e410:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e413:	89 f1                	mov    ecx,esi
c001e415:	d3 e7                	shl    edi,cl
c001e417:	39 c7                	cmp    edi,eax
c001e419:	73 eb                	jae    c001e406 <__divdi3+0x122>
c001e41b:	90                   	nop
c001e41c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e41f:	31 f6                	xor    esi,esi
c001e421:	e9 16 ff ff ff       	jmp    c001e33c <__divdi3+0x58>
c001e426:	66 90                	xchg   ax,ax
c001e428:	31 c9                	xor    ecx,ecx
c001e42a:	e9 0d ff ff ff       	jmp    c001e33c <__divdi3+0x58>
c001e42f:	90                   	nop

c001e430 <__moddi3>:
c001e430:	55                   	push   ebp
c001e431:	57                   	push   edi
c001e432:	56                   	push   esi
c001e433:	53                   	push   ebx
c001e434:	83 ec 2c             	sub    esp,0x2c
c001e437:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e43b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e43f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e443:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e447:	85 db                	test   ebx,ebx
c001e449:	0f 88 85 00 00 00    	js     c001e4d4 <__moddi3+0xa4>
c001e44f:	89 de                	mov    esi,ebx
c001e451:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e459:	89 d7                	mov    edi,edx
c001e45b:	85 d2                	test   edx,edx
c001e45d:	79 09                	jns    c001e468 <__moddi3+0x38>
c001e45f:	f7 d8                	neg    eax
c001e461:	83 d2 00             	adc    edx,0x0
c001e464:	f7 da                	neg    edx
c001e466:	89 d7                	mov    edi,edx
c001e468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e46c:	89 cd                	mov    ebp,ecx
c001e46e:	85 ff                	test   edi,edi
c001e470:	75 52                	jne    c001e4c4 <__moddi3+0x94>
c001e472:	89 c3                	mov    ebx,eax
c001e474:	39 f0                	cmp    eax,esi
c001e476:	76 24                	jbe    c001e49c <__moddi3+0x6c>
c001e478:	89 c8                	mov    eax,ecx
c001e47a:	89 f2                	mov    edx,esi
c001e47c:	f7 f3                	div    ebx
c001e47e:	89 d6                	mov    esi,edx
c001e480:	89 f0                	mov    eax,esi
c001e482:	31 d2                	xor    edx,edx
c001e484:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e488:	85 c9                	test   ecx,ecx
c001e48a:	74 07                	je     c001e493 <__moddi3+0x63>
c001e48c:	f7 d8                	neg    eax
c001e48e:	83 d2 00             	adc    edx,0x0
c001e491:	f7 da                	neg    edx
c001e493:	83 c4 2c             	add    esp,0x2c
c001e496:	5b                   	pop    ebx
c001e497:	5e                   	pop    esi
c001e498:	5f                   	pop    edi
c001e499:	5d                   	pop    ebp
c001e49a:	c3                   	ret    
c001e49b:	90                   	nop
c001e49c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e4a0:	85 db                	test   ebx,ebx
c001e4a2:	75 0d                	jne    c001e4b1 <__moddi3+0x81>
c001e4a4:	b8 01 00 00 00       	mov    eax,0x1
c001e4a9:	31 d2                	xor    edx,edx
c001e4ab:	f7 f7                	div    edi
c001e4ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4b1:	89 f0                	mov    eax,esi
c001e4b3:	31 d2                	xor    edx,edx
c001e4b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4b9:	f7 f7                	div    edi
c001e4bb:	89 e8                	mov    eax,ebp
c001e4bd:	f7 f7                	div    edi
c001e4bf:	89 d6                	mov    esi,edx
c001e4c1:	eb bd                	jmp    c001e480 <__moddi3+0x50>
c001e4c3:	90                   	nop
c001e4c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4c8:	39 f7                	cmp    edi,esi
c001e4ca:	76 20                	jbe    c001e4ec <__moddi3+0xbc>
c001e4cc:	89 c8                	mov    eax,ecx
c001e4ce:	89 f2                	mov    edx,esi
c001e4d0:	eb b2                	jmp    c001e484 <__moddi3+0x54>
c001e4d2:	66 90                	xchg   ax,ax
c001e4d4:	f7 d9                	neg    ecx
c001e4d6:	83 d3 00             	adc    ebx,0x0
c001e4d9:	f7 db                	neg    ebx
c001e4db:	89 de                	mov    esi,ebx
c001e4dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e4e5:	e9 6f ff ff ff       	jmp    c001e459 <__moddi3+0x29>
c001e4ea:	66 90                	xchg   ax,ax
c001e4ec:	0f bd c7             	bsr    eax,edi
c001e4ef:	83 f0 1f             	xor    eax,0x1f
c001e4f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4f6:	75 24                	jne    c001e51c <__moddi3+0xec>
c001e4f8:	39 f7                	cmp    edi,esi
c001e4fa:	72 06                	jb     c001e502 <__moddi3+0xd2>
c001e4fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e500:	77 0c                	ja     c001e50e <__moddi3+0xde>
c001e502:	89 e9                	mov    ecx,ebp
c001e504:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e508:	19 fe                	sbb    esi,edi
c001e50a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e50e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e512:	89 f2                	mov    edx,esi
c001e514:	e9 6b ff ff ff       	jmp    c001e484 <__moddi3+0x54>
c001e519:	8d 76 00             	lea    esi,[esi+0x0]
c001e51c:	b8 20 00 00 00       	mov    eax,0x20
c001e521:	89 c2                	mov    edx,eax
c001e523:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e527:	29 da                	sub    edx,ebx
c001e529:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e52d:	88 d9                	mov    cl,bl
c001e52f:	d3 e7                	shl    edi,cl
c001e531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e535:	88 d1                	mov    cl,dl
c001e537:	d3 e8                	shr    eax,cl
c001e539:	09 c7                	or     edi,eax
c001e53b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e53f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e543:	89 d8                	mov    eax,ebx
c001e545:	88 d9                	mov    cl,bl
c001e547:	d3 e7                	shl    edi,cl
c001e549:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e54d:	89 f3                	mov    ebx,esi
c001e54f:	88 d1                	mov    cl,dl
c001e551:	d3 eb                	shr    ebx,cl
c001e553:	89 c7                	mov    edi,eax
c001e555:	88 c1                	mov    cl,al
c001e557:	d3 e6                	shl    esi,cl
c001e559:	89 e8                	mov    eax,ebp
c001e55b:	88 d1                	mov    cl,dl
c001e55d:	d3 e8                	shr    eax,cl
c001e55f:	09 f0                	or     eax,esi
c001e561:	89 f9                	mov    ecx,edi
c001e563:	d3 e5                	shl    ebp,cl
c001e565:	89 da                	mov    edx,ebx
c001e567:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e56b:	89 d3                	mov    ebx,edx
c001e56d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e571:	89 c6                	mov    esi,eax
c001e573:	89 d1                	mov    ecx,edx
c001e575:	39 d3                	cmp    ebx,edx
c001e577:	72 27                	jb     c001e5a0 <__moddi3+0x170>
c001e579:	74 21                	je     c001e59c <__moddi3+0x16c>
c001e57b:	29 f5                	sub    ebp,esi
c001e57d:	19 cb                	sbb    ebx,ecx
c001e57f:	89 de                	mov    esi,ebx
c001e581:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e585:	d3 e6                	shl    esi,cl
c001e587:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e58b:	89 f9                	mov    ecx,edi
c001e58d:	d3 ed                	shr    ebp,cl
c001e58f:	09 ee                	or     esi,ebp
c001e591:	89 f0                	mov    eax,esi
c001e593:	d3 eb                	shr    ebx,cl
c001e595:	89 da                	mov    edx,ebx
c001e597:	e9 e8 fe ff ff       	jmp    c001e484 <__moddi3+0x54>
c001e59c:	39 c5                	cmp    ebp,eax
c001e59e:	73 db                	jae    c001e57b <__moddi3+0x14b>
c001e5a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e5a8:	89 d1                	mov    ecx,edx
c001e5aa:	89 c6                	mov    esi,eax
c001e5ac:	eb cd                	jmp    c001e57b <__moddi3+0x14b>
c001e5ae:	66 90                	xchg   ax,ax

c001e5b0 <__udivdi3>:
c001e5b0:	55                   	push   ebp
c001e5b1:	57                   	push   edi
c001e5b2:	56                   	push   esi
c001e5b3:	53                   	push   ebx
c001e5b4:	83 ec 1c             	sub    esp,0x1c
c001e5b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e5bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e5bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e5c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e5c7:	85 d2                	test   edx,edx
c001e5c9:	75 41                	jne    c001e60c <__udivdi3+0x5c>
c001e5cb:	39 f7                	cmp    edi,esi
c001e5cd:	76 15                	jbe    c001e5e4 <__udivdi3+0x34>
c001e5cf:	89 e8                	mov    eax,ebp
c001e5d1:	89 f2                	mov    edx,esi
c001e5d3:	f7 f7                	div    edi
c001e5d5:	31 db                	xor    ebx,ebx
c001e5d7:	89 da                	mov    edx,ebx
c001e5d9:	83 c4 1c             	add    esp,0x1c
c001e5dc:	5b                   	pop    ebx
c001e5dd:	5e                   	pop    esi
c001e5de:	5f                   	pop    edi
c001e5df:	5d                   	pop    ebp
c001e5e0:	c3                   	ret    
c001e5e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5e4:	89 f9                	mov    ecx,edi
c001e5e6:	85 ff                	test   edi,edi
c001e5e8:	75 0b                	jne    c001e5f5 <__udivdi3+0x45>
c001e5ea:	b8 01 00 00 00       	mov    eax,0x1
c001e5ef:	31 d2                	xor    edx,edx
c001e5f1:	f7 f7                	div    edi
c001e5f3:	89 c1                	mov    ecx,eax
c001e5f5:	31 d2                	xor    edx,edx
c001e5f7:	89 f0                	mov    eax,esi
c001e5f9:	f7 f1                	div    ecx
c001e5fb:	89 c3                	mov    ebx,eax
c001e5fd:	89 e8                	mov    eax,ebp
c001e5ff:	f7 f1                	div    ecx
c001e601:	89 da                	mov    edx,ebx
c001e603:	83 c4 1c             	add    esp,0x1c
c001e606:	5b                   	pop    ebx
c001e607:	5e                   	pop    esi
c001e608:	5f                   	pop    edi
c001e609:	5d                   	pop    ebp
c001e60a:	c3                   	ret    
c001e60b:	90                   	nop
c001e60c:	39 f2                	cmp    edx,esi
c001e60e:	77 1c                	ja     c001e62c <__udivdi3+0x7c>
c001e610:	0f bd da             	bsr    ebx,edx
c001e613:	83 f3 1f             	xor    ebx,0x1f
c001e616:	75 24                	jne    c001e63c <__udivdi3+0x8c>
c001e618:	39 f2                	cmp    edx,esi
c001e61a:	72 08                	jb     c001e624 <__udivdi3+0x74>
c001e61c:	39 ef                	cmp    edi,ebp
c001e61e:	0f 87 84 00 00 00    	ja     c001e6a8 <__udivdi3+0xf8>
c001e624:	b8 01 00 00 00       	mov    eax,0x1
c001e629:	eb ac                	jmp    c001e5d7 <__udivdi3+0x27>
c001e62b:	90                   	nop
c001e62c:	31 db                	xor    ebx,ebx
c001e62e:	31 c0                	xor    eax,eax
c001e630:	89 da                	mov    edx,ebx
c001e632:	83 c4 1c             	add    esp,0x1c
c001e635:	5b                   	pop    ebx
c001e636:	5e                   	pop    esi
c001e637:	5f                   	pop    edi
c001e638:	5d                   	pop    ebp
c001e639:	c3                   	ret    
c001e63a:	66 90                	xchg   ax,ax
c001e63c:	b8 20 00 00 00       	mov    eax,0x20
c001e641:	29 d8                	sub    eax,ebx
c001e643:	88 d9                	mov    cl,bl
c001e645:	d3 e2                	shl    edx,cl
c001e647:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e64b:	89 fa                	mov    edx,edi
c001e64d:	88 c1                	mov    cl,al
c001e64f:	d3 ea                	shr    edx,cl
c001e651:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e655:	09 d1                	or     ecx,edx
c001e657:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e65b:	88 d9                	mov    cl,bl
c001e65d:	d3 e7                	shl    edi,cl
c001e65f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e663:	89 f7                	mov    edi,esi
c001e665:	88 c1                	mov    cl,al
c001e667:	d3 ef                	shr    edi,cl
c001e669:	88 d9                	mov    cl,bl
c001e66b:	d3 e6                	shl    esi,cl
c001e66d:	89 ea                	mov    edx,ebp
c001e66f:	88 c1                	mov    cl,al
c001e671:	d3 ea                	shr    edx,cl
c001e673:	09 d6                	or     esi,edx
c001e675:	89 f0                	mov    eax,esi
c001e677:	89 fa                	mov    edx,edi
c001e679:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e67d:	89 d7                	mov    edi,edx
c001e67f:	89 c6                	mov    esi,eax
c001e681:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e685:	39 d7                	cmp    edi,edx
c001e687:	72 13                	jb     c001e69c <__udivdi3+0xec>
c001e689:	74 09                	je     c001e694 <__udivdi3+0xe4>
c001e68b:	89 f0                	mov    eax,esi
c001e68d:	31 db                	xor    ebx,ebx
c001e68f:	e9 43 ff ff ff       	jmp    c001e5d7 <__udivdi3+0x27>
c001e694:	88 d9                	mov    cl,bl
c001e696:	d3 e5                	shl    ebp,cl
c001e698:	39 c5                	cmp    ebp,eax
c001e69a:	73 ef                	jae    c001e68b <__udivdi3+0xdb>
c001e69c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e69f:	31 db                	xor    ebx,ebx
c001e6a1:	e9 31 ff ff ff       	jmp    c001e5d7 <__udivdi3+0x27>
c001e6a6:	66 90                	xchg   ax,ax
c001e6a8:	31 c0                	xor    eax,eax
c001e6aa:	e9 28 ff ff ff       	jmp    c001e5d7 <__udivdi3+0x27>
c001e6af:	90                   	nop

c001e6b0 <__umoddi3>:
c001e6b0:	55                   	push   ebp
c001e6b1:	57                   	push   edi
c001e6b2:	56                   	push   esi
c001e6b3:	53                   	push   ebx
c001e6b4:	83 ec 1c             	sub    esp,0x1c
c001e6b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e6c7:	89 da                	mov    edx,ebx
c001e6c9:	85 c0                	test   eax,eax
c001e6cb:	75 37                	jne    c001e704 <__umoddi3+0x54>
c001e6cd:	39 df                	cmp    edi,ebx
c001e6cf:	76 13                	jbe    c001e6e4 <__umoddi3+0x34>
c001e6d1:	89 f0                	mov    eax,esi
c001e6d3:	f7 f7                	div    edi
c001e6d5:	89 d0                	mov    eax,edx
c001e6d7:	31 d2                	xor    edx,edx
c001e6d9:	83 c4 1c             	add    esp,0x1c
c001e6dc:	5b                   	pop    ebx
c001e6dd:	5e                   	pop    esi
c001e6de:	5f                   	pop    edi
c001e6df:	5d                   	pop    ebp
c001e6e0:	c3                   	ret    
c001e6e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6e4:	89 fd                	mov    ebp,edi
c001e6e6:	85 ff                	test   edi,edi
c001e6e8:	75 0b                	jne    c001e6f5 <__umoddi3+0x45>
c001e6ea:	b8 01 00 00 00       	mov    eax,0x1
c001e6ef:	31 d2                	xor    edx,edx
c001e6f1:	f7 f7                	div    edi
c001e6f3:	89 c5                	mov    ebp,eax
c001e6f5:	89 d8                	mov    eax,ebx
c001e6f7:	31 d2                	xor    edx,edx
c001e6f9:	f7 f5                	div    ebp
c001e6fb:	89 f0                	mov    eax,esi
c001e6fd:	f7 f5                	div    ebp
c001e6ff:	89 d0                	mov    eax,edx
c001e701:	eb d4                	jmp    c001e6d7 <__umoddi3+0x27>
c001e703:	90                   	nop
c001e704:	89 f1                	mov    ecx,esi
c001e706:	39 d8                	cmp    eax,ebx
c001e708:	76 0a                	jbe    c001e714 <__umoddi3+0x64>
c001e70a:	89 f0                	mov    eax,esi
c001e70c:	83 c4 1c             	add    esp,0x1c
c001e70f:	5b                   	pop    ebx
c001e710:	5e                   	pop    esi
c001e711:	5f                   	pop    edi
c001e712:	5d                   	pop    ebp
c001e713:	c3                   	ret    
c001e714:	0f bd e8             	bsr    ebp,eax
c001e717:	83 f5 1f             	xor    ebp,0x1f
c001e71a:	75 1c                	jne    c001e738 <__umoddi3+0x88>
c001e71c:	39 d8                	cmp    eax,ebx
c001e71e:	72 04                	jb     c001e724 <__umoddi3+0x74>
c001e720:	39 f7                	cmp    edi,esi
c001e722:	77 08                	ja     c001e72c <__umoddi3+0x7c>
c001e724:	89 da                	mov    edx,ebx
c001e726:	29 fe                	sub    esi,edi
c001e728:	19 c2                	sbb    edx,eax
c001e72a:	89 f1                	mov    ecx,esi
c001e72c:	89 c8                	mov    eax,ecx
c001e72e:	83 c4 1c             	add    esp,0x1c
c001e731:	5b                   	pop    ebx
c001e732:	5e                   	pop    esi
c001e733:	5f                   	pop    edi
c001e734:	5d                   	pop    ebp
c001e735:	c3                   	ret    
c001e736:	66 90                	xchg   ax,ax
c001e738:	ba 20 00 00 00       	mov    edx,0x20
c001e73d:	29 ea                	sub    edx,ebp
c001e73f:	89 e9                	mov    ecx,ebp
c001e741:	d3 e0                	shl    eax,cl
c001e743:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e747:	89 f8                	mov    eax,edi
c001e749:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e74d:	88 d1                	mov    cl,dl
c001e74f:	d3 e8                	shr    eax,cl
c001e751:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e755:	09 c1                	or     ecx,eax
c001e757:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e75b:	89 e9                	mov    ecx,ebp
c001e75d:	d3 e7                	shl    edi,cl
c001e75f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e763:	89 d8                	mov    eax,ebx
c001e765:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e769:	88 d1                	mov    cl,dl
c001e76b:	d3 e8                	shr    eax,cl
c001e76d:	89 c7                	mov    edi,eax
c001e76f:	89 e9                	mov    ecx,ebp
c001e771:	d3 e3                	shl    ebx,cl
c001e773:	89 f0                	mov    eax,esi
c001e775:	88 d1                	mov    cl,dl
c001e777:	d3 e8                	shr    eax,cl
c001e779:	09 d8                	or     eax,ebx
c001e77b:	89 e9                	mov    ecx,ebp
c001e77d:	d3 e6                	shl    esi,cl
c001e77f:	89 f3                	mov    ebx,esi
c001e781:	89 fa                	mov    edx,edi
c001e783:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e787:	89 d1                	mov    ecx,edx
c001e789:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e78d:	89 c6                	mov    esi,eax
c001e78f:	89 d7                	mov    edi,edx
c001e791:	39 d1                	cmp    ecx,edx
c001e793:	72 27                	jb     c001e7bc <__umoddi3+0x10c>
c001e795:	74 21                	je     c001e7b8 <__umoddi3+0x108>
c001e797:	89 ca                	mov    edx,ecx
c001e799:	29 f3                	sub    ebx,esi
c001e79b:	19 fa                	sbb    edx,edi
c001e79d:	89 d0                	mov    eax,edx
c001e79f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e7a3:	d3 e0                	shl    eax,cl
c001e7a5:	89 e9                	mov    ecx,ebp
c001e7a7:	d3 eb                	shr    ebx,cl
c001e7a9:	09 d8                	or     eax,ebx
c001e7ab:	d3 ea                	shr    edx,cl
c001e7ad:	83 c4 1c             	add    esp,0x1c
c001e7b0:	5b                   	pop    ebx
c001e7b1:	5e                   	pop    esi
c001e7b2:	5f                   	pop    edi
c001e7b3:	5d                   	pop    ebp
c001e7b4:	c3                   	ret    
c001e7b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7b8:	39 c3                	cmp    ebx,eax
c001e7ba:	73 db                	jae    c001e797 <__umoddi3+0xe7>
c001e7bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e7c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e7c4:	89 d7                	mov    edi,edx
c001e7c6:	89 c6                	mov    esi,eax
c001e7c8:	eb cd                	jmp    c001e797 <__umoddi3+0xe7>

Disassembly of section .init:

c001e7ca <_init>:
c001e7ca:	55                   	push   ebp
c001e7cb:	89 e5                	mov    ebp,esp
c001e7cd:	e8 22 19 fe ff       	call   c00000f4 <frame_dummy>
c001e7d2:	e8 e5 fa ff ff       	call   c001e2bc <__do_global_ctors_aux>
c001e7d7:	5d                   	pop    ebp
c001e7d8:	c3                   	ret    

Disassembly of section .fini:

c001e7d9 <_fini>:
c001e7d9:	55                   	push   ebp
c001e7da:	89 e5                	mov    ebp,esp
c001e7dc:	e8 a3 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e7e1:	5d                   	pop    ebp
c001e7e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e7e4 <Computer::~Computer()>:
c001e7e4:	83 ec 0c             	sub    esp,0xc
c001e7e7:	ba f4 fa 01 c0       	mov    edx,0xc001faf4
c001e7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f0:	89 10                	mov    DWORD PTR [eax],edx
c001e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7f6:	83 ec 0c             	sub    esp,0xc
c001e7f9:	50                   	push   eax
c001e7fa:	e8 cd d4 fe ff       	call   c000bccc <Device::~Device()>
c001e7ff:	83 c4 10             	add    esp,0x10
c001e802:	90                   	nop
c001e803:	83 c4 0c             	add    esp,0xc
c001e806:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e808 <Computer::~Computer()>:
c001e808:	83 ec 0c             	sub    esp,0xc
c001e80b:	83 ec 0c             	sub    esp,0xc
c001e80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e812:	e8 cd ff ff ff       	call   c001e7e4 <Computer::~Computer()>
c001e817:	83 c4 10             	add    esp,0x10
c001e81a:	83 ec 08             	sub    esp,0x8
c001e81d:	68 70 01 00 00       	push   0x170
c001e822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e826:	e8 3e c0 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001e82b:	83 c4 10             	add    esp,0x10
c001e82e:	83 c4 0c             	add    esp,0xc
c001e831:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e832 <idleCommon()>:
c001e832:	83 ec 0c             	sub    esp,0xc
c001e835:	fa                   	cli    
c001e836:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e83c:	e8 e7 67 ff ff       	call   c0015028 <schedule()>
c001e841:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e846:	48                   	dec    eax
c001e847:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e84c:	75 01                	jne    c001e84f <idleCommon()+0x1d>
c001e84e:	fb                   	sti    
c001e84f:	83 c4 0c             	add    esp,0xc
c001e852:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e854 <LinkedList<UnixFile>::~LinkedList()>:
c001e854:	90                   	nop
c001e855:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e856 <LinkedList<UnixFile>::LinkedList()>:
c001e856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e85a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e864:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e86b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e86f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e88b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e88f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e896:	90                   	nop
c001e897:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e898 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e8a0:	75 10                	jne    c001e8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e8a2:	83 ec 0c             	sub    esp,0xc
c001e8a5:	68 08 fd 01 c0       	push   0xc001fd08
c001e8aa:	e8 c4 1f ff ff       	call   c0010873 <KePanic(char const*)>
c001e8af:	83 c4 10             	add    esp,0x10
c001e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8b8:	85 c0                	test   eax,eax
c001e8ba:	74 34                	je     c001e8f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8c3:	85 c0                	test   eax,eax
c001e8c5:	74 29                	je     c001e8f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8ee:	eb 65                	jmp    c001e955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f6:	85 c0                	test   eax,eax
c001e8f8:	75 4b                	jne    c001e945 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e901:	85 c0                	test   eax,eax
c001e903:	75 40                	jne    c001e945 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e909:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e90d:	89 10                	mov    DWORD PTR [eax],edx
c001e90f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e913:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e917:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e921:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e92f:	85 c0                	test   eax,eax
c001e931:	74 22                	je     c001e955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e933:	83 ec 0c             	sub    esp,0xc
c001e936:	68 2a fd 01 c0       	push   0xc001fd2a
c001e93b:	e8 33 1f ff ff       	call   c0010873 <KePanic(char const*)>
c001e940:	83 c4 10             	add    esp,0x10
c001e943:	eb 10                	jmp    c001e955 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e945:	83 ec 0c             	sub    esp,0xc
c001e948:	68 34 fd 01 c0       	push   0xc001fd34
c001e94d:	e8 21 1f ff ff       	call   c0010873 <KePanic(char const*)>
c001e952:	83 c4 10             	add    esp,0x10
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e95c:	8d 50 01             	lea    edx,[eax+0x1]
c001e95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e963:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e966:	90                   	nop
c001e967:	83 c4 0c             	add    esp,0xc
c001e96a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e96c <LinkedList<UnixFile>::getFirstElement()>:
c001e96c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e970:	8b 00                	mov    eax,DWORD PTR [eax]
c001e972:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e974 <LinkedList<UnixFile>::removeFirst()>:
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e97d:	85 c0                	test   eax,eax
c001e97f:	75 12                	jne    c001e993 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	68 40 fd 01 c0       	push   0xc001fd40
c001e989:	e8 e5 1e ff ff       	call   c0010873 <KePanic(char const*)>
c001e98e:	83 c4 10             	add    esp,0x10
c001e991:	eb 7e                	jmp    c001ea11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e997:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e99a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e99d:	85 c0                	test   eax,eax
c001e99f:	74 10                	je     c001e9b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	68 8b fd 01 c0       	push   0xc001fd8b
c001e9a9:	e8 c5 1e ff ff       	call   c0010873 <KePanic(char const*)>
c001e9ae:	83 c4 10             	add    esp,0x10
c001e9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ba:	85 c0                	test   eax,eax
c001e9bc:	75 33                	jne    c001e9f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9da:	83 f8 01             	cmp    eax,0x1
c001e9dd:	74 21                	je     c001ea00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9df:	83 ec 0c             	sub    esp,0xc
c001e9e2:	68 64 fd 01 c0       	push   0xc001fd64
c001e9e7:	e8 87 1e ff ff       	call   c0010873 <KePanic(char const*)>
c001e9ec:	83 c4 10             	add    esp,0x10
c001e9ef:	eb 0f                	jmp    c001ea00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fe:	89 10                	mov    DWORD PTR [eax],edx
c001ea00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea07:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea11:	83 c4 0c             	add    esp,0xc
c001ea14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ea1e <DriverlessDevice::~DriverlessDevice()>:
c001ea1e:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c001ea23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea27:	89 10                	mov    DWORD PTR [eax],edx
c001ea29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea2d:	50                   	push   eax
c001ea2e:	e8 99 d2 fe ff       	call   c000bccc <Device::~Device()>
c001ea33:	83 c4 04             	add    esp,0x4
c001ea36:	90                   	nop
c001ea37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea38 <DriverlessDevice::~DriverlessDevice()>:
c001ea38:	83 ec 0c             	sub    esp,0xc
c001ea3b:	83 ec 0c             	sub    esp,0xc
c001ea3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea42:	e8 d7 ff ff ff       	call   c001ea1e <DriverlessDevice::~DriverlessDevice()>
c001ea47:	83 c4 10             	add    esp,0x10
c001ea4a:	83 ec 08             	sub    esp,0x8
c001ea4d:	68 58 01 00 00       	push   0x158
c001ea52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea56:	e8 0e be fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001ea5b:	83 c4 10             	add    esp,0x10
c001ea5e:	83 c4 0c             	add    esp,0xc
c001ea61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ea62 <LinkedList<Device>::addElement(Device*)>:
c001ea62:	83 ec 0c             	sub    esp,0xc
c001ea65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea6a:	75 10                	jne    c001ea7c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ea6c:	83 ec 0c             	sub    esp,0xc
c001ea6f:	68 08 fd 01 c0       	push   0xc001fd08
c001ea74:	e8 fa 1d ff ff       	call   c0010873 <KePanic(char const*)>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea82:	85 c0                	test   eax,eax
c001ea84:	74 3a                	je     c001eac0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea8d:	85 c0                	test   eax,eax
c001ea8f:	74 2f                	je     c001eac0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eabe:	eb 68                	jmp    c001eb28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac6:	85 c0                	test   eax,eax
c001eac8:	75 4e                	jne    c001eb18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead1:	85 c0                	test   eax,eax
c001ead3:	75 43                	jne    c001eb18 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ead5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eadd:	89 10                	mov    DWORD PTR [eax],edx
c001eadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eae7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaf1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb02:	85 c0                	test   eax,eax
c001eb04:	74 22                	je     c001eb28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb06:	83 ec 0c             	sub    esp,0xc
c001eb09:	68 2a fd 01 c0       	push   0xc001fd2a
c001eb0e:	e8 60 1d ff ff       	call   c0010873 <KePanic(char const*)>
c001eb13:	83 c4 10             	add    esp,0x10
c001eb16:	eb 10                	jmp    c001eb28 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb18:	83 ec 0c             	sub    esp,0xc
c001eb1b:	68 34 fd 01 c0       	push   0xc001fd34
c001eb20:	e8 4e 1d ff ff       	call   c0010873 <KePanic(char const*)>
c001eb25:	83 c4 10             	add    esp,0x10
c001eb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb2f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb39:	90                   	nop
c001eb3a:	83 c4 0c             	add    esp,0xc
c001eb3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb3e <LinkedList<Device>::LinkedList()>:
c001eb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb7e:	90                   	nop
c001eb7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb80 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb84:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb86:	85 c0                	test   eax,eax
c001eb88:	75 0e                	jne    c001eb98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb91:	85 c0                	test   eax,eax
c001eb93:	75 03                	jne    c001eb98 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb95:	b0 01                	mov    al,0x1
c001eb97:	c3                   	ret    
c001eb98:	b0 00                	mov    al,0x0
c001eb9a:	90                   	nop
c001eb9b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001eb9c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001eb9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eba4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eba4:	83 ec 0c             	sub    esp,0xc
c001eba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebab:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebad:	85 c0                	test   eax,eax
c001ebaf:	75 17                	jne    c001ebc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ebb1:	83 ec 0c             	sub    esp,0xc
c001ebb4:	68 40 fd 01 c0       	push   0xc001fd40
c001ebb9:	e8 b5 1c ff ff       	call   c0010873 <KePanic(char const*)>
c001ebbe:	83 c4 10             	add    esp,0x10
c001ebc1:	e9 96 00 00 00       	jmp    c001ec5c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ebc6:	66 90                	xchg   ax,ax
c001ebc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebcf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebd2:	85 c0                	test   eax,eax
c001ebd4:	0f 95 c0             	setne  al
c001ebd7:	0f b6 c0             	movzx  eax,al
c001ebda:	85 c0                	test   eax,eax
c001ebdc:	74 12                	je     c001ebf0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ebde:	83 ec 0c             	sub    esp,0xc
c001ebe1:	68 8b fd 01 c0       	push   0xc001fd8b
c001ebe6:	e8 88 1c ff ff       	call   c0010873 <KePanic(char const*)>
c001ebeb:	83 c4 10             	add    esp,0x10
c001ebee:	66 90                	xchg   ax,ax
c001ebf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebf9:	85 c0                	test   eax,eax
c001ebfb:	0f 94 c0             	sete   al
c001ebfe:	0f b6 c0             	movzx  eax,al
c001ec01:	85 c0                	test   eax,eax
c001ec03:	74 33                	je     c001ec38 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec09:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec21:	83 f8 01             	cmp    eax,0x1
c001ec24:	74 22                	je     c001ec48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec26:	83 ec 0c             	sub    esp,0xc
c001ec29:	68 64 fd 01 c0       	push   0xc001fd64
c001ec2e:	e8 40 1c ff ff       	call   c0010873 <KePanic(char const*)>
c001ec33:	83 c4 10             	add    esp,0x10
c001ec36:	eb 10                	jmp    c001ec48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec3e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec45:	89 10                	mov    DWORD PTR [eax],edx
c001ec47:	90                   	nop
c001ec48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec4f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec59:	8d 76 00             	lea    esi,[esi+0x0]
c001ec5c:	83 c4 0c             	add    esp,0xc
c001ec5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ec60 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ec60:	83 ec 0c             	sub    esp,0xc
c001ec63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec68:	75 12                	jne    c001ec7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ec6a:	83 ec 0c             	sub    esp,0xc
c001ec6d:	68 08 fd 01 c0       	push   0xc001fd08
c001ec72:	e8 fc 1b ff ff       	call   c0010873 <KePanic(char const*)>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	66 90                	xchg   ax,ax
c001ec7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec82:	85 c0                	test   eax,eax
c001ec84:	74 36                	je     c001ecbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec8d:	85 c0                	test   eax,eax
c001ec8f:	74 2b                	je     c001ecbc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec9c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ec9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eca7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecb8:	eb 6a                	jmp    c001ed24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecba:	66 90                	xchg   ax,ax
c001ecbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecc2:	85 c0                	test   eax,eax
c001ecc4:	75 4e                	jne    c001ed14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ecc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eccd:	85 c0                	test   eax,eax
c001eccf:	75 43                	jne    c001ed14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecd9:	89 10                	mov    DWORD PTR [eax],edx
c001ecdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ece3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ece6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eced:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecfb:	85 c0                	test   eax,eax
c001ecfd:	74 25                	je     c001ed24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecff:	83 ec 0c             	sub    esp,0xc
c001ed02:	68 2a fd 01 c0       	push   0xc001fd2a
c001ed07:	e8 67 1b ff ff       	call   c0010873 <KePanic(char const*)>
c001ed0c:	83 c4 10             	add    esp,0x10
c001ed0f:	eb 13                	jmp    c001ed24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed11:	8d 76 00             	lea    esi,[esi+0x0]
c001ed14:	83 ec 0c             	sub    esp,0xc
c001ed17:	68 34 fd 01 c0       	push   0xc001fd34
c001ed1c:	e8 52 1b ff ff       	call   c0010873 <KePanic(char const*)>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed2b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed35:	90                   	nop
c001ed36:	83 c4 0c             	add    esp,0xc
c001ed39:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed3c <ACPI::~ACPI()>:
c001ed3c:	83 ec 0c             	sub    esp,0xc
c001ed3f:	ba a8 09 02 c0       	mov    edx,0xc00209a8
c001ed44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed48:	89 10                	mov    DWORD PTR [eax],edx
c001ed4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4e:	83 ec 0c             	sub    esp,0xc
c001ed51:	50                   	push   eax
c001ed52:	e8 75 cf fe ff       	call   c000bccc <Device::~Device()>
c001ed57:	83 c4 10             	add    esp,0x10
c001ed5a:	90                   	nop
c001ed5b:	83 c4 0c             	add    esp,0xc
c001ed5e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ed60 <ACPI::~ACPI()>:
c001ed60:	83 ec 0c             	sub    esp,0xc
c001ed63:	83 ec 0c             	sub    esp,0xc
c001ed66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed6a:	e8 cd ff ff ff       	call   c001ed3c <ACPI::~ACPI()>
c001ed6f:	83 c4 10             	add    esp,0x10
c001ed72:	83 ec 08             	sub    esp,0x8
c001ed75:	68 64 12 00 00       	push   0x1264
c001ed7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed7e:	e8 e6 ba fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001ed83:	83 c4 10             	add    esp,0x10
c001ed86:	83 c4 0c             	add    esp,0xc
c001ed89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ed8c <LinkedList<Device>::~LinkedList()>:
c001ed8c:	90                   	nop
c001ed8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ed90 <LinkedList<Device>::isEmpty()>:
c001ed90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed96:	85 c0                	test   eax,eax
c001ed98:	75 0e                	jne    c001eda8 <LinkedList<Device>::isEmpty()+0x18>
c001ed9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eda1:	85 c0                	test   eax,eax
c001eda3:	75 03                	jne    c001eda8 <LinkedList<Device>::isEmpty()+0x18>
c001eda5:	b0 01                	mov    al,0x1
c001eda7:	c3                   	ret    
c001eda8:	b0 00                	mov    al,0x0
c001edaa:	90                   	nop
c001edab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001edac <LinkedList<Device>::getFirstElement()>:
c001edac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb0:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001edb4 <LinkedList<Device>::removeFirst()>:
c001edb4:	83 ec 0c             	sub    esp,0xc
c001edb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001edbd:	85 c0                	test   eax,eax
c001edbf:	75 17                	jne    c001edd8 <LinkedList<Device>::removeFirst()+0x24>
c001edc1:	83 ec 0c             	sub    esp,0xc
c001edc4:	68 40 fd 01 c0       	push   0xc001fd40
c001edc9:	e8 a5 1a ff ff       	call   c0010873 <KePanic(char const*)>
c001edce:	83 c4 10             	add    esp,0x10
c001edd1:	e9 92 00 00 00       	jmp    c001ee68 <LinkedList<Device>::removeFirst()+0xb4>
c001edd6:	66 90                	xchg   ax,ax
c001edd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eddf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ede5:	85 c0                	test   eax,eax
c001ede7:	74 13                	je     c001edfc <LinkedList<Device>::removeFirst()+0x48>
c001ede9:	83 ec 0c             	sub    esp,0xc
c001edec:	68 8b fd 01 c0       	push   0xc001fd8b
c001edf1:	e8 7d 1a ff ff       	call   c0010873 <KePanic(char const*)>
c001edf6:	83 c4 10             	add    esp,0x10
c001edf9:	8d 76 00             	lea    esi,[esi+0x0]
c001edfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee02:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee08:	85 c0                	test   eax,eax
c001ee0a:	75 34                	jne    c001ee40 <LinkedList<Device>::removeFirst()+0x8c>
c001ee0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee28:	83 f8 01             	cmp    eax,0x1
c001ee2b:	74 27                	je     c001ee54 <LinkedList<Device>::removeFirst()+0xa0>
c001ee2d:	83 ec 0c             	sub    esp,0xc
c001ee30:	68 64 fd 01 c0       	push   0xc001fd64
c001ee35:	e8 39 1a ff ff       	call   c0010873 <KePanic(char const*)>
c001ee3a:	83 c4 10             	add    esp,0x10
c001ee3d:	eb 15                	jmp    c001ee54 <LinkedList<Device>::removeFirst()+0xa0>
c001ee3f:	90                   	nop
c001ee40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee46:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee50:	89 10                	mov    DWORD PTR [eax],edx
c001ee52:	66 90                	xchg   ax,ax
c001ee54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee5b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee65:	8d 76 00             	lea    esi,[esi+0x0]
c001ee68:	83 c4 0c             	add    esp,0xc
c001ee6b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee6c <CPU::~CPU()>:
c001ee6c:	83 ec 0c             	sub    esp,0xc
c001ee6f:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c001ee74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee78:	89 10                	mov    DWORD PTR [eax],edx
c001ee7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7e:	83 ec 0c             	sub    esp,0xc
c001ee81:	50                   	push   eax
c001ee82:	e8 45 ce fe ff       	call   c000bccc <Device::~Device()>
c001ee87:	83 c4 10             	add    esp,0x10
c001ee8a:	90                   	nop
c001ee8b:	83 c4 0c             	add    esp,0xc
c001ee8e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ee90 <CPU::~CPU()>:
c001ee90:	83 ec 0c             	sub    esp,0xc
c001ee93:	83 ec 0c             	sub    esp,0xc
c001ee96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee9a:	e8 cd ff ff ff       	call   c001ee6c <CPU::~CPU()>
c001ee9f:	83 c4 10             	add    esp,0x10
c001eea2:	83 ec 08             	sub    esp,0x8
c001eea5:	68 94 11 00 00       	push   0x1194
c001eeaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeae:	e8 b6 b9 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001eeb3:	83 c4 10             	add    esp,0x10
c001eeb6:	83 c4 0c             	add    esp,0xc
c001eeb9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eebc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eebc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eec0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eec3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001eec4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001eec4:	90                   	nop
c001eec5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001eec8 <ThreadControlBlock::ThreadControlBlock()>:
c001eec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eecc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eed3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eee2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001eeff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef03:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef0f:	90                   	nop
c001ef10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef54:	90                   	nop
c001ef55:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef56 <PCI::~PCI()>:
c001ef56:	83 ec 0c             	sub    esp,0xc
c001ef59:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c001ef5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef62:	89 10                	mov    DWORD PTR [eax],edx
c001ef64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef68:	83 ec 0c             	sub    esp,0xc
c001ef6b:	50                   	push   eax
c001ef6c:	e8 f3 c7 fe ff       	call   c000b764 <Bus::~Bus()>
c001ef71:	83 c4 10             	add    esp,0x10
c001ef74:	90                   	nop
c001ef75:	83 c4 0c             	add    esp,0xc
c001ef78:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ef7a <PCI::~PCI()>:
c001ef7a:	83 ec 0c             	sub    esp,0xc
c001ef7d:	83 ec 0c             	sub    esp,0xc
c001ef80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef84:	e8 cd ff ff ff       	call   c001ef56 <PCI::~PCI()>
c001ef89:	83 c4 10             	add    esp,0x10
c001ef8c:	83 ec 08             	sub    esp,0x8
c001ef8f:	68 5c 01 00 00       	push   0x15c
c001ef94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef98:	e8 cc b8 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001ef9d:	83 c4 10             	add    esp,0x10
c001efa0:	83 c4 0c             	add    esp,0xc
c001efa3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001efa4 <IDE::~IDE()>:
c001efa4:	83 ec 0c             	sub    esp,0xc
c001efa7:	ba 5c 1a 02 c0       	mov    edx,0xc0021a5c
c001efac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb0:	89 10                	mov    DWORD PTR [eax],edx
c001efb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb6:	83 ec 0c             	sub    esp,0xc
c001efb9:	50                   	push   eax
c001efba:	e8 85 d1 fe ff       	call   c000c144 <HardDiskController::~HardDiskController()>
c001efbf:	83 c4 10             	add    esp,0x10
c001efc2:	90                   	nop
c001efc3:	83 c4 0c             	add    esp,0xc
c001efc6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001efc8 <IDE::~IDE()>:
c001efc8:	83 ec 0c             	sub    esp,0xc
c001efcb:	83 ec 0c             	sub    esp,0xc
c001efce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efd2:	e8 cd ff ff ff       	call   c001efa4 <IDE::~IDE()>
c001efd7:	83 c4 10             	add    esp,0x10
c001efda:	83 ec 08             	sub    esp,0x8
c001efdd:	68 70 02 00 00       	push   0x270
c001efe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efe6:	e8 7e b8 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001efeb:	83 c4 10             	add    esp,0x10
c001efee:	83 c4 0c             	add    esp,0xc
c001eff1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001eff2 <SATABus::~SATABus()>:
c001eff2:	83 ec 0c             	sub    esp,0xc
c001eff5:	ba ac 1a 02 c0       	mov    edx,0xc0021aac
c001effa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001effe:	89 10                	mov    DWORD PTR [eax],edx
c001f000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	50                   	push   eax
c001f008:	e8 37 d1 fe ff       	call   c000c144 <HardDiskController::~HardDiskController()>
c001f00d:	83 c4 10             	add    esp,0x10
c001f010:	90                   	nop
c001f011:	83 c4 0c             	add    esp,0xc
c001f014:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f016 <SATABus::~SATABus()>:
c001f016:	83 ec 0c             	sub    esp,0xc
c001f019:	83 ec 0c             	sub    esp,0xc
c001f01c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f020:	e8 cd ff ff ff       	call   c001eff2 <SATABus::~SATABus()>
c001f025:	83 c4 10             	add    esp,0x10
c001f028:	83 ec 08             	sub    esp,0x8
c001f02b:	68 64 01 00 00       	push   0x164
c001f030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f034:	e8 30 b8 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f039:	83 c4 10             	add    esp,0x10
c001f03c:	83 c4 0c             	add    esp,0xc
c001f03f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f040 <ATA::~ATA()>:
c001f040:	83 ec 0c             	sub    esp,0xc
c001f043:	ba ec 1a 02 c0       	mov    edx,0xc0021aec
c001f048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f04c:	89 10                	mov    DWORD PTR [eax],edx
c001f04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f052:	83 ec 0c             	sub    esp,0xc
c001f055:	50                   	push   eax
c001f056:	e8 cb d1 fe ff       	call   c000c226 <PhysicalDisk::~PhysicalDisk()>
c001f05b:	83 c4 10             	add    esp,0x10
c001f05e:	90                   	nop
c001f05f:	83 c4 0c             	add    esp,0xc
c001f062:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f064 <ATA::~ATA()>:
c001f064:	83 ec 0c             	sub    esp,0xc
c001f067:	83 ec 0c             	sub    esp,0xc
c001f06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f06e:	e8 cd ff ff ff       	call   c001f040 <ATA::~ATA()>
c001f073:	83 c4 10             	add    esp,0x10
c001f076:	83 ec 08             	sub    esp,0x8
c001f079:	68 7c 01 00 00       	push   0x17c
c001f07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f082:	e8 e2 b7 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f087:	83 c4 10             	add    esp,0x10
c001f08a:	83 c4 0c             	add    esp,0xc
c001f08d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f08e <ATAPI::~ATAPI()>:
c001f08e:	83 ec 0c             	sub    esp,0xc
c001f091:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c001f096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09a:	89 10                	mov    DWORD PTR [eax],edx
c001f09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a0:	83 ec 0c             	sub    esp,0xc
c001f0a3:	50                   	push   eax
c001f0a4:	e8 7d d1 fe ff       	call   c000c226 <PhysicalDisk::~PhysicalDisk()>
c001f0a9:	83 c4 10             	add    esp,0x10
c001f0ac:	90                   	nop
c001f0ad:	83 c4 0c             	add    esp,0xc
c001f0b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f0b2 <ATAPI::~ATAPI()>:
c001f0b2:	83 ec 0c             	sub    esp,0xc
c001f0b5:	83 ec 0c             	sub    esp,0xc
c001f0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0bc:	e8 cd ff ff ff       	call   c001f08e <ATAPI::~ATAPI()>
c001f0c1:	83 c4 10             	add    esp,0x10
c001f0c4:	83 ec 08             	sub    esp,0x8
c001f0c7:	68 84 01 00 00       	push   0x184
c001f0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0d0:	e8 94 b7 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f0d5:	83 c4 10             	add    esp,0x10
c001f0d8:	83 c4 0c             	add    esp,0xc
c001f0db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f0dc <SATA::~SATA()>:
c001f0dc:	83 ec 0c             	sub    esp,0xc
c001f0df:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c001f0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e8:	89 10                	mov    DWORD PTR [eax],edx
c001f0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ee:	83 ec 0c             	sub    esp,0xc
c001f0f1:	50                   	push   eax
c001f0f2:	e8 2f d1 fe ff       	call   c000c226 <PhysicalDisk::~PhysicalDisk()>
c001f0f7:	83 c4 10             	add    esp,0x10
c001f0fa:	90                   	nop
c001f0fb:	83 c4 0c             	add    esp,0xc
c001f0fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f100 <SATA::~SATA()>:
c001f100:	83 ec 0c             	sub    esp,0xc
c001f103:	83 ec 0c             	sub    esp,0xc
c001f106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f10a:	e8 cd ff ff ff       	call   c001f0dc <SATA::~SATA()>
c001f10f:	83 c4 10             	add    esp,0x10
c001f112:	83 ec 08             	sub    esp,0x8
c001f115:	68 7c 01 00 00       	push   0x17c
c001f11a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11e:	e8 46 b7 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	83 c4 0c             	add    esp,0xc
c001f129:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f12a <SATAPI::~SATAPI()>:
c001f12a:	83 ec 0c             	sub    esp,0xc
c001f12d:	ba 0c 1d 02 c0       	mov    edx,0xc0021d0c
c001f132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f136:	89 10                	mov    DWORD PTR [eax],edx
c001f138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f13c:	83 ec 0c             	sub    esp,0xc
c001f13f:	50                   	push   eax
c001f140:	e8 e1 d0 fe ff       	call   c000c226 <PhysicalDisk::~PhysicalDisk()>
c001f145:	83 c4 10             	add    esp,0x10
c001f148:	90                   	nop
c001f149:	83 c4 0c             	add    esp,0xc
c001f14c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f14e <SATAPI::~SATAPI()>:
c001f14e:	83 ec 0c             	sub    esp,0xc
c001f151:	83 ec 0c             	sub    esp,0xc
c001f154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f158:	e8 cd ff ff ff       	call   c001f12a <SATAPI::~SATAPI()>
c001f15d:	83 c4 10             	add    esp,0x10
c001f160:	83 ec 08             	sub    esp,0x8
c001f163:	68 84 01 00 00       	push   0x184
c001f168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f16c:	e8 f8 b6 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f171:	83 c4 10             	add    esp,0x10
c001f174:	83 c4 0c             	add    esp,0xc
c001f177:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f178 <IOAPIC::~IOAPIC()>:
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	ba 4c 1d 02 c0       	mov    edx,0xc0021d4c
c001f180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f184:	89 10                	mov    DWORD PTR [eax],edx
c001f186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18a:	83 ec 0c             	sub    esp,0xc
c001f18d:	50                   	push   eax
c001f18e:	e8 39 cb fe ff       	call   c000bccc <Device::~Device()>
c001f193:	83 c4 10             	add    esp,0x10
c001f196:	90                   	nop
c001f197:	83 c4 0c             	add    esp,0xc
c001f19a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f19c <IOAPIC::~IOAPIC()>:
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	83 ec 0c             	sub    esp,0xc
c001f1a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1a6:	e8 cd ff ff ff       	call   c001f178 <IOAPIC::~IOAPIC()>
c001f1ab:	83 c4 10             	add    esp,0x10
c001f1ae:	83 ec 08             	sub    esp,0x8
c001f1b1:	68 68 01 00 00       	push   0x168
c001f1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ba:	e8 aa b6 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f1bf:	83 c4 10             	add    esp,0x10
c001f1c2:	83 c4 0c             	add    esp,0xc
c001f1c5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f1c8 <APICTimer::~APICTimer()>:
c001f1c8:	83 ec 0c             	sub    esp,0xc
c001f1cb:	ba 94 1d 02 c0       	mov    edx,0xc0021d94
c001f1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d4:	89 10                	mov    DWORD PTR [eax],edx
c001f1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1da:	83 ec 0c             	sub    esp,0xc
c001f1dd:	50                   	push   eax
c001f1de:	e8 b5 e5 fe ff       	call   c000d798 <Timer::~Timer()>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	90                   	nop
c001f1e7:	83 c4 0c             	add    esp,0xc
c001f1ea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f1ec <APICTimer::~APICTimer()>:
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	83 ec 0c             	sub    esp,0xc
c001f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f6:	e8 cd ff ff ff       	call   c001f1c8 <APICTimer::~APICTimer()>
c001f1fb:	83 c4 10             	add    esp,0x10
c001f1fe:	83 ec 08             	sub    esp,0x8
c001f201:	68 60 01 00 00       	push   0x160
c001f206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f20a:	e8 5a b6 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f20f:	83 c4 10             	add    esp,0x10
c001f212:	83 c4 0c             	add    esp,0xc
c001f215:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f218 <PIT::~PIT()>:
c001f218:	83 ec 0c             	sub    esp,0xc
c001f21b:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c001f220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f224:	89 10                	mov    DWORD PTR [eax],edx
c001f226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22a:	83 ec 0c             	sub    esp,0xc
c001f22d:	50                   	push   eax
c001f22e:	e8 65 e5 fe ff       	call   c000d798 <Timer::~Timer()>
c001f233:	83 c4 10             	add    esp,0x10
c001f236:	90                   	nop
c001f237:	83 c4 0c             	add    esp,0xc
c001f23a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f23c <PIT::~PIT()>:
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	83 ec 0c             	sub    esp,0xc
c001f242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f246:	e8 cd ff ff ff       	call   c001f218 <PIT::~PIT()>
c001f24b:	83 c4 10             	add    esp,0x10
c001f24e:	83 ec 08             	sub    esp,0x8
c001f251:	68 5c 01 00 00       	push   0x15c
c001f256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f25a:	e8 0a b6 fe ff       	call   c000a869 <operator delete(void*, unsigned long)>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	83 c4 0c             	add    esp,0xc
c001f265:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 35 0c 02 c0       	mov    esi,0xc0020c35
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 51 0c 02 c0       	mov    esi,0xc0020c51
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
