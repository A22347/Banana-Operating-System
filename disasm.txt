
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8f f7 00 00       	call   c000f7af <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 83 61 02 00       	call   c00261a8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 04 6d 02 c0       	mov    ebx,0xc0026d04
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 10 6d 02 c0    	cmp    ebx,0xc0026d10
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ec ad 02 c0       	mov    eax,0xc002adec
c0000049:	3d ec ad 02 c0       	cmp    eax,0xc002adec
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ec ad 02 c0       	push   0xc002adec
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ec ad 02 c0       	mov    eax,0xc002adec
c0000075:	2d ec ad 02 c0       	sub    eax,0xc002adec
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ec ad 02 c0       	push   0xc002adec
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 1c b4 02 c0 00 	cmp    BYTE PTR ds:0xc002b41c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 18 6d 02 c0       	mov    ebx,0xc0026d18
c00000bb:	81 eb 14 6d 02 c0    	sub    ebx,0xc0026d14
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 14 6d 02 c0       	mov    esi,0xc0026d14
c00000ca:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 20 b4 02 c0       	mov    ds:0xc002b420,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ec ad 02 c0       	push   0xc002adec
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 1c b4 02 c0 01 	mov    BYTE PTR ds:0xc002b41c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 24 b4 02 c0       	push   0xc002b424
c000012c:	68 ec ad 02 c0       	push   0xc002adec
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 4a ba 01 00       	call   c001bd9a <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 03 21 01 00       	call   c001246b <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 28 ba 01 00       	call   c001bd9a <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 3f be 01 00       	call   c001c1d0 <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 ec c3 01 00       	call   c001c786 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 50 b8 02 c0 	lgdtd  ds:0xc002b850
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	54                   	push   esp
c0000579:	e8 a5 3d 01 00       	call   c0014323 <int_handler>
c000057e:	81 c4 04 00 00 00    	add    esp,0x4
c0000584:	0f a9                	pop    gs
c0000586:	0f a1                	pop    fs
c0000588:	07                   	pop    es
c0000589:	1f                   	pop    ds
c000058a:	61                   	popa   
c000058b:	81 c4 08 00 00 00    	add    esp,0x8
c0000591:	cf                   	iret   

c0000592 <irq16>:
c0000592:	fa                   	cli    
c0000593:	6a 00                	push   0x0
c0000595:	6a 30                	push   0x30
c0000597:	e9 d5 ff ff ff       	jmp    c0000571 <int_common_stub>

c000059c <irq17>:
c000059c:	fa                   	cli    
c000059d:	6a 00                	push   0x0
c000059f:	6a 31                	push   0x31
c00005a1:	e9 cb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005a6 <irq18>:
c00005a6:	fa                   	cli    
c00005a7:	6a 00                	push   0x0
c00005a9:	6a 32                	push   0x32
c00005ab:	e9 c1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b0 <irq19>:
c00005b0:	fa                   	cli    
c00005b1:	6a 00                	push   0x0
c00005b3:	6a 33                	push   0x33
c00005b5:	e9 b7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ba <irq20>:
c00005ba:	fa                   	cli    
c00005bb:	6a 00                	push   0x0
c00005bd:	6a 34                	push   0x34
c00005bf:	e9 ad ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c4 <irq21>:
c00005c4:	fa                   	cli    
c00005c5:	6a 00                	push   0x0
c00005c7:	6a 35                	push   0x35
c00005c9:	e9 a3 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ce <irq22>:
c00005ce:	fa                   	cli    
c00005cf:	6a 00                	push   0x0
c00005d1:	6a 36                	push   0x36
c00005d3:	e9 99 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d8 <irq23>:
c00005d8:	fa                   	cli    
c00005d9:	6a 00                	push   0x0
c00005db:	6a 37                	push   0x37
c00005dd:	e9 8f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e2 <memcmp>:
c00005e2:	56                   	push   esi
c00005e3:	53                   	push   ebx
c00005e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f0:	01 d6                	add    esi,edx
c00005f2:	39 f2                	cmp    edx,esi
c00005f4:	74 0e                	je     c0000604 <memcmp+0x22>
c00005f6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005f9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fc:	38 c8                	cmp    al,cl
c00005fe:	75 08                	jne    c0000608 <memcmp+0x26>
c0000600:	42                   	inc    edx
c0000601:	43                   	inc    ebx
c0000602:	eb ee                	jmp    c00005f2 <memcmp+0x10>
c0000604:	31 c0                	xor    eax,eax
c0000606:	eb 02                	jmp    c000060a <memcmp+0x28>
c0000608:	29 c8                	sub    eax,ecx
c000060a:	5b                   	pop    ebx
c000060b:	5e                   	pop    esi
c000060c:	c3                   	ret    

c000060d <memmove>:
c000060d:	56                   	push   esi
c000060e:	53                   	push   ebx
c000060f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000613:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000617:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061b:	39 c8                	cmp    eax,ecx
c000061d:	73 12                	jae    c0000631 <memmove+0x24>
c000061f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000622:	89 c3                	mov    ebx,eax
c0000624:	39 f1                	cmp    ecx,esi
c0000626:	74 1a                	je     c0000642 <memmove+0x35>
c0000628:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062a:	43                   	inc    ebx
c000062b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000062e:	41                   	inc    ecx
c000062f:	eb f3                	jmp    c0000624 <memmove+0x17>
c0000631:	76 0f                	jbe    c0000642 <memmove+0x35>
c0000633:	85 d2                	test   edx,edx
c0000635:	74 0b                	je     c0000642 <memmove+0x35>
c0000637:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000063f:	4a                   	dec    edx
c0000640:	eb f1                	jmp    c0000633 <memmove+0x26>
c0000642:	5b                   	pop    ebx
c0000643:	5e                   	pop    esi
c0000644:	c3                   	ret    

c0000645 <memcpy>:
c0000645:	57                   	push   edi
c0000646:	56                   	push   esi
c0000647:	53                   	push   ebx
c0000648:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000650:	89 da                	mov    edx,ebx
c0000652:	89 d9                	mov    ecx,ebx
c0000654:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000658:	83 e2 fc             	and    edx,0xfffffffc
c000065b:	c1 e9 02             	shr    ecx,0x2
c000065e:	89 c7                	mov    edi,eax
c0000660:	fc                   	cld    
c0000661:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000663:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000666:	01 c2                	add    edx,eax
c0000668:	01 de                	add    esi,ebx
c000066a:	39 f1                	cmp    ecx,esi
c000066c:	74 09                	je     c0000677 <memcpy+0x32>
c000066e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000670:	42                   	inc    edx
c0000671:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000674:	41                   	inc    ecx
c0000675:	eb f3                	jmp    c000066a <memcpy+0x25>
c0000677:	5b                   	pop    ebx
c0000678:	5e                   	pop    esi
c0000679:	5f                   	pop    edi
c000067a:	c3                   	ret    

c000067b <memset>:
c000067b:	53                   	push   ebx
c000067c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000680:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000684:	89 c2                	mov    edx,eax
c0000686:	01 c1                	add    ecx,eax
c0000688:	39 ca                	cmp    edx,ecx
c000068a:	74 0a                	je     c0000696 <memset+0x1b>
c000068c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000690:	42                   	inc    edx
c0000691:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000694:	eb f2                	jmp    c0000688 <memset+0xd>
c0000696:	5b                   	pop    ebx
c0000697:	c3                   	ret    

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a2:	74 03                	je     c00006a7 <strlen+0xf>
c00006a4:	40                   	inc    eax
c00006a5:	eb f7                	jmp    c000069e <strlen+0x6>
c00006a7:	c3                   	ret    

c00006a8 <strpbrk>:
c00006a8:	53                   	push   ebx
c00006a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ad:	8a 08                	mov    cl,BYTE PTR [eax]
c00006af:	84 c9                	test   cl,cl
c00006b1:	74 14                	je     c00006c7 <strpbrk+0x1f>
c00006b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006b9:	84 db                	test   bl,bl
c00006bb:	74 07                	je     c00006c4 <strpbrk+0x1c>
c00006bd:	38 cb                	cmp    bl,cl
c00006bf:	74 08                	je     c00006c9 <strpbrk+0x21>
c00006c1:	42                   	inc    edx
c00006c2:	eb f3                	jmp    c00006b7 <strpbrk+0xf>
c00006c4:	40                   	inc    eax
c00006c5:	eb e6                	jmp    c00006ad <strpbrk+0x5>
c00006c7:	31 c0                	xor    eax,eax
c00006c9:	5b                   	pop    ebx
c00006ca:	c3                   	ret    

c00006cb <strtok>:
c00006cb:	56                   	push   esi
c00006cc:	53                   	push   ebx
c00006cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d5:	85 db                	test   ebx,ebx
c00006d7:	75 0e                	jne    c00006e7 <strtok+0x1c>
c00006d9:	8b 1d 3c b4 02 c0    	mov    ebx,DWORD PTR ds:0xc002b43c
c00006df:	85 db                	test   ebx,ebx
c00006e1:	75 04                	jne    c00006e7 <strtok+0x1c>
c00006e3:	31 db                	xor    ebx,ebx
c00006e5:	eb 2e                	jmp    c0000715 <strtok+0x4a>
c00006e7:	56                   	push   esi
c00006e8:	53                   	push   ebx
c00006e9:	e8 ba ff ff ff       	call   c00006a8 <strpbrk>
c00006ee:	5a                   	pop    edx
c00006ef:	a3 3c b4 02 c0       	mov    ds:0xc002b43c,eax
c00006f4:	59                   	pop    ecx
c00006f5:	a1 3c b4 02 c0       	mov    eax,ds:0xc002b43c
c00006fa:	39 d8                	cmp    eax,ebx
c00006fc:	75 07                	jne    c0000705 <strtok+0x3a>
c00006fe:	43                   	inc    ebx
c00006ff:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000703:	eb e2                	jmp    c00006e7 <strtok+0x1c>
c0000705:	85 c0                	test   eax,eax
c0000707:	74 da                	je     c00006e3 <strtok+0x18>
c0000709:	8d 50 01             	lea    edx,[eax+0x1]
c000070c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000070f:	89 15 3c b4 02 c0    	mov    DWORD PTR ds:0xc002b43c,edx
c0000715:	89 d8                	mov    eax,ebx
c0000717:	5b                   	pop    ebx
c0000718:	5e                   	pop    esi
c0000719:	c3                   	ret    

c000071a <strcpy>:
c000071a:	53                   	push   ebx
c000071b:	31 d2                	xor    edx,edx
c000071d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000725:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000728:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072b:	84 c9                	test   cl,cl
c000072d:	74 06                	je     c0000735 <strcpy+0x1b>
c000072f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000732:	42                   	inc    edx
c0000733:	eb ec                	jmp    c0000721 <strcpy+0x7>
c0000735:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000738:	5b                   	pop    ebx
c0000739:	c3                   	ret    

c000073a <strncpy>:
c000073a:	56                   	push   esi
c000073b:	53                   	push   ebx
c000073c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000740:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000744:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000748:	89 c3                	mov    ebx,eax
c000074a:	85 c9                	test   ecx,ecx
c000074c:	74 1a                	je     c0000768 <strncpy+0x2e>
c000074e:	46                   	inc    esi
c000074f:	43                   	inc    ebx
c0000750:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000753:	49                   	dec    ecx
c0000754:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000757:	84 d2                	test   dl,dl
c0000759:	75 ef                	jne    c000074a <strncpy+0x10>
c000075b:	31 d2                	xor    edx,edx
c000075d:	39 d1                	cmp    ecx,edx
c000075f:	74 07                	je     c0000768 <strncpy+0x2e>
c0000761:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000765:	42                   	inc    edx
c0000766:	eb f5                	jmp    c000075d <strncpy+0x23>
c0000768:	5b                   	pop    ebx
c0000769:	5e                   	pop    esi
c000076a:	c3                   	ret    

c000076b <strcmp>:
c000076b:	31 c9                	xor    ecx,ecx
c000076d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000771:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000775:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000779:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077d:	38 d0                	cmp    al,dl
c000077f:	75 08                	jne    c0000789 <strcmp+0x1e>
c0000781:	41                   	inc    ecx
c0000782:	84 c0                	test   al,al
c0000784:	75 e7                	jne    c000076d <strcmp+0x2>
c0000786:	31 c0                	xor    eax,eax
c0000788:	c3                   	ret    
c0000789:	29 d0                	sub    eax,edx
c000078b:	c3                   	ret    

c000078c <strchr>:
c000078c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	84 d2                	test   dl,dl
c0000794:	74 09                	je     c000079f <strchr+0x13>
c0000796:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079a:	74 05                	je     c00007a1 <strchr+0x15>
c000079c:	40                   	inc    eax
c000079d:	eb f1                	jmp    c0000790 <strchr+0x4>
c000079f:	31 c0                	xor    eax,eax
c00007a1:	c3                   	ret    

c00007a2 <strncmp>:
c00007a2:	56                   	push   esi
c00007a3:	53                   	push   ebx
c00007a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b0:	01 d6                	add    esi,edx
c00007b2:	39 f2                	cmp    edx,esi
c00007b4:	74 12                	je     c00007c8 <strncmp+0x26>
c00007b6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007b9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007bc:	38 c8                	cmp    al,cl
c00007be:	75 0c                	jne    c00007cc <strncmp+0x2a>
c00007c0:	42                   	inc    edx
c00007c1:	84 c0                	test   al,al
c00007c3:	74 03                	je     c00007c8 <strncmp+0x26>
c00007c5:	43                   	inc    ebx
c00007c6:	eb ea                	jmp    c00007b2 <strncmp+0x10>
c00007c8:	31 c0                	xor    eax,eax
c00007ca:	eb 02                	jmp    c00007ce <strncmp+0x2c>
c00007cc:	29 c8                	sub    eax,ecx
c00007ce:	5b                   	pop    ebx
c00007cf:	5e                   	pop    esi
c00007d0:	c3                   	ret    

c00007d1 <strcat>:
c00007d1:	53                   	push   ebx
c00007d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d6:	89 c1                	mov    ecx,eax
c00007d8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007db:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007df:	74 04                	je     c00007e5 <strcat+0x14>
c00007e1:	89 d1                	mov    ecx,edx
c00007e3:	eb f3                	jmp    c00007d8 <strcat+0x7>
c00007e5:	31 d2                	xor    edx,edx
c00007e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007eb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007ee:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f1:	42                   	inc    edx
c00007f2:	84 db                	test   bl,bl
c00007f4:	75 f1                	jne    c00007e7 <strcat+0x16>
c00007f6:	5b                   	pop    ebx
c00007f7:	c3                   	ret    

c00007f8 <strncat>:
c00007f8:	56                   	push   esi
c00007f9:	53                   	push   ebx
c00007fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000802:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000806:	89 c2                	mov    edx,eax
c0000808:	85 db                	test   ebx,ebx
c000080a:	74 23                	je     c000082f <strncat+0x37>
c000080c:	8d 72 01             	lea    esi,[edx+0x1]
c000080f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000813:	74 04                	je     c0000819 <strncat+0x21>
c0000815:	89 f2                	mov    edx,esi
c0000817:	eb f3                	jmp    c000080c <strncat+0x14>
c0000819:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081c:	41                   	inc    ecx
c000081d:	42                   	inc    edx
c000081e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000821:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000824:	84 db                	test   bl,bl
c0000826:	74 07                	je     c000082f <strncat+0x37>
c0000828:	39 f1                	cmp    ecx,esi
c000082a:	75 f0                	jne    c000081c <strncat+0x24>
c000082c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000082f:	5b                   	pop    ebx
c0000830:	5e                   	pop    esi
c0000831:	c3                   	ret    

c0000832 <strstr>:
c0000832:	57                   	push   edi
c0000833:	56                   	push   esi
c0000834:	53                   	push   ebx
c0000835:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000839:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083d:	57                   	push   edi
c000083e:	e8 55 fe ff ff       	call   c0000698 <strlen>
c0000843:	59                   	pop    ecx
c0000844:	89 c6                	mov    esi,eax
c0000846:	85 c0                	test   eax,eax
c0000848:	74 1f                	je     c0000869 <strstr+0x37>
c000084a:	53                   	push   ebx
c000084b:	e8 48 fe ff ff       	call   c0000698 <strlen>
c0000850:	5a                   	pop    edx
c0000851:	39 f0                	cmp    eax,esi
c0000853:	72 12                	jb     c0000867 <strstr+0x35>
c0000855:	56                   	push   esi
c0000856:	57                   	push   edi
c0000857:	53                   	push   ebx
c0000858:	e8 85 fd ff ff       	call   c00005e2 <memcmp>
c000085d:	83 c4 0c             	add    esp,0xc
c0000860:	85 c0                	test   eax,eax
c0000862:	74 05                	je     c0000869 <strstr+0x37>
c0000864:	43                   	inc    ebx
c0000865:	eb e3                	jmp    c000084a <strstr+0x18>
c0000867:	31 db                	xor    ebx,ebx
c0000869:	89 d8                	mov    eax,ebx
c000086b:	5b                   	pop    ebx
c000086c:	5e                   	pop    esi
c000086d:	5f                   	pop    edi
c000086e:	c3                   	ret    

c000086f <toupper>:
c000086f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000873:	0f b6 d0             	movzx  edx,al
c0000876:	f6 82 20 6d 02 c0 02 	test   BYTE PTR [edx-0x3ffd92e0],0x2
c000087d:	74 03                	je     c0000882 <toupper+0x13>
c000087f:	83 e8 20             	sub    eax,0x20
c0000882:	c3                   	ret    

c0000883 <tolower>:
c0000883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000887:	0f b6 d0             	movzx  edx,al
c000088a:	f6 82 20 6d 02 c0 01 	test   BYTE PTR [edx-0x3ffd92e0],0x1
c0000891:	74 03                	je     c0000896 <tolower+0x13>
c0000893:	83 c0 20             	add    eax,0x20
c0000896:	c3                   	ret    

c0000897 <simple_strtoul>:
c0000897:	55                   	push   ebp
c0000898:	57                   	push   edi
c0000899:	56                   	push   esi
c000089a:	53                   	push   ebx
c000089b:	83 ec 08             	sub    esp,0x8
c000089e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008a9:	f6 82 20 6d 02 c0 08 	test   BYTE PTR [edx-0x3ffd92e0],0x8
c00008b0:	74 03                	je     c00008b5 <simple_strtoul+0x1e>
c00008b2:	41                   	inc    ecx
c00008b3:	eb f1                	jmp    c00008a6 <simple_strtoul+0xf>
c00008b5:	80 fa 09             	cmp    dl,0x9
c00008b8:	74 f8                	je     c00008b2 <simple_strtoul+0x1b>
c00008ba:	80 fa 2d             	cmp    dl,0x2d
c00008bd:	75 0b                	jne    c00008ca <simple_strtoul+0x33>
c00008bf:	41                   	inc    ecx
c00008c0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008c8:	eb 0e                	jmp    c00008d8 <simple_strtoul+0x41>
c00008ca:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d2:	80 fa 2b             	cmp    dl,0x2b
c00008d5:	75 01                	jne    c00008d8 <simple_strtoul+0x41>
c00008d7:	41                   	inc    ecx
c00008d8:	85 f6                	test   esi,esi
c00008da:	75 22                	jne    c00008fe <simple_strtoul+0x67>
c00008dc:	be 0a 00 00 00       	mov    esi,0xa
c00008e1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e4:	75 5a                	jne    c0000940 <simple_strtoul+0xa9>
c00008e6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008ea:	50                   	push   eax
c00008eb:	e8 93 ff ff ff       	call   c0000883 <tolower>
c00008f0:	5a                   	pop    edx
c00008f1:	83 f8 78             	cmp    eax,0x78
c00008f4:	74 03                	je     c00008f9 <simple_strtoul+0x62>
c00008f6:	41                   	inc    ecx
c00008f7:	eb 16                	jmp    c000090f <simple_strtoul+0x78>
c00008f9:	83 c1 02             	add    ecx,0x2
c00008fc:	eb 22                	jmp    c0000920 <simple_strtoul+0x89>
c00008fe:	8d 46 fe             	lea    eax,[esi-0x2]
c0000901:	83 f8 22             	cmp    eax,0x22
c0000904:	0f 87 b7 00 00 00    	ja     c00009c1 <simple_strtoul+0x12a>
c000090a:	83 fe 08             	cmp    esi,0x8
c000090d:	75 0c                	jne    c000091b <simple_strtoul+0x84>
c000090f:	be 08 00 00 00       	mov    esi,0x8
c0000914:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000917:	75 27                	jne    c0000940 <simple_strtoul+0xa9>
c0000919:	eb 1f                	jmp    c000093a <simple_strtoul+0xa3>
c000091b:	83 fe 10             	cmp    esi,0x10
c000091e:	75 20                	jne    c0000940 <simple_strtoul+0xa9>
c0000920:	be 10 00 00 00       	mov    esi,0x10
c0000925:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000928:	75 16                	jne    c0000940 <simple_strtoul+0xa9>
c000092a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000092e:	50                   	push   eax
c000092f:	e8 4f ff ff ff       	call   c0000883 <tolower>
c0000934:	5d                   	pop    ebp
c0000935:	83 f8 78             	cmp    eax,0x78
c0000938:	74 03                	je     c000093d <simple_strtoul+0xa6>
c000093a:	41                   	inc    ecx
c000093b:	eb 03                	jmp    c0000940 <simple_strtoul+0xa9>
c000093d:	83 c1 02             	add    ecx,0x2
c0000940:	31 ed                	xor    ebp,ebp
c0000942:	31 db                	xor    ebx,ebx
c0000944:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094d:	84 d2                	test   dl,dl
c000094f:	74 27                	je     c0000978 <simple_strtoul+0xe1>
c0000951:	0f b6 fa             	movzx  edi,dl
c0000954:	f6 87 20 6d 02 c0 04 	test   BYTE PTR [edi-0x3ffd92e0],0x4
c000095b:	74 05                	je     c0000962 <simple_strtoul+0xcb>
c000095d:	83 ef 30             	sub    edi,0x30
c0000960:	eb 22                	jmp    c0000984 <simple_strtoul+0xed>
c0000962:	0f be d2             	movsx  edx,dl
c0000965:	52                   	push   edx
c0000966:	e8 04 ff ff ff       	call   c000086f <toupper>
c000096b:	5f                   	pop    edi
c000096c:	0f b6 d0             	movzx  edx,al
c000096f:	f6 82 20 6d 02 c0 01 	test   BYTE PTR [edx-0x3ffd92e0],0x1
c0000976:	75 09                	jne    c0000981 <simple_strtoul+0xea>
c0000978:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097d:	75 2d                	jne    c00009ac <simple_strtoul+0x115>
c000097f:	eb 57                	jmp    c00009d8 <simple_strtoul+0x141>
c0000981:	8d 78 c9             	lea    edi,[eax-0x37]
c0000984:	39 f7                	cmp    edi,esi
c0000986:	73 f0                	jae    c0000978 <simple_strtoul+0xe1>
c0000988:	31 d2                	xor    edx,edx
c000098a:	89 f8                	mov    eax,edi
c000098c:	f7 d0                	not    eax
c000098e:	f7 f6                	div    esi
c0000990:	39 d8                	cmp    eax,ebx
c0000992:	72 0e                	jb     c00009a2 <simple_strtoul+0x10b>
c0000994:	0f af de             	imul   ebx,esi
c0000997:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000099e:	01 fb                	add    ebx,edi
c00009a0:	eb 07                	jmp    c00009a9 <simple_strtoul+0x112>
c00009a2:	bd 01 00 00 00       	mov    ebp,0x1
c00009a7:	31 db                	xor    ebx,ebx
c00009a9:	41                   	inc    ecx
c00009aa:	eb 9f                	jmp    c000094b <simple_strtoul+0xb4>
c00009ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009af:	09 d8                	or     eax,ebx
c00009b1:	75 1f                	jne    c00009d2 <simple_strtoul+0x13b>
c00009b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	89 38                	mov    DWORD PTR [eax],edi
c00009bf:	eb 17                	jmp    c00009d8 <simple_strtoul+0x141>
c00009c1:	31 db                	xor    ebx,ebx
c00009c3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c8:	74 14                	je     c00009de <simple_strtoul+0x147>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	85 c9                	test   ecx,ecx
c00009ce:	75 e3                	jne    c00009b3 <simple_strtoul+0x11c>
c00009d0:	31 db                	xor    ebx,ebx
c00009d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d6:	89 08                	mov    DWORD PTR [eax],ecx
c00009d8:	4d                   	dec    ebp
c00009d9:	75 03                	jne    c00009de <simple_strtoul+0x147>
c00009db:	83 cb ff             	or     ebx,0xffffffff
c00009de:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e3:	75 02                	jne    c00009e7 <simple_strtoul+0x150>
c00009e5:	f7 db                	neg    ebx
c00009e7:	83 c4 08             	add    esp,0x8
c00009ea:	89 d8                	mov    eax,ebx
c00009ec:	5b                   	pop    ebx
c00009ed:	5e                   	pop    esi
c00009ee:	5f                   	pop    edi
c00009ef:	5d                   	pop    ebp
c00009f0:	c3                   	ret    

c00009f1 <largebin_index>:
c00009f1:	89 c2                	mov    edx,eax
c00009f3:	c1 ea 08             	shr    edx,0x8
c00009f6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fc:	77 10                	ja     c0000a0e <largebin_index+0x1d>
c00009fe:	0f bd d2             	bsr    edx,edx
c0000a01:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a04:	d3 e8                	shr    eax,cl
c0000a06:	83 e0 03             	and    eax,0x3
c0000a09:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0d:	c3                   	ret    
c0000a0e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a13:	c3                   	ret    

c0000a14 <malloc_init_state>:
c0000a14:	53                   	push   ebx
c0000a15:	8d 50 34             	lea    edx,[eax+0x34]
c0000a18:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a1e:	89 d1                	mov    ecx,edx
c0000a20:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a23:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a26:	83 c2 08             	add    edx,0x8
c0000a29:	39 da                	cmp    edx,ebx
c0000a2b:	75 f3                	jne    c0000a20 <malloc_init_state+0xc>
c0000a2d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a2f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a39:	83 e2 03             	and    edx,0x3
c0000a3c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a46:	83 ca 48             	or     edx,0x48
c0000a49:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a53:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a64:	89 10                	mov    DWORD PTR [eax],edx
c0000a66:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a69:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a73:	5b                   	pop    ebx
c0000a74:	c3                   	ret    

c0000a75 <malloc_consolidate>:
c0000a75:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a77:	85 d2                	test   edx,edx
c0000a79:	0f 84 d8 00 00 00    	je     c0000b57 <malloc_consolidate+0xe2>
c0000a7f:	55                   	push   ebp
c0000a80:	83 e2 fd             	and    edx,0xfffffffd
c0000a83:	57                   	push   edi
c0000a84:	89 c5                	mov    ebp,eax
c0000a86:	56                   	push   esi
c0000a87:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8a:	53                   	push   ebx
c0000a8b:	83 ec 10             	sub    esp,0x10
c0000a8e:	89 10                	mov    DWORD PTR [eax],edx
c0000a90:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a94:	c1 ea 03             	shr    edx,0x3
c0000a97:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a9f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa2:	85 d2                	test   edx,edx
c0000aa4:	0f 84 98 00 00 00    	je     c0000b42 <malloc_consolidate+0xcd>
c0000aaa:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abb:	89 f9                	mov    ecx,edi
c0000abd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ac9:	83 e7 01             	and    edi,0x1
c0000acc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000acf:	75 14                	jne    c0000ae5 <malloc_consolidate+0x70>
c0000ad1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad3:	29 fa                	sub    edx,edi
c0000ad5:	01 f9                	add    ecx,edi
c0000ad7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ada:	89 fb                	mov    ebx,edi
c0000adc:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000adf:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ae8:	74 40                	je     c0000b2a <malloc_consolidate+0xb5>
c0000aea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af0:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af4:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af7:	83 e7 01             	and    edi,0x1
c0000afa:	75 0e                	jne    c0000b0a <malloc_consolidate+0x95>
c0000afc:	01 d9                	add    ecx,ebx
c0000afe:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b01:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b04:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b07:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0d:	89 ce                	mov    esi,ecx
c0000b0f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b12:	83 ce 01             	or     esi,0x1
c0000b15:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b18:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b22:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b25:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b28:	eb 0c                	jmp    c0000b36 <malloc_consolidate+0xc1>
c0000b2a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2d:	83 c9 01             	or     ecx,0x1
c0000b30:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b33:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3a:	85 d2                	test   edx,edx
c0000b3c:	0f 85 6f ff ff ff    	jne    c0000ab1 <malloc_consolidate+0x3c>
c0000b42:	83 c5 04             	add    ebp,0x4
c0000b45:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b49:	0f 85 50 ff ff ff    	jne    c0000a9f <malloc_consolidate+0x2a>
c0000b4f:	83 c4 10             	add    esp,0x10
c0000b52:	5b                   	pop    ebx
c0000b53:	5e                   	pop    esi
c0000b54:	5f                   	pop    edi
c0000b55:	5d                   	pop    ebp
c0000b56:	c3                   	ret    
c0000b57:	e9 b8 fe ff ff       	jmp    c0000a14 <malloc_init_state>

c0000b5c <dlfree>:
c0000b5c:	57                   	push   edi
c0000b5d:	56                   	push   esi
c0000b5e:	53                   	push   ebx
c0000b5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b63:	85 db                	test   ebx,ebx
c0000b65:	0f 84 e2 00 00 00    	je     c0000c4d <dlfree+0xf1>
c0000b6b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b6e:	8b 0d 40 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b440
c0000b74:	89 f0                	mov    eax,esi
c0000b76:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b79:	83 e0 fc             	and    eax,0xfffffffc
c0000b7c:	39 c1                	cmp    ecx,eax
c0000b7e:	72 24                	jb     c0000ba4 <dlfree+0x48>
c0000b80:	83 c9 03             	or     ecx,0x3
c0000b83:	c1 e8 03             	shr    eax,0x3
c0000b86:	89 0d 40 b4 02 c0    	mov    DWORD PTR ds:0xc002b440,ecx
c0000b8c:	83 e8 02             	sub    eax,0x2
c0000b8f:	8b 0c 85 44 b4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4bbc]
c0000b96:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b98:	89 14 85 44 b4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4bbc],edx
c0000b9f:	e9 a9 00 00 00       	jmp    c0000c4d <dlfree+0xf1>
c0000ba4:	83 e6 02             	and    esi,0x2
c0000ba7:	0f 85 a0 00 00 00    	jne    c0000c4d <dlfree+0xf1>
c0000bad:	83 c9 01             	or     ecx,0x1
c0000bb0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb3:	89 0d 40 b4 02 c0    	mov    DWORD PTR ds:0xc002b440,ecx
c0000bb9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bbf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc3:	75 13                	jne    c0000bd8 <dlfree+0x7c>
c0000bc5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bc8:	29 da                	sub    edx,ebx
c0000bca:	01 d8                	add    eax,ebx
c0000bcc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bcf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bd8:	39 35 6c b4 02 c0    	cmp    DWORD PTR ds:0xc002b46c,esi
c0000bde:	74 40                	je     c0000c20 <dlfree+0xc4>
c0000be0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be7:	80 e3 01             	and    bl,0x1
c0000bea:	75 0e                	jne    c0000bfa <dlfree+0x9e>
c0000bec:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bef:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf2:	01 c8                	add    eax,ecx
c0000bf4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfa:	8b 0d 7c b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b47c
c0000c00:	c7 42 0c 74 b4 02 c0 	mov    DWORD PTR [edx+0xc],0xc002b474
c0000c07:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0a:	89 15 7c b4 02 c0    	mov    DWORD PTR ds:0xc002b47c,edx
c0000c10:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c13:	89 c1                	mov    ecx,eax
c0000c15:	83 c9 01             	or     ecx,0x1
c0000c18:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c1e:	eb 10                	jmp    c0000c30 <dlfree+0xd4>
c0000c20:	01 c8                	add    eax,ecx
c0000c22:	89 c1                	mov    ecx,eax
c0000c24:	83 c9 01             	or     ecx,0x1
c0000c27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2a:	89 15 6c b4 02 c0    	mov    DWORD PTR ds:0xc002b46c,edx
c0000c30:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c35:	76 16                	jbe    c0000c4d <dlfree+0xf1>
c0000c37:	f6 05 40 b4 02 c0 02 	test   BYTE PTR ds:0xc002b440,0x2
c0000c3e:	74 0d                	je     c0000c4d <dlfree+0xf1>
c0000c40:	5b                   	pop    ebx
c0000c41:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c0000c46:	5e                   	pop    esi
c0000c47:	5f                   	pop    edi
c0000c48:	e9 28 fe ff ff       	jmp    c0000a75 <malloc_consolidate>
c0000c4d:	5b                   	pop    ebx
c0000c4e:	5e                   	pop    esi
c0000c4f:	5f                   	pop    edi
c0000c50:	c3                   	ret    

c0000c51 <sYSMALLOc>:
c0000c51:	55                   	push   ebp
c0000c52:	57                   	push   edi
c0000c53:	56                   	push   esi
c0000c54:	53                   	push   ebx
c0000c55:	89 d3                	mov    ebx,edx
c0000c57:	83 ec 2c             	sub    esp,0x2c
c0000c5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c5e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c64:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c67:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c6e:	74 1f                	je     c0000c8f <sYSMALLOc+0x3e>
c0000c70:	89 d8                	mov    eax,ebx
c0000c72:	e8 fe fd ff ff       	call   c0000a75 <malloc_consolidate>
c0000c77:	83 ec 0c             	sub    esp,0xc
c0000c7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c7e:	83 e8 07             	sub    eax,0x7
c0000c81:	50                   	push   eax
c0000c82:	e8 30 02 00 00       	call   c0000eb7 <dlmalloc>
c0000c87:	83 c4 10             	add    esp,0x10
c0000c8a:	e9 20 02 00 00       	jmp    c0000eaf <sYSMALLOc+0x25e>
c0000c8f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c92:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c98:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9b:	83 e0 fc             	and    eax,0xfffffffc
c0000c9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca6:	83 c0 10             	add    eax,0x10
c0000ca9:	01 c1                	add    ecx,eax
c0000cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000caf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb6:	74 04                	je     c0000cbc <sYSMALLOc+0x6b>
c0000cb8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbc:	f7 da                	neg    edx
c0000cbe:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc6:	21 d1                	and    ecx,edx
c0000cc8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ccc:	7f 07                	jg     c0000cd5 <sYSMALLOc+0x84>
c0000cce:	31 c0                	xor    eax,eax
c0000cd0:	e9 da 01 00 00       	jmp    c0000eaf <sYSMALLOc+0x25e>
c0000cd5:	83 ec 0c             	sub    esp,0xc
c0000cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cdc:	e8 36 e6 00 00       	call   c000f317 <sbrk>
c0000ce1:	83 c4 10             	add    esp,0x10
c0000ce4:	89 c6                	mov    esi,eax
c0000ce6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ce9:	74 e3                	je     c0000cce <sYSMALLOc+0x7d>
c0000ceb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cef:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf6:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfc:	39 f1                	cmp    ecx,esi
c0000cfe:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d04:	75 13                	jne    c0000d19 <sYSMALLOc+0xc8>
c0000d06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0e:	83 c8 01             	or     eax,0x1
c0000d11:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d14:	e9 3e 01 00 00       	jmp    c0000e57 <sYSMALLOc+0x206>
c0000d19:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d1f:	88 d0                	mov    al,dl
c0000d21:	83 e0 01             	and    eax,0x1
c0000d24:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d29:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2d:	0f 95 c0             	setne  al
c0000d30:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d34:	39 f1                	cmp    ecx,esi
c0000d36:	76 12                	jbe    c0000d4a <sYSMALLOc+0xf9>
c0000d38:	84 c0                	test   al,al
c0000d3a:	74 0e                	je     c0000d4a <sYSMALLOc+0xf9>
c0000d3c:	83 e2 fe             	and    edx,0xfffffffe
c0000d3f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d45:	e9 83 00 00 00       	jmp    c0000dcd <sYSMALLOc+0x17c>
c0000d4a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d4f:	74 7c                	je     c0000dcd <sYSMALLOc+0x17c>
c0000d51:	84 c0                	test   al,al
c0000d53:	74 0c                	je     c0000d61 <sYSMALLOc+0x110>
c0000d55:	89 f0                	mov    eax,esi
c0000d57:	29 c8                	sub    eax,ecx
c0000d59:	01 e8                	add    eax,ebp
c0000d5b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d61:	89 f2                	mov    edx,esi
c0000d63:	83 e2 07             	and    edx,0x7
c0000d66:	74 0c                	je     c0000d74 <sYSMALLOc+0x123>
c0000d68:	b8 08 00 00 00       	mov    eax,0x8
c0000d6d:	29 d0                	sub    eax,edx
c0000d6f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d72:	eb 04                	jmp    c0000d78 <sYSMALLOc+0x127>
c0000d74:	89 f5                	mov    ebp,esi
c0000d76:	31 c0                	xor    eax,eax
c0000d78:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d84:	01 c1                	add    ecx,eax
c0000d86:	83 ec 0c             	sub    esp,0xc
c0000d89:	01 f1                	add    ecx,esi
c0000d8b:	01 ca                	add    edx,ecx
c0000d8d:	29 c8                	sub    eax,ecx
c0000d8f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d93:	01 c2                	add    edx,eax
c0000d95:	52                   	push   edx
c0000d96:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9a:	e8 78 e5 00 00       	call   c000f317 <sbrk>
c0000d9f:	83 c4 10             	add    esp,0x10
c0000da2:	83 f8 ff             	cmp    eax,0xffffffff
c0000da5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000da9:	75 0f                	jne    c0000dba <sYSMALLOc+0x169>
c0000dab:	83 ec 0c             	sub    esp,0xc
c0000dae:	6a 00                	push   0x0
c0000db0:	e8 62 e5 00 00       	call   c000f317 <sbrk>
c0000db5:	83 c4 10             	add    esp,0x10
c0000db8:	eb 30                	jmp    c0000dea <sYSMALLOc+0x199>
c0000dba:	39 c6                	cmp    esi,eax
c0000dbc:	76 33                	jbe    c0000df1 <sYSMALLOc+0x1a0>
c0000dbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dc9:	01 f0                	add    eax,esi
c0000dcb:	eb 1d                	jmp    c0000dea <sYSMALLOc+0x199>
c0000dcd:	83 ec 0c             	sub    esp,0xc
c0000dd0:	89 f5                	mov    ebp,esi
c0000dd2:	6a 00                	push   0x0
c0000dd4:	e8 3e e5 00 00       	call   c000f317 <sbrk>
c0000dd9:	89 c2                	mov    edx,eax
c0000ddb:	29 f2                	sub    edx,esi
c0000ddd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dea:	31 d2                	xor    edx,edx
c0000dec:	83 f8 ff             	cmp    eax,0xffffffff
c0000def:	74 66                	je     c0000e57 <sYSMALLOc+0x206>
c0000df1:	29 e8                	sub    eax,ebp
c0000df3:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df6:	01 d0                	add    eax,edx
c0000df8:	83 c8 01             	or     eax,0x1
c0000dfb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000dfe:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e04:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e09:	74 4c                	je     c0000e57 <sYSMALLOc+0x206>
c0000e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e0f:	83 e8 0c             	sub    eax,0xc
c0000e12:	83 e0 f8             	and    eax,0xfffffff8
c0000e15:	89 c2                	mov    edx,eax
c0000e17:	83 ca 01             	or     edx,0x1
c0000e1a:	83 f8 0f             	cmp    eax,0xf
c0000e1d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e20:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e28:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e30:	76 25                	jbe    c0000e57 <sYSMALLOc+0x206>
c0000e32:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e38:	83 ec 0c             	sub    esp,0xc
c0000e3b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e45:	83 c7 08             	add    edi,0x8
c0000e48:	57                   	push   edi
c0000e49:	e8 0e fd ff ff       	call   c0000b5c <dlfree>
c0000e4e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e54:	83 c4 10             	add    esp,0x10
c0000e57:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e63:	73 06                	jae    c0000e6b <sYSMALLOc+0x21a>
c0000e65:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e71:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e77:	73 06                	jae    c0000e7f <sYSMALLOc+0x22e>
c0000e79:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e7f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e82:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e85:	83 e2 fc             	and    edx,0xfffffffc
c0000e88:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8c:	0f 82 3c fe ff ff    	jb     c0000cce <sYSMALLOc+0x7d>
c0000e92:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e96:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e99:	29 fa                	sub    edx,edi
c0000e9b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e9e:	83 ca 01             	or     edx,0x1
c0000ea1:	89 fb                	mov    ebx,edi
c0000ea3:	83 c0 08             	add    eax,0x8
c0000ea6:	83 cb 01             	or     ebx,0x1
c0000ea9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000eac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eaf:	83 c4 2c             	add    esp,0x2c
c0000eb2:	5b                   	pop    ebx
c0000eb3:	5e                   	pop    esi
c0000eb4:	5f                   	pop    edi
c0000eb5:	5d                   	pop    ebp
c0000eb6:	c3                   	ret    

c0000eb7 <dlmalloc>:
c0000eb7:	55                   	push   ebp
c0000eb8:	57                   	push   edi
c0000eb9:	56                   	push   esi
c0000eba:	53                   	push   ebx
c0000ebb:	83 ec 1c             	sub    esp,0x1c
c0000ebe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec5:	0f 87 70 03 00 00    	ja     c000123b <dlmalloc+0x384>
c0000ecb:	83 c0 0b             	add    eax,0xb
c0000ece:	be 10 00 00 00       	mov    esi,0x10
c0000ed3:	83 f8 0f             	cmp    eax,0xf
c0000ed6:	76 05                	jbe    c0000edd <dlmalloc+0x26>
c0000ed8:	83 e0 f8             	and    eax,0xfffffff8
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	8b 3d 40 b4 02 c0    	mov    edi,DWORD PTR ds:0xc002b440
c0000ee3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ee9:	75 17                	jne    c0000f02 <dlmalloc+0x4b>
c0000eeb:	85 ff                	test   edi,edi
c0000eed:	0f 85 05 03 00 00    	jne    c00011f8 <dlmalloc+0x341>
c0000ef3:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c0000ef8:	e8 78 fb ff ff       	call   c0000a75 <malloc_consolidate>
c0000efd:	e9 f6 02 00 00       	jmp    c00011f8 <dlmalloc+0x341>
c0000f02:	39 f7                	cmp    edi,esi
c0000f04:	72 1f                	jb     c0000f25 <dlmalloc+0x6e>
c0000f06:	89 f2                	mov    edx,esi
c0000f08:	c1 ea 03             	shr    edx,0x3
c0000f0b:	83 ea 02             	sub    edx,0x2
c0000f0e:	8b 04 95 44 b4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4bbc]
c0000f15:	85 c0                	test   eax,eax
c0000f17:	74 0c                	je     c0000f25 <dlmalloc+0x6e>
c0000f19:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1c:	89 0c 95 44 b4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4bbc],ecx
c0000f23:	eb 30                	jmp    c0000f55 <dlmalloc+0x9e>
c0000f25:	89 f0                	mov    eax,esi
c0000f27:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2d:	77 2e                	ja     c0000f5d <dlmalloc+0xa6>
c0000f2f:	c1 e8 03             	shr    eax,0x3
c0000f32:	8d 14 c5 74 b4 02 c0 	lea    edx,[eax*8-0x3ffd4b8c]
c0000f39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f40:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f43:	39 c3                	cmp    ebx,eax
c0000f45:	74 2e                	je     c0000f75 <dlmalloc+0xbe>
c0000f47:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f4f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f52:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f55:	83 c0 08             	add    eax,0x8
c0000f58:	e9 e0 02 00 00       	jmp    c000123d <dlmalloc+0x386>
c0000f5d:	e8 8f fa ff ff       	call   c00009f1 <largebin_index>
c0000f62:	83 e7 02             	and    edi,0x2
c0000f65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f69:	74 0a                	je     c0000f75 <dlmalloc+0xbe>
c0000f6b:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c0000f70:	e8 00 fb ff ff       	call   c0000a75 <malloc_consolidate>
c0000f75:	8d 46 10             	lea    eax,[esi+0x10]
c0000f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7c:	8b 1d 80 b4 02 c0    	mov    ebx,DWORD PTR ds:0xc002b480
c0000f82:	81 fb 74 b4 02 c0    	cmp    ebx,0xc002b474
c0000f88:	0f 84 13 01 00 00    	je     c00010a1 <dlmalloc+0x1ea>
c0000f8e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f91:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f94:	83 e7 fc             	and    edi,0xfffffffc
c0000f97:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9d:	77 4c                	ja     c0000feb <dlmalloc+0x134>
c0000f9f:	3d 74 b4 02 c0       	cmp    eax,0xc002b474
c0000fa4:	75 45                	jne    c0000feb <dlmalloc+0x134>
c0000fa6:	39 1d 70 b4 02 c0    	cmp    DWORD PTR ds:0xc002b470,ebx
c0000fac:	75 3d                	jne    c0000feb <dlmalloc+0x134>
c0000fae:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb2:	73 37                	jae    c0000feb <dlmalloc+0x134>
c0000fb4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb7:	89 fa                	mov    edx,edi
c0000fb9:	a3 7c b4 02 c0       	mov    ds:0xc002b47c,eax
c0000fbe:	a3 80 b4 02 c0       	mov    ds:0xc002b480,eax
c0000fc3:	a3 70 b4 02 c0       	mov    ds:0xc002b470,eax
c0000fc8:	29 f2                	sub    edx,esi
c0000fca:	c7 40 08 74 b4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002b474
c0000fd1:	c7 40 0c 74 b4 02 c0 	mov    DWORD PTR [eax+0xc],0xc002b474
c0000fd8:	83 ce 01             	or     esi,0x1
c0000fdb:	89 d1                	mov    ecx,edx
c0000fdd:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe0:	83 c9 01             	or     ecx,0x1
c0000fe3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000fe9:	eb 15                	jmp    c0001000 <dlmalloc+0x149>
c0000feb:	a3 80 b4 02 c0       	mov    ds:0xc002b480,eax
c0000ff0:	39 fe                	cmp    esi,edi
c0000ff2:	c7 40 08 74 b4 02 c0 	mov    DWORD PTR [eax+0x8],0xc002b474
c0000ff9:	75 0d                	jne    c0001008 <dlmalloc+0x151>
c0000ffb:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001000:	8d 43 08             	lea    eax,[ebx+0x8]
c0001003:	e9 35 02 00 00       	jmp    c000123d <dlmalloc+0x386>
c0001008:	89 f8                	mov    eax,edi
c000100a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001010:	77 19                	ja     c000102b <dlmalloc+0x174>
c0001012:	c1 e8 03             	shr    eax,0x3
c0001015:	8d 14 00             	lea    edx,[eax+eax*1]
c0001018:	83 c2 0d             	add    edx,0xd
c000101b:	8d 2c 95 38 b4 02 c0 	lea    ebp,[edx*4-0x3ffd4bc8]
c0001022:	8b 14 95 40 b4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4bc0]
c0001029:	eb 46                	jmp    c0001071 <dlmalloc+0x1ba>
c000102b:	e8 c1 f9 ff ff       	call   c00009f1 <largebin_index>
c0001030:	8d 14 00             	lea    edx,[eax+eax*1]
c0001033:	83 c2 0d             	add    edx,0xd
c0001036:	8d 0c 95 40 b4 02 c0 	lea    ecx,[edx*4-0x3ffd4bc0]
c000103d:	8b 14 95 40 b4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4bc0]
c0001044:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001047:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104b:	89 d5                	mov    ebp,edx
c000104d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001051:	74 1e                	je     c0001071 <dlmalloc+0x1ba>
c0001053:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001056:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001059:	77 12                	ja     c000106d <dlmalloc+0x1b6>
c000105b:	83 cf 01             	or     edi,0x1
c000105e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001061:	76 05                	jbe    c0001068 <dlmalloc+0x1b1>
c0001063:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001066:	eb f6                	jmp    c000105e <dlmalloc+0x1a7>
c0001068:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106b:	eb 04                	jmp    c0001071 <dlmalloc+0x1ba>
c000106d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001071:	89 c7                	mov    edi,eax
c0001073:	88 c1                	mov    cl,al
c0001075:	c1 ff 05             	sar    edi,0x5
c0001078:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107c:	bf 01 00 00 00       	mov    edi,0x1
c0001081:	d3 e7                	shl    edi,cl
c0001083:	89 f8                	mov    eax,edi
c0001085:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001089:	09 04 bd 74 b7 02 c0 	or     DWORD PTR [edi*4-0x3ffd488c],eax
c0001090:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001093:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001096:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001099:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109c:	e9 db fe ff ff       	jmp    c0000f7c <dlmalloc+0xc5>
c00010a1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a7:	76 78                	jbe    c0001121 <dlmalloc+0x26a>
c00010a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ad:	8d 04 c5 74 b4 02 c0 	lea    eax,[eax*8-0x3ffd4b8c]
c00010b4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ba:	39 ca                	cmp    edx,ecx
c00010bc:	74 63                	je     c0001121 <dlmalloc+0x26a>
c00010be:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c4:	83 e3 fc             	and    ebx,0xfffffffc
c00010c7:	39 de                	cmp    esi,ebx
c00010c9:	77 52                	ja     c000111d <dlmalloc+0x266>
c00010cb:	89 df                	mov    edi,ebx
c00010cd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d0:	29 f7                	sub    edi,esi
c00010d2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d5:	01 d3                	add    ebx,edx
c00010d7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010da:	83 ff 0f             	cmp    edi,0xf
c00010dd:	8d 42 08             	lea    eax,[edx+0x8]
c00010e0:	77 09                	ja     c00010eb <dlmalloc+0x234>
c00010e2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e6:	e9 52 01 00 00       	jmp    c000123d <dlmalloc+0x386>
c00010eb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010ee:	83 ce 01             	or     esi,0x1
c00010f1:	89 0d 7c b4 02 c0    	mov    DWORD PTR ds:0xc002b47c,ecx
c00010f7:	89 0d 80 b4 02 c0    	mov    DWORD PTR ds:0xc002b480,ecx
c00010fd:	c7 41 08 74 b4 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002b474
c0001104:	c7 41 0c 74 b4 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002b474
c000110b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000110e:	89 fa                	mov    edx,edi
c0001110:	83 ca 01             	or     edx,0x1
c0001113:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001116:	89 3b                	mov    DWORD PTR [ebx],edi
c0001118:	e9 20 01 00 00       	jmp    c000123d <dlmalloc+0x386>
c000111d:	89 c2                	mov    edx,eax
c000111f:	eb 99                	jmp    c00010ba <dlmalloc+0x203>
c0001121:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001125:	b8 01 00 00 00       	mov    eax,0x1
c000112a:	41                   	inc    ecx
c000112b:	89 cb                	mov    ebx,ecx
c000112d:	8d 14 cd 6c b4 02 c0 	lea    edx,[ecx*8-0x3ffd4b94]
c0001134:	c1 eb 05             	shr    ebx,0x5
c0001137:	d3 e0                	shl    eax,cl
c0001139:	8b 3c 9d 74 b7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd488c]
c0001140:	39 f8                	cmp    eax,edi
c0001142:	77 04                	ja     c0001148 <dlmalloc+0x291>
c0001144:	85 c0                	test   eax,eax
c0001146:	75 26                	jne    c000116e <dlmalloc+0x2b7>
c0001148:	43                   	inc    ebx
c0001149:	83 fb 02             	cmp    ebx,0x2
c000114c:	0f 87 a6 00 00 00    	ja     c00011f8 <dlmalloc+0x341>
c0001152:	8b 3c 9d 74 b7 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd488c]
c0001159:	85 ff                	test   edi,edi
c000115b:	74 eb                	je     c0001148 <dlmalloc+0x291>
c000115d:	89 d8                	mov    eax,ebx
c000115f:	c1 e0 06             	shl    eax,0x6
c0001162:	8d 14 85 6c b4 02 c0 	lea    edx,[eax*4-0x3ffd4b94]
c0001169:	b8 01 00 00 00       	mov    eax,0x1
c000116e:	85 f8                	test   eax,edi
c0001170:	75 07                	jne    c0001179 <dlmalloc+0x2c2>
c0001172:	83 c2 08             	add    edx,0x8
c0001175:	01 c0                	add    eax,eax
c0001177:	eb f5                	jmp    c000116e <dlmalloc+0x2b7>
c0001179:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117c:	39 ca                	cmp    edx,ecx
c000117e:	75 14                	jne    c0001194 <dlmalloc+0x2dd>
c0001180:	89 c1                	mov    ecx,eax
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	f7 d1                	not    ecx
c0001187:	01 c0                	add    eax,eax
c0001189:	21 cf                	and    edi,ecx
c000118b:	89 3c 9d 74 b7 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd488c],edi
c0001192:	eb ac                	jmp    c0001140 <dlmalloc+0x289>
c0001194:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001197:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119a:	83 e0 fc             	and    eax,0xfffffffc
c000119d:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a0:	89 c3                	mov    ebx,eax
c00011a2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a5:	29 f3                	sub    ebx,esi
c00011a7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011aa:	83 fb 0f             	cmp    ebx,0xf
c00011ad:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b0:	77 09                	ja     c00011bb <dlmalloc+0x304>
c00011b2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b6:	e9 82 00 00 00       	jmp    c000123d <dlmalloc+0x386>
c00011bb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011be:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c4:	89 3d 7c b4 02 c0    	mov    DWORD PTR ds:0xc002b47c,edi
c00011ca:	89 3d 80 b4 02 c0    	mov    DWORD PTR ds:0xc002b480,edi
c00011d0:	c7 47 08 74 b4 02 c0 	mov    DWORD PTR [edi+0x8],0xc002b474
c00011d7:	c7 47 0c 74 b4 02 c0 	mov    DWORD PTR [edi+0xc],0xc002b474
c00011de:	77 06                	ja     c00011e6 <dlmalloc+0x32f>
c00011e0:	89 3d 70 b4 02 c0    	mov    DWORD PTR ds:0xc002b470,edi
c00011e6:	83 ce 01             	or     esi,0x1
c00011e9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ec:	89 d9                	mov    ecx,ebx
c00011ee:	83 c9 01             	or     ecx,0x1
c00011f1:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f4:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f6:	eb 45                	jmp    c000123d <dlmalloc+0x386>
c00011f8:	a1 6c b4 02 c0       	mov    eax,ds:0xc002b46c
c00011fd:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001200:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001203:	83 e2 fc             	and    edx,0xfffffffc
c0001206:	39 d1                	cmp    ecx,edx
c0001208:	77 1e                	ja     c0001228 <dlmalloc+0x371>
c000120a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120d:	89 f3                	mov    ebx,esi
c000120f:	89 0d 6c b4 02 c0    	mov    DWORD PTR ds:0xc002b46c,ecx
c0001215:	83 cb 01             	or     ebx,0x1
c0001218:	29 f2                	sub    edx,esi
c000121a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121d:	83 ca 01             	or     edx,0x1
c0001220:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001223:	e9 2d fd ff ff       	jmp    c0000f55 <dlmalloc+0x9e>
c0001228:	83 c4 1c             	add    esp,0x1c
c000122b:	89 f0                	mov    eax,esi
c000122d:	5b                   	pop    ebx
c000122e:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0001233:	5e                   	pop    esi
c0001234:	5f                   	pop    edi
c0001235:	5d                   	pop    ebp
c0001236:	e9 16 fa ff ff       	jmp    c0000c51 <sYSMALLOc>
c000123b:	31 c0                	xor    eax,eax
c000123d:	83 c4 1c             	add    esp,0x1c
c0001240:	5b                   	pop    ebx
c0001241:	5e                   	pop    esi
c0001242:	5f                   	pop    edi
c0001243:	5d                   	pop    ebp
c0001244:	c3                   	ret    

c0001245 <iALLOc>:
c0001245:	55                   	push   ebp
c0001246:	89 c5                	mov    ebp,eax
c0001248:	57                   	push   edi
c0001249:	56                   	push   esi
c000124a:	53                   	push   ebx
c000124b:	83 ec 2c             	sub    esp,0x2c
c000124e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001252:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001256:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125a:	83 3d 40 b4 02 c0 00 	cmp    DWORD PTR ds:0xc002b440,0x0
c0001261:	75 12                	jne    c0001275 <iALLOc+0x30>
c0001263:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001267:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c000126c:	e8 04 f8 ff ff       	call   c0000a75 <malloc_consolidate>
c0001271:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001275:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127a:	74 12                	je     c000128e <iALLOc+0x49>
c000127c:	85 ed                	test   ebp,ebp
c000127e:	0f 84 64 01 00 00    	je     c00013e8 <iALLOc+0x1a3>
c0001284:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128c:	eb 33                	jmp    c00012c1 <iALLOc+0x7c>
c000128e:	85 ed                	test   ebp,ebp
c0001290:	75 14                	jne    c00012a6 <iALLOc+0x61>
c0001292:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129a:	83 c4 2c             	add    esp,0x2c
c000129d:	5b                   	pop    ebx
c000129e:	5e                   	pop    esi
c000129f:	5f                   	pop    edi
c00012a0:	5d                   	pop    ebp
c00012a1:	e9 11 fc ff ff       	jmp    c0000eb7 <dlmalloc>
c00012a6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ad:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b5:	83 f8 0f             	cmp    eax,0xf
c00012b8:	76 07                	jbe    c00012c1 <iALLOc+0x7c>
c00012ba:	83 e0 f8             	and    eax,0xfffffff8
c00012bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c6:	75 09                	jne    c00012d1 <iALLOc+0x8c>
c00012c8:	89 d0                	mov    eax,edx
c00012ca:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012cd:	31 f6                	xor    esi,esi
c00012cf:	eb 3b                	jmp    c000130c <iALLOc+0xc7>
c00012d1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012db:	83 c0 0b             	add    eax,0xb
c00012de:	83 f8 0f             	cmp    eax,0xf
c00012e1:	76 07                	jbe    c00012ea <iALLOc+0xa5>
c00012e3:	83 e0 f8             	and    eax,0xfffffff8
c00012e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012ee:	0f af f5             	imul   esi,ebp
c00012f1:	eb 25                	jmp    c0001318 <iALLOc+0xd3>
c00012f3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f5:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012f8:	bb 10 00 00 00       	mov    ebx,0x10
c00012fd:	83 f9 0f             	cmp    ecx,0xf
c0001300:	76 05                	jbe    c0001307 <iALLOc+0xc2>
c0001302:	83 e1 f8             	and    ecx,0xfffffff8
c0001305:	89 cb                	mov    ebx,ecx
c0001307:	01 de                	add    esi,ebx
c0001309:	83 c0 04             	add    eax,0x4
c000130c:	39 c7                	cmp    edi,eax
c000130e:	75 e3                	jne    c00012f3 <iALLOc+0xae>
c0001310:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001318:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131c:	8b 1d 94 b7 02 c0    	mov    ebx,DWORD PTR ds:0xc002b794
c0001322:	83 ec 0c             	sub    esp,0xc
c0001325:	c7 05 94 b7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b794,0x0
c000132f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001333:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001337:	50                   	push   eax
c0001338:	e8 7a fb ff ff       	call   c0000eb7 <dlmalloc>
c000133d:	83 c4 10             	add    esp,0x10
c0001340:	89 1d 94 b7 02 c0    	mov    DWORD PTR ds:0xc002b794,ebx
c0001346:	85 c0                	test   eax,eax
c0001348:	0f 84 92 00 00 00    	je     c00013e0 <iALLOc+0x19b>
c000134e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001351:	8d 78 f8             	lea    edi,[eax-0x8]
c0001354:	83 e3 fc             	and    ebx,0xfffffffc
c0001357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001360:	74 1e                	je     c0001380 <iALLOc+0x13b>
c0001362:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001366:	89 d9                	mov    ecx,ebx
c0001368:	52                   	push   edx
c0001369:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136d:	83 e9 04             	sub    ecx,0x4
c0001370:	51                   	push   ecx
c0001371:	6a 00                	push   0x0
c0001373:	50                   	push   eax
c0001374:	e8 02 f3 ff ff       	call   c000067b <memset>
c0001379:	83 c4 10             	add    esp,0x10
c000137c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001380:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001385:	75 14                	jne    c000139b <iALLOc+0x156>
c0001387:	8d 04 37             	lea    eax,[edi+esi*1]
c000138a:	29 f3                	sub    ebx,esi
c000138c:	8d 48 08             	lea    ecx,[eax+0x8]
c000138f:	83 cb 01             	or     ebx,0x1
c0001392:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	89 f3                	mov    ebx,esi
c000139b:	31 c0                	xor    eax,eax
c000139d:	4d                   	dec    ebp
c000139e:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a5:	39 c5                	cmp    ebp,eax
c00013a7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013aa:	74 2c                	je     c00013d8 <iALLOc+0x193>
c00013ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b0:	85 c9                	test   ecx,ecx
c00013b2:	75 15                	jne    c00013c9 <iALLOc+0x184>
c00013b4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ba:	b9 10 00 00 00       	mov    ecx,0x10
c00013bf:	83 fe 0f             	cmp    esi,0xf
c00013c2:	76 05                	jbe    c00013c9 <iALLOc+0x184>
c00013c4:	83 e6 f8             	and    esi,0xfffffff8
c00013c7:	89 f1                	mov    ecx,esi
c00013c9:	89 ce                	mov    esi,ecx
c00013cb:	29 cb                	sub    ebx,ecx
c00013cd:	83 ce 01             	or     esi,0x1
c00013d0:	40                   	inc    eax
c00013d1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d4:	01 cf                	add    edi,ecx
c00013d6:	eb c6                	jmp    c000139e <iALLOc+0x159>
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013de:	eb 08                	jmp    c00013e8 <iALLOc+0x1a3>
c00013e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ec:	83 c4 2c             	add    esp,0x2c
c00013ef:	5b                   	pop    ebx
c00013f0:	5e                   	pop    esi
c00013f1:	5f                   	pop    edi
c00013f2:	5d                   	pop    ebp
c00013f3:	c3                   	ret    

c00013f4 <dlrealloc>:
c00013f4:	55                   	push   ebp
c00013f5:	57                   	push   edi
c00013f6:	56                   	push   esi
c00013f7:	53                   	push   ebx
c00013f8:	83 ec 1c             	sub    esp,0x1c
c00013fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00013ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001403:	85 db                	test   ebx,ebx
c0001405:	75 10                	jne    c0001417 <dlrealloc+0x23>
c0001407:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140b:	83 c4 1c             	add    esp,0x1c
c000140e:	5b                   	pop    ebx
c000140f:	5e                   	pop    esi
c0001410:	5f                   	pop    edi
c0001411:	5d                   	pop    ebp
c0001412:	e9 a0 fa ff ff       	jmp    c0000eb7 <dlmalloc>
c0001417:	83 f8 df             	cmp    eax,0xffffffdf
c000141a:	76 07                	jbe    c0001423 <dlrealloc+0x2f>
c000141c:	31 db                	xor    ebx,ebx
c000141e:	e9 7c 01 00 00       	jmp    c000159f <dlrealloc+0x1ab>
c0001423:	83 c0 0b             	add    eax,0xb
c0001426:	bf 10 00 00 00       	mov    edi,0x10
c000142b:	83 f8 0f             	cmp    eax,0xf
c000142e:	76 05                	jbe    c0001435 <dlrealloc+0x41>
c0001430:	83 e0 f8             	and    eax,0xfffffff8
c0001433:	89 c7                	mov    edi,eax
c0001435:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001438:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143b:	89 c6                	mov    esi,eax
c000143d:	83 e6 fc             	and    esi,0xfffffffc
c0001440:	a8 02                	test   al,0x2
c0001442:	75 d8                	jne    c000141c <dlrealloc+0x28>
c0001444:	39 f7                	cmp    edi,esi
c0001446:	0f 86 15 01 00 00    	jbe    c0001561 <dlrealloc+0x16d>
c000144c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001450:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001453:	39 15 6c b4 02 c0    	cmp    DWORD PTR ds:0xc002b46c,edx
c0001459:	75 33                	jne    c000148e <dlrealloc+0x9a>
c000145b:	83 e1 fc             	and    ecx,0xfffffffc
c000145e:	01 f1                	add    ecx,esi
c0001460:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001464:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001467:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146b:	77 49                	ja     c00014b6 <dlrealloc+0xc2>
c000146d:	01 fd                	add    ebp,edi
c000146f:	83 e0 01             	and    eax,0x1
c0001472:	09 f8                	or     eax,edi
c0001474:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001477:	89 2d 6c b4 02 c0    	mov    DWORD PTR ds:0xc002b46c,ebp
c000147d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001481:	29 f8                	sub    eax,edi
c0001483:	83 c8 01             	or     eax,0x1
c0001486:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001489:	e9 11 01 00 00       	jmp    c000159f <dlrealloc+0x1ab>
c000148e:	89 c8                	mov    eax,ecx
c0001490:	83 e0 fe             	and    eax,0xfffffffe
c0001493:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001498:	75 1c                	jne    c00014b6 <dlrealloc+0xc2>
c000149a:	83 e1 fc             	and    ecx,0xfffffffc
c000149d:	01 f1                	add    ecx,esi
c000149f:	39 cf                	cmp    edi,ecx
c00014a1:	77 13                	ja     c00014b6 <dlrealloc+0xc2>
c00014a3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014a9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ac:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014af:	89 ce                	mov    esi,ecx
c00014b1:	e9 ab 00 00 00       	jmp    c0001561 <dlrealloc+0x16d>
c00014b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ba:	8d 47 f9             	lea    eax,[edi-0x7]
c00014bd:	83 ec 0c             	sub    esp,0xc
c00014c0:	50                   	push   eax
c00014c1:	e8 f1 f9 ff ff       	call   c0000eb7 <dlmalloc>
c00014c6:	83 c4 10             	add    esp,0x10
c00014c9:	89 c1                	mov    ecx,eax
c00014cb:	85 c0                	test   eax,eax
c00014cd:	0f 84 49 ff ff ff    	je     c000141c <dlrealloc+0x28>
c00014d3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014da:	39 c2                	cmp    edx,eax
c00014dc:	75 0a                	jne    c00014e8 <dlrealloc+0xf4>
c00014de:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e1:	83 e0 fc             	and    eax,0xfffffffc
c00014e4:	01 c6                	add    esi,eax
c00014e6:	eb 79                	jmp    c0001561 <dlrealloc+0x16d>
c00014e8:	83 ee 04             	sub    esi,0x4
c00014eb:	83 fe 27             	cmp    esi,0x27
c00014ee:	76 16                	jbe    c0001506 <dlrealloc+0x112>
c00014f0:	50                   	push   eax
c00014f1:	56                   	push   esi
c00014f2:	53                   	push   ebx
c00014f3:	51                   	push   ecx
c00014f4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014f8:	e8 48 f1 ff ff       	call   c0000645 <memcpy>
c00014fd:	83 c4 10             	add    esp,0x10
c0001500:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001504:	eb 43                	jmp    c0001549 <dlrealloc+0x155>
c0001506:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001508:	83 fe 13             	cmp    esi,0x13
c000150b:	89 01                	mov    DWORD PTR [ecx],eax
c000150d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001510:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001513:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001516:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001519:	76 2e                	jbe    c0001549 <dlrealloc+0x155>
c000151b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000151e:	83 fe 1b             	cmp    esi,0x1b
c0001521:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001524:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001527:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152a:	76 1d                	jbe    c0001549 <dlrealloc+0x155>
c000152c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000152f:	83 fe 23             	cmp    esi,0x23
c0001532:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001535:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001538:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153b:	76 0c                	jbe    c0001549 <dlrealloc+0x155>
c000153d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001540:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001543:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001546:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001549:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154d:	83 ec 0c             	sub    esp,0xc
c0001550:	53                   	push   ebx
c0001551:	e8 06 f6 ff ff       	call   c0000b5c <dlfree>
c0001556:	83 c4 10             	add    esp,0x10
c0001559:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155d:	89 cb                	mov    ebx,ecx
c000155f:	eb 3e                	jmp    c000159f <dlrealloc+0x1ab>
c0001561:	89 f2                	mov    edx,esi
c0001563:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001566:	29 fa                	sub    edx,edi
c0001568:	83 e1 01             	and    ecx,0x1
c000156b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000156f:	83 fa 0f             	cmp    edx,0xf
c0001572:	77 0b                	ja     c000157f <dlrealloc+0x18b>
c0001574:	09 ce                	or     esi,ecx
c0001576:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001579:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157d:	eb 20                	jmp    c000159f <dlrealloc+0x1ab>
c000157f:	01 fd                	add    ebp,edi
c0001581:	83 ec 0c             	sub    esp,0xc
c0001584:	09 cf                	or     edi,ecx
c0001586:	83 ca 01             	or     edx,0x1
c0001589:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158c:	83 c5 08             	add    ebp,0x8
c000158f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001592:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001596:	55                   	push   ebp
c0001597:	e8 c0 f5 ff ff       	call   c0000b5c <dlfree>
c000159c:	83 c4 10             	add    esp,0x10
c000159f:	83 c4 1c             	add    esp,0x1c
c00015a2:	89 d8                	mov    eax,ebx
c00015a4:	5b                   	pop    ebx
c00015a5:	5e                   	pop    esi
c00015a6:	5f                   	pop    edi
c00015a7:	5d                   	pop    ebp
c00015a8:	c3                   	ret    

c00015a9 <dlmemalign>:
c00015a9:	55                   	push   ebp
c00015aa:	57                   	push   edi
c00015ab:	56                   	push   esi
c00015ac:	53                   	push   ebx
c00015ad:	83 ec 0c             	sub    esp,0xc
c00015b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015b8:	83 fa 08             	cmp    edx,0x8
c00015bb:	77 10                	ja     c00015cd <dlmemalign+0x24>
c00015bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c1:	83 c4 0c             	add    esp,0xc
c00015c4:	5b                   	pop    ebx
c00015c5:	5e                   	pop    esi
c00015c6:	5f                   	pop    edi
c00015c7:	5d                   	pop    ebp
c00015c8:	e9 ea f8 ff ff       	jmp    c0000eb7 <dlmalloc>
c00015cd:	bf 10 00 00 00       	mov    edi,0x10
c00015d2:	83 fa 0f             	cmp    edx,0xf
c00015d5:	76 13                	jbe    c00015ea <dlmemalign+0x41>
c00015d7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015da:	85 d1                	test   ecx,edx
c00015dc:	75 04                	jne    c00015e2 <dlmemalign+0x39>
c00015de:	89 d7                	mov    edi,edx
c00015e0:	eb 08                	jmp    c00015ea <dlmemalign+0x41>
c00015e2:	39 d7                	cmp    edi,edx
c00015e4:	73 04                	jae    c00015ea <dlmemalign+0x41>
c00015e6:	01 ff                	add    edi,edi
c00015e8:	eb f8                	jmp    c00015e2 <dlmemalign+0x39>
c00015ea:	83 f8 df             	cmp    eax,0xffffffdf
c00015ed:	76 07                	jbe    c00015f6 <dlmemalign+0x4d>
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	e9 ce 00 00 00       	jmp    c00016c4 <dlmemalign+0x11b>
c00015f6:	83 c0 0b             	add    eax,0xb
c00015f9:	bd 10 00 00 00       	mov    ebp,0x10
c00015fe:	83 f8 0f             	cmp    eax,0xf
c0001601:	76 05                	jbe    c0001608 <dlmemalign+0x5f>
c0001603:	83 e0 f8             	and    eax,0xfffffff8
c0001606:	89 c5                	mov    ebp,eax
c0001608:	83 ec 0c             	sub    esp,0xc
c000160b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000160f:	50                   	push   eax
c0001610:	e8 a2 f8 ff ff       	call   c0000eb7 <dlmalloc>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	89 c1                	mov    ecx,eax
c000161a:	85 c0                	test   eax,eax
c000161c:	74 d1                	je     c00015ef <dlmemalign+0x46>
c000161e:	31 d2                	xor    edx,edx
c0001620:	8d 70 f8             	lea    esi,[eax-0x8]
c0001623:	f7 f7                	div    edi
c0001625:	85 d2                	test   edx,edx
c0001627:	74 62                	je     c000168b <dlmemalign+0xe2>
c0001629:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162d:	89 f8                	mov    eax,edi
c000162f:	f7 d8                	neg    eax
c0001631:	21 c3                	and    ebx,eax
c0001633:	83 eb 08             	sub    ebx,0x8
c0001636:	89 d8                	mov    eax,ebx
c0001638:	29 f0                	sub    eax,esi
c000163a:	83 f8 0f             	cmp    eax,0xf
c000163d:	77 02                	ja     c0001641 <dlmemalign+0x98>
c000163f:	01 fb                	add    ebx,edi
c0001641:	89 d8                	mov    eax,ebx
c0001643:	29 f0                	sub    eax,esi
c0001645:	89 c6                	mov    esi,eax
c0001647:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164a:	89 c2                	mov    edx,eax
c000164c:	83 e2 fc             	and    edx,0xfffffffc
c000164f:	29 f2                	sub    edx,esi
c0001651:	a8 02                	test   al,0x2
c0001653:	74 10                	je     c0001665 <dlmemalign+0xbc>
c0001655:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001658:	83 ca 02             	or     edx,0x2
c000165b:	8d 43 08             	lea    eax,[ebx+0x8]
c000165e:	89 33                	mov    DWORD PTR [ebx],esi
c0001660:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001663:	eb 5f                	jmp    c00016c4 <dlmemalign+0x11b>
c0001665:	83 ec 0c             	sub    esp,0xc
c0001668:	89 d0                	mov    eax,edx
c000166a:	83 c8 01             	or     eax,0x1
c000166d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001670:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001675:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001678:	83 e0 01             	and    eax,0x1
c000167b:	09 f0                	or     eax,esi
c000167d:	89 de                	mov    esi,ebx
c000167f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001682:	51                   	push   ecx
c0001683:	e8 d4 f4 ff ff       	call   c0000b5c <dlfree>
c0001688:	83 c4 10             	add    esp,0x10
c000168b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000168e:	a8 02                	test   al,0x2
c0001690:	75 2f                	jne    c00016c1 <dlmemalign+0x118>
c0001692:	83 e0 fc             	and    eax,0xfffffffc
c0001695:	8d 55 10             	lea    edx,[ebp+0x10]
c0001698:	39 c2                	cmp    edx,eax
c000169a:	73 25                	jae    c00016c1 <dlmemalign+0x118>
c000169c:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000169f:	83 ec 0c             	sub    esp,0xc
c00016a2:	29 e8                	sub    eax,ebp
c00016a4:	83 c2 08             	add    edx,0x8
c00016a7:	83 c8 01             	or     eax,0x1
c00016aa:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b0:	83 e0 01             	and    eax,0x1
c00016b3:	09 c5                	or     ebp,eax
c00016b5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016b8:	52                   	push   edx
c00016b9:	e8 9e f4 ff ff       	call   c0000b5c <dlfree>
c00016be:	83 c4 10             	add    esp,0x10
c00016c1:	8d 46 08             	lea    eax,[esi+0x8]
c00016c4:	83 c4 0c             	add    esp,0xc
c00016c7:	5b                   	pop    ebx
c00016c8:	5e                   	pop    esi
c00016c9:	5f                   	pop    edi
c00016ca:	5d                   	pop    ebp
c00016cb:	c3                   	ret    

c00016cc <dlcalloc>:
c00016cc:	53                   	push   ebx
c00016cd:	83 ec 14             	sub    esp,0x14
c00016d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016d9:	50                   	push   eax
c00016da:	e8 d8 f7 ff ff       	call   c0000eb7 <dlmalloc>
c00016df:	83 c4 10             	add    esp,0x10
c00016e2:	89 c3                	mov    ebx,eax
c00016e4:	85 c0                	test   eax,eax
c00016e6:	74 77                	je     c000175f <dlcalloc+0x93>
c00016e8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016eb:	89 d0                	mov    eax,edx
c00016ed:	83 e0 fc             	and    eax,0xfffffffc
c00016f0:	80 e2 02             	and    dl,0x2
c00016f3:	75 5a                	jne    c000174f <dlcalloc+0x83>
c00016f5:	83 e8 04             	sub    eax,0x4
c00016f8:	83 f8 27             	cmp    eax,0x27
c00016fb:	76 03                	jbe    c0001700 <dlcalloc+0x34>
c00016fd:	51                   	push   ecx
c00016fe:	eb 53                	jmp    c0001753 <dlcalloc+0x87>
c0001700:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001706:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001714:	83 f8 13             	cmp    eax,0x13
c0001717:	76 46                	jbe    c000175f <dlcalloc+0x93>
c0001719:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001720:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001727:	83 f8 1b             	cmp    eax,0x1b
c000172a:	76 33                	jbe    c000175f <dlcalloc+0x93>
c000172c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001733:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173a:	83 f8 23             	cmp    eax,0x23
c000173d:	76 20                	jbe    c000175f <dlcalloc+0x93>
c000173f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001746:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174d:	eb 10                	jmp    c000175f <dlcalloc+0x93>
c000174f:	83 e8 08             	sub    eax,0x8
c0001752:	52                   	push   edx
c0001753:	50                   	push   eax
c0001754:	6a 00                	push   0x0
c0001756:	53                   	push   ebx
c0001757:	e8 1f ef ff ff       	call   c000067b <memset>
c000175c:	83 c4 10             	add    esp,0x10
c000175f:	89 d8                	mov    eax,ebx
c0001761:	83 c4 08             	add    esp,0x8
c0001764:	5b                   	pop    ebx
c0001765:	c3                   	ret    

c0001766 <dlcfree>:
c0001766:	e9 f1 f3 ff ff       	jmp    c0000b5c <dlfree>

c000176b <dlindependent_calloc>:
c000176b:	83 ec 28             	sub    esp,0x28
c000176e:	b9 03 00 00 00       	mov    ecx,0x3
c0001773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000177f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	e8 b9 fa ff ff       	call   c0001245 <iALLOc>
c000178c:	83 c4 2c             	add    esp,0x2c
c000178f:	c3                   	ret    

c0001790 <dlindependent_comalloc>:
c0001790:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001798:	31 c9                	xor    ecx,ecx
c000179a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000179e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a2:	e9 9e fa ff ff       	jmp    c0001245 <iALLOc>

c00017a7 <dlvalloc>:
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	83 3d 40 b4 02 c0 00 	cmp    DWORD PTR ds:0xc002b440,0x0
c00017b1:	75 0a                	jne    c00017bd <dlvalloc+0x16>
c00017b3:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c00017b8:	e8 b8 f2 ff ff       	call   c0000a75 <malloc_consolidate>
c00017bd:	50                   	push   eax
c00017be:	50                   	push   eax
c00017bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c3:	ff 35 9c b7 02 c0    	push   DWORD PTR ds:0xc002b79c
c00017c9:	e8 db fd ff ff       	call   c00015a9 <dlmemalign>
c00017ce:	83 c4 1c             	add    esp,0x1c
c00017d1:	c3                   	ret    

c00017d2 <dlpvalloc>:
c00017d2:	83 ec 0c             	sub    esp,0xc
c00017d5:	83 3d 40 b4 02 c0 00 	cmp    DWORD PTR ds:0xc002b440,0x0
c00017dc:	75 0a                	jne    c00017e8 <dlpvalloc+0x16>
c00017de:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c00017e3:	e8 8d f2 ff ff       	call   c0000a75 <malloc_consolidate>
c00017e8:	a1 9c b7 02 c0       	mov    eax,ds:0xc002b79c
c00017ed:	89 c1                	mov    ecx,eax
c00017ef:	52                   	push   edx
c00017f0:	f7 d9                	neg    ecx
c00017f2:	52                   	push   edx
c00017f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f7:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fb:	21 ca                	and    edx,ecx
c00017fd:	52                   	push   edx
c00017fe:	50                   	push   eax
c00017ff:	e8 a5 fd ff ff       	call   c00015a9 <dlmemalign>
c0001804:	83 c4 1c             	add    esp,0x1c
c0001807:	c3                   	ret    

c0001808 <dlmalloc_trim>:
c0001808:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c000180d:	e8 63 f2 ff ff       	call   c0000a75 <malloc_consolidate>
c0001812:	31 c0                	xor    eax,eax
c0001814:	c3                   	ret    

c0001815 <dlmalloc_usable_size>:
c0001815:	53                   	push   ebx
c0001816:	31 c0                	xor    eax,eax
c0001818:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181c:	85 c9                	test   ecx,ecx
c000181e:	74 24                	je     c0001844 <dlmalloc_usable_size+0x2f>
c0001820:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001823:	f6 c2 02             	test   dl,0x2
c0001826:	74 08                	je     c0001830 <dlmalloc_usable_size+0x1b>
c0001828:	83 e2 fc             	and    edx,0xfffffffc
c000182b:	8d 42 f8             	lea    eax,[edx-0x8]
c000182e:	eb 14                	jmp    c0001844 <dlmalloc_usable_size+0x2f>
c0001830:	89 d3                	mov    ebx,edx
c0001832:	31 c0                	xor    eax,eax
c0001834:	83 e3 fe             	and    ebx,0xfffffffe
c0001837:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183c:	74 06                	je     c0001844 <dlmalloc_usable_size+0x2f>
c000183e:	83 e2 fc             	and    edx,0xfffffffc
c0001841:	8d 42 fc             	lea    eax,[edx-0x4]
c0001844:	5b                   	pop    ebx
c0001845:	c3                   	ret    

c0001846 <dlmallinfo>:
c0001846:	55                   	push   ebp
c0001847:	57                   	push   edi
c0001848:	56                   	push   esi
c0001849:	53                   	push   ebx
c000184a:	83 ec 08             	sub    esp,0x8
c000184d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001851:	83 3d 6c b4 02 c0 00 	cmp    DWORD PTR ds:0xc002b46c,0x0
c0001858:	75 0a                	jne    c0001864 <dlmallinfo+0x1e>
c000185a:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c000185f:	e8 11 f2 ff ff       	call   c0000a75 <malloc_consolidate>
c0001864:	a1 6c b4 02 c0       	mov    eax,ds:0xc002b46c
c0001869:	31 ed                	xor    ebp,ebp
c000186b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000186e:	31 c9                	xor    ecx,ecx
c0001870:	83 e0 fc             	and    eax,0xfffffffc
c0001873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001877:	31 c0                	xor    eax,eax
c0001879:	8b 14 85 44 b4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4bbc]
c0001880:	85 d2                	test   edx,edx
c0001882:	74 0e                	je     c0001892 <dlmallinfo+0x4c>
c0001884:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001887:	45                   	inc    ebp
c0001888:	83 e6 fc             	and    esi,0xfffffffc
c000188b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000188e:	01 f1                	add    ecx,esi
c0001890:	eb ee                	jmp    c0001880 <dlmallinfo+0x3a>
c0001892:	40                   	inc    eax
c0001893:	83 f8 0a             	cmp    eax,0xa
c0001896:	75 e1                	jne    c0001879 <dlmallinfo+0x33>
c0001898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a6:	b8 74 b4 02 c0       	mov    eax,0xc002b474
c00018ab:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018ae:	39 f0                	cmp    eax,esi
c00018b0:	74 10                	je     c00018c2 <dlmallinfo+0x7c>
c00018b2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b5:	ff 04 24             	inc    DWORD PTR [esp]
c00018b8:	83 e7 fc             	and    edi,0xfffffffc
c00018bb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018be:	01 fa                	add    edx,edi
c00018c0:	eb ec                	jmp    c00018ae <dlmallinfo+0x68>
c00018c2:	83 c0 08             	add    eax,0x8
c00018c5:	3d 6c b7 02 c0       	cmp    eax,0xc002b76c
c00018ca:	75 df                	jne    c00018ab <dlmallinfo+0x65>
c00018cc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018cf:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d5:	a1 a8 b7 02 c0       	mov    eax,ds:0xc002b7a8
c00018da:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018dd:	89 03                	mov    DWORD PTR [ebx],eax
c00018df:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e2:	8b 35 90 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b790
c00018e8:	29 d0                	sub    eax,edx
c00018ea:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ed:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f0:	8b 35 a4 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b7a4
c00018f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fa:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018fd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001900:	8b 35 b4 b7 02 c0    	mov    esi,DWORD PTR ds:0xc002b7b4
c0001906:	89 d8                	mov    eax,ebx
c0001908:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190b:	83 c4 08             	add    esp,0x8
c000190e:	5b                   	pop    ebx
c000190f:	5e                   	pop    esi
c0001910:	5f                   	pop    edi
c0001911:	5d                   	pop    ebp
c0001912:	c2 04 00             	ret    0x4

c0001915 <dlmalloc_stats>:
c0001915:	83 ec 30             	sub    esp,0x30
c0001918:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191c:	50                   	push   eax
c000191d:	e8 24 ff ff ff       	call   c0001846 <dlmallinfo>
c0001922:	83 c4 30             	add    esp,0x30
c0001925:	c3                   	ret    

c0001926 <dlmallopt>:
c0001926:	56                   	push   esi
c0001927:	b8 40 b4 02 c0       	mov    eax,0xc002b440
c000192c:	53                   	push   ebx
c000192d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001935:	e8 3b f1 ff ff       	call   c0000a75 <malloc_consolidate>
c000193a:	8d 46 04             	lea    eax,[esi+0x4]
c000193d:	83 f8 05             	cmp    eax,0x5
c0001940:	77 67                	ja     c00019a9 <dlmallopt+0x83>
c0001942:	ff 24 85 24 6e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd91dc]
c0001949:	83 fb 50             	cmp    ebx,0x50
c000194c:	77 5b                	ja     c00019a9 <dlmallopt+0x83>
c000194e:	ba 08 00 00 00       	mov    edx,0x8
c0001953:	85 db                	test   ebx,ebx
c0001955:	74 12                	je     c0001969 <dlmallopt+0x43>
c0001957:	83 c3 0b             	add    ebx,0xb
c000195a:	ba 10 00 00 00       	mov    edx,0x10
c000195f:	83 fb 0f             	cmp    ebx,0xf
c0001962:	76 05                	jbe    c0001969 <dlmallopt+0x43>
c0001964:	89 da                	mov    edx,ebx
c0001966:	83 e2 f8             	and    edx,0xfffffff8
c0001969:	a1 40 b4 02 c0       	mov    eax,ds:0xc002b440
c000196e:	83 e0 03             	and    eax,0x3
c0001971:	09 d0                	or     eax,edx
c0001973:	a3 40 b4 02 c0       	mov    ds:0xc002b440,eax
c0001978:	eb 31                	jmp    c00019ab <dlmallopt+0x85>
c000197a:	89 1d 84 b7 02 c0    	mov    DWORD PTR ds:0xc002b784,ebx
c0001980:	eb 06                	jmp    c0001988 <dlmallopt+0x62>
c0001982:	89 1d 88 b7 02 c0    	mov    DWORD PTR ds:0xc002b788,ebx
c0001988:	be 01 00 00 00       	mov    esi,0x1
c000198d:	eb 1c                	jmp    c00019ab <dlmallopt+0x85>
c000198f:	89 1d 8c b7 02 c0    	mov    DWORD PTR ds:0xc002b78c,ebx
c0001995:	eb f1                	jmp    c0001988 <dlmallopt+0x62>
c0001997:	31 f6                	xor    esi,esi
c0001999:	85 db                	test   ebx,ebx
c000199b:	75 0e                	jne    c00019ab <dlmallopt+0x85>
c000199d:	c7 05 94 b7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b794,0x0
c00019a7:	eb df                	jmp    c0001988 <dlmallopt+0x62>
c00019a9:	31 f6                	xor    esi,esi
c00019ab:	89 f0                	mov    eax,esi
c00019ad:	5b                   	pop    ebx
c00019ae:	5e                   	pop    esi
c00019af:	c3                   	ret    

c00019b0 <disk_status>:
c00019b0:	31 c0                	xor    eax,eax
c00019b2:	c3                   	ret    

c00019b3 <disk_initialize>:
c00019b3:	31 c0                	xor    eax,eax
c00019b5:	c3                   	ret    

c00019b6 <disk_read>:
c00019b6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bb:	0f b6 04 85 80 ce 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3180]
c00019c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c7:	e9 fc d4 01 00       	jmp    c001eec8 <fatWrapperReadDisk>

c00019cc <disk_write>:
c00019cc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d1:	0f b6 04 85 80 ce 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3180]
c00019d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019dd:	e9 2d d5 01 00       	jmp    c001ef0f <fatWrapperWriteDisk>

c00019e2 <disk_ioctl>:
c00019e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019eb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f0:	0f b6 04 85 80 ce 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd3180]
c00019f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fc:	e9 55 d5 01 00       	jmp    c001ef56 <fatWrapperIoctl>

c0001a01 <ld_word>:
c0001a01:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a05:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a08:	c1 e2 08             	shl    edx,0x8
c0001a0b:	09 d0                	or     eax,edx
c0001a0d:	c3                   	ret    

c0001a0e <ld_dword>:
c0001a0e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a12:	89 d1                	mov    ecx,edx
c0001a14:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a18:	c1 e1 08             	shl    ecx,0x8
c0001a1b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a1e:	09 ca                	or     edx,ecx
c0001a20:	c1 e2 08             	shl    edx,0x8
c0001a23:	09 d0                	or     eax,edx
c0001a25:	c3                   	ret    

c0001a26 <ld_qword>:
c0001a26:	57                   	push   edi
c0001a27:	56                   	push   esi
c0001a28:	53                   	push   ebx
c0001a29:	31 db                	xor    ebx,ebx
c0001a2b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a2e:	89 df                	mov    edi,ebx
c0001a30:	89 ce                	mov    esi,ecx
c0001a32:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a36:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3a:	c1 e6 08             	shl    esi,0x8
c0001a3d:	09 f2                	or     edx,esi
c0001a3f:	89 d6                	mov    esi,edx
c0001a41:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a45:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a49:	c1 e6 08             	shl    esi,0x8
c0001a4c:	09 f2                	or     edx,esi
c0001a4e:	89 d6                	mov    esi,edx
c0001a50:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a54:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5b:	c1 e6 08             	shl    esi,0x8
c0001a5e:	89 fb                	mov    ebx,edi
c0001a60:	09 f2                	or     edx,esi
c0001a62:	89 d1                	mov    ecx,edx
c0001a64:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a68:	c1 e1 08             	shl    ecx,0x8
c0001a6b:	89 da                	mov    edx,ebx
c0001a6d:	09 c8                	or     eax,ecx
c0001a6f:	5b                   	pop    ebx
c0001a70:	5e                   	pop    esi
c0001a71:	5f                   	pop    edi
c0001a72:	c3                   	ret    

c0001a73 <st_word>:
c0001a73:	66 89 10             	mov    WORD PTR [eax],dx
c0001a76:	c3                   	ret    

c0001a77 <st_dword>:
c0001a77:	89 10                	mov    DWORD PTR [eax],edx
c0001a79:	c3                   	ret    

c0001a7a <st_qword>:
c0001a7a:	89 10                	mov    DWORD PTR [eax],edx
c0001a7c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a7f:	c3                   	ret    

c0001a80 <mem_cpy>:
c0001a80:	85 c9                	test   ecx,ecx
c0001a82:	74 10                	je     c0001a94 <mem_cpy+0x14>
c0001a84:	57                   	push   edi
c0001a85:	01 c1                	add    ecx,eax
c0001a87:	56                   	push   esi
c0001a88:	89 c7                	mov    edi,eax
c0001a8a:	89 d6                	mov    esi,edx
c0001a8c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8d:	39 f9                	cmp    ecx,edi
c0001a8f:	75 fb                	jne    c0001a8c <mem_cpy+0xc>
c0001a91:	5e                   	pop    esi
c0001a92:	5f                   	pop    edi
c0001a93:	c3                   	ret    
c0001a94:	c3                   	ret    

c0001a95 <mem_set>:
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	40                   	inc    eax
c0001a98:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9b:	39 c8                	cmp    eax,ecx
c0001a9d:	75 f8                	jne    c0001a97 <mem_set+0x2>
c0001a9f:	c3                   	ret    

c0001aa0 <mem_cmp>:
c0001aa0:	57                   	push   edi
c0001aa1:	56                   	push   esi
c0001aa2:	89 c6                	mov    esi,eax
c0001aa4:	53                   	push   ebx
c0001aa5:	46                   	inc    esi
c0001aa6:	42                   	inc    edx
c0001aa7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aab:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001aaf:	29 fb                	sub    ebx,edi
c0001ab1:	89 cf                	mov    edi,ecx
c0001ab3:	29 f7                	sub    edi,esi
c0001ab5:	01 c7                	add    edi,eax
c0001ab7:	74 04                	je     c0001abd <mem_cmp+0x1d>
c0001ab9:	85 db                	test   ebx,ebx
c0001abb:	74 e8                	je     c0001aa5 <mem_cmp+0x5>
c0001abd:	89 d8                	mov    eax,ebx
c0001abf:	5b                   	pop    ebx
c0001ac0:	5e                   	pop    esi
c0001ac1:	5f                   	pop    edi
c0001ac2:	c3                   	ret    

c0001ac3 <chk_chr>:
c0001ac3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ac9:	74 07                	je     c0001ad2 <chk_chr+0xf>
c0001acb:	39 d1                	cmp    ecx,edx
c0001acd:	74 03                	je     c0001ad2 <chk_chr+0xf>
c0001acf:	40                   	inc    eax
c0001ad0:	eb f1                	jmp    c0001ac3 <chk_chr>
c0001ad2:	89 c8                	mov    eax,ecx
c0001ad4:	c3                   	ret    

c0001ad5 <dbc_1st>:
c0001ad5:	31 c0                	xor    eax,eax
c0001ad7:	c3                   	ret    

c0001ad8 <dbc_2nd>:
c0001ad8:	31 c0                	xor    eax,eax
c0001ada:	c3                   	ret    

c0001adb <tchar2uni>:
c0001adb:	57                   	push   edi
c0001adc:	89 c7                	mov    edi,eax
c0001ade:	56                   	push   esi
c0001adf:	53                   	push   ebx
c0001ae0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae7:	84 c9                	test   cl,cl
c0001ae9:	78 0a                	js     c0001af5 <tchar2uni+0x1a>
c0001aeb:	0f b6 d1             	movzx  edx,cl
c0001aee:	89 f3                	mov    ebx,esi
c0001af0:	e9 9f 00 00 00       	jmp    c0001b94 <tchar2uni+0xb9>
c0001af5:	88 ca                	mov    dl,cl
c0001af7:	83 e2 e0             	and    edx,0xffffffe0
c0001afa:	80 fa c0             	cmp    dl,0xc0
c0001afd:	75 0c                	jne    c0001b0b <tchar2uni+0x30>
c0001aff:	89 ca                	mov    edx,ecx
c0001b01:	b9 01 00 00 00       	mov    ecx,0x1
c0001b06:	83 e2 1f             	and    edx,0x1f
c0001b09:	eb 2e                	jmp    c0001b39 <tchar2uni+0x5e>
c0001b0b:	88 ca                	mov    dl,cl
c0001b0d:	83 e2 f0             	and    edx,0xfffffff0
c0001b10:	80 fa e0             	cmp    dl,0xe0
c0001b13:	75 0c                	jne    c0001b21 <tchar2uni+0x46>
c0001b15:	89 ca                	mov    edx,ecx
c0001b17:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1c:	83 e2 0f             	and    edx,0xf
c0001b1f:	eb 18                	jmp    c0001b39 <tchar2uni+0x5e>
c0001b21:	88 ca                	mov    dl,cl
c0001b23:	83 e2 f8             	and    edx,0xfffffff8
c0001b26:	88 d0                	mov    al,dl
c0001b28:	83 ca ff             	or     edx,0xffffffff
c0001b2b:	3c f0                	cmp    al,0xf0
c0001b2d:	75 6c                	jne    c0001b9b <tchar2uni+0xc0>
c0001b2f:	89 ca                	mov    edx,ecx
c0001b31:	b9 03 00 00 00       	mov    ecx,0x3
c0001b36:	83 e2 07             	and    edx,0x7
c0001b39:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3d:	46                   	inc    esi
c0001b3e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b41:	88 c8                	mov    al,cl
c0001b43:	83 e0 c0             	and    eax,0xffffffc0
c0001b46:	3c 80                	cmp    al,0x80
c0001b48:	75 4e                	jne    c0001b98 <tchar2uni+0xbd>
c0001b4a:	c1 e2 06             	shl    edx,0x6
c0001b4d:	83 e1 3f             	and    ecx,0x3f
c0001b50:	09 ca                	or     edx,ecx
c0001b52:	39 de                	cmp    esi,ebx
c0001b54:	75 e7                	jne    c0001b3d <tchar2uni+0x62>
c0001b56:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b59:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b5f:	77 37                	ja     c0001b98 <tchar2uni+0xbd>
c0001b61:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b67:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6d:	76 29                	jbe    c0001b98 <tchar2uni+0xbd>
c0001b6f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b75:	76 1d                	jbe    c0001b94 <tchar2uni+0xb9>
c0001b77:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b83:	c1 e1 06             	shl    ecx,0x6
c0001b86:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8c:	09 ca                	or     edx,ecx
c0001b8e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b94:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b96:	eb 03                	jmp    c0001b9b <tchar2uni+0xc0>
c0001b98:	83 ca ff             	or     edx,0xffffffff
c0001b9b:	5b                   	pop    ebx
c0001b9c:	89 d0                	mov    eax,edx
c0001b9e:	5e                   	pop    esi
c0001b9f:	5f                   	pop    edi
c0001ba0:	c3                   	ret    

c0001ba1 <put_utf>:
c0001ba1:	53                   	push   ebx
c0001ba2:	83 f8 7f             	cmp    eax,0x7f
c0001ba5:	89 c3                	mov    ebx,eax
c0001ba7:	b0 00                	mov    al,0x0
c0001ba9:	77 11                	ja     c0001bbc <put_utf+0x1b>
c0001bab:	85 c9                	test   ecx,ecx
c0001bad:	0f 84 e5 00 00 00    	je     c0001c98 <put_utf+0xf7>
c0001bb3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb5:	b0 01                	mov    al,0x1
c0001bb7:	e9 dc 00 00 00       	jmp    c0001c98 <put_utf+0xf7>
c0001bbc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc2:	77 23                	ja     c0001be7 <put_utf+0x46>
c0001bc4:	83 f9 01             	cmp    ecx,0x1
c0001bc7:	0f 86 cb 00 00 00    	jbe    c0001c98 <put_utf+0xf7>
c0001bcd:	89 d8                	mov    eax,ebx
c0001bcf:	83 e3 3f             	and    ebx,0x3f
c0001bd2:	c1 e8 06             	shr    eax,0x6
c0001bd5:	83 cb 80             	or     ebx,0xffffff80
c0001bd8:	83 c8 c0             	or     eax,0xffffffc0
c0001bdb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bde:	88 02                	mov    BYTE PTR [edx],al
c0001be0:	b0 02                	mov    al,0x2
c0001be2:	e9 b1 00 00 00       	jmp    c0001c98 <put_utf+0xf7>
c0001be7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bed:	77 40                	ja     c0001c2f <put_utf+0x8e>
c0001bef:	83 f9 02             	cmp    ecx,0x2
c0001bf2:	0f 86 a0 00 00 00    	jbe    c0001c98 <put_utf+0xf7>
c0001bf8:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001bfe:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c04:	0f 86 8e 00 00 00    	jbe    c0001c98 <put_utf+0xf7>
c0001c0a:	89 d8                	mov    eax,ebx
c0001c0c:	c1 e8 0c             	shr    eax,0xc
c0001c0f:	83 c8 e0             	or     eax,0xffffffe0
c0001c12:	88 02                	mov    BYTE PTR [edx],al
c0001c14:	89 d8                	mov    eax,ebx
c0001c16:	83 e3 3f             	and    ebx,0x3f
c0001c19:	c1 e8 06             	shr    eax,0x6
c0001c1c:	83 cb 80             	or     ebx,0xffffff80
c0001c1f:	83 e0 3f             	and    eax,0x3f
c0001c22:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c25:	83 c8 80             	or     eax,0xffffff80
c0001c28:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2b:	b0 03                	mov    al,0x3
c0001c2d:	eb 69                	jmp    c0001c98 <put_utf+0xf7>
c0001c2f:	83 f9 03             	cmp    ecx,0x3
c0001c32:	76 64                	jbe    c0001c98 <put_utf+0xf7>
c0001c34:	89 d9                	mov    ecx,ebx
c0001c36:	0f b7 c3             	movzx  eax,bx
c0001c39:	66 31 c9             	xor    cx,cx
c0001c3c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c42:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c48:	c1 e9 06             	shr    ecx,0x6
c0001c4b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c51:	77 43                	ja     c0001c96 <put_utf+0xf5>
c0001c53:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c59:	77 3b                	ja     c0001c96 <put_utf+0xf5>
c0001c5b:	09 cb                	or     ebx,ecx
c0001c5d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c63:	89 d8                	mov    eax,ebx
c0001c65:	c1 e8 12             	shr    eax,0x12
c0001c68:	83 c8 f0             	or     eax,0xfffffff0
c0001c6b:	88 02                	mov    BYTE PTR [edx],al
c0001c6d:	89 d8                	mov    eax,ebx
c0001c6f:	c1 e8 0c             	shr    eax,0xc
c0001c72:	83 e0 3f             	and    eax,0x3f
c0001c75:	83 c8 80             	or     eax,0xffffff80
c0001c78:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7b:	89 d8                	mov    eax,ebx
c0001c7d:	83 e3 3f             	and    ebx,0x3f
c0001c80:	c1 e8 06             	shr    eax,0x6
c0001c83:	83 cb 80             	or     ebx,0xffffff80
c0001c86:	83 e0 3f             	and    eax,0x3f
c0001c89:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8c:	83 c8 80             	or     eax,0xffffff80
c0001c8f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c92:	b0 04                	mov    al,0x4
c0001c94:	eb 02                	jmp    c0001c98 <put_utf+0xf7>
c0001c96:	31 c0                	xor    eax,eax
c0001c98:	5b                   	pop    ebx
c0001c99:	c3                   	ret    

c0001c9a <clst2sect>:
c0001c9a:	89 c1                	mov    ecx,eax
c0001c9c:	83 ea 02             	sub    edx,0x2
c0001c9f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca2:	83 e8 02             	sub    eax,0x2
c0001ca5:	39 d0                	cmp    eax,edx
c0001ca7:	76 0d                	jbe    c0001cb6 <clst2sect+0x1c>
c0001ca9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cad:	f7 e2                	mul    edx
c0001caf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb5:	c3                   	ret    
c0001cb6:	31 c0                	xor    eax,eax
c0001cb8:	31 d2                	xor    edx,edx
c0001cba:	c3                   	ret    

c0001cbb <clmt_clust>:
c0001cbb:	57                   	push   edi
c0001cbc:	89 cf                	mov    edi,ecx
c0001cbe:	56                   	push   esi
c0001cbf:	89 d6                	mov    esi,edx
c0001cc1:	53                   	push   ebx
c0001cc2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cc9:	89 f2                	mov    edx,esi
c0001ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ccd:	c1 ef 09             	shr    edi,0x9
c0001cd0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd7:	89 f9                	mov    ecx,edi
c0001cd9:	31 ff                	xor    edi,edi
c0001cdb:	57                   	push   edi
c0001cdc:	56                   	push   esi
c0001cdd:	51                   	push   ecx
c0001cde:	52                   	push   edx
c0001cdf:	e8 28 28 02 00       	call   c002450c <__udivdi3>
c0001ce4:	83 c4 10             	add    esp,0x10
c0001ce7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001ce9:	85 d2                	test   edx,edx
c0001ceb:	74 10                	je     c0001cfd <clmt_clust+0x42>
c0001ced:	39 d0                	cmp    eax,edx
c0001cef:	72 07                	jb     c0001cf8 <clmt_clust+0x3d>
c0001cf1:	29 d0                	sub    eax,edx
c0001cf3:	83 c3 08             	add    ebx,0x8
c0001cf6:	eb ef                	jmp    c0001ce7 <clmt_clust+0x2c>
c0001cf8:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfb:	89 c2                	mov    edx,eax
c0001cfd:	5b                   	pop    ebx
c0001cfe:	89 d0                	mov    eax,edx
c0001d00:	5e                   	pop    esi
c0001d01:	5f                   	pop    edi
c0001d02:	c3                   	ret    

c0001d03 <pick_lfn>:
c0001d03:	55                   	push   ebp
c0001d04:	57                   	push   edi
c0001d05:	56                   	push   esi
c0001d06:	89 d6                	mov    esi,edx
c0001d08:	53                   	push   ebx
c0001d09:	89 c3                	mov    ebx,eax
c0001d0b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d0e:	e8 ee fc ff ff       	call   c0001a01 <ld_word>
c0001d13:	66 85 c0             	test   ax,ax
c0001d16:	74 04                	je     c0001d1c <pick_lfn+0x19>
c0001d18:	31 c0                	xor    eax,eax
c0001d1a:	eb 5c                	jmp    c0001d78 <pick_lfn+0x75>
c0001d1c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d1f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d24:	83 e1 bf             	and    ecx,0xffffffbf
c0001d27:	31 ff                	xor    edi,edi
c0001d29:	49                   	dec    ecx
c0001d2a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2d:	0f b6 87 40 6f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd90c0]
c0001d34:	01 f0                	add    eax,esi
c0001d36:	e8 c6 fc ff ff       	call   c0001a01 <ld_word>
c0001d3b:	66 85 ed             	test   bp,bp
c0001d3e:	74 11                	je     c0001d51 <pick_lfn+0x4e>
c0001d40:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d46:	77 d0                	ja     c0001d18 <pick_lfn+0x15>
c0001d48:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4c:	89 c5                	mov    ebp,eax
c0001d4e:	41                   	inc    ecx
c0001d4f:	eb 04                	jmp    c0001d55 <pick_lfn+0x52>
c0001d51:	66 40                	inc    ax
c0001d53:	75 c3                	jne    c0001d18 <pick_lfn+0x15>
c0001d55:	47                   	inc    edi
c0001d56:	83 ff 0d             	cmp    edi,0xd
c0001d59:	75 d2                	jne    c0001d2d <pick_lfn+0x2a>
c0001d5b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d5e:	74 13                	je     c0001d73 <pick_lfn+0x70>
c0001d60:	66 85 ed             	test   bp,bp
c0001d63:	74 0e                	je     c0001d73 <pick_lfn+0x70>
c0001d65:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6b:	77 ab                	ja     c0001d18 <pick_lfn+0x15>
c0001d6d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d73:	b8 01 00 00 00       	mov    eax,0x1
c0001d78:	5b                   	pop    ebx
c0001d79:	5e                   	pop    esi
c0001d7a:	5f                   	pop    edi
c0001d7b:	5d                   	pop    ebp
c0001d7c:	c3                   	ret    

c0001d7d <put_lfn>:
c0001d7d:	55                   	push   ebp
c0001d7e:	31 ed                	xor    ebp,ebp
c0001d80:	57                   	push   edi
c0001d81:	89 d7                	mov    edi,edx
c0001d83:	56                   	push   esi
c0001d84:	31 f6                	xor    esi,esi
c0001d86:	53                   	push   ebx
c0001d87:	83 ec 08             	sub    esp,0x8
c0001d8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d95:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9b:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d9e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da1:	31 d2                	xor    edx,edx
c0001da3:	e8 cb fc ff ff       	call   c0001a73 <st_word>
c0001da8:	0f b6 d9             	movzx  ebx,cl
c0001dab:	4b                   	dec    ebx
c0001dac:	6b db 0d             	imul   ebx,ebx,0xd
c0001daf:	66 83 fe ff          	cmp    si,0xffff
c0001db3:	74 08                	je     c0001dbd <put_lfn+0x40>
c0001db5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001db8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbc:	43                   	inc    ebx
c0001dbd:	0f b6 85 40 6f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd90c0]
c0001dc4:	0f b7 d6             	movzx  edx,si
c0001dc7:	01 f8                	add    eax,edi
c0001dc9:	e8 a5 fc ff ff       	call   c0001a73 <st_word>
c0001dce:	66 85 f6             	test   si,si
c0001dd1:	75 03                	jne    c0001dd6 <put_lfn+0x59>
c0001dd3:	83 ce ff             	or     esi,0xffffffff
c0001dd6:	45                   	inc    ebp
c0001dd7:	83 fd 0d             	cmp    ebp,0xd
c0001dda:	75 d3                	jne    c0001daf <put_lfn+0x32>
c0001ddc:	66 46                	inc    si
c0001dde:	74 0a                	je     c0001dea <put_lfn+0x6d>
c0001de0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001de8:	75 09                	jne    c0001df3 <put_lfn+0x76>
c0001dea:	88 c8                	mov    al,cl
c0001dec:	83 c8 40             	or     eax,0x40
c0001def:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df7:	88 07                	mov    BYTE PTR [edi],al
c0001df9:	83 c4 08             	add    esp,0x8
c0001dfc:	5b                   	pop    ebx
c0001dfd:	5e                   	pop    esi
c0001dfe:	5f                   	pop    edi
c0001dff:	5d                   	pop    ebp
c0001e00:	c3                   	ret    

c0001e01 <gen_numname>:
c0001e01:	57                   	push   edi
c0001e02:	89 cf                	mov    edi,ecx
c0001e04:	56                   	push   esi
c0001e05:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0a:	53                   	push   ebx
c0001e0b:	89 c6                	mov    esi,eax
c0001e0d:	83 ec 10             	sub    esp,0x10
c0001e10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e14:	e8 67 fc ff ff       	call   c0001a80 <mem_cpy>
c0001e19:	83 fb 05             	cmp    ebx,0x5
c0001e1c:	76 2d                	jbe    c0001e4b <gen_numname+0x4a>
c0001e1e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e21:	66 85 c0             	test   ax,ax
c0001e24:	74 25                	je     c0001e4b <gen_numname+0x4a>
c0001e26:	83 c7 02             	add    edi,0x2
c0001e29:	ba 10 00 00 00       	mov    edx,0x10
c0001e2e:	01 db                	add    ebx,ebx
c0001e30:	89 c1                	mov    ecx,eax
c0001e32:	66 d1 e8             	shr    ax,1
c0001e35:	83 e1 01             	and    ecx,0x1
c0001e38:	01 cb                	add    ebx,ecx
c0001e3a:	0f ba e3 10          	bt     ebx,0x10
c0001e3e:	73 06                	jae    c0001e46 <gen_numname+0x45>
c0001e40:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e46:	4a                   	dec    edx
c0001e47:	75 e5                	jne    c0001e2e <gen_numname+0x2d>
c0001e49:	eb d3                	jmp    c0001e1e <gen_numname+0x1d>
c0001e4b:	b8 07 00 00 00       	mov    eax,0x7
c0001e50:	88 d9                	mov    cl,bl
c0001e52:	83 e1 0f             	and    ecx,0xf
c0001e55:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e58:	80 fa 39             	cmp    dl,0x39
c0001e5b:	76 03                	jbe    c0001e60 <gen_numname+0x5f>
c0001e5d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e60:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e63:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e67:	89 da                	mov    edx,ebx
c0001e69:	c1 ea 04             	shr    edx,0x4
c0001e6c:	83 fb 0f             	cmp    ebx,0xf
c0001e6f:	76 06                	jbe    c0001e77 <gen_numname+0x76>
c0001e71:	89 c8                	mov    eax,ecx
c0001e73:	89 d3                	mov    ebx,edx
c0001e75:	eb d9                	jmp    c0001e50 <gen_numname+0x4f>
c0001e77:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7c:	31 d2                	xor    edx,edx
c0001e7e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e81:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e84:	39 ca                	cmp    edx,ecx
c0001e86:	73 18                	jae    c0001ea0 <gen_numname+0x9f>
c0001e88:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8b:	3c 20                	cmp    al,0x20
c0001e8d:	74 11                	je     c0001ea0 <gen_numname+0x9f>
c0001e8f:	e8 41 fc ff ff       	call   c0001ad5 <dbc_1st>
c0001e94:	85 c0                	test   eax,eax
c0001e96:	74 05                	je     c0001e9d <gen_numname+0x9c>
c0001e98:	39 d3                	cmp    ebx,edx
c0001e9a:	74 04                	je     c0001ea0 <gen_numname+0x9f>
c0001e9c:	42                   	inc    edx
c0001e9d:	42                   	inc    edx
c0001e9e:	eb e1                	jmp    c0001e81 <gen_numname+0x80>
c0001ea0:	b0 20                	mov    al,0x20
c0001ea2:	83 f9 07             	cmp    ecx,0x7
c0001ea5:	77 05                	ja     c0001eac <gen_numname+0xab>
c0001ea7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eab:	41                   	inc    ecx
c0001eac:	42                   	inc    edx
c0001ead:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb1:	83 fa 07             	cmp    edx,0x7
c0001eb4:	76 ea                	jbe    c0001ea0 <gen_numname+0x9f>
c0001eb6:	83 c4 10             	add    esp,0x10
c0001eb9:	5b                   	pop    ebx
c0001eba:	5e                   	pop    esi
c0001ebb:	5f                   	pop    edi
c0001ebc:	c3                   	ret    

c0001ebd <sum_sfn>:
c0001ebd:	31 c9                	xor    ecx,ecx
c0001ebf:	31 d2                	xor    edx,edx
c0001ec1:	d0 ca                	ror    dl,1
c0001ec3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec6:	41                   	inc    ecx
c0001ec7:	83 f9 0b             	cmp    ecx,0xb
c0001eca:	75 f5                	jne    c0001ec1 <sum_sfn+0x4>
c0001ecc:	88 d0                	mov    al,dl
c0001ece:	c3                   	ret    

c0001ecf <xdir_sum>:
c0001ecf:	56                   	push   esi
c0001ed0:	31 c9                	xor    ecx,ecx
c0001ed2:	53                   	push   ebx
c0001ed3:	31 d2                	xor    edx,edx
c0001ed5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ed9:	43                   	inc    ebx
c0001eda:	c1 e3 05             	shl    ebx,0x5
c0001edd:	83 fa 02             	cmp    edx,0x2
c0001ee0:	74 0b                	je     c0001eed <xdir_sum+0x1e>
c0001ee2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee6:	66 d1 c9             	ror    cx,1
c0001ee9:	01 f1                	add    ecx,esi
c0001eeb:	eb 05                	jmp    c0001ef2 <xdir_sum+0x23>
c0001eed:	ba 03 00 00 00       	mov    edx,0x3
c0001ef2:	42                   	inc    edx
c0001ef3:	39 d3                	cmp    ebx,edx
c0001ef5:	77 e6                	ja     c0001edd <xdir_sum+0xe>
c0001ef7:	89 c8                	mov    eax,ecx
c0001ef9:	5b                   	pop    ebx
c0001efa:	5e                   	pop    esi
c0001efb:	c3                   	ret    

c0001efc <xsum32>:
c0001efc:	d1 ca                	ror    edx,1
c0001efe:	0f b6 c0             	movzx  eax,al
c0001f01:	01 d0                	add    eax,edx
c0001f03:	c3                   	ret    

c0001f04 <get_xfileinfo>:
c0001f04:	55                   	push   ebp
c0001f05:	31 c9                	xor    ecx,ecx
c0001f07:	57                   	push   edi
c0001f08:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0d:	56                   	push   esi
c0001f0e:	31 ff                	xor    edi,edi
c0001f10:	53                   	push   ebx
c0001f11:	89 c6                	mov    esi,eax
c0001f13:	83 ec 0c             	sub    esp,0xc
c0001f16:	89 d3                	mov    ebx,edx
c0001f18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f1f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f23:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f26:	76 6d                	jbe    c0001f95 <get_xfileinfo+0x91>
c0001f28:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f2e:	76 0b                	jbe    c0001f3b <get_xfileinfo+0x37>
c0001f30:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f34:	bf 01 00 00 00       	mov    edi,0x1
c0001f39:	eb 63                	jmp    c0001f9e <get_xfileinfo+0x9a>
c0001f3b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f41:	75 03                	jne    c0001f46 <get_xfileinfo+0x42>
c0001f43:	83 c5 02             	add    ebp,0x2
c0001f46:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f49:	83 c5 02             	add    ebp,0x2
c0001f4c:	e8 b0 fa ff ff       	call   c0001a01 <ld_word>
c0001f51:	ff 04 24             	inc    DWORD PTR [esp]
c0001f54:	66 85 c9             	test   cx,cx
c0001f57:	75 0d                	jne    c0001f66 <get_xfileinfo+0x62>
c0001f59:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f5f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f64:	76 2b                	jbe    c0001f91 <get_xfileinfo+0x8d>
c0001f66:	c1 e1 10             	shl    ecx,0x10
c0001f69:	ba ff 00 00 00       	mov    edx,0xff
c0001f6e:	0f b7 c0             	movzx  eax,ax
c0001f71:	29 fa                	sub    edx,edi
c0001f73:	09 c8                	or     eax,ecx
c0001f75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f79:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f81:	e8 1b fc ff ff       	call   c0001ba1 <put_utf>
c0001f86:	84 c0                	test   al,al
c0001f88:	74 a6                	je     c0001f30 <get_xfileinfo+0x2c>
c0001f8a:	0f b6 c0             	movzx  eax,al
c0001f8d:	01 c7                	add    edi,eax
c0001f8f:	31 c0                	xor    eax,eax
c0001f91:	89 c1                	mov    ecx,eax
c0001f93:	eb 8a                	jmp    c0001f1f <get_xfileinfo+0x1b>
c0001f95:	85 ff                	test   edi,edi
c0001f97:	74 97                	je     c0001f30 <get_xfileinfo+0x2c>
c0001f99:	66 85 c9             	test   cx,cx
c0001f9c:	75 92                	jne    c0001f30 <get_xfileinfo+0x2c>
c0001f9e:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa3:	31 c0                	xor    eax,eax
c0001fa5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fa9:	31 d2                	xor    edx,edx
c0001fab:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fae:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb1:	80 e1 10             	and    cl,0x10
c0001fb4:	75 08                	jne    c0001fbe <get_xfileinfo+0xba>
c0001fb6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fb9:	e8 68 fa ff ff       	call   c0001a26 <ld_qword>
c0001fbe:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc6:	e8 36 fa ff ff       	call   c0001a01 <ld_word>
c0001fcb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fcf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd2:	e8 2a fa ff ff       	call   c0001a01 <ld_word>
c0001fd7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdb:	83 c4 0c             	add    esp,0xc
c0001fde:	5b                   	pop    ebx
c0001fdf:	5e                   	pop    esi
c0001fe0:	5f                   	pop    edi
c0001fe1:	5d                   	pop    ebp
c0001fe2:	c3                   	ret    

c0001fe3 <get_ldnumber>:
c0001fe3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe5:	85 d2                	test   edx,edx
c0001fe7:	74 14                	je     c0001ffd <get_ldnumber+0x1a>
c0001fe9:	56                   	push   esi
c0001fea:	53                   	push   ebx
c0001feb:	89 d3                	mov    ebx,edx
c0001fed:	43                   	inc    ebx
c0001fee:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff1:	80 f9 1f             	cmp    cl,0x1f
c0001ff4:	76 0d                	jbe    c0002003 <get_ldnumber+0x20>
c0001ff6:	80 f9 3a             	cmp    cl,0x3a
c0001ff9:	75 f2                	jne    c0001fed <get_ldnumber+0xa>
c0001ffb:	eb 0a                	jmp    c0002007 <get_ldnumber+0x24>
c0001ffd:	83 c9 ff             	or     ecx,0xffffffff
c0002000:	89 c8                	mov    eax,ecx
c0002002:	c3                   	ret    
c0002003:	31 c9                	xor    ecx,ecx
c0002005:	eb 24                	jmp    c000202b <get_ldnumber+0x48>
c0002007:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200d:	80 f9 09             	cmp    cl,0x9
c0002010:	77 16                	ja     c0002028 <get_ldnumber+0x45>
c0002012:	83 c2 02             	add    edx,0x2
c0002015:	83 c9 ff             	or     ecx,0xffffffff
c0002018:	39 d3                	cmp    ebx,edx
c000201a:	75 0f                	jne    c000202b <get_ldnumber+0x48>
c000201c:	89 f2                	mov    edx,esi
c000201e:	89 18                	mov    DWORD PTR [eax],ebx
c0002020:	0f be ca             	movsx  ecx,dl
c0002023:	83 e9 30             	sub    ecx,0x30
c0002026:	eb 03                	jmp    c000202b <get_ldnumber+0x48>
c0002028:	83 c9 ff             	or     ecx,0xffffffff
c000202b:	89 c8                	mov    eax,ecx
c000202d:	5b                   	pop    ebx
c000202e:	5e                   	pop    esi
c000202f:	c3                   	ret    

c0002030 <crc32>:
c0002030:	56                   	push   esi
c0002031:	89 d6                	mov    esi,edx
c0002033:	53                   	push   ebx
c0002034:	b2 01                	mov    dl,0x1
c0002036:	bb 08 00 00 00       	mov    ebx,0x8
c000203b:	89 f1                	mov    ecx,esi
c000203d:	84 d1                	test   cl,dl
c000203f:	0f 95 c1             	setne  cl
c0002042:	0f b6 c9             	movzx  ecx,cl
c0002045:	31 c1                	xor    ecx,eax
c0002047:	89 c8                	mov    eax,ecx
c0002049:	d1 e8                	shr    eax,1
c000204b:	80 e1 01             	and    cl,0x1
c000204e:	74 05                	je     c0002055 <crc32+0x25>
c0002050:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002055:	d1 e2                	shl    edx,1
c0002057:	4b                   	dec    ebx
c0002058:	75 e1                	jne    c000203b <crc32+0xb>
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	c3                   	ret    

c000205d <test_gpt_header>:
c000205d:	55                   	push   ebp
c000205e:	b9 10 00 00 00       	mov    ecx,0x10
c0002063:	57                   	push   edi
c0002064:	ba 40 6e 02 c0       	mov    edx,0xc0026e40
c0002069:	56                   	push   esi
c000206a:	31 ff                	xor    edi,edi
c000206c:	53                   	push   ebx
c000206d:	89 c3                	mov    ebx,eax
c000206f:	e8 2c fa ff ff       	call   c0001aa0 <mem_cmp>
c0002074:	85 c0                	test   eax,eax
c0002076:	75 55                	jne    c00020cd <test_gpt_header+0x70>
c0002078:	89 c7                	mov    edi,eax
c000207a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000207f:	83 ce ff             	or     esi,0xffffffff
c0002082:	31 d2                	xor    edx,edx
c0002084:	83 fd 03             	cmp    ebp,0x3
c0002087:	76 05                	jbe    c000208e <test_gpt_header+0x31>
c0002089:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000208e:	89 f0                	mov    eax,esi
c0002090:	45                   	inc    ebp
c0002091:	e8 9a ff ff ff       	call   c0002030 <crc32>
c0002096:	83 fd 4c             	cmp    ebp,0x4c
c0002099:	89 c6                	mov    esi,eax
c000209b:	75 e5                	jne    c0002082 <test_gpt_header+0x25>
c000209d:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a0:	f7 d6                	not    esi
c00020a2:	e8 67 f9 ff ff       	call   c0001a0e <ld_dword>
c00020a7:	39 c6                	cmp    esi,eax
c00020a9:	75 22                	jne    c00020cd <test_gpt_header+0x70>
c00020ab:	8d 43 54             	lea    eax,[ebx+0x54]
c00020ae:	e8 5b f9 ff ff       	call   c0001a0e <ld_dword>
c00020b3:	83 c0 80             	add    eax,0xffffff80
c00020b6:	75 15                	jne    c00020cd <test_gpt_header+0x70>
c00020b8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bb:	e8 4e f9 ff ff       	call   c0001a0e <ld_dword>
c00020c0:	3d 80 00 00 00       	cmp    eax,0x80
c00020c5:	0f 96 c0             	setbe  al
c00020c8:	0f b6 c0             	movzx  eax,al
c00020cb:	89 c7                	mov    edi,eax
c00020cd:	5b                   	pop    ebx
c00020ce:	89 f8                	mov    eax,edi
c00020d0:	5e                   	pop    esi
c00020d1:	5f                   	pop    edi
c00020d2:	5d                   	pop    ebp
c00020d3:	c3                   	ret    

c00020d4 <make_rand>:
c00020d4:	56                   	push   esi
c00020d5:	85 c0                	test   eax,eax
c00020d7:	53                   	push   ebx
c00020d8:	75 05                	jne    c00020df <make_rand+0xb>
c00020da:	b8 01 00 00 00       	mov    eax,0x1
c00020df:	01 d1                	add    ecx,edx
c00020e1:	bb 08 00 00 00       	mov    ebx,0x8
c00020e6:	89 c6                	mov    esi,eax
c00020e8:	d1 e8                	shr    eax,1
c00020ea:	83 e6 01             	and    esi,0x1
c00020ed:	85 f6                	test   esi,esi
c00020ef:	74 05                	je     c00020f6 <make_rand+0x22>
c00020f1:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f6:	4b                   	dec    ebx
c00020f7:	75 ed                	jne    c00020e6 <make_rand+0x12>
c00020f9:	42                   	inc    edx
c00020fa:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020fd:	39 ca                	cmp    edx,ecx
c00020ff:	75 e0                	jne    c00020e1 <make_rand+0xd>
c0002101:	5b                   	pop    ebx
c0002102:	5e                   	pop    esi
c0002103:	c3                   	ret    

c0002104 <validate>:
c0002104:	56                   	push   esi
c0002105:	53                   	push   ebx
c0002106:	89 d6                	mov    esi,edx
c0002108:	51                   	push   ecx
c0002109:	85 c0                	test   eax,eax
c000210b:	75 09                	jne    c0002116 <validate+0x12>
c000210d:	b8 09 00 00 00       	mov    eax,0x9
c0002112:	31 c9                	xor    ecx,ecx
c0002114:	eb 2f                	jmp    c0002145 <validate+0x41>
c0002116:	89 c3                	mov    ebx,eax
c0002118:	8b 00                	mov    eax,DWORD PTR [eax]
c000211a:	85 c0                	test   eax,eax
c000211c:	74 ef                	je     c000210d <validate+0x9>
c000211e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002121:	74 ea                	je     c000210d <validate+0x9>
c0002123:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002127:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212b:	75 e0                	jne    c000210d <validate+0x9>
c000212d:	83 ec 0c             	sub    esp,0xc
c0002130:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002134:	50                   	push   eax
c0002135:	e8 76 f8 ff ff       	call   c00019b0 <disk_status>
c000213a:	83 c4 10             	add    esp,0x10
c000213d:	a8 01                	test   al,0x1
c000213f:	75 cc                	jne    c000210d <validate+0x9>
c0002141:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002143:	31 c0                	xor    eax,eax
c0002145:	89 0e                	mov    DWORD PTR [esi],ecx
c0002147:	5a                   	pop    edx
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	c3                   	ret    

c000214b <sync_window>:
c000214b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000214f:	0f 84 85 00 00 00    	je     c00021da <sync_window+0x8f>
c0002155:	55                   	push   ebp
c0002156:	8d 68 54             	lea    ebp,[eax+0x54]
c0002159:	57                   	push   edi
c000215a:	56                   	push   esi
c000215b:	53                   	push   ebx
c000215c:	89 c3                	mov    ebx,eax
c000215e:	83 ec 28             	sub    esp,0x28
c0002161:	6a 01                	push   0x1
c0002163:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002166:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002169:	55                   	push   ebp
c000216a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000216e:	50                   	push   eax
c000216f:	e8 58 f8 ff ff       	call   c00019cc <disk_write>
c0002174:	83 c4 20             	add    esp,0x20
c0002177:	ba 01 00 00 00       	mov    edx,0x1
c000217c:	85 c0                	test   eax,eax
c000217e:	75 50                	jne    c00021d0 <sync_window+0x85>
c0002180:	31 ff                	xor    edi,edi
c0002182:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002185:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002189:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002190:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002193:	89 c6                	mov    esi,eax
c0002195:	89 d7                	mov    edi,edx
c0002197:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000219e:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021a9:	73 23                	jae    c00021ce <sync_window+0x83>
c00021ab:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021af:	75 1d                	jne    c00021ce <sync_window+0x83>
c00021b1:	83 ec 0c             	sub    esp,0xc
c00021b4:	6a 01                	push   0x1
c00021b6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ba:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021be:	52                   	push   edx
c00021bf:	50                   	push   eax
c00021c0:	55                   	push   ebp
c00021c1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c5:	50                   	push   eax
c00021c6:	e8 01 f8 ff ff       	call   c00019cc <disk_write>
c00021cb:	83 c4 20             	add    esp,0x20
c00021ce:	31 d2                	xor    edx,edx
c00021d0:	83 c4 1c             	add    esp,0x1c
c00021d3:	89 d0                	mov    eax,edx
c00021d5:	5b                   	pop    ebx
c00021d6:	5e                   	pop    esi
c00021d7:	5f                   	pop    edi
c00021d8:	5d                   	pop    ebp
c00021d9:	c3                   	ret    
c00021da:	31 d2                	xor    edx,edx
c00021dc:	89 d0                	mov    eax,edx
c00021de:	c3                   	ret    

c00021df <move_window>:
c00021df:	56                   	push   esi
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 14             	sub    esp,0x14
c00021e6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021e9:	75 07                	jne    c00021f2 <move_window+0x13>
c00021eb:	31 f6                	xor    esi,esi
c00021ed:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f0:	74 59                	je     c000224b <move_window+0x6c>
c00021f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fa:	89 d8                	mov    eax,ebx
c00021fc:	e8 4a ff ff ff       	call   c000214b <sync_window>
c0002201:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002205:	89 c6                	mov    esi,eax
c0002207:	85 c0                	test   eax,eax
c0002209:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220d:	75 3c                	jne    c000224b <move_window+0x6c>
c000220f:	83 ec 0c             	sub    esp,0xc
c0002212:	8d 43 54             	lea    eax,[ebx+0x54]
c0002215:	6a 01                	push   0x1
c0002217:	51                   	push   ecx
c0002218:	52                   	push   edx
c0002219:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002221:	50                   	push   eax
c0002222:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002226:	50                   	push   eax
c0002227:	e8 8a f7 ff ff       	call   c00019b6 <disk_read>
c000222c:	83 c4 20             	add    esp,0x20
c000222f:	85 c0                	test   eax,eax
c0002231:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002235:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002239:	74 0a                	je     c0002245 <move_window+0x66>
c000223b:	83 ca ff             	or     edx,0xffffffff
c000223e:	be 01 00 00 00       	mov    esi,0x1
c0002243:	89 d1                	mov    ecx,edx
c0002245:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002248:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224b:	89 f0                	mov    eax,esi
c000224d:	83 c4 14             	add    esp,0x14
c0002250:	5b                   	pop    ebx
c0002251:	5e                   	pop    esi
c0002252:	c3                   	ret    

c0002253 <check_fs>:
c0002253:	53                   	push   ebx
c0002254:	89 c3                	mov    ebx,eax
c0002256:	83 ec 08             	sub    esp,0x8
c0002259:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002264:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226b:	e8 6f ff ff ff       	call   c00021df <move_window>
c0002270:	ba 04 00 00 00       	mov    edx,0x4
c0002275:	85 c0                	test   eax,eax
c0002277:	0f 85 89 00 00 00    	jne    c0002306 <check_fs+0xb3>
c000227d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002283:	e8 79 f7 ff ff       	call   c0001a01 <ld_word>
c0002288:	ba 03 00 00 00       	mov    edx,0x3
c000228d:	66 3d 55 aa          	cmp    ax,0xaa55
c0002291:	75 73                	jne    c0002306 <check_fs+0xb3>
c0002293:	ba 60 6f 02 c0       	mov    edx,0xc0026f60
c0002298:	8d 43 54             	lea    eax,[ebx+0x54]
c000229b:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a0:	e8 fb f7 ff ff       	call   c0001aa0 <mem_cmp>
c00022a5:	ba 01 00 00 00       	mov    edx,0x1
c00022aa:	85 c0                	test   eax,eax
c00022ac:	74 58                	je     c0002306 <check_fs+0xb3>
c00022ae:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b1:	8d 50 18             	lea    edx,[eax+0x18]
c00022b4:	80 fa 01             	cmp    dl,0x1
c00022b7:	76 09                	jbe    c00022c2 <check_fs+0x6f>
c00022b9:	ba 02 00 00 00       	mov    edx,0x2
c00022be:	3c eb                	cmp    al,0xeb
c00022c0:	75 44                	jne    c0002306 <check_fs+0xb3>
c00022c2:	ba 48 9d 02 c0       	mov    edx,0xc0029d48
c00022c7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022cd:	b9 03 00 00 00       	mov    ecx,0x3
c00022d2:	e8 c9 f7 ff ff       	call   c0001aa0 <mem_cmp>
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	85 c0                	test   eax,eax
c00022db:	74 29                	je     c0002306 <check_fs+0xb3>
c00022dd:	ba 6c 6f 02 c0       	mov    edx,0xc0026f6c
c00022e2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022e8:	b9 05 00 00 00       	mov    ecx,0x5
c00022ed:	e8 ae f7 ff ff       	call   c0001aa0 <mem_cmp>
c00022f2:	31 d2                	xor    edx,edx
c00022f4:	85 c0                	test   eax,eax
c00022f6:	74 0e                	je     c0002306 <check_fs+0xb3>
c00022f8:	31 d2                	xor    edx,edx
c00022fa:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002301:	0f 95 c2             	setne  dl
c0002304:	01 d2                	add    edx,edx
c0002306:	89 d0                	mov    eax,edx
c0002308:	83 c4 08             	add    esp,0x8
c000230b:	5b                   	pop    ebx
c000230c:	c3                   	ret    

c000230d <find_volume>:
c000230d:	55                   	push   ebp
c000230e:	31 c9                	xor    ecx,ecx
c0002310:	57                   	push   edi
c0002311:	56                   	push   esi
c0002312:	89 d6                	mov    esi,edx
c0002314:	53                   	push   ebx
c0002315:	31 d2                	xor    edx,edx
c0002317:	83 ec 3c             	sub    esp,0x3c
c000231a:	89 c3                	mov    ebx,eax
c000231c:	e8 32 ff ff ff       	call   c0002253 <check_fs>
c0002321:	83 f8 02             	cmp    eax,0x2
c0002324:	74 0e                	je     c0002334 <find_volume+0x27>
c0002326:	0f 87 5d 01 00 00    	ja     c0002489 <find_volume+0x17c>
c000232c:	85 f6                	test   esi,esi
c000232e:	0f 84 55 01 00 00    	je     c0002489 <find_volume+0x17c>
c0002334:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233b:	0f 85 dd 00 00 00    	jne    c000241e <find_volume+0x111>
c0002341:	31 c9                	xor    ecx,ecx
c0002343:	ba 01 00 00 00       	mov    edx,0x1
c0002348:	89 d8                	mov    eax,ebx
c000234a:	e8 90 fe ff ff       	call   c00021df <move_window>
c000234f:	85 c0                	test   eax,eax
c0002351:	74 0a                	je     c000235d <find_volume+0x50>
c0002353:	b8 04 00 00 00       	mov    eax,0x4
c0002358:	e9 2c 01 00 00       	jmp    c0002489 <find_volume+0x17c>
c000235d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002360:	89 e8                	mov    eax,ebp
c0002362:	e8 f6 fc ff ff       	call   c000205d <test_gpt_header>
c0002367:	85 c0                	test   eax,eax
c0002369:	75 0a                	jne    c0002375 <find_volume+0x68>
c000236b:	b8 03 00 00 00       	mov    eax,0x3
c0002370:	e9 14 01 00 00       	jmp    c0002489 <find_volume+0x17c>
c0002375:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237b:	e8 8e f6 ff ff       	call   c0001a0e <ld_dword>
c0002380:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002384:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238a:	e8 97 f6 ff ff       	call   c0001a26 <ld_qword>
c000238f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002397:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000239f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ab:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023af:	74 ba                	je     c000236b <find_volume+0x5e>
c00023b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b5:	31 c9                	xor    ecx,ecx
c00023b7:	c1 e7 07             	shl    edi,0x7
c00023ba:	89 d8                	mov    eax,ebx
c00023bc:	89 fa                	mov    edx,edi
c00023be:	c1 ea 09             	shr    edx,0x9
c00023c1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023c9:	e8 11 fe ff ff       	call   c00021df <move_window>
c00023ce:	85 c0                	test   eax,eax
c00023d0:	75 81                	jne    c0002353 <find_volume+0x46>
c00023d2:	81 e7 80 01 00 00    	and    edi,0x180
c00023d8:	b9 10 00 00 00       	mov    ecx,0x10
c00023dd:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e1:	ba 50 6f 02 c0       	mov    edx,0xc0026f50
c00023e6:	e8 b5 f6 ff ff       	call   c0001aa0 <mem_cmp>
c00023eb:	85 c0                	test   eax,eax
c00023ed:	75 29                	jne    c0002418 <find_volume+0x10b>
c00023ef:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f3:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f7:	e8 2a f6 ff ff       	call   c0001a26 <ld_qword>
c00023fc:	89 d1                	mov    ecx,edx
c00023fe:	89 c2                	mov    edx,eax
c0002400:	89 d8                	mov    eax,ebx
c0002402:	e8 4c fe ff ff       	call   c0002253 <check_fs>
c0002407:	85 f6                	test   esi,esi
c0002409:	75 07                	jne    c0002412 <find_volume+0x105>
c000240b:	83 f8 01             	cmp    eax,0x1
c000240e:	77 08                	ja     c0002418 <find_volume+0x10b>
c0002410:	eb 77                	jmp    c0002489 <find_volume+0x17c>
c0002412:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002416:	74 71                	je     c0002489 <find_volume+0x17c>
c0002418:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241c:	eb 89                	jmp    c00023a7 <find_volume+0x9a>
c000241e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002422:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002428:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000242e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002432:	89 cd                	mov    ebp,ecx
c0002434:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002438:	89 f8                	mov    eax,edi
c000243a:	83 c7 10             	add    edi,0x10
c000243d:	e8 cc f5 ff ff       	call   c0001a0e <ld_dword>
c0002442:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002446:	89 01                	mov    DWORD PTR [ecx],eax
c0002448:	83 c1 04             	add    ecx,0x4
c000244b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000244f:	75 e3                	jne    c0002434 <find_volume+0x127>
c0002451:	31 ff                	xor    edi,edi
c0002453:	85 f6                	test   esi,esi
c0002455:	74 03                	je     c000245a <find_volume+0x14d>
c0002457:	8d 7e ff             	lea    edi,[esi-0x1]
c000245a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000245e:	85 d2                	test   edx,edx
c0002460:	74 14                	je     c0002476 <find_volume+0x169>
c0002462:	31 c9                	xor    ecx,ecx
c0002464:	89 d8                	mov    eax,ebx
c0002466:	e8 e8 fd ff ff       	call   c0002253 <check_fs>
c000246b:	83 f8 01             	cmp    eax,0x1
c000246e:	76 19                	jbe    c0002489 <find_volume+0x17c>
c0002470:	85 f6                	test   esi,esi
c0002472:	74 0f                	je     c0002483 <find_volume+0x176>
c0002474:	eb 13                	jmp    c0002489 <find_volume+0x17c>
c0002476:	85 f6                	test   esi,esi
c0002478:	0f 85 ed fe ff ff    	jne    c000236b <find_volume+0x5e>
c000247e:	b8 03 00 00 00       	mov    eax,0x3
c0002483:	47                   	inc    edi
c0002484:	83 ff 03             	cmp    edi,0x3
c0002487:	76 d1                	jbe    c000245a <find_volume+0x14d>
c0002489:	83 c4 3c             	add    esp,0x3c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	57                   	push   edi
c0002493:	89 cf                	mov    edi,ecx
c0002495:	56                   	push   esi
c0002496:	53                   	push   ebx
c0002497:	bb 0b 00 00 00       	mov    ebx,0xb
c000249c:	83 ec 3c             	sub    esp,0x3c
c000249f:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024a9:	e8 35 fb ff ff       	call   c0001fe3 <get_ldnumber>
c00024ae:	85 c0                	test   eax,eax
c00024b0:	0f 88 3a 05 00 00    	js     c00029f0 <mount_volume+0x55f>
c00024b6:	8b 2c 85 e0 b7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd4820]
c00024bd:	89 c6                	mov    esi,eax
c00024bf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c4:	85 ed                	test   ebp,ebp
c00024c6:	0f 84 24 05 00 00    	je     c00029f0 <mount_volume+0x55f>
c00024cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d0:	83 e7 fe             	and    edi,0xfffffffe
c00024d3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024d9:	74 32                	je     c000250d <mount_volume+0x7c>
c00024db:	83 ec 0c             	sub    esp,0xc
c00024de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e2:	50                   	push   eax
c00024e3:	e8 c8 f4 ff ff       	call   c00019b0 <disk_status>
c00024e8:	83 c4 10             	add    esp,0x10
c00024eb:	a8 01                	test   al,0x1
c00024ed:	75 1e                	jne    c000250d <mount_volume+0x7c>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	89 f9                	mov    ecx,edi
c00024f3:	84 c9                	test   cl,cl
c00024f5:	0f 84 f5 04 00 00    	je     c00029f0 <mount_volume+0x55f>
c00024fb:	a8 04                	test   al,0x4
c00024fd:	0f 84 ed 04 00 00    	je     c00029f0 <mount_volume+0x55f>
c0002503:	bb 0a 00 00 00       	mov    ebx,0xa
c0002508:	e9 e3 04 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c000250d:	83 ec 0c             	sub    esp,0xc
c0002510:	89 f0                	mov    eax,esi
c0002512:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002516:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002519:	0f b6 f0             	movzx  esi,al
c000251c:	bb 03 00 00 00       	mov    ebx,0x3
c0002521:	56                   	push   esi
c0002522:	e8 8c f4 ff ff       	call   c00019b3 <disk_initialize>
c0002527:	83 c4 10             	add    esp,0x10
c000252a:	a8 01                	test   al,0x1
c000252c:	0f 85 be 04 00 00    	jne    c00029f0 <mount_volume+0x55f>
c0002532:	89 f9                	mov    ecx,edi
c0002534:	84 c9                	test   cl,cl
c0002536:	74 04                	je     c000253c <mount_volume+0xab>
c0002538:	a8 04                	test   al,0x4
c000253a:	75 c7                	jne    c0002503 <mount_volume+0x72>
c000253c:	31 d2                	xor    edx,edx
c000253e:	89 e8                	mov    eax,ebp
c0002540:	e8 c8 fd ff ff       	call   c000230d <find_volume>
c0002545:	83 f8 04             	cmp    eax,0x4
c0002548:	75 0a                	jne    c0002554 <mount_volume+0xc3>
c000254a:	bb 01 00 00 00       	mov    ebx,0x1
c000254f:	e9 9c 04 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 8d 04 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c0002563:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002566:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002571:	75 17                	jne    c000258a <mount_volume+0xf9>
c0002573:	b8 0b 00 00 00       	mov    eax,0xb
c0002578:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257d:	75 da                	jne    c0002559 <mount_volume+0xc8>
c000257f:	40                   	inc    eax
c0002580:	83 f8 40             	cmp    eax,0x40
c0002583:	75 f3                	jne    c0002578 <mount_volume+0xe7>
c0002585:	e9 5a 02 00 00       	jmp    c00027e4 <mount_volume+0x353>
c000258a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258d:	e8 6f f4 ff ff       	call   c0001a01 <ld_word>
c0002592:	66 3d 00 02          	cmp    ax,0x200
c0002596:	75 c1                	jne    c0002559 <mount_volume+0xc8>
c0002598:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259b:	e8 61 f4 ff ff       	call   c0001a01 <ld_word>
c00025a0:	0f b7 c0             	movzx  eax,ax
c00025a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a7:	85 c0                	test   eax,eax
c00025a9:	75 0c                	jne    c00025b7 <mount_volume+0x126>
c00025ab:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ae:	e8 5b f4 ff ff       	call   c0001a0e <ld_dword>
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025be:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025c8:	48                   	dec    eax
c00025c9:	3c 01                	cmp    al,0x1
c00025cb:	77 8c                	ja     c0002559 <mount_volume+0xc8>
c00025cd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d1:	89 c3                	mov    ebx,eax
c00025d3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d7:	66 85 c0             	test   ax,ax
c00025da:	0f 84 79 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c00025e0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e3:	85 d8                	test   eax,ebx
c00025e5:	0f 85 6e ff ff ff    	jne    c0002559 <mount_volume+0xc8>
c00025eb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025ee:	e8 0e f4 ff ff       	call   c0001a01 <ld_word>
c00025f3:	89 c7                	mov    edi,eax
c00025f5:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025f9:	a8 0f                	test   al,0xf
c00025fb:	0f 85 58 ff ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002601:	8d 45 67             	lea    eax,[ebp+0x67]
c0002604:	e8 f8 f3 ff ff       	call   c0001a01 <ld_word>
c0002609:	0f b7 f0             	movzx  esi,ax
c000260c:	85 f6                	test   esi,esi
c000260e:	75 0a                	jne    c000261a <mount_volume+0x189>
c0002610:	8d 45 74             	lea    eax,[ebp+0x74]
c0002613:	e8 f6 f3 ff ff       	call   c0001a0e <ld_dword>
c0002618:	89 c6                	mov    esi,eax
c000261a:	8d 45 62             	lea    eax,[ebp+0x62]
c000261d:	e8 df f3 ff ff       	call   c0001a01 <ld_word>
c0002622:	66 85 c0             	test   ax,ax
c0002625:	0f 84 2e ff ff ff    	je     c0002559 <mount_volume+0xc8>
c000262b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002630:	0f b7 c8             	movzx  ecx,ax
c0002633:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002638:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263c:	89 fa                	mov    edx,edi
c000263e:	66 c1 ea 04          	shr    dx,0x4
c0002642:	0f b7 d2             	movzx  edx,dx
c0002645:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002649:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002650:	39 c6                	cmp    esi,eax
c0002652:	0f 82 01 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002658:	29 c6                	sub    esi,eax
c000265a:	31 d2                	xor    edx,edx
c000265c:	89 f0                	mov    eax,esi
c000265e:	f7 f3                	div    ebx
c0002660:	39 de                	cmp    esi,ebx
c0002662:	0f 82 f1 fe ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002668:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266d:	0f 87 e6 fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002673:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002678:	0f 86 63 03 00 00    	jbe    c00029e1 <mount_volume+0x550>
c000267e:	bb 03 00 00 00       	mov    ebx,0x3
c0002683:	8d 70 02             	lea    esi,[eax+0x2]
c0002686:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000268e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002691:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002694:	31 d2                	xor    edx,edx
c0002696:	89 c8                	mov    eax,ecx
c0002698:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000269f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ab:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026ae:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b5:	31 d2                	xor    edx,edx
c00026b7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026bf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c5:	83 fb 03             	cmp    ebx,0x3
c00026c8:	75 2b                	jne    c00026f5 <mount_volume+0x264>
c00026ca:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026cd:	e8 2f f3 ff ff       	call   c0001a01 <ld_word>
c00026d2:	66 09 c7             	or     di,ax
c00026d5:	0f 85 7e fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c00026db:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e1:	c1 e6 02             	shl    esi,0x2
c00026e4:	e8 25 f3 ff ff       	call   c0001a0e <ld_dword>
c00026e9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f0:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f3:	eb 30                	jmp    c0002725 <mount_volume+0x294>
c00026f5:	66 85 ff             	test   di,di
c00026f8:	0f 84 5b fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026fe:	31 d2                	xor    edx,edx
c0002700:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002704:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002708:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000270f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002712:	83 fb 02             	cmp    ebx,0x2
c0002715:	75 04                	jne    c000271b <mount_volume+0x28a>
c0002717:	01 f6                	add    esi,esi
c0002719:	eb 0a                	jmp    c0002725 <mount_volume+0x294>
c000271b:	8d 04 76             	lea    eax,[esi+esi*2]
c000271e:	83 e6 01             	and    esi,0x1
c0002721:	d1 e8                	shr    eax,1
c0002723:	01 c6                	add    esi,eax
c0002725:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272b:	c1 ee 09             	shr    esi,0x9
c000272e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002732:	0f 87 21 fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002738:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000273f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002746:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274a:	83 fb 03             	cmp    ebx,0x3
c000274d:	75 7a                	jne    c00027c9 <mount_volume+0x338>
c000274f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002755:	e8 a7 f2 ff ff       	call   c0001a01 <ld_word>
c000275a:	66 48                	dec    ax
c000275c:	75 6b                	jne    c00027c9 <mount_volume+0x338>
c000275e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002762:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002766:	83 c2 01             	add    edx,0x1
c0002769:	89 e8                	mov    eax,ebp
c000276b:	83 d1 00             	adc    ecx,0x0
c000276e:	e8 6c fa ff ff       	call   c00021df <move_window>
c0002773:	85 c0                	test   eax,eax
c0002775:	75 52                	jne    c00027c9 <mount_volume+0x338>
c0002777:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002781:	e8 7b f2 ff ff       	call   c0001a01 <ld_word>
c0002786:	66 3d 55 aa          	cmp    ax,0xaa55
c000278a:	75 3d                	jne    c00027c9 <mount_volume+0x338>
c000278c:	8d 45 54             	lea    eax,[ebp+0x54]
c000278f:	e8 7a f2 ff ff       	call   c0001a0e <ld_dword>
c0002794:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002799:	75 2e                	jne    c00027c9 <mount_volume+0x338>
c000279b:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a1:	e8 68 f2 ff ff       	call   c0001a0e <ld_dword>
c00027a6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ab:	75 1c                	jne    c00027c9 <mount_volume+0x338>
c00027ad:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b3:	e8 56 f2 ff ff       	call   c0001a0e <ld_dword>
c00027b8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c1:	e8 48 f2 ff ff       	call   c0001a0e <ld_dword>
c00027c6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027c9:	66 a1 c0 b7 02 c0    	mov    ax,ds:0xc002b7c0
c00027cf:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d2:	40                   	inc    eax
c00027d3:	31 db                	xor    ebx,ebx
c00027d5:	66 a3 c0 b7 02 c0    	mov    ds:0xc002b7c0,ax
c00027db:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027df:	e9 0c 02 00 00       	jmp    c00029f0 <mount_volume+0x55f>
c00027e4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027ea:	e8 12 f2 ff ff       	call   c0001a01 <ld_word>
c00027ef:	66 3d 00 01          	cmp    ax,0x100
c00027f3:	0f 85 60 fd ff ff    	jne    c0002559 <mount_volume+0xc8>
c00027f9:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002800:	0f 85 53 fd ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002806:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280c:	e8 15 f2 ff ff       	call   c0001a26 <ld_qword>
c0002811:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002815:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002819:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000281f:	e8 ea f1 ff ff       	call   c0001a0e <ld_dword>
c0002824:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002827:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002830:	fe c8                	dec    al
c0002832:	0f 85 21 fd ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002838:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000283f:	bb 01 00 00 00       	mov    ebx,0x1
c0002844:	d3 e3                	shl    ebx,cl
c0002846:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284a:	66 85 db             	test   bx,bx
c000284d:	0f 84 06 fd ff ff    	je     c0002559 <mount_volume+0xc8>
c0002853:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002859:	e8 b0 f1 ff ff       	call   c0001a0e <ld_dword>
c000285e:	89 c6                	mov    esi,eax
c0002860:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002865:	0f 87 ee fc ff ff    	ja     c0002559 <mount_volume+0xc8>
c000286b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286f:	8d 40 02             	lea    eax,[eax+0x2]
c0002872:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002875:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000287f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002885:	e8 84 f1 ff ff       	call   c0001a0e <ld_dword>
c000288a:	31 d2                	xor    edx,edx
c000288c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002890:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002894:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002898:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000289f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028a8:	e8 61 f1 ff ff       	call   c0001a0e <ld_dword>
c00028ad:	31 d2                	xor    edx,edx
c00028af:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c1:	0f b7 c3             	movzx  eax,bx
c00028c4:	31 d2                	xor    edx,edx
c00028c6:	0f af f0             	imul   esi,eax
c00028c9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028cd:	89 f0                	mov    eax,esi
c00028cf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028db:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028df:	39 c1                	cmp    ecx,eax
c00028e1:	89 df                	mov    edi,ebx
c00028e3:	19 d7                	sbb    edi,edx
c00028e5:	0f 82 6e fc ff ff    	jb     c0002559 <mount_volume+0xc8>
c00028eb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f1:	31 db                	xor    ebx,ebx
c00028f3:	e8 16 f1 ff ff       	call   c0001a0e <ld_dword>
c00028f8:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00028ff:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002902:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290a:	85 db                	test   ebx,ebx
c000290c:	75 39                	jne    c0002947 <mount_volume+0x4b6>
c000290e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002912:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002916:	0f 86 3d fc ff ff    	jbe    c0002559 <mount_volume+0xc8>
c000291c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000291f:	31 ff                	xor    edi,edi
c0002921:	89 e8                	mov    eax,ebp
c0002923:	e8 72 f3 ff ff       	call   c0001c9a <clst2sect>
c0002928:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292c:	01 c6                	add    esi,eax
c000292e:	89 e8                	mov    eax,ebp
c0002930:	11 d7                	adc    edi,edx
c0002932:	89 f2                	mov    edx,esi
c0002934:	89 f9                	mov    ecx,edi
c0002936:	e8 a4 f8 ff ff       	call   c00021df <move_window>
c000293b:	85 c0                	test   eax,eax
c000293d:	0f 85 07 fc ff ff    	jne    c000254a <mount_volume+0xb9>
c0002943:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002947:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294c:	74 0b                	je     c0002959 <mount_volume+0x4c8>
c000294e:	83 c3 20             	add    ebx,0x20
c0002951:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002957:	eb b1                	jmp    c000290a <mount_volume+0x479>
c0002959:	8d 75 54             	lea    esi,[ebp+0x54]
c000295c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002960:	e8 a9 f0 ff ff       	call   c0001a0e <ld_dword>
c0002965:	89 c3                	mov    ebx,eax
c0002967:	83 f8 01             	cmp    eax,0x1
c000296a:	0f 86 e9 fb ff ff    	jbe    c0002559 <mount_volume+0xc8>
c0002970:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002973:	0f 86 e0 fb ff ff    	jbe    c0002559 <mount_volume+0xc8>
c0002979:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002980:	0f af c2             	imul   eax,edx
c0002983:	31 d2                	xor    edx,edx
c0002985:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002988:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000298e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002991:	31 c9                	xor    ecx,ecx
c0002993:	89 da                	mov    edx,ebx
c0002995:	89 e8                	mov    eax,ebp
c0002997:	c1 ea 07             	shr    edx,0x7
c000299a:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299d:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a0:	e8 3a f8 ff ff       	call   c00021df <move_window>
c00029a5:	85 c0                	test   eax,eax
c00029a7:	0f 85 9d fb ff ff    	jne    c000254a <mount_volume+0xb9>
c00029ad:	89 d8                	mov    eax,ebx
c00029af:	83 e0 7f             	and    eax,0x7f
c00029b2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b5:	e8 54 f0 ff ff       	call   c0001a0e <ld_dword>
c00029ba:	83 f8 ff             	cmp    eax,0xffffffff
c00029bd:	74 0a                	je     c00029c9 <mount_volume+0x538>
c00029bf:	43                   	inc    ebx
c00029c0:	39 d8                	cmp    eax,ebx
c00029c2:	74 cd                	je     c0002991 <mount_volume+0x500>
c00029c4:	e9 90 fb ff ff       	jmp    c0002559 <mount_volume+0xc8>
c00029c9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d7:	bb 04 00 00 00       	mov    ebx,0x4
c00029dc:	e9 e8 fd ff ff       	jmp    c00027c9 <mount_volume+0x338>
c00029e1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e6:	19 db                	sbb    ebx,ebx
c00029e8:	83 c3 02             	add    ebx,0x2
c00029eb:	e9 93 fc ff ff       	jmp    c0002683 <mount_volume+0x1f2>
c00029f0:	83 c4 3c             	add    esp,0x3c
c00029f3:	89 d8                	mov    eax,ebx
c00029f5:	5b                   	pop    ebx
c00029f6:	5e                   	pop    esi
c00029f7:	5f                   	pop    edi
c00029f8:	5d                   	pop    ebp
c00029f9:	c3                   	ret    

c00029fa <find_bitmap>:
c00029fa:	55                   	push   ebp
c00029fb:	57                   	push   edi
c00029fc:	89 c7                	mov    edi,eax
c00029fe:	56                   	push   esi
c00029ff:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a02:	53                   	push   ebx
c0002a03:	83 ec 1c             	sub    esp,0x1c
c0002a06:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a09:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0d:	83 e8 02             	sub    eax,0x2
c0002a10:	39 f0                	cmp    eax,esi
c0002a12:	77 02                	ja     c0002a16 <find_bitmap+0x1c>
c0002a14:	31 f6                	xor    esi,esi
c0002a16:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1a:	89 f3                	mov    ebx,esi
c0002a1c:	31 ed                	xor    ebp,ebp
c0002a1e:	31 c9                	xor    ecx,ecx
c0002a20:	89 da                	mov    edx,ebx
c0002a22:	89 f8                	mov    eax,edi
c0002a24:	c1 ea 0c             	shr    edx,0xc
c0002a27:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2d:	e8 ad f7 ff ff       	call   c00021df <move_window>
c0002a32:	85 c0                	test   eax,eax
c0002a34:	75 68                	jne    c0002a9e <find_bitmap+0xa4>
c0002a36:	89 da                	mov    edx,ebx
c0002a38:	89 d9                	mov    ecx,ebx
c0002a3a:	c1 ea 03             	shr    edx,0x3
c0002a3d:	83 e1 07             	and    ecx,0x7
c0002a40:	b8 01 00 00 00       	mov    eax,0x1
c0002a45:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4b:	d3 e0                	shl    eax,cl
c0002a4d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a50:	83 e9 02             	sub    ecx,0x2
c0002a53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a57:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5b:	43                   	inc    ebx
c0002a5c:	21 c1                	and    ecx,eax
c0002a5e:	d1 e0                	shl    eax,1
c0002a60:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a64:	77 09                	ja     c0002a6f <find_bitmap+0x75>
c0002a66:	31 db                	xor    ebx,ebx
c0002a68:	ba 00 02 00 00       	mov    edx,0x200
c0002a6d:	31 c0                	xor    eax,eax
c0002a6f:	84 c9                	test   cl,cl
c0002a71:	75 10                	jne    c0002a83 <find_bitmap+0x89>
c0002a73:	45                   	inc    ebp
c0002a74:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a78:	75 0f                	jne    c0002a89 <find_bitmap+0x8f>
c0002a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a7e:	83 c0 02             	add    eax,0x2
c0002a81:	eb 22                	jmp    c0002aa5 <find_bitmap+0xab>
c0002a83:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a87:	31 ed                	xor    ebp,ebp
c0002a89:	39 de                	cmp    esi,ebx
c0002a8b:	74 16                	je     c0002aa3 <find_bitmap+0xa9>
c0002a8d:	84 c0                	test   al,al
c0002a8f:	75 c6                	jne    c0002a57 <find_bitmap+0x5d>
c0002a91:	42                   	inc    edx
c0002a92:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a98:	77 84                	ja     c0002a1e <find_bitmap+0x24>
c0002a9a:	b0 01                	mov    al,0x1
c0002a9c:	eb b9                	jmp    c0002a57 <find_bitmap+0x5d>
c0002a9e:	83 c8 ff             	or     eax,0xffffffff
c0002aa1:	eb 02                	jmp    c0002aa5 <find_bitmap+0xab>
c0002aa3:	31 c0                	xor    eax,eax
c0002aa5:	83 c4 1c             	add    esp,0x1c
c0002aa8:	5b                   	pop    ebx
c0002aa9:	5e                   	pop    esi
c0002aaa:	5f                   	pop    edi
c0002aab:	5d                   	pop    ebp
c0002aac:	c3                   	ret    

c0002aad <change_bitmap>:
c0002aad:	55                   	push   ebp
c0002aae:	89 cd                	mov    ebp,ecx
c0002ab0:	57                   	push   edi
c0002ab1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab4:	56                   	push   esi
c0002ab5:	89 c7                	mov    edi,eax
c0002ab7:	53                   	push   ebx
c0002ab8:	89 c8                	mov    eax,ecx
c0002aba:	83 ec 1c             	sub    esp,0x1c
c0002abd:	31 d2                	xor    edx,edx
c0002abf:	89 ce                	mov    esi,ecx
c0002ac1:	c1 e8 0c             	shr    eax,0xc
c0002ac4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ac9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002acc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002acf:	c1 ee 03             	shr    esi,0x3
c0002ad2:	83 e1 07             	and    ecx,0x7
c0002ad5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002adb:	d3 e3                	shl    ebx,cl
c0002add:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae1:	89 c1                	mov    ecx,eax
c0002ae3:	89 d3                	mov    ebx,edx
c0002ae5:	83 c1 01             	add    ecx,0x1
c0002ae8:	83 d3 00             	adc    ebx,0x0
c0002aeb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af3:	89 d1                	mov    ecx,edx
c0002af5:	89 c2                	mov    edx,eax
c0002af7:	89 f8                	mov    eax,edi
c0002af9:	e8 e1 f6 ff ff       	call   c00021df <move_window>
c0002afe:	89 c1                	mov    ecx,eax
c0002b00:	85 c0                	test   eax,eax
c0002b02:	75 48                	jne    c0002b4c <change_bitmap+0x9f>
c0002b04:	31 d2                	xor    edx,edx
c0002b06:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b0e:	0f 95 c2             	setne  dl
c0002b11:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b15:	74 3c                	je     c0002b53 <change_bitmap+0xa6>
c0002b17:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1b:	4d                   	dec    ebp
c0002b1c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b20:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b24:	74 32                	je     c0002b58 <change_bitmap+0xab>
c0002b26:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2a:	75 d8                	jne    c0002b04 <change_bitmap+0x57>
c0002b2c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b2f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b34:	89 c3                	mov    ebx,eax
c0002b36:	31 f6                	xor    esi,esi
c0002b38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b40:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b46:	74 99                	je     c0002ae1 <change_bitmap+0x34>
c0002b48:	89 de                	mov    esi,ebx
c0002b4a:	eb b8                	jmp    c0002b04 <change_bitmap+0x57>
c0002b4c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b51:	eb 05                	jmp    c0002b58 <change_bitmap+0xab>
c0002b53:	b9 02 00 00 00       	mov    ecx,0x2
c0002b58:	83 c4 1c             	add    esp,0x1c
c0002b5b:	89 c8                	mov    eax,ecx
c0002b5d:	5b                   	pop    ebx
c0002b5e:	5e                   	pop    esi
c0002b5f:	5f                   	pop    edi
c0002b60:	5d                   	pop    ebp
c0002b61:	c3                   	ret    

c0002b62 <put_fat>:
c0002b62:	83 fa 01             	cmp    edx,0x1
c0002b65:	0f 86 7b 01 00 00    	jbe    c0002ce6 <put_fat+0x184>
c0002b6b:	55                   	push   ebp
c0002b6c:	57                   	push   edi
c0002b6d:	89 cf                	mov    edi,ecx
c0002b6f:	56                   	push   esi
c0002b70:	b9 02 00 00 00       	mov    ecx,0x2
c0002b75:	53                   	push   ebx
c0002b76:	89 c6                	mov    esi,eax
c0002b78:	83 ec 1c             	sub    esp,0x1c
c0002b7b:	89 d3                	mov    ebx,edx
c0002b7d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b80:	0f 86 68 01 00 00    	jbe    c0002cee <put_fat+0x18c>
c0002b86:	8a 00                	mov    al,BYTE PTR [eax]
c0002b88:	3c 02                	cmp    al,0x2
c0002b8a:	0f 84 c7 00 00 00    	je     c0002c57 <put_fat+0xf5>
c0002b90:	77 09                	ja     c0002b9b <put_fat+0x39>
c0002b92:	fe c8                	dec    al
c0002b94:	74 17                	je     c0002bad <put_fat+0x4b>
c0002b96:	e9 53 01 00 00       	jmp    c0002cee <put_fat+0x18c>
c0002b9b:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba0:	3c 04                	cmp    al,0x4
c0002ba2:	0f 86 e1 00 00 00    	jbe    c0002c89 <put_fat+0x127>
c0002ba8:	e9 41 01 00 00       	jmp    c0002cee <put_fat+0x18c>
c0002bad:	89 d5                	mov    ebp,edx
c0002baf:	31 c9                	xor    ecx,ecx
c0002bb1:	d1 ed                	shr    ebp,1
c0002bb3:	89 f0                	mov    eax,esi
c0002bb5:	01 d5                	add    ebp,edx
c0002bb7:	89 ea                	mov    edx,ebp
c0002bb9:	c1 ea 09             	shr    edx,0x9
c0002bbc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bbf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc2:	e8 18 f6 ff ff       	call   c00021df <move_window>
c0002bc7:	89 c1                	mov    ecx,eax
c0002bc9:	85 c0                	test   eax,eax
c0002bcb:	0f 85 1d 01 00 00    	jne    c0002cee <put_fat+0x18c>
c0002bd1:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bd8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002be9:	89 f8                	mov    eax,edi
c0002beb:	83 e3 01             	and    ebx,0x1
c0002bee:	74 0d                	je     c0002bfd <put_fat+0x9b>
c0002bf0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf3:	89 fa                	mov    edx,edi
c0002bf5:	83 e0 0f             	and    eax,0xf
c0002bf8:	c1 e2 04             	shl    edx,0x4
c0002bfb:	09 d0                	or     eax,edx
c0002bfd:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c04:	31 c9                	xor    ecx,ecx
c0002c06:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0a:	c1 ea 09             	shr    edx,0x9
c0002c0d:	89 f0                	mov    eax,esi
c0002c0f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c12:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c15:	e8 c5 f5 ff ff       	call   c00021df <move_window>
c0002c1a:	89 c1                	mov    ecx,eax
c0002c1c:	85 c0                	test   eax,eax
c0002c1e:	0f 85 ca 00 00 00    	jne    c0002cee <put_fat+0x18c>
c0002c24:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c28:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	85 db                	test   ebx,ebx
c0002c34:	74 07                	je     c0002c3d <put_fat+0xdb>
c0002c36:	c1 ef 04             	shr    edi,0x4
c0002c39:	89 fa                	mov    edx,edi
c0002c3b:	eb 0e                	jmp    c0002c4b <put_fat+0xe9>
c0002c3d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c40:	c1 ef 08             	shr    edi,0x8
c0002c43:	83 e2 f0             	and    edx,0xfffffff0
c0002c46:	83 e7 0f             	and    edi,0xf
c0002c49:	09 fa                	or     edx,edi
c0002c4b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c52:	e9 97 00 00 00       	jmp    c0002cee <put_fat+0x18c>
c0002c57:	31 c9                	xor    ecx,ecx
c0002c59:	c1 ea 08             	shr    edx,0x8
c0002c5c:	89 f0                	mov    eax,esi
c0002c5e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c61:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c64:	e8 76 f5 ff ff       	call   c00021df <move_window>
c0002c69:	89 c1                	mov    ecx,eax
c0002c6b:	85 c0                	test   eax,eax
c0002c6d:	75 7f                	jne    c0002cee <put_fat+0x18c>
c0002c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c73:	01 db                	add    ebx,ebx
c0002c75:	0f b7 d7             	movzx  edx,di
c0002c78:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c7e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c82:	e8 ec ed ff ff       	call   c0001a73 <st_word>
c0002c87:	eb 53                	jmp    c0002cdc <put_fat+0x17a>
c0002c89:	31 c9                	xor    ecx,ecx
c0002c8b:	c1 ea 07             	shr    edx,0x7
c0002c8e:	89 f0                	mov    eax,esi
c0002c90:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c93:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c96:	e8 44 f5 ff ff       	call   c00021df <move_window>
c0002c9b:	89 c1                	mov    ecx,eax
c0002c9d:	85 c0                	test   eax,eax
c0002c9f:	75 4d                	jne    c0002cee <put_fat+0x18c>
c0002ca1:	c1 e3 02             	shl    ebx,0x2
c0002ca4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002caa:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cad:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb1:	74 1c                	je     c0002ccf <put_fat+0x16d>
c0002cb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbd:	89 d8                	mov    eax,ebx
c0002cbf:	e8 4a ed ff ff       	call   c0001a0e <ld_dword>
c0002cc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cc8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ccd:	09 c7                	or     edi,eax
c0002ccf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd3:	89 fa                	mov    edx,edi
c0002cd5:	89 d8                	mov    eax,ebx
c0002cd7:	e8 9b ed ff ff       	call   c0001a77 <st_dword>
c0002cdc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce4:	eb 08                	jmp    c0002cee <put_fat+0x18c>
c0002ce6:	b9 02 00 00 00       	mov    ecx,0x2
c0002ceb:	89 c8                	mov    eax,ecx
c0002ced:	c3                   	ret    
c0002cee:	83 c4 1c             	add    esp,0x1c
c0002cf1:	89 c8                	mov    eax,ecx
c0002cf3:	5b                   	pop    ebx
c0002cf4:	5e                   	pop    esi
c0002cf5:	5f                   	pop    edi
c0002cf6:	5d                   	pop    ebp
c0002cf7:	c3                   	ret    

c0002cf8 <fill_last_frag>:
c0002cf8:	57                   	push   edi
c0002cf9:	89 cf                	mov    edi,ecx
c0002cfb:	56                   	push   esi
c0002cfc:	89 d6                	mov    esi,edx
c0002cfe:	53                   	push   ebx
c0002cff:	89 c3                	mov    ebx,eax
c0002d01:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d04:	85 c0                	test   eax,eax
c0002d06:	74 21                	je     c0002d29 <fill_last_frag+0x31>
c0002d08:	89 f9                	mov    ecx,edi
c0002d0a:	83 f8 01             	cmp    eax,0x1
c0002d0d:	76 05                	jbe    c0002d14 <fill_last_frag+0x1c>
c0002d0f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d12:	29 c1                	sub    ecx,eax
c0002d14:	8d 56 01             	lea    edx,[esi+0x1]
c0002d17:	29 c2                	sub    edx,eax
c0002d19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1b:	e8 42 fe ff ff       	call   c0002b62 <put_fat>
c0002d20:	85 c0                	test   eax,eax
c0002d22:	75 05                	jne    c0002d29 <fill_last_frag+0x31>
c0002d24:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d27:	eb d8                	jmp    c0002d01 <fill_last_frag+0x9>
c0002d29:	5b                   	pop    ebx
c0002d2a:	5e                   	pop    esi
c0002d2b:	5f                   	pop    edi
c0002d2c:	c3                   	ret    

c0002d2d <fill_first_frag>:
c0002d2d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d31:	75 2d                	jne    c0002d60 <fill_first_frag+0x33>
c0002d33:	57                   	push   edi
c0002d34:	56                   	push   esi
c0002d35:	53                   	push   ebx
c0002d36:	89 c3                	mov    ebx,eax
c0002d38:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d3e:	01 d7                	add    edi,edx
c0002d40:	39 fa                	cmp    edx,edi
c0002d42:	74 14                	je     c0002d58 <fill_first_frag+0x2b>
c0002d44:	8d 72 01             	lea    esi,[edx+0x1]
c0002d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d49:	89 f1                	mov    ecx,esi
c0002d4b:	e8 12 fe ff ff       	call   c0002b62 <put_fat>
c0002d50:	89 f2                	mov    edx,esi
c0002d52:	85 c0                	test   eax,eax
c0002d54:	74 ea                	je     c0002d40 <fill_first_frag+0x13>
c0002d56:	eb 0b                	jmp    c0002d63 <fill_first_frag+0x36>
c0002d58:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5c:	31 c0                	xor    eax,eax
c0002d5e:	eb 03                	jmp    c0002d63 <fill_first_frag+0x36>
c0002d60:	31 c0                	xor    eax,eax
c0002d62:	c3                   	ret    
c0002d63:	5b                   	pop    ebx
c0002d64:	5e                   	pop    esi
c0002d65:	5f                   	pop    edi
c0002d66:	c3                   	ret    

c0002d67 <get_fat>:
c0002d67:	83 fa 01             	cmp    edx,0x1
c0002d6a:	0f 86 db 01 00 00    	jbe    c0002f4b <get_fat+0x1e4>
c0002d70:	55                   	push   ebp
c0002d71:	b9 01 00 00 00       	mov    ecx,0x1
c0002d76:	57                   	push   edi
c0002d77:	56                   	push   esi
c0002d78:	53                   	push   ebx
c0002d79:	83 ec 1c             	sub    esp,0x1c
c0002d7c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d7e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d81:	0f 86 cc 01 00 00    	jbe    c0002f53 <get_fat+0x1ec>
c0002d87:	89 c3                	mov    ebx,eax
c0002d89:	89 d6                	mov    esi,edx
c0002d8b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8d:	3c 02                	cmp    al,0x2
c0002d8f:	0f 84 99 00 00 00    	je     c0002e2e <get_fat+0xc7>
c0002d95:	77 09                	ja     c0002da0 <get_fat+0x39>
c0002d97:	fe c8                	dec    al
c0002d99:	74 1a                	je     c0002db5 <get_fat+0x4e>
c0002d9b:	e9 b3 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002da0:	3c 03                	cmp    al,0x3
c0002da2:	0f 84 b5 00 00 00    	je     c0002e5d <get_fat+0xf6>
c0002da8:	3c 04                	cmp    al,0x4
c0002daa:	0f 84 e3 00 00 00    	je     c0002e93 <get_fat+0x12c>
c0002db0:	e9 9e 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002db5:	89 d3                	mov    ebx,edx
c0002db7:	31 c9                	xor    ecx,ecx
c0002db9:	d1 eb                	shr    ebx,1
c0002dbb:	89 f8                	mov    eax,edi
c0002dbd:	01 d3                	add    ebx,edx
c0002dbf:	89 da                	mov    edx,ebx
c0002dc1:	c1 ea 09             	shr    edx,0x9
c0002dc4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dca:	e8 10 f4 ff ff       	call   c00021df <move_window>
c0002dcf:	85 c0                	test   eax,eax
c0002dd1:	74 08                	je     c0002ddb <get_fat+0x74>
c0002dd3:	83 c9 ff             	or     ecx,0xffffffff
c0002dd6:	e9 78 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002ddb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dde:	31 c9                	xor    ecx,ecx
c0002de0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de6:	89 ea                	mov    edx,ebp
c0002de8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dec:	c1 ea 09             	shr    edx,0x9
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 e3 f3 ff ff       	call   c00021df <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	75 d3                	jne    c0002dd3 <get_fat+0x6c>
c0002e00:	0f b6 c3             	movzx  eax,bl
c0002e03:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e09:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e0e:	c1 e3 08             	shl    ebx,0x8
c0002e11:	09 c3                	or     ebx,eax
c0002e13:	89 d9                	mov    ecx,ebx
c0002e15:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1b:	83 e6 01             	and    esi,0x1
c0002e1e:	0f 84 2f 01 00 00    	je     c0002f53 <get_fat+0x1ec>
c0002e24:	89 d9                	mov    ecx,ebx
c0002e26:	c1 e9 04             	shr    ecx,0x4
c0002e29:	e9 25 01 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002e2e:	31 c9                	xor    ecx,ecx
c0002e30:	c1 ea 08             	shr    edx,0x8
c0002e33:	89 f8                	mov    eax,edi
c0002e35:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e38:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3b:	e8 9f f3 ff ff       	call   c00021df <move_window>
c0002e40:	85 c0                	test   eax,eax
c0002e42:	75 8f                	jne    c0002dd3 <get_fat+0x6c>
c0002e44:	01 f6                	add    esi,esi
c0002e46:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e50:	e8 ac eb ff ff       	call   c0001a01 <ld_word>
c0002e55:	0f b7 c8             	movzx  ecx,ax
c0002e58:	e9 f6 00 00 00       	jmp    c0002f53 <get_fat+0x1ec>
c0002e5d:	31 c9                	xor    ecx,ecx
c0002e5f:	c1 ea 07             	shr    edx,0x7
c0002e62:	89 f8                	mov    eax,edi
c0002e64:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e67:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6a:	e8 70 f3 ff ff       	call   c00021df <move_window>
c0002e6f:	85 c0                	test   eax,eax
c0002e71:	0f 85 5c ff ff ff    	jne    c0002dd3 <get_fat+0x6c>
c0002e77:	c1 e6 02             	shl    esi,0x2
c0002e7a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e80:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e84:	e8 85 eb ff ff       	call   c0001a0e <ld_dword>
c0002e89:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e8e:	e9 b4 00 00 00       	jmp    c0002f47 <get_fat+0x1e0>
c0002e93:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e96:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e99:	89 d1                	mov    ecx,edx
c0002e9b:	09 c1                	or     ecx,eax
c0002e9d:	74 06                	je     c0002ea5 <get_fat+0x13e>
c0002e9f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea3:	75 0f                	jne    c0002eb4 <get_fat+0x14d>
c0002ea5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eaa:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eae:	0f 85 9f 00 00 00    	jne    c0002f53 <get_fat+0x1ec>
c0002eb4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eb8:	89 f5                	mov    ebp,esi
c0002eba:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ebf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec5:	80 f9 02             	cmp    cl,0x2
c0002ec8:	75 35                	jne    c0002eff <get_fat+0x198>
c0002eca:	83 c0 ff             	add    eax,0xffffffff
c0002ecd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed2:	83 d2 ff             	adc    edx,0xffffffff
c0002ed5:	31 db                	xor    ebx,ebx
c0002ed7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edb:	53                   	push   ebx
c0002edc:	c1 ea 09             	shr    edx,0x9
c0002edf:	51                   	push   ecx
c0002ee0:	52                   	push   edx
c0002ee1:	50                   	push   eax
c0002ee2:	e8 25 16 02 00       	call   c002450c <__udivdi3>
c0002ee7:	83 c4 10             	add    esp,0x10
c0002eea:	b9 01 00 00 00       	mov    ecx,0x1
c0002eef:	39 c5                	cmp    ebp,eax
c0002ef1:	77 60                	ja     c0002f53 <get_fat+0x1ec>
c0002ef3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002ef8:	74 59                	je     c0002f53 <get_fat+0x1ec>
c0002efa:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002efd:	eb 54                	jmp    c0002f53 <get_fat+0x1ec>
c0002eff:	80 f9 03             	cmp    cl,0x3
c0002f02:	75 05                	jne    c0002f09 <get_fat+0x1a2>
c0002f04:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f07:	77 f1                	ja     c0002efa <get_fat+0x193>
c0002f09:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f0e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f12:	75 3f                	jne    c0002f53 <get_fat+0x1ec>
c0002f14:	31 c9                	xor    ecx,ecx
c0002f16:	89 f2                	mov    edx,esi
c0002f18:	89 f8                	mov    eax,edi
c0002f1a:	c1 ea 07             	shr    edx,0x7
c0002f1d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f20:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f23:	e8 b7 f2 ff ff       	call   c00021df <move_window>
c0002f28:	85 c0                	test   eax,eax
c0002f2a:	0f 85 a3 fe ff ff    	jne    c0002dd3 <get_fat+0x6c>
c0002f30:	c1 e6 02             	shl    esi,0x2
c0002f33:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f39:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3d:	e8 cc ea ff ff       	call   c0001a0e <ld_dword>
c0002f42:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f47:	89 c1                	mov    ecx,eax
c0002f49:	eb 08                	jmp    c0002f53 <get_fat+0x1ec>
c0002f4b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f50:	89 c8                	mov    eax,ecx
c0002f52:	c3                   	ret    
c0002f53:	83 c4 1c             	add    esp,0x1c
c0002f56:	89 c8                	mov    eax,ecx
c0002f58:	5b                   	pop    ebx
c0002f59:	5e                   	pop    esi
c0002f5a:	5f                   	pop    edi
c0002f5b:	5d                   	pop    ebp
c0002f5c:	c3                   	ret    

c0002f5d <dir_sdi>:
c0002f5d:	55                   	push   ebp
c0002f5e:	57                   	push   edi
c0002f5f:	56                   	push   esi
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	83 ec 1c             	sub    esp,0x1c
c0002f66:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f68:	31 c0                	xor    eax,eax
c0002f6a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6d:	0f 94 c0             	sete   al
c0002f70:	48                   	dec    eax
c0002f71:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f76:	05 00 00 00 10       	add    eax,0x10000000
c0002f7b:	39 d0                	cmp    eax,edx
c0002f7d:	77 0a                	ja     c0002f89 <dir_sdi+0x2c>
c0002f7f:	b8 02 00 00 00       	mov    eax,0x2
c0002f84:	e9 c4 00 00 00       	jmp    c000304d <dir_sdi+0xf0>
c0002f89:	89 d6                	mov    esi,edx
c0002f8b:	f6 c2 1f             	test   dl,0x1f
c0002f8e:	75 ef                	jne    c0002f7f <dir_sdi+0x22>
c0002f90:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f93:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f96:	85 c9                	test   ecx,ecx
c0002f98:	75 2d                	jne    c0002fc7 <dir_sdi+0x6a>
c0002f9a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9d:	77 1b                	ja     c0002fba <dir_sdi+0x5d>
c0002f9f:	89 f2                	mov    edx,esi
c0002fa1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa5:	c1 ea 05             	shr    edx,0x5
c0002fa8:	39 c2                	cmp    edx,eax
c0002faa:	73 d3                	jae    c0002f7f <dir_sdi+0x22>
c0002fac:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002faf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fb8:	eb 4b                	jmp    c0003005 <dir_sdi+0xa8>
c0002fba:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	74 da                	je     c0002f9f <dir_sdi+0x42>
c0002fc5:	89 c1                	mov    ecx,eax
c0002fc7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcb:	c1 e5 09             	shl    ebp,0x9
c0002fce:	89 ca                	mov    edx,ecx
c0002fd0:	39 ee                	cmp    esi,ebp
c0002fd2:	72 1c                	jb     c0002ff0 <dir_sdi+0x93>
c0002fd4:	89 d8                	mov    eax,ebx
c0002fd6:	e8 8c fd ff ff       	call   c0002d67 <get_fat>
c0002fdb:	89 c1                	mov    ecx,eax
c0002fdd:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe0:	74 66                	je     c0003048 <dir_sdi+0xeb>
c0002fe2:	83 f8 01             	cmp    eax,0x1
c0002fe5:	76 98                	jbe    c0002f7f <dir_sdi+0x22>
c0002fe7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002fea:	76 93                	jbe    c0002f7f <dir_sdi+0x22>
c0002fec:	29 ee                	sub    esi,ebp
c0002fee:	eb de                	jmp    c0002fce <dir_sdi+0x71>
c0002ff0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff4:	89 f8                	mov    eax,edi
c0002ff6:	e8 9f ec ff ff       	call   c0001c9a <clst2sect>
c0002ffb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002fff:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003002:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003005:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003008:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000300e:	89 d1                	mov    ecx,edx
c0003010:	09 c1                	or     ecx,eax
c0003012:	0f 84 67 ff ff ff    	je     c0002f7f <dir_sdi+0x22>
c0003018:	89 f1                	mov    ecx,esi
c000301a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003022:	c1 e9 09             	shr    ecx,0x9
c0003025:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003029:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003031:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003034:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003041:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003044:	31 c0                	xor    eax,eax
c0003046:	eb 05                	jmp    c000304d <dir_sdi+0xf0>
c0003048:	b8 01 00 00 00       	mov    eax,0x1
c000304d:	83 c4 1c             	add    esp,0x1c
c0003050:	5b                   	pop    ebx
c0003051:	5e                   	pop    esi
c0003052:	5f                   	pop    edi
c0003053:	5d                   	pop    ebp
c0003054:	c3                   	ret    

c0003055 <create_chain>:
c0003055:	55                   	push   ebp
c0003056:	89 c5                	mov    ebp,eax
c0003058:	57                   	push   edi
c0003059:	56                   	push   esi
c000305a:	53                   	push   ebx
c000305b:	83 ec 1c             	sub    esp,0x1c
c000305e:	85 d2                	test   edx,edx
c0003060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003064:	8b 30                	mov    esi,DWORD PTR [eax]
c0003066:	75 0e                	jne    c0003076 <create_chain+0x21>
c0003068:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306b:	85 ff                	test   edi,edi
c000306d:	74 39                	je     c00030a8 <create_chain+0x53>
c000306f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003072:	77 39                	ja     c00030ad <create_chain+0x58>
c0003074:	eb 32                	jmp    c00030a8 <create_chain+0x53>
c0003076:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307a:	e8 e8 fc ff ff       	call   c0002d67 <get_fat>
c000307f:	89 c3                	mov    ebx,eax
c0003081:	83 f8 01             	cmp    eax,0x1
c0003084:	77 0a                	ja     c0003090 <create_chain+0x3b>
c0003086:	bb 01 00 00 00       	mov    ebx,0x1
c000308b:	e9 ba 01 00 00       	jmp    c000324a <create_chain+0x1f5>
c0003090:	83 f8 ff             	cmp    eax,0xffffffff
c0003093:	0f 84 62 01 00 00    	je     c00031fb <create_chain+0x1a6>
c0003099:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309c:	0f 87 a8 01 00 00    	ja     c000324a <create_chain+0x1f5>
c00030a2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a6:	eb 05                	jmp    c00030ad <create_chain+0x58>
c00030a8:	bf 01 00 00 00       	mov    edi,0x1
c00030ad:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b1:	75 07                	jne    c00030ba <create_chain+0x65>
c00030b3:	31 db                	xor    ebx,ebx
c00030b5:	e9 90 01 00 00       	jmp    c000324a <create_chain+0x1f5>
c00030ba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030bd:	75 74                	jne    c0003133 <create_chain+0xde>
c00030bf:	b9 01 00 00 00       	mov    ecx,0x1
c00030c4:	89 fa                	mov    edx,edi
c00030c6:	89 f0                	mov    eax,esi
c00030c8:	e8 2d f9 ff ff       	call   c00029fa <find_bitmap>
c00030cd:	89 c3                	mov    ebx,eax
c00030cf:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d5:	0f 87 6f 01 00 00    	ja     c000324a <create_chain+0x1f5>
c00030db:	83 ec 0c             	sub    esp,0xc
c00030de:	b9 01 00 00 00       	mov    ecx,0x1
c00030e3:	6a 01                	push   0x1
c00030e5:	89 da                	mov    edx,ebx
c00030e7:	89 f0                	mov    eax,esi
c00030e9:	e8 bf f9 ff ff       	call   c0002aad <change_bitmap>
c00030ee:	83 c4 10             	add    esp,0x10
c00030f1:	83 f8 02             	cmp    eax,0x2
c00030f4:	74 90                	je     c0003086 <create_chain+0x31>
c00030f6:	83 f8 01             	cmp    eax,0x1
c00030f9:	0f 84 fc 00 00 00    	je     c00031fb <create_chain+0x1a6>
c00030ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003104:	75 09                	jne    c000310f <create_chain+0xba>
c0003106:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310a:	e9 0c 01 00 00       	jmp    c000321b <create_chain+0x1c6>
c000310f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003113:	0f 85 e7 00 00 00    	jne    c0003200 <create_chain+0x1ab>
c0003119:	8d 57 01             	lea    edx,[edi+0x1]
c000311c:	39 da                	cmp    edx,ebx
c000311e:	0f 84 f7 00 00 00    	je     c000321b <create_chain+0x1c6>
c0003124:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003127:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000312e:	e9 cd 00 00 00       	jmp    c0003200 <create_chain+0x1ab>
c0003133:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003137:	75 41                	jne    c000317a <create_chain+0x125>
c0003139:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000313f:	77 05                	ja     c0003146 <create_chain+0xf1>
c0003141:	bb 02 00 00 00       	mov    ebx,0x2
c0003146:	89 da                	mov    edx,ebx
c0003148:	89 e8                	mov    eax,ebp
c000314a:	e8 18 fc ff ff       	call   c0002d67 <get_fat>
c000314f:	83 f8 01             	cmp    eax,0x1
c0003152:	0f 84 2e ff ff ff    	je     c0003086 <create_chain+0x31>
c0003158:	83 f8 ff             	cmp    eax,0xffffffff
c000315b:	0f 84 9a 00 00 00    	je     c00031fb <create_chain+0x1a6>
c0003161:	85 c0                	test   eax,eax
c0003163:	74 11                	je     c0003176 <create_chain+0x121>
c0003165:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003168:	83 f8 01             	cmp    eax,0x1
c000316b:	76 0d                	jbe    c000317a <create_chain+0x125>
c000316d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003170:	76 08                	jbe    c000317a <create_chain+0x125>
c0003172:	89 c7                	mov    edi,eax
c0003174:	eb 04                	jmp    c000317a <create_chain+0x125>
c0003176:	85 db                	test   ebx,ebx
c0003178:	75 38                	jne    c00031b2 <create_chain+0x15d>
c000317a:	89 fb                	mov    ebx,edi
c000317c:	43                   	inc    ebx
c000317d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003180:	77 0e                	ja     c0003190 <create_chain+0x13b>
c0003182:	83 ff 01             	cmp    edi,0x1
c0003185:	0f 86 28 ff ff ff    	jbe    c00030b3 <create_chain+0x5e>
c000318b:	bb 02 00 00 00       	mov    ebx,0x2
c0003190:	89 da                	mov    edx,ebx
c0003192:	89 e8                	mov    eax,ebp
c0003194:	e8 ce fb ff ff       	call   c0002d67 <get_fat>
c0003199:	85 c0                	test   eax,eax
c000319b:	74 15                	je     c00031b2 <create_chain+0x15d>
c000319d:	83 f8 01             	cmp    eax,0x1
c00031a0:	0f 84 e0 fe ff ff    	je     c0003086 <create_chain+0x31>
c00031a6:	40                   	inc    eax
c00031a7:	74 52                	je     c00031fb <create_chain+0x1a6>
c00031a9:	39 fb                	cmp    ebx,edi
c00031ab:	75 cf                	jne    c000317c <create_chain+0x127>
c00031ad:	e9 01 ff ff ff       	jmp    c00030b3 <create_chain+0x5e>
c00031b2:	83 c9 ff             	or     ecx,0xffffffff
c00031b5:	89 da                	mov    edx,ebx
c00031b7:	89 f0                	mov    eax,esi
c00031b9:	e8 a4 f9 ff ff       	call   c0002b62 <put_fat>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 32                	jne    c00031f4 <create_chain+0x19f>
c00031c2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c7:	74 11                	je     c00031da <create_chain+0x185>
c00031c9:	89 d9                	mov    ecx,ebx
c00031cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cf:	89 f0                	mov    eax,esi
c00031d1:	e8 8c f9 ff ff       	call   c0002b62 <put_fat>
c00031d6:	85 c0                	test   eax,eax
c00031d8:	75 1a                	jne    c00031f4 <create_chain+0x19f>
c00031da:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031dd:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e6:	39 d0                	cmp    eax,edx
c00031e8:	77 04                	ja     c00031ee <create_chain+0x199>
c00031ea:	48                   	dec    eax
c00031eb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031ee:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f2:	eb 56                	jmp    c000324a <create_chain+0x1f5>
c00031f4:	48                   	dec    eax
c00031f5:	0f 85 8b fe ff ff    	jne    c0003086 <create_chain+0x31>
c00031fb:	83 cb ff             	or     ebx,0xffffffff
c00031fe:	eb 4a                	jmp    c000324a <create_chain+0x1f5>
c0003200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003204:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003207:	41                   	inc    ecx
c0003208:	39 d9                	cmp    ecx,ebx
c000320a:	75 19                	jne    c0003225 <create_chain+0x1d0>
c000320c:	b9 02 00 00 00       	mov    ecx,0x2
c0003211:	85 d2                	test   edx,edx
c0003213:	74 03                	je     c0003218 <create_chain+0x1c3>
c0003215:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003218:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321b:	85 c0                	test   eax,eax
c000321d:	0f 85 63 fe ff ff    	jne    c0003086 <create_chain+0x31>
c0003223:	eb b5                	jmp    c00031da <create_chain+0x185>
c0003225:	85 d2                	test   edx,edx
c0003227:	75 07                	jne    c0003230 <create_chain+0x1db>
c0003229:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003230:	89 d9                	mov    ecx,ebx
c0003232:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003236:	89 e8                	mov    eax,ebp
c0003238:	e8 bb fa ff ff       	call   c0002cf8 <fill_last_frag>
c000323d:	85 c0                	test   eax,eax
c000323f:	75 b3                	jne    c00031f4 <create_chain+0x19f>
c0003241:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003248:	eb 90                	jmp    c00031da <create_chain+0x185>
c000324a:	83 c4 1c             	add    esp,0x1c
c000324d:	89 d8                	mov    eax,ebx
c000324f:	5b                   	pop    ebx
c0003250:	5e                   	pop    esi
c0003251:	5f                   	pop    edi
c0003252:	5d                   	pop    ebp
c0003253:	c3                   	ret    

c0003254 <remove_chain>:
c0003254:	55                   	push   ebp
c0003255:	57                   	push   edi
c0003256:	56                   	push   esi
c0003257:	53                   	push   ebx
c0003258:	83 ec 1c             	sub    esp,0x1c
c000325b:	83 fa 01             	cmp    edx,0x1
c000325e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003262:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003264:	77 0a                	ja     c0003270 <remove_chain+0x1c>
c0003266:	b8 02 00 00 00       	mov    eax,0x2
c000326b:	e9 24 01 00 00       	jmp    c0003394 <remove_chain+0x140>
c0003270:	89 d6                	mov    esi,edx
c0003272:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003275:	76 ef                	jbe    c0003266 <remove_chain+0x12>
c0003277:	89 c7                	mov    edi,eax
c0003279:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000327e:	75 06                	jne    c0003286 <remove_chain+0x32>
c0003280:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003284:	eb 54                	jmp    c00032da <remove_chain+0x86>
c0003286:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003289:	75 06                	jne    c0003291 <remove_chain+0x3d>
c000328b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000328f:	74 ef                	je     c0003280 <remove_chain+0x2c>
c0003291:	83 c9 ff             	or     ecx,0xffffffff
c0003294:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003298:	89 d8                	mov    eax,ebx
c000329a:	e8 c3 f8 ff ff       	call   c0002b62 <put_fat>
c000329f:	85 c0                	test   eax,eax
c00032a1:	74 dd                	je     c0003280 <remove_chain+0x2c>
c00032a3:	e9 ec 00 00 00       	jmp    c0003394 <remove_chain+0x140>
c00032a8:	83 f8 01             	cmp    eax,0x1
c00032ab:	74 b9                	je     c0003266 <remove_chain+0x12>
c00032ad:	83 f8 ff             	cmp    eax,0xffffffff
c00032b0:	74 6d                	je     c000331f <remove_chain+0xcb>
c00032b2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b5:	75 6f                	jne    c0003326 <remove_chain+0xd2>
c00032b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ba:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032bd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c0:	39 d0                	cmp    eax,edx
c00032c2:	73 08                	jae    c00032cc <remove_chain+0x78>
c00032c4:	40                   	inc    eax
c00032c5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032c9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032cc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032cf:	39 e9                	cmp    ecx,ebp
c00032d1:	75 64                	jne    c0003337 <remove_chain+0xe3>
c00032d3:	89 ee                	mov    esi,ebp
c00032d5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032d8:	76 0f                	jbe    c00032e9 <remove_chain+0x95>
c00032da:	89 f2                	mov    edx,esi
c00032dc:	89 f8                	mov    eax,edi
c00032de:	e8 84 fa ff ff       	call   c0002d67 <get_fat>
c00032e3:	89 c5                	mov    ebp,eax
c00032e5:	85 c0                	test   eax,eax
c00032e7:	75 bf                	jne    c00032a8 <remove_chain+0x54>
c00032e9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ec:	0f 85 a0 00 00 00    	jne    c0003392 <remove_chain+0x13e>
c00032f2:	eb 6c                	jmp    c0003360 <remove_chain+0x10c>
c00032f4:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f7:	84 c0                	test   al,al
c00032f9:	75 7d                	jne    c0003378 <remove_chain+0x124>
c00032fb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00032fe:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003302:	0f 84 86 00 00 00    	je     c000338e <remove_chain+0x13a>
c0003308:	89 da                	mov    edx,ebx
c000330a:	89 f8                	mov    eax,edi
c000330c:	e8 56 fa ff ff       	call   c0002d67 <get_fat>
c0003311:	83 f8 01             	cmp    eax,0x1
c0003314:	0f 86 4c ff ff ff    	jbe    c0003266 <remove_chain+0x12>
c000331a:	83 f8 ff             	cmp    eax,0xffffffff
c000331d:	75 4e                	jne    c000336d <remove_chain+0x119>
c000331f:	b8 01 00 00 00       	mov    eax,0x1
c0003324:	eb 6e                	jmp    c0003394 <remove_chain+0x140>
c0003326:	31 c9                	xor    ecx,ecx
c0003328:	89 f2                	mov    edx,esi
c000332a:	89 d8                	mov    eax,ebx
c000332c:	e8 31 f8 ff ff       	call   c0002b62 <put_fat>
c0003331:	85 c0                	test   eax,eax
c0003333:	74 82                	je     c00032b7 <remove_chain+0x63>
c0003335:	eb 5d                	jmp    c0003394 <remove_chain+0x140>
c0003337:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333a:	75 1b                	jne    c0003357 <remove_chain+0x103>
c000333c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003340:	89 d8                	mov    eax,ebx
c0003342:	83 ec 0c             	sub    esp,0xc
c0003345:	6a 00                	push   0x0
c0003347:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334b:	e8 5d f7 ff ff       	call   c0002aad <change_bitmap>
c0003350:	83 c4 10             	add    esp,0x10
c0003353:	85 c0                	test   eax,eax
c0003355:	75 3d                	jne    c0003394 <remove_chain+0x140>
c0003357:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335b:	e9 73 ff ff ff       	jmp    c00032d3 <remove_chain+0x7f>
c0003360:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003365:	75 8d                	jne    c00032f4 <remove_chain+0xa0>
c0003367:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336b:	eb 25                	jmp    c0003392 <remove_chain+0x13e>
c000336d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003370:	89 c3                	mov    ebx,eax
c0003372:	39 c2                	cmp    edx,eax
c0003374:	74 88                	je     c00032fe <remove_chain+0xaa>
c0003376:	eb 1a                	jmp    c0003392 <remove_chain+0x13e>
c0003378:	3c 03                	cmp    al,0x3
c000337a:	75 16                	jne    c0003392 <remove_chain+0x13e>
c000337c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000337f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003383:	77 0d                	ja     c0003392 <remove_chain+0x13e>
c0003385:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003388:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338c:	72 04                	jb     c0003392 <remove_chain+0x13e>
c000338e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003392:	31 c0                	xor    eax,eax
c0003394:	83 c4 1c             	add    esp,0x1c
c0003397:	5b                   	pop    ebx
c0003398:	5e                   	pop    esi
c0003399:	5f                   	pop    edi
c000339a:	5d                   	pop    ebp
c000339b:	c3                   	ret    

c000339c <dir_clear>:
c000339c:	55                   	push   ebp
c000339d:	57                   	push   edi
c000339e:	56                   	push   esi
c000339f:	89 c6                	mov    esi,eax
c00033a1:	53                   	push   ebx
c00033a2:	83 ec 1c             	sub    esp,0x1c
c00033a5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033a9:	e8 9d ed ff ff       	call   c000214b <sync_window>
c00033ae:	85 c0                	test   eax,eax
c00033b0:	0f 85 de 00 00 00    	jne    c0003494 <dir_clear+0xf8>
c00033b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ba:	89 f0                	mov    eax,esi
c00033bc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033bf:	e8 d6 e8 ff ff       	call   c0001c9a <clst2sect>
c00033c4:	b9 00 02 00 00       	mov    ecx,0x200
c00033c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d7:	89 e8                	mov    eax,ebp
c00033d9:	31 d2                	xor    edx,edx
c00033db:	e8 b5 e6 ff ff       	call   c0001a95 <mem_set>
c00033e0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e4:	c1 e3 09             	shl    ebx,0x9
c00033e7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ed:	76 1f                	jbe    c000340e <dir_clear+0x72>
c00033ef:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f4:	eb 18                	jmp    c000340e <dir_clear+0x72>
c00033f6:	83 ec 0c             	sub    esp,0xc
c00033f9:	53                   	push   ebx
c00033fa:	e8 35 4e 00 00       	call   c0008234 <ff_memalloc>
c00033ff:	83 c4 10             	add    esp,0x10
c0003402:	89 c7                	mov    edi,eax
c0003404:	85 c0                	test   eax,eax
c0003406:	0f 85 8f 00 00 00    	jne    c000349b <dir_clear+0xff>
c000340c:	d1 eb                	shr    ebx,1
c000340e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003414:	77 e0                	ja     c00033f6 <dir_clear+0x5a>
c0003416:	31 db                	xor    ebx,ebx
c0003418:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341c:	39 d8                	cmp    eax,ebx
c000341e:	76 66                	jbe    c0003486 <dir_clear+0xea>
c0003420:	83 ec 0c             	sub    esp,0xc
c0003423:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003427:	6a 01                	push   0x1
c0003429:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003431:	55                   	push   ebp
c0003432:	50                   	push   eax
c0003433:	e8 94 e5 ff ff       	call   c00019cc <disk_write>
c0003438:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003442:	83 c4 20             	add    esp,0x20
c0003445:	85 c0                	test   eax,eax
c0003447:	75 3d                	jne    c0003486 <dir_clear+0xea>
c0003449:	43                   	inc    ebx
c000344a:	eb cc                	jmp    c0003418 <dir_clear+0x7c>
c000344c:	83 ec 0c             	sub    esp,0xc
c000344f:	31 d2                	xor    edx,edx
c0003451:	55                   	push   ebp
c0003452:	89 d8                	mov    eax,ebx
c0003454:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003458:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345c:	52                   	push   edx
c000345d:	50                   	push   eax
c000345e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003462:	57                   	push   edi
c0003463:	50                   	push   eax
c0003464:	e8 63 e5 ff ff       	call   c00019cc <disk_write>
c0003469:	83 c4 20             	add    esp,0x20
c000346c:	85 c0                	test   eax,eax
c000346e:	75 0a                	jne    c000347a <dir_clear+0xde>
c0003470:	01 eb                	add    ebx,ebp
c0003472:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003476:	39 d8                	cmp    eax,ebx
c0003478:	77 d2                	ja     c000344c <dir_clear+0xb0>
c000347a:	83 ec 0c             	sub    esp,0xc
c000347d:	57                   	push   edi
c000347e:	e8 c7 4d 00 00       	call   c000824a <ff_memfree>
c0003483:	83 c4 10             	add    esp,0x10
c0003486:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348a:	39 d8                	cmp    eax,ebx
c000348c:	0f 95 c0             	setne  al
c000348f:	0f b6 c0             	movzx  eax,al
c0003492:	eb 19                	jmp    c00034ad <dir_clear+0x111>
c0003494:	b8 01 00 00 00       	mov    eax,0x1
c0003499:	eb 12                	jmp    c00034ad <dir_clear+0x111>
c000349b:	89 d9                	mov    ecx,ebx
c000349d:	31 d2                	xor    edx,edx
c000349f:	c1 eb 09             	shr    ebx,0x9
c00034a2:	e8 ee e5 ff ff       	call   c0001a95 <mem_set>
c00034a7:	89 dd                	mov    ebp,ebx
c00034a9:	31 db                	xor    ebx,ebx
c00034ab:	eb c5                	jmp    c0003472 <dir_clear+0xd6>
c00034ad:	83 c4 1c             	add    esp,0x1c
c00034b0:	5b                   	pop    ebx
c00034b1:	5e                   	pop    esi
c00034b2:	5f                   	pop    edi
c00034b3:	5d                   	pop    ebp
c00034b4:	c3                   	ret    

c00034b5 <dir_next>:
c00034b5:	55                   	push   ebp
c00034b6:	57                   	push   edi
c00034b7:	56                   	push   esi
c00034b8:	53                   	push   ebx
c00034b9:	89 c3                	mov    ebx,eax
c00034bb:	83 ec 1c             	sub    esp,0x1c
c00034be:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c7:	8d 78 20             	lea    edi,[eax+0x20]
c00034ca:	31 c0                	xor    eax,eax
c00034cc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d0:	0f 94 c0             	sete   al
c00034d3:	48                   	dec    eax
c00034d4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034d9:	05 00 00 00 10       	add    eax,0x10000000
c00034de:	39 f8                	cmp    eax,edi
c00034e0:	77 0e                	ja     c00034f0 <dir_next+0x3b>
c00034e2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034e9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f6:	b8 04 00 00 00       	mov    eax,0x4
c00034fb:	89 ce                	mov    esi,ecx
c00034fd:	09 d6                	or     esi,edx
c00034ff:	0f 84 da 00 00 00    	je     c00035df <dir_next+0x12a>
c0003505:	89 f8                	mov    eax,edi
c0003507:	25 ff 01 00 00       	and    eax,0x1ff
c000350c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003510:	0f 85 b9 00 00 00    	jne    c00035cf <dir_next+0x11a>
c0003516:	83 c2 01             	add    edx,0x1
c0003519:	83 d1 00             	adc    ecx,0x0
c000351c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000351f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003522:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003525:	85 d2                	test   edx,edx
c0003527:	75 29                	jne    c0003552 <dir_next+0x9d>
c0003529:	89 fa                	mov    edx,edi
c000352b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000352f:	c1 ea 05             	shr    edx,0x5
c0003532:	39 c2                	cmp    edx,eax
c0003534:	0f 82 95 00 00 00    	jb     c00035cf <dir_next+0x11a>
c000353a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003541:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003548:	b8 04 00 00 00       	mov    eax,0x4
c000354d:	e9 8d 00 00 00       	jmp    c00035df <dir_next+0x12a>
c0003552:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003556:	89 f9                	mov    ecx,edi
c0003558:	48                   	dec    eax
c0003559:	c1 e9 09             	shr    ecx,0x9
c000355c:	85 c8                	test   eax,ecx
c000355e:	75 6f                	jne    c00035cf <dir_next+0x11a>
c0003560:	89 d8                	mov    eax,ebx
c0003562:	e8 00 f8 ff ff       	call   c0002d67 <get_fat>
c0003567:	89 c6                	mov    esi,eax
c0003569:	83 f8 01             	cmp    eax,0x1
c000356c:	77 07                	ja     c0003575 <dir_next+0xc0>
c000356e:	b8 02 00 00 00       	mov    eax,0x2
c0003573:	eb 6a                	jmp    c00035df <dir_next+0x12a>
c0003575:	83 f8 ff             	cmp    eax,0xffffffff
c0003578:	75 07                	jne    c0003581 <dir_next+0xcc>
c000357a:	b8 01 00 00 00       	mov    eax,0x1
c000357f:	eb 5e                	jmp    c00035df <dir_next+0x12a>
c0003581:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003584:	77 37                	ja     c00035bd <dir_next+0x108>
c0003586:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358b:	74 ad                	je     c000353a <dir_next+0x85>
c000358d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003590:	89 d8                	mov    eax,ebx
c0003592:	e8 be fa ff ff       	call   c0003055 <create_chain>
c0003597:	89 c6                	mov    esi,eax
c0003599:	b8 07 00 00 00       	mov    eax,0x7
c000359e:	85 f6                	test   esi,esi
c00035a0:	74 3d                	je     c00035df <dir_next+0x12a>
c00035a2:	83 fe 01             	cmp    esi,0x1
c00035a5:	74 c7                	je     c000356e <dir_next+0xb9>
c00035a7:	83 fe ff             	cmp    esi,0xffffffff
c00035aa:	74 ce                	je     c000357a <dir_next+0xc5>
c00035ac:	89 f2                	mov    edx,esi
c00035ae:	89 e8                	mov    eax,ebp
c00035b0:	e8 e7 fd ff ff       	call   c000339c <dir_clear>
c00035b5:	85 c0                	test   eax,eax
c00035b7:	75 c1                	jne    c000357a <dir_next+0xc5>
c00035b9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035bd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c0:	89 f2                	mov    edx,esi
c00035c2:	89 e8                	mov    eax,ebp
c00035c4:	e8 d1 e6 ff ff       	call   c0001c9a <clst2sect>
c00035c9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035cc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035da:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035dd:	31 c0                	xor    eax,eax
c00035df:	83 c4 1c             	add    esp,0x1c
c00035e2:	5b                   	pop    ebx
c00035e3:	5e                   	pop    esi
c00035e4:	5f                   	pop    edi
c00035e5:	5d                   	pop    ebp
c00035e6:	c3                   	ret    

c00035e7 <load_xdir>:
c00035e7:	55                   	push   ebp
c00035e8:	57                   	push   edi
c00035e9:	56                   	push   esi
c00035ea:	89 c6                	mov    esi,eax
c00035ec:	53                   	push   ebx
c00035ed:	83 ec 1c             	sub    esp,0x1c
c00035f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fb:	e8 df eb ff ff       	call   c00021df <move_window>
c0003600:	89 c3                	mov    ebx,eax
c0003602:	85 c0                	test   eax,eax
c0003604:	0f 85 0c 01 00 00    	jne    c0003716 <load_xdir+0x12f>
c000360a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003610:	0f 85 fb 00 00 00    	jne    c0003711 <load_xdir+0x12a>
c0003616:	89 f8                	mov    eax,edi
c0003618:	b9 20 00 00 00       	mov    ecx,0x20
c000361d:	e8 5e e4 ff ff       	call   c0001a80 <mem_cpy>
c0003622:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003626:	40                   	inc    eax
c0003627:	c1 e0 05             	shl    eax,0x5
c000362a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000362e:	83 e8 60             	sub    eax,0x60
c0003631:	3d 00 02 00 00       	cmp    eax,0x200
c0003636:	0f 87 d5 00 00 00    	ja     c0003711 <load_xdir+0x12a>
c000363c:	31 d2                	xor    edx,edx
c000363e:	89 f0                	mov    eax,esi
c0003640:	e8 70 fe ff ff       	call   c00034b5 <dir_next>
c0003645:	89 c3                	mov    ebx,eax
c0003647:	83 f8 04             	cmp    eax,0x4
c000364a:	0f 84 c1 00 00 00    	je     c0003711 <load_xdir+0x12a>
c0003650:	85 c0                	test   eax,eax
c0003652:	0f 85 be 00 00 00    	jne    c0003716 <load_xdir+0x12f>
c0003658:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000365e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003660:	e8 7a eb ff ff       	call   c00021df <move_window>
c0003665:	89 c3                	mov    ebx,eax
c0003667:	85 c0                	test   eax,eax
c0003669:	0f 85 a7 00 00 00    	jne    c0003716 <load_xdir+0x12f>
c000366f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003672:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003675:	0f 85 96 00 00 00    	jne    c0003711 <load_xdir+0x12a>
c000367b:	8d 47 20             	lea    eax,[edi+0x20]
c000367e:	b9 20 00 00 00       	mov    ecx,0x20
c0003683:	e8 f8 e3 ff ff       	call   c0001a80 <mem_cpy>
c0003688:	31 d2                	xor    edx,edx
c000368a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000368e:	b9 0f 00 00 00       	mov    ecx,0xf
c0003693:	83 c0 2c             	add    eax,0x2c
c0003696:	f7 f1                	div    ecx
c0003698:	c1 e0 05             	shl    eax,0x5
c000369b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369f:	77 70                	ja     c0003711 <load_xdir+0x12a>
c00036a1:	bd 40 00 00 00       	mov    ebp,0x40
c00036a6:	31 d2                	xor    edx,edx
c00036a8:	89 f0                	mov    eax,esi
c00036aa:	e8 06 fe ff ff       	call   c00034b5 <dir_next>
c00036af:	89 c3                	mov    ebx,eax
c00036b1:	83 f8 04             	cmp    eax,0x4
c00036b4:	74 5b                	je     c0003711 <load_xdir+0x12a>
c00036b6:	85 c0                	test   eax,eax
c00036b8:	75 5c                	jne    c0003716 <load_xdir+0x12f>
c00036ba:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036bd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c2:	e8 18 eb ff ff       	call   c00021df <move_window>
c00036c7:	89 c3                	mov    ebx,eax
c00036c9:	85 c0                	test   eax,eax
c00036cb:	75 49                	jne    c0003716 <load_xdir+0x12f>
c00036cd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d3:	75 3c                	jne    c0003711 <load_xdir+0x12a>
c00036d5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036db:	77 0d                	ja     c00036ea <load_xdir+0x103>
c00036dd:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e0:	b9 20 00 00 00       	mov    ecx,0x20
c00036e5:	e8 96 e3 ff ff       	call   c0001a80 <mem_cpy>
c00036ea:	83 c5 20             	add    ebp,0x20
c00036ed:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f1:	77 b3                	ja     c00036a6 <load_xdir+0xbf>
c00036f3:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036f9:	77 1b                	ja     c0003716 <load_xdir+0x12f>
c00036fb:	89 f8                	mov    eax,edi
c00036fd:	e8 cd e7 ff ff       	call   c0001ecf <xdir_sum>
c0003702:	89 c1                	mov    ecx,eax
c0003704:	8d 47 02             	lea    eax,[edi+0x2]
c0003707:	e8 f5 e2 ff ff       	call   c0001a01 <ld_word>
c000370c:	66 39 c1             	cmp    cx,ax
c000370f:	74 05                	je     c0003716 <load_xdir+0x12f>
c0003711:	bb 02 00 00 00       	mov    ebx,0x2
c0003716:	83 c4 1c             	add    esp,0x1c
c0003719:	89 d8                	mov    eax,ebx
c000371b:	5b                   	pop    ebx
c000371c:	5e                   	pop    esi
c000371d:	5f                   	pop    edi
c000371e:	5d                   	pop    ebp
c000371f:	c3                   	ret    

c0003720 <load_obj_xdir>:
c0003720:	53                   	push   ebx
c0003721:	89 c3                	mov    ebx,eax
c0003723:	83 ec 08             	sub    esp,0x8
c0003726:	8b 02                	mov    eax,DWORD PTR [edx]
c0003728:	89 03                	mov    DWORD PTR [ebx],eax
c000372a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003730:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003733:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003736:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003739:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003740:	30 c0                	xor    al,al
c0003742:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003749:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374c:	89 d8                	mov    eax,ebx
c000374e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003751:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003754:	e8 04 f8 ff ff       	call   c0002f5d <dir_sdi>
c0003759:	85 c0                	test   eax,eax
c000375b:	75 0b                	jne    c0003768 <load_obj_xdir+0x48>
c000375d:	89 d8                	mov    eax,ebx
c000375f:	83 c4 08             	add    esp,0x8
c0003762:	5b                   	pop    ebx
c0003763:	e9 7f fe ff ff       	jmp    c00035e7 <load_xdir>
c0003768:	83 c4 08             	add    esp,0x8
c000376b:	5b                   	pop    ebx
c000376c:	c3                   	ret    

c000376d <dir_read>:
c000376d:	55                   	push   ebp
c000376e:	bd 04 00 00 00       	mov    ebp,0x4
c0003773:	57                   	push   edi
c0003774:	56                   	push   esi
c0003775:	be ff ff ff ff       	mov    esi,0xffffffff
c000377a:	53                   	push   ebx
c000377b:	89 c3                	mov    ebx,eax
c000377d:	83 ec 1c             	sub    esp,0x1c
c0003780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003784:	8b 38                	mov    edi,DWORD PTR [eax]
c0003786:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000378e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003791:	89 c8                	mov    eax,ecx
c0003793:	09 d0                	or     eax,edx
c0003795:	0f 84 25 01 00 00    	je     c00038c0 <dir_read+0x153>
c000379b:	89 f8                	mov    eax,edi
c000379d:	e8 3d ea ff ff       	call   c00021df <move_window>
c00037a2:	89 c5                	mov    ebp,eax
c00037a4:	85 c0                	test   eax,eax
c00037a6:	0f 85 23 01 00 00    	jne    c00038cf <dir_read+0x162>
c00037ac:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037af:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b1:	84 c9                	test   cl,cl
c00037b3:	0f 84 11 01 00 00    	je     c00038ca <dir_read+0x15d>
c00037b9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037bc:	75 48                	jne    c0003806 <dir_read+0x99>
c00037be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c3:	74 10                	je     c00037d5 <dir_read+0x68>
c00037c5:	80 f9 83             	cmp    cl,0x83
c00037c8:	0f 85 dd 00 00 00    	jne    c00038ab <dir_read+0x13e>
c00037ce:	31 ed                	xor    ebp,ebp
c00037d0:	e9 08 01 00 00       	jmp    c00038dd <dir_read+0x170>
c00037d5:	80 f9 85             	cmp    cl,0x85
c00037d8:	0f 85 cd 00 00 00    	jne    c00038ab <dir_read+0x13e>
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	89 d8                	mov    eax,ebx
c00037e6:	e8 fc fd ff ff       	call   c00035e7 <load_xdir>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 da 00 00 00    	jne    c00038cf <dir_read+0x162>
c00037f5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037f8:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fb:	83 e0 3f             	and    eax,0x3f
c00037fe:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003801:	e9 d7 00 00 00       	jmp    c00038dd <dir_read+0x170>
c0003806:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003809:	83 e0 3f             	and    eax,0x3f
c000380c:	80 f9 2e             	cmp    cl,0x2e
c000380f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003813:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003816:	0f 84 8a 00 00 00    	je     c00038a6 <dir_read+0x139>
c000381c:	80 f9 e5             	cmp    cl,0xe5
c000381f:	0f 84 81 00 00 00    	je     c00038a6 <dir_read+0x139>
c0003825:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003829:	83 e0 1f             	and    eax,0x1f
c000382c:	83 f8 08             	cmp    eax,0x8
c000382f:	0f 94 c0             	sete   al
c0003832:	0f b6 c0             	movzx  eax,al
c0003835:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003839:	75 6b                	jne    c00038a6 <dir_read+0x139>
c000383b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003840:	75 44                	jne    c0003886 <dir_read+0x119>
c0003842:	f6 c1 40             	test   cl,0x40
c0003845:	74 12                	je     c0003859 <dir_read+0xec>
c0003847:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384a:	83 e1 bf             	and    ecx,0xffffffbf
c000384d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003851:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003854:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003857:	eb 06                	jmp    c000385f <dir_read+0xf2>
c0003859:	89 f0                	mov    eax,esi
c000385b:	38 c8                	cmp    al,cl
c000385d:	75 47                	jne    c00038a6 <dir_read+0x139>
c000385f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003863:	be ff ff ff ff       	mov    esi,0xffffffff
c0003868:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386b:	75 3e                	jne    c00038ab <dir_read+0x13e>
c000386d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003871:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003874:	e8 8a e4 ff ff       	call   c0001d03 <pick_lfn>
c0003879:	85 c0                	test   eax,eax
c000387b:	74 2e                	je     c00038ab <dir_read+0x13e>
c000387d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003881:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003884:	eb 25                	jmp    c00038ab <dir_read+0x13e>
c0003886:	89 f0                	mov    eax,esi
c0003888:	84 c0                	test   al,al
c000388a:	75 11                	jne    c000389d <dir_read+0x130>
c000388c:	89 d0                	mov    eax,edx
c000388e:	e8 2a e6 ff ff       	call   c0001ebd <sum_sfn>
c0003893:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003897:	0f 84 31 ff ff ff    	je     c00037ce <dir_read+0x61>
c000389d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a4:	eb 37                	jmp    c00038dd <dir_read+0x170>
c00038a6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ab:	31 d2                	xor    edx,edx
c00038ad:	89 d8                	mov    eax,ebx
c00038af:	e8 01 fc ff ff       	call   c00034b5 <dir_next>
c00038b4:	89 c5                	mov    ebp,eax
c00038b6:	85 c0                	test   eax,eax
c00038b8:	0f 84 cd fe ff ff    	je     c000378b <dir_read+0x1e>
c00038be:	eb 0f                	jmp    c00038cf <dir_read+0x162>
c00038c0:	85 ed                	test   ebp,ebp
c00038c2:	0f 84 06 ff ff ff    	je     c00037ce <dir_read+0x61>
c00038c8:	eb 05                	jmp    c00038cf <dir_read+0x162>
c00038ca:	bd 04 00 00 00       	mov    ebp,0x4
c00038cf:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038dd:	83 c4 1c             	add    esp,0x1c
c00038e0:	89 e8                	mov    eax,ebp
c00038e2:	5b                   	pop    ebx
c00038e3:	5e                   	pop    esi
c00038e4:	5f                   	pop    edi
c00038e5:	5d                   	pop    ebp
c00038e6:	c3                   	ret    

c00038e7 <dir_alloc>:
c00038e7:	55                   	push   ebp
c00038e8:	89 d5                	mov    ebp,edx
c00038ea:	57                   	push   edi
c00038eb:	31 d2                	xor    edx,edx
c00038ed:	56                   	push   esi
c00038ee:	53                   	push   ebx
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 ec 0c             	sub    esp,0xc
c00038f4:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f6:	e8 62 f6 ff ff       	call   c0002f5d <dir_sdi>
c00038fb:	85 c0                	test   eax,eax
c00038fd:	75 4e                	jne    c000394d <dir_alloc+0x66>
c00038ff:	31 f6                	xor    esi,esi
c0003901:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003904:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003907:	89 f8                	mov    eax,edi
c0003909:	e8 d1 e8 ff ff       	call   c00021df <move_window>
c000390e:	85 c0                	test   eax,eax
c0003910:	75 3b                	jne    c000394d <dir_alloc+0x66>
c0003912:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003915:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003918:	8a 12                	mov    dl,BYTE PTR [edx]
c000391a:	75 07                	jne    c0003923 <dir_alloc+0x3c>
c000391c:	f7 d2                	not    edx
c000391e:	c0 ea 07             	shr    dl,0x7
c0003921:	eb 0d                	jmp    c0003930 <dir_alloc+0x49>
c0003923:	84 d2                	test   dl,dl
c0003925:	0f 94 c1             	sete   cl
c0003928:	80 fa e5             	cmp    dl,0xe5
c000392b:	0f 94 c2             	sete   dl
c000392e:	09 ca                	or     edx,ecx
c0003930:	84 d2                	test   dl,dl
c0003932:	74 07                	je     c000393b <dir_alloc+0x54>
c0003934:	46                   	inc    esi
c0003935:	39 ee                	cmp    esi,ebp
c0003937:	75 04                	jne    c000393d <dir_alloc+0x56>
c0003939:	eb 1c                	jmp    c0003957 <dir_alloc+0x70>
c000393b:	31 f6                	xor    esi,esi
c000393d:	ba 01 00 00 00       	mov    edx,0x1
c0003942:	89 d8                	mov    eax,ebx
c0003944:	e8 6c fb ff ff       	call   c00034b5 <dir_next>
c0003949:	85 c0                	test   eax,eax
c000394b:	74 b4                	je     c0003901 <dir_alloc+0x1a>
c000394d:	83 f8 04             	cmp    eax,0x4
c0003950:	75 05                	jne    c0003957 <dir_alloc+0x70>
c0003952:	b8 07 00 00 00       	mov    eax,0x7
c0003957:	83 c4 0c             	add    esp,0xc
c000395a:	5b                   	pop    ebx
c000395b:	5e                   	pop    esi
c000395c:	5f                   	pop    edi
c000395d:	5d                   	pop    ebp
c000395e:	c3                   	ret    

c000395f <store_xdir>:
c000395f:	55                   	push   ebp
c0003960:	57                   	push   edi
c0003961:	89 c7                	mov    edi,eax
c0003963:	56                   	push   esi
c0003964:	53                   	push   ebx
c0003965:	83 ec 0c             	sub    esp,0xc
c0003968:	8b 00                	mov    eax,DWORD PTR [eax]
c000396a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396d:	89 e8                	mov    eax,ebp
c000396f:	e8 5b e5 ff ff       	call   c0001ecf <xdir_sum>
c0003974:	0f b7 d0             	movzx  edx,ax
c0003977:	8d 45 02             	lea    eax,[ebp+0x2]
c000397a:	e8 f4 e0 ff ff       	call   c0001a73 <st_word>
c000397f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003983:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003986:	89 f8                	mov    eax,edi
c0003988:	e8 d0 f5 ff ff       	call   c0002f5d <dir_sdi>
c000398d:	89 c6                	mov    esi,eax
c000398f:	85 f6                	test   esi,esi
c0003991:	75 3d                	jne    c00039d0 <store_xdir+0x71>
c0003993:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003996:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003999:	8b 07                	mov    eax,DWORD PTR [edi]
c000399b:	e8 3f e8 ff ff       	call   c00021df <move_window>
c00039a0:	89 c6                	mov    esi,eax
c00039a2:	85 c0                	test   eax,eax
c00039a4:	75 2a                	jne    c00039d0 <store_xdir+0x71>
c00039a6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039a9:	b9 20 00 00 00       	mov    ecx,0x20
c00039ae:	89 ea                	mov    edx,ebp
c00039b0:	e8 cb e0 ff ff       	call   c0001a80 <mem_cpy>
c00039b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b7:	85 db                	test   ebx,ebx
c00039b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039bd:	74 11                	je     c00039d0 <store_xdir+0x71>
c00039bf:	31 d2                	xor    edx,edx
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	83 c5 20             	add    ebp,0x20
c00039c6:	e8 ea fa ff ff       	call   c00034b5 <dir_next>
c00039cb:	4b                   	dec    ebx
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	eb bf                	jmp    c000398f <store_xdir+0x30>
c00039d0:	89 f0                	mov    eax,esi
c00039d2:	83 fe 02             	cmp    esi,0x2
c00039d5:	76 05                	jbe    c00039dc <store_xdir+0x7d>
c00039d7:	b8 02 00 00 00       	mov    eax,0x2
c00039dc:	83 c4 0c             	add    esp,0xc
c00039df:	5b                   	pop    ebx
c00039e0:	5e                   	pop    esi
c00039e1:	5f                   	pop    edi
c00039e2:	5d                   	pop    ebp
c00039e3:	c3                   	ret    

c00039e4 <dir_remove>:
c00039e4:	57                   	push   edi
c00039e5:	56                   	push   esi
c00039e6:	53                   	push   ebx
c00039e7:	89 c3                	mov    ebx,eax
c00039e9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ec:	8b 30                	mov    esi,DWORD PTR [eax]
c00039ee:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f1:	83 fa ff             	cmp    edx,0xffffffff
c00039f4:	74 09                	je     c00039ff <dir_remove+0x1b>
c00039f6:	e8 62 f5 ff ff       	call   c0002f5d <dir_sdi>
c00039fb:	85 c0                	test   eax,eax
c00039fd:	75 41                	jne    c0003a40 <dir_remove+0x5c>
c00039ff:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a02:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a05:	89 f0                	mov    eax,esi
c0003a07:	e8 d3 e7 ff ff       	call   c00021df <move_window>
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	75 26                	jne    c0003a36 <dir_remove+0x52>
c0003a10:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a13:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a16:	75 05                	jne    c0003a1d <dir_remove+0x39>
c0003a18:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1b:	eb 03                	jmp    c0003a20 <dir_remove+0x3c>
c0003a1d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a20:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a24:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a27:	73 17                	jae    c0003a40 <dir_remove+0x5c>
c0003a29:	31 d2                	xor    edx,edx
c0003a2b:	89 d8                	mov    eax,ebx
c0003a2d:	e8 83 fa ff ff       	call   c00034b5 <dir_next>
c0003a32:	85 c0                	test   eax,eax
c0003a34:	74 c9                	je     c00039ff <dir_remove+0x1b>
c0003a36:	83 f8 04             	cmp    eax,0x4
c0003a39:	75 05                	jne    c0003a40 <dir_remove+0x5c>
c0003a3b:	b8 02 00 00 00       	mov    eax,0x2
c0003a40:	5b                   	pop    ebx
c0003a41:	5e                   	pop    esi
c0003a42:	5f                   	pop    edi
c0003a43:	c3                   	ret    

c0003a44 <create_name>:
c0003a44:	55                   	push   ebp
c0003a45:	89 d5                	mov    ebp,edx
c0003a47:	57                   	push   edi
c0003a48:	89 c7                	mov    edi,eax
c0003a4a:	56                   	push   esi
c0003a4b:	31 f6                	xor    esi,esi
c0003a4d:	53                   	push   ebx
c0003a4e:	83 ec 3c             	sub    esp,0x3c
c0003a51:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a53:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a57:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a60:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a64:	e8 72 e0 ff ff       	call   c0001adb <tchar2uni>
c0003a69:	89 c3                	mov    ebx,eax
c0003a6b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a6e:	75 0a                	jne    c0003a7a <create_name+0x36>
c0003a70:	b8 06 00 00 00       	mov    eax,0x6
c0003a75:	e9 9e 02 00 00       	jmp    c0003d18 <create_name+0x2d4>
c0003a7a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a7f:	76 0c                	jbe    c0003a8d <create_name+0x49>
c0003a81:	c1 e8 10             	shr    eax,0x10
c0003a84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a88:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8c:	46                   	inc    esi
c0003a8d:	66 83 fb 1f          	cmp    bx,0x1f
c0003a91:	76 4f                	jbe    c0003ae2 <create_name+0x9e>
c0003a93:	66 83 fb 5c          	cmp    bx,0x5c
c0003a97:	74 35                	je     c0003ace <create_name+0x8a>
c0003a99:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9d:	74 2f                	je     c0003ace <create_name+0x8a>
c0003a9f:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa3:	77 11                	ja     c0003ab6 <create_name+0x72>
c0003aa5:	0f b7 d3             	movzx  edx,bx
c0003aa8:	b8 72 6f 02 c0       	mov    eax,0xc0026f72
c0003aad:	e8 11 e0 ff ff       	call   c0001ac3 <chk_chr>
c0003ab2:	85 c0                	test   eax,eax
c0003ab4:	75 ba                	jne    c0003a70 <create_name+0x2c>
c0003ab6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abc:	77 b2                	ja     c0003a70 <create_name+0x2c>
c0003abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac6:	46                   	inc    esi
c0003ac7:	eb 97                	jmp    c0003a60 <create_name+0x1c>
c0003ac9:	40                   	inc    eax
c0003aca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ace:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad4:	80 fa 2f             	cmp    dl,0x2f
c0003ad7:	74 f0                	je     c0003ac9 <create_name+0x85>
c0003ad9:	80 fa 5c             	cmp    dl,0x5c
c0003adc:	74 eb                	je     c0003ac9 <create_name+0x85>
c0003ade:	31 db                	xor    ebx,ebx
c0003ae0:	eb 02                	jmp    c0003ae4 <create_name+0xa0>
c0003ae2:	b3 04                	mov    bl,0x4
c0003ae4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aeb:	85 f6                	test   esi,esi
c0003aed:	74 18                	je     c0003b07 <create_name+0xc3>
c0003aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af3:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003af8:	66 83 f8 20          	cmp    ax,0x20
c0003afc:	74 06                	je     c0003b04 <create_name+0xc0>
c0003afe:	66 83 f8 2e          	cmp    ax,0x2e
c0003b02:	75 03                	jne    c0003b07 <create_name+0xc3>
c0003b04:	4e                   	dec    esi
c0003b05:	eb e4                	jmp    c0003aeb <create_name+0xa7>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	31 ed                	xor    ebp,ebp
c0003b0d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b13:	85 f6                	test   esi,esi
c0003b15:	0f 84 55 ff ff ff    	je     c0003a70 <create_name+0x2c>
c0003b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b22:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b26:	66 83 f8 20          	cmp    ax,0x20
c0003b2a:	75 04                	jne    c0003b30 <create_name+0xec>
c0003b2c:	89 d5                	mov    ebp,edx
c0003b2e:	eb eb                	jmp    c0003b1b <create_name+0xd7>
c0003b30:	85 ed                	test   ebp,ebp
c0003b32:	75 06                	jne    c0003b3a <create_name+0xf6>
c0003b34:	66 83 f8 2e          	cmp    ax,0x2e
c0003b38:	75 08                	jne    c0003b42 <create_name+0xfe>
c0003b3a:	83 cb 03             	or     ebx,0x3
c0003b3d:	eb 03                	jmp    c0003b42 <create_name+0xfe>
c0003b3f:	4e                   	dec    esi
c0003b40:	74 0c                	je     c0003b4e <create_name+0x10a>
c0003b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b46:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4c:	75 f1                	jne    c0003b3f <create_name+0xfb>
c0003b4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b53:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b56:	ba 20 00 00 00       	mov    edx,0x20
c0003b5b:	e8 35 df ff ff       	call   c0001a95 <mem_set>
c0003b60:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b68:	31 c9                	xor    ecx,ecx
c0003b6a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b6f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b7e:	66 85 ed             	test   bp,bp
c0003b81:	0f 84 30 01 00 00    	je     c0003cb7 <create_name+0x273>
c0003b87:	66 83 fd 20          	cmp    bp,0x20
c0003b8b:	74 10                	je     c0003b9d <create_name+0x159>
c0003b8d:	66 83 fd 2e          	cmp    bp,0x2e
c0003b91:	75 13                	jne    c0003ba6 <create_name+0x162>
c0003b93:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b97:	0f 84 6b 01 00 00    	je     c0003d08 <create_name+0x2c4>
c0003b9d:	83 cb 03             	or     ebx,0x3
c0003ba0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba4:	eb c9                	jmp    c0003b6f <create_name+0x12b>
c0003ba6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003baa:	73 0b                	jae    c0003bb7 <create_name+0x173>
c0003bac:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb0:	75 47                	jne    c0003bf9 <create_name+0x1b5>
c0003bb2:	e9 51 01 00 00       	jmp    c0003d08 <create_name+0x2c4>
c0003bb7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbc:	75 10                	jne    c0003bce <create_name+0x18a>
c0003bbe:	83 cb 03             	or     ebx,0x3
c0003bc1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bc9:	e9 e9 00 00 00       	jmp    c0003cb7 <create_name+0x273>
c0003bce:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd2:	74 0d                	je     c0003be1 <create_name+0x19d>
c0003bd4:	83 cb 03             	or     ebx,0x3
c0003bd7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdb:	0f 87 d6 00 00 00    	ja     c0003cb7 <create_name+0x273>
c0003be1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bea:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf2:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf7:	eb a7                	jmp    c0003ba0 <create_name+0x15c>
c0003bf9:	66 83 fd 7f          	cmp    bp,0x7f
c0003bfd:	76 68                	jbe    c0003c67 <create_name+0x223>
c0003bff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c03:	88 da                	mov    dl,bl
c0003c05:	83 ca 02             	or     edx,0x2
c0003c08:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0c:	50                   	push   eax
c0003c0d:	50                   	push   eax
c0003c0e:	68 b5 01 00 00       	push   0x1b5
c0003c13:	55                   	push   ebp
c0003c14:	e8 48 46 00 00       	call   c0008261 <ff_uni2oem>
c0003c19:	83 c4 10             	add    esp,0x10
c0003c1c:	89 c5                	mov    ebp,eax
c0003c1e:	a8 80                	test   al,0x80
c0003c20:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c24:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c28:	74 0c                	je     c0003c36 <create_name+0x1f2>
c0003c2a:	83 e5 7f             	and    ebp,0x7f
c0003c2d:	0f b6 ad c0 6e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd9140]
c0003c34:	eb 2a                	jmp    c0003c60 <create_name+0x21c>
c0003c36:	66 3d ff 00          	cmp    ax,0xff
c0003c3a:	76 24                	jbe    c0003c60 <create_name+0x21c>
c0003c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c40:	48                   	dec    eax
c0003c41:	39 c8                	cmp    eax,ecx
c0003c43:	77 0c                	ja     c0003c51 <create_name+0x20d>
c0003c45:	83 cb 03             	or     ebx,0x3
c0003c48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4c:	e9 4f ff ff ff       	jmp    c0003ba0 <create_name+0x15c>
c0003c51:	89 e8                	mov    eax,ebp
c0003c53:	88 d3                	mov    bl,dl
c0003c55:	66 c1 e8 08          	shr    ax,0x8
c0003c59:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5d:	41                   	inc    ecx
c0003c5e:	eb 4b                	jmp    c0003cab <create_name+0x267>
c0003c60:	88 d3                	mov    bl,dl
c0003c62:	66 85 ed             	test   bp,bp
c0003c65:	74 19                	je     c0003c80 <create_name+0x23c>
c0003c67:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6b:	0f b7 d5             	movzx  edx,bp
c0003c6e:	b8 7b 6f 02 c0       	mov    eax,0xc0026f7b
c0003c73:	e8 4b de ff ff       	call   c0001ac3 <chk_chr>
c0003c78:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7c:	85 c0                	test   eax,eax
c0003c7e:	74 0a                	je     c0003c8a <create_name+0x246>
c0003c80:	83 cb 03             	or     ebx,0x3
c0003c83:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c88:	eb 21                	jmp    c0003cab <create_name+0x267>
c0003c8a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8d:	66 83 f8 19          	cmp    ax,0x19
c0003c91:	77 07                	ja     c0003c9a <create_name+0x256>
c0003c93:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c98:	eb 11                	jmp    c0003cab <create_name+0x267>
c0003c9a:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 08                	ja     c0003cab <create_name+0x267>
c0003ca3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ca8:	83 ed 20             	sub    ebp,0x20
c0003cab:	89 e8                	mov    eax,ebp
c0003cad:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb1:	41                   	inc    ecx
c0003cb2:	e9 e9 fe ff ff       	jmp    c0003ba0 <create_name+0x15c>
c0003cb7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbb:	75 04                	jne    c0003cc1 <create_name+0x27d>
c0003cbd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc6:	75 05                	jne    c0003ccd <create_name+0x289>
c0003cc8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ccd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd1:	83 e0 0c             	and    eax,0xc
c0003cd4:	3c 0c                	cmp    al,0xc
c0003cd6:	74 0b                	je     c0003ce3 <create_name+0x29f>
c0003cd8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cdc:	83 e0 03             	and    eax,0x3
c0003cdf:	3c 03                	cmp    al,0x3
c0003ce1:	75 05                	jne    c0003ce8 <create_name+0x2a4>
c0003ce3:	83 cb 02             	or     ebx,0x2
c0003ce6:	eb 19                	jmp    c0003d01 <create_name+0x2bd>
c0003ce8:	f6 c3 02             	test   bl,0x2
c0003ceb:	75 14                	jne    c0003d01 <create_name+0x2bd>
c0003ced:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf2:	74 03                	je     c0003cf7 <create_name+0x2b3>
c0003cf4:	83 cb 10             	or     ebx,0x10
c0003cf7:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfc:	74 03                	je     c0003d01 <create_name+0x2bd>
c0003cfe:	83 cb 08             	or     ebx,0x8
c0003d01:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d04:	31 c0                	xor    eax,eax
c0003d06:	eb 10                	jmp    c0003d18 <create_name+0x2d4>
c0003d08:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0d:	0f 85 ce fe ff ff    	jne    c0003be1 <create_name+0x19d>
c0003d13:	e9 a6 fe ff ff       	jmp    c0003bbe <create_name+0x17a>
c0003d18:	83 c4 3c             	add    esp,0x3c
c0003d1b:	5b                   	pop    ebx
c0003d1c:	5e                   	pop    esi
c0003d1d:	5f                   	pop    edi
c0003d1e:	5d                   	pop    ebp
c0003d1f:	c3                   	ret    

c0003d20 <xname_sum>:
c0003d20:	56                   	push   esi
c0003d21:	53                   	push   ebx
c0003d22:	89 c6                	mov    esi,eax
c0003d24:	51                   	push   ecx
c0003d25:	31 db                	xor    ebx,ebx
c0003d27:	83 c6 02             	add    esi,0x2
c0003d2a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d2e:	66 85 c0             	test   ax,ax
c0003d31:	74 1f                	je     c0003d52 <xname_sum+0x32>
c0003d33:	83 ec 0c             	sub    esp,0xc
c0003d36:	66 d1 cb             	ror    bx,1
c0003d39:	50                   	push   eax
c0003d3a:	e8 1e 46 00 00       	call   c000835d <ff_wtoupper>
c0003d3f:	83 c4 10             	add    esp,0x10
c0003d42:	0f b6 d0             	movzx  edx,al
c0003d45:	66 c1 e8 08          	shr    ax,0x8
c0003d49:	01 d3                	add    ebx,edx
c0003d4b:	66 d1 cb             	ror    bx,1
c0003d4e:	01 c3                	add    ebx,eax
c0003d50:	eb d5                	jmp    c0003d27 <xname_sum+0x7>
c0003d52:	89 d8                	mov    eax,ebx
c0003d54:	5a                   	pop    edx
c0003d55:	5b                   	pop    ebx
c0003d56:	5e                   	pop    esi
c0003d57:	c3                   	ret    

c0003d58 <create_xdir>:
c0003d58:	55                   	push   ebp
c0003d59:	b9 40 00 00 00       	mov    ecx,0x40
c0003d5e:	57                   	push   edi
c0003d5f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d64:	56                   	push   esi
c0003d65:	31 ff                	xor    edi,edi
c0003d67:	53                   	push   ebx
c0003d68:	be 40 00 00 00       	mov    esi,0x40
c0003d6d:	89 c3                	mov    ebx,eax
c0003d6f:	83 ec 1c             	sub    esp,0x1c
c0003d72:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d76:	31 d2                	xor    edx,edx
c0003d78:	e8 18 dd ff ff       	call   c0001a95 <mem_set>
c0003d7d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d80:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d84:	31 c9                	xor    ecx,ecx
c0003d86:	8d 46 01             	lea    eax,[esi+0x1]
c0003d89:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8d:	83 c6 02             	add    esi,0x2
c0003d90:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d94:	66 85 ed             	test   bp,bp
c0003d97:	74 12                	je     c0003dab <create_xdir+0x53>
c0003d99:	0f b6 c1             	movzx  eax,cl
c0003d9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da4:	66 83 fd 01          	cmp    bp,0x1
c0003da8:	80 d9 ff             	sbb    cl,0xff
c0003dab:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dae:	0f b7 d5             	movzx  edx,bp
c0003db1:	83 c6 02             	add    esi,0x2
c0003db4:	e8 ba dc ff ff       	call   c0001a73 <st_word>
c0003db9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dbf:	75 d3                	jne    c0003d94 <create_xdir+0x3c>
c0003dc1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dc8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dcc:	0f b6 c1             	movzx  eax,cl
c0003dcf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd4:	74 07                	je     c0003ddd <create_xdir+0x85>
c0003dd6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddb:	eb a9                	jmp    c0003d86 <create_xdir+0x2e>
c0003ddd:	8d 47 02             	lea    eax,[edi+0x2]
c0003de0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de6:	89 d0                	mov    eax,edx
c0003de8:	e8 33 ff ff ff       	call   c0003d20 <xname_sum>
c0003ded:	83 c4 1c             	add    esp,0x1c
c0003df0:	0f b7 d0             	movzx  edx,ax
c0003df3:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df6:	5b                   	pop    ebx
c0003df7:	5e                   	pop    esi
c0003df8:	5f                   	pop    edi
c0003df9:	5d                   	pop    ebp
c0003dfa:	e9 74 dc ff ff       	jmp    c0001a73 <st_word>

c0003dff <cmp_lfn>:
c0003dff:	55                   	push   ebp
c0003e00:	57                   	push   edi
c0003e01:	89 d7                	mov    edi,edx
c0003e03:	56                   	push   esi
c0003e04:	53                   	push   ebx
c0003e05:	83 ec 1c             	sub    esp,0x1c
c0003e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e0f:	e8 ed db ff ff       	call   c0001a01 <ld_word>
c0003e14:	66 85 c0             	test   ax,ax
c0003e17:	74 07                	je     c0003e20 <cmp_lfn+0x21>
c0003e19:	31 c0                	xor    eax,eax
c0003e1b:	e9 9a 00 00 00       	jmp    c0003eba <cmp_lfn+0xbb>
c0003e20:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e22:	bd 01 00 00 00       	mov    ebp,0x1
c0003e27:	83 e3 3f             	and    ebx,0x3f
c0003e2a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e32:	4b                   	dec    ebx
c0003e33:	6b db 0d             	imul   ebx,ebx,0xd
c0003e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3a:	0f b6 80 40 6f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd90c0]
c0003e41:	01 f8                	add    eax,edi
c0003e43:	e8 b9 db ff ff       	call   c0001a01 <ld_word>
c0003e48:	66 85 ed             	test   bp,bp
c0003e4b:	89 c6                	mov    esi,eax
c0003e4d:	74 3c                	je     c0003e8b <cmp_lfn+0x8c>
c0003e4f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e55:	77 c2                	ja     c0003e19 <cmp_lfn+0x1a>
c0003e57:	83 ec 0c             	sub    esp,0xc
c0003e5a:	0f b7 c0             	movzx  eax,ax
c0003e5d:	50                   	push   eax
c0003e5e:	e8 fa 44 00 00       	call   c000835d <ff_wtoupper>
c0003e63:	89 c5                	mov    ebp,eax
c0003e65:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e70:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e74:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e77:	e8 e1 44 00 00       	call   c000835d <ff_wtoupper>
c0003e7c:	83 c4 10             	add    esp,0x10
c0003e7f:	39 c5                	cmp    ebp,eax
c0003e81:	75 96                	jne    c0003e19 <cmp_lfn+0x1a>
c0003e83:	89 f5                	mov    ebp,esi
c0003e85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e89:	eb 04                	jmp    c0003e8f <cmp_lfn+0x90>
c0003e8b:	66 46                	inc    si
c0003e8d:	75 8a                	jne    c0003e19 <cmp_lfn+0x1a>
c0003e8f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e93:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e98:	75 9c                	jne    c0003e36 <cmp_lfn+0x37>
c0003e9a:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9d:	74 16                	je     c0003eb5 <cmp_lfn+0xb6>
c0003e9f:	66 85 ed             	test   bp,bp
c0003ea2:	74 11                	je     c0003eb5 <cmp_lfn+0xb6>
c0003ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ead:	0f 94 c0             	sete   al
c0003eb0:	0f b6 c0             	movzx  eax,al
c0003eb3:	eb 05                	jmp    c0003eba <cmp_lfn+0xbb>
c0003eb5:	b8 01 00 00 00       	mov    eax,0x1
c0003eba:	83 c4 1c             	add    esp,0x1c
c0003ebd:	5b                   	pop    ebx
c0003ebe:	5e                   	pop    esi
c0003ebf:	5f                   	pop    edi
c0003ec0:	5d                   	pop    ebp
c0003ec1:	c3                   	ret    

c0003ec2 <dir_find>:
c0003ec2:	55                   	push   ebp
c0003ec3:	31 d2                	xor    edx,edx
c0003ec5:	57                   	push   edi
c0003ec6:	56                   	push   esi
c0003ec7:	53                   	push   ebx
c0003ec8:	89 c3                	mov    ebx,eax
c0003eca:	83 ec 1c             	sub    esp,0x1c
c0003ecd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ecf:	e8 89 f0 ff ff       	call   c0002f5d <dir_sdi>
c0003ed4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed7:	85 c0                	test   eax,eax
c0003ed9:	0f 85 9e 01 00 00    	jne    c000407d <dir_find+0x1bb>
c0003edf:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee2:	0f 85 8d 00 00 00    	jne    c0003f75 <dir_find+0xb3>
c0003ee8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eeb:	e8 30 fe ff ff       	call   c0003d20 <xname_sum>
c0003ef0:	89 c7                	mov    edi,eax
c0003ef2:	31 d2                	xor    edx,edx
c0003ef4:	89 d8                	mov    eax,ebx
c0003ef6:	e8 72 f8 ff ff       	call   c000376d <dir_read>
c0003efb:	85 c0                	test   eax,eax
c0003efd:	0f 85 5e 01 00 00    	jne    c0004061 <dir_find+0x19f>
c0003f03:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f06:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f09:	e8 f3 da ff ff       	call   c0001a01 <ld_word>
c0003f0e:	66 39 f8             	cmp    ax,di
c0003f11:	75 df                	jne    c0003ef2 <dir_find+0x30>
c0003f13:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f16:	31 ed                	xor    ebp,ebp
c0003f18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1c:	ba 40 00 00 00       	mov    edx,0x40
c0003f21:	89 e9                	mov    ecx,ebp
c0003f23:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f27:	0f 84 42 01 00 00    	je     c000406f <dir_find+0x1ad>
c0003f2d:	f6 c2 1f             	test   dl,0x1f
c0003f30:	75 03                	jne    c0003f35 <dir_find+0x73>
c0003f32:	83 c2 02             	add    edx,0x2
c0003f35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f39:	89 d0                	mov    eax,edx
c0003f3b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f3e:	e8 be da ff ff       	call   c0001a01 <ld_word>
c0003f43:	83 ec 0c             	sub    esp,0xc
c0003f46:	0f b7 c0             	movzx  eax,ax
c0003f49:	50                   	push   eax
c0003f4a:	e8 0e 44 00 00       	call   c000835d <ff_wtoupper>
c0003f4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f53:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f56:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5d:	e8 fb 43 00 00       	call   c000835d <ff_wtoupper>
c0003f62:	83 c4 10             	add    esp,0x10
c0003f65:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f69:	75 87                	jne    c0003ef2 <dir_find+0x30>
c0003f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f6f:	45                   	inc    ebp
c0003f70:	83 c2 02             	add    edx,0x2
c0003f73:	eb ac                	jmp    c0003f21 <dir_find+0x5f>
c0003f75:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f81:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f86:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f89:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8c:	89 f0                	mov    eax,esi
c0003f8e:	e8 4c e2 ff ff       	call   c00021df <move_window>
c0003f93:	85 c0                	test   eax,eax
c0003f95:	0f 85 c6 00 00 00    	jne    c0004061 <dir_find+0x19f>
c0003f9b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f9e:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa1:	84 c9                	test   cl,cl
c0003fa3:	0f 84 bd 00 00 00    	je     c0004066 <dir_find+0x1a4>
c0003fa9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fac:	88 d0                	mov    al,dl
c0003fae:	83 e0 3f             	and    eax,0x3f
c0003fb1:	80 f9 e5             	cmp    cl,0xe5
c0003fb4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb7:	0f 84 87 00 00 00    	je     c0004044 <dir_find+0x182>
c0003fbd:	80 e2 08             	and    dl,0x8
c0003fc0:	74 06                	je     c0003fc8 <dir_find+0x106>
c0003fc2:	3c 0f                	cmp    al,0xf
c0003fc4:	75 7e                	jne    c0004044 <dir_find+0x182>
c0003fc6:	eb 04                	jmp    c0003fcc <dir_find+0x10a>
c0003fc8:	3c 0f                	cmp    al,0xf
c0003fca:	75 4c                	jne    c0004018 <dir_find+0x156>
c0003fcc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd0:	75 7e                	jne    c0004050 <dir_find+0x18e>
c0003fd2:	f6 c1 40             	test   cl,0x40
c0003fd5:	74 12                	je     c0003fe9 <dir_find+0x127>
c0003fd7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fda:	83 e1 bf             	and    ecx,0xffffffbf
c0003fdd:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe7:	eb 06                	jmp    c0003fef <dir_find+0x12d>
c0003fe9:	89 f8                	mov    eax,edi
c0003feb:	38 c8                	cmp    al,cl
c0003fed:	75 5c                	jne    c000404b <dir_find+0x189>
c0003fef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff3:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff8:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffb:	75 53                	jne    c0004050 <dir_find+0x18e>
c0003ffd:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004001:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004004:	89 ea                	mov    edx,ebp
c0004006:	e8 f4 fd ff ff       	call   c0003dff <cmp_lfn>
c000400b:	85 c0                	test   eax,eax
c000400d:	74 41                	je     c0004050 <dir_find+0x18e>
c000400f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004013:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004016:	eb 38                	jmp    c0004050 <dir_find+0x18e>
c0004018:	89 f8                	mov    eax,edi
c000401a:	84 c0                	test   al,al
c000401c:	75 0d                	jne    c000402b <dir_find+0x169>
c000401e:	89 e8                	mov    eax,ebp
c0004020:	e8 98 de ff ff       	call   c0001ebd <sum_sfn>
c0004025:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004029:	74 52                	je     c000407d <dir_find+0x1bb>
c000402b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000402f:	75 13                	jne    c0004044 <dir_find+0x182>
c0004031:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004034:	b9 0b 00 00 00       	mov    ecx,0xb
c0004039:	89 e8                	mov    eax,ebp
c000403b:	e8 60 da ff ff       	call   c0001aa0 <mem_cmp>
c0004040:	85 c0                	test   eax,eax
c0004042:	74 39                	je     c000407d <dir_find+0x1bb>
c0004044:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004050:	31 d2                	xor    edx,edx
c0004052:	89 d8                	mov    eax,ebx
c0004054:	e8 5c f4 ff ff       	call   c00034b5 <dir_next>
c0004059:	85 c0                	test   eax,eax
c000405b:	0f 84 25 ff ff ff    	je     c0003f86 <dir_find+0xc4>
c0004061:	89 04 24             	mov    DWORD PTR [esp],eax
c0004064:	eb 17                	jmp    c000407d <dir_find+0x1bb>
c0004066:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406d:	eb 0e                	jmp    c000407d <dir_find+0x1bb>
c000406f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004072:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004077:	0f 85 75 fe ff ff    	jne    c0003ef2 <dir_find+0x30>
c000407d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004080:	83 c4 1c             	add    esp,0x1c
c0004083:	5b                   	pop    ebx
c0004084:	5e                   	pop    esi
c0004085:	5f                   	pop    edi
c0004086:	5d                   	pop    ebp
c0004087:	c3                   	ret    

c0004088 <dir_register>:
c0004088:	55                   	push   ebp
c0004089:	57                   	push   edi
c000408a:	56                   	push   esi
c000408b:	be 06 00 00 00       	mov    esi,0x6
c0004090:	53                   	push   ebx
c0004091:	83 ec 6c             	sub    esp,0x6c
c0004094:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004098:	0f 85 62 02 00 00    	jne    c0004300 <dir_register+0x278>
c000409e:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a0:	31 ff                	xor    edi,edi
c00040a2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040aa:	74 03                	je     c00040af <dir_register+0x27>
c00040ac:	47                   	inc    edi
c00040ad:	eb f6                	jmp    c00040a5 <dir_register+0x1d>
c00040af:	89 c3                	mov    ebx,eax
c00040b1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b5:	0f 85 e1 00 00 00    	jne    c000419c <dir_register+0x114>
c00040bb:	83 c7 0e             	add    edi,0xe
c00040be:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c3:	89 f8                	mov    eax,edi
c00040c5:	31 d2                	xor    edx,edx
c00040c7:	f7 f1                	div    ecx
c00040c9:	8d 50 02             	lea    edx,[eax+0x2]
c00040cc:	89 c7                	mov    edi,eax
c00040ce:	89 d8                	mov    eax,ebx
c00040d0:	e8 12 f8 ff ff       	call   c00038e7 <dir_alloc>
c00040d5:	89 c6                	mov    esi,eax
c00040d7:	85 c0                	test   eax,eax
c00040d9:	0f 85 21 02 00 00    	jne    c0004300 <dir_register+0x278>
c00040df:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040e8:	c1 e7 05             	shl    edi,0x5
c00040eb:	29 f8                	sub    eax,edi
c00040ed:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f3:	a8 04                	test   al,0x4
c00040f5:	0f 84 91 00 00 00    	je     c000418c <dir_register+0x104>
c00040fb:	83 e0 fb             	and    eax,0xfffffffb
c00040fe:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004101:	89 d8                	mov    eax,ebx
c0004103:	e8 25 ec ff ff       	call   c0002d2d <fill_first_frag>
c0004108:	85 c0                	test   eax,eax
c000410a:	0f 85 ee 01 00 00    	jne    c00042fe <dir_register+0x276>
c0004110:	83 c9 ff             	or     ecx,0xffffffff
c0004113:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004116:	89 d8                	mov    eax,ebx
c0004118:	e8 db eb ff ff       	call   c0002cf8 <fill_last_frag>
c000411d:	85 c0                	test   eax,eax
c000411f:	0f 85 d9 01 00 00    	jne    c00042fe <dir_register+0x276>
c0004125:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004129:	74 61                	je     c000418c <dir_register+0x104>
c000412b:	89 da                	mov    edx,ebx
c000412d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004131:	e8 ea f5 ff ff       	call   c0003720 <load_obj_xdir>
c0004136:	85 c0                	test   eax,eax
c0004138:	0f 85 c0 01 00 00    	jne    c00042fe <dir_register+0x276>
c000413e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004142:	31 c9                	xor    ecx,ecx
c0004144:	c1 e2 09             	shl    edx,0x9
c0004147:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004150:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004153:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004156:	83 c0 38             	add    eax,0x38
c0004159:	e8 1c d9 ff ff       	call   c0001a7a <st_qword>
c000415e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004161:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004164:	83 c0 28             	add    eax,0x28
c0004167:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416a:	e8 0b d9 ff ff       	call   c0001a7a <st_qword>
c000416f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004172:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004175:	83 c8 01             	or     eax,0x1
c0004178:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417f:	e8 db f7 ff ff       	call   c000395f <store_xdir>
c0004184:	85 c0                	test   eax,eax
c0004186:	0f 85 72 01 00 00    	jne    c00042fe <dir_register+0x276>
c000418c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000418f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004192:	e8 c1 fb ff ff       	call   c0003d58 <create_xdir>
c0004197:	e9 64 01 00 00       	jmp    c0004300 <dir_register+0x278>
c000419c:	8d 40 3c             	lea    eax,[eax+0x3c]
c000419f:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041a8:	89 c2                	mov    edx,eax
c00041aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ae:	e8 cd d8 ff ff       	call   c0001a80 <mem_cpy>
c00041b3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041b8:	74 58                	je     c0004212 <dir_register+0x18a>
c00041ba:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041be:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c6:	83 ec 0c             	sub    esp,0xc
c00041c9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041d8:	e8 24 dc ff ff       	call   c0001e01 <gen_numname>
c00041dd:	89 d8                	mov    eax,ebx
c00041df:	e8 de fc ff ff       	call   c0003ec2 <dir_find>
c00041e4:	83 c4 10             	add    esp,0x10
c00041e7:	89 c6                	mov    esi,eax
c00041e9:	85 c0                	test   eax,eax
c00041eb:	75 15                	jne    c0004202 <dir_register+0x17a>
c00041ed:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f1:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f6:	75 ce                	jne    c00041c6 <dir_register+0x13e>
c00041f8:	be 07 00 00 00       	mov    esi,0x7
c00041fd:	e9 fe 00 00 00       	jmp    c0004300 <dir_register+0x278>
c0004202:	83 f8 04             	cmp    eax,0x4
c0004205:	0f 85 f5 00 00 00    	jne    c0004300 <dir_register+0x278>
c000420b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000420f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004212:	b9 01 00 00 00       	mov    ecx,0x1
c0004217:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421c:	74 0f                	je     c000422d <dir_register+0x1a5>
c000421e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004223:	8d 47 0c             	lea    eax,[edi+0xc]
c0004226:	31 d2                	xor    edx,edx
c0004228:	f7 f1                	div    ecx
c000422a:	8d 48 01             	lea    ecx,[eax+0x1]
c000422d:	89 ca                	mov    edx,ecx
c000422f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004233:	89 d8                	mov    eax,ebx
c0004235:	e8 ad f6 ff ff       	call   c00038e7 <dir_alloc>
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	0f 85 bc 00 00 00    	jne    c0004300 <dir_register+0x278>
c0004244:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004248:	49                   	dec    ecx
c0004249:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424d:	74 6a                	je     c00042b9 <dir_register+0x231>
c000424f:	89 c8                	mov    eax,ecx
c0004251:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004254:	c1 e0 05             	shl    eax,0x5
c0004257:	29 c2                	sub    edx,eax
c0004259:	89 d8                	mov    eax,ebx
c000425b:	e8 fd ec ff ff       	call   c0002f5d <dir_sdi>
c0004260:	89 c6                	mov    esi,eax
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 96 00 00 00    	jne    c0004300 <dir_register+0x278>
c000426a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000426e:	e8 4a dc ff ff       	call   c0001ebd <sum_sfn>
c0004273:	0f b6 f8             	movzx  edi,al
c0004276:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004279:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427c:	89 e8                	mov    eax,ebp
c000427e:	e8 5c df ff ff       	call   c00021df <move_window>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	75 77                	jne    c0004300 <dir_register+0x278>
c0004289:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000428e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004291:	83 ec 0c             	sub    esp,0xc
c0004294:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004297:	57                   	push   edi
c0004298:	e8 e0 da ff ff       	call   c0001d7d <put_lfn>
c000429d:	31 d2                	xor    edx,edx
c000429f:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a3:	89 d8                	mov    eax,ebx
c00042a5:	e8 0b f2 ff ff       	call   c00034b5 <dir_next>
c00042aa:	83 c4 10             	add    esp,0x10
c00042ad:	89 c6                	mov    esi,eax
c00042af:	85 c0                	test   eax,eax
c00042b1:	75 4d                	jne    c0004300 <dir_register+0x278>
c00042b3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b7:	75 bd                	jne    c0004276 <dir_register+0x1ee>
c00042b9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042bc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042bf:	89 e8                	mov    eax,ebp
c00042c1:	e8 19 df ff ff       	call   c00021df <move_window>
c00042c6:	89 c6                	mov    esi,eax
c00042c8:	85 c0                	test   eax,eax
c00042ca:	75 34                	jne    c0004300 <dir_register+0x278>
c00042cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042cf:	b9 20 00 00 00       	mov    ecx,0x20
c00042d4:	31 d2                	xor    edx,edx
c00042d6:	e8 ba d7 ff ff       	call   c0001a95 <mem_set>
c00042db:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e7:	e8 94 d7 ff ff       	call   c0001a80 <mem_cpy>
c00042ec:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ef:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f2:	83 e0 18             	and    eax,0x18
c00042f5:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042f8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fc:	eb 02                	jmp    c0004300 <dir_register+0x278>
c00042fe:	89 c6                	mov    esi,eax
c0004300:	83 c4 6c             	add    esp,0x6c
c0004303:	89 f0                	mov    eax,esi
c0004305:	5b                   	pop    ebx
c0004306:	5e                   	pop    esi
c0004307:	5f                   	pop    edi
c0004308:	5d                   	pop    ebp
c0004309:	c3                   	ret    

c000430a <sync_fs>:
c000430a:	56                   	push   esi
c000430b:	53                   	push   ebx
c000430c:	53                   	push   ebx
c000430d:	89 c3                	mov    ebx,eax
c000430f:	e8 37 de ff ff       	call   c000214b <sync_window>
c0004314:	85 c0                	test   eax,eax
c0004316:	0f 85 b1 00 00 00    	jne    c00043cd <sync_fs+0xc3>
c000431c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000431f:	0f 85 8e 00 00 00    	jne    c00043b3 <sync_fs+0xa9>
c0004325:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004329:	0f 85 84 00 00 00    	jne    c00043b3 <sync_fs+0xa9>
c000432f:	b9 00 02 00 00       	mov    ecx,0x200
c0004334:	8d 73 54             	lea    esi,[ebx+0x54]
c0004337:	31 d2                	xor    edx,edx
c0004339:	89 f0                	mov    eax,esi
c000433b:	e8 55 d7 ff ff       	call   c0001a95 <mem_set>
c0004340:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004346:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434b:	e8 23 d7 ff ff       	call   c0001a73 <st_word>
c0004350:	ba 52 52 61 41       	mov    edx,0x41615252
c0004355:	89 f0                	mov    eax,esi
c0004357:	e8 1b d7 ff ff       	call   c0001a77 <st_dword>
c000435c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004362:	ba 72 72 41 61       	mov    edx,0x61417272
c0004367:	e8 0b d7 ff ff       	call   c0001a77 <st_dword>
c000436c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000436f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004375:	e8 fd d6 ff ff       	call   c0001a77 <st_dword>
c000437a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004383:	e8 ef d6 ff ff       	call   c0001a77 <st_dword>
c0004388:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000438e:	83 c0 01             	add    eax,0x1
c0004391:	83 d2 00             	adc    edx,0x0
c0004394:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004397:	83 ec 0c             	sub    esp,0xc
c000439a:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439d:	6a 01                	push   0x1
c000439f:	52                   	push   edx
c00043a0:	50                   	push   eax
c00043a1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a5:	56                   	push   esi
c00043a6:	50                   	push   eax
c00043a7:	e8 20 d6 ff ff       	call   c00019cc <disk_write>
c00043ac:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b0:	83 c4 20             	add    esp,0x20
c00043b3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b7:	51                   	push   ecx
c00043b8:	6a 00                	push   0x0
c00043ba:	6a 00                	push   0x0
c00043bc:	50                   	push   eax
c00043bd:	e8 20 d6 ff ff       	call   c00019e2 <disk_ioctl>
c00043c2:	83 c4 10             	add    esp,0x10
c00043c5:	85 c0                	test   eax,eax
c00043c7:	0f 95 c0             	setne  al
c00043ca:	0f b6 c0             	movzx  eax,al
c00043cd:	5a                   	pop    edx
c00043ce:	5b                   	pop    ebx
c00043cf:	5e                   	pop    esi
c00043d0:	c3                   	ret    

c00043d1 <create_partition>:
c00043d1:	55                   	push   ebp
c00043d2:	0f b6 c0             	movzx  eax,al
c00043d5:	57                   	push   edi
c00043d6:	56                   	push   esi
c00043d7:	53                   	push   ebx
c00043d8:	83 ec 60             	sub    esp,0x60
c00043db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043df:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043eb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ef:	50                   	push   eax
c00043f0:	6a 01                	push   0x1
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	e8 e7 d5 ff ff       	call   c00019e2 <disk_ioctl>
c00043fb:	83 c4 10             	add    esp,0x10
c00043fe:	85 c0                	test   eax,eax
c0004400:	74 0a                	je     c000440c <create_partition+0x3b>
c0004402:	b8 01 00 00 00       	mov    eax,0x1
c0004407:	e9 67 05 00 00       	jmp    c0004973 <create_partition+0x5a2>
c000440c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004410:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004414:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004418:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004421:	0f 86 ed 03 00 00    	jbe    c0004814 <create_partition+0x443>
c0004427:	83 c0 df             	add    eax,0xffffffdf
c000442a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004432:	83 d2 ff             	adc    edx,0xffffffff
c0004435:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004439:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004445:	83 c0 bd             	add    eax,0xffffffbd
c0004448:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000444f:	83 d2 ff             	adc    edx,0xffffffff
c0004452:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004456:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004462:	be 22 00 00 00       	mov    esi,0x22
c0004467:	31 ff                	xor    edi,edi
c0004469:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004471:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004479:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004481:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004485:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448b:	75 0e                	jne    c000449b <create_partition+0xca>
c000448d:	b9 00 02 00 00       	mov    ecx,0x200
c0004492:	31 d2                	xor    edx,edx
c0004494:	89 d8                	mov    eax,ebx
c0004496:	e8 fa d5 ff ff       	call   c0001a95 <mem_set>
c000449b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000449f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044aa:	0f 84 23 01 00 00    	je     c00045d3 <create_partition+0x202>
c00044b0:	89 f0                	mov    eax,esi
c00044b2:	89 fa                	mov    edx,edi
c00044b4:	05 ff 07 00 00       	add    eax,0x7ff
c00044b9:	83 d2 00             	adc    edx,0x0
c00044bc:	89 c1                	mov    ecx,eax
c00044be:	89 d7                	mov    edi,edx
c00044c0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044ca:	89 ce                	mov    esi,ecx
c00044cc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044d8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044df:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e2:	b8 64 00 00 00       	mov    eax,0x64
c00044e7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044ea:	b8 00 00 00 00       	mov    eax,0x0
c00044ef:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f3:	72 41                	jb     c0004536 <create_partition+0x165>
c00044f5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fd:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004501:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004506:	01 c1                	add    ecx,eax
c0004508:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450c:	f7 24 24             	mul    DWORD PTR [esp]
c000450f:	6a 00                	push   0x0
c0004511:	01 ca                	add    edx,ecx
c0004513:	6a 64                	push   0x64
c0004515:	52                   	push   edx
c0004516:	50                   	push   eax
c0004517:	e8 f0 ff 01 00       	call   c002450c <__udivdi3>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	05 ff 07 00 00       	add    eax,0x7ff
c0004524:	83 d2 00             	adc    edx,0x0
c0004527:	89 c1                	mov    ecx,eax
c0004529:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004533:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004536:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004539:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453d:	01 f0                	add    eax,esi
c000453f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004543:	11 fa                	adc    edx,edi
c0004545:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004549:	19 d1                	sbb    ecx,edx
c000454b:	73 2e                	jae    c000457b <create_partition+0x1aa>
c000454d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004551:	89 f8                	mov    eax,edi
c0004553:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000455e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004566:	73 6b                	jae    c00045d3 <create_partition+0x202>
c0004568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004570:	29 f0                	sub    eax,esi
c0004572:	19 fa                	sbb    edx,edi
c0004574:	89 04 24             	mov    DWORD PTR [esp],eax
c0004577:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000457f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004582:	74 4f                	je     c00045d3 <create_partition+0x202>
c0004584:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004587:	b9 10 00 00 00       	mov    ecx,0x10
c000458c:	ba 50 6f 02 c0       	mov    edx,0xc0026f50
c0004591:	e8 ea d4 ff ff       	call   c0001a80 <mem_cpy>
c0004596:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459a:	b9 10 00 00 00       	mov    ecx,0x10
c000459f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a3:	e8 2c db ff ff       	call   c00020d4 <make_rand>
c00045a8:	89 f2                	mov    edx,esi
c00045aa:	89 f9                	mov    ecx,edi
c00045ac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b4:	e8 c1 d4 ff ff       	call   c0001a7a <st_qword>
c00045b9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045bc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c4:	89 f2                	mov    edx,esi
c00045c6:	89 f9                	mov    ecx,edi
c00045c8:	83 c2 ff             	add    edx,0xffffffff
c00045cb:	83 d1 ff             	adc    ecx,0xffffffff
c00045ce:	e8 a7 d4 ff ff       	call   c0001a7a <st_qword>
c00045d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d7:	83 e8 80             	sub    eax,0xffffff80
c00045da:	89 c5                	mov    ebp,eax
c00045dc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e6:	75 6b                	jne    c0004653 <create_partition+0x282>
c00045e8:	45                   	inc    ebp
c00045e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ed:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f2:	e8 39 da ff ff       	call   c0002030 <crc32>
c00045f7:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004601:	75 e5                	jne    c00045e8 <create_partition+0x217>
c0004603:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004607:	31 d2                	xor    edx,edx
c0004609:	83 ec 0c             	sub    esp,0xc
c000460c:	c1 ed 09             	shr    ebp,0x9
c000460f:	6a 01                	push   0x1
c0004611:	8d 45 02             	lea    eax,[ebp+0x2]
c0004614:	52                   	push   edx
c0004615:	50                   	push   eax
c0004616:	53                   	push   ebx
c0004617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461b:	e8 ac d3 ff ff       	call   c00019cc <disk_write>
c0004620:	83 c4 20             	add    esp,0x20
c0004623:	85 c0                	test   eax,eax
c0004625:	0f 85 d7 fd ff ff    	jne    c0004402 <create_partition+0x31>
c000462b:	83 ec 0c             	sub    esp,0xc
c000462e:	31 d2                	xor    edx,edx
c0004630:	6a 01                	push   0x1
c0004632:	89 e8                	mov    eax,ebp
c0004634:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004638:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463c:	52                   	push   edx
c000463d:	50                   	push   eax
c000463e:	53                   	push   ebx
c000463f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004643:	e8 84 d3 ff ff       	call   c00019cc <disk_write>
c0004648:	83 c4 20             	add    esp,0x20
c000464b:	85 c0                	test   eax,eax
c000464d:	0f 85 af fd ff ff    	jne    c0004402 <create_partition+0x31>
c0004653:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004657:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004660:	74 0d                	je     c000466f <create_partition+0x29e>
c0004662:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004666:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466a:	e9 12 fe ff ff       	jmp    c0004481 <create_partition+0xb0>
c000466f:	31 d2                	xor    edx,edx
c0004671:	b9 00 02 00 00       	mov    ecx,0x200
c0004676:	89 d8                	mov    eax,ebx
c0004678:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467b:	e8 15 d4 ff ff       	call   c0001a95 <mem_set>
c0004680:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004683:	b9 10 00 00 00       	mov    ecx,0x10
c0004688:	ba 40 6e 02 c0       	mov    edx,0xc0026e40
c000468d:	89 d8                	mov    eax,ebx
c000468f:	e8 ec d3 ff ff       	call   c0001a80 <mem_cpy>
c0004694:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004698:	8d 43 58             	lea    eax,[ebx+0x58]
c000469b:	f7 d2                	not    edx
c000469d:	e8 d5 d3 ff ff       	call   c0001a77 <st_dword>
c00046a2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046aa:	ba 01 00 00 00       	mov    edx,0x1
c00046af:	e8 c6 d3 ff ff       	call   c0001a7a <st_qword>
c00046b4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046b8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046bc:	83 c2 ff             	add    edx,0xffffffff
c00046bf:	89 e8                	mov    eax,ebp
c00046c1:	83 d1 ff             	adc    ecx,0xffffffff
c00046c4:	e8 b1 d3 ff ff       	call   c0001a7a <st_qword>
c00046c9:	31 c9                	xor    ecx,ecx
c00046cb:	8d 43 28             	lea    eax,[ebx+0x28]
c00046ce:	ba 22 00 00 00       	mov    edx,0x22
c00046d3:	e8 a2 d3 ff ff       	call   c0001a7a <st_qword>
c00046d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e0:	83 c2 de             	add    edx,0xffffffde
c00046e3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e6:	83 d1 ff             	adc    ecx,0xffffffff
c00046e9:	31 f6                	xor    esi,esi
c00046eb:	e8 8a d3 ff ff       	call   c0001a7a <st_qword>
c00046f0:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f3:	ba 80 00 00 00       	mov    edx,0x80
c00046f8:	e8 7a d3 ff ff       	call   c0001a77 <st_dword>
c00046fd:	8d 43 50             	lea    eax,[ebx+0x50]
c0004700:	ba 80 00 00 00       	mov    edx,0x80
c0004705:	e8 6d d3 ff ff       	call   c0001a77 <st_dword>
c000470a:	ba 02 00 00 00       	mov    edx,0x2
c000470f:	89 f8                	mov    eax,edi
c0004711:	e8 61 d3 ff ff       	call   c0001a77 <st_dword>
c0004716:	8d 53 38             	lea    edx,[ebx+0x38]
c0004719:	b9 10 00 00 00       	mov    ecx,0x10
c000471e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004722:	e8 ad d9 ff ff       	call   c00020d4 <make_rand>
c0004727:	83 c8 ff             	or     eax,0xffffffff
c000472a:	46                   	inc    esi
c000472b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004730:	e8 fb d8 ff ff       	call   c0002030 <crc32>
c0004735:	83 fe 5c             	cmp    esi,0x5c
c0004738:	75 f0                	jne    c000472a <create_partition+0x359>
c000473a:	f7 d0                	not    eax
c000473c:	8d 73 10             	lea    esi,[ebx+0x10]
c000473f:	89 c2                	mov    edx,eax
c0004741:	89 f0                	mov    eax,esi
c0004743:	e8 2f d3 ff ff       	call   c0001a77 <st_dword>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	6a 01                	push   0x1
c000474d:	6a 00                	push   0x0
c000474f:	6a 01                	push   0x1
c0004751:	53                   	push   ebx
c0004752:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004756:	e8 71 d2 ff ff       	call   c00019cc <disk_write>
c000475b:	83 c4 20             	add    esp,0x20
c000475e:	85 c0                	test   eax,eax
c0004760:	0f 85 9c fc ff ff    	jne    c0004402 <create_partition+0x31>
c0004766:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000476e:	83 c2 ff             	add    edx,0xffffffff
c0004771:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004774:	83 d1 ff             	adc    ecx,0xffffffff
c0004777:	e8 fe d2 ff ff       	call   c0001a7a <st_qword>
c000477c:	ba 01 00 00 00       	mov    edx,0x1
c0004781:	31 c9                	xor    ecx,ecx
c0004783:	89 e8                	mov    eax,ebp
c0004785:	e8 f0 d2 ff ff       	call   c0001a7a <st_qword>
c000478a:	89 f8                	mov    eax,edi
c000478c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004790:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004794:	31 ff                	xor    edi,edi
c0004796:	e8 df d2 ff ff       	call   c0001a7a <st_qword>
c000479b:	89 f0                	mov    eax,esi
c000479d:	31 d2                	xor    edx,edx
c000479f:	e8 d3 d2 ff ff       	call   c0001a77 <st_dword>
c00047a4:	83 c8 ff             	or     eax,0xffffffff
c00047a7:	47                   	inc    edi
c00047a8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047ad:	e8 7e d8 ff ff       	call   c0002030 <crc32>
c00047b2:	83 ff 5c             	cmp    edi,0x5c
c00047b5:	75 f0                	jne    c00047a7 <create_partition+0x3d6>
c00047b7:	f7 d0                	not    eax
c00047b9:	89 c2                	mov    edx,eax
c00047bb:	89 f0                	mov    eax,esi
c00047bd:	e8 b5 d2 ff ff       	call   c0001a77 <st_dword>
c00047c2:	83 ec 0c             	sub    esp,0xc
c00047c5:	6a 01                	push   0x1
c00047c7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cb:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047cf:	83 c0 ff             	add    eax,0xffffffff
c00047d2:	83 d2 ff             	adc    edx,0xffffffff
c00047d5:	52                   	push   edx
c00047d6:	50                   	push   eax
c00047d7:	53                   	push   ebx
c00047d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047dc:	e8 eb d1 ff ff       	call   c00019cc <disk_write>
c00047e1:	83 c4 20             	add    esp,0x20
c00047e4:	85 c0                	test   eax,eax
c00047e6:	0f 85 16 fc ff ff    	jne    c0004402 <create_partition+0x31>
c00047ec:	31 d2                	xor    edx,edx
c00047ee:	89 d8                	mov    eax,ebx
c00047f0:	b9 00 02 00 00       	mov    ecx,0x200
c00047f5:	e8 9b d2 ff ff       	call   c0001a95 <mem_set>
c00047fa:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004800:	b9 10 00 00 00       	mov    ecx,0x10
c0004805:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c000480a:	e8 71 d2 ff ff       	call   c0001a80 <mem_cpy>
c000480f:	e9 21 01 00 00       	jmp    c0004935 <create_partition+0x564>
c0004814:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004818:	b9 05 00 00 00       	mov    ecx,0x5
c000481d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004820:	bf 08 00 00 00       	mov    edi,0x8
c0004825:	89 f8                	mov    eax,edi
c0004827:	31 d2                	xor    edx,edx
c0004829:	0f b6 f0             	movzx  esi,al
c000482c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000482f:	f7 f6                	div    esi
c0004831:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004836:	76 0a                	jbe    c0004842 <create_partition+0x471>
c0004838:	d1 e7                	shl    edi,1
c000483a:	49                   	dec    ecx
c000483b:	75 e8                	jne    c0004825 <create_partition+0x454>
c000483d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004842:	b9 00 02 00 00       	mov    ecx,0x200
c0004847:	31 d2                	xor    edx,edx
c0004849:	89 d8                	mov    eax,ebx
c000484b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004851:	e8 3f d2 ff ff       	call   c0001a95 <mem_set>
c0004856:	b9 64 00 00 00       	mov    ecx,0x64
c000485b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000485e:	31 d2                	xor    edx,edx
c0004860:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004868:	f7 f1                	div    ecx
c000486a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000486f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004873:	89 f8                	mov    eax,edi
c0004875:	0f b6 c0             	movzx  eax,al
c0004878:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487c:	e9 80 00 00 00       	jmp    c0004901 <create_partition+0x530>
c0004881:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004884:	29 cf                	sub    edi,ecx
c0004886:	89 ca                	mov    edx,ecx
c0004888:	89 f0                	mov    eax,esi
c000488a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000488f:	e8 e3 d1 ff ff       	call   c0001a77 <st_dword>
c0004894:	8d 46 04             	lea    eax,[esi+0x4]
c0004897:	89 fa                	mov    edx,edi
c0004899:	83 c6 10             	add    esi,0x10
c000489c:	e8 d6 d1 ff ff       	call   c0001a77 <st_dword>
c00048a1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a5:	31 d2                	xor    edx,edx
c00048a7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048aa:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048ae:	89 c8                	mov    eax,ecx
c00048b0:	01 f9                	add    ecx,edi
c00048b2:	f7 f5                	div    ebp
c00048b4:	89 d5                	mov    ebp,edx
c00048b6:	31 d2                	xor    edx,edx
c00048b8:	45                   	inc    ebp
c00048b9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048bd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c3:	89 c2                	mov    edx,eax
c00048c5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048c8:	c1 ea 02             	shr    edx,0x2
c00048cb:	83 e2 c0             	and    edx,0xffffffc0
c00048ce:	09 ea                	or     edx,ebp
c00048d0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048d8:	31 d2                	xor    edx,edx
c00048da:	f7 f5                	div    ebp
c00048dc:	89 d7                	mov    edi,edx
c00048de:	31 d2                	xor    edx,edx
c00048e0:	47                   	inc    edi
c00048e1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048e8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048eb:	89 c5                	mov    ebp,eax
c00048ed:	c1 ed 02             	shr    ebp,0x2
c00048f0:	83 e5 c0             	and    ebp,0xffffffc0
c00048f3:	09 ef                	or     edi,ebp
c00048f5:	89 fa                	mov    edx,edi
c00048f7:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fa:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c00048ff:	74 34                	je     c0004935 <create_partition+0x564>
c0004901:	85 c9                	test   ecx,ecx
c0004903:	74 30                	je     c0004935 <create_partition+0x564>
c0004905:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004908:	76 2b                	jbe    c0004935 <create_partition+0x564>
c000490a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000490e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004912:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004915:	83 ff 64             	cmp    edi,0x64
c0004918:	76 4b                	jbe    c0004965 <create_partition+0x594>
c000491a:	89 f8                	mov    eax,edi
c000491c:	01 c8                	add    eax,ecx
c000491e:	0f 82 5d ff ff ff    	jb     c0004881 <create_partition+0x4b0>
c0004924:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004927:	0f 87 54 ff ff ff    	ja     c0004881 <create_partition+0x4b0>
c000492d:	85 ff                	test   edi,edi
c000492f:	0f 85 51 ff ff ff    	jne    c0004886 <create_partition+0x4b5>
c0004935:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004940:	e8 2e d1 ff ff       	call   c0001a73 <st_word>
c0004945:	83 ec 0c             	sub    esp,0xc
c0004948:	6a 01                	push   0x1
c000494a:	6a 00                	push   0x0
c000494c:	6a 00                	push   0x0
c000494e:	53                   	push   ebx
c000494f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004953:	e8 74 d0 ff ff       	call   c00019cc <disk_write>
c0004958:	83 c4 20             	add    esp,0x20
c000495b:	85 c0                	test   eax,eax
c000495d:	0f 95 c0             	setne  al
c0004960:	0f b6 c0             	movzx  eax,al
c0004963:	eb 0e                	jmp    c0004973 <create_partition+0x5a2>
c0004965:	74 07                	je     c000496e <create_partition+0x59d>
c0004967:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496c:	eb ac                	jmp    c000491a <create_partition+0x549>
c000496e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004971:	eb a7                	jmp    c000491a <create_partition+0x549>
c0004973:	83 c4 5c             	add    esp,0x5c
c0004976:	5b                   	pop    ebx
c0004977:	5e                   	pop    esi
c0004978:	5f                   	pop    edi
c0004979:	5d                   	pop    ebp
c000497a:	c3                   	ret    

c000497b <get_fileinfo>:
c000497b:	55                   	push   ebp
c000497c:	57                   	push   edi
c000497d:	56                   	push   esi
c000497e:	53                   	push   ebx
c000497f:	83 ec 1c             	sub    esp,0x1c
c0004982:	8b 30                	mov    esi,DWORD PTR [eax]
c0004984:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004988:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000498f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004992:	0f 84 dc 01 00 00    	je     c0004b74 <get_fileinfo+0x1f9>
c0004998:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499b:	75 0f                	jne    c00049ac <get_fileinfo+0x31>
c000499d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a0:	83 c4 1c             	add    esp,0x1c
c00049a3:	5b                   	pop    ebx
c00049a4:	5e                   	pop    esi
c00049a5:	5f                   	pop    edi
c00049a6:	5d                   	pop    ebp
c00049a7:	e9 58 d5 ff ff       	jmp    c0001f04 <get_xfileinfo>
c00049ac:	89 d3                	mov    ebx,edx
c00049ae:	89 c6                	mov    esi,eax
c00049b0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b4:	74 6a                	je     c0004a20 <get_fileinfo+0xa5>
c00049b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049be:	31 ed                	xor    ebp,ebp
c00049c0:	31 ff                	xor    edi,edi
c00049c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049cd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d1:	66 85 d2             	test   dx,dx
c00049d4:	74 3e                	je     c0004a14 <get_fileinfo+0x99>
c00049d6:	66 85 ed             	test   bp,bp
c00049d9:	75 0c                	jne    c00049e7 <get_fileinfo+0x6c>
c00049db:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e1:	66 3d ff 07          	cmp    ax,0x7ff
c00049e5:	76 22                	jbe    c0004a09 <get_fileinfo+0x8e>
c00049e7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ec:	89 e8                	mov    eax,ebp
c00049ee:	29 f9                	sub    ecx,edi
c00049f0:	c1 e0 10             	shl    eax,0x10
c00049f3:	09 d0                	or     eax,edx
c00049f5:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049f9:	e8 a3 d1 ff ff       	call   c0001ba1 <put_utf>
c00049fe:	84 c0                	test   al,al
c0004a00:	74 10                	je     c0004a12 <get_fileinfo+0x97>
c0004a02:	0f b6 c0             	movzx  eax,al
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	01 c7                	add    edi,eax
c0004a09:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	eb b0                	jmp    c00049c2 <get_fileinfo+0x47>
c0004a12:	31 ff                	xor    edi,edi
c0004a14:	66 85 ed             	test   bp,bp
c0004a17:	74 02                	je     c0004a1b <get_fileinfo+0xa0>
c0004a19:	31 ff                	xor    edi,edi
c0004a1b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a20:	31 ff                	xor    edi,edi
c0004a22:	31 c9                	xor    ecx,ecx
c0004a24:	83 f9 0a             	cmp    ecx,0xa
c0004a27:	0f 87 ad 00 00 00    	ja     c0004ada <get_fileinfo+0x15f>
c0004a2d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a30:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a33:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a37:	66 83 fa 20          	cmp    dx,0x20
c0004a3b:	0f 84 92 00 00 00    	je     c0004ad3 <get_fileinfo+0x158>
c0004a41:	66 83 fa 05          	cmp    dx,0x5
c0004a45:	75 05                	jne    c0004a4c <get_fileinfo+0xd1>
c0004a47:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4c:	83 ff 0b             	cmp    edi,0xb
c0004a4f:	77 0b                	ja     c0004a5c <get_fileinfo+0xe1>
c0004a51:	83 fd 09             	cmp    ebp,0x9
c0004a54:	75 06                	jne    c0004a5c <get_fileinfo+0xe1>
c0004a56:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5b:	47                   	inc    edi
c0004a5c:	0f b7 c2             	movzx  eax,dx
c0004a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a63:	e8 6d d0 ff ff       	call   c0001ad5 <dbc_1st>
c0004a68:	85 c0                	test   eax,eax
c0004a6a:	74 2f                	je     c0004a9b <get_fileinfo+0x120>
c0004a6c:	83 fd 08             	cmp    ebp,0x8
c0004a6f:	74 2a                	je     c0004a9b <get_fileinfo+0x120>
c0004a71:	83 fd 0b             	cmp    ebp,0xb
c0004a74:	74 25                	je     c0004a9b <get_fileinfo+0x120>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a81:	e8 52 d0 ff ff       	call   c0001ad8 <dbc_2nd>
c0004a86:	85 c0                	test   eax,eax
c0004a88:	74 11                	je     c0004a9b <get_fileinfo+0x120>
c0004a8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a93:	c1 e2 08             	shl    edx,0x8
c0004a96:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a99:	09 c2                	or     edx,eax
c0004a9b:	0f b7 d2             	movzx  edx,dx
c0004a9e:	50                   	push   eax
c0004a9f:	50                   	push   eax
c0004aa0:	68 b5 01 00 00       	push   0x1b5
c0004aa5:	52                   	push   edx
c0004aa6:	e8 46 38 00 00       	call   c00082f1 <ff_oem2uni>
c0004aab:	83 c4 10             	add    esp,0x10
c0004aae:	66 85 c0             	test   ax,ax
c0004ab1:	75 04                	jne    c0004ab7 <get_fileinfo+0x13c>
c0004ab3:	31 ff                	xor    edi,edi
c0004ab5:	eb 23                	jmp    c0004ada <get_fileinfo+0x15f>
c0004ab7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac0:	29 f9                	sub    ecx,edi
c0004ac2:	0f b7 c0             	movzx  eax,ax
c0004ac5:	e8 d7 d0 ff ff       	call   c0001ba1 <put_utf>
c0004aca:	84 c0                	test   al,al
c0004acc:	74 e5                	je     c0004ab3 <get_fileinfo+0x138>
c0004ace:	0f b6 c0             	movzx  eax,al
c0004ad1:	01 c7                	add    edi,eax
c0004ad3:	89 e9                	mov    ecx,ebp
c0004ad5:	e9 4a ff ff ff       	jmp    c0004a24 <get_fileinfo+0xa9>
c0004ada:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004adf:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae3:	75 54                	jne    c0004b39 <get_fileinfo+0x1be>
c0004ae5:	85 ff                	test   edi,edi
c0004ae7:	75 0b                	jne    c0004af4 <get_fileinfo+0x179>
c0004ae9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aed:	ba 01 00 00 00       	mov    edx,0x1
c0004af2:	eb 33                	jmp    c0004b27 <get_fileinfo+0x1ac>
c0004af4:	b1 08                	mov    cl,0x8
c0004af6:	31 d2                	xor    edx,edx
c0004af8:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004afe:	84 c0                	test   al,al
c0004b00:	74 25                	je     c0004b27 <get_fileinfo+0x1ac>
c0004b02:	66 83 f8 2e          	cmp    ax,0x2e
c0004b06:	74 16                	je     c0004b1e <get_fileinfo+0x1a3>
c0004b08:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0b:	66 83 ff 19          	cmp    di,0x19
c0004b0f:	77 0f                	ja     c0004b20 <get_fileinfo+0x1a5>
c0004b11:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b14:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b17:	74 07                	je     c0004b20 <get_fileinfo+0x1a5>
c0004b19:	83 c0 20             	add    eax,0x20
c0004b1c:	eb 02                	jmp    c0004b20 <get_fileinfo+0x1a5>
c0004b1e:	b1 10                	mov    cl,0x10
c0004b20:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b24:	42                   	inc    edx
c0004b25:	eb d1                	jmp    c0004af8 <get_fileinfo+0x17d>
c0004b27:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b2f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b33:	75 04                	jne    c0004b39 <get_fileinfo+0x1be>
c0004b35:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b39:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b3f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b42:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b45:	83 c0 1c             	add    eax,0x1c
c0004b48:	e8 c1 ce ff ff       	call   c0001a0e <ld_dword>
c0004b4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b54:	89 03                	mov    DWORD PTR [ebx],eax
c0004b56:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b59:	83 c0 16             	add    eax,0x16
c0004b5c:	e8 a0 ce ff ff       	call   c0001a01 <ld_word>
c0004b61:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b65:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b68:	83 c0 18             	add    eax,0x18
c0004b6b:	e8 91 ce ff ff       	call   c0001a01 <ld_word>
c0004b70:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b74:	83 c4 1c             	add    esp,0x1c
c0004b77:	5b                   	pop    ebx
c0004b78:	5e                   	pop    esi
c0004b79:	5f                   	pop    edi
c0004b7a:	5d                   	pop    ebp
c0004b7b:	c3                   	ret    

c0004b7c <ld_clust.isra.0>:
c0004b7c:	56                   	push   esi
c0004b7d:	89 c6                	mov    esi,eax
c0004b7f:	53                   	push   ebx
c0004b80:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b83:	89 d3                	mov    ebx,edx
c0004b85:	e8 77 ce ff ff       	call   c0001a01 <ld_word>
c0004b8a:	0f b7 c8             	movzx  ecx,ax
c0004b8d:	89 f0                	mov    eax,esi
c0004b8f:	3c 03                	cmp    al,0x3
c0004b91:	75 0d                	jne    c0004ba0 <ld_clust.isra.0+0x24>
c0004b93:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b96:	e8 66 ce ff ff       	call   c0001a01 <ld_word>
c0004b9b:	c1 e0 10             	shl    eax,0x10
c0004b9e:	09 c1                	or     ecx,eax
c0004ba0:	89 c8                	mov    eax,ecx
c0004ba2:	5b                   	pop    ebx
c0004ba3:	5e                   	pop    esi
c0004ba4:	c3                   	ret    

c0004ba5 <st_clust.isra.1>:
c0004ba5:	56                   	push   esi
c0004ba6:	89 c6                	mov    esi,eax
c0004ba8:	53                   	push   ebx
c0004ba9:	89 d3                	mov    ebx,edx
c0004bab:	0f b7 d1             	movzx  edx,cx
c0004bae:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb1:	e8 bd ce ff ff       	call   c0001a73 <st_word>
c0004bb6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bb9:	75 0f                	jne    c0004bca <st_clust.isra.1+0x25>
c0004bbb:	c1 e9 10             	shr    ecx,0x10
c0004bbe:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc1:	89 ca                	mov    edx,ecx
c0004bc3:	5b                   	pop    ebx
c0004bc4:	5e                   	pop    esi
c0004bc5:	e9 a9 ce ff ff       	jmp    c0001a73 <st_word>
c0004bca:	5b                   	pop    ebx
c0004bcb:	5e                   	pop    esi
c0004bcc:	c3                   	ret    

c0004bcd <init_alloc_info.isra.2>:
c0004bcd:	56                   	push   esi
c0004bce:	53                   	push   ebx
c0004bcf:	89 c6                	mov    esi,eax
c0004bd1:	89 d3                	mov    ebx,edx
c0004bd3:	51                   	push   ecx
c0004bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd6:	83 c0 34             	add    eax,0x34
c0004bd9:	e8 30 ce ff ff       	call   c0001a0e <ld_dword>
c0004bde:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be3:	83 c0 38             	add    eax,0x38
c0004be6:	e8 3b ce ff ff       	call   c0001a26 <ld_qword>
c0004beb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bee:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bfd:	83 e0 02             	and    eax,0x2
c0004c00:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c03:	5b                   	pop    ebx
c0004c04:	5b                   	pop    ebx
c0004c05:	5e                   	pop    esi
c0004c06:	c3                   	ret    

c0004c07 <follow_path>:
c0004c07:	56                   	push   esi
c0004c08:	53                   	push   ebx
c0004c09:	89 c3                	mov    ebx,eax
c0004c0b:	83 ec 14             	sub    esp,0x14
c0004c0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c18:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1a:	80 fa 5c             	cmp    dl,0x5c
c0004c1d:	75 07                	jne    c0004c26 <follow_path+0x1f>
c0004c1f:	40                   	inc    eax
c0004c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c24:	eb ee                	jmp    c0004c14 <follow_path+0xd>
c0004c26:	80 fa 2f             	cmp    dl,0x2f
c0004c29:	74 f4                	je     c0004c1f <follow_path+0x18>
c0004c2b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c32:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c39:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3c:	77 52                	ja     c0004c90 <follow_path+0x89>
c0004c3e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c42:	31 d2                	xor    edx,edx
c0004c44:	89 d8                	mov    eax,ebx
c0004c46:	e8 12 e3 ff ff       	call   c0002f5d <dir_sdi>
c0004c4b:	eb 7c                	jmp    c0004cc9 <follow_path+0xc2>
c0004c4d:	89 d8                	mov    eax,ebx
c0004c4f:	e8 6e f2 ff ff       	call   c0003ec2 <dir_find>
c0004c54:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c57:	85 c0                	test   eax,eax
c0004c59:	75 46                	jne    c0004ca1 <follow_path+0x9a>
c0004c5b:	80 e2 04             	and    dl,0x4
c0004c5e:	75 69                	jne    c0004cc9 <follow_path+0xc2>
c0004c60:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c64:	74 5e                	je     c0004cc4 <follow_path+0xbd>
c0004c66:	8a 06                	mov    al,BYTE PTR [esi]
c0004c68:	3c 04                	cmp    al,0x4
c0004c6a:	75 41                	jne    c0004cad <follow_path+0xa6>
c0004c6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c6f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c73:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c76:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c79:	30 c0                	xor    al,al
c0004c7b:	09 d0                	or     eax,edx
c0004c7d:	89 da                	mov    edx,ebx
c0004c7f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c82:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c85:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c88:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8b:	e8 3d ff ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0004c90:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c94:	89 d8                	mov    eax,ebx
c0004c96:	e8 a9 ed ff ff       	call   c0003a44 <create_name>
c0004c9b:	85 c0                	test   eax,eax
c0004c9d:	74 ae                	je     c0004c4d <follow_path+0x46>
c0004c9f:	eb 28                	jmp    c0004cc9 <follow_path+0xc2>
c0004ca1:	83 f8 04             	cmp    eax,0x4
c0004ca4:	75 23                	jne    c0004cc9 <follow_path+0xc2>
c0004ca6:	80 e2 04             	and    dl,0x4
c0004ca9:	74 19                	je     c0004cc4 <follow_path+0xbd>
c0004cab:	eb 1c                	jmp    c0004cc9 <follow_path+0xc2>
c0004cad:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cba:	e8 bd fe ff ff       	call   c0004b7c <ld_clust.isra.0>
c0004cbf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc2:	eb cc                	jmp    c0004c90 <follow_path+0x89>
c0004cc4:	b8 05 00 00 00       	mov    eax,0x5
c0004cc9:	83 c4 14             	add    esp,0x14
c0004ccc:	5b                   	pop    ebx
c0004ccd:	5e                   	pop    esi
c0004cce:	c3                   	ret    

c0004ccf <f_mount>:
c0004ccf:	53                   	push   ebx
c0004cd0:	83 ec 18             	sub    esp,0x18
c0004cd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce3:	e8 fb d2 ff ff       	call   c0001fe3 <get_ldnumber>
c0004ce8:	89 c2                	mov    edx,eax
c0004cea:	b8 0b 00 00 00       	mov    eax,0xb
c0004cef:	85 d2                	test   edx,edx
c0004cf1:	78 39                	js     c0004d2c <f_mount+0x5d>
c0004cf3:	8b 04 95 e0 b7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4820]
c0004cfa:	85 c0                	test   eax,eax
c0004cfc:	74 03                	je     c0004d01 <f_mount+0x32>
c0004cfe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d05:	85 c0                	test   eax,eax
c0004d07:	74 03                	je     c0004d0c <f_mount+0x3d>
c0004d09:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d10:	89 04 95 e0 b7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4820],eax
c0004d17:	31 c0                	xor    eax,eax
c0004d19:	84 db                	test   bl,bl
c0004d1b:	74 0f                	je     c0004d2c <f_mount+0x5d>
c0004d1d:	31 c9                	xor    ecx,ecx
c0004d1f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d23:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d27:	e8 65 d7 ff ff       	call   c0002491 <mount_volume>
c0004d2c:	83 c4 18             	add    esp,0x18
c0004d2f:	5b                   	pop    ebx
c0004d30:	c3                   	ret    

c0004d31 <f_open>:
c0004d31:	55                   	push   ebp
c0004d32:	bd 09 00 00 00       	mov    ebp,0x9
c0004d37:	57                   	push   edi
c0004d38:	56                   	push   esi
c0004d39:	53                   	push   ebx
c0004d3a:	83 ec 7c             	sub    esp,0x7c
c0004d3d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d44:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4b:	85 db                	test   ebx,ebx
c0004d4d:	0f 84 10 04 00 00    	je     c0005163 <f_open+0x432>
c0004d53:	89 fe                	mov    esi,edi
c0004d55:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d59:	83 e6 3f             	and    esi,0x3f
c0004d5c:	89 f0                	mov    eax,esi
c0004d5e:	0f b6 c8             	movzx  ecx,al
c0004d61:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d68:	e8 24 d7 ff ff       	call   c0002491 <mount_volume>
c0004d6d:	89 c5                	mov    ebp,eax
c0004d6f:	85 c0                	test   eax,eax
c0004d71:	0f 85 e6 03 00 00    	jne    c000515d <f_open+0x42c>
c0004d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d80:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d84:	83 ec 0c             	sub    esp,0xc
c0004d87:	68 60 04 00 00       	push   0x460
c0004d8c:	e8 a3 34 00 00       	call   c0008234 <ff_memalloc>
c0004d91:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d95:	83 c4 10             	add    esp,0x10
c0004d98:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9d:	0f 84 c0 03 00 00    	je     c0005163 <f_open+0x432>
c0004da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dab:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dbe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc2:	e8 40 fe ff ff       	call   c0004c07 <follow_path>
c0004dc7:	89 c5                	mov    ebp,eax
c0004dc9:	85 c0                	test   eax,eax
c0004dcb:	75 0c                	jne    c0004dd9 <f_open+0xa8>
c0004dcd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd2:	79 05                	jns    c0004dd9 <f_open+0xa8>
c0004dd4:	bd 06 00 00 00       	mov    ebp,0x6
c0004dd9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004ddf:	0f 84 84 01 00 00    	je     c0004f69 <f_open+0x238>
c0004de5:	85 ed                	test   ebp,ebp
c0004de7:	74 20                	je     c0004e09 <f_open+0xd8>
c0004de9:	83 fd 04             	cmp    ebp,0x4
c0004dec:	0f 85 58 03 00 00    	jne    c000514a <f_open+0x419>
c0004df2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df6:	83 ce 08             	or     esi,0x8
c0004df9:	e8 8a f2 ff ff       	call   c0004088 <dir_register>
c0004dfe:	89 c5                	mov    ebp,eax
c0004e00:	85 c0                	test   eax,eax
c0004e02:	74 2f                	je     c0004e33 <f_open+0x102>
c0004e04:	e9 41 03 00 00       	jmp    c000514a <f_open+0x419>
c0004e09:	bd 07 00 00 00       	mov    ebp,0x7
c0004e0e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e13:	0f 85 31 03 00 00    	jne    c000514a <f_open+0x419>
c0004e19:	bd 08 00 00 00       	mov    ebp,0x8
c0004e1e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e24:	0f 85 20 03 00 00    	jne    c000514a <f_open+0x419>
c0004e2a:	83 e7 08             	and    edi,0x8
c0004e2d:	0f 84 65 01 00 00    	je     c0004f98 <f_open+0x267>
c0004e33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e37:	8a 02                	mov    al,BYTE PTR [edx]
c0004e39:	3c 04                	cmp    al,0x4
c0004e3b:	0f 85 97 00 00 00    	jne    c0004ed8 <f_open+0x1a7>
c0004e41:	8d 42 10             	lea    eax,[edx+0x10]
c0004e44:	89 13                	mov    DWORD PTR [ebx],edx
c0004e46:	89 da                	mov    edx,ebx
c0004e48:	e8 80 fd ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0004e4d:	31 d2                	xor    edx,edx
c0004e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e53:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e58:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5b:	83 c0 02             	add    eax,0x2
c0004e5e:	e8 32 cc ff ff       	call   c0001a95 <mem_set>
c0004e63:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e71:	83 c0 26             	add    eax,0x26
c0004e74:	e8 1c cc ff ff       	call   c0001a95 <mem_set>
c0004e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e80:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e84:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e89:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8c:	83 c0 08             	add    eax,0x8
c0004e8f:	e8 e3 cb ff ff       	call   c0001a77 <st_dword>
c0004e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9b:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea3:	e8 b7 ea ff ff       	call   c000395f <store_xdir>
c0004ea8:	89 c5                	mov    ebp,eax
c0004eaa:	85 c0                	test   eax,eax
c0004eac:	0f 85 98 02 00 00    	jne    c000514a <f_open+0x419>
c0004eb2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb5:	85 d2                	test   edx,edx
c0004eb7:	0f 84 db 00 00 00    	je     c0004f98 <f_open+0x267>
c0004ebd:	31 c9                	xor    ecx,ecx
c0004ebf:	89 d8                	mov    eax,ebx
c0004ec1:	e8 8e e3 ff ff       	call   c0003254 <remove_chain>
c0004ec6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eca:	89 c5                	mov    ebp,eax
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	48                   	dec    eax
c0004ed0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed3:	e9 b8 00 00 00       	jmp    c0004f90 <f_open+0x25f>
c0004ed8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004edc:	89 ea                	mov    edx,ebp
c0004ede:	e8 99 fc ff ff       	call   c0004b7c <ld_clust.isra.0>
c0004ee3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ee8:	89 c7                	mov    edi,eax
c0004eea:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eed:	e8 85 cb ff ff       	call   c0001a77 <st_dword>
c0004ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef6:	31 c9                	xor    ecx,ecx
c0004ef8:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f00:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f04:	e8 9c fc ff ff       	call   c0004ba5 <st_clust.isra.1>
c0004f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0d:	31 d2                	xor    edx,edx
c0004f0f:	83 c0 1c             	add    eax,0x1c
c0004f12:	e8 60 cb ff ff       	call   c0001a77 <st_dword>
c0004f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1b:	85 ff                	test   edi,edi
c0004f1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f21:	74 75                	je     c0004f98 <f_open+0x267>
c0004f23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f27:	31 c9                	xor    ecx,ecx
c0004f29:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f37:	89 fa                	mov    edx,edi
c0004f39:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3d:	e8 12 e3 ff ff       	call   c0003254 <remove_chain>
c0004f42:	89 c5                	mov    ebp,eax
c0004f44:	85 c0                	test   eax,eax
c0004f46:	0f 85 fe 01 00 00    	jne    c000514a <f_open+0x419>
c0004f4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f58:	4f                   	dec    edi
c0004f59:	e8 81 d2 ff ff       	call   c00021df <move_window>
c0004f5e:	89 c5                	mov    ebp,eax
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f67:	eb 27                	jmp    c0004f90 <f_open+0x25f>
c0004f69:	85 ed                	test   ebp,ebp
c0004f6b:	0f 85 d9 01 00 00    	jne    c000514a <f_open+0x419>
c0004f71:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f75:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7a:	a8 10                	test   al,0x10
c0004f7c:	0f 85 c8 01 00 00    	jne    c000514a <f_open+0x419>
c0004f82:	83 e7 02             	and    edi,0x2
c0004f85:	74 11                	je     c0004f98 <f_open+0x267>
c0004f87:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8c:	a8 01                	test   al,0x1
c0004f8e:	eb 02                	jmp    c0004f92 <f_open+0x261>
c0004f90:	85 ed                	test   ebp,ebp
c0004f92:	0f 85 b2 01 00 00    	jne    c000514a <f_open+0x419>
c0004f98:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f9e:	74 03                	je     c0004fa3 <f_open+0x272>
c0004fa0:	83 ce 40             	or     esi,0x40
c0004fa3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004faa:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fad:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fba:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbc:	3c 04                	cmp    al,0x4
c0004fbe:	75 2a                	jne    c0004fea <f_open+0x2b9>
c0004fc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fc9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd0:	30 c0                	xor    al,al
c0004fd2:	09 c8                	or     eax,ecx
c0004fd4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fde:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe1:	89 da                	mov    edx,ebx
c0004fe3:	e8 e5 fb ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0004fe8:	eb 1c                	jmp    c0005006 <f_open+0x2d5>
c0004fea:	89 fa                	mov    edx,edi
c0004fec:	e8 8b fb ff ff       	call   c0004b7c <ld_clust.isra.0>
c0004ff1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff4:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff7:	e8 12 ca ff ff       	call   c0001a0e <ld_dword>
c0004ffc:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005003:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005011:	89 03                	mov    DWORD PTR [ebx],eax
c0005013:	31 d2                	xor    edx,edx
c0005015:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005019:	b9 00 02 00 00       	mov    ecx,0x200
c000501e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005022:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005026:	89 f0                	mov    eax,esi
c0005028:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000502f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005032:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005039:	8d 43 50             	lea    eax,[ebx+0x50]
c000503c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005043:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000504e:	e8 42 ca ff ff       	call   c0001a95 <mem_set>
c0005053:	83 e6 20             	and    esi,0x20
c0005056:	75 07                	jne    c000505f <f_open+0x32e>
c0005058:	31 ed                	xor    ebp,ebp
c000505a:	e9 eb 00 00 00       	jmp    c000514a <f_open+0x419>
c000505f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005062:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005065:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005069:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005071:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005075:	74 e1                	je     c0005058 <f_open+0x327>
c0005077:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000507f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005082:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005085:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005089:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005090:	31 ff                	xor    edi,edi
c0005092:	c1 e5 09             	shl    ebp,0x9
c0005095:	89 ee                	mov    esi,ebp
c0005097:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509b:	89 f8                	mov    eax,edi
c000509d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a1:	73 22                	jae    c00050c5 <f_open+0x394>
c00050a3:	89 d8                	mov    eax,ebx
c00050a5:	e8 bd dc ff ff       	call   c0002d67 <get_fat>
c00050aa:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050ae:	89 c2                	mov    edx,eax
c00050b0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b4:	83 f8 01             	cmp    eax,0x1
c00050b7:	76 10                	jbe    c00050c9 <f_open+0x398>
c00050b9:	83 f8 ff             	cmp    eax,0xffffffff
c00050bc:	75 d9                	jne    c0005097 <f_open+0x366>
c00050be:	bd 01 00 00 00       	mov    ebp,0x1
c00050c3:	eb 09                	jmp    c00050ce <f_open+0x39d>
c00050c5:	31 ed                	xor    ebp,ebp
c00050c7:	eb 05                	jmp    c00050ce <f_open+0x39d>
c00050c9:	bd 02 00 00 00       	mov    ebp,0x2
c00050ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d1:	85 ed                	test   ebp,ebp
c00050d3:	75 75                	jne    c000514a <f_open+0x419>
c00050d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050d9:	25 ff 01 00 00       	and    eax,0x1ff
c00050de:	0f 84 74 ff ff ff    	je     c0005058 <f_open+0x327>
c00050e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050e8:	bd 02 00 00 00       	mov    ebp,0x2
c00050ed:	89 c8                	mov    eax,ecx
c00050ef:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f3:	e8 a2 cb ff ff       	call   c0001c9a <clst2sect>
c00050f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fc:	89 d7                	mov    edi,edx
c00050fe:	09 c7                	or     edi,eax
c0005100:	74 48                	je     c000514a <f_open+0x419>
c0005102:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005106:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005112:	0f ac fe 09          	shrd   esi,edi,0x9
c0005116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000511e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005121:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005125:	83 ec 0c             	sub    esp,0xc
c0005128:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512b:	6a 01                	push   0x1
c000512d:	52                   	push   edx
c000512e:	50                   	push   eax
c000512f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005133:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005137:	50                   	push   eax
c0005138:	e8 79 c8 ff ff       	call   c00019b6 <disk_read>
c000513d:	83 c4 20             	add    esp,0x20
c0005140:	85 c0                	test   eax,eax
c0005142:	0f 95 c0             	setne  al
c0005145:	0f b6 c0             	movzx  eax,al
c0005148:	89 c5                	mov    ebp,eax
c000514a:	83 ec 0c             	sub    esp,0xc
c000514d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005151:	e8 f4 30 00 00       	call   c000824a <ff_memfree>
c0005156:	83 c4 10             	add    esp,0x10
c0005159:	85 ed                	test   ebp,ebp
c000515b:	74 06                	je     c0005163 <f_open+0x432>
c000515d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005163:	83 c4 7c             	add    esp,0x7c
c0005166:	89 e8                	mov    eax,ebp
c0005168:	5b                   	pop    ebx
c0005169:	5e                   	pop    esi
c000516a:	5f                   	pop    edi
c000516b:	5d                   	pop    ebp
c000516c:	c3                   	ret    

c000516d <f_read>:
c000516d:	55                   	push   ebp
c000516e:	57                   	push   edi
c000516f:	56                   	push   esi
c0005170:	53                   	push   ebx
c0005171:	83 ec 2c             	sub    esp,0x2c
c0005174:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005178:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005182:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005186:	89 d8                	mov    eax,ebx
c0005188:	e8 77 cf ff ff       	call   c0002104 <validate>
c000518d:	89 c5                	mov    ebp,eax
c000518f:	85 c0                	test   eax,eax
c0005191:	0f 85 4c 02 00 00    	jne    c00053e3 <f_read+0x276>
c0005197:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519b:	85 ed                	test   ebp,ebp
c000519d:	0f 85 40 02 00 00    	jne    c00053e3 <f_read+0x276>
c00051a3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a7:	0f 84 31 02 00 00    	je     c00053de <f_read+0x271>
c00051ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b6:	bf 00 00 00 00       	mov    edi,0x0
c00051bb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051be:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c2:	89 d1                	mov    ecx,edx
c00051c4:	19 f9                	sbb    ecx,edi
c00051c6:	0f 83 cf 00 00 00    	jae    c000529b <f_read+0x12e>
c00051cc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d0:	e9 c6 00 00 00       	jmp    c000529b <f_read+0x12e>
c00051d5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051d8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051db:	89 d0                	mov    eax,edx
c00051dd:	25 ff 01 00 00       	and    eax,0x1ff
c00051e2:	0f 85 c9 01 00 00    	jne    c00053b1 <f_read+0x244>
c00051e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ec:	89 d6                	mov    esi,edx
c00051ee:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f2:	89 cf                	mov    edi,ecx
c00051f4:	48                   	dec    eax
c00051f5:	0f ac fe 09          	shrd   esi,edi,0x9
c00051f9:	21 f0                	and    eax,esi
c00051fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051ff:	0f 84 a6 00 00 00    	je     c00052ab <f_read+0x13e>
c0005205:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005209:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520c:	89 c8                	mov    eax,ecx
c000520e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005211:	e8 84 ca ff ff       	call   c0001c9a <clst2sect>
c0005216:	89 d7                	mov    edi,edx
c0005218:	09 c7                	or     edi,eax
c000521a:	0f 84 b4 00 00 00    	je     c00052d4 <f_read+0x167>
c0005220:	31 ff                	xor    edi,edi
c0005222:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005226:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005229:	01 c6                	add    esi,eax
c000522b:	11 d7                	adc    edi,edx
c000522d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005235:	0f 86 fd 00 00 00    	jbe    c0005338 <f_read+0x1cb>
c000523b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000523f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005243:	c1 e8 09             	shr    eax,0x9
c0005246:	89 04 24             	mov    DWORD PTR [esp],eax
c0005249:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005250:	39 c2                	cmp    edx,eax
c0005252:	76 07                	jbe    c000525b <f_read+0xee>
c0005254:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005258:	89 04 24             	mov    DWORD PTR [esp],eax
c000525b:	83 ec 0c             	sub    esp,0xc
c000525e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005262:	57                   	push   edi
c0005263:	56                   	push   esi
c0005264:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005268:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526c:	50                   	push   eax
c000526d:	e8 44 c7 ff ff       	call   c00019b6 <disk_read>
c0005272:	83 c4 20             	add    esp,0x20
c0005275:	85 c0                	test   eax,eax
c0005277:	75 6e                	jne    c00052e7 <f_read+0x17a>
c0005279:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527d:	78 7e                	js     c00052fd <f_read+0x190>
c000527f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005282:	c1 e6 09             	shl    esi,0x9
c0005285:	31 ff                	xor    edi,edi
c0005287:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000528f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005293:	01 30                	add    DWORD PTR [eax],esi
c0005295:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005298:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a0:	0f 85 2f ff ff ff    	jne    c00051d5 <f_read+0x68>
c00052a6:	e9 38 01 00 00       	jmp    c00053e3 <f_read+0x276>
c00052ab:	89 c8                	mov    eax,ecx
c00052ad:	09 d0                	or     eax,edx
c00052af:	75 05                	jne    c00052b6 <f_read+0x149>
c00052b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b4:	eb 19                	jmp    c00052cf <f_read+0x162>
c00052b6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ba:	74 09                	je     c00052c5 <f_read+0x158>
c00052bc:	89 d8                	mov    eax,ebx
c00052be:	e8 f8 c9 ff ff       	call   c0001cbb <clmt_clust>
c00052c3:	eb 0a                	jmp    c00052cf <f_read+0x162>
c00052c5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052c8:	89 d8                	mov    eax,ebx
c00052ca:	e8 98 da ff ff       	call   c0002d67 <get_fat>
c00052cf:	83 f8 01             	cmp    eax,0x1
c00052d2:	77 0e                	ja     c00052e2 <f_read+0x175>
c00052d4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052d8:	bd 02 00 00 00       	mov    ebp,0x2
c00052dd:	e9 01 01 00 00       	jmp    c00053e3 <f_read+0x276>
c00052e2:	83 f8 ff             	cmp    eax,0xffffffff
c00052e5:	75 0e                	jne    c00052f5 <f_read+0x188>
c00052e7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052eb:	bd 01 00 00 00       	mov    ebp,0x1
c00052f0:	e9 ee 00 00 00       	jmp    c00053e3 <f_read+0x276>
c00052f5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052f8:	e9 08 ff ff ff       	jmp    c0005205 <f_read+0x98>
c00052fd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005300:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005303:	29 f0                	sub    eax,esi
c0005305:	19 fa                	sbb    edx,edi
c0005307:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530a:	89 d7                	mov    edi,edx
c000530c:	ba 00 00 00 00       	mov    edx,0x0
c0005311:	89 f9                	mov    ecx,edi
c0005313:	19 d1                	sbb    ecx,edx
c0005315:	0f 83 64 ff ff ff    	jae    c000527f <f_read+0x112>
c000531b:	89 c7                	mov    edi,eax
c000531d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005320:	c1 e7 09             	shl    edi,0x9
c0005323:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005327:	b9 00 02 00 00       	mov    ecx,0x200
c000532c:	01 f8                	add    eax,edi
c000532e:	e8 4d c7 ff ff       	call   c0001a80 <mem_cpy>
c0005333:	e9 47 ff ff ff       	jmp    c000527f <f_read+0x112>
c0005338:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000533e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005341:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005345:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005349:	75 05                	jne    c0005350 <f_read+0x1e3>
c000534b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000534e:	74 5b                	je     c00053ab <f_read+0x23e>
c0005350:	8d 43 50             	lea    eax,[ebx+0x50]
c0005353:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005357:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535b:	79 2a                	jns    c0005387 <f_read+0x21a>
c000535d:	83 ec 0c             	sub    esp,0xc
c0005360:	6a 01                	push   0x1
c0005362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000536e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005372:	50                   	push   eax
c0005373:	e8 54 c6 ff ff       	call   c00019cc <disk_write>
c0005378:	83 c4 20             	add    esp,0x20
c000537b:	85 c0                	test   eax,eax
c000537d:	0f 85 64 ff ff ff    	jne    c00052e7 <f_read+0x17a>
c0005383:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005387:	83 ec 0c             	sub    esp,0xc
c000538a:	6a 01                	push   0x1
c000538c:	57                   	push   edi
c000538d:	56                   	push   esi
c000538e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005392:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005396:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539a:	50                   	push   eax
c000539b:	e8 16 c6 ff ff       	call   c00019b6 <disk_read>
c00053a0:	83 c4 20             	add    esp,0x20
c00053a3:	85 c0                	test   eax,eax
c00053a5:	0f 85 3c ff ff ff    	jne    c00052e7 <f_read+0x17a>
c00053ab:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053ae:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b4:	ba 00 02 00 00       	mov    edx,0x200
c00053b9:	25 ff 01 00 00       	and    eax,0x1ff
c00053be:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c2:	29 c2                	sub    edx,eax
c00053c4:	39 d6                	cmp    esi,edx
c00053c6:	76 02                	jbe    c00053ca <f_read+0x25d>
c00053c8:	89 d6                	mov    esi,edx
c00053ca:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053ce:	89 f1                	mov    ecx,esi
c00053d0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d4:	e8 a7 c6 ff ff       	call   c0001a80 <mem_cpy>
c00053d9:	e9 a7 fe ff ff       	jmp    c0005285 <f_read+0x118>
c00053de:	bd 07 00 00 00       	mov    ebp,0x7
c00053e3:	83 c4 2c             	add    esp,0x2c
c00053e6:	89 e8                	mov    eax,ebp
c00053e8:	5b                   	pop    ebx
c00053e9:	5e                   	pop    esi
c00053ea:	5f                   	pop    edi
c00053eb:	5d                   	pop    ebp
c00053ec:	c3                   	ret    

c00053ed <f_write>:
c00053ed:	55                   	push   ebp
c00053ee:	57                   	push   edi
c00053ef:	56                   	push   esi
c00053f0:	53                   	push   ebx
c00053f1:	83 ec 2c             	sub    esp,0x2c
c00053f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005402:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005406:	89 d8                	mov    eax,ebx
c0005408:	e8 f7 cc ff ff       	call   c0002104 <validate>
c000540d:	89 c5                	mov    ebp,eax
c000540f:	85 c0                	test   eax,eax
c0005411:	0f 85 86 02 00 00    	jne    c000569d <f_write+0x2b0>
c0005417:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541b:	85 ed                	test   ebp,ebp
c000541d:	0f 85 7a 02 00 00    	jne    c000569d <f_write+0x2b0>
c0005423:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005427:	0f 84 6b 02 00 00    	je     c0005698 <f_write+0x2ab>
c000542d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005431:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005434:	0f 84 43 01 00 00    	je     c000557d <f_write+0x190>
c000543a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543d:	89 c1                	mov    ecx,eax
c000543f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005443:	0f 83 34 01 00 00    	jae    c000557d <f_write+0x190>
c0005449:	f7 d0                	not    eax
c000544b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000544f:	e9 29 01 00 00       	jmp    c000557d <f_write+0x190>
c0005454:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005457:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545a:	89 d0                	mov    eax,edx
c000545c:	25 ff 01 00 00       	and    eax,0x1ff
c0005461:	0f 85 00 02 00 00    	jne    c0005667 <f_write+0x27a>
c0005467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546b:	89 d6                	mov    esi,edx
c000546d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005471:	89 cf                	mov    edi,ecx
c0005473:	48                   	dec    eax
c0005474:	0f ac fe 09          	shrd   esi,edi,0x9
c0005478:	21 f0                	and    eax,esi
c000547a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000547e:	0f 84 06 01 00 00    	je     c000558a <f_write+0x19d>
c0005484:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005488:	0f 88 6e 01 00 00    	js     c00055fc <f_write+0x20f>
c000548e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005492:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005495:	89 c8                	mov    eax,ecx
c0005497:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549b:	e8 fa c7 ff ff       	call   c0001c9a <clst2sect>
c00054a0:	89 d1                	mov    ecx,edx
c00054a2:	09 c1                	or     ecx,eax
c00054a4:	0f 84 1c 01 00 00    	je     c00055c6 <f_write+0x1d9>
c00054aa:	31 ff                	xor    edi,edi
c00054ac:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b4:	01 c6                	add    esi,eax
c00054b6:	11 d7                	adc    edi,edx
c00054b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c0:	0f 86 63 01 00 00    	jbe    c0005629 <f_write+0x23c>
c00054c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054d9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054dd:	39 c2                	cmp    edx,eax
c00054df:	76 08                	jbe    c00054e9 <f_write+0xfc>
c00054e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e9:	83 ec 0c             	sub    esp,0xc
c00054ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f0:	57                   	push   edi
c00054f1:	56                   	push   esi
c00054f2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fa:	50                   	push   eax
c00054fb:	e8 cc c4 ff ff       	call   c00019cc <disk_write>
c0005500:	83 c4 20             	add    esp,0x20
c0005503:	85 c0                	test   eax,eax
c0005505:	0f 85 ce 00 00 00    	jne    c00055d9 <f_write+0x1ec>
c000550b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000550e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005511:	29 f0                	sub    eax,esi
c0005513:	19 fa                	sbb    edx,edi
c0005515:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005519:	89 d7                	mov    edi,edx
c000551b:	ba 00 00 00 00       	mov    edx,0x0
c0005520:	89 f9                	mov    ecx,edi
c0005522:	19 d1                	sbb    ecx,edx
c0005524:	73 1c                	jae    c0005542 <f_write+0x155>
c0005526:	89 c7                	mov    edi,eax
c0005528:	b9 00 02 00 00       	mov    ecx,0x200
c000552d:	c1 e7 09             	shl    edi,0x9
c0005530:	8d 43 50             	lea    eax,[ebx+0x50]
c0005533:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005537:	89 fa                	mov    edx,edi
c0005539:	e8 42 c5 ff ff       	call   c0001a80 <mem_cpy>
c000553e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005542:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005546:	c1 e6 09             	shl    esi,0x9
c0005549:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554d:	31 ff                	xor    edi,edi
c000554f:	01 30                	add    DWORD PTR [eax],esi
c0005551:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005555:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005559:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000555f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005562:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005565:	89 c1                	mov    ecx,eax
c0005567:	39 f2                	cmp    edx,esi
c0005569:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000556f:	19 f9                	sbb    ecx,edi
c0005571:	73 04                	jae    c0005577 <f_write+0x18a>
c0005573:	89 f2                	mov    edx,esi
c0005575:	89 f8                	mov    eax,edi
c0005577:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005582:	0f 85 cc fe ff ff    	jne    c0005454 <f_write+0x67>
c0005588:	eb 2e                	jmp    c00055b8 <f_write+0x1cb>
c000558a:	89 c8                	mov    eax,ecx
c000558c:	09 d0                	or     eax,edx
c000558e:	75 0b                	jne    c000559b <f_write+0x1ae>
c0005590:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005593:	31 d2                	xor    edx,edx
c0005595:	85 c0                	test   eax,eax
c0005597:	75 28                	jne    c00055c1 <f_write+0x1d4>
c0005599:	eb 12                	jmp    c00055ad <f_write+0x1c0>
c000559b:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000559f:	74 09                	je     c00055aa <f_write+0x1bd>
c00055a1:	89 d8                	mov    eax,ebx
c00055a3:	e8 13 c7 ff ff       	call   c0001cbb <clmt_clust>
c00055a8:	eb 0a                	jmp    c00055b4 <f_write+0x1c7>
c00055aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ad:	89 d8                	mov    eax,ebx
c00055af:	e8 a1 da ff ff       	call   c0003055 <create_chain>
c00055b4:	85 c0                	test   eax,eax
c00055b6:	75 09                	jne    c00055c1 <f_write+0x1d4>
c00055b8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055bc:	e9 dc 00 00 00       	jmp    c000569d <f_write+0x2b0>
c00055c1:	83 f8 01             	cmp    eax,0x1
c00055c4:	75 0e                	jne    c00055d4 <f_write+0x1e7>
c00055c6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055ca:	bd 02 00 00 00       	mov    ebp,0x2
c00055cf:	e9 c9 00 00 00       	jmp    c000569d <f_write+0x2b0>
c00055d4:	83 f8 ff             	cmp    eax,0xffffffff
c00055d7:	75 0e                	jne    c00055e7 <f_write+0x1fa>
c00055d9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055dd:	bd 01 00 00 00       	mov    ebp,0x1
c00055e2:	e9 b6 00 00 00       	jmp    c000569d <f_write+0x2b0>
c00055e7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055ea:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055ee:	0f 85 90 fe ff ff    	jne    c0005484 <f_write+0x97>
c00055f4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f7:	e9 88 fe ff ff       	jmp    c0005484 <f_write+0x97>
c00055fc:	83 ec 0c             	sub    esp,0xc
c00055ff:	8d 43 50             	lea    eax,[ebx+0x50]
c0005602:	6a 01                	push   0x1
c0005604:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005607:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560a:	50                   	push   eax
c000560b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000560f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005613:	50                   	push   eax
c0005614:	e8 b3 c3 ff ff       	call   c00019cc <disk_write>
c0005619:	83 c4 20             	add    esp,0x20
c000561c:	85 c0                	test   eax,eax
c000561e:	75 b9                	jne    c00055d9 <f_write+0x1ec>
c0005620:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005624:	e9 65 fe ff ff       	jmp    c000548e <f_write+0xa1>
c0005629:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562c:	75 05                	jne    c0005633 <f_write+0x246>
c000562e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005631:	74 2e                	je     c0005661 <f_write+0x274>
c0005633:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005636:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005639:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000563f:	73 20                	jae    c0005661 <f_write+0x274>
c0005641:	83 ec 0c             	sub    esp,0xc
c0005644:	8d 43 50             	lea    eax,[ebx+0x50]
c0005647:	6a 01                	push   0x1
c0005649:	57                   	push   edi
c000564a:	56                   	push   esi
c000564b:	50                   	push   eax
c000564c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005650:	50                   	push   eax
c0005651:	e8 60 c3 ff ff       	call   c00019b6 <disk_read>
c0005656:	83 c4 20             	add    esp,0x20
c0005659:	85 c0                	test   eax,eax
c000565b:	0f 85 78 ff ff ff    	jne    c00055d9 <f_write+0x1ec>
c0005661:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005664:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005667:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566a:	ba 00 02 00 00       	mov    edx,0x200
c000566f:	25 ff 01 00 00       	and    eax,0x1ff
c0005674:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005678:	29 c2                	sub    edx,eax
c000567a:	39 d6                	cmp    esi,edx
c000567c:	76 02                	jbe    c0005680 <f_write+0x293>
c000567e:	89 d6                	mov    esi,edx
c0005680:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005684:	89 f1                	mov    ecx,esi
c0005686:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568a:	e8 f1 c3 ff ff       	call   c0001a80 <mem_cpy>
c000568f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005693:	e9 b1 fe ff ff       	jmp    c0005549 <f_write+0x15c>
c0005698:	bd 07 00 00 00       	mov    ebp,0x7
c000569d:	83 c4 2c             	add    esp,0x2c
c00056a0:	89 e8                	mov    eax,ebp
c00056a2:	5b                   	pop    ebx
c00056a3:	5e                   	pop    esi
c00056a4:	5f                   	pop    edi
c00056a5:	5d                   	pop    ebp
c00056a6:	c3                   	ret    

c00056a7 <f_sync>:
c00056a7:	56                   	push   esi
c00056a8:	53                   	push   ebx
c00056a9:	83 ec 64             	sub    esp,0x64
c00056ac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b4:	89 d8                	mov    eax,ebx
c00056b6:	e8 49 ca ff ff       	call   c0002104 <validate>
c00056bb:	85 c0                	test   eax,eax
c00056bd:	0f 85 ba 01 00 00    	jne    c000587d <f_sync+0x1d6>
c00056c3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c6:	f6 c2 40             	test   dl,0x40
c00056c9:	0f 84 ae 01 00 00    	je     c000587d <f_sync+0x1d6>
c00056cf:	84 d2                	test   dl,dl
c00056d1:	79 33                	jns    c0005706 <f_sync+0x5f>
c00056d3:	83 ec 0c             	sub    esp,0xc
c00056d6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056d9:	6a 01                	push   0x1
c00056db:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056de:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e1:	50                   	push   eax
c00056e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056ea:	50                   	push   eax
c00056eb:	e8 dc c2 ff ff       	call   c00019cc <disk_write>
c00056f0:	83 c4 20             	add    esp,0x20
c00056f3:	89 c2                	mov    edx,eax
c00056f5:	b8 01 00 00 00       	mov    eax,0x1
c00056fa:	85 d2                	test   edx,edx
c00056fc:	0f 85 7b 01 00 00    	jne    c000587d <f_sync+0x1d6>
c0005702:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570d:	0f 85 11 01 00 00    	jne    c0005824 <f_sync+0x17d>
c0005713:	89 d8                	mov    eax,ebx
c0005715:	e8 13 d6 ff ff       	call   c0002d2d <fill_first_frag>
c000571a:	85 c0                	test   eax,eax
c000571c:	0f 85 5b 01 00 00    	jne    c000587d <f_sync+0x1d6>
c0005722:	83 c9 ff             	or     ecx,0xffffffff
c0005725:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005728:	89 d8                	mov    eax,ebx
c000572a:	e8 c9 d5 ff ff       	call   c0002cf8 <fill_last_frag>
c000572f:	85 c0                	test   eax,eax
c0005731:	0f 85 46 01 00 00    	jne    c000587d <f_sync+0x1d6>
c0005737:	83 ec 0c             	sub    esp,0xc
c000573a:	68 60 04 00 00       	push   0x460
c000573f:	e8 f0 2a 00 00       	call   c0008234 <ff_memalloc>
c0005744:	83 c4 10             	add    esp,0x10
c0005747:	89 c6                	mov    esi,eax
c0005749:	b8 11 00 00 00       	mov    eax,0x11
c000574e:	85 f6                	test   esi,esi
c0005750:	0f 84 27 01 00 00    	je     c000587d <f_sync+0x1d6>
c0005756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005760:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005763:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005766:	89 da                	mov    edx,ebx
c0005768:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576c:	e8 af df ff ff       	call   c0003720 <load_obj_xdir>
c0005771:	85 c0                	test   eax,eax
c0005773:	0f 85 95 00 00 00    	jne    c000580e <f_sync+0x167>
c0005779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005780:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005784:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005787:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578a:	83 ca 01             	or     edx,0x1
c000578d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005790:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005793:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005796:	83 c0 34             	add    eax,0x34
c0005799:	e8 d9 c2 ff ff       	call   c0001a77 <st_dword>
c000579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ab:	83 c0 38             	add    eax,0x38
c00057ae:	e8 c7 c2 ff ff       	call   c0001a7a <st_qword>
c00057b3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c0:	83 c0 28             	add    eax,0x28
c00057c3:	e8 b2 c2 ff ff       	call   c0001a7a <st_qword>
c00057c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057cc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d4:	83 c0 0c             	add    eax,0xc
c00057d7:	e8 9b c2 ff ff       	call   c0001a77 <st_dword>
c00057dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e7:	31 d2                	xor    edx,edx
c00057e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ec:	83 c0 10             	add    eax,0x10
c00057ef:	e8 83 c2 ff ff       	call   c0001a77 <st_dword>
c00057f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057f8:	e8 62 e1 ff ff       	call   c000395f <store_xdir>
c00057fd:	85 c0                	test   eax,eax
c00057ff:	75 0d                	jne    c000580e <f_sync+0x167>
c0005801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005805:	e8 00 eb ff ff       	call   c000430a <sync_fs>
c000580a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005812:	83 ec 0c             	sub    esp,0xc
c0005815:	56                   	push   esi
c0005816:	e8 2f 2a 00 00       	call   c000824a <ff_memfree>
c000581b:	83 c4 10             	add    esp,0x10
c000581e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005822:	eb 59                	jmp    c000587d <f_sync+0x1d6>
c0005824:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005827:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582a:	e8 b0 c9 ff ff       	call   c00021df <move_window>
c000582f:	85 c0                	test   eax,eax
c0005831:	75 4a                	jne    c000587d <f_sync+0x1d6>
c0005833:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005836:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583a:	89 f2                	mov    edx,esi
c000583c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000583f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005841:	e8 5f f3 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0005846:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005849:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584c:	e8 26 c2 ff ff       	call   c0001a77 <st_dword>
c0005851:	8d 46 16             	lea    eax,[esi+0x16]
c0005854:	ba 00 00 21 50       	mov    edx,0x50210000
c0005859:	e8 19 c2 ff ff       	call   c0001a77 <st_dword>
c000585e:	8d 46 12             	lea    eax,[esi+0x12]
c0005861:	31 d2                	xor    edx,edx
c0005863:	e8 0b c2 ff ff       	call   c0001a73 <st_word>
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	e8 91 ea ff ff       	call   c000430a <sync_fs>
c0005879:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587d:	83 c4 64             	add    esp,0x64
c0005880:	5b                   	pop    ebx
c0005881:	5e                   	pop    esi
c0005882:	c3                   	ret    

c0005883 <f_close>:
c0005883:	53                   	push   ebx
c0005884:	83 ec 24             	sub    esp,0x24
c0005887:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588b:	53                   	push   ebx
c000588c:	e8 16 fe ff ff       	call   c00056a7 <f_sync>
c0005891:	83 c4 10             	add    esp,0x10
c0005894:	85 c0                	test   eax,eax
c0005896:	75 15                	jne    c00058ad <f_close+0x2a>
c0005898:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589c:	89 d8                	mov    eax,ebx
c000589e:	e8 61 c8 ff ff       	call   c0002104 <validate>
c00058a3:	85 c0                	test   eax,eax
c00058a5:	75 06                	jne    c00058ad <f_close+0x2a>
c00058a7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ad:	83 c4 18             	add    esp,0x18
c00058b0:	5b                   	pop    ebx
c00058b1:	c3                   	ret    

c00058b2 <f_lseek>:
c00058b2:	55                   	push   ebp
c00058b3:	57                   	push   edi
c00058b4:	56                   	push   esi
c00058b5:	53                   	push   ebx
c00058b6:	83 ec 3c             	sub    esp,0x3c
c00058b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058bd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058cc:	89 d8                	mov    eax,ebx
c00058ce:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d2:	e8 2d c8 ff ff       	call   c0002104 <validate>
c00058d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 7a 04 00 00    	jne    c0005d5d <f_lseek+0x4ab>
c00058e3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 6a 04 00 00    	jne    c0005d5d <f_lseek+0x4ab>
c00058f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fa:	74 0c                	je     c0005908 <f_lseek+0x56>
c00058fc:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00058ff:	85 c0                	test   eax,eax
c0005901:	75 1f                	jne    c0005922 <f_lseek+0x70>
c0005903:	e9 b5 01 00 00       	jmp    c0005abd <f_lseek+0x20b>
c0005908:	83 c9 ff             	or     ecx,0xffffffff
c000590b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000590e:	89 d8                	mov    eax,ebx
c0005910:	e8 e3 d3 ff ff       	call   c0002cf8 <fill_last_frag>
c0005915:	85 c0                	test   eax,eax
c0005917:	74 e3                	je     c00058fc <f_lseek+0x4a>
c0005919:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591d:	e9 3b 04 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c0005922:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005927:	0f 85 ac 00 00 00    	jne    c00059d9 <f_lseek+0x127>
c000592d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005931:	0f 85 a2 00 00 00    	jne    c00059d9 <f_lseek+0x127>
c0005937:	8d 78 04             	lea    edi,[eax+0x4]
c000593a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593d:	8b 00                	mov    eax,DWORD PTR [eax]
c000593f:	be 02 00 00 00       	mov    esi,0x2
c0005944:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005948:	85 ed                	test   ebp,ebp
c000594a:	74 73                	je     c00059bf <f_lseek+0x10d>
c000594c:	89 e9                	mov    ecx,ebp
c000594e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005955:	ff 04 24             	inc    DWORD PTR [esp]
c0005958:	89 ca                	mov    edx,ecx
c000595a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 02 d4 ff ff       	call   c0002d67 <get_fat>
c0005965:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005969:	83 f8 01             	cmp    eax,0x1
c000596c:	77 11                	ja     c000597f <f_lseek+0xcd>
c000596e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005972:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597a:	e9 de 03 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c000597f:	83 f8 ff             	cmp    eax,0xffffffff
c0005982:	75 11                	jne    c0005995 <f_lseek+0xe3>
c0005984:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005988:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005990:	e9 c8 03 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c0005995:	8d 51 01             	lea    edx,[ecx+0x1]
c0005998:	89 c1                	mov    ecx,eax
c000599a:	39 c2                	cmp    edx,eax
c000599c:	74 b7                	je     c0005955 <f_lseek+0xa3>
c000599e:	83 c6 02             	add    esi,0x2
c00059a1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a5:	72 0b                	jb     c00059b2 <f_lseek+0x100>
c00059a7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059aa:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ad:	89 0f                	mov    DWORD PTR [edi],ecx
c00059af:	83 c7 08             	add    edi,0x8
c00059b2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059b9:	76 04                	jbe    c00059bf <f_lseek+0x10d>
c00059bb:	89 c5                	mov    ebp,eax
c00059bd:	eb 8d                	jmp    c000594c <f_lseek+0x9a>
c00059bf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c6:	89 30                	mov    DWORD PTR [eax],esi
c00059c8:	0f 87 87 03 00 00    	ja     c0005d55 <f_lseek+0x4a3>
c00059ce:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d4:	e9 84 03 00 00       	jmp    c0005d5d <f_lseek+0x4ab>
c00059d9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059dc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059eb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f6:	73 0f                	jae    c0005a07 <f_lseek+0x155>
c00059f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00059ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a0f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a12:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a19:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1d:	0f 84 3a 03 00 00    	je     c0005d5d <f_lseek+0x4ab>
c0005a23:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a27:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2b:	83 c6 ff             	add    esi,0xffffffff
c0005a2e:	89 d8                	mov    eax,ebx
c0005a30:	83 d7 ff             	adc    edi,0xffffffff
c0005a33:	89 f2                	mov    edx,esi
c0005a35:	89 f9                	mov    ecx,edi
c0005a37:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a3e:	e8 78 c2 ff ff       	call   c0001cbb <clmt_clust>
c0005a43:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a47:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4a:	89 c2                	mov    edx,eax
c0005a4c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a50:	89 c8                	mov    eax,ecx
c0005a52:	e8 43 c2 ff ff       	call   c0001c9a <clst2sect>
c0005a57:	89 d7                	mov    edi,edx
c0005a59:	09 c7                	or     edi,eax
c0005a5b:	0f 84 0d ff ff ff    	je     c000596e <f_lseek+0xbc>
c0005a61:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a65:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6b:	0f 84 ec 02 00 00    	je     c0005d5d <f_lseek+0x4ab>
c0005a71:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a79:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a80:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a84:	4d                   	dec    ebp
c0005a85:	31 ff                	xor    edi,edi
c0005a87:	21 ee                	and    esi,ebp
c0005a89:	01 c6                	add    esi,eax
c0005a8b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a8e:	11 d7                	adc    edi,edx
c0005a90:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a93:	39 fa                	cmp    edx,edi
c0005a95:	75 08                	jne    c0005a9f <f_lseek+0x1ed>
c0005a97:	39 f0                	cmp    eax,esi
c0005a99:	0f 84 be 02 00 00    	je     c0005d5d <f_lseek+0x4ab>
c0005a9f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa6:	0f 89 80 02 00 00    	jns    c0005d2c <f_lseek+0x47a>
c0005aac:	83 ec 0c             	sub    esp,0xc
c0005aaf:	6a 01                	push   0x1
c0005ab1:	52                   	push   edx
c0005ab2:	50                   	push   eax
c0005ab3:	55                   	push   ebp
c0005ab4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ab8:	e9 5a 02 00 00       	jmp    c0005d17 <f_lseek+0x465>
c0005abd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac4:	74 16                	je     c0005adc <f_lseek+0x22a>
c0005ac6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acb:	76 0f                	jbe    c0005adc <f_lseek+0x22a>
c0005acd:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005adc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005adf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae5:	89 c7                	mov    edi,eax
c0005ae7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aeb:	73 0d                	jae    c0005afa <f_lseek+0x248>
c0005aed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af1:	75 07                	jne    c0005afa <f_lseek+0x248>
c0005af3:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005afd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b00:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b04:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b12:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b15:	75 09                	jne    c0005b20 <f_lseek+0x26e>
c0005b17:	31 f6                	xor    esi,esi
c0005b19:	31 ff                	xor    edi,edi
c0005b1b:	e9 af 01 00 00       	jmp    c0005ccf <f_lseek+0x41d>
c0005b20:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b24:	89 d7                	mov    edi,edx
c0005b26:	c1 e1 09             	shl    ecx,0x9
c0005b29:	09 c7                	or     edi,eax
c0005b2b:	89 cd                	mov    ebp,ecx
c0005b2d:	74 6d                	je     c0005b9c <f_lseek+0x2ea>
c0005b2f:	83 c0 ff             	add    eax,0xffffffff
c0005b32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b36:	83 d2 ff             	adc    edx,0xffffffff
c0005b39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b40:	83 c0 ff             	add    eax,0xffffffff
c0005b43:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b47:	83 d2 ff             	adc    edx,0xffffffff
c0005b4a:	31 ff                	xor    edi,edi
c0005b4c:	57                   	push   edi
c0005b4d:	51                   	push   ecx
c0005b4e:	52                   	push   edx
c0005b4f:	50                   	push   eax
c0005b50:	e8 b7 e9 01 00       	call   c002450c <__udivdi3>
c0005b55:	83 c4 10             	add    esp,0x10
c0005b58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b60:	57                   	push   edi
c0005b61:	55                   	push   ebp
c0005b62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6a:	e8 9d e9 01 00       	call   c002450c <__udivdi3>
c0005b6f:	83 c4 10             	add    esp,0x10
c0005b72:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7a:	19 d1                	sbb    ecx,edx
c0005b7c:	72 1e                	jb     c0005b9c <f_lseek+0x2ea>
c0005b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b82:	89 e9                	mov    ecx,ebp
c0005b84:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b87:	f7 d9                	neg    ecx
c0005b89:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b90:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b93:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b96:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9a:	eb 28                	jmp    c0005bc4 <f_lseek+0x312>
c0005b9c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b9f:	85 c0                	test   eax,eax
c0005ba1:	75 1e                	jne    c0005bc1 <f_lseek+0x30f>
c0005ba3:	31 d2                	xor    edx,edx
c0005ba5:	89 d8                	mov    eax,ebx
c0005ba7:	e8 a9 d4 ff ff       	call   c0003055 <create_chain>
c0005bac:	83 f8 01             	cmp    eax,0x1
c0005baf:	0f 84 b9 fd ff ff    	je     c000596e <f_lseek+0xbc>
c0005bb5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bb8:	0f 84 c6 fd ff ff    	je     c0005984 <f_lseek+0xd2>
c0005bbe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc4:	85 c0                	test   eax,eax
c0005bc6:	0f 84 4b ff ff ff    	je     c0005b17 <f_lseek+0x265>
c0005bcc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bd8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bdf:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005be9:	0f 83 9d 00 00 00    	jae    c0005c8c <f_lseek+0x3da>
c0005bef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf7:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfa:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bfe:	01 f2                	add    edx,esi
c0005c00:	11 f9                	adc    ecx,edi
c0005c02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c06:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c10:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c13:	f6 c1 02             	test   cl,0x2
c0005c16:	74 35                	je     c0005c4d <f_lseek+0x39b>
c0005c18:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c1f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c22:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c26:	73 16                	jae    c0005c3e <f_lseek+0x38c>
c0005c28:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c30:	88 ca                	mov    dl,cl
c0005c32:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c35:	83 ca 40             	or     edx,0x40
c0005c38:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c3e:	89 c2                	mov    edx,eax
c0005c40:	89 d8                	mov    eax,ebx
c0005c42:	e8 0e d4 ff ff       	call   c0003055 <create_chain>
c0005c47:	85 c0                	test   eax,eax
c0005c49:	75 0b                	jne    c0005c56 <f_lseek+0x3a4>
c0005c4b:	eb 30                	jmp    c0005c7d <f_lseek+0x3cb>
c0005c4d:	89 c2                	mov    edx,eax
c0005c4f:	89 d8                	mov    eax,ebx
c0005c51:	e8 11 d1 ff ff       	call   c0002d67 <get_fat>
c0005c56:	83 f8 ff             	cmp    eax,0xffffffff
c0005c59:	0f 84 25 fd ff ff    	je     c0005984 <f_lseek+0xd2>
c0005c5f:	83 f8 01             	cmp    eax,0x1
c0005c62:	0f 86 06 fd ff ff    	jbe    c000596e <f_lseek+0xbc>
c0005c68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c6f:	0f 86 f9 fc ff ff    	jbe    c000596e <f_lseek+0xbc>
c0005c75:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c78:	e9 5b ff ff ff       	jmp    c0005bd8 <f_lseek+0x326>
c0005c7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c8f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c93:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c96:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c99:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9c:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca2:	0f 84 6f fe ff ff    	je     c0005b17 <f_lseek+0x265>
c0005ca8:	89 c2                	mov    edx,eax
c0005caa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cae:	e8 e7 bf ff ff       	call   c0001c9a <clst2sect>
c0005cb3:	89 d7                	mov    edi,edx
c0005cb5:	09 c7                	or     edi,eax
c0005cb7:	0f 84 b1 fc ff ff    	je     c000596e <f_lseek+0xbc>
c0005cbd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc8:	c1 ef 09             	shr    edi,0x9
c0005ccb:	01 c6                	add    esi,eax
c0005ccd:	11 d7                	adc    edi,edx
c0005ccf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cd8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdb:	19 d1                	sbb    ecx,edx
c0005cdd:	73 0a                	jae    c0005ce9 <f_lseek+0x437>
c0005cdf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005ce9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cee:	74 6d                	je     c0005d5d <f_lseek+0x4ab>
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf6:	39 fa                	cmp    edx,edi
c0005cf8:	75 04                	jne    c0005cfe <f_lseek+0x44c>
c0005cfa:	39 f0                	cmp    eax,esi
c0005cfc:	74 5f                	je     c0005d5d <f_lseek+0x4ab>
c0005cfe:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d01:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d05:	79 25                	jns    c0005d2c <f_lseek+0x47a>
c0005d07:	83 ec 0c             	sub    esp,0xc
c0005d0a:	6a 01                	push   0x1
c0005d0c:	52                   	push   edx
c0005d0d:	50                   	push   eax
c0005d0e:	55                   	push   ebp
c0005d0f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d13:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d17:	50                   	push   eax
c0005d18:	e8 af bc ff ff       	call   c00019cc <disk_write>
c0005d1d:	83 c4 20             	add    esp,0x20
c0005d20:	85 c0                	test   eax,eax
c0005d22:	0f 85 5c fc ff ff    	jne    c0005984 <f_lseek+0xd2>
c0005d28:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2c:	83 ec 0c             	sub    esp,0xc
c0005d2f:	6a 01                	push   0x1
c0005d31:	57                   	push   edi
c0005d32:	56                   	push   esi
c0005d33:	55                   	push   ebp
c0005d34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d38:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3c:	50                   	push   eax
c0005d3d:	e8 74 bc ff ff       	call   c00019b6 <disk_read>
c0005d42:	83 c4 20             	add    esp,0x20
c0005d45:	85 c0                	test   eax,eax
c0005d47:	0f 85 37 fc ff ff    	jne    c0005984 <f_lseek+0xd2>
c0005d4d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d50:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d53:	eb 08                	jmp    c0005d5d <f_lseek+0x4ab>
c0005d55:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d61:	83 c4 3c             	add    esp,0x3c
c0005d64:	5b                   	pop    ebx
c0005d65:	5e                   	pop    esi
c0005d66:	5f                   	pop    edi
c0005d67:	5d                   	pop    ebp
c0005d68:	c3                   	ret    

c0005d69 <f_opendir>:
c0005d69:	56                   	push   esi
c0005d6a:	b8 09 00 00 00       	mov    eax,0x9
c0005d6f:	53                   	push   ebx
c0005d70:	83 ec 24             	sub    esp,0x24
c0005d73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d77:	85 db                	test   ebx,ebx
c0005d79:	0f 84 e6 00 00 00    	je     c0005e65 <f_opendir+0xfc>
c0005d7f:	31 c9                	xor    ecx,ecx
c0005d81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d85:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d89:	e8 03 c7 ff ff       	call   c0002491 <mount_volume>
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 c9 00 00 00    	jne    c0005e5f <f_opendir+0xf6>
c0005d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9a:	83 ec 0c             	sub    esp,0xc
c0005d9d:	89 03                	mov    DWORD PTR [ebx],eax
c0005d9f:	68 60 04 00 00       	push   0x460
c0005da4:	e8 8b 24 00 00       	call   c0008234 <ff_memalloc>
c0005da9:	83 c4 10             	add    esp,0x10
c0005dac:	89 c6                	mov    esi,eax
c0005dae:	b8 11 00 00 00       	mov    eax,0x11
c0005db3:	85 f6                	test   esi,esi
c0005db5:	0f 84 aa 00 00 00    	je     c0005e65 <f_opendir+0xfc>
c0005dbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dbf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dc8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dcf:	89 d8                	mov    eax,ebx
c0005dd1:	e8 31 ee ff ff       	call   c0004c07 <follow_path>
c0005dd6:	85 c0                	test   eax,eax
c0005dd8:	75 61                	jne    c0005e3b <f_opendir+0xd2>
c0005dda:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dde:	78 46                	js     c0005e26 <f_opendir+0xbd>
c0005de0:	b8 05 00 00 00       	mov    eax,0x5
c0005de5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005de9:	74 50                	je     c0005e3b <f_opendir+0xd2>
c0005deb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005def:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df1:	3c 04                	cmp    al,0x4
c0005df3:	75 26                	jne    c0005e1b <f_opendir+0xb2>
c0005df5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005df8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfb:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dfe:	30 d2                	xor    dl,dl
c0005e00:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e04:	09 c2                	or     edx,eax
c0005e06:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e09:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e0f:	89 da                	mov    edx,ebx
c0005e11:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e14:	e8 b4 ed ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c0005e19:	eb 0b                	jmp    c0005e26 <f_opendir+0xbd>
c0005e1b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e1e:	e8 59 ed ff ff       	call   c0004b7c <ld_clust.isra.0>
c0005e23:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2a:	31 d2                	xor    edx,edx
c0005e2c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e30:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e34:	89 d8                	mov    eax,ebx
c0005e36:	e8 22 d1 ff ff       	call   c0002f5d <dir_sdi>
c0005e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e3f:	83 ec 0c             	sub    esp,0xc
c0005e42:	56                   	push   esi
c0005e43:	e8 02 24 00 00       	call   c000824a <ff_memfree>
c0005e48:	83 c4 10             	add    esp,0x10
c0005e4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4f:	83 f8 04             	cmp    eax,0x4
c0005e52:	74 06                	je     c0005e5a <f_opendir+0xf1>
c0005e54:	85 c0                	test   eax,eax
c0005e56:	74 0d                	je     c0005e65 <f_opendir+0xfc>
c0005e58:	eb 05                	jmp    c0005e5f <f_opendir+0xf6>
c0005e5a:	b8 05 00 00 00       	mov    eax,0x5
c0005e5f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e65:	83 c4 24             	add    esp,0x24
c0005e68:	5b                   	pop    ebx
c0005e69:	5e                   	pop    esi
c0005e6a:	c3                   	ret    

c0005e6b <f_closedir>:
c0005e6b:	53                   	push   ebx
c0005e6c:	83 ec 18             	sub    esp,0x18
c0005e6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e77:	89 d8                	mov    eax,ebx
c0005e79:	e8 86 c2 ff ff       	call   c0002104 <validate>
c0005e7e:	85 c0                	test   eax,eax
c0005e80:	75 06                	jne    c0005e88 <f_closedir+0x1d>
c0005e82:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e88:	83 c4 18             	add    esp,0x18
c0005e8b:	5b                   	pop    ebx
c0005e8c:	c3                   	ret    

c0005e8d <f_readdir>:
c0005e8d:	57                   	push   edi
c0005e8e:	56                   	push   esi
c0005e8f:	53                   	push   ebx
c0005e90:	83 ec 20             	sub    esp,0x20
c0005e93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e97:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e9f:	89 d8                	mov    eax,ebx
c0005ea1:	e8 5e c2 ff ff       	call   c0002104 <validate>
c0005ea6:	85 c0                	test   eax,eax
c0005ea8:	75 77                	jne    c0005f21 <f_readdir+0x94>
c0005eaa:	85 ff                	test   edi,edi
c0005eac:	75 0b                	jne    c0005eb9 <f_readdir+0x2c>
c0005eae:	31 d2                	xor    edx,edx
c0005eb0:	89 d8                	mov    eax,ebx
c0005eb2:	e8 a6 d0 ff ff       	call   c0002f5d <dir_sdi>
c0005eb7:	eb 68                	jmp    c0005f21 <f_readdir+0x94>
c0005eb9:	83 ec 0c             	sub    esp,0xc
c0005ebc:	68 60 04 00 00       	push   0x460
c0005ec1:	e8 6e 23 00 00       	call   c0008234 <ff_memalloc>
c0005ec6:	83 c4 10             	add    esp,0x10
c0005ec9:	89 c6                	mov    esi,eax
c0005ecb:	b8 11 00 00 00       	mov    eax,0x11
c0005ed0:	85 f6                	test   esi,esi
c0005ed2:	74 4d                	je     c0005f21 <f_readdir+0x94>
c0005ed4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ed8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ede:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee4:	31 d2                	xor    edx,edx
c0005ee6:	89 d8                	mov    eax,ebx
c0005ee8:	e8 80 d8 ff ff       	call   c000376d <dir_read>
c0005eed:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef2:	75 19                	jne    c0005f0d <f_readdir+0x80>
c0005ef4:	89 fa                	mov    edx,edi
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 7e ea ff ff       	call   c000497b <get_fileinfo>
c0005efd:	31 d2                	xor    edx,edx
c0005eff:	89 d8                	mov    eax,ebx
c0005f01:	e8 af d5 ff ff       	call   c00034b5 <dir_next>
c0005f06:	83 f8 04             	cmp    eax,0x4
c0005f09:	75 02                	jne    c0005f0d <f_readdir+0x80>
c0005f0b:	31 c0                	xor    eax,eax
c0005f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f11:	83 ec 0c             	sub    esp,0xc
c0005f14:	56                   	push   esi
c0005f15:	e8 30 23 00 00       	call   c000824a <ff_memfree>
c0005f1a:	83 c4 10             	add    esp,0x10
c0005f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f21:	83 c4 20             	add    esp,0x20
c0005f24:	5b                   	pop    ebx
c0005f25:	5e                   	pop    esi
c0005f26:	5f                   	pop    edi
c0005f27:	c3                   	ret    

c0005f28 <f_stat>:
c0005f28:	57                   	push   edi
c0005f29:	31 c9                	xor    ecx,ecx
c0005f2b:	56                   	push   esi
c0005f2c:	53                   	push   ebx
c0005f2d:	83 ec 50             	sub    esp,0x50
c0005f30:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f34:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f38:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3c:	e8 50 c5 ff ff       	call   c0002491 <mount_volume>
c0005f41:	89 c3                	mov    ebx,eax
c0005f43:	85 c0                	test   eax,eax
c0005f45:	75 67                	jne    c0005fae <f_stat+0x86>
c0005f47:	83 ec 0c             	sub    esp,0xc
c0005f4a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f4f:	68 60 04 00 00       	push   0x460
c0005f54:	e8 db 22 00 00       	call   c0008234 <ff_memalloc>
c0005f59:	83 c4 10             	add    esp,0x10
c0005f5c:	89 c6                	mov    esi,eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	74 4c                	je     c0005fae <f_stat+0x86>
c0005f62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f66:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f6f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f72:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f76:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7a:	e8 88 ec ff ff       	call   c0004c07 <follow_path>
c0005f7f:	89 c3                	mov    ebx,eax
c0005f81:	85 c0                	test   eax,eax
c0005f83:	75 1d                	jne    c0005fa2 <f_stat+0x7a>
c0005f85:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8a:	78 11                	js     c0005f9d <f_stat+0x75>
c0005f8c:	85 ff                	test   edi,edi
c0005f8e:	74 12                	je     c0005fa2 <f_stat+0x7a>
c0005f90:	89 fa                	mov    edx,edi
c0005f92:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f96:	e8 e0 e9 ff ff       	call   c000497b <get_fileinfo>
c0005f9b:	eb 05                	jmp    c0005fa2 <f_stat+0x7a>
c0005f9d:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa2:	83 ec 0c             	sub    esp,0xc
c0005fa5:	56                   	push   esi
c0005fa6:	e8 9f 22 00 00       	call   c000824a <ff_memfree>
c0005fab:	83 c4 10             	add    esp,0x10
c0005fae:	83 c4 50             	add    esp,0x50
c0005fb1:	89 d8                	mov    eax,ebx
c0005fb3:	5b                   	pop    ebx
c0005fb4:	5e                   	pop    esi
c0005fb5:	5f                   	pop    edi
c0005fb6:	c3                   	ret    

c0005fb7 <f_getfree>:
c0005fb7:	55                   	push   ebp
c0005fb8:	31 c9                	xor    ecx,ecx
c0005fba:	57                   	push   edi
c0005fbb:	56                   	push   esi
c0005fbc:	53                   	push   ebx
c0005fbd:	83 ec 5c             	sub    esp,0x5c
c0005fc0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fc8:	e8 c4 c4 ff ff       	call   c0002491 <mount_volume>
c0005fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd1:	85 c0                	test   eax,eax
c0005fd3:	0f 85 9d 01 00 00    	jne    c0006176 <f_getfree+0x1bf>
c0005fd9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fdd:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe1:	89 02                	mov    DWORD PTR [edx],eax
c0005fe3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fe9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fec:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff0:	39 f2                	cmp    edx,esi
c0005ff2:	77 0b                	ja     c0005fff <f_getfree+0x48>
c0005ff4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ff8:	89 10                	mov    DWORD PTR [eax],edx
c0005ffa:	e9 77 01 00 00       	jmp    c0006176 <f_getfree+0x1bf>
c0005fff:	8a 10                	mov    dl,BYTE PTR [eax]
c0006001:	80 fa 01             	cmp    dl,0x1
c0006004:	75 3a                	jne    c0006040 <f_getfree+0x89>
c0006006:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600a:	be 02 00 00 00       	mov    esi,0x2
c000600f:	31 db                	xor    ebx,ebx
c0006011:	89 f2                	mov    edx,esi
c0006013:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006017:	e8 4b cd ff ff       	call   c0002d67 <get_fat>
c000601c:	83 f8 ff             	cmp    eax,0xffffffff
c000601f:	0f 84 28 01 00 00    	je     c000614d <f_getfree+0x196>
c0006025:	83 f8 01             	cmp    eax,0x1
c0006028:	0f 84 29 01 00 00    	je     c0006157 <f_getfree+0x1a0>
c000602e:	83 d3 00             	adc    ebx,0x0
c0006031:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006035:	46                   	inc    esi
c0006036:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006039:	77 d6                	ja     c0006011 <f_getfree+0x5a>
c000603b:	e9 25 01 00 00       	jmp    c0006165 <f_getfree+0x1ae>
c0006040:	80 fa 04             	cmp    dl,0x4
c0006043:	0f 85 88 00 00 00    	jne    c00060d1 <f_getfree+0x11a>
c0006049:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604c:	31 ed                	xor    ebp,ebp
c000604e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006051:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006055:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006059:	31 db                	xor    ebx,ebx
c000605b:	85 ed                	test   ebp,ebp
c000605d:	75 3f                	jne    c000609e <f_getfree+0xe7>
c000605f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006063:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006067:	83 c0 01             	add    eax,0x1
c000606a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000606e:	83 d2 00             	adc    edx,0x0
c0006071:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006075:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006079:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006081:	e8 59 c1 ff ff       	call   c00021df <move_window>
c0006086:	85 c0                	test   eax,eax
c0006088:	0f 85 d3 00 00 00    	jne    c0006161 <f_getfree+0x1aa>
c000608e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006092:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006096:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060a9:	89 cf                	mov    edi,ecx
c00060ab:	85 f6                	test   esi,esi
c00060ad:	74 12                	je     c00060c1 <f_getfree+0x10a>
c00060af:	88 c1                	mov    cl,al
c00060b1:	83 e1 01             	and    ecx,0x1
c00060b4:	80 f9 01             	cmp    cl,0x1
c00060b7:	83 d3 00             	adc    ebx,0x0
c00060ba:	d0 e8                	shr    al,1
c00060bc:	4e                   	dec    esi
c00060bd:	39 fe                	cmp    esi,edi
c00060bf:	75 ea                	jne    c00060ab <f_getfree+0xf4>
c00060c1:	45                   	inc    ebp
c00060c2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060c8:	85 f6                	test   esi,esi
c00060ca:	75 8f                	jne    c000605b <f_getfree+0xa4>
c00060cc:	e9 94 00 00 00       	jmp    c0006165 <f_getfree+0x1ae>
c00060d1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d7:	31 f6                	xor    esi,esi
c00060d9:	31 db                	xor    ebx,ebx
c00060db:	85 f6                	test   esi,esi
c00060dd:	75 1b                	jne    c00060fa <f_getfree+0x143>
c00060df:	89 d7                	mov    edi,edx
c00060e1:	89 cd                	mov    ebp,ecx
c00060e3:	83 c7 01             	add    edi,0x1
c00060e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ea:	83 d5 00             	adc    ebp,0x0
c00060ed:	e8 ed c0 ff ff       	call   c00021df <move_window>
c00060f2:	85 c0                	test   eax,eax
c00060f4:	75 6b                	jne    c0006161 <f_getfree+0x1aa>
c00060f6:	89 fa                	mov    edx,edi
c00060f8:	89 e9                	mov    ecx,ebp
c00060fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fe:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006102:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006106:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006109:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006111:	75 11                	jne    c0006124 <f_getfree+0x16d>
c0006113:	e8 e9 b8 ff ff       	call   c0001a01 <ld_word>
c0006118:	66 83 f8 01          	cmp    ax,0x1
c000611c:	83 d3 00             	adc    ebx,0x0
c000611f:	83 c6 02             	add    esi,0x2
c0006122:	eb 13                	jmp    c0006137 <f_getfree+0x180>
c0006124:	e8 e5 b8 ff ff       	call   c0001a0e <ld_dword>
c0006129:	25 ff ff ff 0f       	and    eax,0xfffffff
c000612e:	83 f8 01             	cmp    eax,0x1
c0006131:	83 d3 00             	adc    ebx,0x0
c0006134:	83 c6 04             	add    esi,0x4
c0006137:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006145:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006149:	75 90                	jne    c00060db <f_getfree+0x124>
c000614b:	eb 18                	jmp    c0006165 <f_getfree+0x1ae>
c000614d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006155:	eb 0e                	jmp    c0006165 <f_getfree+0x1ae>
c0006157:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000615f:	eb 04                	jmp    c0006165 <f_getfree+0x1ae>
c0006161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006165:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006169:	89 18                	mov    DWORD PTR [eax],ebx
c000616b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000616f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006172:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006176:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617a:	83 c4 5c             	add    esp,0x5c
c000617d:	5b                   	pop    ebx
c000617e:	5e                   	pop    esi
c000617f:	5f                   	pop    edi
c0006180:	5d                   	pop    ebp
c0006181:	c3                   	ret    

c0006182 <f_truncate>:
c0006182:	56                   	push   esi
c0006183:	53                   	push   ebx
c0006184:	83 ec 14             	sub    esp,0x14
c0006187:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000618f:	89 d8                	mov    eax,ebx
c0006191:	e8 6e bf ff ff       	call   c0002104 <validate>
c0006196:	89 c6                	mov    esi,eax
c0006198:	85 c0                	test   eax,eax
c000619a:	0f 85 d2 00 00 00    	jne    c0006272 <f_truncate+0xf0>
c00061a0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a4:	85 f6                	test   esi,esi
c00061a6:	0f 85 c6 00 00 00    	jne    c0006272 <f_truncate+0xf0>
c00061ac:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b0:	0f 84 b7 00 00 00    	je     c000626d <f_truncate+0xeb>
c00061b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061bc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061bf:	89 d1                	mov    ecx,edx
c00061c1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c4:	0f 83 a8 00 00 00    	jae    c0006272 <f_truncate+0xf0>
c00061ca:	09 c2                	or     edx,eax
c00061cc:	75 15                	jne    c00061e3 <f_truncate+0x61>
c00061ce:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d1:	31 c9                	xor    ecx,ecx
c00061d3:	89 d8                	mov    eax,ebx
c00061d5:	e8 7a d0 ff ff       	call   c0003254 <remove_chain>
c00061da:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e1:	eb 35                	jmp    c0006218 <f_truncate+0x96>
c00061e3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e6:	89 d8                	mov    eax,ebx
c00061e8:	e8 7a cb ff ff       	call   c0002d67 <get_fat>
c00061ed:	89 c2                	mov    edx,eax
c00061ef:	b8 01 00 00 00       	mov    eax,0x1
c00061f4:	83 fa ff             	cmp    edx,0xffffffff
c00061f7:	74 1f                	je     c0006218 <f_truncate+0x96>
c00061f9:	b8 02 00 00 00       	mov    eax,0x2
c00061fe:	83 fa 01             	cmp    edx,0x1
c0006201:	74 15                	je     c0006218 <f_truncate+0x96>
c0006203:	31 c0                	xor    eax,eax
c0006205:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006209:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620c:	76 0a                	jbe    c0006218 <f_truncate+0x96>
c000620e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006211:	89 d8                	mov    eax,ebx
c0006213:	e8 3c d0 ff ff       	call   c0003254 <remove_chain>
c0006218:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000621e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006221:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006224:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006227:	83 ca 40             	or     edx,0x40
c000622a:	85 c0                	test   eax,eax
c000622c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000622f:	75 35                	jne    c0006266 <f_truncate+0xe4>
c0006231:	84 d2                	test   dl,dl
c0006233:	79 3d                	jns    c0006272 <f_truncate+0xf0>
c0006235:	83 ec 0c             	sub    esp,0xc
c0006238:	8d 43 50             	lea    eax,[ebx+0x50]
c000623b:	6a 01                	push   0x1
c000623d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006240:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006243:	50                   	push   eax
c0006244:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006248:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624c:	50                   	push   eax
c000624d:	e8 7a b7 ff ff       	call   c00019cc <disk_write>
c0006252:	83 c4 20             	add    esp,0x20
c0006255:	85 c0                	test   eax,eax
c0006257:	75 08                	jne    c0006261 <f_truncate+0xdf>
c0006259:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625d:	31 f6                	xor    esi,esi
c000625f:	eb 11                	jmp    c0006272 <f_truncate+0xf0>
c0006261:	b8 01 00 00 00       	mov    eax,0x1
c0006266:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006269:	89 c6                	mov    esi,eax
c000626b:	eb 05                	jmp    c0006272 <f_truncate+0xf0>
c000626d:	be 07 00 00 00       	mov    esi,0x7
c0006272:	89 f0                	mov    eax,esi
c0006274:	83 c4 14             	add    esp,0x14
c0006277:	5b                   	pop    ebx
c0006278:	5e                   	pop    esi
c0006279:	c3                   	ret    

c000627a <f_unlink>:
c000627a:	56                   	push   esi
c000627b:	b9 02 00 00 00       	mov    ecx,0x2
c0006280:	53                   	push   ebx
c0006281:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006287:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006292:	e8 fa c1 ff ff       	call   c0002491 <mount_volume>
c0006297:	85 c0                	test   eax,eax
c0006299:	0f 85 55 01 00 00    	jne    c00063f4 <f_unlink+0x17a>
c000629f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062aa:	68 60 04 00 00       	push   0x460
c00062af:	e8 80 1f 00 00       	call   c0008234 <ff_memalloc>
c00062b4:	83 c4 10             	add    esp,0x10
c00062b7:	89 c3                	mov    ebx,eax
c00062b9:	b8 11 00 00 00       	mov    eax,0x11
c00062be:	85 db                	test   ebx,ebx
c00062c0:	0f 84 2e 01 00 00    	je     c00063f4 <f_unlink+0x17a>
c00062c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ca:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062dd:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e1:	e8 21 e9 ff ff       	call   c0004c07 <follow_path>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 f2 00 00 00    	jne    c00063e0 <f_unlink+0x166>
c00062ee:	b8 06 00 00 00       	mov    eax,0x6
c00062f3:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fb:	0f 88 df 00 00 00    	js     c00063e0 <f_unlink+0x166>
c0006301:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006306:	74 0a                	je     c0006312 <f_unlink+0x98>
c0006308:	b8 07 00 00 00       	mov    eax,0x7
c000630d:	e9 ce 00 00 00       	jmp    c00063e0 <f_unlink+0x166>
c0006312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006316:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631a:	8a 02                	mov    al,BYTE PTR [edx]
c000631c:	3c 04                	cmp    al,0x4
c000631e:	75 12                	jne    c0006332 <f_unlink+0xb8>
c0006320:	8d 42 10             	lea    eax,[edx+0x10]
c0006323:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006327:	e8 a1 e8 ff ff       	call   c0004bcd <init_alloc_info.isra.2>
c000632c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006330:	eb 0e                	jmp    c0006340 <f_unlink+0xc6>
c0006332:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006339:	e8 3e e8 ff ff       	call   c0004b7c <ld_clust.isra.0>
c000633e:	89 c6                	mov    esi,eax
c0006340:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006345:	75 12                	jne    c0006359 <f_unlink+0xdf>
c0006347:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634b:	e8 94 d6 ff ff       	call   c00039e4 <dir_remove>
c0006350:	85 c0                	test   eax,eax
c0006352:	74 6c                	je     c00063c0 <f_unlink+0x146>
c0006354:	e9 87 00 00 00       	jmp    c00063e0 <f_unlink+0x166>
c0006359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006364:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000636e:	75 21                	jne    c0006391 <f_unlink+0x117>
c0006370:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006374:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006378:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000637f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006386:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006391:	31 d2                	xor    edx,edx
c0006393:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639a:	e8 be cb ff ff       	call   c0002f5d <dir_sdi>
c000639f:	85 c0                	test   eax,eax
c00063a1:	75 3d                	jne    c00063e0 <f_unlink+0x166>
c00063a3:	31 d2                	xor    edx,edx
c00063a5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ac:	e8 bc d3 ff ff       	call   c000376d <dir_read>
c00063b1:	85 c0                	test   eax,eax
c00063b3:	0f 84 4f ff ff ff    	je     c0006308 <f_unlink+0x8e>
c00063b9:	83 f8 04             	cmp    eax,0x4
c00063bc:	75 22                	jne    c00063e0 <f_unlink+0x166>
c00063be:	eb 87                	jmp    c0006347 <f_unlink+0xcd>
c00063c0:	85 f6                	test   esi,esi
c00063c2:	75 0b                	jne    c00063cf <f_unlink+0x155>
c00063c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063c8:	e8 3d df ff ff       	call   c000430a <sync_fs>
c00063cd:	eb 11                	jmp    c00063e0 <f_unlink+0x166>
c00063cf:	31 c9                	xor    ecx,ecx
c00063d1:	89 f2                	mov    edx,esi
c00063d3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d7:	e8 78 ce ff ff       	call   c0003254 <remove_chain>
c00063dc:	85 c0                	test   eax,eax
c00063de:	74 e4                	je     c00063c4 <f_unlink+0x14a>
c00063e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e4:	83 ec 0c             	sub    esp,0xc
c00063e7:	53                   	push   ebx
c00063e8:	e8 5d 1e 00 00       	call   c000824a <ff_memfree>
c00063ed:	83 c4 10             	add    esp,0x10
c00063f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f4:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fa:	5b                   	pop    ebx
c00063fb:	5e                   	pop    esi
c00063fc:	c3                   	ret    

c00063fd <f_mkdir>:
c00063fd:	57                   	push   edi
c00063fe:	b9 02 00 00 00       	mov    ecx,0x2
c0006403:	56                   	push   esi
c0006404:	53                   	push   ebx
c0006405:	83 c4 80             	add    esp,0xffffff80
c0006408:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006413:	e8 79 c0 ff ff       	call   c0002491 <mount_volume>
c0006418:	89 c3                	mov    ebx,eax
c000641a:	85 c0                	test   eax,eax
c000641c:	0f 85 fe 01 00 00    	jne    c0006620 <f_mkdir+0x223>
c0006422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006426:	bb 11 00 00 00       	mov    ebx,0x11
c000642b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000642f:	83 ec 0c             	sub    esp,0xc
c0006432:	68 60 04 00 00       	push   0x460
c0006437:	e8 f8 1d 00 00       	call   c0008234 <ff_memalloc>
c000643c:	83 c4 10             	add    esp,0x10
c000643f:	89 c7                	mov    edi,eax
c0006441:	85 c0                	test   eax,eax
c0006443:	0f 84 d7 01 00 00    	je     c0006620 <f_mkdir+0x223>
c0006449:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006453:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006456:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006459:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006464:	e8 9e e7 ff ff       	call   c0004c07 <follow_path>
c0006469:	89 c3                	mov    ebx,eax
c000646b:	85 c0                	test   eax,eax
c000646d:	74 3e                	je     c00064ad <f_mkdir+0xb0>
c000646f:	83 f8 04             	cmp    eax,0x4
c0006472:	75 3e                	jne    c00064b2 <f_mkdir+0xb5>
c0006474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006478:	31 d2                	xor    edx,edx
c000647a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000647e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006482:	e8 ce cb ff ff       	call   c0003055 <create_chain>
c0006487:	89 c6                	mov    esi,eax
c0006489:	85 c0                	test   eax,eax
c000648b:	74 0c                	je     c0006499 <f_mkdir+0x9c>
c000648d:	bb 02 00 00 00       	mov    ebx,0x2
c0006492:	83 f8 01             	cmp    eax,0x1
c0006495:	74 07                	je     c000649e <f_mkdir+0xa1>
c0006497:	eb 2a                	jmp    c00064c3 <f_mkdir+0xc6>
c0006499:	bb 07 00 00 00       	mov    ebx,0x7
c000649e:	31 c9                	xor    ecx,ecx
c00064a0:	89 f2                	mov    edx,esi
c00064a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a6:	e8 a9 cd ff ff       	call   c0003254 <remove_chain>
c00064ab:	eb 05                	jmp    c00064b2 <f_mkdir+0xb5>
c00064ad:	bb 08 00 00 00       	mov    ebx,0x8
c00064b2:	83 ec 0c             	sub    esp,0xc
c00064b5:	57                   	push   edi
c00064b6:	e8 8f 1d 00 00       	call   c000824a <ff_memfree>
c00064bb:	83 c4 10             	add    esp,0x10
c00064be:	e9 5d 01 00 00       	jmp    c0006620 <f_mkdir+0x223>
c00064c3:	bb 01 00 00 00       	mov    ebx,0x1
c00064c8:	83 f8 ff             	cmp    eax,0xffffffff
c00064cb:	74 d1                	je     c000649e <f_mkdir+0xa1>
c00064cd:	89 f2                	mov    edx,esi
c00064cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d3:	e8 c4 ce ff ff       	call   c000339c <dir_clear>
c00064d8:	89 c3                	mov    ebx,eax
c00064da:	85 c0                	test   eax,eax
c00064dc:	75 c0                	jne    c000649e <f_mkdir+0xa1>
c00064de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e5:	74 69                	je     c0006550 <f_mkdir+0x153>
c00064e7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ec:	83 c0 54             	add    eax,0x54
c00064ef:	ba 20 00 00 00       	mov    edx,0x20
c00064f4:	e8 9c b5 ff ff       	call   c0001a95 <mem_set>
c00064f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0006502:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006506:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650a:	83 c0 6a             	add    eax,0x6a
c000650d:	e8 65 b5 ff ff       	call   c0001a77 <st_dword>
c0006512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006516:	89 f1                	mov    ecx,esi
c0006518:	8d 50 54             	lea    edx,[eax+0x54]
c000651b:	e8 85 e6 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0006520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006524:	b9 20 00 00 00       	mov    ecx,0x20
c0006529:	8d 50 54             	lea    edx,[eax+0x54]
c000652c:	83 c0 74             	add    eax,0x74
c000652f:	e8 4c b5 ff ff       	call   c0001a80 <mem_cpy>
c0006534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006538:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006540:	8d 50 74             	lea    edx,[eax+0x74]
c0006543:	e8 5d e6 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0006548:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006550:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006554:	e8 2f db ff ff       	call   c0004088 <dir_register>
c0006559:	89 c3                	mov    ebx,eax
c000655b:	85 c0                	test   eax,eax
c000655d:	0f 85 3b ff ff ff    	jne    c000649e <f_mkdir+0xa1>
c0006563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006567:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656a:	75 74                	jne    c00065e0 <f_mkdir+0x1e3>
c000656c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000656f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006574:	83 c0 0c             	add    eax,0xc
c0006577:	e8 fb b4 ff ff       	call   c0001a77 <st_dword>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	89 f2                	mov    edx,esi
c0006582:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006585:	83 c0 34             	add    eax,0x34
c0006588:	e8 ea b4 ff ff       	call   c0001a77 <st_dword>
c000658d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006591:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006595:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006598:	c1 e2 09             	shl    edx,0x9
c000659b:	83 c0 38             	add    eax,0x38
c000659e:	e8 d4 b4 ff ff       	call   c0001a77 <st_dword>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ae:	c1 e2 09             	shl    edx,0x9
c00065b1:	83 c0 28             	add    eax,0x28
c00065b4:	e8 be b4 ff ff       	call   c0001a77 <st_dword>
c00065b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cb:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065cf:	e8 8b d3 ff ff       	call   c000395f <store_xdir>
c00065d4:	89 c3                	mov    ebx,eax
c00065d6:	85 c0                	test   eax,eax
c00065d8:	0f 85 d4 fe ff ff    	jne    c00064b2 <f_mkdir+0xb5>
c00065de:	eb 30                	jmp    c0006610 <f_mkdir+0x213>
c00065e0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e9:	83 c0 16             	add    eax,0x16
c00065ec:	e8 86 b4 ff ff       	call   c0001a77 <st_dword>
c00065f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f5:	89 f1                	mov    ecx,esi
c00065f7:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fb:	e8 a5 e5 ff ff       	call   c0004ba5 <st_clust.isra.1>
c0006600:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006604:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006608:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006614:	e8 f1 dc ff ff       	call   c000430a <sync_fs>
c0006619:	89 c3                	mov    ebx,eax
c000661b:	e9 92 fe ff ff       	jmp    c00064b2 <f_mkdir+0xb5>
c0006620:	83 ec 80             	sub    esp,0xffffff80
c0006623:	89 d8                	mov    eax,ebx
c0006625:	5b                   	pop    ebx
c0006626:	5e                   	pop    esi
c0006627:	5f                   	pop    edi
c0006628:	c3                   	ret    

c0006629 <f_rename>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	56                   	push   esi
c000662c:	53                   	push   ebx
c000662d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006633:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663a:	e8 a4 b9 ff ff       	call   c0001fe3 <get_ldnumber>
c000663f:	b9 02 00 00 00       	mov    ecx,0x2
c0006644:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006648:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000664f:	e8 3d be ff ff       	call   c0002491 <mount_volume>
c0006654:	85 c0                	test   eax,eax
c0006656:	0f 85 b5 02 00 00    	jne    c0006911 <f_rename+0x2e8>
c000665c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006660:	83 ec 0c             	sub    esp,0xc
c0006663:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006667:	68 60 04 00 00       	push   0x460
c000666c:	e8 c3 1b 00 00       	call   c0008234 <ff_memalloc>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	89 c3                	mov    ebx,eax
c0006676:	b8 11 00 00 00       	mov    eax,0x11
c000667b:	85 db                	test   ebx,ebx
c000667d:	0f 84 8e 02 00 00    	je     c0006911 <f_rename+0x2e8>
c0006683:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006687:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006690:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006693:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000669e:	e8 64 e5 ff ff       	call   c0004c07 <follow_path>
c00066a3:	85 c0                	test   eax,eax
c00066a5:	0f 85 52 02 00 00    	jne    c00068fd <f_rename+0x2d4>
c00066ab:	b8 06 00 00 00       	mov    eax,0x6
c00066b0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066b8:	0f 85 3f 02 00 00    	jne    c00068fd <f_rename+0x2d4>
c00066be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c5:	0f 85 05 01 00 00    	jne    c00067d0 <f_rename+0x1a7>
c00066cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066ce:	b9 40 00 00 00       	mov    ecx,0x40
c00066d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d7:	e8 a4 b3 ff ff       	call   c0001a80 <mem_cpy>
c00066dc:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ec:	e8 8f b3 ff ff       	call   c0001a80 <mem_cpy>
c00066f1:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066f8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ff:	e8 03 e5 ff ff       	call   c0004c07 <follow_path>
c0006704:	85 c0                	test   eax,eax
c0006706:	75 29                	jne    c0006731 <f_rename+0x108>
c0006708:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006713:	74 0a                	je     c000671f <f_rename+0xf6>
c0006715:	b8 08 00 00 00       	mov    eax,0x8
c000671a:	e9 de 01 00 00       	jmp    c00068fd <f_rename+0x2d4>
c000671f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006726:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672d:	75 e6                	jne    c0006715 <f_rename+0xec>
c000672f:	eb 09                	jmp    c000673a <f_rename+0x111>
c0006731:	83 f8 04             	cmp    eax,0x4
c0006734:	0f 85 c3 01 00 00    	jne    c00068fd <f_rename+0x2d4>
c000673a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006741:	e8 42 d9 ff ff       	call   c0004088 <dir_register>
c0006746:	85 c0                	test   eax,eax
c0006748:	0f 85 af 01 00 00    	jne    c00068fd <f_rename+0x2d4>
c000674e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006752:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006755:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006758:	89 c5                	mov    ebp,eax
c000675a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006761:	8d 46 24             	lea    eax,[esi+0x24]
c0006764:	e8 98 b2 ff ff       	call   c0001a01 <ld_word>
c0006769:	b9 40 00 00 00       	mov    ecx,0x40
c000676e:	89 c7                	mov    edi,eax
c0006770:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006774:	89 f0                	mov    eax,esi
c0006776:	e8 05 b3 ff ff       	call   c0001a80 <mem_cpy>
c000677b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000677f:	89 e9                	mov    ecx,ebp
c0006781:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006784:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006787:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006792:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006795:	0f b7 d7             	movzx  edx,di
c0006798:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679b:	83 c0 24             	add    eax,0x24
c000679e:	e8 d0 b2 ff ff       	call   c0001a73 <st_word>
c00067a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067aa:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ad:	a8 10                	test   al,0x10
c00067af:	75 06                	jne    c00067b7 <f_rename+0x18e>
c00067b1:	83 c8 20             	or     eax,0x20
c00067b4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067be:	e8 9c d1 ff ff       	call   c000395f <store_xdir>
c00067c3:	85 c0                	test   eax,eax
c00067c5:	0f 84 1c 01 00 00    	je     c00068e7 <f_rename+0x2be>
c00067cb:	e9 2d 01 00 00       	jmp    c00068fd <f_rename+0x2d4>
c00067d0:	b9 20 00 00 00       	mov    ecx,0x20
c00067d5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067dc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e0:	e8 9b b2 ff ff       	call   c0001a80 <mem_cpy>
c00067e5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067ea:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067ee:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f5:	e8 86 b2 ff ff       	call   c0001a80 <mem_cpy>
c00067fa:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006801:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006808:	e8 fa e3 ff ff       	call   c0004c07 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	75 27                	jne    c0006838 <f_rename+0x20f>
c0006811:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006815:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681c:	0f 85 f3 fe ff ff    	jne    c0006715 <f_rename+0xec>
c0006822:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006829:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006830:	0f 85 df fe ff ff    	jne    c0006715 <f_rename+0xec>
c0006836:	eb 09                	jmp    c0006841 <f_rename+0x218>
c0006838:	83 f8 04             	cmp    eax,0x4
c000683b:	0f 85 bc 00 00 00    	jne    c00068fd <f_rename+0x2d4>
c0006841:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006848:	e8 3b d8 ff ff       	call   c0004088 <dir_register>
c000684d:	85 c0                	test   eax,eax
c000684f:	0f 85 a8 00 00 00    	jne    c00068fd <f_rename+0x2d4>
c0006855:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685c:	b9 13 00 00 00       	mov    ecx,0x13
c0006861:	8d 46 0d             	lea    eax,[esi+0xd]
c0006864:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006868:	e8 13 b2 ff ff       	call   c0001a80 <mem_cpy>
c000686d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006871:	a8 10                	test   al,0x10
c0006873:	75 03                	jne    c0006878 <f_rename+0x24f>
c0006875:	83 c8 20             	or     eax,0x20
c0006878:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000687f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006883:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006887:	74 5e                	je     c00068e7 <f_rename+0x2be>
c0006889:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006890:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006894:	74 51                	je     c00068e7 <f_rename+0x2be>
c0006896:	89 f2                	mov    edx,esi
c0006898:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689c:	8a 07                	mov    al,BYTE PTR [edi]
c000689e:	e8 d9 e2 ff ff       	call   c0004b7c <ld_clust.isra.0>
c00068a3:	89 c2                	mov    edx,eax
c00068a5:	89 f8                	mov    eax,edi
c00068a7:	e8 ee b3 ff ff       	call   c0001c9a <clst2sect>
c00068ac:	89 c6                	mov    esi,eax
c00068ae:	89 d1                	mov    ecx,edx
c00068b0:	b8 02 00 00 00       	mov    eax,0x2
c00068b5:	09 f2                	or     edx,esi
c00068b7:	74 44                	je     c00068fd <f_rename+0x2d4>
c00068b9:	89 f2                	mov    edx,esi
c00068bb:	89 f8                	mov    eax,edi
c00068bd:	e8 1d b9 ff ff       	call   c00021df <move_window>
c00068c2:	85 c0                	test   eax,eax
c00068c4:	75 37                	jne    c00068fd <f_rename+0x2d4>
c00068c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ca:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068ce:	75 17                	jne    c00068e7 <f_rename+0x2be>
c00068d0:	8d 50 74             	lea    edx,[eax+0x74]
c00068d3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068da:	e8 c6 e2 ff ff       	call   c0004ba5 <st_clust.isra.1>
c00068df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068eb:	e8 f4 d0 ff ff       	call   c00039e4 <dir_remove>
c00068f0:	85 c0                	test   eax,eax
c00068f2:	75 09                	jne    c00068fd <f_rename+0x2d4>
c00068f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f8:	e8 0d da ff ff       	call   c000430a <sync_fs>
c00068fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006901:	83 ec 0c             	sub    esp,0xc
c0006904:	53                   	push   ebx
c0006905:	e8 40 19 00 00       	call   c000824a <ff_memfree>
c000690a:	83 c4 10             	add    esp,0x10
c000690d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006911:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006917:	5b                   	pop    ebx
c0006918:	5e                   	pop    esi
c0006919:	5f                   	pop    edi
c000691a:	5d                   	pop    ebp
c000691b:	c3                   	ret    

c000691c <f_chmod>:
c000691c:	57                   	push   edi
c000691d:	b9 02 00 00 00       	mov    ecx,0x2
c0006922:	56                   	push   esi
c0006923:	53                   	push   ebx
c0006924:	83 ec 60             	sub    esp,0x60
c0006927:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000692f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006933:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006937:	e8 55 bb ff ff       	call   c0002491 <mount_volume>
c000693c:	85 c0                	test   eax,eax
c000693e:	0f 85 af 00 00 00    	jne    c00069f3 <f_chmod+0xd7>
c0006944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006948:	83 ec 0c             	sub    esp,0xc
c000694b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000694f:	68 60 04 00 00       	push   0x460
c0006954:	e8 db 18 00 00       	call   c0008234 <ff_memalloc>
c0006959:	83 c4 10             	add    esp,0x10
c000695c:	89 c6                	mov    esi,eax
c000695e:	b8 11 00 00 00       	mov    eax,0x11
c0006963:	85 f6                	test   esi,esi
c0006965:	0f 84 88 00 00 00    	je     c00069f3 <f_chmod+0xd7>
c000696b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000696f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006975:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006978:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000697f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006983:	e8 7f e2 ff ff       	call   c0004c07 <follow_path>
c0006988:	85 c0                	test   eax,eax
c000698a:	75 53                	jne    c00069df <f_chmod+0xc3>
c000698c:	b8 06 00 00 00       	mov    eax,0x6
c0006991:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006996:	75 47                	jne    c00069df <f_chmod+0xc3>
c0006998:	89 f9                	mov    ecx,edi
c000699a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699e:	83 e1 27             	and    ecx,0x27
c00069a1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a4:	75 1d                	jne    c00069c3 <f_chmod+0xa7>
c00069a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069a9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ac:	21 cb                	and    ebx,ecx
c00069ae:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b8:	e8 a2 cf ff ff       	call   c000395f <store_xdir>
c00069bd:	85 c0                	test   eax,eax
c00069bf:	75 1e                	jne    c00069df <f_chmod+0xc3>
c00069c1:	eb 13                	jmp    c00069d6 <f_chmod+0xba>
c00069c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069ca:	21 cb                	and    ebx,ecx
c00069cc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cf:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069da:	e8 2b d9 ff ff       	call   c000430a <sync_fs>
c00069df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e3:	83 ec 0c             	sub    esp,0xc
c00069e6:	56                   	push   esi
c00069e7:	e8 5e 18 00 00       	call   c000824a <ff_memfree>
c00069ec:	83 c4 10             	add    esp,0x10
c00069ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f3:	83 c4 60             	add    esp,0x60
c00069f6:	5b                   	pop    ebx
c00069f7:	5e                   	pop    esi
c00069f8:	5f                   	pop    edi
c00069f9:	c3                   	ret    

c00069fa <f_utime>:
c00069fa:	56                   	push   esi
c00069fb:	b9 02 00 00 00       	mov    ecx,0x2
c0006a00:	53                   	push   ebx
c0006a01:	83 ec 64             	sub    esp,0x64
c0006a04:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a08:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a10:	e8 7c ba ff ff       	call   c0002491 <mount_volume>
c0006a15:	85 c0                	test   eax,eax
c0006a17:	0f 85 b5 00 00 00    	jne    c0006ad2 <f_utime+0xd8>
c0006a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a21:	83 ec 0c             	sub    esp,0xc
c0006a24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a28:	68 60 04 00 00       	push   0x460
c0006a2d:	e8 02 18 00 00       	call   c0008234 <ff_memalloc>
c0006a32:	83 c4 10             	add    esp,0x10
c0006a35:	89 c3                	mov    ebx,eax
c0006a37:	b8 11 00 00 00       	mov    eax,0x11
c0006a3c:	85 db                	test   ebx,ebx
c0006a3e:	0f 84 8e 00 00 00    	je     c0006ad2 <f_utime+0xd8>
c0006a44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a48:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a4e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a51:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a54:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a58:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5c:	e8 a6 e1 ff ff       	call   c0004c07 <follow_path>
c0006a61:	85 c0                	test   eax,eax
c0006a63:	75 59                	jne    c0006abe <f_utime+0xc4>
c0006a65:	b8 06 00 00 00       	mov    eax,0x6
c0006a6a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a6f:	75 4d                	jne    c0006abe <f_utime+0xc4>
c0006a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a75:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a79:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7d:	c1 e2 10             	shl    edx,0x10
c0006a80:	09 ca                	or     edx,ecx
c0006a82:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a85:	75 1a                	jne    c0006aa1 <f_utime+0xa7>
c0006a87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8a:	83 c0 0c             	add    eax,0xc
c0006a8d:	e8 e5 af ff ff       	call   c0001a77 <st_dword>
c0006a92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a96:	e8 c4 ce ff ff       	call   c000395f <store_xdir>
c0006a9b:	85 c0                	test   eax,eax
c0006a9d:	75 1f                	jne    c0006abe <f_utime+0xc4>
c0006a9f:	eb 14                	jmp    c0006ab5 <f_utime+0xbb>
c0006aa1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa5:	83 c0 16             	add    eax,0x16
c0006aa8:	e8 ca af ff ff       	call   c0001a77 <st_dword>
c0006aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab9:	e8 4c d8 ff ff       	call   c000430a <sync_fs>
c0006abe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac2:	83 ec 0c             	sub    esp,0xc
c0006ac5:	53                   	push   ebx
c0006ac6:	e8 7f 17 00 00       	call   c000824a <ff_memfree>
c0006acb:	83 c4 10             	add    esp,0x10
c0006ace:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad2:	83 c4 64             	add    esp,0x64
c0006ad5:	5b                   	pop    ebx
c0006ad6:	5e                   	pop    esi
c0006ad7:	c3                   	ret    

c0006ad8 <f_getlabel>:
c0006ad8:	55                   	push   ebp
c0006ad9:	31 c9                	xor    ecx,ecx
c0006adb:	57                   	push   edi
c0006adc:	56                   	push   esi
c0006add:	53                   	push   ebx
c0006ade:	83 ec 6c             	sub    esp,0x6c
c0006ae1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aec:	e8 a0 b9 ff ff       	call   c0002491 <mount_volume>
c0006af1:	89 c6                	mov    esi,eax
c0006af3:	85 c0                	test   eax,eax
c0006af5:	0f 85 c1 01 00 00    	jne    c0006cbc <f_getlabel+0x1e4>
c0006afb:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b03:	0f 84 5f 01 00 00    	je     c0006c68 <f_getlabel+0x190>
c0006b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0d:	31 d2                	xor    edx,edx
c0006b0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b1f:	e8 39 c4 ff ff       	call   c0002f5d <dir_sdi>
c0006b24:	85 c0                	test   eax,eax
c0006b26:	0f 85 2d 01 00 00    	jne    c0006c59 <f_getlabel+0x181>
c0006b2c:	ba 01 00 00 00       	mov    edx,0x1
c0006b31:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b35:	e8 33 cc ff ff       	call   c000376d <dir_read>
c0006b3a:	85 c0                	test   eax,eax
c0006b3c:	0f 85 17 01 00 00    	jne    c0006c59 <f_getlabel+0x181>
c0006b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b46:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b49:	74 09                	je     c0006b54 <f_getlabel+0x7c>
c0006b4b:	31 db                	xor    ebx,ebx
c0006b4d:	31 c9                	xor    ecx,ecx
c0006b4f:	e9 c8 00 00 00       	jmp    c0006c1c <f_getlabel+0x144>
c0006b54:	31 ed                	xor    ebp,ebp
c0006b56:	31 db                	xor    ebx,ebx
c0006b58:	31 ff                	xor    edi,edi
c0006b5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b5e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b62:	39 fa                	cmp    edx,edi
c0006b64:	76 4b                	jbe    c0006bb1 <f_getlabel+0xd9>
c0006b66:	47                   	inc    edi
c0006b67:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6a:	01 d0                	add    eax,edx
c0006b6c:	e8 90 ae ff ff       	call   c0001a01 <ld_word>
c0006b71:	66 85 ed             	test   bp,bp
c0006b74:	75 0d                	jne    c0006b83 <f_getlabel+0xab>
c0006b76:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b81:	76 28                	jbe    c0006bab <f_getlabel+0xd3>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	89 e9                	mov    ecx,ebp
c0006b8c:	01 da                	add    edx,ebx
c0006b8e:	c1 e1 10             	shl    ecx,0x10
c0006b91:	0f b7 c0             	movzx  eax,ax
c0006b94:	09 c8                	or     eax,ecx
c0006b96:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9b:	e8 01 b0 ff ff       	call   c0001ba1 <put_utf>
c0006ba0:	84 c0                	test   al,al
c0006ba2:	74 0b                	je     c0006baf <f_getlabel+0xd7>
c0006ba4:	0f b6 c0             	movzx  eax,al
c0006ba7:	01 c3                	add    ebx,eax
c0006ba9:	31 c0                	xor    eax,eax
c0006bab:	89 c5                	mov    ebp,eax
c0006bad:	eb ab                	jmp    c0006b5a <f_getlabel+0x82>
c0006baf:	31 db                	xor    ebx,ebx
c0006bb1:	66 85 ed             	test   bp,bp
c0006bb4:	74 02                	je     c0006bb8 <f_getlabel+0xe0>
c0006bb6:	31 db                	xor    ebx,ebx
c0006bb8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bbf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc3:	e9 a0 00 00 00       	jmp    c0006c68 <f_getlabel+0x190>
c0006bc8:	83 ff 0b             	cmp    edi,0xb
c0006bcb:	74 11                	je     c0006bde <f_getlabel+0x106>
c0006bcd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd9:	c1 e0 08             	shl    eax,0x8
c0006bdc:	09 c2                	or     edx,eax
c0006bde:	0f b7 d2             	movzx  edx,dx
c0006be1:	50                   	push   eax
c0006be2:	50                   	push   eax
c0006be3:	68 b5 01 00 00       	push   0x1b5
c0006be8:	52                   	push   edx
c0006be9:	e8 03 17 00 00       	call   c00082f1 <ff_oem2uni>
c0006bee:	83 c4 10             	add    esp,0x10
c0006bf1:	66 85 c0             	test   ax,ax
c0006bf4:	74 46                	je     c0006c3c <f_getlabel+0x164>
c0006bf6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bfd:	0f b7 c0             	movzx  eax,ax
c0006c00:	01 da                	add    edx,ebx
c0006c02:	b9 04 00 00 00       	mov    ecx,0x4
c0006c07:	e8 95 af ff ff       	call   c0001ba1 <put_utf>
c0006c0c:	84 c0                	test   al,al
c0006c0e:	74 2c                	je     c0006c3c <f_getlabel+0x164>
c0006c10:	0f b6 c0             	movzx  eax,al
c0006c13:	01 c3                	add    ebx,eax
c0006c15:	83 ff 0b             	cmp    edi,0xb
c0006c18:	74 24                	je     c0006c3e <f_getlabel+0x166>
c0006c1a:	89 f9                	mov    ecx,edi
c0006c1c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c20:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c23:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c28:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c31:	e8 9f ae ff ff       	call   c0001ad5 <dbc_1st>
c0006c36:	85 c0                	test   eax,eax
c0006c38:	74 a4                	je     c0006bde <f_getlabel+0x106>
c0006c3a:	eb 8c                	jmp    c0006bc8 <f_getlabel+0xf0>
c0006c3c:	31 db                	xor    ebx,ebx
c0006c3e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c45:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c48:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c4f:	74 17                	je     c0006c68 <f_getlabel+0x190>
c0006c51:	4b                   	dec    ebx
c0006c52:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c55:	74 ee                	je     c0006c45 <f_getlabel+0x16d>
c0006c57:	eb 0f                	jmp    c0006c68 <f_getlabel+0x190>
c0006c59:	83 f8 04             	cmp    eax,0x4
c0006c5c:	75 5c                	jne    c0006cba <f_getlabel+0x1e2>
c0006c5e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c65:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c68:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c70:	74 4a                	je     c0006cbc <f_getlabel+0x1e4>
c0006c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c76:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c79:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7c:	e8 5e b5 ff ff       	call   c00021df <move_window>
c0006c81:	89 c6                	mov    esi,eax
c0006c83:	85 c0                	test   eax,eax
c0006c85:	75 35                	jne    c0006cbc <f_getlabel+0x1e4>
c0006c87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8b:	b8 43 00 00 00       	mov    eax,0x43
c0006c90:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c92:	80 f9 03             	cmp    cl,0x3
c0006c95:	74 0f                	je     c0006ca6 <f_getlabel+0x1ce>
c0006c97:	31 c0                	xor    eax,eax
c0006c99:	80 f9 04             	cmp    cl,0x4
c0006c9c:	0f 94 c0             	sete   al
c0006c9f:	48                   	dec    eax
c0006ca0:	83 e0 c3             	and    eax,0xffffffc3
c0006ca3:	83 c0 64             	add    eax,0x64
c0006ca6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006caa:	e8 5f ad ff ff       	call   c0001a0e <ld_dword>
c0006caf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb6:	89 07                	mov    DWORD PTR [edi],eax
c0006cb8:	eb 02                	jmp    c0006cbc <f_getlabel+0x1e4>
c0006cba:	89 c6                	mov    esi,eax
c0006cbc:	83 c4 6c             	add    esp,0x6c
c0006cbf:	89 f0                	mov    eax,esi
c0006cc1:	5b                   	pop    ebx
c0006cc2:	5e                   	pop    esi
c0006cc3:	5f                   	pop    edi
c0006cc4:	5d                   	pop    ebp
c0006cc5:	c3                   	ret    

c0006cc6 <f_setlabel>:
c0006cc6:	56                   	push   esi
c0006cc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006ccc:	53                   	push   ebx
c0006ccd:	83 ec 74             	sub    esp,0x74
c0006cd0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdb:	e8 b1 b7 ff ff       	call   c0002491 <mount_volume>
c0006ce0:	89 c6                	mov    esi,eax
c0006ce2:	85 c0                	test   eax,eax
c0006ce4:	0f 85 41 02 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006cea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cee:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf1:	0f 85 8e 00 00 00    	jne    c0006d85 <f_setlabel+0xbf>
c0006cf7:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfc:	31 d2                	xor    edx,edx
c0006cfe:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d02:	31 db                	xor    ebx,ebx
c0006d04:	e8 8c ad ff ff       	call   c0001a95 <mem_set>
c0006d09:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d10:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d13:	0f 86 0a 01 00 00    	jbe    c0006e23 <f_setlabel+0x15d>
c0006d19:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d20:	e8 b6 ad ff ff       	call   c0001adb <tchar2uni>
c0006d25:	89 c6                	mov    esi,eax
c0006d27:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2c:	76 2a                	jbe    c0006d58 <f_setlabel+0x92>
c0006d2e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d31:	74 05                	je     c0006d38 <f_setlabel+0x72>
c0006d33:	83 fb 09             	cmp    ebx,0x9
c0006d36:	76 0a                	jbe    c0006d42 <f_setlabel+0x7c>
c0006d38:	be 06 00 00 00       	mov    esi,0x6
c0006d3d:	e9 e9 01 00 00       	jmp    c0006f2b <f_setlabel+0x265>
c0006d42:	89 c2                	mov    edx,eax
c0006d44:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d48:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4b:	c1 ea 10             	shr    edx,0x10
c0006d4e:	01 c8                	add    eax,ecx
c0006d50:	43                   	inc    ebx
c0006d51:	e8 1d ad ff ff       	call   c0001a73 <st_word>
c0006d56:	eb 04                	jmp    c0006d5c <f_setlabel+0x96>
c0006d58:	85 c0                	test   eax,eax
c0006d5a:	74 dc                	je     c0006d38 <f_setlabel+0x72>
c0006d5c:	89 f2                	mov    edx,esi
c0006d5e:	b8 97 6e 02 c0       	mov    eax,0xc0026e97
c0006d63:	e8 5b ad ff ff       	call   c0001ac3 <chk_chr>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	75 cc                	jne    c0006d38 <f_setlabel+0x72>
c0006d6c:	83 fb 0a             	cmp    ebx,0xa
c0006d6f:	77 c7                	ja     c0006d38 <f_setlabel+0x72>
c0006d71:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d74:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d78:	0f b7 d6             	movzx  edx,si
c0006d7b:	01 c8                	add    eax,ecx
c0006d7d:	43                   	inc    ebx
c0006d7e:	e8 f0 ac ff ff       	call   c0001a73 <st_word>
c0006d83:	eb 84                	jmp    c0006d09 <f_setlabel+0x43>
c0006d85:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8a:	ba 20 00 00 00       	mov    edx,0x20
c0006d8f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d93:	31 db                	xor    ebx,ebx
c0006d95:	e8 fb ac ff ff       	call   c0001a95 <mem_set>
c0006d9a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da4:	76 60                	jbe    c0006e06 <f_setlabel+0x140>
c0006da6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dad:	e8 29 ad ff ff       	call   c0001adb <tchar2uni>
c0006db2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db7:	0f 87 7b ff ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006dbd:	83 ec 0c             	sub    esp,0xc
c0006dc0:	50                   	push   eax
c0006dc1:	e8 97 15 00 00       	call   c000835d <ff_wtoupper>
c0006dc6:	5a                   	pop    edx
c0006dc7:	59                   	pop    ecx
c0006dc8:	68 b5 01 00 00       	push   0x1b5
c0006dcd:	50                   	push   eax
c0006dce:	e8 8e 14 00 00       	call   c0008261 <ff_uni2oem>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	89 c6                	mov    esi,eax
c0006dd8:	66 85 c0             	test   ax,ax
c0006ddb:	0f 84 57 ff ff ff    	je     c0006d38 <f_setlabel+0x72>
c0006de1:	0f b7 d0             	movzx  edx,ax
c0006de4:	b8 90 6e 02 c0       	mov    eax,0xc0026e90
c0006de9:	e8 d5 ac ff ff       	call   c0001ac3 <chk_chr>
c0006dee:	85 c0                	test   eax,eax
c0006df0:	0f 85 42 ff ff ff    	jne    c0006d38 <f_setlabel+0x72>
c0006df6:	66 81 fe ff 00       	cmp    si,0xff
c0006dfb:	0f 87 14 01 00 00    	ja     c0006f15 <f_setlabel+0x24f>
c0006e01:	e9 fa 00 00 00       	jmp    c0006f00 <f_setlabel+0x23a>
c0006e06:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0b:	0f 84 27 ff ff ff    	je     c0006d38 <f_setlabel+0x72>
c0006e11:	85 db                	test   ebx,ebx
c0006e13:	74 0e                	je     c0006e23 <f_setlabel+0x15d>
c0006e15:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e18:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1d:	75 04                	jne    c0006e23 <f_setlabel+0x15d>
c0006e1f:	89 c3                	mov    ebx,eax
c0006e21:	eb ee                	jmp    c0006e11 <f_setlabel+0x14b>
c0006e23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e27:	31 d2                	xor    edx,edx
c0006e29:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e39:	e8 1f c1 ff ff       	call   c0002f5d <dir_sdi>
c0006e3e:	89 c6                	mov    esi,eax
c0006e40:	85 c0                	test   eax,eax
c0006e42:	0f 85 e3 00 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006e48:	ba 01 00 00 00       	mov    edx,0x1
c0006e4d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e51:	e8 17 c9 ff ff       	call   c000376d <dir_read>
c0006e56:	85 c0                	test   eax,eax
c0006e58:	75 21                	jne    c0006e7b <f_setlabel+0x1b5>
c0006e5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e5e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e62:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e65:	74 5d                	je     c0006ec4 <f_setlabel+0x1fe>
c0006e67:	85 db                	test   ebx,ebx
c0006e69:	74 0b                	je     c0006e76 <f_setlabel+0x1b0>
c0006e6b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e70:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e74:	eb 70                	jmp    c0006ee6 <f_setlabel+0x220>
c0006e76:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e79:	eb 70                	jmp    c0006eeb <f_setlabel+0x225>
c0006e7b:	83 f8 04             	cmp    eax,0x4
c0006e7e:	75 7c                	jne    c0006efc <f_setlabel+0x236>
c0006e80:	85 db                	test   ebx,ebx
c0006e82:	0f 84 a3 00 00 00    	je     c0006f2b <f_setlabel+0x265>
c0006e88:	ba 01 00 00 00       	mov    edx,0x1
c0006e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e91:	e8 51 ca ff ff       	call   c00038e7 <dir_alloc>
c0006e96:	89 c6                	mov    esi,eax
c0006e98:	85 c0                	test   eax,eax
c0006e9a:	0f 85 8b 00 00 00    	jne    c0006f2b <f_setlabel+0x265>
c0006ea0:	31 d2                	xor    edx,edx
c0006ea2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea6:	b9 20 00 00 00       	mov    ecx,0x20
c0006eab:	e8 e5 ab ff ff       	call   c0001a95 <mem_set>
c0006eb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebb:	75 18                	jne    c0006ed5 <f_setlabel+0x20f>
c0006ebd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec7:	b9 16 00 00 00       	mov    ecx,0x16
c0006ecc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed0:	83 c0 02             	add    eax,0x2
c0006ed3:	eb 9b                	jmp    c0006e70 <f_setlabel+0x1aa>
c0006ed5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ed9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ede:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee6:	e8 95 ab ff ff       	call   c0001a80 <mem_cpy>
c0006eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eef:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef7:	e8 0e d4 ff ff       	call   c000430a <sync_fs>
c0006efc:	89 c6                	mov    esi,eax
c0006efe:	eb 2b                	jmp    c0006f2b <f_setlabel+0x265>
c0006f00:	83 fb 0a             	cmp    ebx,0xa
c0006f03:	0f 87 2f fe ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006f09:	89 f0                	mov    eax,esi
c0006f0b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f0f:	43                   	inc    ebx
c0006f10:	e9 85 fe ff ff       	jmp    c0006d9a <f_setlabel+0xd4>
c0006f15:	83 fb 09             	cmp    ebx,0x9
c0006f18:	0f 87 1a fe ff ff    	ja     c0006d38 <f_setlabel+0x72>
c0006f1e:	89 f0                	mov    eax,esi
c0006f20:	66 c1 e8 08          	shr    ax,0x8
c0006f24:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f28:	43                   	inc    ebx
c0006f29:	eb de                	jmp    c0006f09 <f_setlabel+0x243>
c0006f2b:	89 f0                	mov    eax,esi
c0006f2d:	83 c4 74             	add    esp,0x74
c0006f30:	5b                   	pop    ebx
c0006f31:	5e                   	pop    esi
c0006f32:	c3                   	ret    

c0006f33 <f_forward>:
c0006f33:	55                   	push   ebp
c0006f34:	57                   	push   edi
c0006f35:	56                   	push   esi
c0006f36:	53                   	push   ebx
c0006f37:	83 ec 2c             	sub    esp,0x2c
c0006f3a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f3e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f48:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4c:	89 d8                	mov    eax,ebx
c0006f4e:	e8 b1 b1 ff ff       	call   c0002104 <validate>
c0006f53:	89 c5                	mov    ebp,eax
c0006f55:	85 c0                	test   eax,eax
c0006f57:	0f 85 aa 01 00 00    	jne    c0007107 <f_forward+0x1d4>
c0006f5d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f61:	85 ed                	test   ebp,ebp
c0006f63:	0f 85 9e 01 00 00    	jne    c0007107 <f_forward+0x1d4>
c0006f69:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6d:	0f 84 8f 01 00 00    	je     c0007102 <f_forward+0x1cf>
c0006f73:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f76:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f79:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7c:	bf 00 00 00 00       	mov    edi,0x0
c0006f81:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f84:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f88:	89 d1                	mov    ecx,edx
c0006f8a:	19 f9                	sbb    ecx,edi
c0006f8c:	0f 83 cf 00 00 00    	jae    c0007061 <f_forward+0x12e>
c0006f92:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f96:	e9 c6 00 00 00       	jmp    c0007061 <f_forward+0x12e>
c0006f9b:	50                   	push   eax
c0006f9c:	50                   	push   eax
c0006f9d:	6a 00                	push   0x0
c0006f9f:	6a 00                	push   0x0
c0006fa1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa5:	83 c4 10             	add    esp,0x10
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	0f 84 57 01 00 00    	je     c0007107 <f_forward+0x1d4>
c0006fb0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fba:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fbe:	89 d7                	mov    edi,edx
c0006fc0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc3:	89 c6                	mov    esi,eax
c0006fc5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fc9:	21 ce                	and    esi,ecx
c0006fcb:	89 c1                	mov    ecx,eax
c0006fcd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd3:	0f 84 98 00 00 00    	je     c0007071 <f_forward+0x13e>
c0006fd9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe0:	89 c8                	mov    eax,ecx
c0006fe2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe6:	e8 af ac ff ff       	call   c0001c9a <clst2sect>
c0006feb:	89 d7                	mov    edi,edx
c0006fed:	09 c7                	or     edi,eax
c0006fef:	0f 84 9e 00 00 00    	je     c0007093 <f_forward+0x160>
c0006ff5:	31 ff                	xor    edi,edi
c0006ff7:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffa:	01 c6                	add    esi,eax
c0006ffc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007000:	11 d7                	adc    edi,edx
c0007002:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007005:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007008:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700c:	39 fa                	cmp    edx,edi
c000700e:	0f 85 a2 00 00 00    	jne    c00070b6 <f_forward+0x183>
c0007014:	39 f0                	cmp    eax,esi
c0007016:	0f 85 9a 00 00 00    	jne    c00070b6 <f_forward+0x183>
c000701c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000701f:	ba 00 02 00 00       	mov    edx,0x200
c0007024:	25 ff 01 00 00       	and    eax,0x1ff
c0007029:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702d:	29 c2                	sub    edx,eax
c000702f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007032:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007035:	39 d1                	cmp    ecx,edx
c0007037:	76 02                	jbe    c000703b <f_forward+0x108>
c0007039:	89 d1                	mov    ecx,edx
c000703b:	8d 73 50             	lea    esi,[ebx+0x50]
c000703e:	52                   	push   edx
c000703f:	01 c6                	add    esi,eax
c0007041:	52                   	push   edx
c0007042:	51                   	push   ecx
c0007043:	56                   	push   esi
c0007044:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007048:	83 c4 10             	add    esp,0x10
c000704b:	85 c0                	test   eax,eax
c000704d:	74 44                	je     c0007093 <f_forward+0x160>
c000704f:	31 ff                	xor    edi,edi
c0007051:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007054:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007057:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000705f:	01 07                	add    DWORD PTR [edi],eax
c0007061:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007066:	0f 85 2f ff ff ff    	jne    c0006f9b <f_forward+0x68>
c000706c:	e9 96 00 00 00       	jmp    c0007107 <f_forward+0x1d4>
c0007071:	85 f6                	test   esi,esi
c0007073:	0f 85 60 ff ff ff    	jne    c0006fd9 <f_forward+0xa6>
c0007079:	89 d7                	mov    edi,edx
c000707b:	09 c7                	or     edi,eax
c000707d:	75 05                	jne    c0007084 <f_forward+0x151>
c000707f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007082:	eb 0a                	jmp    c000708e <f_forward+0x15b>
c0007084:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007087:	89 d8                	mov    eax,ebx
c0007089:	e8 d9 bc ff ff       	call   c0002d67 <get_fat>
c000708e:	83 f8 01             	cmp    eax,0x1
c0007091:	77 0b                	ja     c000709e <f_forward+0x16b>
c0007093:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007097:	bd 02 00 00 00       	mov    ebp,0x2
c000709c:	eb 69                	jmp    c0007107 <f_forward+0x1d4>
c000709e:	83 f8 ff             	cmp    eax,0xffffffff
c00070a1:	75 0b                	jne    c00070ae <f_forward+0x17b>
c00070a3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a7:	bd 01 00 00 00       	mov    ebp,0x1
c00070ac:	eb 59                	jmp    c0007107 <f_forward+0x1d4>
c00070ae:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b1:	e9 23 ff ff ff       	jmp    c0006fd9 <f_forward+0xa6>
c00070b6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ba:	79 20                	jns    c00070dc <f_forward+0x1a9>
c00070bc:	83 ec 0c             	sub    esp,0xc
c00070bf:	6a 01                	push   0x1
c00070c1:	52                   	push   edx
c00070c2:	50                   	push   eax
c00070c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cb:	50                   	push   eax
c00070cc:	e8 fb a8 ff ff       	call   c00019cc <disk_write>
c00070d1:	83 c4 20             	add    esp,0x20
c00070d4:	85 c0                	test   eax,eax
c00070d6:	75 cb                	jne    c00070a3 <f_forward+0x170>
c00070d8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070dc:	83 ec 0c             	sub    esp,0xc
c00070df:	6a 01                	push   0x1
c00070e1:	57                   	push   edi
c00070e2:	56                   	push   esi
c00070e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070eb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ef:	50                   	push   eax
c00070f0:	e8 c1 a8 ff ff       	call   c00019b6 <disk_read>
c00070f5:	83 c4 20             	add    esp,0x20
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 84 1c ff ff ff    	je     c000701c <f_forward+0xe9>
c0007100:	eb a1                	jmp    c00070a3 <f_forward+0x170>
c0007102:	bd 07 00 00 00       	mov    ebp,0x7
c0007107:	83 c4 2c             	add    esp,0x2c
c000710a:	89 e8                	mov    eax,ebp
c000710c:	5b                   	pop    ebx
c000710d:	5e                   	pop    esi
c000710e:	5f                   	pop    edi
c000710f:	5d                   	pop    ebp
c0007110:	c3                   	ret    

c0007111 <f_mkfs>:
c0007111:	55                   	push   ebp
c0007112:	57                   	push   edi
c0007113:	56                   	push   esi
c0007114:	53                   	push   ebx
c0007115:	bb 0b 00 00 00       	mov    ebx,0xb
c000711a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007120:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007127:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000712e:	e8 b0 ae ff ff       	call   c0001fe3 <get_ldnumber>
c0007133:	85 c0                	test   eax,eax
c0007135:	0f 88 ec 10 00 00    	js     c0008227 <f_mkfs+0x1116>
c000713b:	8b 14 85 e0 b7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4820]
c0007142:	85 d2                	test   edx,edx
c0007144:	74 03                	je     c0007149 <f_mkfs+0x38>
c0007146:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007149:	85 f6                	test   esi,esi
c000714b:	75 05                	jne    c0007152 <f_mkfs+0x41>
c000714d:	be 80 6e 02 c0       	mov    esi,0xc0026e80
c0007152:	83 ec 0c             	sub    esp,0xc
c0007155:	0f b6 c0             	movzx  eax,al
c0007158:	bb 03 00 00 00       	mov    ebx,0x3
c000715d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007165:	e8 49 a8 ff ff       	call   c00019b3 <disk_initialize>
c000716a:	83 c4 10             	add    esp,0x10
c000716d:	a8 01                	test   al,0x1
c000716f:	0f 85 b2 10 00 00    	jne    c0008227 <f_mkfs+0x1116>
c0007175:	bb 0a 00 00 00       	mov    ebx,0xa
c000717a:	a8 04                	test   al,0x4
c000717c:	0f 85 a5 10 00 00    	jne    c0008227 <f_mkfs+0x1116>
c0007182:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007185:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007189:	85 c0                	test   eax,eax
c000718b:	75 20                	jne    c00071ad <f_mkfs+0x9c>
c000718d:	51                   	push   ecx
c000718e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007192:	50                   	push   eax
c0007193:	6a 03                	push   0x3
c0007195:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007199:	e8 44 a8 ff ff       	call   c00019e2 <disk_ioctl>
c000719e:	83 c4 10             	add    esp,0x10
c00071a1:	85 c0                	test   eax,eax
c00071a3:	74 08                	je     c00071ad <f_mkfs+0x9c>
c00071a5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ad:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071b9:	77 04                	ja     c00071bf <f_mkfs+0xae>
c00071bb:	85 c2                	test   edx,eax
c00071bd:	74 08                	je     c00071c7 <f_mkfs+0xb6>
c00071bf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071ca:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071ce:	48                   	dec    eax
c00071cf:	3c 01                	cmp    al,0x1
c00071d1:	76 05                	jbe    c00071d8 <f_mkfs+0xc7>
c00071d3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071d8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071df:	48                   	dec    eax
c00071e0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e5:	77 07                	ja     c00071ee <f_mkfs+0xdd>
c00071e7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0xe5>
c00071ee:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071f9:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00071ff:	77 07                	ja     c0007208 <f_mkfs+0xf7>
c0007201:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007204:	85 d8                	test   eax,ebx
c0007206:	74 02                	je     c000720a <f_mkfs+0xf9>
c0007208:	31 db                	xor    ebx,ebx
c000720a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007215:	77 0a                	ja     c0007221 <f_mkfs+0x110>
c0007217:	bb 11 00 00 00       	mov    ebx,0x11
c000721c:	e9 06 10 00 00       	jmp    c0008227 <f_mkfs+0x1116>
c0007221:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007228:	8b 36                	mov    esi,DWORD PTR [esi]
c000722a:	85 ed                	test   ebp,ebp
c000722c:	75 1e                	jne    c000724c <f_mkfs+0x13b>
c000722e:	83 ec 0c             	sub    esp,0xc
c0007231:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007238:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723d:	50                   	push   eax
c000723e:	e8 f1 0f 00 00       	call   c0008234 <ff_memalloc>
c0007243:	83 c4 10             	add    esp,0x10
c0007246:	89 c5                	mov    ebp,eax
c0007248:	85 c0                	test   eax,eax
c000724a:	74 cb                	je     c0007217 <f_mkfs+0x106>
c000724c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007254:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725c:	52                   	push   edx
c000725d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007261:	50                   	push   eax
c0007262:	6a 01                	push   0x1
c0007264:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007268:	e8 75 a7 ff ff       	call   c00019e2 <disk_ioctl>
c000726d:	83 c4 10             	add    esp,0x10
c0007270:	85 c0                	test   eax,eax
c0007272:	0f 85 4a 0f 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007278:	89 f1                	mov    ecx,esi
c000727a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007282:	83 e1 0f             	and    ecx,0xf
c0007285:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007291:	83 e6 08             	and    esi,0x8
c0007294:	75 56                	jne    c00072ec <f_mkfs+0x1db>
c0007296:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000729e:	83 ff 00             	cmp    edi,0x0
c00072a1:	76 20                	jbe    c00072c3 <f_mkfs+0x1b2>
c00072a3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b6:	83 d7 ff             	adc    edi,0xffffffff
c00072b9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c1:	eb 21                	jmp    c00072e4 <f_mkfs+0x1d3>
c00072c3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c8:	39 f2                	cmp    edx,esi
c00072ca:	19 f8                	sbb    eax,edi
c00072cc:	73 1e                	jae    c00072ec <f_mkfs+0x1db>
c00072ce:	83 c6 c1             	add    esi,0xffffffc1
c00072d1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072d9:	83 d7 ff             	adc    edi,0xffffffff
c00072dc:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fb:	31 c0                	xor    eax,eax
c00072fd:	ba 7f 00 00 00       	mov    edx,0x7f
c0007302:	89 c7                	mov    edi,eax
c0007304:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007307:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730b:	0f 83 c5 0a 00 00    	jae    c0007dd6 <f_mkfs+0xcc5>
c0007311:	89 df                	mov    edi,ebx
c0007313:	c1 ef 09             	shr    edi,0x9
c0007316:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007321:	c1 ef 09             	shr    edi,0x9
c0007324:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007329:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732d:	74 29                	je     c0007358 <f_mkfs+0x247>
c000732f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007335:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733a:	0f 97 c2             	seta   dl
c000733d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007340:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007344:	0f 92 c0             	setb   al
c0007347:	08 c2                	or     dl,al
c0007349:	75 5b                	jne    c00073a6 <f_mkfs+0x295>
c000734b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000734f:	83 e0 07             	and    eax,0x7
c0007352:	3c 04                	cmp    al,0x4
c0007354:	74 50                	je     c00073a6 <f_mkfs+0x295>
c0007356:	eb 1b                	jmp    c0007373 <f_mkfs+0x262>
c0007358:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735d:	0f 87 73 0a 00 00    	ja     c0007dd6 <f_mkfs+0xcc5>
c0007363:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007369:	76 08                	jbe    c0007373 <f_mkfs+0x262>
c000736b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007373:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007377:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737b:	83 e0 01             	and    eax,0x1
c000737e:	80 e1 02             	and    cl,0x2
c0007381:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007385:	74 0d                	je     c0007394 <f_mkfs+0x283>
c0007387:	84 c0                	test   al,al
c0007389:	0f 84 53 09 00 00    	je     c0007ce2 <f_mkfs+0xbd1>
c000738f:	e9 12 08 00 00       	jmp    c0007ba6 <f_mkfs+0xa95>
c0007394:	bb 13 00 00 00       	mov    ebx,0x13
c0007399:	84 c0                	test   al,al
c000739b:	0f 85 05 08 00 00    	jne    c0007ba6 <f_mkfs+0xa95>
c00073a1:	e9 39 0e 00 00       	jmp    c00081df <f_mkfs+0x10ce>
c00073a6:	31 c0                	xor    eax,eax
c00073a8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ad:	89 c7                	mov    edi,eax
c00073af:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b6:	0f 83 1a 0a 00 00    	jae    c0007dd6 <f_mkfs+0xcc5>
c00073bc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c2:	77 39                	ja     c00073fd <f_mkfs+0x2ec>
c00073c4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073c9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d8:	73 08                	jae    c00073e2 <f_mkfs+0x2d1>
c00073da:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ea:	b8 00 00 00 00       	mov    eax,0x0
c00073ef:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f3:	73 08                	jae    c00073fd <f_mkfs+0x2ec>
c00073f5:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007401:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007405:	83 c0 20             	add    eax,0x20
c0007408:	83 d2 00             	adc    edx,0x0
c000740b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000740f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007413:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007417:	31 d2                	xor    edx,edx
c0007419:	31 ff                	xor    edi,edi
c000741b:	52                   	push   edx
c000741c:	89 fb                	mov    ebx,edi
c000741e:	50                   	push   eax
c000741f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007423:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007427:	e8 e0 d0 01 00       	call   c002450c <__udivdi3>
c000742c:	83 c4 10             	add    esp,0x10
c000742f:	c1 e0 02             	shl    eax,0x2
c0007432:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007436:	05 07 02 00 00       	add    eax,0x207
c000743b:	89 f1                	mov    ecx,esi
c000743d:	c1 e8 09             	shr    eax,0x9
c0007440:	83 c1 ff             	add    ecx,0xffffffff
c0007443:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007447:	83 d3 ff             	adc    ebx,0xffffffff
c000744a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000744e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007452:	31 d2                	xor    edx,edx
c0007454:	01 c8                	add    eax,ecx
c0007456:	11 da                	adc    edx,ebx
c0007458:	89 c1                	mov    ecx,eax
c000745a:	f7 de                	neg    esi
c000745c:	89 d0                	mov    eax,edx
c000745e:	83 d7 00             	adc    edi,0x0
c0007461:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007465:	f7 df                	neg    edi
c0007467:	21 f1                	and    ecx,esi
c0007469:	21 f8                	and    eax,edi
c000746b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000746f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007473:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007477:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000747f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007482:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007486:	0f ac d0 01          	shrd   eax,edx,0x1
c000748a:	89 df                	mov    edi,ebx
c000748c:	d1 ea                	shr    edx,1
c000748e:	39 c1                	cmp    ecx,eax
c0007490:	19 d7                	sbb    edi,edx
c0007492:	0f 83 3e 09 00 00    	jae    c0007dd6 <f_mkfs+0xcc5>
c0007498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749c:	31 d2                	xor    edx,edx
c000749e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ad:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bd:	83 f8 0f             	cmp    eax,0xf
c00074c0:	0f 86 10 09 00 00    	jbe    c0007dd6 <f_mkfs+0xcc5>
c00074c6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074ce:	0f 87 02 09 00 00    	ja     c0007dd6 <f_mkfs+0xcc5>
c00074d4:	31 d2                	xor    edx,edx
c00074d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074da:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e2:	83 c0 07             	add    eax,0x7
c00074e5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ed:	c1 e8 03             	shr    eax,0x3
c00074f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074ff:	c1 e0 09             	shl    eax,0x9
c0007502:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007506:	48                   	dec    eax
c0007507:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000750f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007513:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007517:	31 d2                	xor    edx,edx
c0007519:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007531:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007535:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007539:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753d:	31 ff                	xor    edi,edi
c000753f:	31 f6                	xor    esi,esi
c0007541:	31 db                	xor    ebx,ebx
c0007543:	85 ff                	test   edi,edi
c0007545:	74 05                	je     c000754c <f_mkfs+0x43b>
c0007547:	4f                   	dec    edi
c0007548:	74 44                	je     c000758e <f_mkfs+0x47d>
c000754a:	eb 4f                	jmp    c000759b <f_mkfs+0x48a>
c000754c:	83 ec 0c             	sub    esp,0xc
c000754f:	0f b7 c3             	movzx  eax,bx
c0007552:	50                   	push   eax
c0007553:	e8 05 0e 00 00       	call   c000835d <ff_wtoupper>
c0007558:	83 c4 10             	add    esp,0x10
c000755b:	89 c1                	mov    ecx,eax
c000755d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007560:	66 39 c3             	cmp    bx,ax
c0007563:	75 3e                	jne    c00075a3 <f_mkfs+0x492>
c0007565:	be 01 00 00 00       	mov    esi,0x1
c000756a:	89 df                	mov    edi,ebx
c000756c:	66 01 f7             	add    di,si
c000756f:	75 07                	jne    c0007578 <f_mkfs+0x467>
c0007571:	83 fe 7f             	cmp    esi,0x7f
c0007574:	77 31                	ja     c00075a7 <f_mkfs+0x496>
c0007576:	eb 16                	jmp    c000758e <f_mkfs+0x47d>
c0007578:	83 ec 0c             	sub    esp,0xc
c000757b:	0f b7 ff             	movzx  edi,di
c000757e:	57                   	push   edi
c000757f:	e8 d9 0d 00 00       	call   c000835d <ff_wtoupper>
c0007584:	83 c4 10             	add    esp,0x10
c0007587:	39 c7                	cmp    edi,eax
c0007589:	75 e6                	jne    c0007571 <f_mkfs+0x460>
c000758b:	46                   	inc    esi
c000758c:	eb dc                	jmp    c000756a <f_mkfs+0x459>
c000758e:	31 c0                	xor    eax,eax
c0007590:	89 d9                	mov    ecx,ebx
c0007592:	4e                   	dec    esi
c0007593:	0f 95 c0             	setne  al
c0007596:	43                   	inc    ebx
c0007597:	89 c7                	mov    edi,eax
c0007599:	eb 14                	jmp    c00075af <f_mkfs+0x49e>
c000759b:	89 f1                	mov    ecx,esi
c000759d:	01 f3                	add    ebx,esi
c000759f:	31 ff                	xor    edi,edi
c00075a1:	eb 0c                	jmp    c00075af <f_mkfs+0x49e>
c00075a3:	89 d3                	mov    ebx,edx
c00075a5:	eb 08                	jmp    c00075af <f_mkfs+0x49e>
c00075a7:	bf 02 00 00 00       	mov    edi,0x2
c00075ac:	83 c9 ff             	or     ecx,0xffffffff
c00075af:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ba:	0f b6 c1             	movzx  eax,cl
c00075bd:	e8 3a a9 ff ff       	call   c0001efc <xsum32>
c00075c2:	66 c1 e9 08          	shr    cx,0x8
c00075c6:	89 c2                	mov    edx,eax
c00075c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cb:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075cf:	0f b7 c1             	movzx  eax,cx
c00075d2:	e8 25 a9 ff ff       	call   c0001efc <xsum32>
c00075d7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075dc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e0:	66 85 db             	test   bx,bx
c00075e3:	74 1f                	je     c0007604 <f_mkfs+0x4f3>
c00075e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ef:	83 c0 02             	add    eax,0x2
c00075f2:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075f8:	39 c2                	cmp    edx,eax
c00075fa:	74 08                	je     c0007604 <f_mkfs+0x4f3>
c00075fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ff:	e9 3f ff ff ff       	jmp    c0007543 <f_mkfs+0x432>
c0007604:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007607:	83 ec 0c             	sub    esp,0xc
c000760a:	05 01 02 00 00       	add    eax,0x201
c000760f:	c1 e8 09             	shr    eax,0x9
c0007612:	50                   	push   eax
c0007613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007617:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761f:	55                   	push   ebp
c0007620:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007624:	e8 a3 a3 ff ff       	call   c00019cc <disk_write>
c0007629:	83 c4 20             	add    esp,0x20
c000762c:	85 c0                	test   eax,eax
c000762e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007631:	0f 85 8b 0b 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007637:	89 d0                	mov    eax,edx
c0007639:	31 d2                	xor    edx,edx
c000763b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000763f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007643:	66 85 db             	test   bx,bx
c0007646:	74 04                	je     c000764c <f_mkfs+0x53b>
c0007648:	31 c0                	xor    eax,eax
c000764a:	eb b0                	jmp    c00075fc <f_mkfs+0x4eb>
c000764c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007650:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007654:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007658:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000765e:	31 d2                	xor    edx,edx
c0007660:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000766f:	c1 eb 09             	shr    ebx,0x9
c0007672:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007679:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007685:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007689:	8d 70 01             	lea    esi,[eax+0x1]
c000768c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007690:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007694:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769b:	31 d2                	xor    edx,edx
c000769d:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a5:	89 c1                	mov    ecx,eax
c00076a7:	89 e8                	mov    eax,ebp
c00076a9:	e8 e7 a3 ff ff       	call   c0001a95 <mem_set>
c00076ae:	31 c0                	xor    eax,eax
c00076b0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b3:	76 10                	jbe    c00076c5 <f_mkfs+0x5b4>
c00076b5:	83 fe 07             	cmp    esi,0x7
c00076b8:	76 0b                	jbe    c00076c5 <f_mkfs+0x5b4>
c00076ba:	40                   	inc    eax
c00076bb:	83 ee 08             	sub    esi,0x8
c00076be:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c3:	eb eb                	jmp    c00076b0 <f_mkfs+0x59f>
c00076c5:	b2 01                	mov    dl,0x1
c00076c7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cb:	85 f6                	test   esi,esi
c00076cd:	74 0c                	je     c00076db <f_mkfs+0x5ca>
c00076cf:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d2:	76 07                	jbe    c00076db <f_mkfs+0x5ca>
c00076d4:	08 11                	or     BYTE PTR [ecx],dl
c00076d6:	4e                   	dec    esi
c00076d7:	d1 e2                	shl    edx,1
c00076d9:	eb f0                	jmp    c00076cb <f_mkfs+0x5ba>
c00076db:	89 df                	mov    edi,ebx
c00076dd:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e1:	76 04                	jbe    c00076e7 <f_mkfs+0x5d6>
c00076e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	57                   	push   edi
c00076eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f3:	55                   	push   ebp
c00076f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076f8:	e8 cf a2 ff ff       	call   c00019cc <disk_write>
c00076fd:	83 c4 20             	add    esp,0x20
c0007700:	85 c0                	test   eax,eax
c0007702:	0f 85 ba 0a 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007708:	31 d2                	xor    edx,edx
c000770a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000770e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007712:	29 fb                	sub    ebx,edi
c0007714:	0f 85 7a ff ff ff    	jne    c0007694 <f_mkfs+0x583>
c000771a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000771e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007726:	31 f6                	xor    esi,esi
c0007728:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772f:	31 d2                	xor    edx,edx
c0007731:	89 e8                	mov    eax,ebp
c0007733:	e8 5d a3 ff ff       	call   c0001a95 <mem_set>
c0007738:	31 c9                	xor    ecx,ecx
c000773a:	85 db                	test   ebx,ebx
c000773c:	75 40                	jne    c000777e <f_mkfs+0x66d>
c000773e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007743:	89 e8                	mov    eax,ebp
c0007745:	bb 02 00 00 00       	mov    ebx,0x2
c000774a:	e8 28 a3 ff ff       	call   c0001a77 <st_dword>
c000774f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007752:	83 ca ff             	or     edx,0xffffffff
c0007755:	e8 1d a3 ff ff       	call   c0001a77 <st_dword>
c000775a:	b9 08 00 00 00       	mov    ecx,0x8
c000775f:	eb 1d                	jmp    c000777e <f_mkfs+0x66d>
c0007761:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007764:	76 3b                	jbe    c00077a1 <f_mkfs+0x690>
c0007766:	43                   	inc    ebx
c0007767:	83 fe 01             	cmp    esi,0x1
c000776a:	89 da                	mov    edx,ebx
c000776c:	77 03                	ja     c0007771 <f_mkfs+0x660>
c000776e:	83 ca ff             	or     edx,0xffffffff
c0007771:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007775:	4e                   	dec    esi
c0007776:	e8 fc a2 ff ff       	call   c0001a77 <st_dword>
c000777b:	83 c1 04             	add    ecx,0x4
c000777e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007782:	85 f6                	test   esi,esi
c0007784:	75 db                	jne    c0007761 <f_mkfs+0x650>
c0007786:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778b:	77 14                	ja     c00077a1 <f_mkfs+0x690>
c000778d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007791:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007798:	85 f6                	test   esi,esi
c000779a:	74 05                	je     c00077a1 <f_mkfs+0x690>
c000779c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000779f:	77 dd                	ja     c000777e <f_mkfs+0x66d>
c00077a1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a9:	39 cf                	cmp    edi,ecx
c00077ab:	76 02                	jbe    c00077af <f_mkfs+0x69e>
c00077ad:	89 cf                	mov    edi,ecx
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	57                   	push   edi
c00077b3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bb:	55                   	push   ebp
c00077bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c0:	e8 07 a2 ff ff       	call   c00019cc <disk_write>
c00077c5:	83 c4 20             	add    esp,0x20
c00077c8:	85 c0                	test   eax,eax
c00077ca:	0f 85 f2 09 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c00077d0:	31 d2                	xor    edx,edx
c00077d2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077da:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077de:	0f 85 48 ff ff ff    	jne    c000772c <f_mkfs+0x61b>
c00077e4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e7:	31 d2                	xor    edx,edx
c00077e9:	89 e8                	mov    eax,ebp
c00077eb:	31 ff                	xor    edi,edi
c00077ed:	e8 a3 a2 ff ff       	call   c0001a95 <mem_set>
c00077f2:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f5:	ba 02 00 00 00       	mov    edx,0x2
c00077fa:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077fe:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007802:	e8 70 a2 ff ff       	call   c0001a77 <st_dword>
c0007807:	8d 45 38             	lea    eax,[ebp+0x38]
c000780a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000780e:	e8 64 a2 ff ff       	call   c0001a77 <st_dword>
c0007813:	8d 45 44             	lea    eax,[ebp+0x44]
c0007816:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000781e:	e8 54 a2 ff ff       	call   c0001a77 <st_dword>
c0007823:	8d 45 54             	lea    eax,[ebp+0x54]
c0007826:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000782e:	83 c2 02             	add    edx,0x2
c0007831:	e8 41 a2 ff ff       	call   c0001a77 <st_dword>
c0007836:	8d 45 58             	lea    eax,[ebp+0x58]
c0007839:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007841:	e8 31 a2 ff ff       	call   c0001a77 <st_dword>
c0007846:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000784f:	89 c6                	mov    esi,eax
c0007851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007855:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007859:	89 04 24             	mov    DWORD PTR [esp],eax
c000785c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007860:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007863:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007867:	39 cb                	cmp    ebx,ecx
c0007869:	76 02                	jbe    c000786d <f_mkfs+0x75c>
c000786b:	89 cb                	mov    ebx,ecx
c000786d:	83 ec 0c             	sub    esp,0xc
c0007870:	53                   	push   ebx
c0007871:	57                   	push   edi
c0007872:	56                   	push   esi
c0007873:	55                   	push   ebp
c0007874:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007878:	e8 4f a1 ff ff       	call   c00019cc <disk_write>
c000787d:	83 c4 20             	add    esp,0x20
c0007880:	85 c0                	test   eax,eax
c0007882:	0f 85 3a 09 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007888:	31 d2                	xor    edx,edx
c000788a:	b9 00 02 00 00       	mov    ecx,0x200
c000788f:	89 e8                	mov    eax,ebp
c0007891:	e8 ff a1 ff ff       	call   c0001a95 <mem_set>
c0007896:	31 d2                	xor    edx,edx
c0007898:	01 de                	add    esi,ebx
c000789a:	11 d7                	adc    edi,edx
c000789c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000789f:	75 bf                	jne    c0007860 <f_mkfs+0x74f>
c00078a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b1:	b9 00 02 00 00       	mov    ecx,0x200
c00078b6:	31 d2                	xor    edx,edx
c00078b8:	89 e8                	mov    eax,ebp
c00078ba:	e8 d6 a1 ff ff       	call   c0001a95 <mem_set>
c00078bf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c4:	ba 60 6f 02 c0       	mov    edx,0xc0026f60
c00078c9:	89 e8                	mov    eax,ebp
c00078cb:	e8 b0 a1 ff ff       	call   c0001a80 <mem_cpy>
c00078d0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078db:	e8 9a a1 ff ff       	call   c0001a7a <st_qword>
c00078e0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078eb:	e8 8a a1 ff ff       	call   c0001a7a <st_qword>
c00078f0:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f3:	ba 20 00 00 00       	mov    edx,0x20
c00078f8:	e8 7a a1 ff ff       	call   c0001a77 <st_dword>
c00078fd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007901:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007905:	e8 6d a1 ff ff       	call   c0001a77 <st_dword>
c000790a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000790e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007912:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007916:	e8 5c a1 ff ff       	call   c0001a77 <st_dword>
c000791b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000791e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007922:	e8 50 a1 ff ff       	call   c0001a77 <st_dword>
c0007927:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792b:	8d 50 02             	lea    edx,[eax+0x2]
c000792e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007931:	e8 41 a1 ff ff       	call   c0001a77 <st_dword>
c0007936:	8d 45 64             	lea    eax,[ebp+0x64]
c0007939:	ba 00 00 21 50       	mov    edx,0x50210000
c000793e:	e8 34 a1 ff ff       	call   c0001a77 <st_dword>
c0007943:	8d 45 68             	lea    eax,[ebp+0x68]
c0007946:	ba 00 01 00 00       	mov    edx,0x100
c000794b:	e8 23 a1 ff ff       	call   c0001a73 <st_word>
c0007950:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007954:	b8 0a 00 00 00       	mov    eax,0xa
c0007959:	48                   	dec    eax
c000795a:	74 05                	je     c0007961 <f_mkfs+0x850>
c000795c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000795f:	eb f8                	jmp    c0007959 <f_mkfs+0x848>
c0007961:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007965:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007969:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007971:	74 05                	je     c0007978 <f_mkfs+0x867>
c0007973:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007976:	eb f5                	jmp    c000796d <f_mkfs+0x85c>
c0007978:	8d 45 78             	lea    eax,[ebp+0x78]
c000797b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007980:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007986:	31 db                	xor    ebx,ebx
c0007988:	e8 e6 a0 ff ff       	call   c0001a73 <st_word>
c000798d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007993:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007998:	89 04 24             	mov    DWORD PTR [esp],eax
c000799b:	e8 d3 a0 ff ff       	call   c0001a73 <st_word>
c00079a0:	31 c9                	xor    ecx,ecx
c00079a2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a5:	83 f8 01             	cmp    eax,0x1
c00079a8:	76 13                	jbe    c00079bd <f_mkfs+0x8ac>
c00079aa:	83 f9 70             	cmp    ecx,0x70
c00079ad:	74 0e                	je     c00079bd <f_mkfs+0x8ac>
c00079af:	89 da                	mov    edx,ebx
c00079b1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b6:	e8 41 a5 ff ff       	call   c0001efc <xsum32>
c00079bb:	89 c3                	mov    ebx,eax
c00079bd:	41                   	inc    ecx
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 dc                	jne    c00079a2 <f_mkfs+0x891>
c00079c6:	89 f0                	mov    eax,esi
c00079c8:	89 fa                	mov    edx,edi
c00079ca:	83 c0 01             	add    eax,0x1
c00079cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d1:	83 d2 00             	adc    edx,0x0
c00079d4:	83 ec 0c             	sub    esp,0xc
c00079d7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079db:	6a 01                	push   0x1
c00079dd:	57                   	push   edi
c00079de:	56                   	push   esi
c00079df:	55                   	push   ebp
c00079e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e4:	e8 e3 9f ff ff       	call   c00019cc <disk_write>
c00079e9:	83 c4 20             	add    esp,0x20
c00079ec:	85 c0                	test   eax,eax
c00079ee:	0f 85 ce 07 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c00079f4:	31 d2                	xor    edx,edx
c00079f6:	b9 00 02 00 00       	mov    ecx,0x200
c00079fb:	89 e8                	mov    eax,ebp
c00079fd:	e8 93 a0 ff ff       	call   c0001a95 <mem_set>
c0007a02:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0a:	e8 64 a0 ff ff       	call   c0001a73 <st_word>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 09             	add    eax,0x9
c0007a16:	83 d2 00             	adc    edx,0x0
c0007a19:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a20:	31 c9                	xor    ecx,ecx
c0007a22:	41                   	inc    ecx
c0007a23:	89 da                	mov    edx,ebx
c0007a25:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2a:	e8 cd a4 ff ff       	call   c0001efc <xsum32>
c0007a2f:	89 c3                	mov    ebx,eax
c0007a31:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a37:	75 e9                	jne    c0007a22 <f_mkfs+0x911>
c0007a39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a41:	83 c0 01             	add    eax,0x1
c0007a44:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a48:	83 d2 00             	adc    edx,0x0
c0007a4b:	83 ec 0c             	sub    esp,0xc
c0007a4e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a52:	6a 01                	push   0x1
c0007a54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5c:	55                   	push   ebp
c0007a5d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a61:	e8 66 9f ff ff       	call   c00019cc <disk_write>
c0007a66:	83 c4 20             	add    esp,0x20
c0007a69:	85 c0                	test   eax,eax
c0007a6b:	0f 85 51 07 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a75:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a79:	75 09                	jne    c0007a84 <f_mkfs+0x973>
c0007a7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a82:	74 12                	je     c0007a96 <f_mkfs+0x985>
c0007a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a94:	eb 8a                	jmp    c0007a20 <f_mkfs+0x90f>
c0007a96:	31 d2                	xor    edx,edx
c0007a98:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9d:	89 e8                	mov    eax,ebp
c0007a9f:	e8 f1 9f ff ff       	call   c0001a95 <mem_set>
c0007aa4:	83 c6 0b             	add    esi,0xb
c0007aa7:	83 d7 00             	adc    edi,0x0
c0007aaa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aae:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab2:	31 c9                	xor    ecx,ecx
c0007ab4:	41                   	inc    ecx
c0007ab5:	89 da                	mov    edx,ebx
c0007ab7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abc:	e8 3b a4 ff ff       	call   c0001efc <xsum32>
c0007ac1:	89 c3                	mov    ebx,eax
c0007ac3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac9:	75 e9                	jne    c0007ab4 <f_mkfs+0x9a3>
c0007acb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ace:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad2:	83 c6 01             	add    esi,0x1
c0007ad5:	83 d7 00             	adc    edi,0x0
c0007ad8:	83 ec 0c             	sub    esp,0xc
c0007adb:	6a 01                	push   0x1
c0007add:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae5:	55                   	push   ebp
c0007ae6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aea:	e8 dd 9e ff ff       	call   c00019cc <disk_write>
c0007aef:	83 c4 20             	add    esp,0x20
c0007af2:	85 c0                	test   eax,eax
c0007af4:	0f 85 c8 06 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007afa:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007afe:	75 06                	jne    c0007b06 <f_mkfs+0x9f5>
c0007b00:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b04:	74 09                	je     c0007b0f <f_mkfs+0x9fe>
c0007b06:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b09:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0d:	eb a3                	jmp    c0007ab2 <f_mkfs+0x9a1>
c0007b0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b13:	89 da                	mov    edx,ebx
c0007b15:	01 e8                	add    eax,ebp
c0007b17:	e8 5b 9f ff ff       	call   c0001a77 <st_dword>
c0007b1c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b21:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b29:	75 e4                	jne    c0007b0f <f_mkfs+0x9fe>
c0007b2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b32:	83 c6 02             	add    esi,0x2
c0007b35:	83 d7 00             	adc    edi,0x0
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	6a 01                	push   0x1
c0007b3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b45:	55                   	push   ebp
c0007b46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4a:	e8 7d 9e ff ff       	call   c00019cc <disk_write>
c0007b4f:	83 c4 20             	add    esp,0x20
c0007b52:	85 c0                	test   eax,eax
c0007b54:	0f 85 68 06 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007b5a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b5f:	74 0d                	je     c0007b6e <f_mkfs+0xa5d>
c0007b61:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b69:	e9 43 fd ff ff       	jmp    c00078b1 <f_mkfs+0x7a0>
c0007b6e:	b1 07                	mov    cl,0x7
c0007b70:	e9 e3 05 00 00       	jmp    c0008158 <f_mkfs+0x1047>
c0007b75:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7a:	0f 85 4f 02 00 00    	jne    c0007dcf <f_mkfs+0xcbe>
c0007b80:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b85:	0f 86 22 02 00 00    	jbe    c0007dad <f_mkfs+0xc9c>
c0007b8b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b90:	0f 85 81 06 00 00    	jne    c0008217 <f_mkfs+0x1106>
c0007b96:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9d:	83 f8 40             	cmp    eax,0x40
c0007ba0:	0f 87 51 06 00 00    	ja     c00081f7 <f_mkfs+0x10e6>
c0007ba6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007baa:	85 ff                	test   edi,edi
c0007bac:	75 1c                	jne    c0007bca <f_mkfs+0xab9>
c0007bae:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb1:	ba 60 6e 02 c0       	mov    edx,0xc0026e60
c0007bb6:	c1 e9 0c             	shr    ecx,0xc
c0007bb9:	bf 01 00 00 00       	mov    edi,0x1
c0007bbe:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc1:	66 85 c0             	test   ax,ax
c0007bc4:	0f 85 95 01 00 00    	jne    c0007d5f <f_mkfs+0xc4e>
c0007bca:	31 d2                	xor    edx,edx
c0007bcc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bcf:	f7 f7                	div    edi
c0007bd1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd6:	0f 86 95 01 00 00    	jbe    c0007d71 <f_mkfs+0xc60>
c0007bdc:	83 c0 02             	add    eax,0x2
c0007bdf:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be4:	01 c0                	add    eax,eax
c0007be6:	05 ff 01 00 00       	add    eax,0x1ff
c0007beb:	be 01 00 00 00       	mov    esi,0x1
c0007bf0:	c1 e8 09             	shr    eax,0x9
c0007bf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfb:	c1 e0 05             	shl    eax,0x5
c0007bfe:	c1 e8 09             	shr    eax,0x9
c0007c01:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c05:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0a:	31 d2                	xor    edx,edx
c0007c0c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c10:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c14:	89 f0                	mov    eax,esi
c0007c16:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c26:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2a:	31 d2                	xor    edx,edx
c0007c2c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c31:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c35:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c39:	31 db                	xor    ebx,ebx
c0007c3b:	01 c8                	add    eax,ecx
c0007c3d:	11 da                	adc    edx,ebx
c0007c3f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c43:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c47:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c4f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c53:	f7 da                	neg    edx
c0007c55:	21 d1                	and    ecx,edx
c0007c57:	29 d9                	sub    ecx,ebx
c0007c59:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c5e:	0f 85 20 01 00 00    	jne    c0007d84 <f_mkfs+0xc73>
c0007c64:	31 db                	xor    ebx,ebx
c0007c66:	01 ce                	add    esi,ecx
c0007c68:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c70:	31 d2                	xor    edx,edx
c0007c72:	89 f8                	mov    eax,edi
c0007c74:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c78:	c1 e0 04             	shl    eax,0x4
c0007c7b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c7f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c83:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c87:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c8e:	19 d3                	sbb    ebx,edx
c0007c90:	0f 82 40 01 00 00    	jb     c0007dd6 <f_mkfs+0xcc5>
c0007c96:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c99:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9d:	89 c8                	mov    eax,ecx
c0007c9f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ca8:	29 f0                	sub    eax,esi
c0007caa:	29 d0                	sub    eax,edx
c0007cac:	31 d2                	xor    edx,edx
c0007cae:	f7 f7                	div    edi
c0007cb0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb5:	89 c3                	mov    ebx,eax
c0007cb7:	0f 85 b8 fe ff ff    	jne    c0007b75 <f_mkfs+0xa64>
c0007cbd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc2:	0f 87 1d 01 00 00    	ja     c0007de5 <f_mkfs+0xcd4>
c0007cc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccd:	0f 85 03 01 00 00    	jne    c0007dd6 <f_mkfs+0xcc5>
c0007cd3:	83 ff 01             	cmp    edi,0x1
c0007cd6:	0f 86 fa 00 00 00    	jbe    c0007dd6 <f_mkfs+0xcc5>
c0007cdc:	d1 ef                	shr    edi,1
c0007cde:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce9:	85 db                	test   ebx,ebx
c0007ceb:	75 2d                	jne    c0007d1a <f_mkfs+0xc09>
c0007ced:	89 cb                	mov    ebx,ecx
c0007cef:	ba 70 6e 02 c0       	mov    edx,0xc0026e70
c0007cf4:	c1 eb 11             	shr    ebx,0x11
c0007cf7:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cff:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d02:	66 85 c0             	test   ax,ax
c0007d05:	74 11                	je     c0007d18 <f_mkfs+0xc07>
c0007d07:	83 c2 02             	add    edx,0x2
c0007d0a:	39 d8                	cmp    eax,ebx
c0007d0c:	77 0a                	ja     c0007d18 <f_mkfs+0xc07>
c0007d0e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d12:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d16:	eb e7                	jmp    c0007cff <f_mkfs+0xbee>
c0007d18:	31 db                	xor    ebx,ebx
c0007d1a:	31 d2                	xor    edx,edx
c0007d1c:	89 c8                	mov    eax,ecx
c0007d1e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d22:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d29:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d2e:	c1 ea 09             	shr    edx,0x9
c0007d31:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d36:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3a:	0f 87 96 00 00 00    	ja     c0007dd6 <f_mkfs+0xcc5>
c0007d40:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d44:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d50:	be 20 00 00 00       	mov    esi,0x20
c0007d55:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5a:	e9 a6 fe ff ff       	jmp    c0007c05 <f_mkfs+0xaf4>
c0007d5f:	83 c2 02             	add    edx,0x2
c0007d62:	39 c8                	cmp    eax,ecx
c0007d64:	0f 87 60 fe ff ff    	ja     c0007bca <f_mkfs+0xab9>
c0007d6a:	01 ff                	add    edi,edi
c0007d6c:	e9 4d fe ff ff       	jmp    c0007bbe <f_mkfs+0xaad>
c0007d71:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d74:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d79:	40                   	inc    eax
c0007d7a:	d1 e8                	shr    eax,1
c0007d7c:	83 c0 03             	add    eax,0x3
c0007d7f:	e9 62 fe ff ff       	jmp    c0007be6 <f_mkfs+0xad5>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	89 c8                	mov    eax,ecx
c0007d88:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8c:	85 d2                	test   edx,edx
c0007d8e:	74 0c                	je     c0007d9c <f_mkfs+0xc8b>
c0007d90:	49                   	dec    ecx
c0007d91:	46                   	inc    esi
c0007d92:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d97:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9c:	89 c8                	mov    eax,ecx
c0007d9e:	31 d2                	xor    edx,edx
c0007da0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007da8:	e9 c3 fe ff ff       	jmp    c0007c70 <f_mkfs+0xb5f>
c0007dad:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db2:	77 31                	ja     c0007de5 <f_mkfs+0xcd4>
c0007db4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db9:	75 1b                	jne    c0007dd6 <f_mkfs+0xcc5>
c0007dbb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc7:	0f 86 d9 fd ff ff    	jbe    c0007ba6 <f_mkfs+0xa95>
c0007dcd:	eb 07                	jmp    c0007dd6 <f_mkfs+0xcc5>
c0007dcf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd4:	76 0a                	jbe    c0007de0 <f_mkfs+0xccf>
c0007dd6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddb:	e9 ff 03 00 00       	jmp    c00081df <f_mkfs+0x10ce>
c0007de0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de5:	31 d2                	xor    edx,edx
c0007de7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dec:	89 e8                	mov    eax,ebp
c0007dee:	e8 a2 9c ff ff       	call   c0001a95 <mem_set>
c0007df3:	b9 0b 00 00 00       	mov    ecx,0xb
c0007df8:	ba 82 6f 02 c0       	mov    edx,0xc0026f82
c0007dfd:	89 e8                	mov    eax,ebp
c0007dff:	e8 7c 9c ff ff       	call   c0001a80 <mem_cpy>
c0007e04:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e07:	ba 00 02 00 00       	mov    edx,0x200
c0007e0c:	e8 62 9c ff ff       	call   c0001a73 <st_word>
c0007e11:	89 f8                	mov    eax,edi
c0007e13:	0f b7 d6             	movzx  edx,si
c0007e16:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e19:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1c:	e8 52 9c ff ff       	call   c0001a73 <st_word>
c0007e21:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e25:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2d:	75 08                	jne    c0007e37 <f_mkfs+0xd26>
c0007e2f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e37:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e3e:	e8 30 9c ff ff       	call   c0001a73 <st_word>
c0007e43:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e48:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4c:	39 d0                	cmp    eax,edx
c0007e4e:	b8 00 00 00 00       	mov    eax,0x0
c0007e53:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e57:	72 0a                	jb     c0007e63 <f_mkfs+0xd52>
c0007e59:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5c:	e8 12 9c ff ff       	call   c0001a73 <st_word>
c0007e61:	eb 08                	jmp    c0007e6b <f_mkfs+0xd5a>
c0007e63:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e66:	e8 0c 9c ff ff       	call   c0001a77 <st_dword>
c0007e6b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e6e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e73:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e77:	e8 f7 9b ff ff       	call   c0001a73 <st_word>
c0007e7c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e7f:	ba ff 00 00 00       	mov    edx,0xff
c0007e84:	e8 ea 9b ff ff       	call   c0001a73 <st_word>
c0007e89:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e90:	e8 e2 9b ff ff       	call   c0001a77 <st_dword>
c0007e95:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9a:	75 57                	jne    c0007ef3 <f_mkfs+0xde2>
c0007e9c:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e9f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea4:	e8 ce 9b ff ff       	call   c0001a77 <st_dword>
c0007ea9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eac:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb0:	e8 c2 9b ff ff       	call   c0001a77 <st_dword>
c0007eb5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eb8:	ba 02 00 00 00       	mov    edx,0x2
c0007ebd:	e8 b5 9b ff ff       	call   c0001a77 <st_dword>
c0007ec2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec5:	ba 01 00 00 00       	mov    edx,0x1
c0007eca:	e8 a4 9b ff ff       	call   c0001a73 <st_word>
c0007ecf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed2:	ba 06 00 00 00       	mov    edx,0x6
c0007ed7:	e8 97 9b ff ff       	call   c0001a73 <st_word>
c0007edc:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee7:	b9 13 00 00 00       	mov    ecx,0x13
c0007eec:	ba 8e 6f 02 c0       	mov    edx,0xc0026f8e
c0007ef1:	eb 2f                	jmp    c0007f22 <f_mkfs+0xe11>
c0007ef3:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef6:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efb:	e8 77 9b ff ff       	call   c0001a77 <st_dword>
c0007f00:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f05:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f08:	e8 66 9b ff ff       	call   c0001a73 <st_word>
c0007f0d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f11:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f15:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f18:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1d:	ba a2 6f 02 c0       	mov    edx,0xc0026fa2
c0007f22:	e8 59 9b ff ff       	call   c0001a80 <mem_cpy>
c0007f27:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f32:	89 f0                	mov    eax,esi
c0007f34:	e8 3a 9b ff ff       	call   c0001a73 <st_word>
c0007f39:	83 ec 0c             	sub    esp,0xc
c0007f3c:	6a 01                	push   0x1
c0007f3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f46:	55                   	push   ebp
c0007f47:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4b:	e8 7c 9a ff ff       	call   c00019cc <disk_write>
c0007f50:	83 c4 20             	add    esp,0x20
c0007f53:	85 c0                	test   eax,eax
c0007f55:	0f 85 67 02 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0007f5b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f60:	0f 85 b7 00 00 00    	jne    c000801d <f_mkfs+0xf0c>
c0007f66:	83 ec 0c             	sub    esp,0xc
c0007f69:	6a 01                	push   0x1
c0007f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f73:	83 c0 06             	add    eax,0x6
c0007f76:	83 d2 00             	adc    edx,0x0
c0007f79:	52                   	push   edx
c0007f7a:	50                   	push   eax
c0007f7b:	55                   	push   ebp
c0007f7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f80:	e8 47 9a ff ff       	call   c00019cc <disk_write>
c0007f85:	83 c4 20             	add    esp,0x20
c0007f88:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8d:	31 d2                	xor    edx,edx
c0007f8f:	89 e8                	mov    eax,ebp
c0007f91:	e8 ff 9a ff ff       	call   c0001a95 <mem_set>
c0007f96:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9b:	89 e8                	mov    eax,ebp
c0007f9d:	e8 d5 9a ff ff       	call   c0001a77 <st_dword>
c0007fa2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fa8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fad:	e8 c5 9a ff ff       	call   c0001a77 <st_dword>
c0007fb2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbb:	e8 b7 9a ff ff       	call   c0001a77 <st_dword>
c0007fc0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc6:	ba 02 00 00 00       	mov    edx,0x2
c0007fcb:	e8 a7 9a ff ff       	call   c0001a77 <st_dword>
c0007fd0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd5:	89 f0                	mov    eax,esi
c0007fd7:	e8 97 9a ff ff       	call   c0001a73 <st_word>
c0007fdc:	83 ec 0c             	sub    esp,0xc
c0007fdf:	6a 01                	push   0x1
c0007fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe9:	83 c0 07             	add    eax,0x7
c0007fec:	83 d2 00             	adc    edx,0x0
c0007fef:	52                   	push   edx
c0007ff0:	50                   	push   eax
c0007ff1:	55                   	push   ebp
c0007ff2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff6:	e8 d1 99 ff ff       	call   c00019cc <disk_write>
c0007ffb:	83 c4 14             	add    esp,0x14
c0007ffe:	6a 01                	push   0x1
c0008000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008004:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008008:	83 c0 01             	add    eax,0x1
c000800b:	83 d2 00             	adc    edx,0x0
c000800e:	52                   	push   edx
c000800f:	50                   	push   eax
c0008010:	55                   	push   ebp
c0008011:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008015:	e8 b2 99 ff ff       	call   c00019cc <disk_write>
c000801a:	83 c4 20             	add    esp,0x20
c000801d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008024:	31 d2                	xor    edx,edx
c0008026:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802c:	31 db                	xor    ebx,ebx
c000802e:	89 e8                	mov    eax,ebp
c0008030:	e8 60 9a ff ff       	call   c0001a95 <mem_set>
c0008035:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008041:	0f 94 c3             	sete   bl
c0008044:	4b                   	dec    ebx
c0008045:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008051:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008056:	75 21                	jne    c0008079 <f_mkfs+0xf68>
c0008058:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 13 9a ff ff       	call   c0001a77 <st_dword>
c0008064:	8d 45 04             	lea    eax,[ebp+0x4]
c0008067:	83 ca ff             	or     edx,0xffffffff
c000806a:	e8 08 9a ff ff       	call   c0001a77 <st_dword>
c000806f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008072:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008077:	eb 04                	jmp    c000807d <f_mkfs+0xf6c>
c0008079:	89 da                	mov    edx,ebx
c000807b:	89 e8                	mov    eax,ebp
c000807d:	e8 f5 99 ff ff       	call   c0001a77 <st_dword>
c0008082:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008086:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000808e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008092:	39 ce                	cmp    esi,ecx
c0008094:	76 02                	jbe    c0008098 <f_mkfs+0xf87>
c0008096:	89 ce                	mov    esi,ecx
c0008098:	83 ec 0c             	sub    esp,0xc
c000809b:	56                   	push   esi
c000809c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a4:	55                   	push   ebp
c00080a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a9:	e8 1e 99 ff ff       	call   c00019cc <disk_write>
c00080ae:	83 c4 20             	add    esp,0x20
c00080b1:	85 c0                	test   eax,eax
c00080b3:	0f 85 09 01 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c00080b9:	31 d2                	xor    edx,edx
c00080bb:	b9 00 02 00 00       	mov    ecx,0x200
c00080c0:	89 e8                	mov    eax,ebp
c00080c2:	e8 ce 99 ff ff       	call   c0001a95 <mem_set>
c00080c7:	31 d2                	xor    edx,edx
c00080c9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d5:	75 b3                	jne    c000808a <f_mkfs+0xf79>
c00080d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e1:	40                   	inc    eax
c00080e2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e6:	0f 87 65 ff ff ff    	ja     c0008051 <f_mkfs+0xf40>
c00080ec:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f1:	74 04                	je     c00080f7 <f_mkfs+0xfe6>
c00080f3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f7:	89 fb                	mov    ebx,edi
c00080f9:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080fd:	76 04                	jbe    c0008103 <f_mkfs+0xff2>
c00080ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	53                   	push   ebx
c0008107:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810f:	55                   	push   ebp
c0008110:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008114:	e8 b3 98 ff ff       	call   c00019cc <disk_write>
c0008119:	83 c4 20             	add    esp,0x20
c000811c:	85 c0                	test   eax,eax
c000811e:	0f 85 9e 00 00 00    	jne    c00081c2 <f_mkfs+0x10b1>
c0008124:	31 d2                	xor    edx,edx
c0008126:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812e:	29 df                	sub    edi,ebx
c0008130:	75 c5                	jne    c00080f7 <f_mkfs+0xfe6>
c0008132:	b1 0c                	mov    cl,0xc
c0008134:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008139:	74 1d                	je     c0008158 <f_mkfs+0x1047>
c000813b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008140:	b1 06                	mov    cl,0x6
c0008142:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008146:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814a:	72 0c                	jb     c0008158 <f_mkfs+0x1047>
c000814c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008151:	0f 94 c1             	sete   cl
c0008154:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008158:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815d:	75 4c                	jne    c00081ab <f_mkfs+0x109a>
c000815f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008163:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008167:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000816e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008175:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008180:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818b:	0f b6 c9             	movzx  ecx,cl
c000818e:	83 ec 0c             	sub    esp,0xc
c0008191:	55                   	push   ebp
c0008192:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819d:	e8 2f c2 ff ff       	call   c00043d1 <create_partition>
c00081a2:	83 c4 10             	add    esp,0x10
c00081a5:	89 c3                	mov    ebx,eax
c00081a7:	85 c0                	test   eax,eax
c00081a9:	75 34                	jne    c00081df <f_mkfs+0x10ce>
c00081ab:	31 db                	xor    ebx,ebx
c00081ad:	50                   	push   eax
c00081ae:	6a 00                	push   0x0
c00081b0:	6a 00                	push   0x0
c00081b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b6:	e8 27 98 ff ff       	call   c00019e2 <disk_ioctl>
c00081bb:	83 c4 10             	add    esp,0x10
c00081be:	85 c0                	test   eax,eax
c00081c0:	74 1d                	je     c00081df <f_mkfs+0x10ce>
c00081c2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081ca:	75 0c                	jne    c00081d8 <f_mkfs+0x10c7>
c00081cc:	83 ec 0c             	sub    esp,0xc
c00081cf:	55                   	push   ebp
c00081d0:	e8 75 00 00 00       	call   c000824a <ff_memfree>
c00081d5:	83 c4 10             	add    esp,0x10
c00081d8:	bb 01 00 00 00       	mov    ebx,0x1
c00081dd:	eb 48                	jmp    c0008227 <f_mkfs+0x1116>
c00081df:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e7:	75 3e                	jne    c0008227 <f_mkfs+0x1116>
c00081e9:	83 ec 0c             	sub    esp,0xc
c00081ec:	55                   	push   ebp
c00081ed:	e8 58 00 00 00       	call   c000824a <ff_memfree>
c00081f2:	83 c4 10             	add    esp,0x10
c00081f5:	eb 30                	jmp    c0008227 <f_mkfs+0x1116>
c00081f7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fc:	0f 85 eb fa ff ff    	jne    c0007ced <f_mkfs+0xbdc>
c0008202:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008206:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820c:	0f 86 b8 f9 ff ff    	jbe    c0007bca <f_mkfs+0xab9>
c0008212:	e9 bf fb ff ff       	jmp    c0007dd6 <f_mkfs+0xcc5>
c0008217:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821c:	0f 85 c0 fa ff ff    	jne    c0007ce2 <f_mkfs+0xbd1>
c0008222:	e9 af fb ff ff       	jmp    c0007dd6 <f_mkfs+0xcc5>
c0008227:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822d:	89 d8                	mov    eax,ebx
c000822f:	5b                   	pop    ebx
c0008230:	5e                   	pop    esi
c0008231:	5f                   	pop    edi
c0008232:	5d                   	pop    ebp
c0008233:	c3                   	ret    

c0008234 <ff_memalloc>:
c0008234:	83 ec 0c             	sub    esp,0xc
c0008237:	83 ec 0c             	sub    esp,0xc
c000823a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823e:	e8 7d 72 00 00       	call   c000f4c0 <malloc>
c0008243:	83 c4 10             	add    esp,0x10
c0008246:	83 c4 0c             	add    esp,0xc
c0008249:	c3                   	ret    

c000824a <ff_memfree>:
c000824a:	83 ec 0c             	sub    esp,0xc
c000824d:	83 ec 0c             	sub    esp,0xc
c0008250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008254:	e8 77 72 00 00       	call   c000f4d0 <free>
c0008259:	83 c4 10             	add    esp,0x10
c000825c:	90                   	nop
c000825d:	83 c4 0c             	add    esp,0xc
c0008260:	c3                   	ret    

c0008261 <ff_uni2oem>:
c0008261:	83 ec 14             	sub    esp,0x14
c0008264:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008268:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008273:	c7 44 24 0c c0 72 02 c0 	mov    DWORD PTR [esp+0xc],0xc00272c0
c000827b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008280:	77 0b                	ja     c000828d <ff_uni2oem+0x2c>
c0008282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008286:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828b:	eb 5b                	jmp    c00082e8 <ff_uni2oem+0x87>
c000828d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008295:	77 51                	ja     c00082e8 <ff_uni2oem+0x87>
c0008297:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829d:	75 49                	jne    c00082e8 <ff_uni2oem+0x87>
c000829f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a6:	eb 0b                	jmp    c00082b3 <ff_uni2oem+0x52>
c00082a8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ad:	40                   	inc    eax
c00082ae:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b9:	77 1b                	ja     c00082d6 <ff_uni2oem+0x75>
c00082bb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c0:	01 c0                	add    eax,eax
c00082c2:	89 c2                	mov    edx,eax
c00082c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c8:	01 d0                	add    eax,edx
c00082ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cd:	0f b7 c0             	movzx  eax,ax
c00082d0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d4:	75 d2                	jne    c00082a8 <ff_uni2oem+0x47>
c00082d6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082db:	83 e8 80             	sub    eax,0xffffff80
c00082de:	25 ff 00 00 00       	and    eax,0xff
c00082e3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ed:	83 c4 14             	add    esp,0x14
c00082f0:	c3                   	ret    

c00082f1 <ff_oem2uni>:
c00082f1:	83 ec 18             	sub    esp,0x18
c00082f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fc:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008301:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008305:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830c:	c7 44 24 10 c0 72 02 c0 	mov    DWORD PTR [esp+0x10],0xc00272c0
c0008314:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831a:	77 0b                	ja     c0008327 <ff_oem2uni+0x36>
c000831c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008320:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008325:	eb 2d                	jmp    c0008354 <ff_oem2uni+0x63>
c0008327:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832d:	75 25                	jne    c0008354 <ff_oem2uni+0x63>
c000832f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008336:	77 1c                	ja     c0008354 <ff_oem2uni+0x63>
c0008338:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008342:	01 c0                	add    eax,eax
c0008344:	89 c2                	mov    edx,eax
c0008346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834a:	01 d0                	add    eax,edx
c000834c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000834f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008354:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008359:	83 c4 18             	add    esp,0x18
c000835c:	c3                   	ret    

c000835d <ff_wtoupper>:
c000835d:	83 ec 10             	sub    esp,0x10
c0008360:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008368:	0f 87 3e 01 00 00    	ja     c00084ac <ff_wtoupper+0x14f>
c000836e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008372:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008377:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837e:	77 07                	ja     c0008387 <ff_wtoupper+0x2a>
c0008380:	b8 c0 70 02 c0       	mov    eax,0xc00270c0
c0008385:	eb 05                	jmp    c000838c <ff_wtoupper+0x2f>
c0008387:	b8 00 70 02 c0       	mov    eax,0xc0027000
c000838c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008394:	8d 50 02             	lea    edx,[eax+0x2]
c0008397:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083a9:	0f 84 f4 00 00 00    	je     c00084a3 <ff_wtoupper+0x146>
c00083af:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083b9:	0f 82 e4 00 00 00    	jb     c00084a3 <ff_wtoupper+0x146>
c00083bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c3:	8d 50 02             	lea    edx,[eax+0x2]
c00083c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d7:	66 c1 e8 08          	shr    ax,0x8
c00083db:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ec:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f6:	01 ca                	add    edx,ecx
c00083f8:	39 d0                	cmp    eax,edx
c00083fa:	0f 8d 86 00 00 00    	jge    c0008486 <ff_wtoupper+0x129>
c0008400:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008405:	83 f8 08             	cmp    eax,0x8
c0008408:	0f 87 94 00 00 00    	ja     c00084a2 <ff_wtoupper+0x145>
c000840e:	8b 04 85 c0 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9040]
c0008415:	ff e0                	jmp    eax
c0008417:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008421:	29 c2                	sub    edx,eax
c0008423:	89 d0                	mov    eax,edx
c0008425:	01 c0                	add    eax,eax
c0008427:	89 c2                	mov    edx,eax
c0008429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842d:	01 d0                	add    eax,edx
c000842f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008432:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008437:	eb 4b                	jmp    c0008484 <ff_wtoupper+0x127>
c0008439:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000843e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008442:	83 e0 01             	and    eax,0x1
c0008445:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844a:	eb 38                	jmp    c0008484 <ff_wtoupper+0x127>
c000844c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008452:	eb 30                	jmp    c0008484 <ff_wtoupper+0x127>
c0008454:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845a:	eb 28                	jmp    c0008484 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008462:	eb 20                	jmp    c0008484 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846a:	eb 18                	jmp    c0008484 <ff_wtoupper+0x127>
c000846c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008472:	eb 10                	jmp    c0008484 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847a:	eb 08                	jmp    c0008484 <ff_wtoupper+0x127>
c000847c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008483:	90                   	nop
c0008484:	eb 1c                	jmp    c00084a2 <ff_wtoupper+0x145>
c0008486:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848c:	0f 85 fe fe ff ff    	jne    c0008390 <ff_wtoupper+0x33>
c0008492:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008497:	01 c0                	add    eax,eax
c0008499:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849d:	e9 ee fe ff ff       	jmp    c0008390 <ff_wtoupper+0x33>
c00084a2:	90                   	nop
c00084a3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b0:	83 c4 10             	add    esp,0x10
c00084b3:	c3                   	ret    

c00084b4 <psrc_set_converter>:
c00084b4:	56                   	push   esi
c00084b5:	89 d6                	mov    esi,edx
c00084b7:	53                   	push   ebx
c00084b8:	89 c3                	mov    ebx,eax
c00084ba:	83 ec 0c             	sub    esp,0xc
c00084bd:	52                   	push   edx
c00084be:	50                   	push   eax
c00084bf:	e8 6f 55 00 00       	call   c000da33 <sinc_set_converter>
c00084c4:	83 c4 10             	add    esp,0x10
c00084c7:	85 c0                	test   eax,eax
c00084c9:	74 25                	je     c00084f0 <psrc_set_converter+0x3c>
c00084cb:	50                   	push   eax
c00084cc:	50                   	push   eax
c00084cd:	56                   	push   esi
c00084ce:	53                   	push   ebx
c00084cf:	e8 17 5d 00 00       	call   c000e1eb <zoh_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 15                	je     c00084f0 <psrc_set_converter+0x3c>
c00084db:	51                   	push   ecx
c00084dc:	51                   	push   ecx
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 0f 11 00 00       	call   c00095f3 <linear_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	ba 0a 00 00 00       	mov    edx,0xa
c00084ec:	85 c0                	test   eax,eax
c00084ee:	75 02                	jne    c00084f2 <psrc_set_converter+0x3e>
c00084f0:	31 d2                	xor    edx,edx
c00084f2:	89 d0                	mov    eax,edx
c00084f4:	5a                   	pop    edx
c00084f5:	5b                   	pop    ebx
c00084f6:	5e                   	pop    esi
c00084f7:	c3                   	ret    

c00084f8 <src_delete>:
c00084f8:	53                   	push   ebx
c00084f9:	83 ec 08             	sub    esp,0x8
c00084fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008500:	85 db                	test   ebx,ebx
c0008502:	74 29                	je     c000852d <src_delete+0x35>
c0008504:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008507:	85 c0                	test   eax,eax
c0008509:	74 0c                	je     c0008517 <src_delete+0x1f>
c000850b:	83 ec 0c             	sub    esp,0xc
c000850e:	50                   	push   eax
c000850f:	e8 bc 6f 00 00       	call   c000f4d0 <free>
c0008514:	83 c4 10             	add    esp,0x10
c0008517:	50                   	push   eax
c0008518:	6a 3c                	push   0x3c
c000851a:	6a 00                	push   0x0
c000851c:	53                   	push   ebx
c000851d:	e8 59 81 ff ff       	call   c000067b <memset>
c0008522:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008525:	e8 a6 6f 00 00       	call   c000f4d0 <free>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	31 c0                	xor    eax,eax
c000852f:	83 c4 08             	add    esp,0x8
c0008532:	5b                   	pop    ebx
c0008533:	c3                   	ret    

c0008534 <src_process>:
c0008534:	55                   	push   ebp
c0008535:	57                   	push   edi
c0008536:	56                   	push   esi
c0008537:	53                   	push   ebx
c0008538:	83 ec 1c             	sub    esp,0x1c
c000853b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000853f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008543:	85 ed                	test   ebp,ebp
c0008545:	0f 84 6f 01 00 00    	je     c00086ba <src_process+0x186>
c000854b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000854f:	0f 84 6c 01 00 00    	je     c00086c1 <src_process+0x18d>
c0008555:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008559:	0f 84 62 01 00 00    	je     c00086c1 <src_process+0x18d>
c000855f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008566:	0f 85 5c 01 00 00    	jne    c00086c8 <src_process+0x194>
c000856c:	85 db                	test   ebx,ebx
c000856e:	0f 84 5b 01 00 00    	je     c00086cf <src_process+0x19b>
c0008574:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008576:	85 f6                	test   esi,esi
c0008578:	0f 84 58 01 00 00    	je     c00086d6 <src_process+0x1a2>
c000857e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008581:	85 ff                	test   edi,edi
c0008583:	0f 84 4d 01 00 00    	je     c00086d6 <src_process+0x1a2>
c0008589:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000858f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008593:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008597:	68 00 00 70 3f       	push   0x3f700000
c000859c:	6a 00                	push   0x0
c000859e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a6:	e8 34 da 01 00       	call   c0025fdf <__ltdf2>
c00085ab:	83 c4 10             	add    esp,0x10
c00085ae:	85 c0                	test   eax,eax
c00085b0:	0f 88 27 01 00 00    	js     c00086dd <src_process+0x1a9>
c00085b6:	68 00 00 70 40       	push   0x40700000
c00085bb:	6a 00                	push   0x0
c00085bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c5:	e8 f7 d9 01 00       	call   c0025fc1 <__gtdf2>
c00085ca:	83 c4 10             	add    esp,0x10
c00085cd:	85 c0                	test   eax,eax
c00085cf:	0f 8f 08 01 00 00    	jg     c00086dd <src_process+0x1a9>
c00085d5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085d9:	79 07                	jns    c00085e2 <src_process+0xae>
c00085db:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085e2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085e5:	85 c0                	test   eax,eax
c00085e7:	79 50                	jns    c0008639 <src_process+0x105>
c00085e9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00085f0:	39 fe                	cmp    esi,edi
c00085f2:	72 37                	jb     c000862b <src_process+0xf7>
c00085f4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085fb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008602:	68 00 00 70 3f       	push   0x3f700000
c0008607:	6a 00                	push   0x0
c0008609:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000860c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000860f:	e8 cb d9 01 00       	call   c0025fdf <__ltdf2>
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	85 c0                	test   eax,eax
c0008619:	79 37                	jns    c0008652 <src_process+0x11e>
c000861b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000861f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008623:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008626:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008629:	eb 27                	jmp    c0008652 <src_process+0x11e>
c000862b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000862e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008632:	8d 04 86             	lea    eax,[esi+eax*4]
c0008635:	39 c7                	cmp    edi,eax
c0008637:	eb 0d                	jmp    c0008646 <src_process+0x112>
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 ee                	jb     c000862b <src_process+0xf7>
c000863d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008641:	8d 04 87             	lea    eax,[edi+eax*4]
c0008644:	39 c6                	cmp    esi,eax
c0008646:	73 ac                	jae    c00085f4 <src_process+0xc0>
c0008648:	b8 10 00 00 00       	mov    eax,0x10
c000864d:	e9 90 00 00 00       	jmp    c00086e2 <src_process+0x1ae>
c0008652:	83 ec 10             	sub    esp,0x10
c0008655:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008658:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000865e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008661:	e8 7e d0 01 00       	call   c00256e4 <__subdf3>
c0008666:	83 c4 18             	add    esp,0x18
c0008669:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000866d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008671:	52                   	push   edx
c0008672:	50                   	push   eax
c0008673:	e8 f8 da 01 00       	call   c0026170 <fabs>
c0008678:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000867c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008680:	83 c4 10             	add    esp,0x10
c0008683:	68 af 03 d2 3c       	push   0x3cd203af
c0008688:	68 16 56 e7 9e       	push   0x9ee75616
c000868d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008695:	e8 45 d9 01 00       	call   c0025fdf <__ltdf2>
c000869a:	83 c4 10             	add    esp,0x10
c000869d:	85 c0                	test   eax,eax
c000869f:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086a3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086a7:	79 05                	jns    c00086ae <src_process+0x17a>
c00086a9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086ac:	eb 03                	jmp    c00086b1 <src_process+0x17d>
c00086ae:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086b1:	83 c4 1c             	add    esp,0x1c
c00086b4:	5b                   	pop    ebx
c00086b5:	5e                   	pop    esi
c00086b6:	5f                   	pop    edi
c00086b7:	5d                   	pop    ebp
c00086b8:	ff e0                	jmp    eax
c00086ba:	b8 02 00 00 00       	mov    eax,0x2
c00086bf:	eb 21                	jmp    c00086e2 <src_process+0x1ae>
c00086c1:	b8 07 00 00 00       	mov    eax,0x7
c00086c6:	eb 1a                	jmp    c00086e2 <src_process+0x1ae>
c00086c8:	b8 12 00 00 00       	mov    eax,0x12
c00086cd:	eb 13                	jmp    c00086e2 <src_process+0x1ae>
c00086cf:	b8 03 00 00 00       	mov    eax,0x3
c00086d4:	eb 0c                	jmp    c00086e2 <src_process+0x1ae>
c00086d6:	b8 04 00 00 00       	mov    eax,0x4
c00086db:	eb 05                	jmp    c00086e2 <src_process+0x1ae>
c00086dd:	b8 06 00 00 00       	mov    eax,0x6
c00086e2:	83 c4 1c             	add    esp,0x1c
c00086e5:	5b                   	pop    ebx
c00086e6:	5e                   	pop    esi
c00086e7:	5f                   	pop    edi
c00086e8:	5d                   	pop    ebp
c00086e9:	c3                   	ret    

c00086ea <src_callback_read>:
c00086ea:	55                   	push   ebp
c00086eb:	57                   	push   edi
c00086ec:	56                   	push   esi
c00086ed:	53                   	push   ebx
c00086ee:	83 ec 3c             	sub    esp,0x3c
c00086f1:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00086f5:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00086f9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00086fd:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008701:	85 ed                	test   ebp,ebp
c0008703:	0f 8e 52 01 00 00    	jle    c000885b <src_callback_read+0x171>
c0008709:	85 db                	test   ebx,ebx
c000870b:	0f 84 4a 01 00 00    	je     c000885b <src_callback_read+0x171>
c0008711:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008718:	74 0c                	je     c0008726 <src_callback_read+0x3c>
c000871a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008721:	e9 35 01 00 00       	jmp    c000885b <src_callback_read+0x171>
c0008726:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000872a:	75 0c                	jne    c0008738 <src_callback_read+0x4e>
c000872c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008733:	e9 23 01 00 00       	jmp    c000885b <src_callback_read+0x171>
c0008738:	51                   	push   ecx
c0008739:	6a 24                	push   0x24
c000873b:	6a 00                	push   0x0
c000873d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008741:	50                   	push   eax
c0008742:	e8 34 7f ff ff       	call   c000067b <memset>
c0008747:	83 c4 10             	add    esp,0x10
c000874a:	68 00 00 70 3f       	push   0x3f700000
c000874f:	6a 00                	push   0x0
c0008751:	57                   	push   edi
c0008752:	56                   	push   esi
c0008753:	e8 87 d8 01 00       	call   c0025fdf <__ltdf2>
c0008758:	83 c4 10             	add    esp,0x10
c000875b:	85 c0                	test   eax,eax
c000875d:	78 3e                	js     c000879d <src_callback_read+0xb3>
c000875f:	68 00 00 70 40       	push   0x40700000
c0008764:	6a 00                	push   0x0
c0008766:	57                   	push   edi
c0008767:	56                   	push   esi
c0008768:	e8 54 d8 01 00       	call   c0025fc1 <__gtdf2>
c000876d:	83 c4 10             	add    esp,0x10
c0008770:	85 c0                	test   eax,eax
c0008772:	7f 29                	jg     c000879d <src_callback_read+0xb3>
c0008774:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008778:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000877c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008780:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008784:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008787:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000878b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000878f:	31 f6                	xor    esi,esi
c0008791:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008794:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008798:	e9 97 00 00 00       	jmp    c0008834 <src_callback_read+0x14a>
c000879d:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087a4:	e9 b2 00 00 00       	jmp    c000885b <src_callback_read+0x171>
c00087a9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b1:	52                   	push   edx
c00087b2:	52                   	push   edx
c00087b3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087b7:	50                   	push   eax
c00087b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087ca:	83 c4 10             	add    esp,0x10
c00087cd:	85 c0                	test   eax,eax
c00087cf:	75 08                	jne    c00087d9 <src_callback_read+0xef>
c00087d1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087d9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e0:	50                   	push   eax
c00087e1:	50                   	push   eax
c00087e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087e6:	50                   	push   eax
c00087e7:	53                   	push   ebx
c00087e8:	e8 47 fd ff ff       	call   c0008534 <src_process>
c00087ed:	83 c4 10             	add    esp,0x10
c00087f0:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087f7:	85 c0                	test   eax,eax
c00087f9:	75 49                	jne    c0008844 <src_callback_read+0x15a>
c00087fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00087ff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008802:	89 f9                	mov    ecx,edi
c0008804:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008808:	0f af ca             	imul   ecx,edx
c000880b:	c1 e1 02             	shl    ecx,0x2
c000880e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008812:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008816:	0f af d1             	imul   edx,ecx
c0008819:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000881d:	c1 e2 02             	shl    edx,0x2
c0008820:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008824:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008827:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000882c:	74 12                	je     c0008840 <src_callback_read+0x156>
c000882e:	39 d5                	cmp    ebp,edx
c0008830:	7e 14                	jle    c0008846 <src_callback_read+0x15c>
c0008832:	89 d6                	mov    esi,edx
c0008834:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008839:	75 9e                	jne    c00087d9 <src_callback_read+0xef>
c000883b:	e9 69 ff ff ff       	jmp    c00087a9 <src_callback_read+0xbf>
c0008840:	85 c9                	test   ecx,ecx
c0008842:	75 ea                	jne    c000882e <src_callback_read+0x144>
c0008844:	89 f2                	mov    edx,esi
c0008846:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884a:	85 c0                	test   eax,eax
c000884c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000884f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008853:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008856:	74 05                	je     c000885d <src_callback_read+0x173>
c0008858:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885b:	31 d2                	xor    edx,edx
c000885d:	83 c4 3c             	add    esp,0x3c
c0008860:	89 d0                	mov    eax,edx
c0008862:	5b                   	pop    ebx
c0008863:	5e                   	pop    esi
c0008864:	5f                   	pop    edi
c0008865:	5d                   	pop    ebp
c0008866:	c3                   	ret    

c0008867 <src_set_ratio>:
c0008867:	57                   	push   edi
c0008868:	ba 02 00 00 00       	mov    edx,0x2
c000886d:	56                   	push   esi
c000886e:	53                   	push   ebx
c000886f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008873:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008877:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887b:	85 db                	test   ebx,ebx
c000887d:	74 4c                	je     c00088cb <src_set_ratio+0x64>
c000887f:	ba 07 00 00 00       	mov    edx,0x7
c0008884:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008888:	74 41                	je     c00088cb <src_set_ratio+0x64>
c000888a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000888e:	74 3b                	je     c00088cb <src_set_ratio+0x64>
c0008890:	68 00 00 70 3f       	push   0x3f700000
c0008895:	6a 00                	push   0x0
c0008897:	57                   	push   edi
c0008898:	56                   	push   esi
c0008899:	e8 41 d7 01 00       	call   c0025fdf <__ltdf2>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	ba 06 00 00 00       	mov    edx,0x6
c00088a6:	85 c0                	test   eax,eax
c00088a8:	78 21                	js     c00088cb <src_set_ratio+0x64>
c00088aa:	68 00 00 70 40       	push   0x40700000
c00088af:	6a 00                	push   0x0
c00088b1:	57                   	push   edi
c00088b2:	56                   	push   esi
c00088b3:	e8 09 d7 01 00       	call   c0025fc1 <__gtdf2>
c00088b8:	83 c4 10             	add    esp,0x10
c00088bb:	ba 06 00 00 00       	mov    edx,0x6
c00088c0:	85 c0                	test   eax,eax
c00088c2:	7f 07                	jg     c00088cb <src_set_ratio+0x64>
c00088c4:	89 33                	mov    DWORD PTR [ebx],esi
c00088c6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088c9:	31 d2                	xor    edx,edx
c00088cb:	5b                   	pop    ebx
c00088cc:	89 d0                	mov    eax,edx
c00088ce:	5e                   	pop    esi
c00088cf:	5f                   	pop    edi
c00088d0:	c3                   	ret    

c00088d1 <src_get_channels>:
c00088d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088d5:	b8 02 00 00 00       	mov    eax,0x2
c00088da:	85 d2                	test   edx,edx
c00088dc:	74 14                	je     c00088f2 <src_get_channels+0x21>
c00088de:	b8 07 00 00 00       	mov    eax,0x7
c00088e3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088e7:	74 09                	je     c00088f2 <src_get_channels+0x21>
c00088e9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088ed:	74 03                	je     c00088f2 <src_get_channels+0x21>
c00088ef:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088f2:	c3                   	ret    

c00088f3 <src_reset>:
c00088f3:	53                   	push   ebx
c00088f4:	b8 02 00 00 00       	mov    eax,0x2
c00088f9:	83 ec 08             	sub    esp,0x8
c00088fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008900:	85 db                	test   ebx,ebx
c0008902:	74 36                	je     c000893a <src_reset+0x47>
c0008904:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008907:	85 c0                	test   eax,eax
c0008909:	74 09                	je     c0008914 <src_reset+0x21>
c000890b:	83 ec 0c             	sub    esp,0xc
c000890e:	53                   	push   ebx
c000890f:	ff d0                	call   eax
c0008911:	83 c4 10             	add    esp,0x10
c0008914:	31 c0                	xor    eax,eax
c0008916:	31 d2                	xor    edx,edx
c0008918:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000891b:	89 03                	mov    DWORD PTR [ebx],eax
c000891d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008920:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008923:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000892a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008931:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008938:	31 c0                	xor    eax,eax
c000893a:	83 c4 08             	add    esp,0x8
c000893d:	5b                   	pop    ebx
c000893e:	c3                   	ret    

c000893f <src_new>:
c000893f:	57                   	push   edi
c0008940:	56                   	push   esi
c0008941:	53                   	push   ebx
c0008942:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008946:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000894a:	85 f6                	test   esi,esi
c000894c:	74 73                	je     c00089c1 <src_new+0x82>
c000894e:	85 ff                	test   edi,edi
c0008950:	7f 08                	jg     c000895a <src_new+0x1b>
c0008952:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008958:	eb 1e                	jmp    c0008978 <src_new+0x39>
c000895a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008960:	50                   	push   eax
c0008961:	50                   	push   eax
c0008962:	6a 3c                	push   0x3c
c0008964:	6a 01                	push   0x1
c0008966:	e8 85 6b 00 00       	call   c000f4f0 <calloc>
c000896b:	83 c4 10             	add    esp,0x10
c000896e:	89 c3                	mov    ebx,eax
c0008970:	85 c0                	test   eax,eax
c0008972:	75 10                	jne    c0008984 <src_new+0x45>
c0008974:	85 f6                	test   esi,esi
c0008976:	75 04                	jne    c000897c <src_new+0x3d>
c0008978:	31 db                	xor    ebx,ebx
c000897a:	eb 4b                	jmp    c00089c7 <src_new+0x88>
c000897c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008982:	eb 43                	jmp    c00089c7 <src_new+0x88>
c0008984:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008987:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000898e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008992:	e8 1d fb ff ff       	call   c00084b4 <psrc_set_converter>
c0008997:	85 c0                	test   eax,eax
c0008999:	74 18                	je     c00089b3 <src_new+0x74>
c000899b:	85 f6                	test   esi,esi
c000899d:	74 06                	je     c00089a5 <src_new+0x66>
c000899f:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089a5:	83 ec 0c             	sub    esp,0xc
c00089a8:	53                   	push   ebx
c00089a9:	31 db                	xor    ebx,ebx
c00089ab:	e8 20 6b 00 00       	call   c000f4d0 <free>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	83 ec 0c             	sub    esp,0xc
c00089b6:	53                   	push   ebx
c00089b7:	e8 37 ff ff ff       	call   c00088f3 <src_reset>
c00089bc:	83 c4 10             	add    esp,0x10
c00089bf:	eb 06                	jmp    c00089c7 <src_new+0x88>
c00089c1:	85 ff                	test   edi,edi
c00089c3:	7f 9b                	jg     c0008960 <src_new+0x21>
c00089c5:	eb b1                	jmp    c0008978 <src_new+0x39>
c00089c7:	89 d8                	mov    eax,ebx
c00089c9:	5b                   	pop    ebx
c00089ca:	5e                   	pop    esi
c00089cb:	5f                   	pop    edi
c00089cc:	c3                   	ret    

c00089cd <src_callback_new>:
c00089cd:	56                   	push   esi
c00089ce:	53                   	push   ebx
c00089cf:	53                   	push   ebx
c00089d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089d8:	85 f6                	test   esi,esi
c00089da:	75 0e                	jne    c00089ea <src_callback_new+0x1d>
c00089dc:	31 db                	xor    ebx,ebx
c00089de:	85 c0                	test   eax,eax
c00089e0:	74 47                	je     c0008a29 <src_callback_new+0x5c>
c00089e2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089e8:	eb 3f                	jmp    c0008a29 <src_callback_new+0x5c>
c00089ea:	85 c0                	test   eax,eax
c00089ec:	74 06                	je     c00089f4 <src_callback_new+0x27>
c00089ee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089f4:	51                   	push   ecx
c00089f5:	50                   	push   eax
c00089f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fe:	e8 3c ff ff ff       	call   c000893f <src_new>
c0008a03:	83 c4 10             	add    esp,0x10
c0008a06:	89 c3                	mov    ebx,eax
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	74 1d                	je     c0008a29 <src_callback_new+0x5c>
c0008a0c:	83 ec 0c             	sub    esp,0xc
c0008a0f:	50                   	push   eax
c0008a10:	e8 de fe ff ff       	call   c00088f3 <src_reset>
c0008a15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a19:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a20:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a23:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a26:	83 c4 10             	add    esp,0x10
c0008a29:	89 d8                	mov    eax,ebx
c0008a2b:	5a                   	pop    edx
c0008a2c:	5b                   	pop    ebx
c0008a2d:	5e                   	pop    esi
c0008a2e:	c3                   	ret    

c0008a2f <src_get_name>:
c0008a2f:	53                   	push   ebx
c0008a30:	83 ec 14             	sub    esp,0x14
c0008a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a37:	53                   	push   ebx
c0008a38:	e8 d0 4f 00 00       	call   c000da0d <sinc_get_name>
c0008a3d:	83 c4 10             	add    esp,0x10
c0008a40:	85 c0                	test   eax,eax
c0008a42:	75 1d                	jne    c0008a61 <src_get_name+0x32>
c0008a44:	83 ec 0c             	sub    esp,0xc
c0008a47:	53                   	push   ebx
c0008a48:	e8 80 57 00 00       	call   c000e1cd <zoh_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 0d                	jne    c0008a61 <src_get_name+0x32>
c0008a54:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a58:	83 c4 08             	add    esp,0x8
c0008a5b:	5b                   	pop    ebx
c0008a5c:	e9 74 0b 00 00       	jmp    c00095d5 <linear_get_name>
c0008a61:	83 c4 08             	add    esp,0x8
c0008a64:	5b                   	pop    ebx
c0008a65:	c3                   	ret    

c0008a66 <src_get_description>:
c0008a66:	53                   	push   ebx
c0008a67:	83 ec 14             	sub    esp,0x14
c0008a6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a6e:	53                   	push   ebx
c0008a6f:	e8 ac 4f 00 00       	call   c000da20 <sinc_get_description>
c0008a74:	83 c4 10             	add    esp,0x10
c0008a77:	85 c0                	test   eax,eax
c0008a79:	75 1d                	jne    c0008a98 <src_get_description+0x32>
c0008a7b:	83 ec 0c             	sub    esp,0xc
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 58 57 00 00       	call   c000e1dc <zoh_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 0d                	jne    c0008a98 <src_get_description+0x32>
c0008a8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a8f:	83 c4 08             	add    esp,0x8
c0008a92:	5b                   	pop    ebx
c0008a93:	e9 4c 0b 00 00       	jmp    c00095e4 <linear_get_description>
c0008a98:	83 c4 08             	add    esp,0x8
c0008a9b:	5b                   	pop    ebx
c0008a9c:	c3                   	ret    

c0008a9d <src_get_version>:
c0008a9d:	b8 c0 73 02 c0       	mov    eax,0xc00273c0
c0008aa2:	c3                   	ret    

c0008aa3 <src_is_valid_ratio>:
c0008aa3:	83 ec 1c             	sub    esp,0x1c
c0008aa6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008aae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ab2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac5:	e8 15 d5 01 00       	call   c0025fdf <__ltdf2>
c0008aca:	83 c4 10             	add    esp,0x10
c0008acd:	31 d2                	xor    edx,edx
c0008acf:	85 c0                	test   eax,eax
c0008ad1:	78 1e                	js     c0008af1 <src_is_valid_ratio+0x4e>
c0008ad3:	68 00 00 70 40       	push   0x40700000
c0008ad8:	6a 00                	push   0x0
c0008ada:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ade:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae2:	e8 da d4 01 00       	call   c0025fc1 <__gtdf2>
c0008ae7:	31 d2                	xor    edx,edx
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	85 c0                	test   eax,eax
c0008aee:	0f 9e c2             	setle  dl
c0008af1:	89 d0                	mov    eax,edx
c0008af3:	83 c4 1c             	add    esp,0x1c
c0008af6:	c3                   	ret    

c0008af7 <src_error>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	31 c0                	xor    eax,eax
c0008afd:	85 d2                	test   edx,edx
c0008aff:	74 03                	je     c0008b04 <src_error+0xd>
c0008b01:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b04:	c3                   	ret    

c0008b05 <src_strerror>:
c0008b05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b09:	31 c0                	xor    eax,eax
c0008b0b:	83 fa 17             	cmp    edx,0x17
c0008b0e:	77 07                	ja     c0008b17 <src_strerror+0x12>
c0008b10:	8b 04 95 20 78 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd87e0]
c0008b17:	c3                   	ret    

c0008b18 <src_simple>:
c0008b18:	56                   	push   esi
c0008b19:	53                   	push   ebx
c0008b1a:	83 ec 18             	sub    esp,0x18
c0008b1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b21:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b25:	50                   	push   eax
c0008b26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2e:	e8 0c fe ff ff       	call   c000893f <src_new>
c0008b33:	83 c4 10             	add    esp,0x10
c0008b36:	85 c0                	test   eax,eax
c0008b38:	75 06                	jne    c0008b40 <src_simple+0x28>
c0008b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b3e:	eb 25                	jmp    c0008b65 <src_simple+0x4d>
c0008b40:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b47:	89 c3                	mov    ebx,eax
c0008b49:	50                   	push   eax
c0008b4a:	50                   	push   eax
c0008b4b:	56                   	push   esi
c0008b4c:	53                   	push   ebx
c0008b4d:	e8 e2 f9 ff ff       	call   c0008534 <src_process>
c0008b52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b59:	e8 9a f9 ff ff       	call   c00084f8 <src_delete>
c0008b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	83 c4 14             	add    esp,0x14
c0008b68:	5b                   	pop    ebx
c0008b69:	5e                   	pop    esi
c0008b6a:	c3                   	ret    

c0008b6b <src_short_to_float_array>:
c0008b6b:	53                   	push   ebx
c0008b6c:	83 ec 18             	sub    esp,0x18
c0008b6f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b73:	85 db                	test   ebx,ebx
c0008b75:	74 54                	je     c0008bcb <src_short_to_float_array+0x60>
c0008b77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b7b:	4b                   	dec    ebx
c0008b7c:	83 ec 0c             	sub    esp,0xc
c0008b7f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b83:	50                   	push   eax
c0008b84:	e8 ea d1 01 00       	call   c0025d73 <__floatsidf>
c0008b89:	83 c4 10             	add    esp,0x10
c0008b8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b94:	68 00 00 00 3f       	push   0x3f000000
c0008b99:	6a 00                	push   0x0
c0008b9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba3:	e8 68 cb 01 00       	call   c0025710 <__muldf3>
c0008ba8:	59                   	pop    ecx
c0008ba9:	59                   	pop    ecx
c0008baa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bba:	e8 24 d4 01 00       	call   c0025fe3 <__truncdfsf2>
c0008bbf:	83 c4 10             	add    esp,0x10
c0008bc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bc6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bc9:	eb a8                	jmp    c0008b73 <src_short_to_float_array+0x8>
c0008bcb:	83 c4 18             	add    esp,0x18
c0008bce:	5b                   	pop    ebx
c0008bcf:	c3                   	ret    

c0008bd0 <src_float_to_short_array>:
c0008bd0:	56                   	push   esi
c0008bd1:	53                   	push   ebx
c0008bd2:	83 ec 14             	sub    esp,0x14
c0008bd5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bd9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bdd:	85 db                	test   ebx,ebx
c0008bdf:	0f 84 a4 00 00 00    	je     c0008c89 <src_float_to_short_array+0xb9>
c0008be5:	83 ec 0c             	sub    esp,0xc
c0008be8:	4b                   	dec    ebx
c0008be9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bed:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008bf0:	e8 12 d5 01 00       	call   c0026107 <__extendsfdf2>
c0008bf5:	83 c4 10             	add    esp,0x10
c0008bf8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c00:	68 00 00 e0 41       	push   0x41e00000
c0008c05:	6a 00                	push   0x0
c0008c07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0f:	e8 fc ca 01 00       	call   c0025710 <__muldf3>
c0008c14:	83 c4 10             	add    esp,0x10
c0008c17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c1f:	68 ff ff df 41       	push   0x41dfffff
c0008c24:	68 00 00 c0 ff       	push   0xffc00000
c0008c29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c31:	e8 a7 d3 01 00       	call   c0025fdd <__gedf2>
c0008c36:	83 c4 10             	add    esp,0x10
c0008c39:	85 c0                	test   eax,eax
c0008c3b:	78 08                	js     c0008c45 <src_float_to_short_array+0x75>
c0008c3d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c43:	eb 98                	jmp    c0008bdd <src_float_to_short_array+0xd>
c0008c45:	68 00 00 e0 c1       	push   0xc1e00000
c0008c4a:	6a 00                	push   0x0
c0008c4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	e8 88 d3 01 00       	call   c0025fe1 <__ledf2>
c0008c59:	83 c4 10             	add    esp,0x10
c0008c5c:	85 c0                	test   eax,eax
c0008c5e:	7f 0b                	jg     c0008c6b <src_float_to_short_array+0x9b>
c0008c60:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c66:	e9 72 ff ff ff       	jmp    c0008bdd <src_float_to_short_array+0xd>
c0008c6b:	50                   	push   eax
c0008c6c:	50                   	push   eax
c0008c6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c75:	e8 16 d5 01 00       	call   c0026190 <lrint>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	c1 f8 10             	sar    eax,0x10
c0008c80:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c84:	e9 54 ff ff ff       	jmp    c0008bdd <src_float_to_short_array+0xd>
c0008c89:	83 c4 14             	add    esp,0x14
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_int_to_float_array>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 18             	sub    esp,0x18
c0008c93:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c97:	85 db                	test   ebx,ebx
c0008c99:	74 52                	je     c0008ced <src_int_to_float_array+0x5e>
c0008c9b:	83 ec 0c             	sub    esp,0xc
c0008c9e:	4b                   	dec    ebx
c0008c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ca3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ca6:	e8 c8 d0 01 00       	call   c0025d73 <__floatsidf>
c0008cab:	83 c4 10             	add    esp,0x10
c0008cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cb6:	68 00 00 00 3e       	push   0x3e000000
c0008cbb:	6a 00                	push   0x0
c0008cbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc5:	e8 46 ca 01 00       	call   c0025710 <__muldf3>
c0008cca:	59                   	pop    ecx
c0008ccb:	59                   	pop    ecx
c0008ccc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cdc:	e8 02 d3 01 00       	call   c0025fe3 <__truncdfsf2>
c0008ce1:	83 c4 10             	add    esp,0x10
c0008ce4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ce8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008ceb:	eb aa                	jmp    c0008c97 <src_int_to_float_array+0x8>
c0008ced:	83 c4 18             	add    esp,0x18
c0008cf0:	5b                   	pop    ebx
c0008cf1:	c3                   	ret    

c0008cf2 <src_float_to_int_array>:
c0008cf2:	56                   	push   esi
c0008cf3:	53                   	push   ebx
c0008cf4:	83 ec 14             	sub    esp,0x14
c0008cf7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cfb:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cff:	85 db                	test   ebx,ebx
c0008d01:	0f 84 a2 00 00 00    	je     c0008da9 <src_float_to_int_array+0xb7>
c0008d07:	83 ec 0c             	sub    esp,0xc
c0008d0a:	4b                   	dec    ebx
c0008d0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d0f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d12:	e8 f0 d3 01 00       	call   c0026107 <__extendsfdf2>
c0008d17:	83 c4 10             	add    esp,0x10
c0008d1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d22:	68 00 00 e0 41       	push   0x41e00000
c0008d27:	6a 00                	push   0x0
c0008d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d31:	e8 da c9 01 00       	call   c0025710 <__muldf3>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d41:	68 ff ff df 41       	push   0x41dfffff
c0008d46:	68 00 00 c0 ff       	push   0xffc00000
c0008d4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d53:	e8 85 d2 01 00       	call   c0025fdd <__gedf2>
c0008d58:	83 c4 10             	add    esp,0x10
c0008d5b:	85 c0                	test   eax,eax
c0008d5d:	78 09                	js     c0008d68 <src_float_to_int_array+0x76>
c0008d5f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d66:	eb 97                	jmp    c0008cff <src_float_to_int_array+0xd>
c0008d68:	68 00 00 e0 c1       	push   0xc1e00000
c0008d6d:	6a 00                	push   0x0
c0008d6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d77:	e8 65 d2 01 00       	call   c0025fe1 <__ledf2>
c0008d7c:	83 c4 10             	add    esp,0x10
c0008d7f:	85 c0                	test   eax,eax
c0008d81:	7f 0c                	jg     c0008d8f <src_float_to_int_array+0x9d>
c0008d83:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d8a:	e9 70 ff ff ff       	jmp    c0008cff <src_float_to_int_array+0xd>
c0008d8f:	50                   	push   eax
c0008d90:	50                   	push   eax
c0008d91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d99:	e8 f2 d3 01 00       	call   c0026190 <lrint>
c0008d9e:	83 c4 10             	add    esp,0x10
c0008da1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008da4:	e9 56 ff ff ff       	jmp    c0008cff <src_float_to_int_array+0xd>
c0008da9:	83 c4 14             	add    esp,0x14
c0008dac:	5b                   	pop    ebx
c0008dad:	5e                   	pop    esi
c0008dae:	c3                   	ret    

c0008daf <linear_vari_process>:
c0008daf:	55                   	push   ebp
c0008db0:	31 d2                	xor    edx,edx
c0008db2:	57                   	push   edi
c0008db3:	56                   	push   esi
c0008db4:	53                   	push   ebx
c0008db5:	83 ec 3c             	sub    esp,0x3c
c0008db8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dbc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dc0:	0f 8e d3 07 00 00    	jle    c0009599 <linear_vari_process+0x7ea>
c0008dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dca:	ba 05 00 00 00       	mov    edx,0x5
c0008dcf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008dd2:	85 db                	test   ebx,ebx
c0008dd4:	0f 84 bf 07 00 00    	je     c0009599 <linear_vari_process+0x7ea>
c0008dda:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ddd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008de1:	74 19                	je     c0008dfc <linear_vari_process+0x4d>
c0008de3:	31 d2                	xor    edx,edx
c0008de5:	39 c2                	cmp    edx,eax
c0008de7:	7d 0c                	jge    c0008df5 <linear_vari_process+0x46>
c0008de9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008deb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dee:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008df2:	42                   	inc    edx
c0008df3:	eb f0                	jmp    c0008de5 <linear_vari_process+0x36>
c0008df5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008dfc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008dff:	0f af d0             	imul   edx,eax
c0008e02:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e05:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e09:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e10:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e13:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e1a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e1e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e23:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e2b:	68 00 00 70 3f       	push   0x3f700000
c0008e30:	6a 00                	push   0x0
c0008e32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e3a:	e8 a0 d1 01 00       	call   c0025fdf <__ltdf2>
c0008e3f:	83 c4 10             	add    esp,0x10
c0008e42:	ba 16 00 00 00       	mov    edx,0x16
c0008e47:	85 c0                	test   eax,eax
c0008e49:	0f 88 4a 07 00 00    	js     c0009599 <linear_vari_process+0x7ea>
c0008e4f:	68 00 00 70 40       	push   0x40700000
c0008e54:	6a 00                	push   0x0
c0008e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5e:	e8 5e d1 01 00       	call   c0025fc1 <__gtdf2>
c0008e63:	83 c4 10             	add    esp,0x10
c0008e66:	ba 16 00 00 00       	mov    edx,0x16
c0008e6b:	85 c0                	test   eax,eax
c0008e6d:	0f 8f 26 07 00 00    	jg     c0009599 <linear_vari_process+0x7ea>
c0008e73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e77:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e85:	68 00 00 f0 3f       	push   0x3ff00000
c0008e8a:	6a 00                	push   0x0
c0008e8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e94:	e8 46 d1 01 00       	call   c0025fdf <__ltdf2>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	0f 89 89 02 00 00    	jns    c000912d <linear_vari_process+0x37e>
c0008ea4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ea7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eaa:	0f 8d 7d 02 00 00    	jge    c000912d <linear_vari_process+0x37e>
c0008eb0:	83 ec 0c             	sub    esp,0xc
c0008eb3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eb6:	e8 b8 ce 01 00       	call   c0025d73 <__floatsidf>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ec1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ec5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eca:	6a 00                	push   0x0
c0008ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed4:	e8 ba c1 01 00       	call   c0025093 <__adddf3>
c0008ed9:	83 c4 10             	add    esp,0x10
c0008edc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ee0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ee4:	52                   	push   edx
c0008ee5:	50                   	push   eax
c0008ee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eee:	e8 1d c8 01 00       	call   c0025710 <__muldf3>
c0008ef3:	5d                   	pop    ebp
c0008ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ef8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008efc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008eff:	e8 6f ce 01 00       	call   c0025d73 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f0b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f0f:	52                   	push   edx
c0008f10:	50                   	push   eax
c0008f11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f19:	e8 75 c1 01 00       	call   c0025093 <__adddf3>
c0008f1e:	59                   	pop    ecx
c0008f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f23:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f27:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f2a:	e8 44 ce 01 00       	call   c0025d73 <__floatsidf>
c0008f2f:	83 c4 10             	add    esp,0x10
c0008f32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f3a:	52                   	push   edx
c0008f3b:	50                   	push   eax
c0008f3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f44:	e8 94 d0 01 00       	call   c0025fdd <__gedf2>
c0008f49:	83 c4 10             	add    esp,0x10
c0008f4c:	85 c0                	test   eax,eax
c0008f4e:	0f 89 d9 01 00 00    	jns    c000912d <linear_vari_process+0x37e>
c0008f54:	85 ff                	test   edi,edi
c0008f56:	0f 8e f4 00 00 00    	jle    c0009050 <linear_vari_process+0x2a1>
c0008f5c:	83 ec 10             	sub    esp,0x10
c0008f5f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f62:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f65:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f69:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f6c:	ff 30                	push   DWORD PTR [eax]
c0008f6e:	e8 71 c7 01 00       	call   c00256e4 <__subdf3>
c0008f73:	83 c4 18             	add    esp,0x18
c0008f76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f7e:	52                   	push   edx
c0008f7f:	50                   	push   eax
c0008f80:	e8 eb d1 01 00       	call   c0026170 <fabs>
c0008f85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f89:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f8d:	83 c4 10             	add    esp,0x10
c0008f90:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008f95:	68 23 42 92 0c       	push   0xc924223
c0008f9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa2:	e8 1a d0 01 00       	call   c0025fc1 <__gtdf2>
c0008fa7:	83 c4 10             	add    esp,0x10
c0008faa:	85 c0                	test   eax,eax
c0008fac:	0f 8e 9e 00 00 00    	jle    c0009050 <linear_vari_process+0x2a1>
c0008fb2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fb6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fc2:	52                   	push   edx
c0008fc3:	50                   	push   eax
c0008fc4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fc7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fca:	e8 15 c7 01 00       	call   c00256e4 <__subdf3>
c0008fcf:	59                   	pop    ecx
c0008fd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fd4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fd8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fdb:	e8 93 cd 01 00       	call   c0025d73 <__floatsidf>
c0008fe0:	83 c4 10             	add    esp,0x10
c0008fe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fe7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008feb:	52                   	push   edx
c0008fec:	50                   	push   eax
c0008fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff5:	e8 16 c7 01 00       	call   c0025710 <__muldf3>
c0008ffa:	5f                   	pop    edi
c0008ffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fff:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009003:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009006:	e8 68 cd 01 00       	call   c0025d73 <__floatsidf>
c000900b:	83 c4 10             	add    esp,0x10
c000900e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009012:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009016:	52                   	push   edx
c0009017:	50                   	push   eax
c0009018:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009020:	e8 cf c9 01 00       	call   c00259f4 <__divdf3>
c0009025:	83 c4 10             	add    esp,0x10
c0009028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009030:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009034:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009040:	e8 4e c0 01 00       	call   c0025093 <__adddf3>
c0009045:	83 c4 10             	add    esp,0x10
c0009048:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000904c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009050:	31 ff                	xor    edi,edi
c0009052:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009055:	0f 8e 9d 00 00 00    	jle    c00090f8 <linear_vari_process+0x349>
c000905b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000905e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009062:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009065:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009069:	89 04 24             	mov    DWORD PTR [esp],eax
c000906c:	8b 06                	mov    eax,DWORD PTR [esi]
c000906e:	52                   	push   edx
c000906f:	52                   	push   edx
c0009070:	55                   	push   ebp
c0009071:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009074:	47                   	inc    edi
c0009075:	e8 ae b9 01 00       	call   c0024a28 <__subsf3>
c000907a:	89 04 24             	mov    DWORD PTR [esp],eax
c000907d:	e8 85 d0 01 00       	call   c0026107 <__extendsfdf2>
c0009082:	83 c4 10             	add    esp,0x10
c0009085:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009089:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000908d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009091:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909d:	e8 6e c6 01 00       	call   c0025710 <__muldf3>
c00090a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090ad:	e8 55 d0 01 00       	call   c0026107 <__extendsfdf2>
c00090b2:	83 c4 10             	add    esp,0x10
c00090b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090bd:	52                   	push   edx
c00090be:	50                   	push   eax
c00090bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c7:	e8 c7 bf 01 00       	call   c0025093 <__adddf3>
c00090cc:	59                   	pop    ecx
c00090cd:	5d                   	pop    ebp
c00090ce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090de:	e8 00 cf 01 00       	call   c0025fe3 <__truncdfsf2>
c00090e3:	83 c4 10             	add    esp,0x10
c00090e6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090e9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090ed:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00090f0:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00090f3:	e9 5a ff ff ff       	jmp    c0009052 <linear_vari_process+0x2a3>
c00090f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009100:	68 00 00 f0 3f       	push   0x3ff00000
c0009105:	6a 00                	push   0x0
c0009107:	e8 e8 c8 01 00       	call   c00259f4 <__divdf3>
c000910c:	83 c4 10             	add    esp,0x10
c000910f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009112:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009116:	52                   	push   edx
c0009117:	50                   	push   eax
c0009118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009120:	e8 6e bf 01 00       	call   c0025093 <__adddf3>
c0009125:	83 c4 10             	add    esp,0x10
c0009128:	e9 50 fd ff ff       	jmp    c0008e7d <linear_vari_process+0xce>
c000912d:	50                   	push   eax
c000912e:	50                   	push   eax
c000912f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009137:	e8 54 d0 01 00       	call   c0026190 <lrint>
c000913c:	83 ec 0c             	sub    esp,0xc
c000913f:	50                   	push   eax
c0009140:	e8 2e cc 01 00       	call   c0025d73 <__floatsidf>
c0009145:	83 c4 10             	add    esp,0x10
c0009148:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000914c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009150:	52                   	push   edx
c0009151:	50                   	push   eax
c0009152:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009156:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915a:	e8 85 c5 01 00       	call   c00256e4 <__subdf3>
c000915f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009163:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009167:	83 c4 20             	add    esp,0x20
c000916a:	6a 00                	push   0x0
c000916c:	6a 00                	push   0x0
c000916e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009172:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009176:	e8 64 ce 01 00       	call   c0025fdf <__ltdf2>
c000917b:	83 c4 10             	add    esp,0x10
c000917e:	85 c0                	test   eax,eax
c0009180:	79 1e                	jns    c00091a0 <linear_vari_process+0x3f1>
c0009182:	68 00 00 f0 3f       	push   0x3ff00000
c0009187:	6a 00                	push   0x0
c0009189:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009191:	e8 fd be 01 00       	call   c0025093 <__adddf3>
c0009196:	83 c4 10             	add    esp,0x10
c0009199:	89 04 24             	mov    DWORD PTR [esp],eax
c000919c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091a0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091a3:	83 ec 10             	sub    esp,0x10
c00091a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b6:	e8 29 c5 01 00       	call   c00256e4 <__subdf3>
c00091bb:	83 c4 18             	add    esp,0x18
c00091be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091c6:	52                   	push   edx
c00091c7:	50                   	push   eax
c00091c8:	e8 c3 cf 01 00       	call   c0026190 <lrint>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	0f af f8             	imul   edi,eax
c00091d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091d6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091d9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091dc:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091df:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091e2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091e6:	0f 8d 13 03 00 00    	jge    c00094ff <linear_vari_process+0x750>
c00091ec:	83 ec 0c             	sub    esp,0xc
c00091ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091f2:	e8 7c cb 01 00       	call   c0025d73 <__floatsidf>
c00091f7:	83 c4 10             	add    esp,0x10
c00091fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009202:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009206:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000920a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009212:	e8 f9 c4 01 00       	call   c0025710 <__muldf3>
c0009217:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000921e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009222:	e8 4c cb 01 00       	call   c0025d73 <__floatsidf>
c0009227:	83 c4 10             	add    esp,0x10
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	52                   	push   edx
c0009233:	50                   	push   eax
c0009234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923c:	e8 52 be 01 00       	call   c0025093 <__adddf3>
c0009241:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009244:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009248:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924c:	e8 22 cb 01 00       	call   c0025d73 <__floatsidf>
c0009251:	83 c4 10             	add    esp,0x10
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	52                   	push   edx
c000925d:	50                   	push   eax
c000925e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009266:	e8 74 cd 01 00       	call   c0025fdf <__ltdf2>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	85 c0                	test   eax,eax
c0009270:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009274:	0f 89 85 02 00 00    	jns    c00094ff <linear_vari_process+0x750>
c000927a:	85 c9                	test   ecx,ecx
c000927c:	0f 8e f5 00 00 00    	jle    c0009377 <linear_vari_process+0x5c8>
c0009282:	83 ec 10             	sub    esp,0x10
c0009285:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009288:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000928b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000928f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009292:	ff 30                	push   DWORD PTR [eax]
c0009294:	e8 4b c4 01 00       	call   c00256e4 <__subdf3>
c0009299:	83 c4 18             	add    esp,0x18
c000929c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092a4:	52                   	push   edx
c00092a5:	50                   	push   eax
c00092a6:	e8 c5 ce 01 00       	call   c0026170 <fabs>
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	83 c4 10             	add    esp,0x10
c00092b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092bb:	68 23 42 92 0c       	push   0xc924223
c00092c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c8:	e8 f4 cc 01 00       	call   c0025fc1 <__gtdf2>
c00092cd:	83 c4 10             	add    esp,0x10
c00092d0:	85 c0                	test   eax,eax
c00092d2:	0f 8e 9f 00 00 00    	jle    c0009377 <linear_vari_process+0x5c8>
c00092d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092df:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092e9:	52                   	push   edx
c00092ea:	50                   	push   eax
c00092eb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092ee:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f1:	e8 ee c3 01 00       	call   c00256e4 <__subdf3>
c00092f6:	5f                   	pop    edi
c00092f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092fb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092ff:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009302:	e8 6c ca 01 00       	call   c0025d73 <__floatsidf>
c0009307:	83 c4 10             	add    esp,0x10
c000930a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000930e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009312:	52                   	push   edx
c0009313:	50                   	push   eax
c0009314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931c:	e8 ef c3 01 00       	call   c0025710 <__muldf3>
c0009321:	5d                   	pop    ebp
c0009322:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000932a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000932d:	e8 41 ca 01 00       	call   c0025d73 <__floatsidf>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009339:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000933d:	52                   	push   edx
c000933e:	50                   	push   eax
c000933f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009347:	e8 a8 c6 01 00       	call   c00259f4 <__divdf3>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009353:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009357:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009367:	e8 27 bd 01 00       	call   c0025093 <__adddf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009373:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009377:	31 ff                	xor    edi,edi
c0009379:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000937c:	39 f8                	cmp    eax,edi
c000937e:	0f 8e ac 00 00 00    	jle    c0009430 <linear_vari_process+0x681>
c0009384:	8b 16                	mov    edx,DWORD PTR [esi]
c0009386:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009389:	29 c1                	sub    ecx,eax
c000938b:	89 c8                	mov    eax,ecx
c000938d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009390:	01 f8                	add    eax,edi
c0009392:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009396:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c0009399:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000939c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093a3:	51                   	push   ecx
c00093a4:	01 f8                	add    eax,edi
c00093a6:	51                   	push   ecx
c00093a7:	47                   	inc    edi
c00093a8:	55                   	push   ebp
c00093a9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093ac:	e8 77 b6 01 00       	call   c0024a28 <__subsf3>
c00093b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b4:	e8 4e cd 01 00       	call   c0026107 <__extendsfdf2>
c00093b9:	83 c4 10             	add    esp,0x10
c00093bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093c4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093c8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d4:	e8 37 c3 01 00       	call   c0025710 <__muldf3>
c00093d9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093e4:	e8 1e cd 01 00       	call   c0026107 <__extendsfdf2>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093f4:	52                   	push   edx
c00093f5:	50                   	push   eax
c00093f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fe:	e8 90 bc 01 00       	call   c0025093 <__adddf3>
c0009403:	5d                   	pop    ebp
c0009404:	59                   	pop    ecx
c0009405:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009409:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000940d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009411:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009415:	e8 c9 cb 01 00       	call   c0025fe3 <__truncdfsf2>
c000941a:	83 c4 10             	add    esp,0x10
c000941d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009421:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009425:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009428:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000942b:	e9 49 ff ff ff       	jmp    c0009379 <linear_vari_process+0x5ca>
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	68 00 00 f0 3f       	push   0x3ff00000
c000943d:	6a 00                	push   0x0
c000943f:	e8 b0 c5 01 00       	call   c00259f4 <__divdf3>
c0009444:	83 c4 10             	add    esp,0x10
c0009447:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000944b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000944f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009453:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945f:	e8 2f bc 01 00       	call   c0025093 <__adddf3>
c0009464:	59                   	pop    ecx
c0009465:	5f                   	pop    edi
c0009466:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000946a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009476:	e8 15 cd 01 00       	call   c0026190 <lrint>
c000947b:	83 ec 0c             	sub    esp,0xc
c000947e:	50                   	push   eax
c000947f:	e8 ef c8 01 00       	call   c0025d73 <__floatsidf>
c0009484:	83 c4 10             	add    esp,0x10
c0009487:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000948f:	52                   	push   edx
c0009490:	50                   	push   eax
c0009491:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009495:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009499:	e8 46 c2 01 00       	call   c00256e4 <__subdf3>
c000949e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094a2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a6:	83 c4 20             	add    esp,0x20
c00094a9:	6a 00                	push   0x0
c00094ab:	6a 00                	push   0x0
c00094ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b5:	e8 25 cb 01 00       	call   c0025fdf <__ltdf2>
c00094ba:	83 c4 10             	add    esp,0x10
c00094bd:	85 c0                	test   eax,eax
c00094bf:	79 1e                	jns    c00094df <linear_vari_process+0x730>
c00094c1:	68 00 00 f0 3f       	push   0x3ff00000
c00094c6:	6a 00                	push   0x0
c00094c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094d0:	e8 be bb 01 00       	call   c0025093 <__adddf3>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094df:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f5:	e8 ea c1 01 00       	call   c00256e4 <__subdf3>
c00094fa:	e9 bc fc ff ff       	jmp    c00091bb <linear_vari_process+0x40c>
c00094ff:	39 fd                	cmp    ebp,edi
c0009501:	7d 38                	jge    c000953b <linear_vari_process+0x78c>
c0009503:	83 ec 0c             	sub    esp,0xc
c0009506:	89 f8                	mov    eax,edi
c0009508:	29 e8                	sub    eax,ebp
c000950a:	99                   	cdq    
c000950b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000950e:	50                   	push   eax
c000950f:	e8 5f c8 01 00       	call   c0025d73 <__floatsidf>
c0009514:	83 c4 10             	add    esp,0x10
c0009517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000951b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000951f:	52                   	push   edx
c0009520:	50                   	push   eax
c0009521:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009525:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009529:	e8 65 bb 01 00       	call   c0025093 <__adddf3>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009534:	89 04 24             	mov    DWORD PTR [esp],eax
c0009537:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000953b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000953f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009542:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009546:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009549:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000954c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000954f:	85 c0                	test   eax,eax
c0009551:	7f 29                	jg     c000957c <linear_vari_process+0x7cd>
c0009553:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000955f:	89 01                	mov    DWORD PTR [ecx],eax
c0009561:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009564:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009567:	99                   	cdq    
c0009568:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000956b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000956e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009571:	99                   	cdq    
c0009572:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009575:	31 d2                	xor    edx,edx
c0009577:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000957a:	eb 1d                	jmp    c0009599 <linear_vari_process+0x7ea>
c000957c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000957f:	31 d2                	xor    edx,edx
c0009581:	29 c8                	sub    eax,ecx
c0009583:	c1 e0 02             	shl    eax,0x2
c0009586:	39 d1                	cmp    ecx,edx
c0009588:	7e c9                	jle    c0009553 <linear_vari_process+0x7a4>
c000958a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000958c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000958f:	83 c0 04             	add    eax,0x4
c0009592:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009596:	42                   	inc    edx
c0009597:	eb ed                	jmp    c0009586 <linear_vari_process+0x7d7>
c0009599:	83 c4 3c             	add    esp,0x3c
c000959c:	89 d0                	mov    eax,edx
c000959e:	5b                   	pop    ebx
c000959f:	5e                   	pop    esi
c00095a0:	5f                   	pop    edi
c00095a1:	5d                   	pop    ebp
c00095a2:	c3                   	ret    

c00095a3 <linear_reset>:
c00095a3:	83 ec 0c             	sub    esp,0xc
c00095a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095aa:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095ad:	85 c0                	test   eax,eax
c00095af:	74 20                	je     c00095d1 <linear_reset+0x2e>
c00095b1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095b4:	83 c0 1c             	add    eax,0x1c
c00095b7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ba:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095c1:	c1 e2 02             	shl    edx,0x2
c00095c4:	51                   	push   ecx
c00095c5:	52                   	push   edx
c00095c6:	6a 00                	push   0x0
c00095c8:	50                   	push   eax
c00095c9:	e8 ad 70 ff ff       	call   c000067b <memset>
c00095ce:	83 c4 10             	add    esp,0x10
c00095d1:	83 c4 0c             	add    esp,0xc
c00095d4:	c3                   	ret    

c00095d5 <linear_get_name>:
c00095d5:	31 c0                	xor    eax,eax
c00095d7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095dc:	75 05                	jne    c00095e3 <linear_get_name+0xe>
c00095de:	b8 80 78 02 c0       	mov    eax,0xc0027880
c00095e3:	c3                   	ret    

c00095e4 <linear_get_description>:
c00095e4:	31 c0                	xor    eax,eax
c00095e6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095eb:	75 05                	jne    c00095f2 <linear_get_description+0xe>
c00095ed:	b8 94 78 02 c0       	mov    eax,0xc0027894
c00095f2:	c3                   	ret    

c00095f3 <linear_set_converter>:
c00095f3:	53                   	push   ebx
c00095f4:	b8 0a 00 00 00       	mov    eax,0xa
c00095f9:	83 ec 08             	sub    esp,0x8
c00095fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009600:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009605:	75 6e                	jne    c0009675 <linear_set_converter+0x82>
c0009607:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000960a:	85 c0                	test   eax,eax
c000960c:	74 13                	je     c0009621 <linear_set_converter+0x2e>
c000960e:	83 ec 0c             	sub    esp,0xc
c0009611:	50                   	push   eax
c0009612:	e8 b9 5e 00 00       	call   c000f4d0 <free>
c0009617:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000961e:	83 c4 10             	add    esp,0x10
c0009621:	50                   	push   eax
c0009622:	50                   	push   eax
c0009623:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009626:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000962d:	50                   	push   eax
c000962e:	6a 01                	push   0x1
c0009630:	e8 bb 5e 00 00       	call   c000f4f0 <calloc>
c0009635:	83 c4 10             	add    esp,0x10
c0009638:	89 c2                	mov    edx,eax
c000963a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000963d:	85 d2                	test   edx,edx
c000963f:	b8 01 00 00 00       	mov    eax,0x1
c0009644:	74 2f                	je     c0009675 <linear_set_converter+0x82>
c0009646:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009649:	83 ec 0c             	sub    esp,0xc
c000964c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000964f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009655:	c7 43 24 af 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008daf
c000965c:	c7 43 20 af 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008daf
c0009663:	c7 43 28 a3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095a3
c000966a:	53                   	push   ebx
c000966b:	e8 33 ff ff ff       	call   c00095a3 <linear_reset>
c0009670:	83 c4 10             	add    esp,0x10
c0009673:	31 c0                	xor    eax,eax
c0009675:	83 c4 08             	add    esp,0x8
c0009678:	5b                   	pop    ebx
c0009679:	c3                   	ret    

c000967a <int_to_fp>:
c000967a:	c1 e0 0c             	shl    eax,0xc
c000967d:	c3                   	ret    

c000967e <fp_to_int>:
c000967e:	c1 f8 0c             	sar    eax,0xc
c0009681:	c3                   	ret    

c0009682 <fp_fraction_part>:
c0009682:	25 ff 0f 00 00       	and    eax,0xfff
c0009687:	c3                   	ret    

c0009688 <fp_to_double>:
c0009688:	83 ec 1c             	sub    esp,0x1c
c000968b:	e8 f2 ff ff ff       	call   c0009682 <fp_fraction_part>
c0009690:	83 ec 0c             	sub    esp,0xc
c0009693:	50                   	push   eax
c0009694:	e8 da c6 01 00       	call   c0025d73 <__floatsidf>
c0009699:	83 c4 10             	add    esp,0x10
c000969c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096a4:	68 00 00 30 3f       	push   0x3f300000
c00096a9:	6a 00                	push   0x0
c00096ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b3:	e8 58 c0 01 00       	call   c0025710 <__muldf3>
c00096b8:	83 c4 2c             	add    esp,0x2c
c00096bb:	c3                   	ret    

c00096bc <calc_output_single>:
c00096bc:	55                   	push   ebp
c00096bd:	57                   	push   edi
c00096be:	56                   	push   esi
c00096bf:	89 c6                	mov    esi,eax
c00096c1:	53                   	push   ebx
c00096c2:	89 d3                	mov    ebx,edx
c00096c4:	83 ec 4c             	sub    esp,0x4c
c00096c7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096ce:	e8 a7 ff ff ff       	call   c000967a <int_to_fp>
c00096d3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096da:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096de:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096e2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096e5:	99                   	cdq    
c00096e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096ee:	f7 fb                	idiv   ebx
c00096f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00096f8:	89 da                	mov    edx,ebx
c00096fa:	0f af d0             	imul   edx,eax
c00096fd:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009701:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009705:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009709:	29 c2                	sub    edx,eax
c000970b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000970e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009712:	83 c5 04             	add    ebp,0x4
c0009715:	e8 6e ff ff ff       	call   c0009688 <fp_to_double>
c000971a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000971e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009726:	e8 53 ff ff ff       	call   c000967e <fp_to_int>
c000972b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000972e:	52                   	push   edx
c000972f:	52                   	push   edx
c0009730:	51                   	push   ecx
c0009731:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009735:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009739:	e8 ea b2 01 00       	call   c0024a28 <__subsf3>
c000973e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009741:	e8 c1 c9 01 00       	call   c0026107 <__extendsfdf2>
c0009746:	83 c4 10             	add    esp,0x10
c0009749:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000974d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009751:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009755:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000975d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009761:	e8 aa bf 01 00       	call   c0025710 <__muldf3>
c0009766:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000976a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000976e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009771:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009775:	e8 8d c9 01 00       	call   c0026107 <__extendsfdf2>
c000977a:	83 c4 10             	add    esp,0x10
c000977d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009781:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009785:	52                   	push   edx
c0009786:	50                   	push   eax
c0009787:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978f:	e8 ff b8 01 00       	call   c0025093 <__adddf3>
c0009794:	59                   	pop    ecx
c0009795:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009799:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000979d:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097a3:	e8 5f c9 01 00       	call   c0026107 <__extendsfdf2>
c00097a8:	83 c4 10             	add    esp,0x10
c00097ab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097af:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b3:	52                   	push   edx
c00097b4:	50                   	push   eax
c00097b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097bd:	e8 4e bf 01 00       	call   c0025710 <__muldf3>
c00097c2:	83 c4 10             	add    esp,0x10
c00097c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097cd:	52                   	push   edx
c00097ce:	50                   	push   eax
c00097cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d7:	e8 b7 b8 01 00       	call   c0025093 <__adddf3>
c00097dc:	83 c4 10             	add    esp,0x10
c00097df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097e7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097eb:	0f 89 1d ff ff ff    	jns    c000970e <calc_output_single+0x52>
c00097f1:	89 d9                	mov    ecx,ebx
c00097f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097f7:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097fb:	89 dd                	mov    ebp,ebx
c00097fd:	29 c8                	sub    eax,ecx
c00097ff:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009807:	99                   	cdq    
c0009808:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009810:	f7 fb                	idiv   ebx
c0009812:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009816:	0f af e8             	imul   ebp,eax
c0009819:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000981d:	01 cd                	add    ebp,ecx
c000981f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009822:	89 e8                	mov    eax,ebp
c0009824:	83 ee 04             	sub    esi,0x4
c0009827:	e8 5c fe ff ff       	call   c0009688 <fp_to_double>
c000982c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009830:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009834:	89 e8                	mov    eax,ebp
c0009836:	29 dd                	sub    ebp,ebx
c0009838:	e8 41 fe ff ff       	call   c000967e <fp_to_int>
c000983d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009840:	52                   	push   edx
c0009841:	52                   	push   edx
c0009842:	51                   	push   ecx
c0009843:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009847:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000984b:	e8 d8 b1 01 00       	call   c0024a28 <__subsf3>
c0009850:	89 04 24             	mov    DWORD PTR [esp],eax
c0009853:	e8 af c8 01 00       	call   c0026107 <__extendsfdf2>
c0009858:	83 c4 10             	add    esp,0x10
c000985b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000985f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000986b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000986f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009873:	e8 98 be 01 00       	call   c0025710 <__muldf3>
c0009878:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000987c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009880:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009883:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009887:	e8 7b c8 01 00       	call   c0026107 <__extendsfdf2>
c000988c:	83 c4 10             	add    esp,0x10
c000988f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009893:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009897:	52                   	push   edx
c0009898:	50                   	push   eax
c0009899:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000989d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a1:	e8 ed b7 01 00       	call   c0025093 <__adddf3>
c00098a6:	59                   	pop    ecx
c00098a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098af:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098b5:	e8 4d c8 01 00       	call   c0026107 <__extendsfdf2>
c00098ba:	83 c4 10             	add    esp,0x10
c00098bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c5:	52                   	push   edx
c00098c6:	50                   	push   eax
c00098c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cf:	e8 3c be 01 00       	call   c0025710 <__muldf3>
c00098d4:	83 c4 10             	add    esp,0x10
c00098d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098df:	52                   	push   edx
c00098e0:	50                   	push   eax
c00098e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e9:	e8 a5 b7 01 00       	call   c0025093 <__adddf3>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 ed                	test   ebp,ebp
c00098f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098fb:	0f 8f 21 ff ff ff    	jg     c0009822 <calc_output_single+0x166>
c0009901:	52                   	push   edx
c0009902:	50                   	push   eax
c0009903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990b:	e8 83 b7 01 00       	call   c0025093 <__adddf3>
c0009910:	83 c4 5c             	add    esp,0x5c
c0009913:	5b                   	pop    ebx
c0009914:	5e                   	pop    esi
c0009915:	5f                   	pop    edi
c0009916:	5d                   	pop    ebp
c0009917:	c3                   	ret    

c0009918 <calc_output_stereo>:
c0009918:	55                   	push   ebp
c0009919:	89 cd                	mov    ebp,ecx
c000991b:	57                   	push   edi
c000991c:	56                   	push   esi
c000991d:	53                   	push   ebx
c000991e:	89 c3                	mov    ebx,eax
c0009920:	83 ec 6c             	sub    esp,0x6c
c0009923:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009927:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000992e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009935:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009939:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000993d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009940:	e8 35 fd ff ff       	call   c000967a <int_to_fp>
c0009945:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000994d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009951:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009959:	29 c8                	sub    eax,ecx
c000995b:	99                   	cdq    
c000995c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009964:	0f af d0             	imul   edx,eax
c0009967:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000996a:	31 d2                	xor    edx,edx
c000996c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009970:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009974:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009977:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000997b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000997e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009982:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009986:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009989:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000998e:	29 c1                	sub    ecx,eax
c0009990:	31 c0                	xor    eax,eax
c0009992:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009995:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009999:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000999d:	83 c7 08             	add    edi,0x8
c00099a0:	e8 e3 fc ff ff       	call   c0009688 <fp_to_double>
c00099a5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099a9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099b1:	e8 c8 fc ff ff       	call   c000967e <fp_to_int>
c00099b6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099b9:	52                   	push   edx
c00099ba:	52                   	push   edx
c00099bb:	51                   	push   ecx
c00099bc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099c4:	e8 5f b0 01 00       	call   c0024a28 <__subsf3>
c00099c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099cc:	e8 36 c7 01 00       	call   c0026107 <__extendsfdf2>
c00099d1:	83 c4 10             	add    esp,0x10
c00099d4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099d8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ec:	e8 1f bd 01 00       	call   c0025710 <__muldf3>
c00099f1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00099f5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00099f9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099fc:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a00:	e8 02 c7 01 00       	call   c0026107 <__extendsfdf2>
c0009a05:	83 c4 10             	add    esp,0x10
c0009a08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a10:	52                   	push   edx
c0009a11:	50                   	push   eax
c0009a12:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a16:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a1a:	e8 74 b6 01 00       	call   c0025093 <__adddf3>
c0009a1f:	59                   	pop    ecx
c0009a20:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a24:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a28:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a2e:	e8 d4 c6 01 00       	call   c0026107 <__extendsfdf2>
c0009a33:	83 c4 10             	add    esp,0x10
c0009a36:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a46:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4e:	e8 bd bc 01 00       	call   c0025710 <__muldf3>
c0009a53:	83 c4 10             	add    esp,0x10
c0009a56:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a5a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a5e:	52                   	push   edx
c0009a5f:	50                   	push   eax
c0009a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a68:	e8 26 b6 01 00       	call   c0025093 <__adddf3>
c0009a6d:	59                   	pop    ecx
c0009a6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a72:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a76:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a7c:	e8 86 c6 01 00       	call   c0026107 <__extendsfdf2>
c0009a81:	83 c4 10             	add    esp,0x10
c0009a84:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a88:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a94:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a98:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9c:	e8 6f bc 01 00       	call   c0025710 <__muldf3>
c0009aa1:	83 c4 10             	add    esp,0x10
c0009aa4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009aa8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009aac:	52                   	push   edx
c0009aad:	50                   	push   eax
c0009aae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab6:	e8 d8 b5 01 00       	call   c0025093 <__adddf3>
c0009abb:	83 c4 10             	add    esp,0x10
c0009abe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ac2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aca:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ace:	0f 89 c5 fe ff ff    	jns    c0009999 <calc_output_stereo+0x81>
c0009ad4:	29 e9                	sub    ecx,ebp
c0009ad6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ada:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009ade:	29 c8                	sub    eax,ecx
c0009ae0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009ae8:	99                   	cdq    
c0009ae9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009aed:	31 d2                	xor    edx,edx
c0009aef:	0f af f8             	imul   edi,eax
c0009af2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009af6:	40                   	inc    eax
c0009af7:	01 cf                	add    edi,ecx
c0009af9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009afe:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b02:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b0a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b0d:	31 c0                	xor    eax,eax
c0009b0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b13:	89 f8                	mov    eax,edi
c0009b15:	83 eb 08             	sub    ebx,0x8
c0009b18:	e8 6b fb ff ff       	call   c0009688 <fp_to_double>
c0009b1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b25:	89 f8                	mov    eax,edi
c0009b27:	e8 52 fb ff ff       	call   c000967e <fp_to_int>
c0009b2c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b2f:	52                   	push   edx
c0009b30:	52                   	push   edx
c0009b31:	55                   	push   ebp
c0009b32:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b36:	e8 ed ae 01 00       	call   c0024a28 <__subsf3>
c0009b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b3e:	e8 c4 c5 01 00       	call   c0026107 <__extendsfdf2>
c0009b43:	83 c4 10             	add    esp,0x10
c0009b46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b4a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5e:	e8 ad bb 01 00       	call   c0025710 <__muldf3>
c0009b63:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b66:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b6a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b6e:	e8 94 c5 01 00       	call   c0026107 <__extendsfdf2>
c0009b73:	83 c4 10             	add    esp,0x10
c0009b76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b7e:	52                   	push   edx
c0009b7f:	50                   	push   eax
c0009b80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b88:	e8 06 b5 01 00       	call   c0025093 <__adddf3>
c0009b8d:	59                   	pop    ecx
c0009b8e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009b92:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009b96:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009b9c:	e8 66 c5 01 00       	call   c0026107 <__extendsfdf2>
c0009ba1:	83 c4 10             	add    esp,0x10
c0009ba4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ba8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bbc:	e8 4f bb 01 00       	call   c0025710 <__muldf3>
c0009bc1:	83 c4 10             	add    esp,0x10
c0009bc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bcc:	52                   	push   edx
c0009bcd:	50                   	push   eax
c0009bce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd6:	e8 b8 b4 01 00       	call   c0025093 <__adddf3>
c0009bdb:	5d                   	pop    ebp
c0009bdc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009be0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009be4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bea:	e8 18 c5 01 00       	call   c0026107 <__extendsfdf2>
c0009bef:	83 c4 10             	add    esp,0x10
c0009bf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c0a:	e8 01 bb 01 00       	call   c0025710 <__muldf3>
c0009c0f:	83 c4 10             	add    esp,0x10
c0009c12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c1a:	52                   	push   edx
c0009c1b:	50                   	push   eax
c0009c1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c24:	e8 6a b4 01 00       	call   c0025093 <__adddf3>
c0009c29:	83 c4 10             	add    esp,0x10
c0009c2c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c38:	85 ff                	test   edi,edi
c0009c3a:	0f 8f d3 fe ff ff    	jg     c0009b13 <calc_output_stereo+0x1fb>
c0009c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c50:	e8 3e b4 01 00       	call   c0025093 <__adddf3>
c0009c55:	83 c4 10             	add    esp,0x10
c0009c58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c60:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c64:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c70:	e8 9b ba 01 00       	call   c0025710 <__muldf3>
c0009c75:	59                   	pop    ecx
c0009c76:	5b                   	pop    ebx
c0009c77:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c87:	e8 57 c3 01 00       	call   c0025fe3 <__truncdfsf2>
c0009c8c:	83 c4 10             	add    esp,0x10
c0009c8f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009c96:	89 03                	mov    DWORD PTR [ebx],eax
c0009c98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca8:	e8 e6 b3 01 00       	call   c0025093 <__adddf3>
c0009cad:	83 c4 10             	add    esp,0x10
c0009cb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cb8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc8:	e8 43 ba 01 00       	call   c0025710 <__muldf3>
c0009ccd:	5e                   	pop    esi
c0009cce:	5f                   	pop    edi
c0009ccf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cd3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdf:	e8 ff c2 01 00       	call   c0025fe3 <__truncdfsf2>
c0009ce4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009ceb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cee:	83 c4 7c             	add    esp,0x7c
c0009cf1:	5b                   	pop    ebx
c0009cf2:	5e                   	pop    esi
c0009cf3:	5f                   	pop    edi
c0009cf4:	5d                   	pop    ebp
c0009cf5:	c3                   	ret    

c0009cf6 <calc_output_quad>:
c0009cf6:	55                   	push   ebp
c0009cf7:	57                   	push   edi
c0009cf8:	56                   	push   esi
c0009cf9:	89 c6                	mov    esi,eax
c0009cfb:	53                   	push   ebx
c0009cfc:	83 ec 7c             	sub    esp,0x7c
c0009cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d03:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d07:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d0e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d20:	e8 55 f9 ff ff       	call   c000967a <int_to_fp>
c0009d25:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d28:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d2b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d2f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d33:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d37:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d3b:	99                   	cdq    
c0009d3c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d40:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d44:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d47:	31 d2                	xor    edx,edx
c0009d49:	0f af d8             	imul   ebx,eax
c0009d4c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d54:	0f af c7             	imul   eax,edi
c0009d57:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d5b:	29 c1                	sub    ecx,eax
c0009d5d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d65:	31 c0                	xor    eax,eax
c0009d67:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d6e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d76:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d82:	89 d8                	mov    eax,ebx
c0009d84:	83 c7 10             	add    edi,0x10
c0009d87:	e8 fc f8 ff ff       	call   c0009688 <fp_to_double>
c0009d8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d94:	89 d8                	mov    eax,ebx
c0009d96:	e8 e3 f8 ff ff       	call   c000967e <fp_to_int>
c0009d9b:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009d9f:	52                   	push   edx
c0009da0:	52                   	push   edx
c0009da1:	51                   	push   ecx
c0009da2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009da6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009daa:	e8 79 ac 01 00       	call   c0024a28 <__subsf3>
c0009daf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009db2:	e8 50 c3 01 00       	call   c0026107 <__extendsfdf2>
c0009db7:	83 c4 10             	add    esp,0x10
c0009dba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dbe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dce:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd2:	e8 39 b9 01 00       	call   c0025710 <__muldf3>
c0009dd7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009ddb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ddf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009de6:	e8 1c c3 01 00       	call   c0026107 <__extendsfdf2>
c0009deb:	83 c4 10             	add    esp,0x10
c0009dee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009df2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df6:	52                   	push   edx
c0009df7:	50                   	push   eax
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e00:	e8 8e b2 01 00       	call   c0025093 <__adddf3>
c0009e05:	59                   	pop    ecx
c0009e06:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e0a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e14:	e8 ee c2 01 00       	call   c0026107 <__extendsfdf2>
c0009e19:	83 c4 10             	add    esp,0x10
c0009e1c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e20:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e30:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e34:	e8 d7 b8 01 00       	call   c0025710 <__muldf3>
c0009e39:	83 c4 10             	add    esp,0x10
c0009e3c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e40:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e44:	52                   	push   edx
c0009e45:	50                   	push   eax
c0009e46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4e:	e8 40 b2 01 00       	call   c0025093 <__adddf3>
c0009e53:	59                   	pop    ecx
c0009e54:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e58:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e5c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e62:	e8 a0 c2 01 00       	call   c0026107 <__extendsfdf2>
c0009e67:	83 c4 10             	add    esp,0x10
c0009e6a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e6e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e7a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e82:	e8 89 b8 01 00       	call   c0025710 <__muldf3>
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e8e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e92:	52                   	push   edx
c0009e93:	50                   	push   eax
c0009e94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9c:	e8 f2 b1 01 00       	call   c0025093 <__adddf3>
c0009ea1:	59                   	pop    ecx
c0009ea2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ea6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eaa:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009eb0:	e8 52 c2 01 00       	call   c0026107 <__extendsfdf2>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed0:	e8 3b b8 01 00       	call   c0025710 <__muldf3>
c0009ed5:	83 c4 10             	add    esp,0x10
c0009ed8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009edc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee0:	52                   	push   edx
c0009ee1:	50                   	push   eax
c0009ee2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ee6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009eea:	e8 a4 b1 01 00       	call   c0025093 <__adddf3>
c0009eef:	59                   	pop    ecx
c0009ef0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ef4:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ef8:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009efe:	e8 04 c2 01 00       	call   c0026107 <__extendsfdf2>
c0009f03:	83 c4 10             	add    esp,0x10
c0009f06:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f16:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1e:	e8 ed b7 01 00       	call   c0025710 <__muldf3>
c0009f23:	83 c4 10             	add    esp,0x10
c0009f26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f2e:	52                   	push   edx
c0009f2f:	50                   	push   eax
c0009f30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f38:	e8 56 b1 01 00       	call   c0025093 <__adddf3>
c0009f3d:	83 c4 10             	add    esp,0x10
c0009f40:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f44:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f48:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f4c:	0f 89 30 fe ff ff    	jns    c0009d82 <calc_output_quad+0x8c>
c0009f52:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f56:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f5a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f5e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f62:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f6a:	29 c8                	sub    eax,ecx
c0009f6c:	99                   	cdq    
c0009f6d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f71:	31 d2                	xor    edx,edx
c0009f73:	0f af d8             	imul   ebx,eax
c0009f76:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f7a:	40                   	inc    eax
c0009f7b:	01 cb                	add    ebx,ecx
c0009f7d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f82:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f86:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f8e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009f91:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009f99:	31 c0                	xor    eax,eax
c0009f9b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009f9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fa3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fa7:	89 d8                	mov    eax,ebx
c0009fa9:	83 ee 10             	sub    esi,0x10
c0009fac:	e8 d7 f6 ff ff       	call   c0009688 <fp_to_double>
c0009fb1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fb9:	89 d8                	mov    eax,ebx
c0009fbb:	e8 be f6 ff ff       	call   c000967e <fp_to_int>
c0009fc0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fc4:	52                   	push   edx
c0009fc5:	52                   	push   edx
c0009fc6:	57                   	push   edi
c0009fc7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fcb:	e8 58 aa 01 00       	call   c0024a28 <__subsf3>
c0009fd0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd3:	e8 2f c1 01 00       	call   c0026107 <__extendsfdf2>
c0009fd8:	83 c4 10             	add    esp,0x10
c0009fdb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fdf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009feb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff3:	e8 18 b7 01 00       	call   c0025710 <__muldf3>
c0009ff8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ffb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a003:	e8 ff c0 01 00       	call   c0026107 <__extendsfdf2>
c000a008:	83 c4 10             	add    esp,0x10
c000a00b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a00f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a013:	52                   	push   edx
c000a014:	50                   	push   eax
c000a015:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a019:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01d:	e8 71 b0 01 00       	call   c0025093 <__adddf3>
c000a022:	59                   	pop    ecx
c000a023:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a027:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a02b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a031:	e8 d1 c0 01 00       	call   c0026107 <__extendsfdf2>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a045:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a049:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a051:	e8 ba b6 01 00       	call   c0025710 <__muldf3>
c000a056:	83 c4 10             	add    esp,0x10
c000a059:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a061:	52                   	push   edx
c000a062:	50                   	push   eax
c000a063:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a067:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a06b:	e8 23 b0 01 00       	call   c0025093 <__adddf3>
c000a070:	5f                   	pop    edi
c000a071:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a075:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a079:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a07f:	e8 83 c0 01 00       	call   c0026107 <__extendsfdf2>
c000a084:	83 c4 10             	add    esp,0x10
c000a087:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a093:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a097:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09f:	e8 6c b6 01 00       	call   c0025710 <__muldf3>
c000a0a4:	83 c4 10             	add    esp,0x10
c000a0a7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ab:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0af:	52                   	push   edx
c000a0b0:	50                   	push   eax
c000a0b1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b9:	e8 d5 af 01 00       	call   c0025093 <__adddf3>
c000a0be:	59                   	pop    ecx
c000a0bf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0c3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0c7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0cd:	e8 35 c0 01 00       	call   c0026107 <__extendsfdf2>
c000a0d2:	83 c4 10             	add    esp,0x10
c000a0d5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ed:	e8 1e b6 01 00       	call   c0025710 <__muldf3>
c000a0f2:	83 c4 10             	add    esp,0x10
c000a0f5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fd:	52                   	push   edx
c000a0fe:	50                   	push   eax
c000a0ff:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a103:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a107:	e8 87 af 01 00       	call   c0025093 <__adddf3>
c000a10c:	5f                   	pop    edi
c000a10d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a111:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a115:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a11b:	e8 e7 bf 01 00       	call   c0026107 <__extendsfdf2>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a127:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a133:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a137:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13b:	e8 d0 b5 01 00       	call   c0025710 <__muldf3>
c000a140:	83 c4 10             	add    esp,0x10
c000a143:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a147:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a14b:	52                   	push   edx
c000a14c:	50                   	push   eax
c000a14d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a151:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a155:	e8 39 af 01 00       	call   c0025093 <__adddf3>
c000a15a:	83 c4 10             	add    esp,0x10
c000a15d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a161:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a165:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a169:	85 db                	test   ebx,ebx
c000a16b:	0f 8f 36 fe ff ff    	jg     c0009fa7 <calc_output_quad+0x2b1>
c000a171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a181:	e8 0d af 01 00       	call   c0025093 <__adddf3>
c000a186:	83 c4 10             	add    esp,0x10
c000a189:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a18d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a195:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a1:	e8 6a b5 01 00       	call   c0025710 <__muldf3>
c000a1a6:	59                   	pop    ecx
c000a1a7:	5b                   	pop    ebx
c000a1a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b8:	e8 26 be 01 00       	call   c0025fe3 <__truncdfsf2>
c000a1bd:	83 c4 10             	add    esp,0x10
c000a1c0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1c7:	89 06                	mov    DWORD PTR [esi],eax
c000a1c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d9:	e8 b5 ae 01 00       	call   c0025093 <__adddf3>
c000a1de:	83 c4 10             	add    esp,0x10
c000a1e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f9:	e8 12 b5 01 00       	call   c0025710 <__muldf3>
c000a1fe:	5e                   	pop    esi
c000a1ff:	5f                   	pop    edi
c000a200:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a204:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a210:	e8 ce bd 01 00       	call   c0025fe3 <__truncdfsf2>
c000a215:	83 c4 10             	add    esp,0x10
c000a218:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a21f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a222:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a226:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a22a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a22e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a232:	e8 5c ae 01 00       	call   c0025093 <__adddf3>
c000a237:	83 c4 10             	add    esp,0x10
c000a23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a252:	e8 b9 b4 01 00       	call   c0025710 <__muldf3>
c000a257:	5d                   	pop    ebp
c000a258:	59                   	pop    ecx
c000a259:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a25d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a269:	e8 75 bd 01 00       	call   c0025fe3 <__truncdfsf2>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a278:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a27b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a27f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a283:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a287:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28b:	e8 03 ae 01 00       	call   c0025093 <__adddf3>
c000a290:	83 c4 10             	add    esp,0x10
c000a293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a297:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a29b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ab:	e8 60 b4 01 00       	call   c0025710 <__muldf3>
c000a2b0:	5b                   	pop    ebx
c000a2b1:	5e                   	pop    esi
c000a2b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c2:	e8 1c bd 01 00       	call   c0025fe3 <__truncdfsf2>
c000a2c7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2ce:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2d1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2d7:	5b                   	pop    ebx
c000a2d8:	5e                   	pop    esi
c000a2d9:	5f                   	pop    edi
c000a2da:	5d                   	pop    ebp
c000a2db:	c3                   	ret    

c000a2dc <calc_output_hex>:
c000a2dc:	55                   	push   ebp
c000a2dd:	89 cd                	mov    ebp,ecx
c000a2df:	57                   	push   edi
c000a2e0:	56                   	push   esi
c000a2e1:	53                   	push   ebx
c000a2e2:	89 c3                	mov    ebx,eax
c000a2e4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2ea:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2ed:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a2f4:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a2fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a303:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a306:	e8 6f f3 ff ff       	call   c000967a <int_to_fp>
c000a30b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a30e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a312:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a315:	29 c8                	sub    eax,ecx
c000a317:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a31b:	99                   	cdq    
c000a31c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a324:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a327:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a32f:	0f af f8             	imul   edi,eax
c000a332:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a335:	01 cf                	add    edi,ecx
c000a337:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a33b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a33e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a342:	0f af c2             	imul   eax,edx
c000a345:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a349:	29 c1                	sub    ecx,eax
c000a34b:	31 d2                	xor    edx,edx
c000a34d:	31 c0                	xor    eax,eax
c000a34f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a35a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a35e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a362:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a366:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a36a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a36e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a372:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a376:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a37a:	89 f8                	mov    eax,edi
c000a37c:	e8 07 f3 ff ff       	call   c0009688 <fp_to_double>
c000a381:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a385:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a389:	89 f8                	mov    eax,edi
c000a38b:	e8 ee f2 ff ff       	call   c000967e <fp_to_int>
c000a390:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a394:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a397:	52                   	push   edx
c000a398:	52                   	push   edx
c000a399:	51                   	push   ecx
c000a39a:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a39e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3a5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3a9:	e8 7a a6 01 00       	call   c0024a28 <__subsf3>
c000a3ae:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b1:	e8 51 bd 01 00       	call   c0026107 <__extendsfdf2>
c000a3b6:	83 c4 10             	add    esp,0x10
c000a3b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3d1:	e8 3a b3 01 00       	call   c0025710 <__muldf3>
c000a3d6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3de:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3e5:	e8 1d bd 01 00       	call   c0026107 <__extendsfdf2>
c000a3ea:	83 c4 10             	add    esp,0x10
c000a3ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f5:	52                   	push   edx
c000a3f6:	50                   	push   eax
c000a3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3ff:	e8 8f ac 01 00       	call   c0025093 <__adddf3>
c000a404:	59                   	pop    ecx
c000a405:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a409:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a40d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a413:	e8 ef bc 01 00       	call   c0026107 <__extendsfdf2>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a41f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a423:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a427:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a42f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a433:	e8 d8 b2 01 00       	call   c0025710 <__muldf3>
c000a438:	83 c4 10             	add    esp,0x10
c000a43b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a443:	52                   	push   edx
c000a444:	50                   	push   eax
c000a445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a449:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44d:	e8 41 ac 01 00       	call   c0025093 <__adddf3>
c000a452:	59                   	pop    ecx
c000a453:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a457:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a45b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a461:	e8 a1 bc 01 00       	call   c0026107 <__extendsfdf2>
c000a466:	83 c4 10             	add    esp,0x10
c000a469:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a479:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a481:	e8 8a b2 01 00       	call   c0025710 <__muldf3>
c000a486:	83 c4 10             	add    esp,0x10
c000a489:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a491:	52                   	push   edx
c000a492:	50                   	push   eax
c000a493:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a497:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a49b:	e8 f3 ab 01 00       	call   c0025093 <__adddf3>
c000a4a0:	59                   	pop    ecx
c000a4a1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4a5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4a9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4af:	e8 53 bc 01 00       	call   c0026107 <__extendsfdf2>
c000a4b4:	83 c4 10             	add    esp,0x10
c000a4b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cf:	e8 3c b2 01 00       	call   c0025710 <__muldf3>
c000a4d4:	83 c4 10             	add    esp,0x10
c000a4d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4df:	52                   	push   edx
c000a4e0:	50                   	push   eax
c000a4e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e9:	e8 a5 ab 01 00       	call   c0025093 <__adddf3>
c000a4ee:	59                   	pop    ecx
c000a4ef:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4f3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a4f7:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a4fd:	e8 05 bc 01 00       	call   c0026107 <__extendsfdf2>
c000a502:	83 c4 10             	add    esp,0x10
c000a505:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a509:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a515:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a519:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51d:	e8 ee b1 01 00       	call   c0025710 <__muldf3>
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a529:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52d:	52                   	push   edx
c000a52e:	50                   	push   eax
c000a52f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a533:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a537:	e8 57 ab 01 00       	call   c0025093 <__adddf3>
c000a53c:	59                   	pop    ecx
c000a53d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a541:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a545:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a54b:	e8 b7 bb 01 00       	call   c0026107 <__extendsfdf2>
c000a550:	83 c4 10             	add    esp,0x10
c000a553:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a557:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a563:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a567:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56b:	e8 a0 b1 01 00       	call   c0025710 <__muldf3>
c000a570:	83 c4 10             	add    esp,0x10
c000a573:	83 c6 18             	add    esi,0x18
c000a576:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a57e:	52                   	push   edx
c000a57f:	50                   	push   eax
c000a580:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a584:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a588:	e8 06 ab 01 00       	call   c0025093 <__adddf3>
c000a58d:	59                   	pop    ecx
c000a58e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a592:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a596:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a59c:	e8 66 bb 01 00       	call   c0026107 <__extendsfdf2>
c000a5a1:	83 c4 10             	add    esp,0x10
c000a5a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5bc:	e8 4f b1 01 00       	call   c0025710 <__muldf3>
c000a5c1:	83 c4 10             	add    esp,0x10
c000a5c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5cc:	52                   	push   edx
c000a5cd:	50                   	push   eax
c000a5ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d6:	e8 b8 aa 01 00       	call   c0025093 <__adddf3>
c000a5db:	83 c4 10             	add    esp,0x10
c000a5de:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5e2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5e6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5e9:	0f 89 8b fd ff ff    	jns    c000a37a <calc_output_hex+0x9e>
c000a5ef:	31 f6                	xor    esi,esi
c000a5f1:	31 ff                	xor    edi,edi
c000a5f3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a5f7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a5fa:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a5fe:	29 e9                	sub    ecx,ebp
c000a600:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a604:	29 c8                	sub    eax,ecx
c000a606:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a609:	99                   	cdq    
c000a60a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a60e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a611:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a615:	0f af e8             	imul   ebp,eax
c000a618:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a61c:	40                   	inc    eax
c000a61d:	01 cd                	add    ebp,ecx
c000a61f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a624:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a628:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a62c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a630:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a633:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a637:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a63b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a63f:	89 e8                	mov    eax,ebp
c000a641:	e8 42 f0 ff ff       	call   c0009688 <fp_to_double>
c000a646:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a64e:	89 e8                	mov    eax,ebp
c000a650:	e8 29 f0 ff ff       	call   c000967e <fp_to_int>
c000a655:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a659:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a65c:	52                   	push   edx
c000a65d:	52                   	push   edx
c000a65e:	51                   	push   ecx
c000a65f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a666:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a66d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a671:	e8 b2 a3 01 00       	call   c0024a28 <__subsf3>
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	e8 89 ba 01 00       	call   c0026107 <__extendsfdf2>
c000a67e:	83 c4 10             	add    esp,0x10
c000a681:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a685:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a691:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a695:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a699:	e8 72 b0 01 00       	call   c0025710 <__muldf3>
c000a69e:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6a9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6b0:	e8 52 ba 01 00       	call   c0026107 <__extendsfdf2>
c000a6b5:	83 c4 10             	add    esp,0x10
c000a6b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6c0:	52                   	push   edx
c000a6c1:	50                   	push   eax
c000a6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ca:	e8 c4 a9 01 00       	call   c0025093 <__adddf3>
c000a6cf:	59                   	pop    ecx
c000a6d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6d4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6d8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6de:	e8 24 ba 01 00       	call   c0026107 <__extendsfdf2>
c000a6e3:	83 c4 10             	add    esp,0x10
c000a6e6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ea:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fa:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fe:	e8 0d b0 01 00       	call   c0025710 <__muldf3>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a70a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a70e:	52                   	push   edx
c000a70f:	50                   	push   eax
c000a710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a718:	e8 76 a9 01 00       	call   c0025093 <__adddf3>
c000a71d:	59                   	pop    ecx
c000a71e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a722:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a726:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a72c:	e8 d6 b9 01 00       	call   c0026107 <__extendsfdf2>
c000a731:	83 c4 10             	add    esp,0x10
c000a734:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a738:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a744:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a748:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74c:	e8 bf af 01 00       	call   c0025710 <__muldf3>
c000a751:	83 c4 10             	add    esp,0x10
c000a754:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a758:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75c:	52                   	push   edx
c000a75d:	50                   	push   eax
c000a75e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a762:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a766:	e8 28 a9 01 00       	call   c0025093 <__adddf3>
c000a76b:	59                   	pop    ecx
c000a76c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a770:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a774:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a77a:	e8 88 b9 01 00       	call   c0026107 <__extendsfdf2>
c000a77f:	83 c4 10             	add    esp,0x10
c000a782:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a786:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a792:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a796:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79a:	e8 71 af 01 00       	call   c0025710 <__muldf3>
c000a79f:	83 c4 10             	add    esp,0x10
c000a7a2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7aa:	52                   	push   edx
c000a7ab:	50                   	push   eax
c000a7ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b4:	e8 da a8 01 00       	call   c0025093 <__adddf3>
c000a7b9:	59                   	pop    ecx
c000a7ba:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7be:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7c2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7c8:	e8 3a b9 01 00       	call   c0026107 <__extendsfdf2>
c000a7cd:	83 c4 10             	add    esp,0x10
c000a7d0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e8:	e8 23 af 01 00       	call   c0025710 <__muldf3>
c000a7ed:	83 c4 10             	add    esp,0x10
c000a7f0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f8:	52                   	push   edx
c000a7f9:	50                   	push   eax
c000a7fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a7fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a802:	e8 8c a8 01 00       	call   c0025093 <__adddf3>
c000a807:	59                   	pop    ecx
c000a808:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a80c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a810:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a816:	e8 ec b8 01 00       	call   c0026107 <__extendsfdf2>
c000a81b:	83 c4 10             	add    esp,0x10
c000a81e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a822:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a832:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a836:	e8 d5 ae 01 00       	call   c0025710 <__muldf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	83 eb 18             	sub    ebx,0x18
c000a841:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a845:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a849:	52                   	push   edx
c000a84a:	50                   	push   eax
c000a84b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a84f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a853:	e8 3b a8 01 00       	call   c0025093 <__adddf3>
c000a858:	59                   	pop    ecx
c000a859:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a85d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a861:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a867:	e8 9b b8 01 00       	call   c0026107 <__extendsfdf2>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a873:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a883:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a887:	e8 84 ae 01 00       	call   c0025710 <__muldf3>
c000a88c:	83 c4 10             	add    esp,0x10
c000a88f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a897:	52                   	push   edx
c000a898:	50                   	push   eax
c000a899:	57                   	push   edi
c000a89a:	56                   	push   esi
c000a89b:	e8 f3 a7 01 00       	call   c0025093 <__adddf3>
c000a8a0:	83 c4 10             	add    esp,0x10
c000a8a3:	89 c6                	mov    esi,eax
c000a8a5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8a8:	89 d7                	mov    edi,edx
c000a8aa:	85 ed                	test   ebp,ebp
c000a8ac:	0f 8f 8d fd ff ff    	jg     c000a63f <calc_output_hex+0x363>
c000a8b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c2:	e8 cc a7 01 00       	call   c0025093 <__adddf3>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e1:	e8 2a ae 01 00       	call   c0025710 <__muldf3>
c000a8e6:	59                   	pop    ecx
c000a8e7:	5b                   	pop    ebx
c000a8e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f8:	e8 e6 b6 01 00       	call   c0025fe3 <__truncdfsf2>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a907:	89 03                	mov    DWORD PTR [ebx],eax
c000a909:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a90d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a911:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a915:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a919:	e8 75 a7 01 00       	call   c0025093 <__adddf3>
c000a91e:	83 c4 10             	add    esp,0x10
c000a921:	89 04 24             	mov    DWORD PTR [esp],eax
c000a924:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a930:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a934:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a938:	e8 d3 ad 01 00       	call   c0025710 <__muldf3>
c000a93d:	5d                   	pop    ebp
c000a93e:	59                   	pop    ecx
c000a93f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a943:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a947:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94f:	e8 8f b6 01 00       	call   c0025fe3 <__truncdfsf2>
c000a954:	83 c4 10             	add    esp,0x10
c000a957:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a95e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a961:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a965:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a969:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a96d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a971:	e8 1d a7 01 00       	call   c0025093 <__adddf3>
c000a976:	83 c4 10             	add    esp,0x10
c000a979:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a980:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a984:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a988:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a990:	e8 7b ad 01 00       	call   c0025710 <__muldf3>
c000a995:	5b                   	pop    ebx
c000a996:	5d                   	pop    ebp
c000a997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a99b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a99f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a7:	e8 37 b6 01 00       	call   c0025fe3 <__truncdfsf2>
c000a9ac:	83 c4 10             	add    esp,0x10
c000a9af:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9b6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9b9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9bd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c9:	e8 c5 a6 01 00       	call   c0025093 <__adddf3>
c000a9ce:	83 c4 10             	add    esp,0x10
c000a9d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e8:	e8 23 ad 01 00       	call   c0025710 <__muldf3>
c000a9ed:	59                   	pop    ecx
c000a9ee:	5b                   	pop    ebx
c000a9ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ff:	e8 df b5 01 00       	call   c0025fe3 <__truncdfsf2>
c000aa04:	83 c4 10             	add    esp,0x10
c000aa07:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa0e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa21:	e8 6d a6 01 00       	call   c0025093 <__adddf3>
c000aa26:	83 c4 10             	add    esp,0x10
c000aa29:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa40:	e8 cb ac 01 00       	call   c0025710 <__muldf3>
c000aa45:	5d                   	pop    ebp
c000aa46:	59                   	pop    ecx
c000aa47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa57:	e8 87 b5 01 00       	call   c0025fe3 <__truncdfsf2>
c000aa5c:	83 c4 10             	add    esp,0x10
c000aa5f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa66:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa69:	57                   	push   edi
c000aa6a:	56                   	push   esi
c000aa6b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa6f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa73:	e8 1b a6 01 00       	call   c0025093 <__adddf3>
c000aa78:	83 c4 10             	add    esp,0x10
c000aa7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa92:	e8 79 ac 01 00       	call   c0025710 <__muldf3>
c000aa97:	5b                   	pop    ebx
c000aa98:	5e                   	pop    esi
c000aa99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa9:	e8 35 b5 01 00       	call   c0025fe3 <__truncdfsf2>
c000aaae:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aab5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aab8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aabe:	5b                   	pop    ebx
c000aabf:	5e                   	pop    esi
c000aac0:	5f                   	pop    edi
c000aac1:	5d                   	pop    ebp
c000aac2:	c3                   	ret    

c000aac3 <sinc_reset>:
c000aac3:	56                   	push   esi
c000aac4:	53                   	push   ebx
c000aac5:	51                   	push   ecx
c000aac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaca:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aacd:	85 db                	test   ebx,ebx
c000aacf:	74 59                	je     c000ab2a <sinc_reset+0x67>
c000aad1:	31 d2                	xor    edx,edx
c000aad3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aada:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aadd:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aae0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aae7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aaee:	31 c0                	xor    eax,eax
c000aaf0:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000aaf6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000aaf9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000aafc:	52                   	push   edx
c000aafd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab00:	c1 e0 02             	shl    eax,0x2
c000ab03:	50                   	push   eax
c000ab04:	6a 00                	push   0x0
c000ab06:	56                   	push   esi
c000ab07:	e8 6f 5b ff ff       	call   c000067b <memset>
c000ab0c:	83 c4 0c             	add    esp,0xc
c000ab0f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab12:	c1 e0 02             	shl    eax,0x2
c000ab15:	50                   	push   eax
c000ab16:	68 aa 00 00 00       	push   0xaa
c000ab1b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab1e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab21:	50                   	push   eax
c000ab22:	e8 54 5b ff ff       	call   c000067b <memset>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	58                   	pop    eax
c000ab2b:	5b                   	pop    ebx
c000ab2c:	5e                   	pop    esi
c000ab2d:	c3                   	ret    

c000ab2e <calc_output_multi>:
c000ab2e:	55                   	push   ebp
c000ab2f:	57                   	push   edi
c000ab30:	56                   	push   esi
c000ab31:	89 c6                	mov    esi,eax
c000ab33:	53                   	push   ebx
c000ab34:	83 ec 4c             	sub    esp,0x4c
c000ab37:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab3b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab3f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab43:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab47:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab53:	8d 46 44             	lea    eax,[esi+0x44]
c000ab56:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab59:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab63:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab66:	e8 0f eb ff ff       	call   c000967a <int_to_fp>
c000ab6b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab6e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab72:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab76:	99                   	cdq    
c000ab77:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab7f:	0f af d0             	imul   edx,eax
c000ab82:	0f af c3             	imul   eax,ebx
c000ab85:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab89:	29 c1                	sub    ecx,eax
c000ab8b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab8f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ab93:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ab9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ab9e:	57                   	push   edi
c000ab9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aba3:	6a 00                	push   0x0
c000aba5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aba9:	e8 cd 5a ff ff       	call   c000067b <memset>
c000abae:	83 c4 10             	add    esp,0x10
c000abb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abb5:	89 df                	mov    edi,ebx
c000abb7:	e8 cc ea ff ff       	call   c0009688 <fp_to_double>
c000abbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc8:	e8 b1 ea ff ff       	call   c000967e <fp_to_int>
c000abcd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abd0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abd3:	51                   	push   ecx
c000abd4:	51                   	push   ecx
c000abd5:	55                   	push   ebp
c000abd6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abda:	e8 49 9e 01 00       	call   c0024a28 <__subsf3>
c000abdf:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe2:	e8 20 b5 01 00       	call   c0026107 <__extendsfdf2>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000abf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abfa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abfe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac02:	e8 09 ab 01 00       	call   c0025710 <__muldf3>
c000ac07:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac0e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac12:	e8 f0 b4 01 00       	call   c0026107 <__extendsfdf2>
c000ac17:	83 c4 10             	add    esp,0x10
c000ac1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac22:	52                   	push   edx
c000ac23:	50                   	push   eax
c000ac24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2c:	e8 62 a4 01 00       	call   c0025093 <__adddf3>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3c:	89 f8                	mov    eax,edi
c000ac3e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac43:	99                   	cdq    
c000ac44:	f7 f9                	idiv   ecx
c000ac46:	4a                   	dec    edx
c000ac47:	83 fa 06             	cmp    edx,0x6
c000ac4a:	77 07                	ja     c000ac53 <calc_output_multi+0x125>
c000ac4c:	ff 24 95 c4 78 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd873c]
c000ac53:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac56:	4f                   	dec    edi
c000ac57:	83 ec 0c             	sub    esp,0xc
c000ac5a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac61:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac68:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac6c:	e8 96 b4 01 00       	call   c0026107 <__extendsfdf2>
c000ac71:	83 c4 10             	add    esp,0x10
c000ac74:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac78:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac84:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac88:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8c:	e8 7f aa 01 00       	call   c0025710 <__muldf3>
c000ac91:	83 c4 10             	add    esp,0x10
c000ac94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac98:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9c:	52                   	push   edx
c000ac9d:	50                   	push   eax
c000ac9e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aca1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aca4:	e8 ea a3 01 00       	call   c0025093 <__adddf3>
c000aca9:	83 c4 10             	add    esp,0x10
c000acac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acaf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acb5:	4f                   	dec    edi
c000acb6:	83 ec 0c             	sub    esp,0xc
c000acb9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acc0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acc7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000accb:	e8 37 b4 01 00       	call   c0026107 <__extendsfdf2>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aceb:	e8 20 aa 01 00       	call   c0025710 <__muldf3>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfb:	52                   	push   edx
c000acfc:	50                   	push   eax
c000acfd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad00:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad03:	e8 8b a3 01 00       	call   c0025093 <__adddf3>
c000ad08:	83 c4 10             	add    esp,0x10
c000ad0b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad0e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad14:	4f                   	dec    edi
c000ad15:	83 ec 0c             	sub    esp,0xc
c000ad18:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad1f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad26:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad2a:	e8 d8 b3 01 00       	call   c0026107 <__extendsfdf2>
c000ad2f:	83 c4 10             	add    esp,0x10
c000ad32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad36:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad42:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad46:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad4a:	e8 c1 a9 01 00       	call   c0025710 <__muldf3>
c000ad4f:	83 c4 10             	add    esp,0x10
c000ad52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5a:	52                   	push   edx
c000ad5b:	50                   	push   eax
c000ad5c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad5f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad62:	e8 2c a3 01 00       	call   c0025093 <__adddf3>
c000ad67:	83 c4 10             	add    esp,0x10
c000ad6a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad6d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad70:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad73:	4f                   	dec    edi
c000ad74:	83 ec 0c             	sub    esp,0xc
c000ad77:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad7e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad85:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad89:	e8 79 b3 01 00       	call   c0026107 <__extendsfdf2>
c000ad8e:	83 c4 10             	add    esp,0x10
c000ad91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad95:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ada1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada9:	e8 62 a9 01 00       	call   c0025710 <__muldf3>
c000adae:	83 c4 10             	add    esp,0x10
c000adb1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adb9:	52                   	push   edx
c000adba:	50                   	push   eax
c000adbb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adbe:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adc1:	e8 cd a2 01 00       	call   c0025093 <__adddf3>
c000adc6:	83 c4 10             	add    esp,0x10
c000adc9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adcc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000add2:	4f                   	dec    edi
c000add3:	83 ec 0c             	sub    esp,0xc
c000add6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000add9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000addd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ade4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ade8:	e8 1a b3 01 00       	call   c0026107 <__extendsfdf2>
c000aded:	83 c4 10             	add    esp,0x10
c000adf0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adfc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae00:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae04:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae08:	e8 03 a9 01 00       	call   c0025710 <__muldf3>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	52                   	push   edx
c000ae19:	50                   	push   eax
c000ae1a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae1d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae20:	e8 6e a2 01 00       	call   c0025093 <__adddf3>
c000ae25:	83 c4 10             	add    esp,0x10
c000ae28:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae2b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae2e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae31:	4f                   	dec    edi
c000ae32:	83 ec 0c             	sub    esp,0xc
c000ae35:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae3c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae43:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae47:	e8 bb b2 01 00       	call   c0026107 <__extendsfdf2>
c000ae4c:	83 c4 10             	add    esp,0x10
c000ae4f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae53:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae63:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae67:	e8 a4 a8 01 00       	call   c0025710 <__muldf3>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae73:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae77:	52                   	push   edx
c000ae78:	50                   	push   eax
c000ae79:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae7c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae7f:	e8 0f a2 01 00       	call   c0025093 <__adddf3>
c000ae84:	83 c4 10             	add    esp,0x10
c000ae87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae8a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae90:	4f                   	dec    edi
c000ae91:	83 ec 0c             	sub    esp,0xc
c000ae94:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae9b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aea6:	e8 5c b2 01 00       	call   c0026107 <__extendsfdf2>
c000aeab:	83 c4 10             	add    esp,0x10
c000aeae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec6:	e8 45 a8 01 00       	call   c0025710 <__muldf3>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed6:	52                   	push   edx
c000aed7:	50                   	push   eax
c000aed8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aedb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aede:	e8 b0 a1 01 00       	call   c0025093 <__adddf3>
c000aee3:	83 c4 10             	add    esp,0x10
c000aee6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aee9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeef:	4f                   	dec    edi
c000aef0:	83 ec 0c             	sub    esp,0xc
c000aef3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aef6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aefa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af01:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af05:	e8 fd b1 01 00       	call   c0026107 <__extendsfdf2>
c000af0a:	83 c4 10             	add    esp,0x10
c000af0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af25:	e8 e6 a7 01 00       	call   c0025710 <__muldf3>
c000af2a:	83 c4 10             	add    esp,0x10
c000af2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af31:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af35:	52                   	push   edx
c000af36:	50                   	push   eax
c000af37:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af3a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af3d:	e8 51 a1 01 00       	call   c0025093 <__adddf3>
c000af42:	83 c4 10             	add    esp,0x10
c000af45:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af48:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af4b:	85 ff                	test   edi,edi
c000af4d:	0f 8f e9 fc ff ff    	jg     c000ac3c <calc_output_multi+0x10e>
c000af53:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af57:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af5b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af5f:	0f 89 4c fc ff ff    	jns    c000abb1 <calc_output_multi+0x83>
c000af65:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af6d:	29 c8                	sub    eax,ecx
c000af6f:	99                   	cdq    
c000af70:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af78:	0f af d0             	imul   edx,eax
c000af7b:	40                   	inc    eax
c000af7c:	01 d1                	add    ecx,edx
c000af7e:	0f af c3             	imul   eax,ebx
c000af81:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af85:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af8c:	55                   	push   ebp
c000af8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000af91:	6a 00                	push   0x0
c000af93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af97:	e8 df 56 ff ff       	call   c000067b <memset>
c000af9c:	83 c4 10             	add    esp,0x10
c000af9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afa3:	e8 e0 e6 ff ff       	call   c0009688 <fp_to_double>
c000afa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb4:	e8 c5 e6 ff ff       	call   c000967e <fp_to_int>
c000afb9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afbc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afbf:	57                   	push   edi
c000afc0:	57                   	push   edi
c000afc1:	89 df                	mov    edi,ebx
c000afc3:	55                   	push   ebp
c000afc4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afc8:	e8 5b 9a 01 00       	call   c0024a28 <__subsf3>
c000afcd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd0:	e8 32 b1 01 00       	call   c0026107 <__extendsfdf2>
c000afd5:	83 c4 10             	add    esp,0x10
c000afd8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afdc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000afe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aff0:	e8 1b a7 01 00       	call   c0025710 <__muldf3>
c000aff5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aff8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000affc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b000:	e8 02 b1 01 00       	call   c0026107 <__extendsfdf2>
c000b005:	83 c4 10             	add    esp,0x10
c000b008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b010:	52                   	push   edx
c000b011:	50                   	push   eax
c000b012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01a:	e8 74 a0 01 00       	call   c0025093 <__adddf3>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b026:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b02a:	89 f8                	mov    eax,edi
c000b02c:	b9 08 00 00 00       	mov    ecx,0x8
c000b031:	99                   	cdq    
c000b032:	f7 f9                	idiv   ecx
c000b034:	4a                   	dec    edx
c000b035:	83 fa 06             	cmp    edx,0x6
c000b038:	77 07                	ja     c000b041 <calc_output_multi+0x513>
c000b03a:	ff 24 95 e0 78 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8720]
c000b041:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b045:	4f                   	dec    edi
c000b046:	83 ec 0c             	sub    esp,0xc
c000b049:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b04c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b050:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b057:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b05b:	e8 a7 b0 01 00       	call   c0026107 <__extendsfdf2>
c000b060:	83 c4 10             	add    esp,0x10
c000b063:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b067:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b06b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b06f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07b:	e8 90 a6 01 00       	call   c0025710 <__muldf3>
c000b080:	83 c4 10             	add    esp,0x10
c000b083:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b087:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b08b:	52                   	push   edx
c000b08c:	50                   	push   eax
c000b08d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b090:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b093:	e8 fb 9f 01 00       	call   c0025093 <__adddf3>
c000b098:	83 c4 10             	add    esp,0x10
c000b09b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b09e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0a5:	4f                   	dec    edi
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0bb:	e8 47 b0 01 00       	call   c0026107 <__extendsfdf2>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0db:	e8 30 a6 01 00       	call   c0025710 <__muldf3>
c000b0e0:	83 c4 10             	add    esp,0x10
c000b0e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0eb:	52                   	push   edx
c000b0ec:	50                   	push   eax
c000b0ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0f3:	e8 9b 9f 01 00       	call   c0025093 <__adddf3>
c000b0f8:	83 c4 10             	add    esp,0x10
c000b0fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b105:	4f                   	dec    edi
c000b106:	83 ec 0c             	sub    esp,0xc
c000b109:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b10c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b110:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b117:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b11b:	e8 e7 af 01 00       	call   c0026107 <__extendsfdf2>
c000b120:	83 c4 10             	add    esp,0x10
c000b123:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b127:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b12f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b133:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b137:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b13b:	e8 d0 a5 01 00       	call   c0025710 <__muldf3>
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b147:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14b:	52                   	push   edx
c000b14c:	50                   	push   eax
c000b14d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b150:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b153:	e8 3b 9f 01 00       	call   c0025093 <__adddf3>
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b15e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b165:	4f                   	dec    edi
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b16c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b170:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b177:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b17b:	e8 87 af 01 00       	call   c0026107 <__extendsfdf2>
c000b180:	83 c4 10             	add    esp,0x10
c000b183:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b187:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b18f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b193:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b197:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b19b:	e8 70 a5 01 00       	call   c0025710 <__muldf3>
c000b1a0:	83 c4 10             	add    esp,0x10
c000b1a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ab:	52                   	push   edx
c000b1ac:	50                   	push   eax
c000b1ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1b3:	e8 db 9e 01 00       	call   c0025093 <__adddf3>
c000b1b8:	83 c4 10             	add    esp,0x10
c000b1bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c5:	4f                   	dec    edi
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1db:	e8 27 af 01 00       	call   c0026107 <__extendsfdf2>
c000b1e0:	83 c4 10             	add    esp,0x10
c000b1e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1fb:	e8 10 a5 01 00       	call   c0025710 <__muldf3>
c000b200:	83 c4 10             	add    esp,0x10
c000b203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b207:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20b:	52                   	push   edx
c000b20c:	50                   	push   eax
c000b20d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b210:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b213:	e8 7b 9e 01 00       	call   c0025093 <__adddf3>
c000b218:	83 c4 10             	add    esp,0x10
c000b21b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b21e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b225:	4f                   	dec    edi
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b22c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b230:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b237:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b23b:	e8 c7 ae 01 00       	call   c0026107 <__extendsfdf2>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b247:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b24f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b253:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b257:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25b:	e8 b0 a4 01 00       	call   c0025710 <__muldf3>
c000b260:	83 c4 10             	add    esp,0x10
c000b263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26b:	52                   	push   edx
c000b26c:	50                   	push   eax
c000b26d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b270:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b273:	e8 1b 9e 01 00       	call   c0025093 <__adddf3>
c000b278:	83 c4 10             	add    esp,0x10
c000b27b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b27e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b285:	4f                   	dec    edi
c000b286:	83 ec 0c             	sub    esp,0xc
c000b289:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b290:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b297:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29b:	e8 67 ae 01 00       	call   c0026107 <__extendsfdf2>
c000b2a0:	83 c4 10             	add    esp,0x10
c000b2a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bb:	e8 50 a4 01 00       	call   c0025710 <__muldf3>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	52                   	push   edx
c000b2cc:	50                   	push   eax
c000b2cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d3:	e8 bb 9d 01 00       	call   c0025093 <__adddf3>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e5:	4f                   	dec    edi
c000b2e6:	83 ec 0c             	sub    esp,0xc
c000b2e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fb:	e8 07 ae 01 00       	call   c0026107 <__extendsfdf2>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b307:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b30f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b313:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b317:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31b:	e8 f0 a3 01 00       	call   c0025710 <__muldf3>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	52                   	push   edx
c000b32c:	50                   	push   eax
c000b32d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b330:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b333:	e8 5b 9d 01 00       	call   c0025093 <__adddf3>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b33e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b341:	85 ff                	test   edi,edi
c000b343:	0f 8f e1 fc ff ff    	jg     c000b02a <calc_output_multi+0x4fc>
c000b349:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b34d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b351:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b355:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b35a:	0f 8f 3f fc ff ff    	jg     c000af9f <calc_output_multi+0x471>
c000b360:	be 08 00 00 00       	mov    esi,0x8
c000b365:	89 d8                	mov    eax,ebx
c000b367:	99                   	cdq    
c000b368:	f7 fe                	idiv   esi
c000b36a:	4a                   	dec    edx
c000b36b:	83 fa 06             	cmp    edx,0x6
c000b36e:	77 07                	ja     c000b377 <calc_output_multi+0x849>
c000b370:	ff 24 95 fc 78 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8704]
c000b377:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37b:	4b                   	dec    ebx
c000b37c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b380:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b383:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b387:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b38b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b38e:	e8 00 9d 01 00       	call   c0025093 <__adddf3>
c000b393:	83 c4 10             	add    esp,0x10
c000b396:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b39e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ae:	e8 5d a3 01 00       	call   c0025710 <__muldf3>
c000b3b3:	5d                   	pop    ebp
c000b3b4:	59                   	pop    ecx
c000b3b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c5:	e8 19 ac 01 00       	call   c0025fe3 <__truncdfsf2>
c000b3ca:	83 c4 10             	add    esp,0x10
c000b3cd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3d1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d8:	4b                   	dec    ebx
c000b3d9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3dd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3e8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3eb:	e8 a3 9c 01 00       	call   c0025093 <__adddf3>
c000b3f0:	83 c4 10             	add    esp,0x10
c000b3f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b403:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b407:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40b:	e8 00 a3 01 00       	call   c0025710 <__muldf3>
c000b410:	59                   	pop    ecx
c000b411:	5f                   	pop    edi
c000b412:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b416:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b422:	e8 bc ab 01 00       	call   c0025fe3 <__truncdfsf2>
c000b427:	83 c4 10             	add    esp,0x10
c000b42a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b42e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b431:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b435:	4b                   	dec    ebx
c000b436:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b43a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b43d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b441:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b445:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b448:	e8 46 9c 01 00       	call   c0025093 <__adddf3>
c000b44d:	83 c4 10             	add    esp,0x10
c000b450:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b454:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b468:	e8 a3 a2 01 00       	call   c0025710 <__muldf3>
c000b46d:	5f                   	pop    edi
c000b46e:	5d                   	pop    ebp
c000b46f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b473:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b477:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47f:	e8 5f ab 01 00       	call   c0025fe3 <__truncdfsf2>
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b48b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b492:	4b                   	dec    ebx
c000b493:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b497:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b49a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b49e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4a5:	e8 e9 9b 01 00       	call   c0025093 <__adddf3>
c000b4aa:	83 c4 10             	add    esp,0x10
c000b4ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c5:	e8 46 a2 01 00       	call   c0025710 <__muldf3>
c000b4ca:	5d                   	pop    ebp
c000b4cb:	59                   	pop    ecx
c000b4cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4dc:	e8 02 ab 01 00       	call   c0025fe3 <__truncdfsf2>
c000b4e1:	83 c4 10             	add    esp,0x10
c000b4e4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4e8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ef:	4b                   	dec    ebx
c000b4f0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4f4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b502:	e8 8c 9b 01 00       	call   c0025093 <__adddf3>
c000b507:	83 c4 10             	add    esp,0x10
c000b50a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b50e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b522:	e8 e9 a1 01 00       	call   c0025710 <__muldf3>
c000b527:	59                   	pop    ecx
c000b528:	5f                   	pop    edi
c000b529:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b52d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	e8 a5 aa 01 00       	call   c0025fe3 <__truncdfsf2>
c000b53e:	83 c4 10             	add    esp,0x10
c000b541:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b545:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54c:	4b                   	dec    ebx
c000b54d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b551:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b558:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b55c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b55f:	e8 2f 9b 01 00       	call   c0025093 <__adddf3>
c000b564:	83 c4 10             	add    esp,0x10
c000b567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b56f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57f:	e8 8c a1 01 00       	call   c0025710 <__muldf3>
c000b584:	5f                   	pop    edi
c000b585:	5d                   	pop    ebp
c000b586:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b58a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b58e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b592:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b596:	e8 48 aa 01 00       	call   c0025fe3 <__truncdfsf2>
c000b59b:	83 c4 10             	add    esp,0x10
c000b59e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5a2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a9:	4b                   	dec    ebx
c000b5aa:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ae:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5bc:	e8 d2 9a 01 00       	call   c0025093 <__adddf3>
c000b5c1:	83 c4 10             	add    esp,0x10
c000b5c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5dc:	e8 2f a1 01 00       	call   c0025710 <__muldf3>
c000b5e1:	5d                   	pop    ebp
c000b5e2:	59                   	pop    ecx
c000b5e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f3:	e8 eb a9 01 00       	call   c0025fe3 <__truncdfsf2>
c000b5f8:	83 c4 10             	add    esp,0x10
c000b5fb:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5ff:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b606:	4b                   	dec    ebx
c000b607:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b60e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b612:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b616:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b619:	e8 75 9a 01 00       	call   c0025093 <__adddf3>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b625:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b635:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b639:	e8 d2 a0 01 00       	call   c0025710 <__muldf3>
c000b63e:	59                   	pop    ecx
c000b63f:	5f                   	pop    edi
c000b640:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b644:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b650:	e8 8e a9 01 00       	call   c0025fe3 <__truncdfsf2>
c000b655:	83 c4 10             	add    esp,0x10
c000b658:	85 db                	test   ebx,ebx
c000b65a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b65e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b661:	0f 8f fe fc ff ff    	jg     c000b365 <calc_output_multi+0x837>
c000b667:	83 c4 4c             	add    esp,0x4c
c000b66a:	5b                   	pop    ebx
c000b66b:	5e                   	pop    esi
c000b66c:	5f                   	pop    edi
c000b66d:	5d                   	pop    ebp
c000b66e:	c3                   	ret    

c000b66f <double_to_fp>:
c000b66f:	83 ec 0c             	sub    esp,0xc
c000b672:	68 00 00 b0 40       	push   0x40b00000
c000b677:	6a 00                	push   0x0
c000b679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b681:	e8 8a a0 01 00       	call   c0025710 <__muldf3>
c000b686:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b68a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b68e:	83 c4 1c             	add    esp,0x1c
c000b691:	e9 fa aa 01 00       	jmp    c0026190 <lrint>

c000b696 <prepare_data>:
c000b696:	55                   	push   ebp
c000b697:	57                   	push   edi
c000b698:	56                   	push   esi
c000b699:	53                   	push   ebx
c000b69a:	83 ec 1c             	sub    esp,0x1c
c000b69d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6a5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6a9:	0f 89 57 01 00 00    	jns    c000b806 <prepare_data+0x170>
c000b6af:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6b2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6b5:	85 d2                	test   edx,edx
c000b6b7:	75 0d                	jne    c000b6c6 <prepare_data+0x30>
c000b6b9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6bc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6bf:	29 d0                	sub    eax,edx
c000b6c1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6c4:	eb 44                	jmp    c000b70a <prepare_data+0x74>
c000b6c6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6c9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6cc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6cf:	39 c1                	cmp    ecx,eax
c000b6d1:	7d 04                	jge    c000b6d7 <prepare_data+0x41>
c000b6d3:	29 d0                	sub    eax,edx
c000b6d5:	eb 2d                	jmp    c000b704 <prepare_data+0x6e>
c000b6d7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6dd:	29 d7                	sub    edi,edx
c000b6df:	01 f7                	add    edi,esi
c000b6e1:	51                   	push   ecx
c000b6e2:	29 f2                	sub    edx,esi
c000b6e4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6eb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6ee:	51                   	push   ecx
c000b6ef:	52                   	push   edx
c000b6f0:	50                   	push   eax
c000b6f1:	e8 17 4f ff ff       	call   c000060d <memmove>
c000b6f6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6f9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6fc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b6ff:	29 f0                	sub    eax,esi
c000b701:	83 c4 10             	add    esp,0x10
c000b704:	29 f0                	sub    eax,esi
c000b706:	79 02                	jns    c000b70a <prepare_data+0x74>
c000b708:	31 c0                	xor    eax,eax
c000b70a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b70d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b710:	29 ef                	sub    edi,ebp
c000b712:	39 c7                	cmp    edi,eax
c000b714:	7e 02                	jle    c000b718 <prepare_data+0x82>
c000b716:	89 c7                	mov    edi,eax
c000b718:	89 f8                	mov    eax,edi
c000b71a:	99                   	cdq    
c000b71b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b71e:	b8 15 00 00 00       	mov    eax,0x15
c000b723:	29 d7                	sub    edi,edx
c000b725:	0f 88 dd 00 00 00    	js     c000b808 <prepare_data+0x172>
c000b72b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b72e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b731:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b734:	0f 8f ce 00 00 00    	jg     c000b808 <prepare_data+0x172>
c000b73a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b740:	50                   	push   eax
c000b741:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b748:	50                   	push   eax
c000b749:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b74d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b74f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b752:	50                   	push   eax
c000b753:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b756:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b75a:	50                   	push   eax
c000b75b:	e8 e5 4e ff ff       	call   c0000645 <memcpy>
c000b760:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b763:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b766:	01 fd                	add    ebp,edi
c000b768:	01 f9                	add    ecx,edi
c000b76a:	83 c4 10             	add    esp,0x10
c000b76d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b770:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b773:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b776:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b77a:	0f 85 86 00 00 00    	jne    c000b806 <prepare_data+0x170>
c000b780:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b783:	89 e8                	mov    eax,ebp
c000b785:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b788:	29 c8                	sub    eax,ecx
c000b78a:	39 f8                	cmp    eax,edi
c000b78c:	7d 78                	jge    c000b806 <prepare_data+0x170>
c000b78e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b792:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b796:	74 6e                	je     c000b806 <prepare_data+0x170>
c000b798:	8d 7e 04             	lea    edi,[esi+0x4]
c000b79b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b79f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7a2:	29 ef                	sub    edi,ebp
c000b7a4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7a8:	7c 29                	jl     c000b7d3 <prepare_data+0x13d>
c000b7aa:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7ad:	29 f1                	sub    ecx,esi
c000b7af:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7b6:	55                   	push   ebp
c000b7b7:	50                   	push   eax
c000b7b8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7bb:	50                   	push   eax
c000b7bc:	52                   	push   edx
c000b7bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7c1:	e8 47 4e ff ff       	call   c000060d <memmove>
c000b7c6:	83 c4 10             	add    esp,0x10
c000b7c9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7cc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7d6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7d9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7dc:	83 c6 05             	add    esi,0x5
c000b7df:	78 07                	js     c000b7e8 <prepare_data+0x152>
c000b7e1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7e4:	39 cf                	cmp    edi,ecx
c000b7e6:	7e 04                	jle    c000b7ec <prepare_data+0x156>
c000b7e8:	89 ce                	mov    esi,ecx
c000b7ea:	29 c6                	sub    esi,eax
c000b7ec:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ef:	51                   	push   ecx
c000b7f0:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b7f7:	51                   	push   ecx
c000b7f8:	6a 00                	push   0x0
c000b7fa:	50                   	push   eax
c000b7fb:	e8 7b 4e ff ff       	call   c000067b <memset>
c000b800:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b803:	83 c4 10             	add    esp,0x10
c000b806:	31 c0                	xor    eax,eax
c000b808:	83 c4 1c             	add    esp,0x1c
c000b80b:	5b                   	pop    ebx
c000b80c:	5e                   	pop    esi
c000b80d:	5f                   	pop    edi
c000b80e:	5d                   	pop    ebp
c000b80f:	c3                   	ret    

c000b810 <sinc_multichan_vari_process>:
c000b810:	55                   	push   ebp
c000b811:	ba 05 00 00 00       	mov    edx,0x5
c000b816:	57                   	push   edi
c000b817:	56                   	push   esi
c000b818:	53                   	push   ebx
c000b819:	83 ec 4c             	sub    esp,0x4c
c000b81c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b820:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b824:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b827:	85 db                	test   ebx,ebx
c000b829:	0f 84 9b 06 00 00    	je     c000beca <sinc_multichan_vari_process+0x6ba>
c000b82f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b832:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b835:	0f af c5             	imul   eax,ebp
c000b838:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b83b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b83e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b845:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b84c:	0f af c5             	imul   eax,ebp
c000b84f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b852:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b855:	8b 06                	mov    eax,DWORD PTR [esi]
c000b857:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b85b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b85f:	68 00 00 70 3f       	push   0x3f700000
c000b864:	6a 00                	push   0x0
c000b866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86e:	e8 6c a7 01 00       	call   c0025fdf <__ltdf2>
c000b873:	83 c4 10             	add    esp,0x10
c000b876:	ba 16 00 00 00       	mov    edx,0x16
c000b87b:	85 c0                	test   eax,eax
c000b87d:	0f 88 47 06 00 00    	js     c000beca <sinc_multichan_vari_process+0x6ba>
c000b883:	68 00 00 70 40       	push   0x40700000
c000b888:	6a 00                	push   0x0
c000b88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b892:	e8 2a a7 01 00       	call   c0025fc1 <__gtdf2>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	ba 16 00 00 00       	mov    edx,0x16
c000b89f:	85 c0                	test   eax,eax
c000b8a1:	0f 8f 23 06 00 00    	jg     c000beca <sinc_multichan_vari_process+0x6ba>
c000b8a7:	83 ec 0c             	sub    esp,0xc
c000b8aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8ad:	e8 c1 a4 01 00       	call   c0025d73 <__floatsidf>
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8bd:	68 00 00 00 40       	push   0x40000000
c000b8c2:	6a 00                	push   0x0
c000b8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8cc:	e8 c2 97 01 00       	call   c0025093 <__adddf3>
c000b8d1:	59                   	pop    ecx
c000b8d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8da:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8dd:	e8 91 a4 01 00       	call   c0025d73 <__floatsidf>
c000b8e2:	83 c4 10             	add    esp,0x10
c000b8e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8ed:	52                   	push   edx
c000b8ee:	50                   	push   eax
c000b8ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f7:	e8 f8 a0 01 00       	call   c00259f4 <__divdf3>
c000b8fc:	83 c4 10             	add    esp,0x10
c000b8ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b903:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b907:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b90a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b90d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b911:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b921:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b925:	e8 97 a6 01 00       	call   c0025fc1 <__gtdf2>
c000b92a:	83 c4 10             	add    esp,0x10
c000b92d:	85 c0                	test   eax,eax
c000b92f:	7e 2d                	jle    c000b95e <sinc_multichan_vari_process+0x14e>
c000b931:	68 00 00 f0 3f       	push   0x3ff00000
c000b936:	6a 00                	push   0x0
c000b938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b940:	e8 9a a6 01 00       	call   c0025fdf <__ltdf2>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	85 c0                	test   eax,eax
c000b94a:	79 4d                	jns    c000b999 <sinc_multichan_vari_process+0x189>
c000b94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b950:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b958:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95c:	eb 1b                	jmp    c000b979 <sinc_multichan_vari_process+0x169>
c000b95e:	68 00 00 f0 3f       	push   0x3ff00000
c000b963:	6a 00                	push   0x0
c000b965:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b969:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96d:	e8 6d a6 01 00       	call   c0025fdf <__ltdf2>
c000b972:	83 c4 10             	add    esp,0x10
c000b975:	85 c0                	test   eax,eax
c000b977:	79 20                	jns    c000b999 <sinc_multichan_vari_process+0x189>
c000b979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b981:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b989:	e8 66 a0 01 00       	call   c00259f4 <__divdf3>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b995:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b999:	50                   	push   eax
c000b99a:	50                   	push   eax
c000b99b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b99f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a3:	e8 e8 a7 01 00       	call   c0026190 <lrint>
c000b9a8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9ab:	40                   	inc    eax
c000b9ac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b0:	0f af c5             	imul   eax,ebp
c000b9b3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9b7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9be:	58                   	pop    eax
c000b9bf:	5a                   	pop    edx
c000b9c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c8:	e8 c3 a7 01 00       	call   c0026190 <lrint>
c000b9cd:	83 ec 0c             	sub    esp,0xc
c000b9d0:	50                   	push   eax
c000b9d1:	e8 9d a3 01 00       	call   c0025d73 <__floatsidf>
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e1:	52                   	push   edx
c000b9e2:	50                   	push   eax
c000b9e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9eb:	e8 f4 9c 01 00       	call   c00256e4 <__subdf3>
c000b9f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f8:	83 c4 20             	add    esp,0x20
c000b9fb:	6a 00                	push   0x0
c000b9fd:	6a 00                	push   0x0
c000b9ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba07:	e8 d3 a5 01 00       	call   c0025fdf <__ltdf2>
c000ba0c:	83 c4 10             	add    esp,0x10
c000ba0f:	85 c0                	test   eax,eax
c000ba11:	79 1f                	jns    c000ba32 <sinc_multichan_vari_process+0x222>
c000ba13:	68 00 00 f0 3f       	push   0x3ff00000
c000ba18:	6a 00                	push   0x0
c000ba1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba22:	e8 6c 96 01 00       	call   c0025093 <__adddf3>
c000ba27:	83 c4 10             	add    esp,0x10
c000ba2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba32:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba35:	83 ec 10             	sub    esp,0x10
c000ba38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba3c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4f:	e8 90 9c 01 00       	call   c00256e4 <__subdf3>
c000ba54:	83 c4 18             	add    esp,0x18
c000ba57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba5f:	52                   	push   edx
c000ba60:	50                   	push   eax
c000ba61:	e8 2a a7 01 00       	call   c0026190 <lrint>
c000ba66:	0f af e8             	imul   ebp,eax
c000ba69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba6d:	01 e8                	add    eax,ebp
c000ba6f:	99                   	cdq    
c000ba70:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba73:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba83:	6a 00                	push   0x0
c000ba85:	e8 6a 9f 01 00       	call   c00259f4 <__divdf3>
c000ba8a:	83 c4 10             	add    esp,0x10
c000ba8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba95:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ba9a:	68 23 42 92 0c       	push   0xc924223
c000ba9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa7:	e8 e7 95 01 00       	call   c0025093 <__adddf3>
c000baac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bab0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bab4:	83 c4 20             	add    esp,0x20
c000bab7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000babf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bac7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000baca:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bacd:	7d 50                	jge    c000bb1f <sinc_multichan_vari_process+0x30f>
c000bacf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bad2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bad5:	01 c8                	add    eax,ecx
c000bad7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bada:	99                   	cdq    
c000badb:	f7 f9                	idiv   ecx
c000badd:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bae1:	7d 0c                	jge    c000baef <sinc_multichan_vari_process+0x2df>
c000bae3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bae6:	85 ed                	test   ebp,ebp
c000bae8:	79 6b                	jns    c000bb55 <sinc_multichan_vari_process+0x345>
c000baea:	e9 e6 00 00 00       	jmp    c000bbd5 <sinc_multichan_vari_process+0x3c5>
c000baef:	50                   	push   eax
c000baf0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000baf4:	57                   	push   edi
c000baf5:	53                   	push   ebx
c000baf6:	e8 9b fb ff ff       	call   c000b696 <prepare_data>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	89 c2                	mov    edx,eax
c000bb00:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb03:	85 c0                	test   eax,eax
c000bb05:	0f 85 bf 03 00 00    	jne    c000beca <sinc_multichan_vari_process+0x6ba>
c000bb0b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb0e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb11:	01 c8                	add    eax,ecx
c000bb13:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb16:	99                   	cdq    
c000bb17:	f7 f9                	idiv   ecx
c000bb19:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb1d:	7c c4                	jl     c000bae3 <sinc_multichan_vari_process+0x2d3>
c000bb1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb27:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb2a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb35:	89 06                	mov    DWORD PTR [esi],eax
c000bb37:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb3a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb3d:	99                   	cdq    
c000bb3e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb41:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb44:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb47:	99                   	cdq    
c000bb48:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb4b:	31 d2                	xor    edx,edx
c000bb4d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb50:	e9 75 03 00 00       	jmp    c000beca <sinc_multichan_vari_process+0x6ba>
c000bb55:	83 ec 0c             	sub    esp,0xc
c000bb58:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb5b:	e8 13 a2 01 00       	call   c0025d73 <__floatsidf>
c000bb60:	83 c4 10             	add    esp,0x10
c000bb63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb6b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb6f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb7b:	e8 13 95 01 00       	call   c0025093 <__adddf3>
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb87:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb9b:	e8 f3 94 01 00       	call   c0025093 <__adddf3>
c000bba0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bba3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bba7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbab:	e8 c3 a1 01 00       	call   c0025d73 <__floatsidf>
c000bbb0:	83 c4 10             	add    esp,0x10
c000bbb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbbb:	52                   	push   edx
c000bbbc:	50                   	push   eax
c000bbbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc5:	e8 13 a4 01 00       	call   c0025fdd <__gedf2>
c000bbca:	83 c4 10             	add    esp,0x10
c000bbcd:	85 c0                	test   eax,eax
c000bbcf:	0f 89 4a ff ff ff    	jns    c000bb1f <sinc_multichan_vari_process+0x30f>
c000bbd5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbd9:	0f 8e ed 00 00 00    	jle    c000bccc <sinc_multichan_vari_process+0x4bc>
c000bbdf:	83 ec 10             	sub    esp,0x10
c000bbe2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbe5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbe8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbeb:	ff 36                	push   DWORD PTR [esi]
c000bbed:	e8 f2 9a 01 00       	call   c00256e4 <__subdf3>
c000bbf2:	83 c4 18             	add    esp,0x18
c000bbf5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfd:	52                   	push   edx
c000bbfe:	50                   	push   eax
c000bbff:	e8 6c a5 01 00       	call   c0026170 <fabs>
c000bc04:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc0c:	83 c4 10             	add    esp,0x10
c000bc0f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc14:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc21:	e8 9b a3 01 00       	call   c0025fc1 <__gtdf2>
c000bc26:	83 c4 10             	add    esp,0x10
c000bc29:	85 c0                	test   eax,eax
c000bc2b:	0f 8e 9b 00 00 00    	jle    c000bccc <sinc_multichan_vari_process+0x4bc>
c000bc31:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc33:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc36:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc3a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc3e:	52                   	push   edx
c000bc3f:	50                   	push   eax
c000bc40:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc43:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc46:	e8 99 9a 01 00       	call   c00256e4 <__subdf3>
c000bc4b:	59                   	pop    ecx
c000bc4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc50:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc54:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc57:	e8 17 a1 01 00       	call   c0025d73 <__floatsidf>
c000bc5c:	83 c4 10             	add    esp,0x10
c000bc5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc63:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc67:	52                   	push   edx
c000bc68:	50                   	push   eax
c000bc69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc71:	e8 9a 9a 01 00       	call   c0025710 <__muldf3>
c000bc76:	5d                   	pop    ebp
c000bc77:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc7b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc7f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc82:	e8 ec a0 01 00       	call   c0025d73 <__floatsidf>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc92:	52                   	push   edx
c000bc93:	50                   	push   eax
c000bc94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9c:	e8 53 9d 01 00       	call   c00259f4 <__divdf3>
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcbc:	e8 d2 93 01 00       	call   c0025093 <__adddf3>
c000bcc1:	83 c4 10             	add    esp,0x10
c000bcc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcc8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bccc:	83 ec 0c             	sub    esp,0xc
c000bccf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bcd2:	e8 9c a0 01 00       	call   c0025d73 <__floatsidf>
c000bcd7:	83 c4 10             	add    esp,0x10
c000bcda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf2:	e8 e8 a2 01 00       	call   c0025fdf <__ltdf2>
c000bcf7:	83 c4 10             	add    esp,0x10
c000bcfa:	85 c0                	test   eax,eax
c000bcfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd00:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd04:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd08:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd0c:	78 10                	js     c000bd1e <sinc_multichan_vari_process+0x50e>
c000bd0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd1a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2e:	e8 dd 99 01 00       	call   c0025710 <__muldf3>
c000bd33:	59                   	pop    ecx
c000bd34:	5d                   	pop    ebp
c000bd35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd45:	e8 25 f9 ff ff       	call   c000b66f <double_to_fp>
c000bd4a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd4e:	89 c5                	mov    ebp,eax
c000bd50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd54:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5c:	e8 af 99 01 00       	call   c0025710 <__muldf3>
c000bd61:	83 c4 18             	add    esp,0x18
c000bd64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd6c:	52                   	push   edx
c000bd6d:	50                   	push   eax
c000bd6e:	e8 fc f8 ff ff       	call   c000b66f <double_to_fp>
c000bd73:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd76:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd7a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd7d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd80:	50                   	push   eax
c000bd81:	50                   	push   eax
c000bd82:	50                   	push   eax
c000bd83:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd86:	e8 e8 9f 01 00       	call   c0025d73 <__floatsidf>
c000bd8b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd8f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bd93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda3:	e8 4c 9c 01 00       	call   c00259f4 <__divdf3>
c000bda8:	83 c4 1c             	add    esp,0x1c
c000bdab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdaf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdb3:	52                   	push   edx
c000bdb4:	89 ea                	mov    edx,ebp
c000bdb6:	50                   	push   eax
c000bdb7:	89 d8                	mov    eax,ebx
c000bdb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdbc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdc0:	e8 69 ed ff ff       	call   c000ab2e <calc_output_multi>
c000bdc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdc8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bdcb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdd7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bddb:	e8 14 9c 01 00       	call   c00259f4 <__divdf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bde7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfb:	e8 93 92 01 00       	call   c0025093 <__adddf3>
c000be00:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be04:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be08:	83 c4 28             	add    esp,0x28
c000be0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be13:	e8 78 a3 01 00       	call   c0026190 <lrint>
c000be18:	83 ec 0c             	sub    esp,0xc
c000be1b:	50                   	push   eax
c000be1c:	e8 52 9f 01 00       	call   c0025d73 <__floatsidf>
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be28:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be2c:	52                   	push   edx
c000be2d:	50                   	push   eax
c000be2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be36:	e8 a9 98 01 00       	call   c00256e4 <__subdf3>
c000be3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be43:	83 c4 20             	add    esp,0x20
c000be46:	6a 00                	push   0x0
c000be48:	6a 00                	push   0x0
c000be4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be52:	e8 88 a1 01 00       	call   c0025fdf <__ltdf2>
c000be57:	83 c4 10             	add    esp,0x10
c000be5a:	85 c0                	test   eax,eax
c000be5c:	79 20                	jns    c000be7e <sinc_multichan_vari_process+0x66e>
c000be5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6e:	e8 20 92 01 00       	call   c0025093 <__adddf3>
c000be73:	83 c4 10             	add    esp,0x10
c000be76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be7e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be81:	83 ec 10             	sub    esp,0x10
c000be84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be88:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be9b:	e8 44 98 01 00       	call   c00256e4 <__subdf3>
c000bea0:	83 c4 18             	add    esp,0x18
c000bea3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beab:	52                   	push   edx
c000beac:	50                   	push   eax
c000bead:	e8 de a2 01 00       	call   c0026190 <lrint>
c000beb2:	0f af e8             	imul   ebp,eax
c000beb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000beb9:	83 c4 10             	add    esp,0x10
c000bebc:	01 e8                	add    eax,ebp
c000bebe:	99                   	cdq    
c000bebf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bec2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bec5:	e9 fd fb ff ff       	jmp    c000bac7 <sinc_multichan_vari_process+0x2b7>
c000beca:	83 c4 4c             	add    esp,0x4c
c000becd:	89 d0                	mov    eax,edx
c000becf:	5b                   	pop    ebx
c000bed0:	5e                   	pop    esi
c000bed1:	5f                   	pop    edi
c000bed2:	5d                   	pop    ebp
c000bed3:	c3                   	ret    

c000bed4 <sinc_hex_vari_process>:
c000bed4:	55                   	push   ebp
c000bed5:	ba 05 00 00 00       	mov    edx,0x5
c000beda:	57                   	push   edi
c000bedb:	56                   	push   esi
c000bedc:	53                   	push   ebx
c000bedd:	83 ec 4c             	sub    esp,0x4c
c000bee0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bee4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bee8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000beeb:	85 db                	test   ebx,ebx
c000beed:	0f 84 9c 06 00 00    	je     c000c58f <sinc_hex_vari_process+0x6bb>
c000bef3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bef6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bef9:	0f af c7             	imul   eax,edi
c000befc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000beff:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf02:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf09:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf10:	0f af c7             	imul   eax,edi
c000bf13:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf16:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf24:	68 00 00 70 3f       	push   0x3f700000
c000bf29:	6a 00                	push   0x0
c000bf2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf33:	e8 a7 a0 01 00       	call   c0025fdf <__ltdf2>
c000bf38:	83 c4 10             	add    esp,0x10
c000bf3b:	ba 16 00 00 00       	mov    edx,0x16
c000bf40:	85 c0                	test   eax,eax
c000bf42:	0f 88 47 06 00 00    	js     c000c58f <sinc_hex_vari_process+0x6bb>
c000bf48:	68 00 00 70 40       	push   0x40700000
c000bf4d:	6a 00                	push   0x0
c000bf4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf57:	e8 65 a0 01 00       	call   c0025fc1 <__gtdf2>
c000bf5c:	83 c4 10             	add    esp,0x10
c000bf5f:	ba 16 00 00 00       	mov    edx,0x16
c000bf64:	85 c0                	test   eax,eax
c000bf66:	0f 8f 23 06 00 00    	jg     c000c58f <sinc_hex_vari_process+0x6bb>
c000bf6c:	83 ec 0c             	sub    esp,0xc
c000bf6f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf72:	e8 fc 9d 01 00       	call   c0025d73 <__floatsidf>
c000bf77:	83 c4 10             	add    esp,0x10
c000bf7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf82:	68 00 00 00 40       	push   0x40000000
c000bf87:	6a 00                	push   0x0
c000bf89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf91:	e8 fd 90 01 00       	call   c0025093 <__adddf3>
c000bf96:	59                   	pop    ecx
c000bf97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf9b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bf9f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa2:	e8 cc 9d 01 00       	call   c0025d73 <__floatsidf>
c000bfa7:	83 c4 10             	add    esp,0x10
c000bfaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfb2:	52                   	push   edx
c000bfb3:	50                   	push   eax
c000bfb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfbc:	e8 33 9a 01 00       	call   c00259f4 <__divdf3>
c000bfc1:	83 c4 10             	add    esp,0x10
c000bfc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfcc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfcf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfea:	e8 d2 9f 01 00       	call   c0025fc1 <__gtdf2>
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	85 c0                	test   eax,eax
c000bff4:	7e 2d                	jle    c000c023 <sinc_hex_vari_process+0x14f>
c000bff6:	68 00 00 f0 3f       	push   0x3ff00000
c000bffb:	6a 00                	push   0x0
c000bffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c005:	e8 d5 9f 01 00       	call   c0025fdf <__ltdf2>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	85 c0                	test   eax,eax
c000c00f:	79 4d                	jns    c000c05e <sinc_hex_vari_process+0x18a>
c000c011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c015:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c019:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c021:	eb 1b                	jmp    c000c03e <sinc_hex_vari_process+0x16a>
c000c023:	68 00 00 f0 3f       	push   0x3ff00000
c000c028:	6a 00                	push   0x0
c000c02a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c032:	e8 a8 9f 01 00       	call   c0025fdf <__ltdf2>
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	85 c0                	test   eax,eax
c000c03c:	79 20                	jns    c000c05e <sinc_hex_vari_process+0x18a>
c000c03e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c042:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04e:	e8 a1 99 01 00       	call   c00259f4 <__divdf3>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c05e:	50                   	push   eax
c000c05f:	50                   	push   eax
c000c060:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c064:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c068:	e8 23 a1 01 00       	call   c0026190 <lrint>
c000c06d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c070:	40                   	inc    eax
c000c071:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c075:	0f af c7             	imul   eax,edi
c000c078:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c07c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c07f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c083:	58                   	pop    eax
c000c084:	5a                   	pop    edx
c000c085:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c089:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08d:	e8 fe a0 01 00       	call   c0026190 <lrint>
c000c092:	83 ec 0c             	sub    esp,0xc
c000c095:	50                   	push   eax
c000c096:	e8 d8 9c 01 00       	call   c0025d73 <__floatsidf>
c000c09b:	83 c4 10             	add    esp,0x10
c000c09e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a6:	52                   	push   edx
c000c0a7:	50                   	push   eax
c000c0a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b0:	e8 2f 96 01 00       	call   c00256e4 <__subdf3>
c000c0b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0bd:	83 c4 20             	add    esp,0x20
c000c0c0:	6a 00                	push   0x0
c000c0c2:	6a 00                	push   0x0
c000c0c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0cc:	e8 0e 9f 01 00       	call   c0025fdf <__ltdf2>
c000c0d1:	83 c4 10             	add    esp,0x10
c000c0d4:	85 c0                	test   eax,eax
c000c0d6:	79 1f                	jns    c000c0f7 <sinc_hex_vari_process+0x223>
c000c0d8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0dd:	6a 00                	push   0x0
c000c0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e7:	e8 a7 8f 01 00       	call   c0025093 <__adddf3>
c000c0ec:	83 c4 10             	add    esp,0x10
c000c0ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0f7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0fa:	83 ec 10             	sub    esp,0x10
c000c0fd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c101:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c110:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c114:	e8 cb 95 01 00       	call   c00256e4 <__subdf3>
c000c119:	83 c4 18             	add    esp,0x18
c000c11c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c124:	52                   	push   edx
c000c125:	50                   	push   eax
c000c126:	e8 65 a0 01 00       	call   c0026190 <lrint>
c000c12b:	0f af f8             	imul   edi,eax
c000c12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c132:	01 f8                	add    eax,edi
c000c134:	99                   	cdq    
c000c135:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c138:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c13b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c13f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c143:	68 00 00 f0 3f       	push   0x3ff00000
c000c148:	6a 00                	push   0x0
c000c14a:	e8 a5 98 01 00       	call   c00259f4 <__divdf3>
c000c14f:	83 c4 10             	add    esp,0x10
c000c152:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c156:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c15a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c15f:	68 23 42 92 0c       	push   0xc924223
c000c164:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c168:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16c:	e8 22 8f 01 00       	call   c0025093 <__adddf3>
c000c171:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c175:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c179:	83 c4 20             	add    esp,0x20
c000c17c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c184:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c18c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c18f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c192:	7d 50                	jge    c000c1e4 <sinc_hex_vari_process+0x310>
c000c194:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c197:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19a:	01 c8                	add    eax,ecx
c000c19c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c19f:	99                   	cdq    
c000c1a0:	f7 f9                	idiv   ecx
c000c1a2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1a6:	7d 0c                	jge    c000c1b4 <sinc_hex_vari_process+0x2e0>
c000c1a8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1ab:	85 ff                	test   edi,edi
c000c1ad:	79 6c                	jns    c000c21b <sinc_hex_vari_process+0x347>
c000c1af:	e9 e7 00 00 00       	jmp    c000c29b <sinc_hex_vari_process+0x3c7>
c000c1b4:	50                   	push   eax
c000c1b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1b9:	56                   	push   esi
c000c1ba:	53                   	push   ebx
c000c1bb:	e8 d6 f4 ff ff       	call   c000b696 <prepare_data>
c000c1c0:	83 c4 10             	add    esp,0x10
c000c1c3:	89 c2                	mov    edx,eax
c000c1c5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1c8:	85 c0                	test   eax,eax
c000c1ca:	0f 85 bf 03 00 00    	jne    c000c58f <sinc_hex_vari_process+0x6bb>
c000c1d0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1d6:	01 c8                	add    eax,ecx
c000c1d8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1db:	99                   	cdq    
c000c1dc:	f7 f9                	idiv   ecx
c000c1de:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e2:	7c c4                	jl     c000c1a8 <sinc_hex_vari_process+0x2d4>
c000c1e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ec:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ef:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c1fa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1fd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c200:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c203:	99                   	cdq    
c000c204:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c207:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c20a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c20d:	99                   	cdq    
c000c20e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c211:	31 d2                	xor    edx,edx
c000c213:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c216:	e9 74 03 00 00       	jmp    c000c58f <sinc_hex_vari_process+0x6bb>
c000c21b:	83 ec 0c             	sub    esp,0xc
c000c21e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c221:	e8 4d 9b 01 00       	call   c0025d73 <__floatsidf>
c000c226:	83 c4 10             	add    esp,0x10
c000c229:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c22d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c231:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c235:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c23d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c241:	e8 4d 8e 01 00       	call   c0025093 <__adddf3>
c000c246:	83 c4 10             	add    esp,0x10
c000c249:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c24d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c251:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c255:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c259:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c25d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c261:	e8 2d 8e 01 00       	call   c0025093 <__adddf3>
c000c266:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c269:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c26d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c271:	e8 fd 9a 01 00       	call   c0025d73 <__floatsidf>
c000c276:	83 c4 10             	add    esp,0x10
c000c279:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c27d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c281:	52                   	push   edx
c000c282:	50                   	push   eax
c000c283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c287:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28b:	e8 4d 9d 01 00       	call   c0025fdd <__gedf2>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	85 c0                	test   eax,eax
c000c295:	0f 89 49 ff ff ff    	jns    c000c1e4 <sinc_hex_vari_process+0x310>
c000c29b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c29f:	0f 8e ef 00 00 00    	jle    c000c394 <sinc_hex_vari_process+0x4c0>
c000c2a5:	83 ec 10             	sub    esp,0x10
c000c2a8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2b4:	e8 2b 94 01 00       	call   c00256e4 <__subdf3>
c000c2b9:	83 c4 18             	add    esp,0x18
c000c2bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c4:	52                   	push   edx
c000c2c5:	50                   	push   eax
c000c2c6:	e8 a5 9e 01 00       	call   c0026170 <fabs>
c000c2cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2d3:	83 c4 10             	add    esp,0x10
c000c2d6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2db:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e8:	e8 d4 9c 01 00       	call   c0025fc1 <__gtdf2>
c000c2ed:	83 c4 10             	add    esp,0x10
c000c2f0:	85 c0                	test   eax,eax
c000c2f2:	0f 8e 9c 00 00 00    	jle    c000c394 <sinc_hex_vari_process+0x4c0>
c000c2f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2fb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c302:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c30b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c30e:	e8 d1 93 01 00       	call   c00256e4 <__subdf3>
c000c313:	59                   	pop    ecx
c000c314:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c318:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c31c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c31f:	e8 4f 9a 01 00       	call   c0025d73 <__floatsidf>
c000c324:	83 c4 10             	add    esp,0x10
c000c327:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c32b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c32f:	52                   	push   edx
c000c330:	50                   	push   eax
c000c331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c335:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c339:	e8 d2 93 01 00       	call   c0025710 <__muldf3>
c000c33e:	5f                   	pop    edi
c000c33f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c343:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c347:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c34a:	e8 24 9a 01 00       	call   c0025d73 <__floatsidf>
c000c34f:	83 c4 10             	add    esp,0x10
c000c352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c35a:	52                   	push   edx
c000c35b:	50                   	push   eax
c000c35c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c360:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c364:	e8 8b 96 01 00       	call   c00259f4 <__divdf3>
c000c369:	83 c4 10             	add    esp,0x10
c000c36c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c370:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c374:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c380:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c384:	e8 0a 8d 01 00       	call   c0025093 <__adddf3>
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c390:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c394:	83 ec 0c             	sub    esp,0xc
c000c397:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c39a:	e8 d4 99 01 00       	call   c0025d73 <__floatsidf>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ba:	e8 20 9c 01 00       	call   c0025fdf <__ltdf2>
c000c3bf:	83 c4 10             	add    esp,0x10
c000c3c2:	85 c0                	test   eax,eax
c000c3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3cc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3d0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3d4:	78 10                	js     c000c3e6 <sinc_hex_vari_process+0x512>
c000c3d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f6:	e8 15 93 01 00       	call   c0025710 <__muldf3>
c000c3fb:	59                   	pop    ecx
c000c3fc:	5f                   	pop    edi
c000c3fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c409:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40d:	e8 5d f2 ff ff       	call   c000b66f <double_to_fp>
c000c412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c416:	89 c7                	mov    edi,eax
c000c418:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c420:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c424:	e8 e7 92 01 00       	call   c0025710 <__muldf3>
c000c429:	83 c4 18             	add    esp,0x18
c000c42c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c430:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c434:	52                   	push   edx
c000c435:	50                   	push   eax
c000c436:	e8 34 f2 ff ff       	call   c000b66f <double_to_fp>
c000c43b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c43e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c442:	83 c4 0c             	add    esp,0xc
c000c445:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c448:	8d 04 90             	lea    eax,[eax+edx*4]
c000c44b:	50                   	push   eax
c000c44c:	50                   	push   eax
c000c44d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c450:	e8 1e 99 01 00       	call   c0025d73 <__floatsidf>
c000c455:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c459:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c45d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c461:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c465:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c469:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46d:	e8 82 95 01 00       	call   c00259f4 <__divdf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c479:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c47d:	52                   	push   edx
c000c47e:	89 fa                	mov    edx,edi
c000c480:	50                   	push   eax
c000c481:	89 d8                	mov    eax,ebx
c000c483:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c487:	e8 50 de ff ff       	call   c000a2dc <calc_output_hex>
c000c48c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c490:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c494:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c498:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a0:	e8 4f 95 01 00       	call   c00259f4 <__divdf3>
c000c4a5:	83 c4 10             	add    esp,0x10
c000c4a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c0:	e8 ce 8b 01 00       	call   c0025093 <__adddf3>
c000c4c5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4c9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4cd:	83 c4 18             	add    esp,0x18
c000c4d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d8:	e8 b3 9c 01 00       	call   c0026190 <lrint>
c000c4dd:	83 ec 0c             	sub    esp,0xc
c000c4e0:	50                   	push   eax
c000c4e1:	e8 8d 98 01 00       	call   c0025d73 <__floatsidf>
c000c4e6:	83 c4 10             	add    esp,0x10
c000c4e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4f1:	52                   	push   edx
c000c4f2:	50                   	push   eax
c000c4f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fb:	e8 e4 91 01 00       	call   c00256e4 <__subdf3>
c000c500:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c504:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c508:	83 c4 20             	add    esp,0x20
c000c50b:	6a 00                	push   0x0
c000c50d:	6a 00                	push   0x0
c000c50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c513:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c517:	e8 c3 9a 01 00       	call   c0025fdf <__ltdf2>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	85 c0                	test   eax,eax
c000c521:	79 20                	jns    c000c543 <sinc_hex_vari_process+0x66f>
c000c523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c533:	e8 5b 8b 01 00       	call   c0025093 <__adddf3>
c000c538:	83 c4 10             	add    esp,0x10
c000c53b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c53f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c543:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c546:	83 ec 10             	sub    esp,0x10
c000c549:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c54d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c558:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c55c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c560:	e8 7f 91 01 00       	call   c00256e4 <__subdf3>
c000c565:	83 c4 18             	add    esp,0x18
c000c568:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c570:	52                   	push   edx
c000c571:	50                   	push   eax
c000c572:	e8 19 9c 01 00       	call   c0026190 <lrint>
c000c577:	0f af f8             	imul   edi,eax
c000c57a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c57e:	83 c4 10             	add    esp,0x10
c000c581:	01 f8                	add    eax,edi
c000c583:	99                   	cdq    
c000c584:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c587:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c58a:	e9 fd fb ff ff       	jmp    c000c18c <sinc_hex_vari_process+0x2b8>
c000c58f:	83 c4 4c             	add    esp,0x4c
c000c592:	89 d0                	mov    eax,edx
c000c594:	5b                   	pop    ebx
c000c595:	5e                   	pop    esi
c000c596:	5f                   	pop    edi
c000c597:	5d                   	pop    ebp
c000c598:	c3                   	ret    

c000c599 <sinc_quad_vari_process>:
c000c599:	55                   	push   ebp
c000c59a:	ba 05 00 00 00       	mov    edx,0x5
c000c59f:	57                   	push   edi
c000c5a0:	56                   	push   esi
c000c5a1:	53                   	push   ebx
c000c5a2:	83 ec 4c             	sub    esp,0x4c
c000c5a5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5a9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5ad:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5b0:	85 db                	test   ebx,ebx
c000c5b2:	0f 84 9c 06 00 00    	je     c000cc54 <sinc_quad_vari_process+0x6bb>
c000c5b8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5be:	0f af c7             	imul   eax,edi
c000c5c1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5c4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5c7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5ce:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5d5:	0f af c7             	imul   eax,edi
c000c5d8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5db:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5e9:	68 00 00 70 3f       	push   0x3f700000
c000c5ee:	6a 00                	push   0x0
c000c5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f8:	e8 e2 99 01 00       	call   c0025fdf <__ltdf2>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	ba 16 00 00 00       	mov    edx,0x16
c000c605:	85 c0                	test   eax,eax
c000c607:	0f 88 47 06 00 00    	js     c000cc54 <sinc_quad_vari_process+0x6bb>
c000c60d:	68 00 00 70 40       	push   0x40700000
c000c612:	6a 00                	push   0x0
c000c614:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61c:	e8 a0 99 01 00       	call   c0025fc1 <__gtdf2>
c000c621:	83 c4 10             	add    esp,0x10
c000c624:	ba 16 00 00 00       	mov    edx,0x16
c000c629:	85 c0                	test   eax,eax
c000c62b:	0f 8f 23 06 00 00    	jg     c000cc54 <sinc_quad_vari_process+0x6bb>
c000c631:	83 ec 0c             	sub    esp,0xc
c000c634:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c637:	e8 37 97 01 00       	call   c0025d73 <__floatsidf>
c000c63c:	83 c4 10             	add    esp,0x10
c000c63f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c643:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c647:	68 00 00 00 40       	push   0x40000000
c000c64c:	6a 00                	push   0x0
c000c64e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c656:	e8 38 8a 01 00       	call   c0025093 <__adddf3>
c000c65b:	59                   	pop    ecx
c000c65c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c660:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c664:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c667:	e8 07 97 01 00       	call   c0025d73 <__floatsidf>
c000c66c:	83 c4 10             	add    esp,0x10
c000c66f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c673:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c677:	52                   	push   edx
c000c678:	50                   	push   eax
c000c679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c67d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c681:	e8 6e 93 01 00       	call   c00259f4 <__divdf3>
c000c686:	83 c4 10             	add    esp,0x10
c000c689:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c68d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c691:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c694:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c697:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c69b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c69f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6af:	e8 0d 99 01 00       	call   c0025fc1 <__gtdf2>
c000c6b4:	83 c4 10             	add    esp,0x10
c000c6b7:	85 c0                	test   eax,eax
c000c6b9:	7e 2d                	jle    c000c6e8 <sinc_quad_vari_process+0x14f>
c000c6bb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6c0:	6a 00                	push   0x0
c000c6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ca:	e8 10 99 01 00       	call   c0025fdf <__ltdf2>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	85 c0                	test   eax,eax
c000c6d4:	79 4d                	jns    c000c723 <sinc_quad_vari_process+0x18a>
c000c6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e6:	eb 1b                	jmp    c000c703 <sinc_quad_vari_process+0x16a>
c000c6e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ed:	6a 00                	push   0x0
c000c6ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f7:	e8 e3 98 01 00       	call   c0025fdf <__ltdf2>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	85 c0                	test   eax,eax
c000c701:	79 20                	jns    c000c723 <sinc_quad_vari_process+0x18a>
c000c703:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c707:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c70b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c70f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c713:	e8 dc 92 01 00       	call   c00259f4 <__divdf3>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c71f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c723:	50                   	push   eax
c000c724:	50                   	push   eax
c000c725:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c729:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72d:	e8 5e 9a 01 00       	call   c0026190 <lrint>
c000c732:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c735:	40                   	inc    eax
c000c736:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c73a:	0f af c7             	imul   eax,edi
c000c73d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c744:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c748:	58                   	pop    eax
c000c749:	5a                   	pop    edx
c000c74a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c74e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c752:	e8 39 9a 01 00       	call   c0026190 <lrint>
c000c757:	83 ec 0c             	sub    esp,0xc
c000c75a:	50                   	push   eax
c000c75b:	e8 13 96 01 00       	call   c0025d73 <__floatsidf>
c000c760:	83 c4 10             	add    esp,0x10
c000c763:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c767:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76b:	52                   	push   edx
c000c76c:	50                   	push   eax
c000c76d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c771:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c775:	e8 6a 8f 01 00       	call   c00256e4 <__subdf3>
c000c77a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c77e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c782:	83 c4 20             	add    esp,0x20
c000c785:	6a 00                	push   0x0
c000c787:	6a 00                	push   0x0
c000c789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c791:	e8 49 98 01 00       	call   c0025fdf <__ltdf2>
c000c796:	83 c4 10             	add    esp,0x10
c000c799:	85 c0                	test   eax,eax
c000c79b:	79 1f                	jns    c000c7bc <sinc_quad_vari_process+0x223>
c000c79d:	68 00 00 f0 3f       	push   0x3ff00000
c000c7a2:	6a 00                	push   0x0
c000c7a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ac:	e8 e2 88 01 00       	call   c0025093 <__adddf3>
c000c7b1:	83 c4 10             	add    esp,0x10
c000c7b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7bc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7bf:	83 ec 10             	sub    esp,0x10
c000c7c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d9:	e8 06 8f 01 00       	call   c00256e4 <__subdf3>
c000c7de:	83 c4 18             	add    esp,0x18
c000c7e1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7e9:	52                   	push   edx
c000c7ea:	50                   	push   eax
c000c7eb:	e8 a0 99 01 00       	call   c0026190 <lrint>
c000c7f0:	0f af f8             	imul   edi,eax
c000c7f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f7:	01 f8                	add    eax,edi
c000c7f9:	99                   	cdq    
c000c7fa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7fd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c804:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c808:	68 00 00 f0 3f       	push   0x3ff00000
c000c80d:	6a 00                	push   0x0
c000c80f:	e8 e0 91 01 00       	call   c00259f4 <__divdf3>
c000c814:	83 c4 10             	add    esp,0x10
c000c817:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c81f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c824:	68 23 42 92 0c       	push   0xc924223
c000c829:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c82d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c831:	e8 5d 88 01 00       	call   c0025093 <__adddf3>
c000c836:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c83a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c83e:	83 c4 20             	add    esp,0x20
c000c841:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c849:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c851:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c854:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c857:	7d 50                	jge    c000c8a9 <sinc_quad_vari_process+0x310>
c000c859:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c85c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c85f:	01 c8                	add    eax,ecx
c000c861:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c864:	99                   	cdq    
c000c865:	f7 f9                	idiv   ecx
c000c867:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c86b:	7d 0c                	jge    c000c879 <sinc_quad_vari_process+0x2e0>
c000c86d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c870:	85 ff                	test   edi,edi
c000c872:	79 6c                	jns    c000c8e0 <sinc_quad_vari_process+0x347>
c000c874:	e9 e7 00 00 00       	jmp    c000c960 <sinc_quad_vari_process+0x3c7>
c000c879:	50                   	push   eax
c000c87a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c87e:	56                   	push   esi
c000c87f:	53                   	push   ebx
c000c880:	e8 11 ee ff ff       	call   c000b696 <prepare_data>
c000c885:	83 c4 10             	add    esp,0x10
c000c888:	89 c2                	mov    edx,eax
c000c88a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c88d:	85 c0                	test   eax,eax
c000c88f:	0f 85 bf 03 00 00    	jne    c000cc54 <sinc_quad_vari_process+0x6bb>
c000c895:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c898:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c89b:	01 c8                	add    eax,ecx
c000c89d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a0:	99                   	cdq    
c000c8a1:	f7 f9                	idiv   ecx
c000c8a3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8a7:	7c c4                	jl     c000c86d <sinc_quad_vari_process+0x2d4>
c000c8a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8b4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8c2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8c8:	99                   	cdq    
c000c8c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8cc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8d2:	99                   	cdq    
c000c8d3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8d6:	31 d2                	xor    edx,edx
c000c8d8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8db:	e9 74 03 00 00       	jmp    c000cc54 <sinc_quad_vari_process+0x6bb>
c000c8e0:	83 ec 0c             	sub    esp,0xc
c000c8e3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8e6:	e8 88 94 01 00       	call   c0025d73 <__floatsidf>
c000c8eb:	83 c4 10             	add    esp,0x10
c000c8ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c8f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c8f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c906:	e8 88 87 01 00       	call   c0025093 <__adddf3>
c000c90b:	83 c4 10             	add    esp,0x10
c000c90e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c912:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c916:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c922:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c926:	e8 68 87 01 00       	call   c0025093 <__adddf3>
c000c92b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c92e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c932:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c936:	e8 38 94 01 00       	call   c0025d73 <__floatsidf>
c000c93b:	83 c4 10             	add    esp,0x10
c000c93e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c942:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c946:	52                   	push   edx
c000c947:	50                   	push   eax
c000c948:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c950:	e8 88 96 01 00       	call   c0025fdd <__gedf2>
c000c955:	83 c4 10             	add    esp,0x10
c000c958:	85 c0                	test   eax,eax
c000c95a:	0f 89 49 ff ff ff    	jns    c000c8a9 <sinc_quad_vari_process+0x310>
c000c960:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c964:	0f 8e ef 00 00 00    	jle    c000ca59 <sinc_quad_vari_process+0x4c0>
c000c96a:	83 ec 10             	sub    esp,0x10
c000c96d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c970:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c973:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c976:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c979:	e8 66 8d 01 00       	call   c00256e4 <__subdf3>
c000c97e:	83 c4 18             	add    esp,0x18
c000c981:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c985:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c989:	52                   	push   edx
c000c98a:	50                   	push   eax
c000c98b:	e8 e0 97 01 00       	call   c0026170 <fabs>
c000c990:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c994:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9a0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ad:	e8 0f 96 01 00       	call   c0025fc1 <__gtdf2>
c000c9b2:	83 c4 10             	add    esp,0x10
c000c9b5:	85 c0                	test   eax,eax
c000c9b7:	0f 8e 9c 00 00 00    	jle    c000ca59 <sinc_quad_vari_process+0x4c0>
c000c9bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9c0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9d0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9d3:	e8 0c 8d 01 00       	call   c00256e4 <__subdf3>
c000c9d8:	59                   	pop    ecx
c000c9d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9e1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9e4:	e8 8a 93 01 00       	call   c0025d73 <__floatsidf>
c000c9e9:	83 c4 10             	add    esp,0x10
c000c9ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f4:	52                   	push   edx
c000c9f5:	50                   	push   eax
c000c9f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fe:	e8 0d 8d 01 00       	call   c0025710 <__muldf3>
c000ca03:	5f                   	pop    edi
c000ca04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca08:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca0f:	e8 5f 93 01 00       	call   c0025d73 <__floatsidf>
c000ca14:	83 c4 10             	add    esp,0x10
c000ca17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca1f:	52                   	push   edx
c000ca20:	50                   	push   eax
c000ca21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca29:	e8 c6 8f 01 00       	call   c00259f4 <__divdf3>
c000ca2e:	83 c4 10             	add    esp,0x10
c000ca31:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca49:	e8 45 86 01 00       	call   c0025093 <__adddf3>
c000ca4e:	83 c4 10             	add    esp,0x10
c000ca51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca55:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca59:	83 ec 0c             	sub    esp,0xc
c000ca5c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca5f:	e8 0f 93 01 00       	call   c0025d73 <__floatsidf>
c000ca64:	83 c4 10             	add    esp,0x10
c000ca67:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca6b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7f:	e8 5b 95 01 00       	call   c0025fdf <__ltdf2>
c000ca84:	83 c4 10             	add    esp,0x10
c000ca87:	85 c0                	test   eax,eax
c000ca89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ca91:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ca95:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ca99:	78 10                	js     c000caab <sinc_quad_vari_process+0x512>
c000ca9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ca9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caa3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caa7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cabb:	e8 50 8c 01 00       	call   c0025710 <__muldf3>
c000cac0:	59                   	pop    ecx
c000cac1:	5f                   	pop    edi
c000cac2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cac6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000caca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cace:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad2:	e8 98 eb ff ff       	call   c000b66f <double_to_fp>
c000cad7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cadb:	89 c7                	mov    edi,eax
c000cadd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cae1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae9:	e8 22 8c 01 00       	call   c0025710 <__muldf3>
c000caee:	83 c4 18             	add    esp,0x18
c000caf1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000caf5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000caf9:	52                   	push   edx
c000cafa:	50                   	push   eax
c000cafb:	e8 6f eb ff ff       	call   c000b66f <double_to_fp>
c000cb00:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb03:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb07:	83 c4 0c             	add    esp,0xc
c000cb0a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb0d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb10:	50                   	push   eax
c000cb11:	50                   	push   eax
c000cb12:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb15:	e8 59 92 01 00       	call   c0025d73 <__floatsidf>
c000cb1a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb1e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb32:	e8 bd 8e 01 00       	call   c00259f4 <__divdf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb42:	52                   	push   edx
c000cb43:	89 fa                	mov    edx,edi
c000cb45:	50                   	push   eax
c000cb46:	89 d8                	mov    eax,ebx
c000cb48:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb4c:	e8 a5 d1 ff ff       	call   c0009cf6 <calc_output_quad>
c000cb51:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb65:	e8 8a 8e 01 00       	call   c00259f4 <__divdf3>
c000cb6a:	83 c4 10             	add    esp,0x10
c000cb6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb85:	e8 09 85 01 00       	call   c0025093 <__adddf3>
c000cb8a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb8e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb92:	83 c4 18             	add    esp,0x18
c000cb95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9d:	e8 ee 95 01 00       	call   c0026190 <lrint>
c000cba2:	83 ec 0c             	sub    esp,0xc
c000cba5:	50                   	push   eax
c000cba6:	e8 c8 91 01 00       	call   c0025d73 <__floatsidf>
c000cbab:	83 c4 10             	add    esp,0x10
c000cbae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbb6:	52                   	push   edx
c000cbb7:	50                   	push   eax
c000cbb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc0:	e8 1f 8b 01 00       	call   c00256e4 <__subdf3>
c000cbc5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbcd:	83 c4 20             	add    esp,0x20
c000cbd0:	6a 00                	push   0x0
c000cbd2:	6a 00                	push   0x0
c000cbd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbdc:	e8 fe 93 01 00       	call   c0025fdf <__ltdf2>
c000cbe1:	83 c4 10             	add    esp,0x10
c000cbe4:	85 c0                	test   eax,eax
c000cbe6:	79 20                	jns    c000cc08 <sinc_quad_vari_process+0x66f>
c000cbe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf8:	e8 96 84 01 00       	call   c0025093 <__adddf3>
c000cbfd:	83 c4 10             	add    esp,0x10
c000cc00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc08:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc0b:	83 ec 10             	sub    esp,0x10
c000cc0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc12:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc25:	e8 ba 8a 01 00       	call   c00256e4 <__subdf3>
c000cc2a:	83 c4 18             	add    esp,0x18
c000cc2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc35:	52                   	push   edx
c000cc36:	50                   	push   eax
c000cc37:	e8 54 95 01 00       	call   c0026190 <lrint>
c000cc3c:	0f af f8             	imul   edi,eax
c000cc3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	01 f8                	add    eax,edi
c000cc48:	99                   	cdq    
c000cc49:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc4c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc4f:	e9 fd fb ff ff       	jmp    c000c851 <sinc_quad_vari_process+0x2b8>
c000cc54:	83 c4 4c             	add    esp,0x4c
c000cc57:	89 d0                	mov    eax,edx
c000cc59:	5b                   	pop    ebx
c000cc5a:	5e                   	pop    esi
c000cc5b:	5f                   	pop    edi
c000cc5c:	5d                   	pop    ebp
c000cc5d:	c3                   	ret    

c000cc5e <sinc_stereo_vari_process>:
c000cc5e:	55                   	push   ebp
c000cc5f:	ba 05 00 00 00       	mov    edx,0x5
c000cc64:	57                   	push   edi
c000cc65:	56                   	push   esi
c000cc66:	53                   	push   ebx
c000cc67:	83 ec 4c             	sub    esp,0x4c
c000cc6a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc6e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc72:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc75:	85 db                	test   ebx,ebx
c000cc77:	0f 84 9c 06 00 00    	je     c000d319 <sinc_stereo_vari_process+0x6bb>
c000cc7d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc80:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc83:	0f af c7             	imul   eax,edi
c000cc86:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc89:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cc93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cc9a:	0f af c7             	imul   eax,edi
c000cc9d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cca0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cca3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cca6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccae:	68 00 00 70 3f       	push   0x3f700000
c000ccb3:	6a 00                	push   0x0
c000ccb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbd:	e8 1d 93 01 00       	call   c0025fdf <__ltdf2>
c000ccc2:	83 c4 10             	add    esp,0x10
c000ccc5:	ba 16 00 00 00       	mov    edx,0x16
c000ccca:	85 c0                	test   eax,eax
c000cccc:	0f 88 47 06 00 00    	js     c000d319 <sinc_stereo_vari_process+0x6bb>
c000ccd2:	68 00 00 70 40       	push   0x40700000
c000ccd7:	6a 00                	push   0x0
c000ccd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce1:	e8 db 92 01 00       	call   c0025fc1 <__gtdf2>
c000cce6:	83 c4 10             	add    esp,0x10
c000cce9:	ba 16 00 00 00       	mov    edx,0x16
c000ccee:	85 c0                	test   eax,eax
c000ccf0:	0f 8f 23 06 00 00    	jg     c000d319 <sinc_stereo_vari_process+0x6bb>
c000ccf6:	83 ec 0c             	sub    esp,0xc
c000ccf9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ccfc:	e8 72 90 01 00       	call   c0025d73 <__floatsidf>
c000cd01:	83 c4 10             	add    esp,0x10
c000cd04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd0c:	68 00 00 00 40       	push   0x40000000
c000cd11:	6a 00                	push   0x0
c000cd13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1b:	e8 73 83 01 00       	call   c0025093 <__adddf3>
c000cd20:	59                   	pop    ecx
c000cd21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd25:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd29:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd2c:	e8 42 90 01 00       	call   c0025d73 <__floatsidf>
c000cd31:	83 c4 10             	add    esp,0x10
c000cd34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd3c:	52                   	push   edx
c000cd3d:	50                   	push   eax
c000cd3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd46:	e8 a9 8c 01 00       	call   c00259f4 <__divdf3>
c000cd4b:	83 c4 10             	add    esp,0x10
c000cd4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd56:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd59:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd74:	e8 48 92 01 00       	call   c0025fc1 <__gtdf2>
c000cd79:	83 c4 10             	add    esp,0x10
c000cd7c:	85 c0                	test   eax,eax
c000cd7e:	7e 2d                	jle    c000cdad <sinc_stereo_vari_process+0x14f>
c000cd80:	68 00 00 f0 3f       	push   0x3ff00000
c000cd85:	6a 00                	push   0x0
c000cd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8f:	e8 4b 92 01 00       	call   c0025fdf <__ltdf2>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	85 c0                	test   eax,eax
c000cd99:	79 4d                	jns    c000cde8 <sinc_stereo_vari_process+0x18a>
c000cd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cda3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdab:	eb 1b                	jmp    c000cdc8 <sinc_stereo_vari_process+0x16a>
c000cdad:	68 00 00 f0 3f       	push   0x3ff00000
c000cdb2:	6a 00                	push   0x0
c000cdb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbc:	e8 1e 92 01 00       	call   c0025fdf <__ltdf2>
c000cdc1:	83 c4 10             	add    esp,0x10
c000cdc4:	85 c0                	test   eax,eax
c000cdc6:	79 20                	jns    c000cde8 <sinc_stereo_vari_process+0x18a>
c000cdc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdcc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd8:	e8 17 8c 01 00       	call   c00259f4 <__divdf3>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cde4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cde8:	50                   	push   eax
c000cde9:	50                   	push   eax
c000cdea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf2:	e8 99 93 01 00       	call   c0026190 <lrint>
c000cdf7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cdfa:	40                   	inc    eax
c000cdfb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdff:	0f af c7             	imul   eax,edi
c000ce02:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce09:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0d:	58                   	pop    eax
c000ce0e:	5a                   	pop    edx
c000ce0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce17:	e8 74 93 01 00       	call   c0026190 <lrint>
c000ce1c:	83 ec 0c             	sub    esp,0xc
c000ce1f:	50                   	push   eax
c000ce20:	e8 4e 8f 01 00       	call   c0025d73 <__floatsidf>
c000ce25:	83 c4 10             	add    esp,0x10
c000ce28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce30:	52                   	push   edx
c000ce31:	50                   	push   eax
c000ce32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce3a:	e8 a5 88 01 00       	call   c00256e4 <__subdf3>
c000ce3f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce47:	83 c4 20             	add    esp,0x20
c000ce4a:	6a 00                	push   0x0
c000ce4c:	6a 00                	push   0x0
c000ce4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce56:	e8 84 91 01 00       	call   c0025fdf <__ltdf2>
c000ce5b:	83 c4 10             	add    esp,0x10
c000ce5e:	85 c0                	test   eax,eax
c000ce60:	79 1f                	jns    c000ce81 <sinc_stereo_vari_process+0x223>
c000ce62:	68 00 00 f0 3f       	push   0x3ff00000
c000ce67:	6a 00                	push   0x0
c000ce69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce71:	e8 1d 82 01 00       	call   c0025093 <__adddf3>
c000ce76:	83 c4 10             	add    esp,0x10
c000ce79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce81:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce84:	83 ec 10             	sub    esp,0x10
c000ce87:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce8b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce96:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9e:	e8 41 88 01 00       	call   c00256e4 <__subdf3>
c000cea3:	83 c4 18             	add    esp,0x18
c000cea6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceaa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceae:	52                   	push   edx
c000ceaf:	50                   	push   eax
c000ceb0:	e8 db 92 01 00       	call   c0026190 <lrint>
c000ceb5:	0f af f8             	imul   edi,eax
c000ceb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cebc:	01 f8                	add    eax,edi
c000cebe:	99                   	cdq    
c000cebf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cec2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cec5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cecd:	68 00 00 f0 3f       	push   0x3ff00000
c000ced2:	6a 00                	push   0x0
c000ced4:	e8 1b 8b 01 00       	call   c00259f4 <__divdf3>
c000ced9:	83 c4 10             	add    esp,0x10
c000cedc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cee0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cee4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cee9:	68 23 42 92 0c       	push   0xc924223
c000ceee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef6:	e8 98 81 01 00       	call   c0025093 <__adddf3>
c000cefb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ceff:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf03:	83 c4 20             	add    esp,0x20
c000cf06:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf0e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf16:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf19:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf1c:	7d 50                	jge    c000cf6e <sinc_stereo_vari_process+0x310>
c000cf1e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf21:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf24:	01 c8                	add    eax,ecx
c000cf26:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf29:	99                   	cdq    
c000cf2a:	f7 f9                	idiv   ecx
c000cf2c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf30:	7d 0c                	jge    c000cf3e <sinc_stereo_vari_process+0x2e0>
c000cf32:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf35:	85 ff                	test   edi,edi
c000cf37:	79 6c                	jns    c000cfa5 <sinc_stereo_vari_process+0x347>
c000cf39:	e9 e7 00 00 00       	jmp    c000d025 <sinc_stereo_vari_process+0x3c7>
c000cf3e:	50                   	push   eax
c000cf3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf43:	56                   	push   esi
c000cf44:	53                   	push   ebx
c000cf45:	e8 4c e7 ff ff       	call   c000b696 <prepare_data>
c000cf4a:	83 c4 10             	add    esp,0x10
c000cf4d:	89 c2                	mov    edx,eax
c000cf4f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf52:	85 c0                	test   eax,eax
c000cf54:	0f 85 bf 03 00 00    	jne    c000d319 <sinc_stereo_vari_process+0x6bb>
c000cf5a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf60:	01 c8                	add    eax,ecx
c000cf62:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf65:	99                   	cdq    
c000cf66:	f7 f9                	idiv   ecx
c000cf68:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf6c:	7c c4                	jl     c000cf32 <sinc_stereo_vari_process+0x2d4>
c000cf6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf76:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf79:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf84:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf87:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf8a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf8d:	99                   	cdq    
c000cf8e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf91:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cf94:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cf97:	99                   	cdq    
c000cf98:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf9b:	31 d2                	xor    edx,edx
c000cf9d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfa0:	e9 74 03 00 00       	jmp    c000d319 <sinc_stereo_vari_process+0x6bb>
c000cfa5:	83 ec 0c             	sub    esp,0xc
c000cfa8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfab:	e8 c3 8d 01 00       	call   c0025d73 <__floatsidf>
c000cfb0:	83 c4 10             	add    esp,0x10
c000cfb3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfcb:	e8 c3 80 01 00       	call   c0025093 <__adddf3>
c000cfd0:	83 c4 10             	add    esp,0x10
c000cfd3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfdf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfeb:	e8 a3 80 01 00       	call   c0025093 <__adddf3>
c000cff0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cff3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cffb:	e8 73 8d 01 00       	call   c0025d73 <__floatsidf>
c000d000:	83 c4 10             	add    esp,0x10
c000d003:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d007:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00b:	52                   	push   edx
c000d00c:	50                   	push   eax
c000d00d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d015:	e8 c3 8f 01 00       	call   c0025fdd <__gedf2>
c000d01a:	83 c4 10             	add    esp,0x10
c000d01d:	85 c0                	test   eax,eax
c000d01f:	0f 89 49 ff ff ff    	jns    c000cf6e <sinc_stereo_vari_process+0x310>
c000d025:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d029:	0f 8e ef 00 00 00    	jle    c000d11e <sinc_stereo_vari_process+0x4c0>
c000d02f:	83 ec 10             	sub    esp,0x10
c000d032:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d035:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d038:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d03b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d03e:	e8 a1 86 01 00       	call   c00256e4 <__subdf3>
c000d043:	83 c4 18             	add    esp,0x18
c000d046:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d04e:	52                   	push   edx
c000d04f:	50                   	push   eax
c000d050:	e8 1b 91 01 00       	call   c0026170 <fabs>
c000d055:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d059:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d05d:	83 c4 10             	add    esp,0x10
c000d060:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d065:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d06a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d06e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d072:	e8 4a 8f 01 00       	call   c0025fc1 <__gtdf2>
c000d077:	83 c4 10             	add    esp,0x10
c000d07a:	85 c0                	test   eax,eax
c000d07c:	0f 8e 9c 00 00 00    	jle    c000d11e <sinc_stereo_vari_process+0x4c0>
c000d082:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d085:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d088:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d08c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d095:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d098:	e8 47 86 01 00       	call   c00256e4 <__subdf3>
c000d09d:	59                   	pop    ecx
c000d09e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0a2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0a6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0a9:	e8 c5 8c 01 00       	call   c0025d73 <__floatsidf>
c000d0ae:	83 c4 10             	add    esp,0x10
c000d0b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0b9:	52                   	push   edx
c000d0ba:	50                   	push   eax
c000d0bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c3:	e8 48 86 01 00       	call   c0025710 <__muldf3>
c000d0c8:	5f                   	pop    edi
c000d0c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0cd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0d1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0d4:	e8 9a 8c 01 00       	call   c0025d73 <__floatsidf>
c000d0d9:	83 c4 10             	add    esp,0x10
c000d0dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0e4:	52                   	push   edx
c000d0e5:	50                   	push   eax
c000d0e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ee:	e8 01 89 01 00       	call   c00259f4 <__divdf3>
c000d0f3:	83 c4 10             	add    esp,0x10
c000d0f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d102:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d106:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10e:	e8 80 7f 01 00       	call   c0025093 <__adddf3>
c000d113:	83 c4 10             	add    esp,0x10
c000d116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d11a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d11e:	83 ec 0c             	sub    esp,0xc
c000d121:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d124:	e8 4a 8c 01 00       	call   c0025d73 <__floatsidf>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d144:	e8 96 8e 01 00       	call   c0025fdf <__ltdf2>
c000d149:	83 c4 10             	add    esp,0x10
c000d14c:	85 c0                	test   eax,eax
c000d14e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d152:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d156:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d15a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d15e:	78 10                	js     c000d170 <sinc_stereo_vari_process+0x512>
c000d160:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d164:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d168:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d16c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d170:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d174:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d180:	e8 8b 85 01 00       	call   c0025710 <__muldf3>
c000d185:	59                   	pop    ecx
c000d186:	5f                   	pop    edi
c000d187:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d18b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d18f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d193:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d197:	e8 d3 e4 ff ff       	call   c000b66f <double_to_fp>
c000d19c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a0:	89 c7                	mov    edi,eax
c000d1a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ae:	e8 5d 85 01 00       	call   c0025710 <__muldf3>
c000d1b3:	83 c4 18             	add    esp,0x18
c000d1b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1be:	52                   	push   edx
c000d1bf:	50                   	push   eax
c000d1c0:	e8 aa e4 ff ff       	call   c000b66f <double_to_fp>
c000d1c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1cc:	83 c4 0c             	add    esp,0xc
c000d1cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1d2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1d5:	50                   	push   eax
c000d1d6:	50                   	push   eax
c000d1d7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1da:	e8 94 8b 01 00       	call   c0025d73 <__floatsidf>
c000d1df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f7:	e8 f8 87 01 00       	call   c00259f4 <__divdf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d203:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d207:	52                   	push   edx
c000d208:	89 fa                	mov    edx,edi
c000d20a:	50                   	push   eax
c000d20b:	89 d8                	mov    eax,ebx
c000d20d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d211:	e8 02 c7 ff ff       	call   c0009918 <calc_output_stereo>
c000d216:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d21a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d21e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d222:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d226:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22a:	e8 c5 87 01 00       	call   c00259f4 <__divdf3>
c000d22f:	83 c4 10             	add    esp,0x10
c000d232:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d236:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d242:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d246:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24a:	e8 44 7e 01 00       	call   c0025093 <__adddf3>
c000d24f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d253:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d257:	83 c4 18             	add    esp,0x18
c000d25a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d25e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d262:	e8 29 8f 01 00       	call   c0026190 <lrint>
c000d267:	83 ec 0c             	sub    esp,0xc
c000d26a:	50                   	push   eax
c000d26b:	e8 03 8b 01 00       	call   c0025d73 <__floatsidf>
c000d270:	83 c4 10             	add    esp,0x10
c000d273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d27b:	52                   	push   edx
c000d27c:	50                   	push   eax
c000d27d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d281:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d285:	e8 5a 84 01 00       	call   c00256e4 <__subdf3>
c000d28a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d292:	83 c4 20             	add    esp,0x20
c000d295:	6a 00                	push   0x0
c000d297:	6a 00                	push   0x0
c000d299:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d29d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a1:	e8 39 8d 01 00       	call   c0025fdf <__ltdf2>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	85 c0                	test   eax,eax
c000d2ab:	79 20                	jns    c000d2cd <sinc_stereo_vari_process+0x66f>
c000d2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2bd:	e8 d1 7d 01 00       	call   c0025093 <__adddf3>
c000d2c2:	83 c4 10             	add    esp,0x10
c000d2c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2cd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2d0:	83 ec 10             	sub    esp,0x10
c000d2d3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2d7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ea:	e8 f5 83 01 00       	call   c00256e4 <__subdf3>
c000d2ef:	83 c4 18             	add    esp,0x18
c000d2f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2fa:	52                   	push   edx
c000d2fb:	50                   	push   eax
c000d2fc:	e8 8f 8e 01 00       	call   c0026190 <lrint>
c000d301:	0f af f8             	imul   edi,eax
c000d304:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d308:	83 c4 10             	add    esp,0x10
c000d30b:	01 f8                	add    eax,edi
c000d30d:	99                   	cdq    
c000d30e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d311:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d314:	e9 fd fb ff ff       	jmp    c000cf16 <sinc_stereo_vari_process+0x2b8>
c000d319:	83 c4 4c             	add    esp,0x4c
c000d31c:	89 d0                	mov    eax,edx
c000d31e:	5b                   	pop    ebx
c000d31f:	5e                   	pop    esi
c000d320:	5f                   	pop    edi
c000d321:	5d                   	pop    ebp
c000d322:	c3                   	ret    

c000d323 <sinc_mono_vari_process>:
c000d323:	55                   	push   ebp
c000d324:	ba 05 00 00 00       	mov    edx,0x5
c000d329:	57                   	push   edi
c000d32a:	56                   	push   esi
c000d32b:	53                   	push   ebx
c000d32c:	83 ec 4c             	sub    esp,0x4c
c000d32f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d333:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d337:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d33a:	85 db                	test   ebx,ebx
c000d33c:	0f 84 c1 06 00 00    	je     c000da03 <sinc_mono_vari_process+0x6e0>
c000d342:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d345:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d348:	0f af c7             	imul   eax,edi
c000d34b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d34e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d351:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d358:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d35f:	0f af c7             	imul   eax,edi
c000d362:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d365:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d36c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d36e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d372:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d376:	68 00 00 70 3f       	push   0x3f700000
c000d37b:	6a 00                	push   0x0
c000d37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d385:	e8 55 8c 01 00       	call   c0025fdf <__ltdf2>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	ba 16 00 00 00       	mov    edx,0x16
c000d392:	85 c0                	test   eax,eax
c000d394:	0f 88 69 06 00 00    	js     c000da03 <sinc_mono_vari_process+0x6e0>
c000d39a:	68 00 00 70 40       	push   0x40700000
c000d39f:	6a 00                	push   0x0
c000d3a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a9:	e8 13 8c 01 00       	call   c0025fc1 <__gtdf2>
c000d3ae:	83 c4 10             	add    esp,0x10
c000d3b1:	ba 16 00 00 00       	mov    edx,0x16
c000d3b6:	85 c0                	test   eax,eax
c000d3b8:	0f 8f 45 06 00 00    	jg     c000da03 <sinc_mono_vari_process+0x6e0>
c000d3be:	83 ec 0c             	sub    esp,0xc
c000d3c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3c4:	e8 aa 89 01 00       	call   c0025d73 <__floatsidf>
c000d3c9:	83 c4 10             	add    esp,0x10
c000d3cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3d4:	68 00 00 00 40       	push   0x40000000
c000d3d9:	6a 00                	push   0x0
c000d3db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e3:	e8 ab 7c 01 00       	call   c0025093 <__adddf3>
c000d3e8:	59                   	pop    ecx
c000d3e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3ed:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3f1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3f4:	e8 7a 89 01 00       	call   c0025d73 <__floatsidf>
c000d3f9:	83 c4 10             	add    esp,0x10
c000d3fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d400:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d404:	52                   	push   edx
c000d405:	50                   	push   eax
c000d406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40e:	e8 e1 85 01 00       	call   c00259f4 <__divdf3>
c000d413:	83 c4 10             	add    esp,0x10
c000d416:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d41a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d41e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d421:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d424:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d428:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d42c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d438:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43c:	e8 80 8b 01 00       	call   c0025fc1 <__gtdf2>
c000d441:	83 c4 10             	add    esp,0x10
c000d444:	85 c0                	test   eax,eax
c000d446:	7e 2d                	jle    c000d475 <sinc_mono_vari_process+0x152>
c000d448:	68 00 00 f0 3f       	push   0x3ff00000
c000d44d:	6a 00                	push   0x0
c000d44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d457:	e8 83 8b 01 00       	call   c0025fdf <__ltdf2>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	85 c0                	test   eax,eax
c000d461:	79 4d                	jns    c000d4b0 <sinc_mono_vari_process+0x18d>
c000d463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d467:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d46f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d473:	eb 1b                	jmp    c000d490 <sinc_mono_vari_process+0x16d>
c000d475:	68 00 00 f0 3f       	push   0x3ff00000
c000d47a:	6a 00                	push   0x0
c000d47c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d480:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d484:	e8 56 8b 01 00       	call   c0025fdf <__ltdf2>
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	85 c0                	test   eax,eax
c000d48e:	79 20                	jns    c000d4b0 <sinc_mono_vari_process+0x18d>
c000d490:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d494:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a0:	e8 4f 85 01 00       	call   c00259f4 <__divdf3>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b0:	50                   	push   eax
c000d4b1:	50                   	push   eax
c000d4b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ba:	e8 d1 8c 01 00       	call   c0026190 <lrint>
c000d4bf:	40                   	inc    eax
c000d4c0:	0f af c7             	imul   eax,edi
c000d4c3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4c7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4cb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4d9:	58                   	pop    eax
c000d4da:	5a                   	pop    edx
c000d4db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e3:	e8 a8 8c 01 00       	call   c0026190 <lrint>
c000d4e8:	83 ec 0c             	sub    esp,0xc
c000d4eb:	50                   	push   eax
c000d4ec:	e8 82 88 01 00       	call   c0025d73 <__floatsidf>
c000d4f1:	83 c4 10             	add    esp,0x10
c000d4f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4fc:	52                   	push   edx
c000d4fd:	50                   	push   eax
c000d4fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d502:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d506:	e8 d9 81 01 00       	call   c00256e4 <__subdf3>
c000d50b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d50f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d513:	83 c4 20             	add    esp,0x20
c000d516:	6a 00                	push   0x0
c000d518:	6a 00                	push   0x0
c000d51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d522:	e8 b8 8a 01 00       	call   c0025fdf <__ltdf2>
c000d527:	83 c4 10             	add    esp,0x10
c000d52a:	85 c0                	test   eax,eax
c000d52c:	79 1f                	jns    c000d54d <sinc_mono_vari_process+0x22a>
c000d52e:	68 00 00 f0 3f       	push   0x3ff00000
c000d533:	6a 00                	push   0x0
c000d535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53d:	e8 51 7b 01 00       	call   c0025093 <__adddf3>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d549:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d54d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d550:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d553:	83 ec 10             	sub    esp,0x10
c000d556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d562:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d566:	e8 79 81 01 00       	call   c00256e4 <__subdf3>
c000d56b:	83 c4 18             	add    esp,0x18
c000d56e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d572:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d576:	52                   	push   edx
c000d577:	50                   	push   eax
c000d578:	e8 13 8c 01 00       	call   c0026190 <lrint>
c000d57d:	0f af f8             	imul   edi,eax
c000d580:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d583:	31 ff                	xor    edi,edi
c000d585:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d58a:	99                   	cdq    
c000d58b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d58e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d591:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d595:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d599:	55                   	push   ebp
c000d59a:	57                   	push   edi
c000d59b:	e8 54 84 01 00       	call   c00259f4 <__divdf3>
c000d5a0:	83 c4 10             	add    esp,0x10
c000d5a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ab:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5b0:	68 23 42 92 0c       	push   0xc924223
c000d5b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5bd:	e8 d1 7a 01 00       	call   c0025093 <__adddf3>
c000d5c2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5c6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5ca:	83 c4 20             	add    esp,0x20
c000d5cd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5d1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5db:	7d 54                	jge    c000d631 <sinc_mono_vari_process+0x30e>
c000d5dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5e3:	01 c8                	add    eax,ecx
c000d5e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5e8:	99                   	cdq    
c000d5e9:	f7 f9                	idiv   ecx
c000d5eb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ef:	7d 0c                	jge    c000d5fd <sinc_mono_vari_process+0x2da>
c000d5f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d5f4:	85 ff                	test   edi,edi
c000d5f6:	79 73                	jns    c000d66b <sinc_mono_vari_process+0x348>
c000d5f8:	e9 ee 00 00 00       	jmp    c000d6eb <sinc_mono_vari_process+0x3c8>
c000d5fd:	50                   	push   eax
c000d5fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d602:	56                   	push   esi
c000d603:	53                   	push   ebx
c000d604:	e8 8d e0 ff ff       	call   c000b696 <prepare_data>
c000d609:	89 c2                	mov    edx,eax
c000d60b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d60f:	83 c4 10             	add    esp,0x10
c000d612:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d615:	85 d2                	test   edx,edx
c000d617:	0f 85 e6 03 00 00    	jne    c000da03 <sinc_mono_vari_process+0x6e0>
c000d61d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d620:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d623:	01 c8                	add    eax,ecx
c000d625:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d628:	99                   	cdq    
c000d629:	f7 f9                	idiv   ecx
c000d62b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d62f:	7c c0                	jl     c000d5f1 <sinc_mono_vari_process+0x2ce>
c000d631:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d635:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d639:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d640:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d647:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d64b:	89 01                	mov    DWORD PTR [ecx],eax
c000d64d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d650:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d653:	99                   	cdq    
c000d654:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d657:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d65a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d65d:	99                   	cdq    
c000d65e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d661:	31 d2                	xor    edx,edx
c000d663:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d666:	e9 98 03 00 00       	jmp    c000da03 <sinc_mono_vari_process+0x6e0>
c000d66b:	83 ec 0c             	sub    esp,0xc
c000d66e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d671:	e8 fd 86 01 00       	call   c0025d73 <__floatsidf>
c000d676:	83 c4 10             	add    esp,0x10
c000d679:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d67d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d681:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d685:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d689:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d691:	e8 fd 79 01 00       	call   c0025093 <__adddf3>
c000d696:	83 c4 10             	add    esp,0x10
c000d699:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d69d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b1:	e8 dd 79 01 00       	call   c0025093 <__adddf3>
c000d6b6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6b9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6bd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6c1:	e8 ad 86 01 00       	call   c0025d73 <__floatsidf>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d1:	52                   	push   edx
c000d6d2:	50                   	push   eax
c000d6d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6db:	e8 e1 88 01 00       	call   c0025fc1 <__gtdf2>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	85 c0                	test   eax,eax
c000d6e5:	0f 8f 46 ff ff ff    	jg     c000d631 <sinc_mono_vari_process+0x30e>
c000d6eb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ef:	0f 8e f5 00 00 00    	jle    c000d7ea <sinc_mono_vari_process+0x4c7>
c000d6f5:	83 ec 10             	sub    esp,0x10
c000d6f8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d6fb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d6fe:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d702:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d705:	ff 30                	push   DWORD PTR [eax]
c000d707:	e8 d8 7f 01 00       	call   c00256e4 <__subdf3>
c000d70c:	83 c4 18             	add    esp,0x18
c000d70f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d713:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d717:	52                   	push   edx
c000d718:	50                   	push   eax
c000d719:	e8 52 8a 01 00       	call   c0026170 <fabs>
c000d71e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d722:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d726:	83 c4 10             	add    esp,0x10
c000d729:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d72e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d733:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d737:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d73b:	e8 81 88 01 00       	call   c0025fc1 <__gtdf2>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	85 c0                	test   eax,eax
c000d745:	0f 8e 9f 00 00 00    	jle    c000d7ea <sinc_mono_vari_process+0x4c7>
c000d74b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d74f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d752:	8b 00                	mov    eax,DWORD PTR [eax]
c000d754:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d758:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d761:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d764:	e8 7b 7f 01 00       	call   c00256e4 <__subdf3>
c000d769:	5f                   	pop    edi
c000d76a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d76e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d772:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d775:	e8 f9 85 01 00       	call   c0025d73 <__floatsidf>
c000d77a:	83 c4 10             	add    esp,0x10
c000d77d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d781:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d785:	52                   	push   edx
c000d786:	50                   	push   eax
c000d787:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78f:	e8 7c 7f 01 00       	call   c0025710 <__muldf3>
c000d794:	5d                   	pop    ebp
c000d795:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d799:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d79d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7a0:	e8 ce 85 01 00       	call   c0025d73 <__floatsidf>
c000d7a5:	83 c4 10             	add    esp,0x10
c000d7a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7b0:	52                   	push   edx
c000d7b1:	50                   	push   eax
c000d7b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ba:	e8 35 82 01 00       	call   c00259f4 <__divdf3>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7da:	e8 b4 78 01 00       	call   c0025093 <__adddf3>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7ea:	83 ec 0c             	sub    esp,0xc
c000d7ed:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d7f0:	e8 7e 85 01 00       	call   c0025d73 <__floatsidf>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7fc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d810:	e8 ca 87 01 00       	call   c0025fdf <__ltdf2>
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	85 c0                	test   eax,eax
c000d81a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d81e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d822:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d826:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d82a:	78 10                	js     c000d83c <sinc_mono_vari_process+0x519>
c000d82c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d830:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d834:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d838:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d83c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d840:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d844:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d848:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84c:	e8 bf 7e 01 00       	call   c0025710 <__muldf3>
c000d851:	59                   	pop    ecx
c000d852:	5f                   	pop    edi
c000d853:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d857:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d85f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d863:	e8 07 de ff ff       	call   c000b66f <double_to_fp>
c000d868:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d86c:	89 c7                	mov    edi,eax
c000d86e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d872:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d876:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d87a:	e8 91 7e 01 00       	call   c0025710 <__muldf3>
c000d87f:	83 c4 18             	add    esp,0x18
c000d882:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d886:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d88a:	52                   	push   edx
c000d88b:	50                   	push   eax
c000d88c:	e8 de dd ff ff       	call   c000b66f <double_to_fp>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	89 c5                	mov    ebp,eax
c000d896:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d899:	e8 d5 84 01 00       	call   c0025d73 <__floatsidf>
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8a5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8a9:	52                   	push   edx
c000d8aa:	50                   	push   eax
c000d8ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b3:	e8 3c 81 01 00       	call   c00259f4 <__divdf3>
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	89 e9                	mov    ecx,ebp
c000d8bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8c5:	89 d8                	mov    eax,ebx
c000d8c7:	89 fa                	mov    edx,edi
c000d8c9:	e8 ee bd ff ff       	call   c00096bc <calc_output_single>
c000d8ce:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8d1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8dc:	52                   	push   edx
c000d8dd:	50                   	push   eax
c000d8de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e6:	e8 25 7e 01 00       	call   c0025710 <__muldf3>
c000d8eb:	59                   	pop    ecx
c000d8ec:	59                   	pop    ecx
c000d8ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fd:	e8 e1 86 01 00       	call   c0025fe3 <__truncdfsf2>
c000d902:	83 c4 10             	add    esp,0x10
c000d905:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d908:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d90b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d90f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d913:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d917:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91b:	e8 d4 80 01 00       	call   c00259f4 <__divdf3>
c000d920:	83 c4 10             	add    esp,0x10
c000d923:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d927:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d92b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d92f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d933:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d937:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93b:	e8 53 77 01 00       	call   c0025093 <__adddf3>
c000d940:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d944:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d948:	83 c4 18             	add    esp,0x18
c000d94b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d94f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d953:	e8 38 88 01 00       	call   c0026190 <lrint>
c000d958:	83 ec 0c             	sub    esp,0xc
c000d95b:	50                   	push   eax
c000d95c:	e8 12 84 01 00       	call   c0025d73 <__floatsidf>
c000d961:	83 c4 10             	add    esp,0x10
c000d964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d968:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d96c:	52                   	push   edx
c000d96d:	50                   	push   eax
c000d96e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d972:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d976:	e8 69 7d 01 00       	call   c00256e4 <__subdf3>
c000d97b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d97f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d983:	83 c4 20             	add    esp,0x20
c000d986:	6a 00                	push   0x0
c000d988:	6a 00                	push   0x0
c000d98a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d98e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d992:	e8 48 86 01 00       	call   c0025fdf <__ltdf2>
c000d997:	83 c4 10             	add    esp,0x10
c000d99a:	85 c0                	test   eax,eax
c000d99c:	79 20                	jns    c000d9be <sinc_mono_vari_process+0x69b>
c000d99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ae:	e8 e0 76 01 00       	call   c0025093 <__adddf3>
c000d9b3:	83 c4 10             	add    esp,0x10
c000d9b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9be:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9c1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9c4:	83 ec 10             	sub    esp,0x10
c000d9c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d7:	e8 08 7d 01 00       	call   c00256e4 <__subdf3>
c000d9dc:	83 c4 18             	add    esp,0x18
c000d9df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e7:	52                   	push   edx
c000d9e8:	50                   	push   eax
c000d9e9:	e8 a2 87 01 00       	call   c0026190 <lrint>
c000d9ee:	83 c4 10             	add    esp,0x10
c000d9f1:	0f af f8             	imul   edi,eax
c000d9f4:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9f7:	99                   	cdq    
c000d9f8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9fb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9fe:	e9 d2 fb ff ff       	jmp    c000d5d5 <sinc_mono_vari_process+0x2b2>
c000da03:	83 c4 4c             	add    esp,0x4c
c000da06:	89 d0                	mov    eax,edx
c000da08:	5b                   	pop    ebx
c000da09:	5e                   	pop    esi
c000da0a:	5f                   	pop    edi
c000da0b:	5d                   	pop    ebp
c000da0c:	c3                   	ret    

c000da0d <sinc_get_name>:
c000da0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da11:	31 c0                	xor    eax,eax
c000da13:	83 fa 02             	cmp    edx,0x2
c000da16:	77 07                	ja     c000da1f <sinc_get_name+0x12>
c000da18:	8b 04 95 24 79 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd86dc]
c000da1f:	c3                   	ret    

c000da20 <sinc_get_description>:
c000da20:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da24:	31 c0                	xor    eax,eax
c000da26:	83 fa 02             	cmp    edx,0x2
c000da29:	77 07                	ja     c000da32 <sinc_get_description+0x12>
c000da2b:	8b 04 95 18 79 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd86e8]
c000da32:	c3                   	ret    

c000da33 <sinc_set_converter>:
c000da33:	53                   	push   ebx
c000da34:	81 ec 58 08 00 00    	sub    esp,0x858
c000da3a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da41:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da44:	85 c0                	test   eax,eax
c000da46:	74 13                	je     c000da5b <sinc_set_converter+0x28>
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	50                   	push   eax
c000da4c:	e8 7f 1a 00 00       	call   c000f4d0 <free>
c000da51:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da58:	83 c4 10             	add    esp,0x10
c000da5b:	50                   	push   eax
c000da5c:	68 44 08 00 00       	push   0x844
c000da61:	6a 00                	push   0x0
c000da63:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da67:	50                   	push   eax
c000da68:	e8 0e 2c ff ff       	call   c000067b <memset>
c000da6d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	b8 0b 00 00 00       	mov    eax,0xb
c000da78:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da7e:	7f 6e                	jg     c000daee <sinc_set_converter+0xbb>
c000da80:	83 fa 01             	cmp    edx,0x1
c000da83:	75 10                	jne    c000da95 <sinc_set_converter+0x62>
c000da85:	c7 43 24 23 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d323
c000da8c:	c7 43 20 23 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d323
c000da93:	eb 4d                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000da95:	83 fa 02             	cmp    edx,0x2
c000da98:	75 10                	jne    c000daaa <sinc_set_converter+0x77>
c000da9a:	c7 43 24 5e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc5e
c000daa1:	c7 43 20 5e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc5e
c000daa8:	eb 38                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000daaa:	83 fa 04             	cmp    edx,0x4
c000daad:	75 10                	jne    c000dabf <sinc_set_converter+0x8c>
c000daaf:	c7 43 24 99 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c599
c000dab6:	c7 43 20 99 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c599
c000dabd:	eb 23                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000dabf:	83 fa 06             	cmp    edx,0x6
c000dac2:	75 10                	jne    c000dad4 <sinc_set_converter+0xa1>
c000dac4:	c7 43 24 d4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bed4
c000dacb:	c7 43 20 d4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bed4
c000dad2:	eb 0e                	jmp    c000dae2 <sinc_set_converter+0xaf>
c000dad4:	c7 43 24 10 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b810
c000dadb:	c7 43 20 10 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b810
c000dae2:	c7 43 28 c3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aac3
c000dae9:	b8 0a 00 00 00       	mov    eax,0xa
c000daee:	81 c4 58 08 00 00    	add    esp,0x858
c000daf4:	5b                   	pop    ebx
c000daf5:	c3                   	ret    

c000daf6 <zoh_vari_process>:
c000daf6:	55                   	push   ebp
c000daf7:	31 d2                	xor    edx,edx
c000daf9:	57                   	push   edi
c000dafa:	56                   	push   esi
c000dafb:	53                   	push   ebx
c000dafc:	83 ec 3c             	sub    esp,0x3c
c000daff:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db03:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db07:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db0b:	0f 8e 80 06 00 00    	jle    c000e191 <zoh_vari_process+0x69b>
c000db11:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db14:	ba 05 00 00 00       	mov    edx,0x5
c000db19:	85 db                	test   ebx,ebx
c000db1b:	0f 84 70 06 00 00    	je     c000e191 <zoh_vari_process+0x69b>
c000db21:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db24:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db28:	74 19                	je     c000db43 <zoh_vari_process+0x4d>
c000db2a:	31 d2                	xor    edx,edx
c000db2c:	39 c2                	cmp    edx,eax
c000db2e:	7d 0c                	jge    c000db3c <zoh_vari_process+0x46>
c000db30:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db32:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db35:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db39:	42                   	inc    edx
c000db3a:	eb f0                	jmp    c000db2c <zoh_vari_process+0x36>
c000db3c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db43:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db46:	0f af d0             	imul   edx,eax
c000db49:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db4c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db57:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db61:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db64:	8b 07                	mov    eax,DWORD PTR [edi]
c000db66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db6e:	68 00 00 70 3f       	push   0x3f700000
c000db73:	6a 00                	push   0x0
c000db75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7d:	e8 5d 84 01 00       	call   c0025fdf <__ltdf2>
c000db82:	83 c4 10             	add    esp,0x10
c000db85:	ba 16 00 00 00       	mov    edx,0x16
c000db8a:	85 c0                	test   eax,eax
c000db8c:	0f 88 ff 05 00 00    	js     c000e191 <zoh_vari_process+0x69b>
c000db92:	68 00 00 70 40       	push   0x40700000
c000db97:	6a 00                	push   0x0
c000db99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dba1:	e8 1b 84 01 00       	call   c0025fc1 <__gtdf2>
c000dba6:	83 c4 10             	add    esp,0x10
c000dba9:	ba 16 00 00 00       	mov    edx,0x16
c000dbae:	85 c0                	test   eax,eax
c000dbb0:	0f 8f db 05 00 00    	jg     c000e191 <zoh_vari_process+0x69b>
c000dbb6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbc4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbc9:	6a 00                	push   0x0
c000dbcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd3:	e8 07 84 01 00       	call   c0025fdf <__ltdf2>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	85 c0                	test   eax,eax
c000dbdd:	0f 89 da 01 00 00    	jns    c000ddbd <zoh_vari_process+0x2c7>
c000dbe3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbe6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbe9:	0f 8d ce 01 00 00    	jge    c000ddbd <zoh_vari_process+0x2c7>
c000dbef:	83 ec 0c             	sub    esp,0xc
c000dbf2:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbf5:	e8 79 81 01 00       	call   c0025d73 <__floatsidf>
c000dbfa:	83 c4 10             	add    esp,0x10
c000dbfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc14:	e8 f7 7a 01 00       	call   c0025710 <__muldf3>
c000dc19:	59                   	pop    ecx
c000dc1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc1e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc22:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc25:	e8 49 81 01 00       	call   c0025d73 <__floatsidf>
c000dc2a:	83 c4 10             	add    esp,0x10
c000dc2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc35:	52                   	push   edx
c000dc36:	50                   	push   eax
c000dc37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3f:	e8 4f 74 01 00       	call   c0025093 <__adddf3>
c000dc44:	59                   	pop    ecx
c000dc45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc49:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc4d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc50:	e8 1e 81 01 00       	call   c0025d73 <__floatsidf>
c000dc55:	83 c4 10             	add    esp,0x10
c000dc58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc60:	52                   	push   edx
c000dc61:	50                   	push   eax
c000dc62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6a:	e8 6e 83 01 00       	call   c0025fdd <__gedf2>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	85 c0                	test   eax,eax
c000dc74:	0f 89 43 01 00 00    	jns    c000ddbd <zoh_vari_process+0x2c7>
c000dc7a:	85 ed                	test   ebp,ebp
c000dc7c:	0f 8e ec 00 00 00    	jle    c000dd6e <zoh_vari_process+0x278>
c000dc82:	83 ec 10             	sub    esp,0x10
c000dc85:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc88:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc8b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc8e:	ff 37                	push   DWORD PTR [edi]
c000dc90:	e8 4f 7a 01 00       	call   c00256e4 <__subdf3>
c000dc95:	83 c4 18             	add    esp,0x18
c000dc98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dca0:	52                   	push   edx
c000dca1:	50                   	push   eax
c000dca2:	e8 c9 84 01 00       	call   c0026170 <fabs>
c000dca7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcaf:	83 c4 10             	add    esp,0x10
c000dcb2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcb7:	68 23 42 92 0c       	push   0xc924223
c000dcbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc4:	e8 f8 82 01 00       	call   c0025fc1 <__gtdf2>
c000dcc9:	83 c4 10             	add    esp,0x10
c000dccc:	85 c0                	test   eax,eax
c000dcce:	0f 8e 9a 00 00 00    	jle    c000dd6e <zoh_vari_process+0x278>
c000dcd4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dcd6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dcd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dce0:	52                   	push   edx
c000dce1:	50                   	push   eax
c000dce2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dce5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dce8:	e8 f7 79 01 00       	call   c00256e4 <__subdf3>
c000dced:	59                   	pop    ecx
c000dcee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcf6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcf9:	e8 75 80 01 00       	call   c0025d73 <__floatsidf>
c000dcfe:	83 c4 10             	add    esp,0x10
c000dd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd09:	52                   	push   edx
c000dd0a:	50                   	push   eax
c000dd0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd13:	e8 f8 79 01 00       	call   c0025710 <__muldf3>
c000dd18:	5d                   	pop    ebp
c000dd19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd1d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd21:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd24:	e8 4a 80 01 00       	call   c0025d73 <__floatsidf>
c000dd29:	83 c4 10             	add    esp,0x10
c000dd2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd30:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd34:	52                   	push   edx
c000dd35:	50                   	push   eax
c000dd36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3e:	e8 b1 7c 01 00       	call   c00259f4 <__divdf3>
c000dd43:	83 c4 10             	add    esp,0x10
c000dd46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd4e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd52:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5e:	e8 30 73 01 00       	call   c0025093 <__adddf3>
c000dd63:	83 c4 10             	add    esp,0x10
c000dd66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd6e:	31 c0                	xor    eax,eax
c000dd70:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd73:	7e 13                	jle    c000dd88 <zoh_vari_process+0x292>
c000dd75:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd79:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd7f:	40                   	inc    eax
c000dd80:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd83:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd86:	eb e8                	jmp    c000dd70 <zoh_vari_process+0x27a>
c000dd88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd90:	68 00 00 f0 3f       	push   0x3ff00000
c000dd95:	6a 00                	push   0x0
c000dd97:	e8 58 7c 01 00       	call   c00259f4 <__divdf3>
c000dd9c:	83 c4 10             	add    esp,0x10
c000dd9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dda6:	52                   	push   edx
c000dda7:	50                   	push   eax
c000dda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb0:	e8 de 72 01 00       	call   c0025093 <__adddf3>
c000ddb5:	83 c4 10             	add    esp,0x10
c000ddb8:	e9 ff fd ff ff       	jmp    c000dbbc <zoh_vari_process+0xc6>
c000ddbd:	55                   	push   ebp
c000ddbe:	55                   	push   ebp
c000ddbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc7:	e8 c4 83 01 00       	call   c0026190 <lrint>
c000ddcc:	83 ec 0c             	sub    esp,0xc
c000ddcf:	50                   	push   eax
c000ddd0:	e8 9e 7f 01 00       	call   c0025d73 <__floatsidf>
c000ddd5:	83 c4 10             	add    esp,0x10
c000ddd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dddc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dde0:	52                   	push   edx
c000dde1:	50                   	push   eax
c000dde2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dde6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddea:	e8 f5 78 01 00       	call   c00256e4 <__subdf3>
c000ddef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ddf3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ddf7:	83 c4 20             	add    esp,0x20
c000ddfa:	6a 00                	push   0x0
c000ddfc:	6a 00                	push   0x0
c000ddfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de06:	e8 d4 81 01 00       	call   c0025fdf <__ltdf2>
c000de0b:	83 c4 10             	add    esp,0x10
c000de0e:	85 c0                	test   eax,eax
c000de10:	79 1e                	jns    c000de30 <zoh_vari_process+0x33a>
c000de12:	68 00 00 f0 3f       	push   0x3ff00000
c000de17:	6a 00                	push   0x0
c000de19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de21:	e8 6d 72 01 00       	call   c0025093 <__adddf3>
c000de26:	83 c4 10             	add    esp,0x10
c000de29:	89 04 24             	mov    DWORD PTR [esp],eax
c000de2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de30:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de33:	83 ec 10             	sub    esp,0x10
c000de36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de46:	e8 99 78 01 00       	call   c00256e4 <__subdf3>
c000de4b:	83 c4 18             	add    esp,0x18
c000de4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de56:	52                   	push   edx
c000de57:	50                   	push   eax
c000de58:	e8 33 83 01 00       	call   c0026190 <lrint>
c000de5d:	83 c4 10             	add    esp,0x10
c000de60:	0f af e8             	imul   ebp,eax
c000de63:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de66:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de69:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de70:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de77:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de7a:	0f 8d 7a 02 00 00    	jge    c000e0fa <zoh_vari_process+0x604>
c000de80:	83 ec 0c             	sub    esp,0xc
c000de83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de86:	e8 e8 7e 01 00       	call   c0025d73 <__floatsidf>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de92:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de96:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea6:	e8 65 78 01 00       	call   c0025710 <__muldf3>
c000deab:	59                   	pop    ecx
c000deac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000deb0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000deb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb8:	e8 b6 7e 01 00       	call   c0025d73 <__floatsidf>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dec4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dec8:	52                   	push   edx
c000dec9:	50                   	push   eax
c000deca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dece:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded2:	e8 bc 71 01 00       	call   c0025093 <__adddf3>
c000ded7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dede:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dee2:	e8 8c 7e 01 00       	call   c0025d73 <__floatsidf>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000deee:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000def2:	52                   	push   edx
c000def3:	50                   	push   eax
c000def4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000def8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defc:	e8 e0 80 01 00       	call   c0025fe1 <__ledf2>
c000df01:	83 c4 10             	add    esp,0x10
c000df04:	85 c0                	test   eax,eax
c000df06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df0a:	0f 8f ea 01 00 00    	jg     c000e0fa <zoh_vari_process+0x604>
c000df10:	85 c9                	test   ecx,ecx
c000df12:	0f 8e ed 00 00 00    	jle    c000e005 <zoh_vari_process+0x50f>
c000df18:	83 ec 10             	sub    esp,0x10
c000df1b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df1e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df21:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df24:	ff 37                	push   DWORD PTR [edi]
c000df26:	e8 b9 77 01 00       	call   c00256e4 <__subdf3>
c000df2b:	83 c4 18             	add    esp,0x18
c000df2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df36:	52                   	push   edx
c000df37:	50                   	push   eax
c000df38:	e8 33 82 01 00       	call   c0026170 <fabs>
c000df3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df45:	83 c4 10             	add    esp,0x10
c000df48:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df4d:	68 23 42 92 0c       	push   0xc924223
c000df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5a:	e8 62 80 01 00       	call   c0025fc1 <__gtdf2>
c000df5f:	83 c4 10             	add    esp,0x10
c000df62:	85 c0                	test   eax,eax
c000df64:	0f 8e 9b 00 00 00    	jle    c000e005 <zoh_vari_process+0x50f>
c000df6a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df6c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df77:	52                   	push   edx
c000df78:	50                   	push   eax
c000df79:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df7c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df7f:	e8 60 77 01 00       	call   c00256e4 <__subdf3>
c000df84:	5d                   	pop    ebp
c000df85:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df89:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df8d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df90:	e8 de 7d 01 00       	call   c0025d73 <__floatsidf>
c000df95:	83 c4 10             	add    esp,0x10
c000df98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfa0:	52                   	push   edx
c000dfa1:	50                   	push   eax
c000dfa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfaa:	e8 61 77 01 00       	call   c0025710 <__muldf3>
c000dfaf:	59                   	pop    ecx
c000dfb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfb4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfb8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfbb:	e8 b3 7d 01 00       	call   c0025d73 <__floatsidf>
c000dfc0:	83 c4 10             	add    esp,0x10
c000dfc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfcb:	52                   	push   edx
c000dfcc:	50                   	push   eax
c000dfcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd5:	e8 1a 7a 01 00       	call   c00259f4 <__divdf3>
c000dfda:	83 c4 10             	add    esp,0x10
c000dfdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfe1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfe5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfe9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff5:	e8 99 70 01 00       	call   c0025093 <__adddf3>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e001:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e005:	31 d2                	xor    edx,edx
c000e007:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e00a:	39 d0                	cmp    eax,edx
c000e00c:	7e 1d                	jle    c000e02b <zoh_vari_process+0x535>
c000e00e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e011:	29 c1                	sub    ecx,eax
c000e013:	89 c8                	mov    eax,ecx
c000e015:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e017:	01 d0                	add    eax,edx
c000e019:	42                   	inc    edx
c000e01a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e01d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e020:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e023:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e026:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e029:	eb dc                	jmp    c000e007 <zoh_vari_process+0x511>
c000e02b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e033:	68 00 00 f0 3f       	push   0x3ff00000
c000e038:	6a 00                	push   0x0
c000e03a:	e8 b5 79 01 00       	call   c00259f4 <__divdf3>
c000e03f:	83 c4 10             	add    esp,0x10
c000e042:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e046:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e04a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e04e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e052:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05a:	e8 34 70 01 00       	call   c0025093 <__adddf3>
c000e05f:	5d                   	pop    ebp
c000e060:	59                   	pop    ecx
c000e061:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e071:	e8 1a 81 01 00       	call   c0026190 <lrint>
c000e076:	83 ec 0c             	sub    esp,0xc
c000e079:	50                   	push   eax
c000e07a:	e8 f4 7c 01 00       	call   c0025d73 <__floatsidf>
c000e07f:	83 c4 10             	add    esp,0x10
c000e082:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e086:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e08a:	52                   	push   edx
c000e08b:	50                   	push   eax
c000e08c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e090:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e094:	e8 4b 76 01 00       	call   c00256e4 <__subdf3>
c000e099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e09d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0a1:	83 c4 20             	add    esp,0x20
c000e0a4:	6a 00                	push   0x0
c000e0a6:	6a 00                	push   0x0
c000e0a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0b0:	e8 2a 7f 01 00       	call   c0025fdf <__ltdf2>
c000e0b5:	83 c4 10             	add    esp,0x10
c000e0b8:	85 c0                	test   eax,eax
c000e0ba:	79 1e                	jns    c000e0da <zoh_vari_process+0x5e4>
c000e0bc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0c1:	6a 00                	push   0x0
c000e0c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0cb:	e8 c3 6f 01 00       	call   c0025093 <__adddf3>
c000e0d0:	83 c4 10             	add    esp,0x10
c000e0d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0da:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0dd:	83 ec 10             	sub    esp,0x10
c000e0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f0:	e8 ef 75 01 00       	call   c00256e4 <__subdf3>
c000e0f5:	e9 51 fd ff ff       	jmp    c000de4b <zoh_vari_process+0x355>
c000e0fa:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e0fe:	7d 3a                	jge    c000e13a <zoh_vari_process+0x644>
c000e100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	29 e8                	sub    eax,ebp
c000e109:	99                   	cdq    
c000e10a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e10d:	50                   	push   eax
c000e10e:	e8 60 7c 01 00       	call   c0025d73 <__floatsidf>
c000e113:	83 c4 10             	add    esp,0x10
c000e116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e11a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e11e:	52                   	push   edx
c000e11f:	50                   	push   eax
c000e120:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e124:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e128:	e8 66 6f 01 00       	call   c0025093 <__adddf3>
c000e12d:	83 c4 10             	add    esp,0x10
c000e130:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e133:	89 04 24             	mov    DWORD PTR [esp],eax
c000e136:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e13d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e141:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e144:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e147:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e14a:	85 c0                	test   eax,eax
c000e14c:	7f 25                	jg     c000e173 <zoh_vari_process+0x67d>
c000e14e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e152:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e156:	89 07                	mov    DWORD PTR [edi],eax
c000e158:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e15b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15e:	99                   	cdq    
c000e15f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e162:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e165:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e168:	99                   	cdq    
c000e169:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e16c:	31 d2                	xor    edx,edx
c000e16e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e171:	eb 1e                	jmp    c000e191 <zoh_vari_process+0x69b>
c000e173:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e176:	31 d2                	xor    edx,edx
c000e178:	29 c8                	sub    eax,ecx
c000e17a:	c1 e0 02             	shl    eax,0x2
c000e17d:	39 d1                	cmp    ecx,edx
c000e17f:	7e cd                	jle    c000e14e <zoh_vari_process+0x658>
c000e181:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e183:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e187:	83 c0 04             	add    eax,0x4
c000e18a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e18e:	42                   	inc    edx
c000e18f:	eb ec                	jmp    c000e17d <zoh_vari_process+0x687>
c000e191:	83 c4 3c             	add    esp,0x3c
c000e194:	89 d0                	mov    eax,edx
c000e196:	5b                   	pop    ebx
c000e197:	5e                   	pop    esi
c000e198:	5f                   	pop    edi
c000e199:	5d                   	pop    ebp
c000e19a:	c3                   	ret    

c000e19b <zoh_reset>:
c000e19b:	83 ec 0c             	sub    esp,0xc
c000e19e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1a2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1a5:	85 c0                	test   eax,eax
c000e1a7:	74 20                	je     c000e1c9 <zoh_reset+0x2e>
c000e1a9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1ac:	83 c0 1c             	add    eax,0x1c
c000e1af:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1b2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1b9:	c1 e2 02             	shl    edx,0x2
c000e1bc:	51                   	push   ecx
c000e1bd:	52                   	push   edx
c000e1be:	6a 00                	push   0x0
c000e1c0:	50                   	push   eax
c000e1c1:	e8 b5 24 ff ff       	call   c000067b <memset>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	83 c4 0c             	add    esp,0xc
c000e1cc:	c3                   	ret    

c000e1cd <zoh_get_name>:
c000e1cd:	31 c0                	xor    eax,eax
c000e1cf:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1d4:	75 05                	jne    c000e1db <zoh_get_name+0xe>
c000e1d6:	b8 3e 7a 02 c0       	mov    eax,0xc0027a3e
c000e1db:	c3                   	ret    

c000e1dc <zoh_get_description>:
c000e1dc:	31 c0                	xor    eax,eax
c000e1de:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e3:	75 05                	jne    c000e1ea <zoh_get_description+0xe>
c000e1e5:	b8 4f 7a 02 c0       	mov    eax,0xc0027a4f
c000e1ea:	c3                   	ret    

c000e1eb <zoh_set_converter>:
c000e1eb:	53                   	push   ebx
c000e1ec:	b8 0a 00 00 00       	mov    eax,0xa
c000e1f1:	83 ec 08             	sub    esp,0x8
c000e1f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1f8:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e1fd:	75 6e                	jne    c000e26d <zoh_set_converter+0x82>
c000e1ff:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e202:	85 c0                	test   eax,eax
c000e204:	74 13                	je     c000e219 <zoh_set_converter+0x2e>
c000e206:	83 ec 0c             	sub    esp,0xc
c000e209:	50                   	push   eax
c000e20a:	e8 c1 12 00 00       	call   c000f4d0 <free>
c000e20f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e216:	83 c4 10             	add    esp,0x10
c000e219:	50                   	push   eax
c000e21a:	50                   	push   eax
c000e21b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e21e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e225:	50                   	push   eax
c000e226:	6a 01                	push   0x1
c000e228:	e8 c3 12 00 00       	call   c000f4f0 <calloc>
c000e22d:	83 c4 10             	add    esp,0x10
c000e230:	89 c2                	mov    edx,eax
c000e232:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e235:	85 d2                	test   edx,edx
c000e237:	b8 01 00 00 00       	mov    eax,0x1
c000e23c:	74 2f                	je     c000e26d <zoh_set_converter+0x82>
c000e23e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e241:	83 ec 0c             	sub    esp,0xc
c000e244:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e247:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e24d:	c7 43 24 f6 da 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000daf6
c000e254:	c7 43 20 f6 da 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000daf6
c000e25b:	c7 43 28 9b e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e19b
c000e262:	53                   	push   ebx
c000e263:	e8 33 ff ff ff       	call   c000e19b <zoh_reset>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	31 c0                	xor    eax,eax
c000e26d:	83 c4 08             	add    esp,0x8
c000e270:	5b                   	pop    ebx
c000e271:	c3                   	ret    

c000e272 <CPU::current()>:
c000e272:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c000e277:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e27d:	90                   	nop
c000e27e:	c3                   	ret    

c000e27f <operator new(unsigned long)>:
c000e27f:	83 ec 0c             	sub    esp,0xc
c000e282:	83 ec 0c             	sub    esp,0xc
c000e285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e289:	e8 32 12 00 00       	call   c000f4c0 <malloc>
c000e28e:	83 c4 10             	add    esp,0x10
c000e291:	83 c4 0c             	add    esp,0xc
c000e294:	c3                   	ret    
c000e295:	90                   	nop

c000e296 <Computer::close(int, int, void*)>:
c000e296:	57                   	push   edi
c000e297:	56                   	push   esi
c000e298:	53                   	push   ebx
c000e299:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e29d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2a5:	83 ec 0c             	sub    esp,0xc
c000e2a8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2ae:	e8 3f 59 00 00       	call   c0013bf2 <Device::closeAll()>
c000e2b3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2be:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2c2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2ca:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d2:	5b                   	pop    ebx
c000e2d3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2d6:	5e                   	pop    esi
c000e2d7:	5f                   	pop    edi
c000e2d8:	ff e0                	jmp    eax

c000e2da <Computer::Computer()>:
c000e2da:	83 ec 0c             	sub    esp,0xc
c000e2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 86 7a 02 c0       	push   0xc0027a86
c000e2e9:	50                   	push   eax
c000e2ea:	e8 7d 59 00 00       	call   c0013c6c <Device::Device(char const*)>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	ba 50 7c 02 c0       	mov    edx,0xc0027c50
c000e2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fb:	89 10                	mov    DWORD PTR [eax],edx
c000e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e301:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e323:	83 ca 04             	or     edx,0x4
c000e326:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e330:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e336:	0f b6 d0             	movzx  edx,al
c000e339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e348:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e34e:	0f b6 d0             	movzx  edx,al
c000e351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e355:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e364:	8d 50 01             	lea    edx,[eax+0x1]
c000e367:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e36b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e371:	0f b6 d0             	movzx  edx,al
c000e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e378:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e37c:	83 e1 3f             	and    ecx,0x3f
c000e37f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e387:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e38d:	0f b6 d0             	movzx  edx,al
c000e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e394:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3a5:	0f b6 d0             	movzx  edx,al
c000e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ac:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3c8:	0f b6 d0             	movzx  edx,al
c000e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3d3:	83 e1 3f             	and    ecx,0x3f
c000e3d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3e4:	0f b6 d0             	movzx  edx,al
c000e3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3eb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3fc:	0f b6 d0             	movzx  edx,al
c000e3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e403:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e412:	8d 50 01             	lea    edx,[eax+0x1]
c000e415:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e419:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e41f:	0f b6 d0             	movzx  edx,al
c000e422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e426:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e42a:	83 e1 3f             	and    ecx,0x3f
c000e42d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e431:	90                   	nop
c000e432:	83 c4 0c             	add    esp,0xc
c000e435:	c3                   	ret    

c000e436 <Computer::setBootMessage(char const*)>:
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <Computer::start()>:
c000e438:	56                   	push   esi
c000e439:	53                   	push   ebx
c000e43a:	83 ec 10             	sub    esp,0x10
c000e43d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e441:	fb                   	sti    
c000e442:	68 3b 07 00 00       	push   0x73b
c000e447:	e8 74 10 00 00       	call   c000f4c0 <malloc>
c000e44c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e453:	89 c6                	mov    esi,eax
c000e455:	ff 35 54 cd 02 c0    	push   DWORD PTR ds:0xc002cd54
c000e45b:	68 8f 7a 02 c0       	push   0xc0027a8f
c000e460:	6a 01                	push   0x1
c000e462:	50                   	push   eax
c000e463:	e8 84 db 00 00       	call   c001bfec <Process::Process(bool, char const*, Process*, char**)>
c000e468:	83 c4 20             	add    esp,0x20
c000e46b:	68 ff 00 00 00       	push   0xff
c000e470:	6a 00                	push   0x0
c000e472:	68 55 ee 00 c0       	push   0xc000ee55
c000e477:	56                   	push   esi
c000e478:	e8 51 de 00 00       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c000e47d:	6a 7a                	push   0x7a
c000e47f:	6a 00                	push   0x0
c000e481:	68 07 cb 01 c0       	push   0xc001cb07
c000e486:	ff 35 54 cd 02 c0    	push   DWORD PTR ds:0xc002cd54
c000e48c:	e8 3d de 00 00       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c000e491:	83 c4 20             	add    esp,0x20
c000e494:	a3 08 cd 02 c0       	mov    ds:0xc002cd08,eax
c000e499:	e8 93 e9 00 00       	call   c001ce31 <Vm::initialise8086()>
c000e49e:	c6 05 4d b8 02 c0 01 	mov    BYTE PTR ds:0xc002b84d,0x1
c000e4a5:	e8 3e 45 00 00       	call   c00129e8 <initVFS()>
c000e4aa:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4b2:	6a 00                	push   0x0
c000e4b4:	6a 00                	push   0x0
c000e4b6:	6a 00                	push   0x0
c000e4b8:	50                   	push   eax
c000e4b9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4bc:	e8 f0 c4 00 00       	call   c001a9b1 <setupSystemCalls()>
c000e4c1:	e8 34 50 00 00       	call   c00134fa <loadClockSettings()>
c000e4c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4c9:	e8 f8 56 00 00       	call   c0013bc6 <Device::loadDriversForAll()>
c000e4ce:	58                   	pop    eax
c000e4cf:	8b 1d 48 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b848
c000e4d5:	5a                   	pop    edx
c000e4d6:	6a 01                	push   0x1
c000e4d8:	68 9c 7a 02 c0       	push   0xc0027a9c
c000e4dd:	e8 7f d6 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c000e4e2:	59                   	pop    ecx
c000e4e3:	5e                   	pop    esi
c000e4e4:	53                   	push   ebx
c000e4e5:	50                   	push   eax
c000e4e6:	e8 85 d8 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c000e4eb:	c7 04 24 08 8d 02 c0 	mov    DWORD PTR [esp],0xc0028d08
c000e4f2:	e8 96 41 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	83 ec 0c             	sub    esp,0xc
c000e4fd:	6a 02                	push   0x2
c000e4ff:	e8 2e e1 00 00       	call   c001c632 <blockTask(TaskState)>
c000e504:	83 c4 10             	add    esp,0x10
c000e507:	eb f1                	jmp    c000e4fa <Computer::start()+0xc2>

c000e509 <firstTask()>:
c000e509:	83 ec 18             	sub    esp,0x18
c000e50c:	ff 35 48 b8 02 c0    	push   DWORD PTR ds:0xc002b848
c000e512:	e8 21 ff ff ff       	call   c000e438 <Computer::start()>
c000e517:	90                   	nop

c000e518 <Computer::detectFeatures()>:
c000e518:	55                   	push   ebp
c000e519:	57                   	push   edi
c000e51a:	56                   	push   esi
c000e51b:	53                   	push   ebx
c000e51c:	83 ec 1c             	sub    esp,0x1c
c000e51f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e523:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e52d:	e8 67 1d ff ff       	call   c0000299 <detectCPUID>
c000e532:	85 c0                	test   eax,eax
c000e534:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e53a:	0f 95 c2             	setne  dl
c000e53d:	83 e0 fd             	and    eax,0xfffffffd
c000e540:	d1 e2                	shl    edx,1
c000e542:	09 d0                	or     eax,edx
c000e544:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e54a:	a8 02                	test   al,0x2
c000e54c:	75 46                	jne    c000e594 <Computer::detectFeatures()+0x7c>
c000e54e:	f6 05 61 b8 02 c0 04 	test   BYTE PTR ds:0xc002b861,0x4
c000e555:	74 07                	je     c000e55e <Computer::detectFeatures()+0x46>
c000e557:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e55e:	e8 73 5c 01 00       	call   c00241d6 <x87Detect>
c000e563:	83 e0 01             	and    eax,0x1
c000e566:	c1 e0 04             	shl    eax,0x4
c000e569:	88 c2                	mov    dl,al
c000e56b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e571:	83 e0 ef             	and    eax,0xffffffef
c000e574:	09 d0                	or     eax,edx
c000e576:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e57c:	a8 10                	test   al,0x10
c000e57e:	0f 85 2a 01 00 00    	jne    c000e6ae <Computer::detectFeatures()+0x196>
c000e584:	84 c0                	test   al,al
c000e586:	0f 88 45 01 00 00    	js     c000e6d1 <Computer::detectFeatures()+0x1b9>
c000e58c:	83 c4 1c             	add    esp,0x1c
c000e58f:	5b                   	pop    ebx
c000e590:	5e                   	pop    esi
c000e591:	5f                   	pop    edi
c000e592:	5d                   	pop    ebp
c000e593:	c3                   	ret    
c000e594:	83 ec 0c             	sub    esp,0xc
c000e597:	6a 20                	push   0x20
c000e599:	e8 16 9a 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e59e:	83 e0 01             	and    eax,0x1
c000e5a1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5a8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5ae:	83 e0 f7             	and    eax,0xfffffff7
c000e5b1:	09 d0                	or     eax,edx
c000e5b3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5b9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5c0:	e8 ef 99 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5c5:	83 e0 01             	and    eax,0x1
c000e5c8:	88 c2                	mov    dl,al
c000e5ca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5d0:	83 e0 fe             	and    eax,0xfffffffe
c000e5d3:	09 d0                	or     eax,edx
c000e5d5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5db:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5e2:	e8 cd 99 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5e7:	c1 e0 07             	shl    eax,0x7
c000e5ea:	88 c2                	mov    dl,al
c000e5ec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5f2:	83 e0 7f             	and    eax,0x7f
c000e5f5:	09 d0                	or     eax,edx
c000e5f7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5fd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e604:	e8 ab 99 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e609:	83 c4 10             	add    esp,0x10
c000e60c:	83 e0 01             	and    eax,0x1
c000e60f:	c1 e0 05             	shl    eax,0x5
c000e612:	88 c2                	mov    dl,al
c000e614:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e61a:	83 e0 df             	and    eax,0xffffffdf
c000e61d:	09 d0                	or     eax,edx
c000e61f:	f7 05 60 b8 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002b860,0x401
c000e629:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e62f:	0f 84 c2 00 00 00    	je     c000e6f7 <Computer::detectFeatures()+0x1df>
c000e635:	83 e0 fe             	and    eax,0xfffffffe
c000e638:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e63e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e644:	88 c2                	mov    dl,al
c000e646:	83 e2 09             	and    edx,0x9
c000e649:	fe ca                	dec    dl
c000e64b:	75 09                	jne    c000e656 <Computer::detectFeatures()+0x13e>
c000e64d:	83 e0 fe             	and    eax,0xfffffffe
c000e650:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e65d:	50                   	push   eax
c000e65e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e662:	55                   	push   ebp
c000e663:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e667:	57                   	push   edi
c000e668:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e66c:	56                   	push   esi
c000e66d:	68 00 00 00 80       	push   0x80000000
c000e672:	e8 b9 98 00 00       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e677:	83 c4 20             	add    esp,0x20
c000e67a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e681:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e685:	0f 86 c3 fe ff ff    	jbe    c000e54e <Computer::detectFeatures()+0x36>
c000e68b:	83 ec 0c             	sub    esp,0xc
c000e68e:	50                   	push   eax
c000e68f:	55                   	push   ebp
c000e690:	57                   	push   edi
c000e691:	56                   	push   esi
c000e692:	68 01 00 00 80       	push   0x80000001
c000e697:	e8 94 98 00 00       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e69c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	e9 a0 fe ff ff       	jmp    c000e54e <Computer::detectFeatures()+0x36>
c000e6ae:	e8 dd 5a 01 00       	call   c0024190 <absolutelyNoChanceInHell>
c000e6b3:	88 c2                	mov    dl,al
c000e6b5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6bb:	c1 e2 07             	shl    edx,0x7
c000e6be:	83 e0 7f             	and    eax,0x7f
c000e6c1:	09 d0                	or     eax,edx
c000e6c3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6c9:	84 c0                	test   al,al
c000e6cb:	0f 89 bb fe ff ff    	jns    c000e58c <Computer::detectFeatures()+0x74>
c000e6d1:	e8 9a 5a 01 00       	call   c0024170 <avxDetect>
c000e6d6:	83 e0 01             	and    eax,0x1
c000e6d9:	c1 e0 05             	shl    eax,0x5
c000e6dc:	88 c2                	mov    dl,al
c000e6de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6e4:	83 e0 df             	and    eax,0xffffffdf
c000e6e7:	09 d0                	or     eax,edx
c000e6e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e6ef:	83 c4 1c             	add    esp,0x1c
c000e6f2:	5b                   	pop    ebx
c000e6f3:	5e                   	pop    esi
c000e6f4:	5f                   	pop    edi
c000e6f5:	5d                   	pop    ebp
c000e6f6:	c3                   	ret    
c000e6f7:	83 ec 0c             	sub    esp,0xc
c000e6fa:	68 00 02 00 00       	push   0x200
c000e6ff:	e8 b0 98 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e704:	83 c4 10             	add    esp,0x10
c000e707:	83 e0 01             	and    eax,0x1
c000e70a:	88 c2                	mov    dl,al
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 fe             	and    eax,0xfffffffe
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	e9 1c ff ff ff       	jmp    c000e63e <Computer::detectFeatures()+0x126>

c000e722 <Computer::displayFeatures()>:
c000e722:	53                   	push   ebx
c000e723:	83 ec 14             	sub    esp,0x14
c000e726:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e72a:	68 bf 7a 02 c0       	push   0xc0027abf
c000e72f:	e8 59 3f 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e73e:	0f 85 73 02 00 00    	jne    c000e9b7 <Computer::displayFeatures()+0x295>
c000e744:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	50                   	push   eax
c000e74d:	68 d2 7a 02 c0       	push   0xc0027ad2
c000e752:	e8 36 3f 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e761:	0f 85 8c 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2d1>
c000e767:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e76c:	83 ec 08             	sub    esp,0x8
c000e76f:	50                   	push   eax
c000e770:	68 e3 7a 02 c0       	push   0xc0027ae3
c000e775:	e8 13 3f 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e77a:	83 c4 10             	add    esp,0x10
c000e77d:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e784:	0f 85 5f 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2c7>
c000e78a:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e78f:	83 ec 08             	sub    esp,0x8
c000e792:	50                   	push   eax
c000e793:	68 f4 7a 02 c0       	push   0xc0027af4
c000e798:	e8 f0 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7a7:	0f 85 32 02 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2bd>
c000e7ad:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e7b2:	83 ec 08             	sub    esp,0x8
c000e7b5:	50                   	push   eax
c000e7b6:	68 05 7b 02 c0       	push   0xc0027b05
c000e7bb:	e8 cd 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e7c0:	83 c4 10             	add    esp,0x10
c000e7c3:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7ca:	0f 85 05 02 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x2b3>
c000e7d0:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e7d5:	83 ec 08             	sub    esp,0x8
c000e7d8:	50                   	push   eax
c000e7d9:	68 16 7b 02 c0       	push   0xc0027b16
c000e7de:	e8 aa 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e7e3:	83 c4 10             	add    esp,0x10
c000e7e6:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e7ed:	0f 85 d8 01 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x2a9>
c000e7f3:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e7f8:	83 ec 08             	sub    esp,0x8
c000e7fb:	50                   	push   eax
c000e7fc:	68 27 7b 02 c0       	push   0xc0027b27
c000e801:	e8 87 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e810:	0f 85 ab 01 00 00    	jne    c000e9c1 <Computer::displayFeatures()+0x29f>
c000e816:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e81b:	83 ec 08             	sub    esp,0x8
c000e81e:	50                   	push   eax
c000e81f:	68 38 7b 02 c0       	push   0xc0027b38
c000e824:	e8 64 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e833:	0f 88 1b 02 00 00    	js     c000ea54 <Computer::displayFeatures()+0x332>
c000e839:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e83e:	83 ec 08             	sub    esp,0x8
c000e841:	50                   	push   eax
c000e842:	68 49 7b 02 c0       	push   0xc0027b49
c000e847:	e8 41 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e84c:	83 c4 10             	add    esp,0x10
c000e84f:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e856:	0f 85 a1 01 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2db>
c000e85c:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	50                   	push   eax
c000e865:	68 5a 7b 02 c0       	push   0xc0027b5a
c000e86a:	e8 1e 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e86f:	83 c4 10             	add    esp,0x10
c000e872:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e879:	0f 85 cb 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x328>
c000e87f:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e884:	83 ec 08             	sub    esp,0x8
c000e887:	50                   	push   eax
c000e888:	68 6b 7b 02 c0       	push   0xc0027b6b
c000e88d:	e8 fb 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e89c:	0f 85 9e 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x31e>
c000e8a2:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e8a7:	83 ec 08             	sub    esp,0x8
c000e8aa:	50                   	push   eax
c000e8ab:	68 7c 7b 02 c0       	push   0xc0027b7c
c000e8b0:	e8 d8 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e8b5:	83 c4 10             	add    esp,0x10
c000e8b8:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8bf:	0f 85 71 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x314>
c000e8c5:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e8ca:	83 ec 08             	sub    esp,0x8
c000e8cd:	50                   	push   eax
c000e8ce:	68 8d 7b 02 c0       	push   0xc0027b8d
c000e8d3:	e8 b5 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8e2:	0f 85 44 01 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x30a>
c000e8e8:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e8ed:	83 ec 08             	sub    esp,0x8
c000e8f0:	50                   	push   eax
c000e8f1:	68 9e 7b 02 c0       	push   0xc0027b9e
c000e8f6:	e8 92 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e8fb:	83 c4 10             	add    esp,0x10
c000e8fe:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e905:	0f 85 17 01 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x300>
c000e90b:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e910:	83 ec 08             	sub    esp,0x8
c000e913:	50                   	push   eax
c000e914:	68 af 7b 02 c0       	push   0xc0027baf
c000e919:	e8 6f 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e91e:	83 c4 10             	add    esp,0x10
c000e921:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e928:	0f 85 ea 00 00 00    	jne    c000ea18 <Computer::displayFeatures()+0x2f6>
c000e92e:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e933:	83 ec 08             	sub    esp,0x8
c000e936:	50                   	push   eax
c000e937:	68 c0 7b 02 c0       	push   0xc0027bc0
c000e93c:	e8 4c 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e94b:	0f 88 0d 01 00 00    	js     c000ea5e <Computer::displayFeatures()+0x33c>
c000e951:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e956:	83 ec 08             	sub    esp,0x8
c000e959:	50                   	push   eax
c000e95a:	68 d1 7b 02 c0       	push   0xc0027bd1
c000e95f:	e8 29 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e96e:	0f 85 9a 00 00 00    	jne    c000ea0e <Computer::displayFeatures()+0x2ec>
c000e974:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e979:	83 ec 08             	sub    esp,0x8
c000e97c:	50                   	push   eax
c000e97d:	68 e2 7b 02 c0       	push   0xc0027be2
c000e982:	e8 06 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e987:	83 c4 10             	add    esp,0x10
c000e98a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e991:	75 74                	jne    c000ea07 <Computer::displayFeatures()+0x2e5>
c000e993:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c000e998:	83 ec 08             	sub    esp,0x8
c000e99b:	50                   	push   eax
c000e99c:	68 f3 7b 02 c0       	push   0xc0027bf3
c000e9a1:	e8 e7 3c 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e9a6:	c7 44 24 20 22 93 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029322
c000e9ae:	83 c4 18             	add    esp,0x18
c000e9b1:	5b                   	pop    ebx
c000e9b2:	e9 d6 3c 00 00       	jmp    c001268d <Dbg::kprintf(char const*, ...)>
c000e9b7:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000e9bc:	e9 88 fd ff ff       	jmp    c000e749 <Computer::displayFeatures()+0x27>
c000e9c1:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000e9c6:	e9 50 fe ff ff       	jmp    c000e81b <Computer::displayFeatures()+0xf9>
c000e9cb:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000e9d0:	e9 23 fe ff ff       	jmp    c000e7f8 <Computer::displayFeatures()+0xd6>
c000e9d5:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000e9da:	e9 f6 fd ff ff       	jmp    c000e7d5 <Computer::displayFeatures()+0xb3>
c000e9df:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000e9e4:	e9 c9 fd ff ff       	jmp    c000e7b2 <Computer::displayFeatures()+0x90>
c000e9e9:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000e9ee:	e9 9c fd ff ff       	jmp    c000e78f <Computer::displayFeatures()+0x6d>
c000e9f3:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000e9f8:	e9 6f fd ff ff       	jmp    c000e76c <Computer::displayFeatures()+0x4a>
c000e9fd:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea02:	e9 5a fe ff ff       	jmp    c000e861 <Computer::displayFeatures()+0x13f>
c000ea07:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea0c:	eb 8a                	jmp    c000e998 <Computer::displayFeatures()+0x276>
c000ea0e:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea13:	e9 61 ff ff ff       	jmp    c000e979 <Computer::displayFeatures()+0x257>
c000ea18:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea1d:	e9 11 ff ff ff       	jmp    c000e933 <Computer::displayFeatures()+0x211>
c000ea22:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea27:	e9 e4 fe ff ff       	jmp    c000e910 <Computer::displayFeatures()+0x1ee>
c000ea2c:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea31:	e9 b7 fe ff ff       	jmp    c000e8ed <Computer::displayFeatures()+0x1cb>
c000ea36:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea3b:	e9 8a fe ff ff       	jmp    c000e8ca <Computer::displayFeatures()+0x1a8>
c000ea40:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea45:	e9 5d fe ff ff       	jmp    c000e8a7 <Computer::displayFeatures()+0x185>
c000ea4a:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea4f:	e9 30 fe ff ff       	jmp    c000e884 <Computer::displayFeatures()+0x162>
c000ea54:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea59:	e9 e0 fd ff ff       	jmp    c000e83e <Computer::displayFeatures()+0x11c>
c000ea5e:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c000ea63:	e9 ee fe ff ff       	jmp    c000e956 <Computer::displayFeatures()+0x234>

c000ea68 <Computer::rdmsr(unsigned int)>:
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea76:	74 0a                	je     c000ea82 <Computer::rdmsr(unsigned int)+0x1a>
c000ea78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea7c:	0f 32                	rdmsr  
c000ea7e:	83 c4 0c             	add    esp,0xc
c000ea81:	c3                   	ret    
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	68 04 7c 02 c0       	push   0xc0027c04
c000ea8a:	e8 c8 a6 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ea8f:	83 c4 10             	add    esp,0x10
c000ea92:	eb e4                	jmp    c000ea78 <Computer::rdmsr(unsigned int)+0x10>

c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ea94:	57                   	push   edi
c000ea95:	56                   	push   esi
c000ea96:	52                   	push   edx
c000ea97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ea9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eaa3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaaa:	74 0e                	je     c000eaba <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eaac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eab0:	89 f0                	mov    eax,esi
c000eab2:	89 fa                	mov    edx,edi
c000eab4:	0f 30                	wrmsr  
c000eab6:	58                   	pop    eax
c000eab7:	5e                   	pop    esi
c000eab8:	5f                   	pop    edi
c000eab9:	c3                   	ret    
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	68 0a 7c 02 c0       	push   0xc0027c0a
c000eac2:	e8 90 a6 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	eb e0                	jmp    c000eaac <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eacc <Computer::nmiEnabled()>:
c000eacc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ead0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ead6:	c3                   	ret    
c000ead7:	90                   	nop

c000ead8 <Computer::readCMOS(unsigned char)>:
c000ead8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eadc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eae3:	19 c0                	sbb    eax,eax
c000eae5:	83 e0 80             	and    eax,0xffffff80
c000eae8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eaec:	e6 70                	out    0x70,al
c000eaee:	e4 71                	in     al,0x71
c000eaf0:	c3                   	ret    
c000eaf1:	90                   	nop

c000eaf2 <Computer::enableNMI(bool)>:
c000eaf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eaf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eafa:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb00:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb08:	eb ce                	jmp    c000ead8 <Computer::readCMOS(unsigned char)>

c000eb0a <Computer::open(int, int, void*)>:
c000eb0a:	56                   	push   esi
c000eb0b:	53                   	push   ebx
c000eb0c:	83 ec 10             	sub    esp,0x10
c000eb0f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb13:	f6 05 60 b8 02 c0 04 	test   BYTE PTR ds:0xc002b860,0x4
c000eb1a:	68 68 22 00 00       	push   0x2268
c000eb1f:	0f 94 05 00 a8 02 c0 	sete   BYTE PTR ds:0xc002a800
c000eb26:	e8 95 09 00 00       	call   c000f4c0 <malloc>
c000eb2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb2e:	89 c6                	mov    esi,eax
c000eb30:	e8 8b 8a 00 00       	call   c00175c0 <ACPI::ACPI()>
c000eb35:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb3b:	58                   	pop    eax
c000eb3c:	5a                   	pop    edx
c000eb3d:	56                   	push   esi
c000eb3e:	53                   	push   ebx
c000eb3f:	e8 38 4f 00 00       	call   c0013a7c <Device::addChild(Device*)>
c000eb44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb47:	e8 cc f9 ff ff       	call   c000e518 <Computer::detectFeatures()>
c000eb4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb4f:	e8 ce fb ff ff       	call   c000e722 <Computer::displayFeatures()>
c000eb54:	59                   	pop    ecx
c000eb55:	5e                   	pop    esi
c000eb56:	6a 01                	push   0x1
c000eb58:	53                   	push   ebx
c000eb59:	e8 94 ff ff ff       	call   c000eaf2 <Computer::enableNMI(bool)>
c000eb5e:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb65:	e8 56 09 00 00       	call   c000f4c0 <malloc>
c000eb6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb6d:	89 c6                	mov    esi,eax
c000eb6f:	e8 f8 94 00 00       	call   c001806c <CPU::CPU()>
c000eb74:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb7a:	58                   	pop    eax
c000eb7b:	5a                   	pop    edx
c000eb7c:	56                   	push   esi
c000eb7d:	53                   	push   ebx
c000eb7e:	e8 f9 4e 00 00       	call   c0013a7c <Device::addChild(Device*)>
c000eb83:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb89:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb8f:	6a 00                	push   0x0
c000eb91:	6a 00                	push   0x0
c000eb93:	50                   	push   eax
c000eb94:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eb97:	83 c4 20             	add    esp,0x20
c000eb9a:	e8 4f 54 00 00       	call   c0013fee <setupFPU()>
c000eb9f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000eba5:	85 c0                	test   eax,eax
c000eba7:	74 1f                	je     c000ebc8 <Computer::open(int, int, void*)+0xbe>
c000eba9:	83 ec 08             	sub    esp,0x8
c000ebac:	50                   	push   eax
c000ebad:	53                   	push   ebx
c000ebae:	e8 c9 4e 00 00       	call   c0013a7c <Device::addChild(Device*)>
c000ebb3:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebb9:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebbb:	6a 00                	push   0x0
c000ebbd:	6a 00                	push   0x0
c000ebbf:	6a 00                	push   0x0
c000ebc1:	50                   	push   eax
c000ebc2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebc5:	83 c4 20             	add    esp,0x20
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	68 09 e5 00 c0       	push   0xc000e509
c000ebd0:	e8 f9 d7 00 00       	call   c001c3ce <setupMultitasking(void (*)())>
c000ebd5:	83 c4 14             	add    esp,0x14
c000ebd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebdd:	5b                   	pop    ebx
c000ebde:	5e                   	pop    esi
c000ebdf:	c3                   	ret    

c000ebe0 <Computer::disableNMI()>:
c000ebe0:	6a 00                	push   0x0
c000ebe2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebe6:	e8 07 ff ff ff       	call   c000eaf2 <Computer::enableNMI(bool)>
c000ebeb:	58                   	pop    eax
c000ebec:	5a                   	pop    edx
c000ebed:	c3                   	ret    

c000ebee <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ebee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebf9:	19 c0                	sbb    eax,eax
c000ebfb:	83 e0 80             	and    eax,0xffffff80
c000ebfe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec02:	e6 70                	out    0x70,al
c000ec04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec08:	e6 71                	out    0x71,al
c000ec0a:	c3                   	ret    
c000ec0b:	90                   	nop

c000ec0c <Computer::handleNMI()>:
c000ec0c:	56                   	push   esi
c000ec0d:	53                   	push   ebx
c000ec0e:	83 ec 10             	sub    esp,0x10
c000ec11:	e4 92                	in     al,0x92
c000ec13:	89 c6                	mov    esi,eax
c000ec15:	e4 61                	in     al,0x61
c000ec17:	68 10 7c 02 c0       	push   0xc0027c10
c000ec1c:	88 c3                	mov    bl,al
c000ec1e:	e8 6a 3a 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000ec23:	83 c4 10             	add    esp,0x10
c000ec26:	83 e6 10             	and    esi,0x10
c000ec29:	75 0d                	jne    c000ec38 <Computer::handleNMI()+0x2c>
c000ec2b:	f6 c3 40             	test   bl,0x40
c000ec2e:	75 1d                	jne    c000ec4d <Computer::handleNMI()+0x41>
c000ec30:	84 db                	test   bl,bl
c000ec32:	78 2d                	js     c000ec61 <Computer::handleNMI()+0x55>
c000ec34:	58                   	pop    eax
c000ec35:	5b                   	pop    ebx
c000ec36:	5e                   	pop    esi
c000ec37:	c3                   	ret    
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	68 21 7c 02 c0       	push   0xc0027c21
c000ec40:	e8 12 a5 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	f6 c3 40             	test   bl,0x40
c000ec4b:	74 e3                	je     c000ec30 <Computer::handleNMI()+0x24>
c000ec4d:	83 ec 0c             	sub    esp,0xc
c000ec50:	68 2e 7c 02 c0       	push   0xc0027c2e
c000ec55:	e8 fd a4 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ec5a:	83 c4 10             	add    esp,0x10
c000ec5d:	84 db                	test   bl,bl
c000ec5f:	79 d3                	jns    c000ec34 <Computer::handleNMI()+0x28>
c000ec61:	c7 44 24 10 38 7c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027c38
c000ec69:	5a                   	pop    edx
c000ec6a:	5b                   	pop    ebx
c000ec6b:	5e                   	pop    esi
c000ec6c:	e9 e6 a4 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c000ec71:	90                   	nop

c000ec72 <Computer::setDiskActivityLight(int, bool)>:
c000ec72:	56                   	push   esi
c000ec73:	53                   	push   ebx
c000ec74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec78:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec7d:	77 1b                	ja     c000ec9a <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec7f:	e4 92                	in     al,0x92
c000ec81:	bb 40 00 00 00       	mov    ebx,0x40
c000ec86:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec8a:	89 da                	mov    edx,ebx
c000ec8c:	d3 e2                	shl    edx,cl
c000ec8e:	89 f1                	mov    ecx,esi
c000ec90:	f7 d2                	not    edx
c000ec92:	d3 e3                	shl    ebx,cl
c000ec94:	21 d0                	and    eax,edx
c000ec96:	09 d8                	or     eax,ebx
c000ec98:	e6 92                	out    0x92,al
c000ec9a:	5b                   	pop    ebx
c000ec9b:	5e                   	pop    esi
c000ec9c:	c3                   	ret    
c000ec9d:	90                   	nop

c000ec9e <GDTEntry::setBase(unsigned int)>:
c000ec9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eca2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eca6:	89 c1                	mov    ecx,eax
c000eca8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecac:	c1 e9 10             	shr    ecx,0x10
c000ecaf:	c1 e8 18             	shr    eax,0x18
c000ecb2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecb5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecb8:	c3                   	ret    
c000ecb9:	90                   	nop

c000ecba <GDTEntry::setLimit(unsigned int)>:
c000ecba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecc5:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecc8:	83 e2 f0             	and    edx,0xfffffff0
c000eccb:	c1 e8 10             	shr    eax,0x10
c000ecce:	83 e0 0f             	and    eax,0xf
c000ecd1:	09 d0                	or     eax,edx
c000ecd3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecd6:	c3                   	ret    
c000ecd7:	90                   	nop

c000ecd8 <GDT::GDT()>:
c000ecd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecec:	90                   	nop
c000eced:	c3                   	ret    

c000ecee <GDT::addEntry(GDTEntry)>:
c000ecee:	53                   	push   ebx
c000ecef:	83 ec 0c             	sub    esp,0xc
c000ecf2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ecf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ecf8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ecff:	52                   	push   edx
c000ed00:	50                   	push   eax
c000ed01:	68 74 7c 02 c0       	push   0xc0027c74
c000ed06:	e8 82 39 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000ed0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed11:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed15:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed19:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed1d:	8d 50 01             	lea    edx,[eax+0x1]
c000ed20:	c1 e0 03             	shl    eax,0x3
c000ed23:	89 13                	mov    DWORD PTR [ebx],edx
c000ed25:	83 c4 18             	add    esp,0x18
c000ed28:	5b                   	pop    ebx
c000ed29:	c3                   	ret    

c000ed2a <GDT::getNumberOfEntries()>:
c000ed2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed30:	c3                   	ret    
c000ed31:	90                   	nop

c000ed32 <GDT::flush()>:
c000ed32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed36:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed38:	83 c0 04             	add    eax,0x4
c000ed3b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed42:	a3 52 b8 02 c0       	mov    ds:0xc002b852,eax
c000ed47:	66 89 15 50 b8 02 c0 	mov    WORD PTR ds:0xc002b850,dx
c000ed4e:	e9 aa 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed53:	90                   	nop

c000ed54 <GDT::setup()>:
c000ed54:	55                   	push   ebp
c000ed55:	57                   	push   edi
c000ed56:	56                   	push   esi
c000ed57:	53                   	push   ebx
c000ed58:	83 ec 3c             	sub    esp,0x3c
c000ed5b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed5f:	6a 00                	push   0x0
c000ed61:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed65:	53                   	push   ebx
c000ed66:	e8 33 ff ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000ed6b:	6a 00                	push   0x0
c000ed6d:	53                   	push   ebx
c000ed6e:	e8 47 ff ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000ed73:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed7b:	6a 00                	push   0x0
c000ed7d:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed81:	53                   	push   ebx
c000ed82:	e8 17 ff ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000ed87:	68 ff ff ff 00       	push   0xffffff
c000ed8c:	53                   	push   ebx
c000ed8d:	e8 28 ff ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000ed92:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed96:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ed9b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eda0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eda4:	83 c4 20             	add    esp,0x20
c000eda7:	6a 00                	push   0x0
c000eda9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edad:	53                   	push   ebx
c000edae:	e8 eb fe ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000edb3:	68 ff ff ff 00       	push   0xffffff
c000edb8:	53                   	push   ebx
c000edb9:	e8 fc fe ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000edbe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edc2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edc6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edca:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000edce:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edd2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edd7:	0d 00 92 c0 00       	or     eax,0xc09200
c000eddc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ede0:	89 d8                	mov    eax,ebx
c000ede2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ede6:	80 cc 60             	or     ah,0x60
c000ede9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eded:	83 c4 0c             	add    esp,0xc
c000edf0:	89 f8                	mov    eax,edi
c000edf2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edf6:	80 cc 60             	or     ah,0x60
c000edf9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edfd:	89 c7                	mov    edi,eax
c000edff:	55                   	push   ebp
c000ee00:	e8 e9 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee05:	83 c4 0c             	add    esp,0xc
c000ee08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee10:	55                   	push   ebp
c000ee11:	e8 d8 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee16:	83 c4 0c             	add    esp,0xc
c000ee19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee21:	55                   	push   ebp
c000ee22:	e8 c7 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee27:	83 c4 0c             	add    esp,0xc
c000ee2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee32:	53                   	push   ebx
c000ee33:	51                   	push   ecx
c000ee34:	55                   	push   ebp
c000ee35:	e8 b4 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee3a:	83 c4 0c             	add    esp,0xc
c000ee3d:	57                   	push   edi
c000ee3e:	56                   	push   esi
c000ee3f:	55                   	push   ebp
c000ee40:	e8 a9 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee48:	e8 e5 fe ff ff       	call   c000ed32 <GDT::flush()>
c000ee4d:	83 c4 4c             	add    esp,0x4c
c000ee50:	5b                   	pop    ebx
c000ee51:	5e                   	pop    esi
c000ee52:	5f                   	pop    edi
c000ee53:	5d                   	pop    ebp
c000ee54:	c3                   	ret    

c000ee55 <idleFunction(void*)>:
c000ee55:	53                   	push   ebx
c000ee56:	83 ec 08             	sub    esp,0x8
c000ee59:	e8 41 d3 00 00       	call   c001c19f <unlockScheduler()>
c000ee5e:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c000ee63:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee69:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee70:	74 3c                	je     c000eeae <idleFunction(void*)+0x59>
c000ee72:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee79:	74 33                	je     c000eeae <idleFunction(void*)+0x59>
c000ee7b:	31 db                	xor    ebx,ebx
c000ee7d:	52                   	push   edx
c000ee7e:	52                   	push   edx
c000ee7f:	68 e1 00 00 00       	push   0xe1
c000ee84:	50                   	push   eax
c000ee85:	e8 de fb ff ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c000ee8a:	53                   	push   ebx
c000ee8b:	83 e0 02             	and    eax,0x2
c000ee8e:	50                   	push   eax
c000ee8f:	68 e1 00 00 00       	push   0xe1
c000ee94:	ff 35 48 b8 02 c0    	push   DWORD PTR ds:0xc002b848
c000ee9a:	e8 f5 fb ff ff       	call   c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ee9f:	83 c4 20             	add    esp,0x20
c000eea2:	e8 8d 13 ff ff       	call   c0000234 <doTPAUSE>
c000eea7:	e8 64 73 01 00       	call   c0026210 <idleCommon()>
c000eeac:	eb f4                	jmp    c000eea2 <idleFunction(void*)+0x4d>
c000eeae:	fb                   	sti    
c000eeaf:	f4                   	hlt    
c000eeb0:	e8 5b 73 01 00       	call   c0026210 <idleCommon()>
c000eeb5:	eb f7                	jmp    c000eeae <idleFunction(void*)+0x59>
c000eeb7:	90                   	nop

c000eeb8 <IDTEntry::IDTEntry(bool)>:
c000eeb8:	83 ec 04             	sub    esp,0x4
c000eebb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebf:	88 04 24             	mov    BYTE PTR [esp],al
c000eec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eec6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eed4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eedb:	83 e2 f0             	and    edx,0xfffffff0
c000eede:	83 ca 0e             	or     edx,0xe
c000eee1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeeb:	83 e2 ef             	and    edx,0xffffffef
c000eeee:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eef5:	74 04                	je     c000eefb <IDTEntry::IDTEntry(bool)+0x43>
c000eef7:	b2 03                	mov    dl,0x3
c000eef9:	eb 02                	jmp    c000eefd <IDTEntry::IDTEntry(bool)+0x45>
c000eefb:	b2 00                	mov    dl,0x0
c000eefd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef01:	83 e2 03             	and    edx,0x3
c000ef04:	88 d1                	mov    cl,dl
c000ef06:	c1 e1 05             	shl    ecx,0x5
c000ef09:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef0c:	83 e2 9f             	and    edx,0xffffff9f
c000ef0f:	09 ca                	or     edx,ecx
c000ef11:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef18:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1b:	83 ca 80             	or     edx,0xffffff80
c000ef1e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef21:	90                   	nop
c000ef22:	83 c4 04             	add    esp,0x4
c000ef25:	c3                   	ret    

c000ef26 <IDTEntry::setOffset(unsigned int)>:
c000ef26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef31:	c1 e8 10             	shr    eax,0x10
c000ef34:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef38:	c3                   	ret    
c000ef39:	90                   	nop

c000ef3a <IDT::IDT()>:
c000ef3a:	90                   	nop
c000ef3b:	c3                   	ret    

c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef40:	83 c0 30             	add    eax,0x30
c000ef43:	c3                   	ret    

c000ef44 <IDT::addEntry(IDTEntry, int)>:
c000ef44:	53                   	push   ebx
c000ef45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef55:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef58:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef5c:	5b                   	pop    ebx
c000ef5d:	c3                   	ret    

c000ef5e <IDT::addEntry(int, void (*)(), bool)>:
c000ef5e:	53                   	push   ebx
c000ef5f:	83 ec 10             	sub    esp,0x10
c000ef62:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef67:	50                   	push   eax
c000ef68:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef6c:	53                   	push   ebx
c000ef6d:	e8 46 ff ff ff       	call   c000eeb8 <IDTEntry::IDTEntry(bool)>
c000ef72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef76:	53                   	push   ebx
c000ef77:	e8 aa ff ff ff       	call   c000ef26 <IDTEntry::setOffset(unsigned int)>
c000ef7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef8c:	e8 b3 ff ff ff       	call   c000ef44 <IDT::addEntry(IDTEntry, int)>
c000ef91:	83 c4 30             	add    esp,0x30
c000ef94:	5b                   	pop    ebx
c000ef95:	c3                   	ret    

c000ef96 <IDT::flush()>:
c000ef96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef9a:	66 c7 05 58 b8 02 c0 ff 07 	mov    WORD PTR ds:0xc002b858,0x7ff
c000efa3:	a3 5a b8 02 c0       	mov    ds:0xc002b85a,eax
c000efa8:	0f 01 1d 58 b8 02 c0 	lidtd  ds:0xc002b858
c000efaf:	c3                   	ret    

c000efb0 <IDT::setup()>:
c000efb0:	57                   	push   edi
c000efb1:	56                   	push   esi
c000efb2:	53                   	push   ebx
c000efb3:	83 ec 10             	sub    esp,0x10
c000efb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efba:	6a 00                	push   0x0
c000efbc:	68 1d 04 00 c0       	push   0xc000041d
c000efc1:	6a 00                	push   0x0
c000efc3:	53                   	push   ebx
c000efc4:	e8 95 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efc9:	6a 00                	push   0x0
c000efcb:	68 2d 04 00 c0       	push   0xc000042d
c000efd0:	6a 01                	push   0x1
c000efd2:	53                   	push   ebx
c000efd3:	e8 86 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efd8:	83 c4 20             	add    esp,0x20
c000efdb:	6a 00                	push   0x0
c000efdd:	68 37 04 00 c0       	push   0xc0000437
c000efe2:	6a 02                	push   0x2
c000efe4:	53                   	push   ebx
c000efe5:	e8 74 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efea:	6a 00                	push   0x0
c000efec:	68 41 04 00 c0       	push   0xc0000441
c000eff1:	6a 03                	push   0x3
c000eff3:	53                   	push   ebx
c000eff4:	e8 65 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000eff9:	83 c4 20             	add    esp,0x20
c000effc:	6a 00                	push   0x0
c000effe:	68 4b 04 00 c0       	push   0xc000044b
c000f003:	6a 04                	push   0x4
c000f005:	53                   	push   ebx
c000f006:	e8 53 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f00b:	6a 00                	push   0x0
c000f00d:	68 55 04 00 c0       	push   0xc0000455
c000f012:	6a 05                	push   0x5
c000f014:	53                   	push   ebx
c000f015:	e8 44 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f01a:	83 c4 20             	add    esp,0x20
c000f01d:	6a 00                	push   0x0
c000f01f:	68 5f 04 00 c0       	push   0xc000045f
c000f024:	6a 06                	push   0x6
c000f026:	53                   	push   ebx
c000f027:	e8 32 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f02c:	6a 00                	push   0x0
c000f02e:	68 69 04 00 c0       	push   0xc0000469
c000f033:	6a 07                	push   0x7
c000f035:	53                   	push   ebx
c000f036:	e8 23 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f03b:	83 c4 20             	add    esp,0x20
c000f03e:	6a 00                	push   0x0
c000f040:	68 73 04 00 c0       	push   0xc0000473
c000f045:	6a 08                	push   0x8
c000f047:	53                   	push   ebx
c000f048:	e8 11 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f04d:	6a 00                	push   0x0
c000f04f:	68 7b 04 00 c0       	push   0xc000047b
c000f054:	6a 09                	push   0x9
c000f056:	53                   	push   ebx
c000f057:	e8 02 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f05c:	83 c4 20             	add    esp,0x20
c000f05f:	6a 00                	push   0x0
c000f061:	68 85 04 00 c0       	push   0xc0000485
c000f066:	6a 0a                	push   0xa
c000f068:	53                   	push   ebx
c000f069:	e8 f0 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f06e:	6a 00                	push   0x0
c000f070:	68 8d 04 00 c0       	push   0xc000048d
c000f075:	6a 0b                	push   0xb
c000f077:	53                   	push   ebx
c000f078:	e8 e1 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f07d:	83 c4 20             	add    esp,0x20
c000f080:	6a 00                	push   0x0
c000f082:	68 95 04 00 c0       	push   0xc0000495
c000f087:	6a 0c                	push   0xc
c000f089:	53                   	push   ebx
c000f08a:	e8 cf fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f08f:	6a 00                	push   0x0
c000f091:	68 9d 04 00 c0       	push   0xc000049d
c000f096:	6a 0d                	push   0xd
c000f098:	53                   	push   ebx
c000f099:	e8 c0 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f09e:	83 c4 20             	add    esp,0x20
c000f0a1:	6a 00                	push   0x0
c000f0a3:	68 a5 04 00 c0       	push   0xc00004a5
c000f0a8:	6a 0e                	push   0xe
c000f0aa:	53                   	push   ebx
c000f0ab:	e8 ae fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0b0:	6a 00                	push   0x0
c000f0b2:	68 ad 04 00 c0       	push   0xc00004ad
c000f0b7:	6a 0f                	push   0xf
c000f0b9:	53                   	push   ebx
c000f0ba:	e8 9f fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0bf:	83 c4 20             	add    esp,0x20
c000f0c2:	6a 00                	push   0x0
c000f0c4:	68 b7 04 00 c0       	push   0xc00004b7
c000f0c9:	6a 10                	push   0x10
c000f0cb:	53                   	push   ebx
c000f0cc:	e8 8d fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0d1:	6a 00                	push   0x0
c000f0d3:	68 c1 04 00 c0       	push   0xc00004c1
c000f0d8:	6a 11                	push   0x11
c000f0da:	53                   	push   ebx
c000f0db:	e8 7e fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0e0:	83 c4 20             	add    esp,0x20
c000f0e3:	6a 00                	push   0x0
c000f0e5:	68 cb 04 00 c0       	push   0xc00004cb
c000f0ea:	6a 12                	push   0x12
c000f0ec:	53                   	push   ebx
c000f0ed:	e8 6c fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0f2:	6a 01                	push   0x1
c000f0f4:	68 65 05 00 c0       	push   0xc0000565
c000f0f9:	6a 60                	push   0x60
c000f0fb:	53                   	push   ebx
c000f0fc:	e8 5d fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f101:	83 c4 20             	add    esp,0x20
c000f104:	6a 00                	push   0x0
c000f106:	68 6c 05 00 c0       	push   0xc000056c
c000f10b:	6a 20                	push   0x20
c000f10d:	53                   	push   ebx
c000f10e:	e8 4b fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f113:	6a 00                	push   0x0
c000f115:	68 57 05 00 c0       	push   0xc0000557
c000f11a:	6a 21                	push   0x21
c000f11c:	53                   	push   ebx
c000f11d:	e8 3c fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f122:	83 c4 20             	add    esp,0x20
c000f125:	6a 00                	push   0x0
c000f127:	68 5e 05 00 c0       	push   0xc000055e
c000f12c:	6a 22                	push   0x22
c000f12e:	53                   	push   ebx
c000f12f:	e8 2a fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f134:	6a 00                	push   0x0
c000f136:	68 d5 04 00 c0       	push   0xc00004d5
c000f13b:	6a 23                	push   0x23
c000f13d:	53                   	push   ebx
c000f13e:	e8 1b fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f143:	83 c4 20             	add    esp,0x20
c000f146:	6a 00                	push   0x0
c000f148:	68 df 04 00 c0       	push   0xc00004df
c000f14d:	6a 24                	push   0x24
c000f14f:	53                   	push   ebx
c000f150:	e8 09 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f155:	6a 00                	push   0x0
c000f157:	68 e9 04 00 c0       	push   0xc00004e9
c000f15c:	6a 25                	push   0x25
c000f15e:	53                   	push   ebx
c000f15f:	e8 fa fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f164:	83 c4 20             	add    esp,0x20
c000f167:	6a 00                	push   0x0
c000f169:	68 f3 04 00 c0       	push   0xc00004f3
c000f16e:	6a 26                	push   0x26
c000f170:	53                   	push   ebx
c000f171:	e8 e8 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f176:	6a 00                	push   0x0
c000f178:	68 fd 04 00 c0       	push   0xc00004fd
c000f17d:	6a 27                	push   0x27
c000f17f:	53                   	push   ebx
c000f180:	e8 d9 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f185:	83 c4 20             	add    esp,0x20
c000f188:	6a 00                	push   0x0
c000f18a:	68 07 05 00 c0       	push   0xc0000507
c000f18f:	6a 28                	push   0x28
c000f191:	53                   	push   ebx
c000f192:	e8 c7 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f197:	6a 00                	push   0x0
c000f199:	68 11 05 00 c0       	push   0xc0000511
c000f19e:	6a 29                	push   0x29
c000f1a0:	53                   	push   ebx
c000f1a1:	e8 b8 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1a6:	83 c4 20             	add    esp,0x20
c000f1a9:	6a 00                	push   0x0
c000f1ab:	68 1b 05 00 c0       	push   0xc000051b
c000f1b0:	6a 2a                	push   0x2a
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 a6 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1b8:	6a 00                	push   0x0
c000f1ba:	68 25 05 00 c0       	push   0xc0000525
c000f1bf:	6a 2b                	push   0x2b
c000f1c1:	53                   	push   ebx
c000f1c2:	e8 97 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1c7:	83 c4 20             	add    esp,0x20
c000f1ca:	6a 00                	push   0x0
c000f1cc:	68 2f 05 00 c0       	push   0xc000052f
c000f1d1:	6a 2c                	push   0x2c
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 85 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1d9:	6a 00                	push   0x0
c000f1db:	68 39 05 00 c0       	push   0xc0000539
c000f1e0:	6a 2d                	push   0x2d
c000f1e2:	53                   	push   ebx
c000f1e3:	e8 76 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1e8:	83 c4 20             	add    esp,0x20
c000f1eb:	6a 00                	push   0x0
c000f1ed:	68 43 05 00 c0       	push   0xc0000543
c000f1f2:	6a 2e                	push   0x2e
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 64 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1fa:	6a 00                	push   0x0
c000f1fc:	68 4d 05 00 c0       	push   0xc000054d
c000f201:	6a 2f                	push   0x2f
c000f203:	53                   	push   ebx
c000f204:	e8 55 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f209:	83 c4 20             	add    esp,0x20
c000f20c:	6a 00                	push   0x0
c000f20e:	68 92 05 00 c0       	push   0xc0000592
c000f213:	6a 30                	push   0x30
c000f215:	53                   	push   ebx
c000f216:	e8 43 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f21b:	6a 00                	push   0x0
c000f21d:	68 9c 05 00 c0       	push   0xc000059c
c000f222:	6a 31                	push   0x31
c000f224:	53                   	push   ebx
c000f225:	e8 34 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f22a:	83 c4 20             	add    esp,0x20
c000f22d:	6a 00                	push   0x0
c000f22f:	68 a6 05 00 c0       	push   0xc00005a6
c000f234:	6a 32                	push   0x32
c000f236:	53                   	push   ebx
c000f237:	e8 22 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f23c:	6a 00                	push   0x0
c000f23e:	68 b0 05 00 c0       	push   0xc00005b0
c000f243:	6a 33                	push   0x33
c000f245:	53                   	push   ebx
c000f246:	e8 13 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f24b:	83 c4 20             	add    esp,0x20
c000f24e:	6a 00                	push   0x0
c000f250:	68 ba 05 00 c0       	push   0xc00005ba
c000f255:	6a 34                	push   0x34
c000f257:	53                   	push   ebx
c000f258:	e8 01 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f25d:	6a 00                	push   0x0
c000f25f:	68 c4 05 00 c0       	push   0xc00005c4
c000f264:	6a 35                	push   0x35
c000f266:	53                   	push   ebx
c000f267:	e8 f2 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f26c:	83 c4 20             	add    esp,0x20
c000f26f:	6a 00                	push   0x0
c000f271:	68 ce 05 00 c0       	push   0xc00005ce
c000f276:	6a 36                	push   0x36
c000f278:	53                   	push   ebx
c000f279:	e8 e0 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f27e:	6a 00                	push   0x0
c000f280:	68 d8 05 00 c0       	push   0xc00005d8
c000f285:	6a 37                	push   0x37
c000f287:	53                   	push   ebx
c000f288:	e8 d1 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f28d:	83 c4 20             	add    esp,0x20
c000f290:	e8 98 25 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f295:	52                   	push   edx
c000f296:	6a 03                	push   0x3
c000f298:	6a 02                	push   0x2
c000f29a:	50                   	push   eax
c000f29b:	e8 c8 2b 00 00       	call   c0011e68 <VAS::allocatePages(int, int)>
c000f2a0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2a7:	89 c6                	mov    esi,eax
c000f2a9:	e8 12 02 00 00       	call   c000f4c0 <malloc>
c000f2ae:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2b7:	89 c7                	mov    edi,eax
c000f2b9:	e8 10 1d 00 00       	call   c0010fce <TSS::TSS()>
c000f2be:	83 c4 0c             	add    esp,0xc
c000f2c1:	68 73 04 00 c0       	push   0xc0000473
c000f2c6:	56                   	push   esi
c000f2c7:	57                   	push   edi
c000f2c8:	e8 41 1d 00 00       	call   c001100e <TSS::setup(unsigned long, unsigned long)>
c000f2cd:	59                   	pop    ecx
c000f2ce:	89 c6                	mov    esi,eax
c000f2d0:	5f                   	pop    edi
c000f2d1:	6a 00                	push   0x0
c000f2d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2d7:	50                   	push   eax
c000f2d8:	e8 db fb ff ff       	call   c000eeb8 <IDTEntry::IDTEntry(bool)>
c000f2dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2e1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2e6:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2ed:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f2f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2f7:	80 ce 05             	or     dh,0x5
c000f2fa:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f2fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f301:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f305:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f308:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f30b:	e8 86 fc ff ff       	call   c000ef96 <IDT::flush()>
c000f310:	83 c4 20             	add    esp,0x20
c000f313:	5b                   	pop    ebx
c000f314:	5e                   	pop    esi
c000f315:	5f                   	pop    edi
c000f316:	c3                   	ret    

c000f317 <sbrk>:
c000f317:	55                   	push   ebp
c000f318:	57                   	push   edi
c000f319:	56                   	push   esi
c000f31a:	53                   	push   ebx
c000f31b:	83 ec 1c             	sub    esp,0x1c
c000f31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f322:	85 c0                	test   eax,eax
c000f324:	74 3e                	je     c000f364 <sbrk+0x4d>
c000f326:	78 43                	js     c000f36b <sbrk+0x54>
c000f328:	8b 15 48 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b848
c000f32e:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f334:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f33a:	83 e2 01             	and    edx,0x1
c000f33d:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f341:	8b 0d dc a7 02 c0    	mov    ecx,DWORD PTR ds:0xc002a7dc
c000f347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f34b:	05 ff 0f 00 00       	add    eax,0xfff
c000f350:	89 c2                	mov    edx,eax
c000f352:	78 2f                	js     c000f383 <sbrk+0x6c>
c000f354:	c1 fa 0c             	sar    edx,0xc
c000f357:	89 d7                	mov    edi,edx
c000f359:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f35d:	be 00 00 00 00       	mov    esi,0x0
c000f362:	eb 36                	jmp    c000f39a <sbrk+0x83>
c000f364:	a1 dc a7 02 c0       	mov    eax,ds:0xc002a7dc
c000f369:	eb 74                	jmp    c000f3df <sbrk+0xc8>
c000f36b:	83 ec 08             	sub    esp,0x8
c000f36e:	50                   	push   eax
c000f36f:	68 90 7c 02 c0       	push   0xc0027c90
c000f374:	e8 14 33 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f381:	eb 5c                	jmp    c000f3df <sbrk+0xc8>
c000f383:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f389:	eb c9                	jmp    c000f354 <sbrk+0x3d>
c000f38b:	81 05 dc a7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002a7dc,0x1000
c000f395:	46                   	inc    esi
c000f396:	39 f7                	cmp    edi,esi
c000f398:	74 34                	je     c000f3ce <sbrk+0xb7>
c000f39a:	e8 8e 24 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f39f:	89 c3                	mov    ebx,eax
c000f3a1:	8b 2d dc a7 02 c0    	mov    ebp,DWORD PTR ds:0xc002a7dc
c000f3a7:	e8 be 06 00 00       	call   c000fa6a <Phys::allocatePage()>
c000f3ac:	68 01 04 00 00       	push   0x401
c000f3b1:	55                   	push   ebp
c000f3b2:	50                   	push   eax
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 af 29 00 00       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3c1:	74 c8                	je     c000f38b <sbrk+0x74>
c000f3c3:	8b 1d dc a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7dc
c000f3c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3cc:	eb bd                	jmp    c000f38b <sbrk+0x74>
c000f3ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d3:	75 12                	jne    c000f3e7 <sbrk+0xd0>
c000f3d5:	0f 20 d8             	mov    eax,cr3
c000f3d8:	0f 22 d8             	mov    cr3,eax
c000f3db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3df:	83 c4 1c             	add    esp,0x1c
c000f3e2:	5b                   	pop    ebx
c000f3e3:	5e                   	pop    esi
c000f3e4:	5f                   	pop    edi
c000f3e5:	5d                   	pop    ebp
c000f3e6:	c3                   	ret    
c000f3e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3eb:	89 cb                	mov    ebx,ecx
c000f3ed:	c1 eb 0a             	shr    ebx,0xa
c000f3f0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f3f6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f3fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f400:	c1 e0 0c             	shl    eax,0xc
c000f403:	01 c8                	add    eax,ecx
c000f405:	c1 e8 0a             	shr    eax,0xa
c000f408:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f40d:	2d 00 00 40 00       	sub    eax,0x400000
c000f412:	39 c3                	cmp    ebx,eax
c000f414:	77 c5                	ja     c000f3db <sbrk+0xc4>
c000f416:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f419:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f41f:	39 d8                	cmp    eax,ebx
c000f421:	73 f3                	jae    c000f416 <sbrk+0xff>
c000f423:	eb b6                	jmp    c000f3db <sbrk+0xc4>

c000f425 <mmap>:
c000f425:	83 ec 18             	sub    esp,0x18
c000f428:	68 c0 7c 02 c0       	push   0xc0027cc0
c000f42d:	e8 25 9d 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f432:	b8 00 00 00 00       	mov    eax,0x0
c000f437:	83 c4 1c             	add    esp,0x1c
c000f43a:	c3                   	ret    

c000f43b <munmap>:
c000f43b:	83 ec 18             	sub    esp,0x18
c000f43e:	68 c5 7c 02 c0       	push   0xc0027cc5
c000f443:	e8 0f 9d 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f448:	b8 00 00 00 00       	mov    eax,0x0
c000f44d:	83 c4 1c             	add    esp,0x1c
c000f450:	c3                   	ret    

c000f451 <liballoc_lock()>:
c000f451:	83 ec 0c             	sub    esp,0xc
c000f454:	e8 44 cd 00 00       	call   c001c19d <lockScheduler()>
c000f459:	b8 00 00 00 00       	mov    eax,0x0
c000f45e:	83 c4 0c             	add    esp,0xc
c000f461:	c3                   	ret    

c000f462 <liballoc_unlock()>:
c000f462:	83 ec 0c             	sub    esp,0xc
c000f465:	e8 35 cd 00 00       	call   c001c19f <unlockScheduler()>
c000f46a:	b8 00 00 00 00       	mov    eax,0x0
c000f46f:	83 c4 0c             	add    esp,0xc
c000f472:	c3                   	ret    

c000f473 <liballoc_alloc(int)>:
c000f473:	83 ec 0c             	sub    esp,0xc
c000f476:	e8 b2 23 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f47b:	83 ec 04             	sub    esp,0x4
c000f47e:	6a 01                	push   0x1
c000f480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f484:	50                   	push   eax
c000f485:	e8 de 29 00 00       	call   c0011e68 <VAS::allocatePages(int, int)>
c000f48a:	83 c4 1c             	add    esp,0x1c
c000f48d:	c3                   	ret    

c000f48e <liballoc_free(void*, int)>:
c000f48e:	83 ec 0c             	sub    esp,0xc
c000f491:	e8 97 23 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f496:	83 ec 08             	sub    esp,0x8
c000f499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f49d:	50                   	push   eax
c000f49e:	e8 81 26 00 00       	call   c0011b24 <VAS::freeAllocatedPages(unsigned long)>
c000f4a3:	b8 00 00 00 00       	mov    eax,0x0
c000f4a8:	83 c4 1c             	add    esp,0x1c
c000f4ab:	c3                   	ret    

c000f4ac <realloc>:
c000f4ac:	83 ec 14             	sub    esp,0x14
c000f4af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b7:	e8 38 1f ff ff       	call   c00013f4 <dlrealloc>
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <malloc>:
c000f4c0:	83 ec 18             	sub    esp,0x18
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	e8 eb 19 ff ff       	call   c0000eb7 <dlmalloc>
c000f4cc:	83 c4 1c             	add    esp,0x1c
c000f4cf:	c3                   	ret    

c000f4d0 <free>:
c000f4d0:	83 ec 18             	sub    esp,0x18
c000f4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d7:	e8 80 16 ff ff       	call   c0000b5c <dlfree>
c000f4dc:	83 c4 1c             	add    esp,0x1c
c000f4df:	c3                   	ret    

c000f4e0 <rfree>:
c000f4e0:	83 ec 18             	sub    esp,0x18
c000f4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e7:	e8 70 16 ff ff       	call   c0000b5c <dlfree>
c000f4ec:	83 c4 1c             	add    esp,0x1c
c000f4ef:	c3                   	ret    

c000f4f0 <calloc>:
c000f4f0:	56                   	push   esi
c000f4f1:	53                   	push   ebx
c000f4f2:	83 ec 10             	sub    esp,0x10
c000f4f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f4f9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f4fe:	53                   	push   ebx
c000f4ff:	e8 bc ff ff ff       	call   c000f4c0 <malloc>
c000f504:	89 c6                	mov    esi,eax
c000f506:	83 c4 0c             	add    esp,0xc
c000f509:	53                   	push   ebx
c000f50a:	6a 00                	push   0x0
c000f50c:	50                   	push   eax
c000f50d:	e8 69 11 ff ff       	call   c000067b <memset>
c000f512:	89 f0                	mov    eax,esi
c000f514:	83 c4 14             	add    esp,0x14
c000f517:	5b                   	pop    ebx
c000f518:	5e                   	pop    esi
c000f519:	c3                   	ret    

c000f51a <hwTextMode_loadInData(VgaText*)>:
c000f51a:	57                   	push   edi
c000f51b:	56                   	push   esi
c000f51c:	53                   	push   ebx
c000f51d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f521:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f527:	85 c0                	test   eax,eax
c000f529:	7e 30                	jle    c000f55b <hwTextMode_loadInData(VgaText*)+0x41>
c000f52b:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f52e:	31 f6                	xor    esi,esi
c000f530:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f533:	31 c0                	xor    eax,eax
c000f535:	c1 e1 05             	shl    ecx,0x5
c000f538:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f53e:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f542:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f546:	40                   	inc    eax
c000f547:	83 f8 50             	cmp    eax,0x50
c000f54a:	75 f2                	jne    c000f53e <hwTextMode_loadInData(VgaText*)+0x24>
c000f54c:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f552:	46                   	inc    esi
c000f553:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f559:	7f d5                	jg     c000f530 <hwTextMode_loadInData(VgaText*)+0x16>
c000f55b:	5b                   	pop    ebx
c000f55c:	5e                   	pop    esi
c000f55d:	5f                   	pop    edi
c000f55e:	c3                   	ret    

c000f55f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f55f:	56                   	push   esi
c000f560:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f565:	53                   	push   ebx
c000f566:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f56a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f56e:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f574:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f57a:	c1 e0 04             	shl    eax,0x4
c000f57d:	83 e6 0f             	and    esi,0xf
c000f580:	0f b6 c0             	movzx  eax,al
c000f583:	41                   	inc    ecx
c000f584:	09 f0                	or     eax,esi
c000f586:	83 c2 02             	add    edx,0x2
c000f589:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f58d:	c1 e0 08             	shl    eax,0x8
c000f590:	09 f0                	or     eax,esi
c000f592:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f596:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f59c:	75 d0                	jne    c000f56e <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f59e:	5b                   	pop    ebx
c000f59f:	5e                   	pop    esi
c000f5a0:	c3                   	ret    

c000f5a1 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5a1:	56                   	push   esi
c000f5a2:	53                   	push   ebx
c000f5a3:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5a8:	74 38                	je     c000f5e2 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5aa:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5af:	b0 0a                	mov    al,0xa
c000f5b1:	89 da                	mov    edx,ebx
c000f5b3:	ee                   	out    dx,al
c000f5b4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5b9:	89 ca                	mov    edx,ecx
c000f5bb:	ec                   	in     al,dx
c000f5bc:	b2 0f                	mov    dl,0xf
c000f5be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5c2:	83 e0 c0             	and    eax,0xffffffc0
c000f5c5:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5cb:	09 d0                	or     eax,edx
c000f5cd:	89 ca                	mov    edx,ecx
c000f5cf:	ee                   	out    dx,al
c000f5d0:	b0 0b                	mov    al,0xb
c000f5d2:	89 da                	mov    edx,ebx
c000f5d4:	ee                   	out    dx,al
c000f5d5:	89 ca                	mov    edx,ecx
c000f5d7:	ec                   	in     al,dx
c000f5d8:	83 e0 e0             	and    eax,0xffffffe0
c000f5db:	83 c8 0f             	or     eax,0xf
c000f5de:	ee                   	out    dx,al
c000f5df:	5b                   	pop    ebx
c000f5e0:	5e                   	pop    esi
c000f5e1:	c3                   	ret    
c000f5e2:	b0 0a                	mov    al,0xa
c000f5e4:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5e9:	ee                   	out    dx,al
c000f5ea:	b0 20                	mov    al,0x20
c000f5ec:	ba d5 03 00 00       	mov    edx,0x3d5
c000f5f1:	ee                   	out    dx,al
c000f5f2:	5b                   	pop    ebx
c000f5f3:	5e                   	pop    esi
c000f5f4:	c3                   	ret    

c000f5f5 <hwTextMode_update(VgaText*)>:
c000f5f5:	c3                   	ret    

c000f5f6 <hwTextMode_updateCursor(VgaText*)>:
c000f5f6:	56                   	push   esi
c000f5f7:	b9 19 00 00 00       	mov    ecx,0x19
c000f5fc:	53                   	push   ebx
c000f5fd:	be d4 03 00 00       	mov    esi,0x3d4
c000f602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f606:	89 f2                	mov    edx,esi
c000f608:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f60e:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f614:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f617:	c1 e1 04             	shl    ecx,0x4
c000f61a:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f620:	b0 0f                	mov    al,0xf
c000f622:	ee                   	out    dx,al
c000f623:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f628:	88 c8                	mov    al,cl
c000f62a:	89 da                	mov    edx,ebx
c000f62c:	ee                   	out    dx,al
c000f62d:	b0 0e                	mov    al,0xe
c000f62f:	89 f2                	mov    edx,esi
c000f631:	ee                   	out    dx,al
c000f632:	89 c8                	mov    eax,ecx
c000f634:	89 da                	mov    edx,ebx
c000f636:	66 c1 e8 08          	shr    ax,0x8
c000f63a:	ee                   	out    dx,al
c000f63b:	5b                   	pop    ebx
c000f63c:	5e                   	pop    esi
c000f63d:	c3                   	ret    

c000f63e <hwTextMode_disableBlink(VgaText*, bool)>:
c000f63e:	ba da 03 00 00       	mov    edx,0x3da
c000f643:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f648:	75 18                	jne    c000f662 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f64a:	ec                   	in     al,dx
c000f64b:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f650:	b0 30                	mov    al,0x30
c000f652:	89 ca                	mov    edx,ecx
c000f654:	ee                   	out    dx,al
c000f655:	ba c1 03 00 00       	mov    edx,0x3c1
c000f65a:	ec                   	in     al,dx
c000f65b:	83 c8 08             	or     eax,0x8
c000f65e:	89 ca                	mov    edx,ecx
c000f660:	ee                   	out    dx,al
c000f661:	c3                   	ret    
c000f662:	ec                   	in     al,dx
c000f663:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f668:	b0 30                	mov    al,0x30
c000f66a:	89 ca                	mov    edx,ecx
c000f66c:	ee                   	out    dx,al
c000f66d:	ba c1 03 00 00       	mov    edx,0x3c1
c000f672:	ec                   	in     al,dx
c000f673:	83 e0 f7             	and    eax,0xfffffff7
c000f676:	89 ca                	mov    edx,ecx
c000f678:	ee                   	out    dx,al
c000f679:	c3                   	ret    

c000f67a <hwTextMode_scrollScreen(VgaText*)>:
c000f67a:	55                   	push   ebp
c000f67b:	bd 02 00 00 00       	mov    ebp,0x2
c000f680:	57                   	push   edi
c000f681:	56                   	push   esi
c000f682:	53                   	push   ebx
c000f683:	83 ec 1c             	sub    esp,0x1c
c000f686:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f68e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f692:	31 c0                	xor    eax,eax
c000f694:	eb 0b                	jmp    c000f6a1 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f696:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f69c:	74 57                	je     c000f6f5 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f69e:	43                   	inc    ebx
c000f69f:	89 f0                	mov    eax,esi
c000f6a1:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6a7:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6ad:	88 13                	mov    BYTE PTR [ebx],dl
c000f6af:	8d 70 01             	lea    esi,[eax+0x1]
c000f6b2:	83 fd 18             	cmp    ebp,0x18
c000f6b5:	75 df                	jne    c000f696 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6b7:	a8 01                	test   al,0x1
c000f6b9:	75 13                	jne    c000f6ce <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6bb:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6be:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6c4:	75 d8                	jne    c000f69e <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6c6:	83 c4 1c             	add    esp,0x1c
c000f6c9:	5b                   	pop    ebx
c000f6ca:	5e                   	pop    esi
c000f6cb:	5f                   	pop    edi
c000f6cc:	5d                   	pop    ebp
c000f6cd:	c3                   	ret    
c000f6ce:	83 ec 08             	sub    esp,0x8
c000f6d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6d5:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6dc:	50                   	push   eax
c000f6dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6e1:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6e8:	50                   	push   eax
c000f6e9:	e8 c0 0b 00 00       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c000f6ee:	83 c4 10             	add    esp,0x10
c000f6f1:	88 07                	mov    BYTE PTR [edi],al
c000f6f3:	eb c9                	jmp    c000f6be <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f6f5:	45                   	inc    ebp
c000f6f6:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f6fe:	eb 8e                	jmp    c000f68e <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f700 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f700:	56                   	push   esi
c000f701:	53                   	push   ebx
c000f702:	83 ec 0c             	sub    esp,0xc
c000f705:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f709:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f70d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f712:	50                   	push   eax
c000f713:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f718:	50                   	push   eax
c000f719:	e8 90 0b 00 00       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c000f71e:	5a                   	pop    edx
c000f71f:	0f b6 c0             	movzx  eax,al
c000f722:	59                   	pop    ecx
c000f723:	50                   	push   eax
c000f724:	89 f0                	mov    eax,esi
c000f726:	0f be f0             	movsx  esi,al
c000f729:	56                   	push   esi
c000f72a:	e8 25 0c 00 00       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c000f72f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f733:	ba 19 00 00 00       	mov    edx,0x19
c000f738:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f73e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f741:	8d 14 92             	lea    edx,[edx+edx*4]
c000f744:	c1 e1 04             	shl    ecx,0x4
c000f747:	c1 e2 04             	shl    edx,0x4
c000f74a:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f74e:	01 ca                	add    edx,ecx
c000f750:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f758:	83 c4 14             	add    esp,0x14
c000f75b:	5b                   	pop    ebx
c000f75c:	5e                   	pop    esi
c000f75d:	c3                   	ret    

c000f75e <setupTextMode()>:
c000f75e:	c7 05 f8 b8 02 c0 3e f6 00 c0 	mov    DWORD PTR ds:0xc002b8f8,0xc000f63e
c000f768:	c7 05 e4 b8 02 c0 1a f5 00 c0 	mov    DWORD PTR ds:0xc002b8e4,0xc000f51a
c000f772:	c7 05 e0 b8 02 c0 5f f5 00 c0 	mov    DWORD PTR ds:0xc002b8e0,0xc000f55f
c000f77c:	c7 05 ec b8 02 c0 7a f6 00 c0 	mov    DWORD PTR ds:0xc002b8ec,0xc000f67a
c000f786:	c7 05 f4 b8 02 c0 a1 f5 00 c0 	mov    DWORD PTR ds:0xc002b8f4,0xc000f5a1
c000f790:	c7 05 e8 b8 02 c0 f5 f5 00 c0 	mov    DWORD PTR ds:0xc002b8e8,0xc000f5f5
c000f79a:	c7 05 f0 b8 02 c0 f6 f5 00 c0 	mov    DWORD PTR ds:0xc002b8f0,0xc000f5f6
c000f7a4:	c7 05 fc b8 02 c0 00 f7 00 c0 	mov    DWORD PTR ds:0xc002b8fc,0xc000f700
c000f7ae:	c3                   	ret    

c000f7af <kernel_main>:
c000f7af:	57                   	push   edi
c000f7b0:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7b5:	56                   	push   esi
c000f7b6:	31 f6                	xor    esi,esi
c000f7b8:	53                   	push   ebx
c000f7b9:	83 ec 10             	sub    esp,0x10
c000f7bc:	e8 47 09 00 00       	call   c0010108 <installVgaTextImplementation()>
c000f7c1:	e8 98 ff ff ff       	call   c000f75e <setupTextMode()>
c000f7c6:	89 f0                	mov    eax,esi
c000f7c8:	89 fa                	mov    edx,edi
c000f7ca:	ee                   	out    dx,al
c000f7cb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7d0:	b0 80                	mov    al,0x80
c000f7d2:	89 da                	mov    edx,ebx
c000f7d4:	ee                   	out    dx,al
c000f7d5:	b1 03                	mov    cl,0x3
c000f7d7:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7dc:	88 c8                	mov    al,cl
c000f7de:	ee                   	out    dx,al
c000f7df:	89 f0                	mov    eax,esi
c000f7e1:	89 fa                	mov    edx,edi
c000f7e3:	ee                   	out    dx,al
c000f7e4:	88 c8                	mov    al,cl
c000f7e6:	89 da                	mov    edx,ebx
c000f7e8:	ee                   	out    dx,al
c000f7e9:	b0 c7                	mov    al,0xc7
c000f7eb:	ba fa 03 00 00       	mov    edx,0x3fa
c000f7f0:	ee                   	out    dx,al
c000f7f1:	b0 0b                	mov    al,0xb
c000f7f3:	ba fc 03 00 00       	mov    edx,0x3fc
c000f7f8:	ee                   	out    dx,al
c000f7f9:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f7fe:	83 ec 0c             	sub    esp,0xc
c000f801:	05 ff 0f 00 00       	add    eax,0xfff
c000f806:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f80b:	50                   	push   eax
c000f80c:	e8 b3 03 00 00       	call   c000fbc4 <Phys::physicalMemorySetup(unsigned int)>
c000f811:	e8 98 1f 00 00       	call   c00117ae <Virt::virtualMemorySetup()>
c000f816:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f81c:	83 c4 10             	add    esp,0x10
c000f81f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f825:	75 0e                	jne    c000f835 <kernel_main+0x86>
c000f827:	89 d8                	mov    eax,ebx
c000f829:	25 48 03 00 00       	and    eax,0x348
c000f82e:	3d 00 03 00 00       	cmp    eax,0x300
c000f833:	74 10                	je     c000f845 <kernel_main+0x96>
c000f835:	83 ec 0c             	sub    esp,0xc
c000f838:	68 23 93 02 c0       	push   0xc0029323
c000f83d:	e8 15 99 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	83 ec 0c             	sub    esp,0xc
c000f848:	89 1d 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,ebx
c000f84e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f852:	53                   	push   ebx
c000f853:	e8 0a 21 00 00       	call   c0011962 <VAS::VAS()>
c000f858:	89 1d a4 b9 02 c0    	mov    DWORD PTR ds:0xc002b9a4,ebx
c000f85e:	e8 bd 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f863:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f86a:	e8 51 fc ff ff       	call   c000f4c0 <malloc>
c000f86f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f872:	89 c6                	mov    esi,eax
c000f874:	e8 61 ea ff ff       	call   c000e2da <Computer::Computer()>
c000f879:	6a 00                	push   0x0
c000f87b:	89 35 48 b8 02 c0    	mov    DWORD PTR ds:0xc002b848,esi
c000f881:	6a 00                	push   0x0
c000f883:	6a 00                	push   0x0
c000f885:	56                   	push   esi
c000f886:	e8 7f f2 ff ff       	call   c000eb0a <Computer::open(int, int, void*)>
c000f88b:	83 c4 14             	add    esp,0x14
c000f88e:	53                   	push   ebx
c000f88f:	e8 68 23 00 00       	call   c0011bfc <VAS::~VAS()>
c000f894:	c7 04 24 cc 7c 02 c0 	mov    DWORD PTR [esp],0xc0027ccc
c000f89b:	e8 b7 98 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f8a0:	83 c4 20             	add    esp,0x20
c000f8a3:	5b                   	pop    ebx
c000f8a4:	5e                   	pop    esi
c000f8a5:	5f                   	pop    edi
c000f8a6:	c3                   	ret    

c000f8a7 <Phys::allocateDMA(unsigned long)>:
c000f8a7:	55                   	push   ebp
c000f8a8:	31 d2                	xor    edx,edx
c000f8aa:	57                   	push   edi
c000f8ab:	31 ed                	xor    ebp,ebp
c000f8ad:	56                   	push   esi
c000f8ae:	31 c9                	xor    ecx,ecx
c000f8b0:	53                   	push   ebx
c000f8b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8b5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8bb:	31 c0                	xor    eax,eax
c000f8bd:	c1 ee 0c             	shr    esi,0xc
c000f8c0:	eb 17                	jmp    c000f8d9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8c2:	85 c9                	test   ecx,ecx
c000f8c4:	75 04                	jne    c000f8ca <Phys::allocateDMA(unsigned long)+0x23>
c000f8c6:	89 d5                	mov    ebp,edx
c000f8c8:	89 d0                	mov    eax,edx
c000f8ca:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8cd:	39 de                	cmp    esi,ebx
c000f8cf:	74 20                	je     c000f8f1 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8d1:	42                   	inc    edx
c000f8d2:	89 d9                	mov    ecx,ebx
c000f8d4:	83 fa 2f             	cmp    edx,0x2f
c000f8d7:	7f 11                	jg     c000f8ea <Phys::allocateDMA(unsigned long)+0x43>
c000f8d9:	80 ba a0 b8 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd4760],0x0
c000f8e0:	74 e0                	je     c000f8c2 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8e2:	31 c9                	xor    ecx,ecx
c000f8e4:	42                   	inc    edx
c000f8e5:	83 fa 2f             	cmp    edx,0x2f
c000f8e8:	7e ef                	jle    c000f8d9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8ea:	5b                   	pop    ebx
c000f8eb:	31 c0                	xor    eax,eax
c000f8ed:	5e                   	pop    esi
c000f8ee:	5f                   	pop    edi
c000f8ef:	5d                   	pop    ebp
c000f8f0:	c3                   	ret    
c000f8f1:	8d 14 30             	lea    edx,[eax+esi*1]
c000f8f4:	89 d7                	mov    edi,edx
c000f8f6:	4f                   	dec    edi
c000f8f7:	79 03                	jns    c000f8fc <Phys::allocateDMA(unsigned long)+0x55>
c000f8f9:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f8fc:	c1 ff 04             	sar    edi,0x4
c000f8ff:	89 c2                	mov    edx,eax
c000f901:	c1 fa 04             	sar    edx,0x4
c000f904:	39 fa                	cmp    edx,edi
c000f906:	75 2f                	jne    c000f937 <Phys::allocateDMA(unsigned long)+0x90>
c000f908:	85 db                	test   ebx,ebx
c000f90a:	74 1a                	je     c000f926 <Phys::allocateDMA(unsigned long)+0x7f>
c000f90c:	be a0 b8 02 c0       	mov    esi,0xc002b8a0
c000f911:	8d 90 a0 b8 02 c0    	lea    edx,[eax-0x3ffd4760]
c000f917:	f7 d6                	not    esi
c000f919:	29 c6                	sub    esi,eax
c000f91b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f91e:	42                   	inc    edx
c000f91f:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f922:	39 d9                	cmp    ecx,ebx
c000f924:	7f f5                	jg     c000f91b <Phys::allocateDMA(unsigned long)+0x74>
c000f926:	85 ff                	test   edi,edi
c000f928:	74 13                	je     c000f93d <Phys::allocateDMA(unsigned long)+0x96>
c000f92a:	5b                   	pop    ebx
c000f92b:	05 50 20 0c 00       	add    eax,0xc2050
c000f930:	5e                   	pop    esi
c000f931:	c1 e0 0c             	shl    eax,0xc
c000f934:	5f                   	pop    edi
c000f935:	5d                   	pop    ebp
c000f936:	c3                   	ret    
c000f937:	89 ea                	mov    edx,ebp
c000f939:	31 c9                	xor    ecx,ecx
c000f93b:	eb a7                	jmp    c000f8e4 <Phys::allocateDMA(unsigned long)+0x3d>
c000f93d:	5b                   	pop    ebx
c000f93e:	c1 e0 0c             	shl    eax,0xc
c000f941:	5e                   	pop    esi
c000f942:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f947:	5f                   	pop    edi
c000f948:	5d                   	pop    ebp
c000f949:	c3                   	ret    

c000f94a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f94e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f952:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f958:	c1 e9 0c             	shr    ecx,0xc
c000f95b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f960:	76 25                	jbe    c000f987 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f962:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f967:	c1 e8 0c             	shr    eax,0xc
c000f96a:	8d 50 10             	lea    edx,[eax+0x10]
c000f96d:	85 c9                	test   ecx,ecx
c000f96f:	74 15                	je     c000f986 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f971:	8d 82 a0 b8 02 c0    	lea    eax,[edx-0x3ffd4760]
c000f977:	8d 94 11 a0 b8 02 c0 	lea    edx,[ecx+edx*1-0x3ffd4760]
c000f97e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f981:	40                   	inc    eax
c000f982:	39 d0                	cmp    eax,edx
c000f984:	75 f8                	jne    c000f97e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f986:	c3                   	ret    
c000f987:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f98d:	c1 ea 0c             	shr    edx,0xc
c000f990:	eb db                	jmp    c000f96d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f992 <Phys::setPageState(unsigned long, bool)>:
c000f992:	56                   	push   esi
c000f993:	ba 01 00 00 00       	mov    edx,0x1
c000f998:	53                   	push   ebx
c000f999:	8b 35 e0 a7 02 c0    	mov    esi,DWORD PTR ds:0xc002a7e0
c000f99f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9a7:	89 c8                	mov    eax,ecx
c000f9a9:	83 e1 07             	and    ecx,0x7
c000f9ac:	c1 e8 03             	shr    eax,0x3
c000f9af:	d3 e3                	shl    ebx,cl
c000f9b1:	01 c6                	add    esi,eax
c000f9b3:	d3 e2                	shl    edx,cl
c000f9b5:	f7 d2                	not    edx
c000f9b7:	20 16                	and    BYTE PTR [esi],dl
c000f9b9:	03 05 e0 a7 02 c0    	add    eax,DWORD PTR ds:0xc002a7e0
c000f9bf:	08 18                	or     BYTE PTR [eax],bl
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <Phys::getPageState(unsigned long)>:
c000f9c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9c8:	8b 15 e0 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a7e0
c000f9ce:	89 c8                	mov    eax,ecx
c000f9d0:	83 e1 07             	and    ecx,0x7
c000f9d3:	c1 e8 03             	shr    eax,0x3
c000f9d6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9da:	d3 f8                	sar    eax,cl
c000f9dc:	83 e0 01             	and    eax,0x1
c000f9df:	c3                   	ret    

c000f9e0 <Phys::freePage(unsigned long)>:
c000f9e0:	53                   	push   ebx
c000f9e1:	83 ec 08             	sub    esp,0x8
c000f9e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9e8:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f9ee:	76 57                	jbe    c000fa47 <Phys::freePage(unsigned long)+0x67>
c000f9f0:	c1 eb 0c             	shr    ebx,0xc
c000f9f3:	53                   	push   ebx
c000f9f4:	e8 cb ff ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000f9f9:	5a                   	pop    edx
c000f9fa:	84 c0                	test   al,al
c000f9fc:	74 5b                	je     c000fa59 <Phys::freePage(unsigned long)+0x79>
c000f9fe:	a1 8c b8 02 c0       	mov    eax,ds:0xc002b88c
c000fa03:	48                   	dec    eax
c000fa04:	a3 8c b8 02 c0       	mov    ds:0xc002b88c,eax
c000fa09:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa0c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa0f:	c1 e0 02             	shl    eax,0x2
c000fa12:	99                   	cdq    
c000fa13:	f7 3d 90 b8 02 c0    	idiv   DWORD PTR ds:0xc002b890
c000fa19:	39 05 88 b8 02 c0    	cmp    DWORD PTR ds:0xc002b888,eax
c000fa1f:	75 13                	jne    c000fa34 <Phys::freePage(unsigned long)+0x54>
c000fa21:	83 ec 08             	sub    esp,0x8
c000fa24:	6a 00                	push   0x0
c000fa26:	53                   	push   ebx
c000fa27:	e8 66 ff ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fa2c:	83 c4 10             	add    esp,0x10
c000fa2f:	83 c4 08             	add    esp,0x8
c000fa32:	5b                   	pop    ebx
c000fa33:	c3                   	ret    
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	a3 88 b8 02 c0       	mov    ds:0xc002b888,eax
c000fa3c:	50                   	push   eax
c000fa3d:	e8 5a 0a 00 00       	call   c001049c <VgaText::updateRAMUsageDisplay(int)>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	eb da                	jmp    c000fa21 <Phys::freePage(unsigned long)+0x41>
c000fa47:	68 00 10 00 00       	push   0x1000
c000fa4c:	53                   	push   ebx
c000fa4d:	e8 f8 fe ff ff       	call   c000f94a <Phys::freeDMA(unsigned long, unsigned long)>
c000fa52:	59                   	pop    ecx
c000fa53:	5b                   	pop    ebx
c000fa54:	83 c4 08             	add    esp,0x8
c000fa57:	5b                   	pop    ebx
c000fa58:	c3                   	ret    
c000fa59:	c7 44 24 10 e7 7c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027ce7
c000fa61:	83 c4 08             	add    esp,0x8
c000fa64:	5b                   	pop    ebx
c000fa65:	e9 ed 96 00 00       	jmp    c0019157 <Krnl::panic(char const*)>

c000fa6a <Phys::allocatePage()>:
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	51                   	push   ecx
c000fa6d:	8b 35 80 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b880
c000fa73:	89 f3                	mov    ebx,esi
c000fa75:	eb 0a                	jmp    c000fa81 <Phys::allocatePage()+0x17>
c000fa77:	89 1d 80 b8 02 c0    	mov    DWORD PTR ds:0xc002b880,ebx
c000fa7d:	39 de                	cmp    esi,ebx
c000fa7f:	74 24                	je     c000faa5 <Phys::allocatePage()+0x3b>
c000fa81:	53                   	push   ebx
c000fa82:	e8 3d ff ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000fa87:	5a                   	pop    edx
c000fa88:	84 c0                	test   al,al
c000fa8a:	74 5a                	je     c000fae6 <Phys::allocatePage()+0x7c>
c000fa8c:	43                   	inc    ebx
c000fa8d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fa93:	75 e2                	jne    c000fa77 <Phys::allocatePage()+0xd>
c000fa95:	31 db                	xor    ebx,ebx
c000fa97:	c7 05 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b880,0x0
c000faa1:	39 de                	cmp    esi,ebx
c000faa3:	75 dc                	jne    c000fa81 <Phys::allocatePage()+0x17>
c000faa5:	83 ec 0c             	sub    esp,0xc
c000faa8:	68 fd 7c 02 c0       	push   0xc0027cfd
c000faad:	e8 db 2b 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fab2:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fab9:	e8 e9 fd ff ff       	call   c000f8a7 <Phys::allocateDMA(unsigned long)>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	85 c0                	test   eax,eax
c000fac3:	75 56                	jne    c000fb1b <Phys::allocatePage()+0xb1>
c000fac5:	83 ec 0c             	sub    esp,0xc
c000fac8:	68 0e 7d 02 c0       	push   0xc0027d0e
c000facd:	e8 85 96 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	8b 1d 80 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b880
c000fadb:	53                   	push   ebx
c000fadc:	e8 e3 fe ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000fae1:	5a                   	pop    edx
c000fae2:	84 c0                	test   al,al
c000fae4:	75 a6                	jne    c000fa8c <Phys::allocatePage()+0x22>
c000fae6:	6a 01                	push   0x1
c000fae8:	53                   	push   ebx
c000fae9:	e8 a4 fe ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000faee:	a1 8c b8 02 c0       	mov    eax,ds:0xc002b88c
c000faf3:	59                   	pop    ecx
c000faf4:	40                   	inc    eax
c000faf5:	5b                   	pop    ebx
c000faf6:	a3 8c b8 02 c0       	mov    ds:0xc002b88c,eax
c000fafb:	8d 04 80             	lea    eax,[eax+eax*4]
c000fafe:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb01:	c1 e0 02             	shl    eax,0x2
c000fb04:	99                   	cdq    
c000fb05:	f7 3d 90 b8 02 c0    	idiv   DWORD PTR ds:0xc002b890
c000fb0b:	39 05 88 b8 02 c0    	cmp    DWORD PTR ds:0xc002b888,eax
c000fb11:	75 0c                	jne    c000fb1f <Phys::allocatePage()+0xb5>
c000fb13:	a1 80 b8 02 c0       	mov    eax,ds:0xc002b880
c000fb18:	c1 e0 0c             	shl    eax,0xc
c000fb1b:	5a                   	pop    edx
c000fb1c:	5b                   	pop    ebx
c000fb1d:	5e                   	pop    esi
c000fb1e:	c3                   	ret    
c000fb1f:	83 ec 0c             	sub    esp,0xc
c000fb22:	a3 88 b8 02 c0       	mov    ds:0xc002b888,eax
c000fb27:	50                   	push   eax
c000fb28:	e8 6f 09 00 00       	call   c001049c <VgaText::updateRAMUsageDisplay(int)>
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	eb e1                	jmp    c000fb13 <Phys::allocatePage()+0xa9>

c000fb32 <Phys::allocateContiguousPages(int)>:
c000fb32:	57                   	push   edi
c000fb33:	56                   	push   esi
c000fb34:	53                   	push   ebx
c000fb35:	31 db                	xor    ebx,ebx
c000fb37:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb3b:	e8 5d c6 00 00       	call   c001c19d <lockScheduler()>
c000fb40:	85 db                	test   ebx,ebx
c000fb42:	75 11                	jne    c000fb55 <Phys::allocateContiguousPages(int)+0x23>
c000fb44:	e8 21 ff ff ff       	call   c000fa6a <Phys::allocatePage()>
c000fb49:	83 ff 01             	cmp    edi,0x1
c000fb4c:	89 c6                	mov    esi,eax
c000fb4e:	74 21                	je     c000fb71 <Phys::allocateContiguousPages(int)+0x3f>
c000fb50:	bb 01 00 00 00       	mov    ebx,0x1
c000fb55:	e8 10 ff ff ff       	call   c000fa6a <Phys::allocatePage()>
c000fb5a:	89 da                	mov    edx,ebx
c000fb5c:	c1 e2 0c             	shl    edx,0xc
c000fb5f:	01 f2                	add    edx,esi
c000fb61:	39 c2                	cmp    edx,eax
c000fb63:	74 17                	je     c000fb7c <Phys::allocateContiguousPages(int)+0x4a>
c000fb65:	bb 01 00 00 00       	mov    ebx,0x1
c000fb6a:	89 c6                	mov    esi,eax
c000fb6c:	83 ff 01             	cmp    edi,0x1
c000fb6f:	75 e4                	jne    c000fb55 <Phys::allocateContiguousPages(int)+0x23>
c000fb71:	e8 29 c6 00 00       	call   c001c19f <unlockScheduler()>
c000fb76:	89 f0                	mov    eax,esi
c000fb78:	5b                   	pop    ebx
c000fb79:	5e                   	pop    esi
c000fb7a:	5f                   	pop    edi
c000fb7b:	c3                   	ret    
c000fb7c:	43                   	inc    ebx
c000fb7d:	39 fb                	cmp    ebx,edi
c000fb7f:	75 bf                	jne    c000fb40 <Phys::allocateContiguousPages(int)+0xe>
c000fb81:	e8 19 c6 00 00       	call   c001c19f <unlockScheduler()>
c000fb86:	89 f0                	mov    eax,esi
c000fb88:	5b                   	pop    ebx
c000fb89:	5e                   	pop    esi
c000fb8a:	5f                   	pop    edi
c000fb8b:	c3                   	ret    

c000fb8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fb8c:	56                   	push   esi
c000fb8d:	53                   	push   ebx
c000fb8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb92:	39 1d 84 b8 02 c0    	cmp    DWORD PTR ds:0xc002b884,ebx
c000fb98:	73 06                	jae    c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fb9a:	89 1d 84 b8 02 c0    	mov    DWORD PTR ds:0xc002b884,ebx
c000fba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fba4:	c1 eb 0c             	shr    ebx,0xc
c000fba7:	c1 e8 0c             	shr    eax,0xc
c000fbaa:	39 d8                	cmp    eax,ebx
c000fbac:	73 13                	jae    c000fbc1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbae:	6a 00                	push   0x0
c000fbb0:	8d 70 01             	lea    esi,[eax+0x1]
c000fbb3:	50                   	push   eax
c000fbb4:	e8 d9 fd ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fbb9:	5a                   	pop    edx
c000fbba:	89 f0                	mov    eax,esi
c000fbbc:	59                   	pop    ecx
c000fbbd:	39 f3                	cmp    ebx,esi
c000fbbf:	75 ed                	jne    c000fbae <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbc1:	5b                   	pop    ebx
c000fbc2:	5e                   	pop    esi
c000fbc3:	c3                   	ret    

c000fbc4 <Phys::physicalMemorySetup(unsigned int)>:
c000fbc4:	55                   	push   ebp
c000fbc5:	57                   	push   edi
c000fbc6:	56                   	push   esi
c000fbc7:	53                   	push   ebx
c000fbc8:	31 db                	xor    ebx,ebx
c000fbca:	83 ec 40             	sub    esp,0x40
c000fbcd:	6a 30                	push   0x30
c000fbcf:	6a 00                	push   0x0
c000fbd1:	68 a0 b8 02 c0       	push   0xc002b8a0
c000fbd6:	e8 a0 0a ff ff       	call   c000067b <memset>
c000fbdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fbdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbe4:	05 00 10 00 00       	add    eax,0x1000
c000fbe9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fbed:	83 c4 10             	add    esp,0x10
c000fbf0:	83 ec 08             	sub    esp,0x8
c000fbf3:	6a 01                	push   0x1
c000fbf5:	53                   	push   ebx
c000fbf6:	43                   	inc    ebx
c000fbf7:	e8 96 fd ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fbfc:	83 c4 10             	add    esp,0x10
c000fbff:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc05:	75 e9                	jne    c000fbf0 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc07:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc0e:	66 85 c0             	test   ax,ax
c000fc11:	0f 84 8e 01 00 00    	je     c000fda5 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc27:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc30:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc38:	eb 15                	jmp    c000fc4f <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc3a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc3e:	83 c3 18             	add    ebx,0x18
c000fc41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc45:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc49:	0f 84 66 01 00 00    	je     c000fdb5 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc4f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc55:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc60:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc62:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc65:	01 f0                	add    eax,esi
c000fc67:	55                   	push   ebp
c000fc68:	11 fa                	adc    edx,edi
c000fc6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc6e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc76:	56                   	push   esi
c000fc77:	68 48 7d 02 c0       	push   0xc0027d48
c000fc7c:	e8 0c 2a 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fc81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	09 f8                	or     eax,edi
c000fc8a:	0f 85 25 01 00 00    	jne    c000fdb5 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc90:	4d                   	dec    ebp
c000fc91:	75 a7                	jne    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc93:	ba 00 00 08 00       	mov    edx,0x80000
c000fc98:	89 c1                	mov    ecx,eax
c000fc9a:	39 f2                	cmp    edx,esi
c000fc9c:	19 f9                	sbb    ecx,edi
c000fc9e:	0f 82 a7 00 00 00    	jb     c000fd4b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fca4:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fca8:	89 c1                	mov    ecx,eax
c000fcaa:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcae:	0f 83 97 00 00 00    	jae    c000fd4b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcb4:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fcb9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcbd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcc1:	39 fa                	cmp    edx,edi
c000fcc3:	19 e8                	sbb    eax,ebp
c000fcc5:	0f 82 14 01 00 00    	jb     c000fddf <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fccb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fccf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcd3:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fcd9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcde:	83 d5 ff             	adc    ebp,0xffffffff
c000fce1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fce5:	31 c0                	xor    eax,eax
c000fce7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fceb:	39 fa                	cmp    edx,edi
c000fced:	89 c1                	mov    ecx,eax
c000fcef:	19 e9                	sbb    ecx,ebp
c000fcf1:	0f 83 43 ff ff ff    	jae    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcf7:	be 00 00 08 00       	mov    esi,0x80000
c000fcfc:	50                   	push   eax
c000fcfd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd01:	57                   	push   edi
c000fd02:	56                   	push   esi
c000fd03:	68 6c 7d 02 c0       	push   0xc0027d6c
c000fd08:	e8 80 29 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fd0d:	5a                   	pop    edx
c000fd0e:	59                   	pop    ecx
c000fd0f:	57                   	push   edi
c000fd10:	56                   	push   esi
c000fd11:	e8 76 fe ff ff       	call   c000fb8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd1e:	83 c4 0c             	add    esp,0xc
c000fd21:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd25:	03 05 90 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b890
c000fd2b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd32:	a3 90 b8 02 c0       	mov    ds:0xc002b890,eax
c000fd37:	52                   	push   edx
c000fd38:	50                   	push   eax
c000fd39:	68 2a 7d 02 c0       	push   0xc0027d2a
c000fd3e:	e8 4a 29 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fd43:	83 c4 10             	add    esp,0x10
c000fd46:	e9 ef fe ff ff       	jmp    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd4b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd57:	39 ea                	cmp    edx,ebp
c000fd59:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd5d:	0f 82 d7 fe ff ff    	jb     c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd63:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd68:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd6c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd70:	0f 83 c4 fe ff ff    	jae    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd76:	39 ee                	cmp    esi,ebp
c000fd78:	89 f8                	mov    eax,edi
c000fd7a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd7e:	0f 83 78 ff ff ff    	jae    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd8c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fd90:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fd94:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fda0:	e9 57 ff ff ff       	jmp    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fda5:	83 ec 0c             	sub    esp,0xc
c000fda8:	68 1c 7d 02 c0       	push   0xc0027d1c
c000fdad:	e8 a5 93 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000fdb2:	83 c4 10             	add    esp,0x10
c000fdb5:	bb 40 01 00 00       	mov    ebx,0x140
c000fdba:	83 ec 08             	sub    esp,0x8
c000fdbd:	6a 00                	push   0x0
c000fdbf:	53                   	push   ebx
c000fdc0:	43                   	inc    ebx
c000fdc1:	e8 cc fb ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fdc6:	ff 05 90 b8 02 c0    	inc    DWORD PTR ds:0xc002b890
c000fdcc:	83 c4 10             	add    esp,0x10
c000fdcf:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fdd5:	75 e3                	jne    c000fdba <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fdd7:	83 c4 3c             	add    esp,0x3c
c000fdda:	5b                   	pop    ebx
c000fddb:	5e                   	pop    esi
c000fddc:	5f                   	pop    edi
c000fddd:	5d                   	pop    ebp
c000fdde:	c3                   	ret    
c000fddf:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fde7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fdef:	e9 d7 fe ff ff       	jmp    c000fccb <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fdf4 <Pipe::isAtty()>:
c000fdf4:	31 c0                	xor    eax,eax
c000fdf6:	c3                   	ret    
c000fdf7:	90                   	nop

c000fdf8 <Pipe::~Pipe()>:
c000fdf8:	83 ec 0c             	sub    esp,0xc
c000fdfb:	ba d8 7d 02 c0       	mov    edx,0xc0027dd8
c000fe00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe04:	89 10                	mov    DWORD PTR [eax],edx
c000fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0a:	83 ec 0c             	sub    esp,0xc
c000fe0d:	50                   	push   eax
c000fe0e:	e8 29 16 00 00       	call   c001143c <UnixFile::~UnixFile()>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	90                   	nop
c000fe17:	83 c4 0c             	add    esp,0xc
c000fe1a:	c3                   	ret    
c000fe1b:	90                   	nop

c000fe1c <Pipe::~Pipe()>:
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	83 ec 0c             	sub    esp,0xc
c000fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe26:	e8 cd ff ff ff       	call   c000fdf8 <Pipe::~Pipe()>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	83 ec 08             	sub    esp,0x8
c000fe31:	6a 20                	push   0x20
c000fe33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe37:	e8 71 27 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	83 c4 0c             	add    esp,0xc
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <Pipe::read(unsigned long long, void*, int*)>:
c000fe44:	55                   	push   ebp
c000fe45:	57                   	push   edi
c000fe46:	56                   	push   esi
c000fe47:	53                   	push   ebx
c000fe48:	83 ec 1c             	sub    esp,0x1c
c000fe4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe4f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe53:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe57:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe5a:	89 c8                	mov    eax,ecx
c000fe5c:	99                   	cdq    
c000fe5d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe61:	74 19                	je     c000fe7c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe63:	39 f9                	cmp    ecx,edi
c000fe65:	89 d1                	mov    ecx,edx
c000fe67:	19 f1                	sbb    ecx,esi
c000fe69:	73 11                	jae    c000fe7c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe6b:	e8 2d c3 00 00       	call   c001c19d <lockScheduler()>
c000fe70:	e8 63 c6 00 00       	call   c001c4d8 <schedule()>
c000fe75:	e8 25 c3 00 00       	call   c001c19f <unlockScheduler()>
c000fe7a:	eb db                	jmp    c000fe57 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe7c:	39 f8                	cmp    eax,edi
c000fe7e:	89 d1                	mov    ecx,edx
c000fe80:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe84:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe88:	19 f1                	sbb    ecx,esi
c000fe8a:	73 08                	jae    c000fe94 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fe8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe94:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe97:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe9a:	29 c6                	sub    esi,eax
c000fe9c:	89 f1                	mov    ecx,esi
c000fe9e:	c1 f9 1f             	sar    ecx,0x1f
c000fea1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fea5:	89 ca                	mov    edx,ecx
c000fea7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000feab:	19 d1                	sbb    ecx,edx
c000fead:	73 04                	jae    c000feb3 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000feaf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000feb3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000feb7:	89 fd                	mov    ebp,edi
c000feb9:	29 f5                	sub    ebp,esi
c000febb:	85 f6                	test   esi,esi
c000febd:	74 12                	je     c000fed1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000febf:	52                   	push   edx
c000fec0:	56                   	push   esi
c000fec1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fec4:	50                   	push   eax
c000fec5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fec9:	e8 77 07 ff ff       	call   c0000645 <memcpy>
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	85 ed                	test   ebp,ebp
c000fed3:	74 12                	je     c000fee7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fed5:	50                   	push   eax
c000fed6:	55                   	push   ebp
c000fed7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000feda:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fede:	56                   	push   esi
c000fedf:	e8 61 07 ff ff       	call   c0000645 <memcpy>
c000fee4:	83 c4 10             	add    esp,0x10
c000fee7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000feea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000feed:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fef0:	99                   	cdq    
c000fef1:	89 f7                	mov    edi,esi
c000fef3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fef7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fefb:	c1 ff 1f             	sar    edi,0x1f
c000fefe:	57                   	push   edi
c000feff:	56                   	push   esi
c000ff00:	52                   	push   edx
c000ff01:	50                   	push   eax
c000ff02:	e8 05 47 01 00       	call   c002460c <__umoddi3>
c000ff07:	83 c4 10             	add    esp,0x10
c000ff0a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff0d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff12:	75 10                	jne    c000ff24 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff14:	83 ec 0c             	sub    esp,0xc
c000ff17:	68 95 7d 02 c0       	push   0xc0027d95
c000ff1c:	e8 36 92 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff2c:	89 10                	mov    DWORD PTR [eax],edx
c000ff2e:	83 c4 1c             	add    esp,0x1c
c000ff31:	31 c0                	xor    eax,eax
c000ff33:	5b                   	pop    ebx
c000ff34:	5e                   	pop    esi
c000ff35:	5f                   	pop    edi
c000ff36:	5d                   	pop    ebp
c000ff37:	c3                   	ret    

c000ff38 <Pipe::write(unsigned long long, void*, int*)>:
c000ff38:	55                   	push   ebp
c000ff39:	57                   	push   edi
c000ff3a:	56                   	push   esi
c000ff3b:	53                   	push   ebx
c000ff3c:	83 ec 1c             	sub    esp,0x1c
c000ff3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff4b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff4e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff51:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff58:	89 de                	mov    esi,ebx
c000ff5a:	89 df                	mov    edi,ebx
c000ff5c:	c1 ff 1f             	sar    edi,0x1f
c000ff5f:	01 c6                	add    esi,eax
c000ff61:	89 c8                	mov    eax,ecx
c000ff63:	11 d7                	adc    edi,edx
c000ff65:	99                   	cdq    
c000ff66:	39 f1                	cmp    ecx,esi
c000ff68:	89 d0                	mov    eax,edx
c000ff6a:	19 f8                	sbb    eax,edi
c000ff6c:	b8 01 00 00 00       	mov    eax,0x1
c000ff71:	0f 82 80 00 00 00    	jb     c000fff7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff7a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff7d:	01 d8                	add    eax,ebx
c000ff7f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff83:	99                   	cdq    
c000ff84:	f7 f9                	idiv   ecx
c000ff86:	29 d1                	sub    ecx,edx
c000ff88:	89 d7                	mov    edi,edx
c000ff8a:	89 c8                	mov    eax,ecx
c000ff8c:	99                   	cdq    
c000ff8d:	39 ce                	cmp    esi,ecx
c000ff8f:	19 d3                	sbb    ebx,edx
c000ff91:	bb 00 00 00 00       	mov    ebx,0x0
c000ff96:	72 04                	jb     c000ff9c <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ff98:	89 f3                	mov    ebx,esi
c000ff9a:	29 cb                	sub    ebx,ecx
c000ff9c:	89 f1                	mov    ecx,esi
c000ff9e:	29 d9                	sub    ecx,ebx
c000ffa0:	74 1a                	je     c000ffbc <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffa2:	52                   	push   edx
c000ffa3:	51                   	push   ecx
c000ffa4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffa8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffac:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffaf:	57                   	push   edi
c000ffb0:	e8 90 06 ff ff       	call   c0000645 <memcpy>
c000ffb5:	83 c4 10             	add    esp,0x10
c000ffb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffbc:	85 db                	test   ebx,ebx
c000ffbe:	74 12                	je     c000ffd2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffc0:	50                   	push   eax
c000ffc1:	53                   	push   ebx
c000ffc2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffc6:	51                   	push   ecx
c000ffc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ffca:	e8 76 06 ff ff       	call   c0000645 <memcpy>
c000ffcf:	83 c4 10             	add    esp,0x10
c000ffd2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ffd5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffda:	75 10                	jne    c000ffec <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	68 b1 7d 02 c0       	push   0xc0027db1
c000ffe4:	e8 6e 91 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ffe9:	83 c4 10             	add    esp,0x10
c000ffec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fff0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fff3:	89 38                	mov    DWORD PTR [eax],edi
c000fff5:	31 c0                	xor    eax,eax
c000fff7:	83 c4 1c             	add    esp,0x1c
c000fffa:	5b                   	pop    ebx
c000fffb:	5e                   	pop    esi
c000fffc:	5f                   	pop    edi
c000fffd:	5d                   	pop    ebp
c000fffe:	c3                   	ret    
c000ffff:	90                   	nop

c0010000 <Pipe::Pipe(int)>:
c0010000:	83 ec 0c             	sub    esp,0xc
c0010003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010007:	83 ec 08             	sub    esp,0x8
c001000a:	6a 00                	push   0x0
c001000c:	50                   	push   eax
c001000d:	e8 48 12 00 00       	call   c001125a <UnixFile::UnixFile(int)>
c0010012:	83 c4 10             	add    esp,0x10
c0010015:	ba d8 7d 02 c0       	mov    edx,0xc0027dd8
c001001a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001e:	89 10                	mov    DWORD PTR [eax],edx
c0010020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010024:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010028:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001002b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010045:	83 ec 0c             	sub    esp,0xc
c0010048:	50                   	push   eax
c0010049:	e8 72 f4 ff ff       	call   c000f4c0 <malloc>
c001004e:	83 c4 10             	add    esp,0x10
c0010051:	89 c2                	mov    edx,eax
c0010053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010057:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001005a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010062:	90                   	nop
c0010063:	83 c4 0c             	add    esp,0xc
c0010066:	c3                   	ret    
c0010067:	90                   	nop

c0010068 <VgaText::isAtty()>:
c0010068:	b0 01                	mov    al,0x1
c001006a:	c3                   	ret    
c001006b:	90                   	nop

c001006c <VgaText::~VgaText()>:
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	ba 94 7e 02 c0       	mov    edx,0xc0027e94
c0010074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010078:	89 10                	mov    DWORD PTR [eax],edx
c001007a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001007e:	83 ec 0c             	sub    esp,0xc
c0010081:	50                   	push   eax
c0010082:	e8 b5 13 00 00       	call   c001143c <UnixFile::~UnixFile()>
c0010087:	83 c4 10             	add    esp,0x10
c001008a:	90                   	nop
c001008b:	83 c4 0c             	add    esp,0xc
c001008e:	c3                   	ret    
c001008f:	90                   	nop

c0010090 <VgaText::~VgaText()>:
c0010090:	83 ec 0c             	sub    esp,0xc
c0010093:	83 ec 0c             	sub    esp,0xc
c0010096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001009a:	e8 cd ff ff ff       	call   c001006c <VgaText::~VgaText()>
c001009f:	83 c4 10             	add    esp,0x10
c00100a2:	83 ec 08             	sub    esp,0x8
c00100a5:	68 60 12 00 00       	push   0x1260
c00100aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ae:	e8 fa 24 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	83 c4 0c             	add    esp,0xc
c00100b9:	c3                   	ret    

c00100ba <VgaText::read(unsigned long long, void*, int*)>:
c00100ba:	83 ec 10             	sub    esp,0x10
c00100bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c9:	e8 78 57 00 00       	call   c0015846 <readKeyboard(VgaText*, char*, unsigned long)>
c00100ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100d2:	89 02                	mov    DWORD PTR [edx],eax
c00100d4:	31 c0                	xor    eax,eax
c00100d6:	83 c4 1c             	add    esp,0x1c
c00100d9:	c3                   	ret    

c00100da <setTerminalScrollLock(bool)>:
c00100da:	c3                   	ret    

c00100db <addToTerminalCycle(VgaText*)>:
c00100db:	8b 15 00 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b900
c00100e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100e5:	85 d2                	test   edx,edx
c00100e7:	75 0c                	jne    c00100f5 <addToTerminalCycle(VgaText*)+0x1a>
c00100e9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00100ef:	a3 00 b9 02 c0       	mov    ds:0xc002b900,eax
c00100f4:	c3                   	ret    
c00100f5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00100fb:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010101:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010107:	c3                   	ret    

c0010108 <installVgaTextImplementation()>:
c0010108:	83 ec 10             	sub    esp,0x10
c001010b:	6a 20                	push   0x20
c001010d:	6a 00                	push   0x0
c001010f:	68 e0 b8 02 c0       	push   0xc002b8e0
c0010114:	e8 62 05 ff ff       	call   c000067b <memset>
c0010119:	83 c4 1c             	add    esp,0x1c
c001011c:	c3                   	ret    

c001011d <scrollTerminalScrollLock(int)>:
c001011d:	c3                   	ret    

c001011e <VgaText::load()>:
c001011e:	53                   	push   ebx
c001011f:	31 c0                	xor    eax,eax
c0010121:	83 ec 58             	sub    esp,0x58
c0010124:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010128:	89 e2                	mov    edx,esp
c001012a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001012e:	40                   	inc    eax
c001012f:	83 f8 50             	cmp    eax,0x50
c0010132:	75 f6                	jne    c001012a <VgaText::load()+0xc>
c0010134:	31 c0                	xor    eax,eax
c0010136:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001013d:	84 c9                	test   cl,cl
c001013f:	74 06                	je     c0010147 <VgaText::load()+0x29>
c0010141:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010144:	40                   	inc    eax
c0010145:	eb ef                	jmp    c0010136 <VgaText::load()+0x18>
c0010147:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001014d:	85 c0                	test   eax,eax
c001014f:	74 09                	je     c001015a <VgaText::load()+0x3c>
c0010151:	51                   	push   ecx
c0010152:	51                   	push   ecx
c0010153:	52                   	push   edx
c0010154:	53                   	push   ebx
c0010155:	ff d0                	call   eax
c0010157:	83 c4 10             	add    esp,0x10
c001015a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010160:	85 c0                	test   eax,eax
c0010162:	74 09                	je     c001016d <VgaText::load()+0x4f>
c0010164:	83 ec 0c             	sub    esp,0xc
c0010167:	53                   	push   ebx
c0010168:	ff d0                	call   eax
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	83 c4 58             	add    esp,0x58
c0010170:	5b                   	pop    ebx
c0010171:	c3                   	ret    

c0010172 <VgaText::updateCursor()>:
c0010172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010176:	39 05 04 b9 02 c0    	cmp    DWORD PTR ds:0xc002b904,eax
c001017c:	75 0c                	jne    c001018a <VgaText::updateCursor()+0x18>
c001017e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010184:	85 c0                	test   eax,eax
c0010186:	74 02                	je     c001018a <VgaText::updateCursor()+0x18>
c0010188:	ff e0                	jmp    eax
c001018a:	c3                   	ret    
c001018b:	90                   	nop

c001018c <VgaText::showCursor(bool)>:
c001018c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010194:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001019a:	c3                   	ret    
c001019b:	90                   	nop

c001019c <VgaText::disableBlink(bool)>:
c001019c:	56                   	push   esi
c001019d:	53                   	push   ebx
c001019e:	51                   	push   ecx
c001019f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101a7:	39 1d 04 b9 02 c0    	cmp    DWORD PTR ds:0xc002b904,ebx
c00101ad:	75 18                	jne    c00101c7 <VgaText::disableBlink(bool)+0x2b>
c00101af:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101b5:	85 c0                	test   eax,eax
c00101b7:	74 0e                	je     c00101c7 <VgaText::disableBlink(bool)+0x2b>
c00101b9:	89 f1                	mov    ecx,esi
c00101bb:	52                   	push   edx
c00101bc:	52                   	push   edx
c00101bd:	0f b6 d1             	movzx  edx,cl
c00101c0:	52                   	push   edx
c00101c1:	53                   	push   ebx
c00101c2:	ff d0                	call   eax
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	89 f0                	mov    eax,esi
c00101c9:	83 f0 01             	xor    eax,0x1
c00101cc:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101d2:	58                   	pop    eax
c00101d3:	5b                   	pop    ebx
c00101d4:	5e                   	pop    esi
c00101d5:	c3                   	ret    

c00101d6 <VgaText::doANSI_SGR(int)>:
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101de:	85 d2                	test   edx,edx
c00101e0:	75 14                	jne    c00101f6 <VgaText::doANSI_SGR(int)+0x20>
c00101e2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101e8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101ee:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00101f4:	eb 65                	jmp    c001025b <VgaText::doANSI_SGR(int)+0x85>
c00101f6:	83 fa 07             	cmp    edx,0x7
c00101f9:	75 14                	jne    c001020f <VgaText::doANSI_SGR(int)+0x39>
c00101fb:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010201:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010207:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001020d:	eb 4c                	jmp    c001025b <VgaText::doANSI_SGR(int)+0x85>
c001020f:	83 fa 1b             	cmp    edx,0x1b
c0010212:	74 ce                	je     c00101e2 <VgaText::doANSI_SGR(int)+0xc>
c0010214:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010217:	83 f9 07             	cmp    ecx,0x7
c001021a:	77 09                	ja     c0010225 <VgaText::doANSI_SGR(int)+0x4f>
c001021c:	8b 14 8d 20 a8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd57e0]
c0010223:	eb 20                	jmp    c0010245 <VgaText::doANSI_SGR(int)+0x6f>
c0010225:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010228:	83 f9 07             	cmp    ecx,0x7
c001022b:	77 09                	ja     c0010236 <VgaText::doANSI_SGR(int)+0x60>
c001022d:	8b 14 8d 20 a8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd57e0]
c0010234:	eb 25                	jmp    c001025b <VgaText::doANSI_SGR(int)+0x85>
c0010236:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010239:	83 f9 07             	cmp    ecx,0x7
c001023c:	77 0e                	ja     c001024c <VgaText::doANSI_SGR(int)+0x76>
c001023e:	8b 14 95 d8 a6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5928]
c0010245:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001024b:	c3                   	ret    
c001024c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001024f:	83 f9 07             	cmp    ecx,0x7
c0010252:	77 0d                	ja     c0010261 <VgaText::doANSI_SGR(int)+0x8b>
c0010254:	8b 14 95 b0 a6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5950]
c001025b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010261:	c3                   	ret    

c0010262 <VgaText::setDefaultBgColour(VgaColour)>:
c0010262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010266:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001026a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010270:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010276:	c3                   	ret    
c0010277:	90                   	nop

c0010278 <VgaText::setDefaultFgColour(VgaColour)>:
c0010278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010280:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010286:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001028c:	c3                   	ret    
c001028d:	90                   	nop

c001028e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001028e:	53                   	push   ebx
c001028f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010293:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010297:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001029b:	51                   	push   ecx
c001029c:	e8 c1 ff ff ff       	call   c0010262 <VgaText::setDefaultBgColour(VgaColour)>
c00102a1:	58                   	pop    eax
c00102a2:	5a                   	pop    edx
c00102a3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102ab:	5b                   	pop    ebx
c00102ac:	eb ca                	jmp    c0010278 <VgaText::setDefaultFgColour(VgaColour)>

c00102ae <VgaText::combineColours(unsigned char, unsigned char)>:
c00102ae:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00102b2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00102b7:	83 e0 0f             	and    eax,0xf
c00102ba:	c1 e2 04             	shl    edx,0x4
c00102bd:	09 d0                	or     eax,edx
c00102bf:	c3                   	ret    

c00102c0 <VgaText::scrollScreen()>:
c00102c0:	57                   	push   edi
c00102c1:	56                   	push   esi
c00102c2:	be 01 00 00 00       	mov    esi,0x1
c00102c7:	53                   	push   ebx
c00102c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102cc:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00102d2:	31 ff                	xor    edi,edi
c00102d4:	01 d9                	add    ecx,ebx
c00102d6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00102d9:	83 fe 17             	cmp    esi,0x17
c00102dc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00102e2:	75 28                	jne    c001030c <VgaText::scrollScreen()+0x4c>
c00102e4:	f7 c7 01 00 00 00    	test   edi,0x1
c00102ea:	74 1c                	je     c0010308 <VgaText::scrollScreen()+0x48>
c00102ec:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00102f3:	50                   	push   eax
c00102f4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00102fb:	50                   	push   eax
c00102fc:	e8 ad ff ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010301:	5a                   	pop    edx
c0010302:	5a                   	pop    edx
c0010303:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010306:	eb 04                	jmp    c001030c <VgaText::scrollScreen()+0x4c>
c0010308:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001030c:	47                   	inc    edi
c001030d:	41                   	inc    ecx
c001030e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010314:	75 c0                	jne    c00102d6 <VgaText::scrollScreen()+0x16>
c0010316:	46                   	inc    esi
c0010317:	83 fe 18             	cmp    esi,0x18
c001031a:	75 b0                	jne    c00102cc <VgaText::scrollScreen()+0xc>
c001031c:	39 1d 04 b9 02 c0    	cmp    DWORD PTR ds:0xc002b904,ebx
c0010322:	75 24                	jne    c0010348 <VgaText::scrollScreen()+0x88>
c0010324:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001032b:	74 08                	je     c0010335 <VgaText::scrollScreen()+0x75>
c001032d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010333:	eb 13                	jmp    c0010348 <VgaText::scrollScreen()+0x88>
c0010335:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001033b:	85 c0                	test   eax,eax
c001033d:	74 09                	je     c0010348 <VgaText::scrollScreen()+0x88>
c001033f:	83 ec 0c             	sub    esp,0xc
c0010342:	53                   	push   ebx
c0010343:	ff d0                	call   eax
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001034c:	5b                   	pop    ebx
c001034d:	5e                   	pop    esi
c001034e:	5f                   	pop    edi
c001034f:	e9 1e fe ff ff       	jmp    c0010172 <VgaText::updateCursor()>

c0010354 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010354:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010359:	c1 e0 08             	shl    eax,0x8
c001035c:	89 c2                	mov    edx,eax
c001035e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010363:	09 d0                	or     eax,edx
c0010365:	c3                   	ret    

c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010366:	53                   	push   ebx
c0010367:	83 ec 08             	sub    esp,0x8
c001036a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001036e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010373:	50                   	push   eax
c0010374:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010379:	50                   	push   eax
c001037a:	e8 2f ff ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c001037f:	5a                   	pop    edx
c0010380:	0f b6 c0             	movzx  eax,al
c0010383:	5b                   	pop    ebx
c0010384:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010389:	50                   	push   eax
c001038a:	53                   	push   ebx
c001038b:	e8 c4 ff ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010390:	5a                   	pop    edx
c0010391:	5a                   	pop    edx
c0010392:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010398:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001039c:	0f b7 d2             	movzx  edx,dx
c001039f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00103a4:	39 0d 04 b9 02 c0    	cmp    DWORD PTR ds:0xc002b904,ecx
c00103aa:	75 14                	jne    c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103ac:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00103b2:	85 c0                	test   eax,eax
c00103b4:	74 0a                	je     c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00103ba:	83 c4 08             	add    esp,0x8
c00103bd:	5b                   	pop    ebx
c00103be:	ff e0                	jmp    eax
c00103c0:	83 c4 08             	add    esp,0x8
c00103c3:	5b                   	pop    ebx
c00103c4:	c3                   	ret    
c00103c5:	90                   	nop

c00103c6 <VgaText::getCursorX()>:
c00103c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ca:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00103d0:	c3                   	ret    
c00103d1:	90                   	nop

c00103d2 <VgaText::getCursorY()>:
c00103d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00103dc:	c3                   	ret    
c00103dd:	90                   	nop

c00103de <VgaText::setCursor(int, int)>:
c00103de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00103ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103f0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00103f6:	e9 77 fd ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c00103fb:	90                   	nop

c00103fc <VgaText::setCursorX(int)>:
c00103fc:	83 ec 10             	sub    esp,0x10
c00103ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010403:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001040d:	50                   	push   eax
c001040e:	e8 cb ff ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010413:	83 c4 1c             	add    esp,0x1c
c0010416:	c3                   	ret    
c0010417:	90                   	nop

c0010418 <VgaText::setCursorY(int)>:
c0010418:	83 ec 10             	sub    esp,0x10
c001041b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001041f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010423:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010429:	50                   	push   eax
c001042a:	e8 af ff ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c001042f:	83 c4 1c             	add    esp,0x1c
c0010432:	c3                   	ret    
c0010433:	90                   	nop

c0010434 <VgaText::incrementCursor(bool)>:
c0010434:	56                   	push   esi
c0010435:	53                   	push   ebx
c0010436:	51                   	push   ecx
c0010437:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001043b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001043f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010445:	40                   	inc    eax
c0010446:	83 f8 50             	cmp    eax,0x50
c0010449:	74 08                	je     c0010453 <VgaText::incrementCursor(bool)+0x1f>
c001044b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010451:	eb 33                	jmp    c0010486 <VgaText::incrementCursor(bool)+0x52>
c0010453:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010459:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010463:	8d 50 01             	lea    edx,[eax+0x1]
c0010466:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001046c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010472:	75 12                	jne    c0010486 <VgaText::incrementCursor(bool)+0x52>
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001047d:	53                   	push   ebx
c001047e:	e8 3d fe ff ff       	call   c00102c0 <VgaText::scrollScreen()>
c0010483:	83 c4 10             	add    esp,0x10
c0010486:	89 f0                	mov    eax,esi
c0010488:	84 c0                	test   al,al
c001048a:	74 0c                	je     c0010498 <VgaText::incrementCursor(bool)+0x64>
c001048c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010490:	5a                   	pop    edx
c0010491:	5b                   	pop    ebx
c0010492:	5e                   	pop    esi
c0010493:	e9 da fc ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c0010498:	58                   	pop    eax
c0010499:	5b                   	pop    ebx
c001049a:	5e                   	pop    esi
c001049b:	c3                   	ret    

c001049c <VgaText::updateRAMUsageDisplay(int)>:
c001049c:	53                   	push   ebx
c001049d:	bb 0a 00 00 00       	mov    ebx,0xa
c00104a2:	6a 0f                	push   0xf
c00104a4:	6a 00                	push   0x0
c00104a6:	e8 03 fe ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c00104ab:	5a                   	pop    edx
c00104ac:	59                   	pop    ecx
c00104ad:	0f b6 c8             	movzx  ecx,al
c00104b0:	51                   	push   ecx
c00104b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b5:	99                   	cdq    
c00104b6:	f7 fb                	idiv   ebx
c00104b8:	89 d3                	mov    ebx,edx
c00104ba:	83 c0 30             	add    eax,0x30
c00104bd:	83 c3 30             	add    ebx,0x30
c00104c0:	0f be c0             	movsx  eax,al
c00104c3:	0f b6 db             	movzx  ebx,bl
c00104c6:	50                   	push   eax
c00104c7:	e8 88 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00104cc:	5a                   	pop    edx
c00104cd:	5a                   	pop    edx
c00104ce:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00104d4:	51                   	push   ecx
c00104d5:	53                   	push   ebx
c00104d6:	e8 79 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00104db:	5b                   	pop    ebx
c00104dc:	5a                   	pop    edx
c00104dd:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00104e3:	51                   	push   ecx
c00104e4:	6a 25                	push   0x25
c00104e6:	e8 69 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00104eb:	59                   	pop    ecx
c00104ec:	5b                   	pop    ebx
c00104ed:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00104f3:	5b                   	pop    ebx
c00104f4:	c3                   	ret    
c00104f5:	90                   	nop

c00104f6 <VgaText::updateDiskUsage()>:
c00104f6:	55                   	push   ebp
c00104f7:	bd 10 27 00 00       	mov    ebp,0x2710
c00104fc:	57                   	push   edi
c00104fd:	56                   	push   esi
c00104fe:	53                   	push   ebx
c00104ff:	6a 0f                	push   0xf
c0010501:	6a 00                	push   0x0
c0010503:	e8 a6 fd ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010508:	5a                   	pop    edx
c0010509:	0f b6 d8             	movzx  ebx,al
c001050c:	59                   	pop    ecx
c001050d:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0010512:	53                   	push   ebx
c0010513:	b9 0a 00 00 00       	mov    ecx,0xa
c0010518:	99                   	cdq    
c0010519:	f7 fd                	idiv   ebp
c001051b:	99                   	cdq    
c001051c:	f7 f9                	idiv   ecx
c001051e:	8d 42 30             	lea    eax,[edx+0x30]
c0010521:	0f b6 c0             	movzx  eax,al
c0010524:	50                   	push   eax
c0010525:	e8 2a fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c001052a:	5e                   	pop    esi
c001052b:	5f                   	pop    edi
c001052c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010532:	bf e8 03 00 00       	mov    edi,0x3e8
c0010537:	53                   	push   ebx
c0010538:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001053d:	99                   	cdq    
c001053e:	f7 ff                	idiv   edi
c0010540:	99                   	cdq    
c0010541:	f7 f9                	idiv   ecx
c0010543:	8d 42 30             	lea    eax,[edx+0x30]
c0010546:	0f b6 c0             	movzx  eax,al
c0010549:	50                   	push   eax
c001054a:	e8 05 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c001054f:	5a                   	pop    edx
c0010550:	5e                   	pop    esi
c0010551:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010557:	be 64 00 00 00       	mov    esi,0x64
c001055c:	53                   	push   ebx
c001055d:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0010562:	99                   	cdq    
c0010563:	f7 fe                	idiv   esi
c0010565:	99                   	cdq    
c0010566:	f7 f9                	idiv   ecx
c0010568:	8d 42 30             	lea    eax,[edx+0x30]
c001056b:	0f b6 c0             	movzx  eax,al
c001056e:	50                   	push   eax
c001056f:	e8 e0 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010574:	5a                   	pop    edx
c0010575:	5a                   	pop    edx
c0010576:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001057c:	53                   	push   ebx
c001057d:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0010582:	99                   	cdq    
c0010583:	f7 f9                	idiv   ecx
c0010585:	99                   	cdq    
c0010586:	f7 f9                	idiv   ecx
c0010588:	8d 42 30             	lea    eax,[edx+0x30]
c001058b:	0f b6 c0             	movzx  eax,al
c001058e:	50                   	push   eax
c001058f:	e8 c0 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010594:	5a                   	pop    edx
c0010595:	5a                   	pop    edx
c0010596:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001059c:	53                   	push   ebx
c001059d:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00105a2:	99                   	cdq    
c00105a3:	f7 f9                	idiv   ecx
c00105a5:	8d 42 30             	lea    eax,[edx+0x30]
c00105a8:	0f b6 c0             	movzx  eax,al
c00105ab:	50                   	push   eax
c00105ac:	e8 a3 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00105b1:	5a                   	pop    edx
c00105b2:	5a                   	pop    edx
c00105b3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00105b9:	53                   	push   ebx
c00105ba:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c00105bf:	99                   	cdq    
c00105c0:	f7 fd                	idiv   ebp
c00105c2:	99                   	cdq    
c00105c3:	f7 f9                	idiv   ecx
c00105c5:	8d 42 30             	lea    eax,[edx+0x30]
c00105c8:	0f b6 c0             	movzx  eax,al
c00105cb:	50                   	push   eax
c00105cc:	e8 83 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00105d1:	5d                   	pop    ebp
c00105d2:	5a                   	pop    edx
c00105d3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00105d9:	53                   	push   ebx
c00105da:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c00105df:	99                   	cdq    
c00105e0:	f7 ff                	idiv   edi
c00105e2:	99                   	cdq    
c00105e3:	f7 f9                	idiv   ecx
c00105e5:	8d 42 30             	lea    eax,[edx+0x30]
c00105e8:	0f b6 c0             	movzx  eax,al
c00105eb:	50                   	push   eax
c00105ec:	e8 63 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00105f1:	5f                   	pop    edi
c00105f2:	5d                   	pop    ebp
c00105f3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00105f9:	53                   	push   ebx
c00105fa:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c00105ff:	99                   	cdq    
c0010600:	f7 fe                	idiv   esi
c0010602:	99                   	cdq    
c0010603:	f7 f9                	idiv   ecx
c0010605:	8d 42 30             	lea    eax,[edx+0x30]
c0010608:	0f b6 c0             	movzx  eax,al
c001060b:	50                   	push   eax
c001060c:	e8 43 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010611:	5a                   	pop    edx
c0010612:	5e                   	pop    esi
c0010613:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010619:	53                   	push   ebx
c001061a:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c001061f:	99                   	cdq    
c0010620:	f7 f9                	idiv   ecx
c0010622:	99                   	cdq    
c0010623:	f7 f9                	idiv   ecx
c0010625:	8d 42 30             	lea    eax,[edx+0x30]
c0010628:	0f b6 c0             	movzx  eax,al
c001062b:	50                   	push   eax
c001062c:	e8 23 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010631:	5f                   	pop    edi
c0010632:	5d                   	pop    ebp
c0010633:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010639:	53                   	push   ebx
c001063a:	a1 04 db 02 c0       	mov    eax,ds:0xc002db04
c001063f:	99                   	cdq    
c0010640:	f7 f9                	idiv   ecx
c0010642:	83 c2 30             	add    edx,0x30
c0010645:	0f b6 d2             	movzx  edx,dl
c0010648:	52                   	push   edx
c0010649:	e8 06 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c001064e:	5a                   	pop    edx
c001064f:	59                   	pop    ecx
c0010650:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010656:	5b                   	pop    ebx
c0010657:	5e                   	pop    esi
c0010658:	5f                   	pop    edi
c0010659:	5d                   	pop    ebp
c001065a:	c3                   	ret    
c001065b:	90                   	nop

c001065c <VgaText::updateTitle()>:
c001065c:	53                   	push   ebx
c001065d:	31 c0                	xor    eax,eax
c001065f:	83 ec 58             	sub    esp,0x58
c0010662:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010666:	89 e1                	mov    ecx,esp
c0010668:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001066c:	40                   	inc    eax
c001066d:	83 f8 50             	cmp    eax,0x50
c0010670:	75 f6                	jne    c0010668 <VgaText::updateTitle()+0xc>
c0010672:	31 c0                	xor    eax,eax
c0010674:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001067b:	84 db                	test   bl,bl
c001067d:	74 06                	je     c0010685 <VgaText::updateTitle()+0x29>
c001067f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010682:	40                   	inc    eax
c0010683:	eb ef                	jmp    c0010674 <VgaText::updateTitle()+0x18>
c0010685:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001068b:	85 c0                	test   eax,eax
c001068d:	74 09                	je     c0010698 <VgaText::updateTitle()+0x3c>
c001068f:	53                   	push   ebx
c0010690:	53                   	push   ebx
c0010691:	51                   	push   ecx
c0010692:	52                   	push   edx
c0010693:	ff d0                	call   eax
c0010695:	83 c4 10             	add    esp,0x10
c0010698:	e8 59 fe ff ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c001069d:	83 c4 58             	add    esp,0x58
c00106a0:	5b                   	pop    ebx
c00106a1:	c3                   	ret    

c00106a2 <VgaText::setTitleTextColour(VgaColour)>:
c00106a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106aa:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00106b0:	eb aa                	jmp    c001065c <VgaText::updateTitle()>

c00106b2 <VgaText::setTitleColour(VgaColour)>:
c00106b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00106c0:	eb 9a                	jmp    c001065c <VgaText::updateTitle()>

c00106c2 <VgaText::setTitle(char*)>:
c00106c2:	53                   	push   ebx
c00106c3:	83 ec 10             	sub    esp,0x10
c00106c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ce:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00106d4:	50                   	push   eax
c00106d5:	e8 40 00 ff ff       	call   c000071a <strcpy>
c00106da:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106de:	83 c4 18             	add    esp,0x18
c00106e1:	5b                   	pop    ebx
c00106e2:	e9 75 ff ff ff       	jmp    c001065c <VgaText::updateTitle()>
c00106e7:	90                   	nop

c00106e8 <VgaText::decrementCursor(bool)>:
c00106e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106f0:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00106f6:	85 c0                	test   eax,eax
c00106f8:	74 07                	je     c0010701 <VgaText::decrementCursor(bool)+0x19>
c00106fa:	48                   	dec    eax
c00106fb:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010701:	84 c9                	test   cl,cl
c0010703:	74 09                	je     c001070e <VgaText::decrementCursor(bool)+0x26>
c0010705:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010709:	e9 64 fa ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c001070e:	c3                   	ret    
c001070f:	90                   	nop

c0010710 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010710:	53                   	push   ebx
c0010711:	83 ec 08             	sub    esp,0x8
c0010714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010718:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001071c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010720:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010724:	3c 07                	cmp    al,0x7
c0010726:	75 2a                	jne    c0010752 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010728:	a1 ac b9 02 c0       	mov    eax,ds:0xc002b9ac
c001072d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010735:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001073d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010745:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010749:	83 c4 08             	add    esp,0x8
c001074c:	5b                   	pop    ebx
c001074d:	e9 3a 2d 00 00       	jmp    c001348c <Buzzer::beep(int, int, bool)>
c0010752:	3c 0d                	cmp    al,0xd
c0010754:	75 0c                	jne    c0010762 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010756:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010760:	eb 3b                	jmp    c001079d <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010762:	3c 0a                	cmp    al,0xa
c0010764:	75 40                	jne    c00107a6 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010766:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001076c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010776:	8d 50 01             	lea    edx,[eax+0x1]
c0010779:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001077f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010785:	75 12                	jne    c0010799 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010787:	83 ec 0c             	sub    esp,0xc
c001078a:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010790:	53                   	push   ebx
c0010791:	e8 2a fb ff ff       	call   c00102c0 <VgaText::scrollScreen()>
c0010796:	83 c4 10             	add    esp,0x10
c0010799:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001079d:	83 c4 08             	add    esp,0x8
c00107a0:	5b                   	pop    ebx
c00107a1:	e9 cc f9 ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c00107a6:	3c 08                	cmp    al,0x8
c00107a8:	75 31                	jne    c00107db <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00107aa:	50                   	push   eax
c00107ab:	50                   	push   eax
c00107ac:	6a 01                	push   0x1
c00107ae:	53                   	push   ebx
c00107af:	e8 34 ff ff ff       	call   c00106e8 <VgaText::decrementCursor(bool)>
c00107b4:	5a                   	pop    edx
c00107b5:	59                   	pop    ecx
c00107b6:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107bc:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107c2:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00107c8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00107ce:	6a 20                	push   0x20
c00107d0:	53                   	push   ebx
c00107d1:	e8 90 fb ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107d6:	83 c4 28             	add    esp,0x28
c00107d9:	5b                   	pop    ebx
c00107da:	c3                   	ret    
c00107db:	83 ec 08             	sub    esp,0x8
c00107de:	0f be c0             	movsx  eax,al
c00107e1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107e7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107ed:	51                   	push   ecx
c00107ee:	52                   	push   edx
c00107ef:	50                   	push   eax
c00107f0:	53                   	push   ebx
c00107f1:	e8 70 fb ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107f6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107fa:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010802:	83 c4 28             	add    esp,0x28
c0010805:	5b                   	pop    ebx
c0010806:	e9 29 fc ff ff       	jmp    c0010434 <VgaText::incrementCursor(bool)>
c001080b:	90                   	nop

c001080c <VgaText::isShowingCursor()>:
c001080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010810:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010816:	c3                   	ret    
c0010817:	90                   	nop

c0010818 <VgaText::isBlinkDisabled()>:
c0010818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001081c:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010822:	83 f0 01             	xor    eax,0x1
c0010825:	c3                   	ret    

c0010826 <VgaText::setCursorHeight(int)>:
c0010826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001082a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001082e:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010834:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001083b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001083f:	e9 48 f9 ff ff       	jmp    c001018c <VgaText::showCursor(bool)>

c0010844 <VgaText::getCursorHeight()>:
c0010844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010848:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001084e:	c3                   	ret    

c001084f <setActiveTerminal(VgaText*)>:
c001084f:	53                   	push   ebx
c0010850:	83 ec 08             	sub    esp,0x8
c0010853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010857:	85 db                	test   ebx,ebx
c0010859:	75 11                	jne    c001086c <setActiveTerminal(VgaText*)+0x1d>
c001085b:	c7 44 24 10 ec 7d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027dec
c0010863:	83 c4 08             	add    esp,0x8
c0010866:	5b                   	pop    ebx
c0010867:	e9 eb 88 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c001086c:	50                   	push   eax
c001086d:	50                   	push   eax
c001086e:	53                   	push   ebx
c001086f:	68 fa 7d 02 c0       	push   0xc0027dfa
c0010874:	e8 14 1e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0010879:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c001087e:	83 c4 10             	add    esp,0x10
c0010881:	85 c0                	test   eax,eax
c0010883:	74 0c                	je     c0010891 <setActiveTerminal(VgaText*)+0x42>
c0010885:	83 ec 0c             	sub    esp,0xc
c0010888:	50                   	push   eax
c0010889:	e8 e4 f8 ff ff       	call   c0010172 <VgaText::updateCursor()>
c001088e:	83 c4 10             	add    esp,0x10
c0010891:	89 1d 04 b9 02 c0    	mov    DWORD PTR ds:0xc002b904,ebx
c0010897:	51                   	push   ecx
c0010898:	51                   	push   ecx
c0010899:	53                   	push   ebx
c001089a:	68 12 7e 02 c0       	push   0xc0027e12
c001089f:	e8 e9 1d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00108a4:	83 c4 0c             	add    esp,0xc
c00108a7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108ad:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108b3:	53                   	push   ebx
c00108b4:	e8 25 fb ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c00108b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108bc:	e8 57 ff ff ff       	call   c0010818 <VgaText::isBlinkDisabled()>
c00108c1:	5a                   	pop    edx
c00108c2:	0f b6 c0             	movzx  eax,al
c00108c5:	59                   	pop    ecx
c00108c6:	50                   	push   eax
c00108c7:	53                   	push   ebx
c00108c8:	e8 cf f8 ff ff       	call   c001019c <VgaText::disableBlink(bool)>
c00108cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d0:	e8 6f ff ff ff       	call   c0010844 <VgaText::getCursorHeight()>
c00108d5:	5a                   	pop    edx
c00108d6:	59                   	pop    ecx
c00108d7:	50                   	push   eax
c00108d8:	53                   	push   ebx
c00108d9:	e8 48 ff ff ff       	call   c0010826 <VgaText::setCursorHeight(int)>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108e8:	75 0a                	jne    c00108f4 <setActiveTerminal(VgaText*)+0xa5>
c00108ea:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00108f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108f8:	83 c4 08             	add    esp,0x8
c00108fb:	5b                   	pop    ebx
c00108fc:	e9 1d f8 ff ff       	jmp    c001011e <VgaText::load()>

c0010901 <doTerminalCycle()>:
c0010901:	83 ec 18             	sub    esp,0x18
c0010904:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0010909:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001090f:	50                   	push   eax
c0010910:	a3 00 b9 02 c0       	mov    ds:0xc002b900,eax
c0010915:	e8 35 ff ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c001091a:	83 c4 1c             	add    esp,0x1c
c001091d:	c3                   	ret    

c001091e <VgaText::doUpdate()>:
c001091e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010922:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010928:	85 c0                	test   eax,eax
c001092a:	74 02                	je     c001092e <VgaText::doUpdate()+0x10>
c001092c:	ff e0                	jmp    eax
c001092e:	c3                   	ret    
c001092f:	90                   	nop

c0010930 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010930:	55                   	push   ebp
c0010931:	57                   	push   edi
c0010932:	56                   	push   esi
c0010933:	53                   	push   ebx
c0010934:	83 ec 1c             	sub    esp,0x1c
c0010937:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001093b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010940:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010947:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001094a:	50                   	push   eax
c001094b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010950:	50                   	push   eax
c0010951:	e8 58 f9 ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010956:	59                   	pop    ecx
c0010957:	0f b6 c0             	movzx  eax,al
c001095a:	5b                   	pop    ebx
c001095b:	31 c9                	xor    ecx,ecx
c001095d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010965:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010969:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001096f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010973:	0f b7 db             	movzx  ebx,bx
c0010976:	01 db                	add    ebx,ebx
c0010978:	01 fb                	add    ebx,edi
c001097a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001097d:	84 c0                	test   al,al
c001097f:	0f 84 38 01 00 00    	je     c0010abd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010985:	3c 0d                	cmp    al,0xd
c0010987:	75 0f                	jne    c0010998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010989:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010993:	e9 1f 01 00 00       	jmp    c0010ab7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010998:	3c 0a                	cmp    al,0xa
c001099a:	75 5b                	jne    c00109f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c001099c:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00109a2:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109ac:	8d 48 01             	lea    ecx,[eax+0x1]
c00109af:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00109b5:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00109bb:	75 12                	jne    c00109cf <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00109bd:	83 ec 0c             	sub    esp,0xc
c00109c0:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00109c6:	55                   	push   ebp
c00109c7:	e8 f4 f8 ff ff       	call   c00102c0 <VgaText::scrollScreen()>
c00109cc:	83 c4 10             	add    esp,0x10
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	55                   	push   ebp
c00109d3:	e8 9a f7 ff ff       	call   c0010172 <VgaText::updateCursor()>
c00109d8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109e9:	31 c9                	xor    ecx,ecx
c00109eb:	0f b7 db             	movzx  ebx,bx
c00109ee:	01 db                	add    ebx,ebx
c00109f0:	01 fb                	add    ebx,edi
c00109f2:	e9 c0 00 00 00       	jmp    c0010ab7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109f7:	3c 08                	cmp    al,0x8
c00109f9:	75 4e                	jne    c0010a49 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109fb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109ff:	53                   	push   ebx
c0010a00:	53                   	push   ebx
c0010a01:	6a 01                	push   0x1
c0010a03:	55                   	push   ebp
c0010a04:	e8 df fc ff ff       	call   c00106e8 <VgaText::decrementCursor(bool)>
c0010a09:	58                   	pop    eax
c0010a0a:	5a                   	pop    edx
c0010a0b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a11:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a17:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010a1d:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010a23:	6a 20                	push   0x20
c0010a25:	55                   	push   ebp
c0010a26:	e8 3b f9 ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a2b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a33:	83 c4 20             	add    esp,0x20
c0010a36:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a3c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a40:	0f b7 db             	movzx  ebx,bx
c0010a43:	01 db                	add    ebx,ebx
c0010a45:	01 fb                	add    ebx,edi
c0010a47:	eb 6e                	jmp    c0010ab7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a49:	51                   	push   ecx
c0010a4a:	51                   	push   ecx
c0010a4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a4f:	50                   	push   eax
c0010a50:	e8 ff f8 ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a5b:	39 2d 04 b9 02 c0    	cmp    DWORD PTR ds:0xc002b904,ebp
c0010a61:	75 2a                	jne    c0010a8d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a63:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a69:	85 c0                	test   eax,eax
c0010a6b:	74 20                	je     c0010a8d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a6d:	52                   	push   edx
c0010a6e:	52                   	push   edx
c0010a6f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a75:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a83:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a86:	51                   	push   ecx
c0010a87:	55                   	push   ebp
c0010a88:	ff d0                	call   eax
c0010a8a:	83 c4 20             	add    esp,0x20
c0010a8d:	83 c3 02             	add    ebx,0x2
c0010a90:	50                   	push   eax
c0010a91:	50                   	push   eax
c0010a92:	6a 00                	push   0x0
c0010a94:	55                   	push   ebp
c0010a95:	e8 9a f9 ff ff       	call   c0010434 <VgaText::incrementCursor(bool)>
c0010a9a:	83 c4 10             	add    esp,0x10
c0010a9d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010aa4:	75 0f                	jne    c0010ab5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010aa6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010aae:	0f b7 db             	movzx  ebx,bx
c0010ab1:	01 db                	add    ebx,ebx
c0010ab3:	01 fb                	add    ebx,edi
c0010ab5:	b1 01                	mov    cl,0x1
c0010ab7:	46                   	inc    esi
c0010ab8:	e9 bd fe ff ff       	jmp    c001097a <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010abd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ac1:	83 ec 0c             	sub    esp,0xc
c0010ac4:	55                   	push   ebp
c0010ac5:	e8 a8 f6 ff ff       	call   c0010172 <VgaText::updateCursor()>
c0010aca:	83 c4 10             	add    esp,0x10
c0010acd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ad1:	84 c9                	test   cl,cl
c0010ad3:	74 0c                	je     c0010ae1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010ad5:	83 ec 0c             	sub    esp,0xc
c0010ad8:	55                   	push   ebp
c0010ad9:	e8 40 fe ff ff       	call   c001091e <VgaText::doUpdate()>
c0010ade:	83 c4 10             	add    esp,0x10
c0010ae1:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010ae8:	83 c4 1c             	add    esp,0x1c
c0010aeb:	5b                   	pop    ebx
c0010aec:	5e                   	pop    esi
c0010aed:	5f                   	pop    edi
c0010aee:	5d                   	pop    ebp
c0010aef:	c3                   	ret    

c0010af0 <VgaText::clearScreen()>:
c0010af0:	57                   	push   edi
c0010af1:	56                   	push   esi
c0010af2:	31 f6                	xor    esi,esi
c0010af4:	53                   	push   ebx
c0010af5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010af9:	52                   	push   edx
c0010afa:	6a 00                	push   0x0
c0010afc:	6a 00                	push   0x0
c0010afe:	53                   	push   ebx
c0010aff:	e8 da f8 ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010b04:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b0b:	83 c4 10             	add    esp,0x10
c0010b0e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010b14:	7e 26                	jle    c0010b3c <VgaText::clearScreen()+0x4c>
c0010b16:	31 ff                	xor    edi,edi
c0010b18:	50                   	push   eax
c0010b19:	50                   	push   eax
c0010b1a:	56                   	push   esi
c0010b1b:	57                   	push   edi
c0010b1c:	47                   	inc    edi
c0010b1d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010b23:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010b29:	6a 20                	push   0x20
c0010b2b:	53                   	push   ebx
c0010b2c:	e8 35 f8 ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b31:	83 c4 20             	add    esp,0x20
c0010b34:	83 ff 50             	cmp    edi,0x50
c0010b37:	75 df                	jne    c0010b18 <VgaText::clearScreen()+0x28>
c0010b39:	46                   	inc    esi
c0010b3a:	eb d2                	jmp    c0010b0e <VgaText::clearScreen()+0x1e>
c0010b3c:	83 ec 0c             	sub    esp,0xc
c0010b3f:	53                   	push   ebx
c0010b40:	e8 d9 fd ff ff       	call   c001091e <VgaText::doUpdate()>
c0010b45:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b4c:	83 c4 10             	add    esp,0x10
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	5f                   	pop    edi
c0010b52:	c3                   	ret    
c0010b53:	90                   	nop

c0010b54 <VgaText::putchar(char)>:
c0010b54:	56                   	push   esi
c0010b55:	53                   	push   ebx
c0010b56:	83 ec 14             	sub    esp,0x14
c0010b59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b61:	3c 5b                	cmp    al,0x5b
c0010b63:	75 21                	jne    c0010b86 <VgaText::putchar(char)+0x32>
c0010b65:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b6c:	74 28                	je     c0010b96 <VgaText::putchar(char)+0x42>
c0010b6e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b77:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b81:	e9 e2 00 00 00       	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010b86:	3c 1b                	cmp    al,0x1b
c0010b88:	75 0c                	jne    c0010b96 <VgaText::putchar(char)+0x42>
c0010b8a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b91:	e9 d2 00 00 00       	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010b96:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b9c:	84 c9                	test   cl,cl
c0010b9e:	0f 84 ab 00 00 00    	je     c0010c4f <VgaText::putchar(char)+0xfb>
c0010ba4:	8d 50 c0             	lea    edx,[eax-0x40]
c0010ba7:	80 fa 3e             	cmp    dl,0x3e
c0010baa:	0f 87 82 00 00 00    	ja     c0010c32 <VgaText::putchar(char)+0xde>
c0010bb0:	3c 6d                	cmp    al,0x6d
c0010bb2:	75 4d                	jne    c0010c01 <VgaText::putchar(char)+0xad>
c0010bb4:	31 f6                	xor    esi,esi
c0010bb6:	31 d2                	xor    edx,edx
c0010bb8:	31 c0                	xor    eax,eax
c0010bba:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010bc0:	7e 30                	jle    c0010bf2 <VgaText::putchar(char)+0x9e>
c0010bc2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010bca:	80 fa 3b             	cmp    dl,0x3b
c0010bcd:	75 17                	jne    c0010be6 <VgaText::putchar(char)+0x92>
c0010bcf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bd3:	50                   	push   eax
c0010bd4:	53                   	push   ebx
c0010bd5:	e8 fc f5 ff ff       	call   c00101d6 <VgaText::doANSI_SGR(int)>
c0010bda:	59                   	pop    ecx
c0010bdb:	31 d2                	xor    edx,edx
c0010bdd:	58                   	pop    eax
c0010bde:	31 c0                	xor    eax,eax
c0010be0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010be4:	eb 09                	jmp    c0010bef <VgaText::putchar(char)+0x9b>
c0010be6:	6b c0 0a             	imul   eax,eax,0xa
c0010be9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010bed:	88 ca                	mov    dl,cl
c0010bef:	46                   	inc    esi
c0010bf0:	eb c8                	jmp    c0010bba <VgaText::putchar(char)+0x66>
c0010bf2:	84 d2                	test   dl,dl
c0010bf4:	74 31                	je     c0010c27 <VgaText::putchar(char)+0xd3>
c0010bf6:	50                   	push   eax
c0010bf7:	53                   	push   ebx
c0010bf8:	e8 d9 f5 ff ff       	call   c00101d6 <VgaText::doANSI_SGR(int)>
c0010bfd:	58                   	pop    eax
c0010bfe:	5a                   	pop    edx
c0010bff:	eb 26                	jmp    c0010c27 <VgaText::putchar(char)+0xd3>
c0010c01:	3c 4a                	cmp    al,0x4a
c0010c03:	75 22                	jne    c0010c27 <VgaText::putchar(char)+0xd3>
c0010c05:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010c0c:	75 19                	jne    c0010c27 <VgaText::putchar(char)+0xd3>
c0010c0e:	83 ec 0c             	sub    esp,0xc
c0010c11:	53                   	push   ebx
c0010c12:	e8 d9 fe ff ff       	call   c0010af0 <VgaText::clearScreen()>
c0010c17:	83 c4 0c             	add    esp,0xc
c0010c1a:	6a 00                	push   0x0
c0010c1c:	6a 00                	push   0x0
c0010c1e:	53                   	push   ebx
c0010c1f:	e8 ba f7 ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010c24:	83 c4 10             	add    esp,0x10
c0010c27:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010c30:	eb 36                	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010c32:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010c38:	83 fa 0e             	cmp    edx,0xe
c0010c3b:	7f 2b                	jg     c0010c68 <VgaText::putchar(char)+0x114>
c0010c3d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c40:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010c46:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c4d:	eb 19                	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010c4f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c55:	0f be c0             	movsx  eax,al
c0010c58:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c5e:	50                   	push   eax
c0010c5f:	53                   	push   ebx
c0010c60:	e8 ab fa ff ff       	call   c0010710 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c65:	83 c4 10             	add    esp,0x10
c0010c68:	83 c4 14             	add    esp,0x14
c0010c6b:	5b                   	pop    ebx
c0010c6c:	5e                   	pop    esi
c0010c6d:	c3                   	ret    

c0010c6e <VgaText::puts(char const*)>:
c0010c6e:	53                   	push   ebx
c0010c6f:	83 ec 08             	sub    esp,0x8
c0010c72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c76:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c79:	84 c0                	test   al,al
c0010c7b:	74 12                	je     c0010c8f <VgaText::puts(char const*)+0x21>
c0010c7d:	43                   	inc    ebx
c0010c7e:	51                   	push   ecx
c0010c7f:	51                   	push   ecx
c0010c80:	50                   	push   eax
c0010c81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c85:	e8 ca fe ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	eb e7                	jmp    c0010c76 <VgaText::puts(char const*)+0x8>
c0010c8f:	83 c4 08             	add    esp,0x8
c0010c92:	5b                   	pop    ebx
c0010c93:	c3                   	ret    

c0010c94 <VgaText::putx(unsigned int)>:
c0010c94:	57                   	push   edi
c0010c95:	b9 11 00 00 00       	mov    ecx,0x11
c0010c9a:	56                   	push   esi
c0010c9b:	be 2e 7e 02 c0       	mov    esi,0xc0027e2e
c0010ca0:	53                   	push   ebx
c0010ca1:	83 ec 20             	sub    esp,0x20
c0010ca4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ca8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010cac:	fc                   	cld    
c0010cad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010caf:	be 08 00 00 00       	mov    esi,0x8
c0010cb4:	50                   	push   eax
c0010cb5:	50                   	push   eax
c0010cb6:	89 d8                	mov    eax,ebx
c0010cb8:	c1 e3 04             	shl    ebx,0x4
c0010cbb:	c1 e8 1c             	shr    eax,0x1c
c0010cbe:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010cc3:	50                   	push   eax
c0010cc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cc8:	e8 87 fe ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010ccd:	83 c4 10             	add    esp,0x10
c0010cd0:	4e                   	dec    esi
c0010cd1:	75 e1                	jne    c0010cb4 <VgaText::putx(unsigned int)+0x20>
c0010cd3:	83 c4 20             	add    esp,0x20
c0010cd6:	5b                   	pop    ebx
c0010cd7:	5e                   	pop    esi
c0010cd8:	5f                   	pop    edi
c0010cd9:	c3                   	ret    

c0010cda <VgaText::VgaText(char const*)>:
c0010cda:	57                   	push   edi
c0010cdb:	56                   	push   esi
c0010cdc:	53                   	push   ebx
c0010cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce1:	83 ec 08             	sub    esp,0x8
c0010ce4:	6a 00                	push   0x0
c0010ce6:	50                   	push   eax
c0010ce7:	e8 6e 05 00 00       	call   c001125a <UnixFile::UnixFile(int)>
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	ba 94 7e 02 c0       	mov    edx,0xc0027e94
c0010cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf8:	89 10                	mov    DWORD PTR [eax],edx
c0010cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cfe:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d25:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d30:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d57:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d62:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d68:	bb e0 b8 02 c0       	mov    ebx,0xc002b8e0
c0010d6d:	b8 08 00 00 00       	mov    eax,0x8
c0010d72:	fc                   	cld    
c0010d73:	89 d7                	mov    edi,edx
c0010d75:	89 de                	mov    esi,ebx
c0010d77:	89 c1                	mov    ecx,eax
c0010d79:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d7f:	05 1e 10 00 00       	add    eax,0x101e
c0010d84:	83 ec 08             	sub    esp,0x8
c0010d87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d8b:	50                   	push   eax
c0010d8c:	e8 89 f9 fe ff       	call   c000071a <strcpy>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d98:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da6:	83 c0 0c             	add    eax,0xc
c0010da9:	83 ec 04             	sub    esp,0x4
c0010dac:	68 00 0f 00 00       	push   0xf00
c0010db1:	6a 00                	push   0x0
c0010db3:	50                   	push   eax
c0010db4:	e8 c2 f8 fe ff       	call   c000067b <memset>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	83 ec 04             	sub    esp,0x4
c0010dbf:	6a 00                	push   0x0
c0010dc1:	6a 07                	push   0x7
c0010dc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc7:	e8 c2 f4 ff ff       	call   c001028e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	83 ec 08             	sub    esp,0x8
c0010dd2:	6a 02                	push   0x2
c0010dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd8:	e8 49 fa ff ff       	call   c0010826 <VgaText::setCursorHeight(int)>
c0010ddd:	83 c4 10             	add    esp,0x10
c0010de0:	83 ec 04             	sub    esp,0x4
c0010de3:	6a 00                	push   0x0
c0010de5:	6a 00                	push   0x0
c0010de7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010deb:	e8 ee f5 ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010df0:	83 c4 10             	add    esp,0x10
c0010df3:	83 ec 08             	sub    esp,0x8
c0010df6:	6a 01                	push   0x1
c0010df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfc:	e8 8b f3 ff ff       	call   c001018c <VgaText::showCursor(bool)>
c0010e01:	83 c4 10             	add    esp,0x10
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	6a 01                	push   0x1
c0010e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0d:	e8 8a f3 ff ff       	call   c001019c <VgaText::disableBlink(bool)>
c0010e12:	83 c4 10             	add    esp,0x10
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1c:	e8 cf fc ff ff       	call   c0010af0 <VgaText::clearScreen()>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e28:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e33:	05 9e 10 00 00       	add    eax,0x109e
c0010e38:	83 ec 04             	sub    esp,0x4
c0010e3b:	68 96 00 00 00       	push   0x96
c0010e40:	6a 00                	push   0x0
c0010e42:	50                   	push   eax
c0010e43:	e8 33 f8 fe ff       	call   c000067b <memset>
c0010e48:	83 c4 10             	add    esp,0x10
c0010e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e4f:	05 34 11 00 00       	add    eax,0x1134
c0010e54:	83 ec 04             	sub    esp,0x4
c0010e57:	68 2c 01 00 00       	push   0x12c
c0010e5c:	6a 00                	push   0x0
c0010e5e:	50                   	push   eax
c0010e5f:	e8 17 f8 fe ff       	call   c000067b <memset>
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	90                   	nop
c0010e68:	5b                   	pop    ebx
c0010e69:	5e                   	pop    esi
c0010e6a:	5f                   	pop    edi
c0010e6b:	c3                   	ret    

c0010e6c <VgaText::receiveKey(unsigned char)>:
c0010e6c:	55                   	push   ebp
c0010e6d:	57                   	push   edi
c0010e6e:	56                   	push   esi
c0010e6f:	53                   	push   ebx
c0010e70:	83 ec 1c             	sub    esp,0x1c
c0010e73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e7b:	84 db                	test   bl,bl
c0010e7d:	0f 84 c9 00 00 00    	je     c0010f4c <VgaText::receiveKey(unsigned char)+0xe0>
c0010e83:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e89:	80 fb 08             	cmp    bl,0x8
c0010e8c:	75 2c                	jne    c0010eba <VgaText::receiveKey(unsigned char)+0x4e>
c0010e8e:	83 ec 0c             	sub    esp,0xc
c0010e91:	57                   	push   edi
c0010e92:	e8 01 f8 fe ff       	call   c0000698 <strlen>
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	85 c0                	test   eax,eax
c0010e9c:	74 41                	je     c0010edf <VgaText::receiveKey(unsigned char)+0x73>
c0010e9e:	50                   	push   eax
c0010e9f:	50                   	push   eax
c0010ea0:	6a 08                	push   0x8
c0010ea2:	56                   	push   esi
c0010ea3:	e8 ac fc ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010ea8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eab:	e8 e8 f7 fe ff       	call   c0000698 <strlen>
c0010eb0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010eb8:	eb 22                	jmp    c0010edc <VgaText::receiveKey(unsigned char)+0x70>
c0010eba:	0f be c3             	movsx  eax,bl
c0010ebd:	52                   	push   edx
c0010ebe:	52                   	push   edx
c0010ebf:	50                   	push   eax
c0010ec0:	56                   	push   esi
c0010ec1:	e8 8e fc ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010ec6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010eca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ecf:	59                   	pop    ecx
c0010ed0:	5d                   	pop    ebp
c0010ed1:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ed5:	50                   	push   eax
c0010ed6:	57                   	push   edi
c0010ed7:	e8 f5 f8 fe ff       	call   c00007d1 <strcat>
c0010edc:	83 c4 10             	add    esp,0x10
c0010edf:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010ee6:	75 05                	jne    c0010eed <VgaText::receiveKey(unsigned char)+0x81>
c0010ee8:	80 fb 0a             	cmp    bl,0xa
c0010eeb:	75 53                	jne    c0010f40 <VgaText::receiveKey(unsigned char)+0xd4>
c0010eed:	83 ec 0c             	sub    esp,0xc
c0010ef0:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010ef6:	53                   	push   ebx
c0010ef7:	e8 9c f7 fe ff       	call   c0000698 <strlen>
c0010efc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eff:	89 c5                	mov    ebp,eax
c0010f01:	e8 92 f7 fe ff       	call   c0000698 <strlen>
c0010f06:	83 c4 10             	add    esp,0x10
c0010f09:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f0d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f12:	76 10                	jbe    c0010f24 <VgaText::receiveKey(unsigned char)+0xb8>
c0010f14:	83 ec 0c             	sub    esp,0xc
c0010f17:	68 3f 7e 02 c0       	push   0xc0027e3f
c0010f1c:	e8 36 82 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	50                   	push   eax
c0010f25:	50                   	push   eax
c0010f26:	57                   	push   edi
c0010f27:	53                   	push   ebx
c0010f28:	e8 a4 f8 fe ff       	call   c00007d1 <strcat>
c0010f2d:	83 c4 0c             	add    esp,0xc
c0010f30:	68 96 00 00 00       	push   0x96
c0010f35:	6a 00                	push   0x0
c0010f37:	57                   	push   edi
c0010f38:	e8 3e f7 fe ff       	call   c000067b <memset>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	56                   	push   esi
c0010f44:	e8 d5 f9 ff ff       	call   c001091e <VgaText::doUpdate()>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	83 c4 1c             	add    esp,0x1c
c0010f4f:	5b                   	pop    ebx
c0010f50:	5e                   	pop    esi
c0010f51:	5f                   	pop    edi
c0010f52:	5d                   	pop    ebp
c0010f53:	c3                   	ret    

c0010f54 <VgaText::write(unsigned long long, void*, int*)>:
c0010f54:	55                   	push   ebp
c0010f55:	57                   	push   edi
c0010f56:	56                   	push   esi
c0010f57:	53                   	push   ebx
c0010f58:	83 ec 0c             	sub    esp,0xc
c0010f5b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f5f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f67:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f6e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f71:	39 eb                	cmp    ebx,ebp
c0010f73:	74 13                	je     c0010f88 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f75:	43                   	inc    ebx
c0010f76:	50                   	push   eax
c0010f77:	50                   	push   eax
c0010f78:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f7c:	50                   	push   eax
c0010f7d:	56                   	push   esi
c0010f7e:	e8 d1 fb ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	eb e9                	jmp    c0010f71 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f92:	56                   	push   esi
c0010f93:	e8 86 f9 ff ff       	call   c001091e <VgaText::doUpdate()>
c0010f98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f9c:	89 38                	mov    DWORD PTR [eax],edi
c0010f9e:	83 c4 1c             	add    esp,0x1c
c0010fa1:	31 c0                	xor    eax,eax
c0010fa3:	5b                   	pop    ebx
c0010fa4:	5e                   	pop    esi
c0010fa5:	5f                   	pop    edi
c0010fa6:	5d                   	pop    ebp
c0010fa7:	c3                   	ret    

c0010fa8 <newTerminal(char*)>:
c0010fa8:	83 ec 28             	sub    esp,0x28
c0010fab:	68 60 12 00 00       	push   0x1260
c0010fb0:	e8 0b e5 ff ff       	call   c000f4c0 <malloc>
c0010fb5:	5a                   	pop    edx
c0010fb6:	59                   	pop    ecx
c0010fb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fbb:	50                   	push   eax
c0010fbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fc0:	e8 15 fd ff ff       	call   c0010cda <VgaText::VgaText(char const*)>
c0010fc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc9:	83 c4 2c             	add    esp,0x2c
c0010fcc:	c3                   	ret    
c0010fcd:	90                   	nop

c0010fce <TSS::TSS()>:
c0010fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd9:	90                   	nop
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <TSS::setESP(unsigned long)>:
c0010fdc:	55                   	push   ebp
c0010fdd:	89 e5                	mov    ebp,esp
c0010fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fe8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010feb:	90                   	nop
c0010fec:	5d                   	pop    ebp
c0010fed:	c3                   	ret    

c0010fee <TSS::flush()>:
c0010fee:	55                   	push   ebp
c0010fef:	89 e5                	mov    ebp,esp
c0010ff1:	83 ec 10             	sub    esp,0x10
c0010ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ff9:	83 c8 03             	or     eax,0x3
c0010ffc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011000:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011004:	66 89 d0             	mov    ax,dx
c0011007:	0f 00 d8             	ltr    ax
c001100a:	90                   	nop
c001100b:	c9                   	leave  
c001100c:	c3                   	ret    
c001100d:	90                   	nop

c001100e <TSS::setup(unsigned long, unsigned long)>:
c001100e:	55                   	push   ebp
c001100f:	89 e5                	mov    ebp,esp
c0011011:	83 ec 18             	sub    esp,0x18
c0011014:	83 ec 0c             	sub    esp,0xc
c0011017:	6a 68                	push   0x68
c0011019:	e8 a2 e4 ff ff       	call   c000f4c0 <malloc>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	89 c2                	mov    edx,eax
c0011023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011026:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001102c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001102f:	83 ec 04             	sub    esp,0x4
c0011032:	6a 68                	push   0x68
c0011034:	6a 00                	push   0x0
c0011036:	50                   	push   eax
c0011037:	e8 3f f6 fe ff       	call   c000067b <memset>
c001103c:	83 c4 10             	add    esp,0x10
c001103f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011045:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001104b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001104e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011051:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001105a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001105d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011060:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011066:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011069:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001106f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011075:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001107b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001107e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011081:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001108d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011099:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001109f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a5:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110b4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c9:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d6:	0f 20 da             	mov    edx,cr3
c00110d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110dc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110df:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e8:	83 ec 08             	sub    esp,0x8
c00110eb:	50                   	push   eax
c00110ec:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110ef:	50                   	push   eax
c00110f0:	e8 a9 db ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	83 ec 08             	sub    esp,0x8
c00110fb:	6a 68                	push   0x68
c00110fd:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011100:	50                   	push   eax
c0011101:	e8 b4 db ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001110d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011110:	83 e0 0f             	and    eax,0xf
c0011113:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011116:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011119:	83 c8 40             	or     eax,0x40
c001111c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001111f:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0011124:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001112a:	05 78 01 00 00       	add    eax,0x178
c001112f:	83 ec 04             	sub    esp,0x4
c0011132:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011135:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011138:	50                   	push   eax
c0011139:	e8 b0 db ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	89 c2                	mov    edx,eax
c0011143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011146:	89 10                	mov    DWORD PTR [eax],edx
c0011148:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001114d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011153:	05 78 01 00 00       	add    eax,0x178
c0011158:	83 ec 0c             	sub    esp,0xc
c001115b:	50                   	push   eax
c001115c:	e8 d1 db ff ff       	call   c000ed32 <GDT::flush()>
c0011161:	83 c4 10             	add    esp,0x10
c0011164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011167:	8b 00                	mov    eax,DWORD PTR [eax]
c0011169:	83 ec 08             	sub    esp,0x8
c001116c:	50                   	push   eax
c001116d:	68 a8 7e 02 c0       	push   0xc0027ea8
c0011172:	e8 16 15 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0011177:	83 c4 10             	add    esp,0x10
c001117a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117d:	8b 00                	mov    eax,DWORD PTR [eax]
c001117f:	c9                   	leave  
c0011180:	c3                   	ret    
c0011181:	90                   	nop

c0011182 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001118a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001118d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011192:	75 08                	jne    c001119c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011194:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001119a:	eb 38                	jmp    c00111d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001119c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111a1:	75 17                	jne    c00111ba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00111a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00111b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111b7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111ba:	89 c1                	mov    ecx,eax
c00111bc:	83 e1 fd             	and    ecx,0xfffffffd
c00111bf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00111c5:	74 cd                	je     c0011194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111c7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111cc:	83 e0 ef             	and    eax,0xffffffef
c00111cf:	83 f8 08             	cmp    eax,0x8
c00111d2:	76 c0                	jbe    c0011194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111d4:	31 c0                	xor    eax,eax
c00111d6:	c3                   	ret    
c00111d7:	90                   	nop

c00111d8 <ReservedFilename::isAtty()>:
c00111d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111df:	31 c0                	xor    eax,eax
c00111e1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111e7:	74 09                	je     c00111f2 <ReservedFilename::isAtty()+0x1a>
c00111e9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111ef:	0f 94 c0             	sete   al
c00111f2:	c3                   	ret    
c00111f3:	90                   	nop

c00111f4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011203:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011208:	75 08                	jne    c0011212 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001120a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011210:	eb 3d                	jmp    c001124f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011212:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011217:	75 17                	jne    c0011230 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001121e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011221:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011227:	8b 10                	mov    edx,DWORD PTR [eax]
c0011229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001122d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011230:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011235:	75 04                	jne    c001123b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011237:	89 0a                	mov    DWORD PTR [edx],ecx
c0011239:	eb 14                	jmp    c001124f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001123b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011240:	74 c8                	je     c001120a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011242:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011247:	83 e0 ef             	and    eax,0xffffffef
c001124a:	83 f8 08             	cmp    eax,0x8
c001124d:	76 bb                	jbe    c001120a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001124f:	31 c0                	xor    eax,eax
c0011251:	c3                   	ret    

c0011252 <UnixFile::getFileDescriptor()>:
c0011252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011259:	c3                   	ret    

c001125a <UnixFile::UnixFile(int)>:
c001125a:	53                   	push   ebx
c001125b:	83 ec 28             	sub    esp,0x28
c001125e:	ba 94 7f 02 c0       	mov    edx,0xc0027f94
c0011263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011267:	89 10                	mov    DWORD PTR [eax],edx
c0011269:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011271:	0f 8f 8c 01 00 00    	jg     c0011403 <UnixFile::UnixFile(int)+0x1a9>
c0011277:	a1 60 a8 02 c0       	mov    eax,ds:0xc002a860
c001127c:	8d 50 01             	lea    edx,[eax+0x1]
c001127f:	89 15 60 a8 02 c0    	mov    DWORD PTR ds:0xc002a860,edx
c0011285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011289:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011293:	68 98 b9 02 c0       	push   0xc002b998
c0011298:	e8 e3 4f 01 00       	call   c0026280 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	a0 94 b9 02 c0       	mov    al,ds:0xc002b994
c00112a5:	83 f0 01             	xor    eax,0x1
c00112a8:	84 c0                	test   al,al
c00112aa:	0f 84 54 01 00 00    	je     c0011404 <UnixFile::UnixFile(int)+0x1aa>
c00112b0:	c6 05 94 b9 02 c0 01 	mov    BYTE PTR ds:0xc002b994,0x1
c00112b7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00112bf:	83 ec 0c             	sub    esp,0xc
c00112c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112c6:	e8 f5 e1 ff ff       	call   c000f4c0 <malloc>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	89 c3                	mov    ebx,eax
c00112d0:	83 ec 08             	sub    esp,0x8
c00112d3:	68 03 ff ff 0f       	push   0xfffff03
c00112d8:	53                   	push   ebx
c00112d9:	e8 2c 01 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	89 1d 8c b9 02 c0    	mov    DWORD PTR ds:0xc002b98c,ebx
c00112e7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112ef:	83 ec 0c             	sub    esp,0xc
c00112f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f6:	e8 c5 e1 ff ff       	call   c000f4c0 <malloc>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	89 c3                	mov    ebx,eax
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	68 01 ff ff 0f       	push   0xfffff01
c0011308:	53                   	push   ebx
c0011309:	e8 fc 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c001130e:	83 c4 10             	add    esp,0x10
c0011311:	89 1d 90 b9 02 c0    	mov    DWORD PTR ds:0xc002b990,ebx
c0011317:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001131f:	83 ec 0c             	sub    esp,0xc
c0011322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011326:	e8 95 e1 ff ff       	call   c000f4c0 <malloc>
c001132b:	83 c4 10             	add    esp,0x10
c001132e:	89 c3                	mov    ebx,eax
c0011330:	83 ec 08             	sub    esp,0x8
c0011333:	68 00 ff ff 0f       	push   0xfffff00
c0011338:	53                   	push   ebx
c0011339:	e8 cc 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	89 1d 84 b9 02 c0    	mov    DWORD PTR ds:0xc002b984,ebx
c0011347:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001134f:	83 ec 0c             	sub    esp,0xc
c0011352:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011356:	e8 65 e1 ff ff       	call   c000f4c0 <malloc>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	89 c3                	mov    ebx,eax
c0011360:	83 ec 08             	sub    esp,0x8
c0011363:	68 02 ff ff 0f       	push   0xfffff02
c0011368:	53                   	push   ebx
c0011369:	e8 9c 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c001136e:	83 c4 10             	add    esp,0x10
c0011371:	89 1d 88 b9 02 c0    	mov    DWORD PTR ds:0xc002b988,ebx
c0011377:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001137f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011384:	7f 7e                	jg     c0011404 <UnixFile::UnixFile(int)+0x1aa>
c0011386:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001138e:	83 ec 0c             	sub    esp,0xc
c0011391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011395:	e8 26 e1 ff ff       	call   c000f4c0 <malloc>
c001139a:	83 c4 10             	add    esp,0x10
c001139d:	89 c3                	mov    ebx,eax
c001139f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113a3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113a8:	83 ec 08             	sub    esp,0x8
c00113ab:	50                   	push   eax
c00113ac:	53                   	push   ebx
c00113ad:	e8 58 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b9:	89 1c 85 60 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd46a0],ebx
c00113c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113cf:	e8 ec e0 ff ff       	call   c000f4c0 <malloc>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	89 c3                	mov    ebx,eax
c00113d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113dd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113e2:	83 ec 08             	sub    esp,0x8
c00113e5:	50                   	push   eax
c00113e6:	53                   	push   ebx
c00113e7:	e8 1e 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c00113ec:	83 c4 10             	add    esp,0x10
c00113ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f3:	89 1c 85 20 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd46e0],ebx
c00113fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113fe:	e9 7c ff ff ff       	jmp    c001137f <UnixFile::UnixFile(int)+0x125>
c0011403:	90                   	nop
c0011404:	83 c4 28             	add    esp,0x28
c0011407:	5b                   	pop    ebx
c0011408:	c3                   	ret    
c0011409:	90                   	nop

c001140a <ReservedFilename::ReservedFilename(int)>:
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011411:	83 ec 08             	sub    esp,0x8
c0011414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011418:	50                   	push   eax
c0011419:	e8 3c fe ff ff       	call   c001125a <UnixFile::UnixFile(int)>
c001141e:	83 c4 10             	add    esp,0x10
c0011421:	ba b0 7f 02 c0       	mov    edx,0xc0027fb0
c0011426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142a:	89 10                	mov    DWORD PTR [eax],edx
c001142c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011430:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011434:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011437:	90                   	nop
c0011438:	83 c4 0c             	add    esp,0xc
c001143b:	c3                   	ret    

c001143c <UnixFile::~UnixFile()>:
c001143c:	83 ec 1c             	sub    esp,0x1c
c001143f:	ba 94 7f 02 c0       	mov    edx,0xc0027f94
c0011444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011448:	89 10                	mov    DWORD PTR [eax],edx
c001144a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001144e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011451:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011456:	7f 73                	jg     c00114cb <UnixFile::~UnixFile()+0x8f>
c0011458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	68 98 b9 02 c0       	push   0xc002b998
c0011468:	e8 e7 4e 01 00       	call   c0026354 <LinkedList<UnixFile>::getFirstElement()>
c001146d:	83 c4 10             	add    esp,0x10
c0011470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011474:	83 ec 0c             	sub    esp,0xc
c0011477:	68 98 b9 02 c0       	push   0xc002b998
c001147c:	e8 db 4e 01 00       	call   c002635c <LinkedList<UnixFile>::removeFirst()>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011488:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001148c:	74 40                	je     c00114ce <UnixFile::~UnixFile()+0x92>
c001148e:	83 ec 08             	sub    esp,0x8
c0011491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011495:	68 98 b9 02 c0       	push   0xc002b998
c001149a:	e8 e1 4d 01 00       	call   c0026280 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001149f:	83 c4 10             	add    esp,0x10
c00114a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114a6:	8d 50 01             	lea    edx,[eax+0x1]
c00114a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114ad:	3d 88 13 00 00       	cmp    eax,0x1388
c00114b2:	0f 94 c0             	sete   al
c00114b5:	84 c0                	test   al,al
c00114b7:	74 a7                	je     c0011460 <UnixFile::~UnixFile()+0x24>
c00114b9:	83 ec 0c             	sub    esp,0xc
c00114bc:	68 6c 7f 02 c0       	push   0xc0027f6c
c00114c1:	e8 91 7c 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	eb 95                	jmp    c0011460 <UnixFile::~UnixFile()+0x24>
c00114cb:	90                   	nop
c00114cc:	eb 01                	jmp    c00114cf <UnixFile::~UnixFile()+0x93>
c00114ce:	90                   	nop
c00114cf:	90                   	nop
c00114d0:	83 c4 1c             	add    esp,0x1c
c00114d3:	c3                   	ret    

c00114d4 <UnixFile::~UnixFile()>:
c00114d4:	83 ec 0c             	sub    esp,0xc
c00114d7:	83 ec 0c             	sub    esp,0xc
c00114da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114de:	e8 59 ff ff ff       	call   c001143c <UnixFile::~UnixFile()>
c00114e3:	83 c4 10             	add    esp,0x10
c00114e6:	83 ec 08             	sub    esp,0x8
c00114e9:	6a 0c                	push   0xc
c00114eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ef:	e8 b9 10 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c00114f4:	83 c4 10             	add    esp,0x10
c00114f7:	83 c4 0c             	add    esp,0xc
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <ReservedFilename::~ReservedFilename()>:
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	ba b0 7f 02 c0       	mov    edx,0xc0027fb0
c0011504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011508:	89 10                	mov    DWORD PTR [eax],edx
c001150a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001150e:	83 ec 0c             	sub    esp,0xc
c0011511:	50                   	push   eax
c0011512:	e8 25 ff ff ff       	call   c001143c <UnixFile::~UnixFile()>
c0011517:	83 c4 10             	add    esp,0x10
c001151a:	90                   	nop
c001151b:	83 c4 0c             	add    esp,0xc
c001151e:	c3                   	ret    
c001151f:	90                   	nop

c0011520 <ReservedFilename::~ReservedFilename()>:
c0011520:	83 ec 0c             	sub    esp,0xc
c0011523:	83 ec 0c             	sub    esp,0xc
c0011526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001152a:	e8 cd ff ff ff       	call   c00114fc <ReservedFilename::~ReservedFilename()>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	83 ec 08             	sub    esp,0x8
c0011535:	6a 0c                	push   0xc
c0011537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153b:	e8 6d 10 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c0011540:	83 c4 10             	add    esp,0x10
c0011543:	83 c4 0c             	add    esp,0xc
c0011546:	c3                   	ret    

c0011547 <getFromFileDescriptor(int)>:
c0011547:	53                   	push   ebx
c0011548:	83 ec 08             	sub    esp,0x8
c001154b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001154f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011555:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001155b:	7f 2c                	jg     c0011589 <getFromFileDescriptor(int)+0x42>
c001155d:	83 ec 0c             	sub    esp,0xc
c0011560:	68 98 b9 02 c0       	push   0xc002b998
c0011565:	e8 ea 4d 01 00       	call   c0026354 <LinkedList<UnixFile>::getFirstElement()>
c001156a:	83 c4 10             	add    esp,0x10
c001156d:	85 c0                	test   eax,eax
c001156f:	75 04                	jne    c0011575 <getFromFileDescriptor(int)+0x2e>
c0011571:	31 c0                	xor    eax,eax
c0011573:	eb 6e                	jmp    c00115e3 <getFromFileDescriptor(int)+0x9c>
c0011575:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011578:	74 69                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c001157a:	52                   	push   edx
c001157b:	52                   	push   edx
c001157c:	50                   	push   eax
c001157d:	68 98 b9 02 c0       	push   0xc002b998
c0011582:	e8 77 4e 01 00       	call   c00263fe <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011587:	eb e1                	jmp    c001156a <getFromFileDescriptor(int)+0x23>
c0011589:	a1 8c b9 02 c0       	mov    eax,ds:0xc002b98c
c001158e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011594:	74 4d                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c0011596:	a1 90 b9 02 c0       	mov    eax,ds:0xc002b990
c001159b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00115a1:	74 40                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115a3:	a1 88 b9 02 c0       	mov    eax,ds:0xc002b988
c00115a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115ae:	74 33                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115b0:	a1 84 b9 02 c0       	mov    eax,ds:0xc002b984
c00115b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115bb:	74 26                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00115c3:	83 f8 08             	cmp    eax,0x8
c00115c6:	77 09                	ja     c00115d1 <getFromFileDescriptor(int)+0x8a>
c00115c8:	8b 04 85 60 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd46a0]
c00115cf:	eb 12                	jmp    c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115d7:	83 fb 08             	cmp    ebx,0x8
c00115da:	77 95                	ja     c0011571 <getFromFileDescriptor(int)+0x2a>
c00115dc:	8b 04 9d 20 b9 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd46e0]
c00115e3:	83 c4 08             	add    esp,0x8
c00115e6:	5b                   	pop    ebx
c00115e7:	c3                   	ret    

c00115e8 <__static_initialization_and_destruction_0(int, int)>:
c00115e8:	83 ec 0c             	sub    esp,0xc
c00115eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115f0:	75 34                	jne    c0011626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115fa:	75 2a                	jne    c0011626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115fc:	83 ec 0c             	sub    esp,0xc
c00115ff:	68 98 b9 02 c0       	push   0xc002b998
c0011604:	e8 1f 4c 01 00       	call   c0026228 <LinkedList<UnixFile>::LinkedList()>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	83 ec 04             	sub    esp,0x4
c001160f:	68 d8 a7 02 c0       	push   0xc002a7d8
c0011614:	68 98 b9 02 c0       	push   0xc002b998
c0011619:	68 26 62 02 c0       	push   0xc0026226
c001161e:	e8 04 0f 00 00       	call   c0012527 <__cxa_atexit>
c0011623:	83 c4 10             	add    esp,0x10
c0011626:	90                   	nop
c0011627:	83 c4 0c             	add    esp,0xc
c001162a:	c3                   	ret    

c001162b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	68 ff ff 00 00       	push   0xffff
c0011636:	6a 01                	push   0x1
c0011638:	e8 ab ff ff ff       	call   c00115e8 <__static_initialization_and_destruction_0(int, int)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	83 c4 0c             	add    esp,0xc
c0011643:	c3                   	ret    

c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011644:	53                   	push   ebx
c0011645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001164d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011653:	89 c8                	mov    eax,ecx
c0011655:	d1 e8                	shr    eax,1
c0011657:	03 05 68 a8 02 c0    	add    eax,DWORD PTR ds:0xc002a868
c001165d:	83 e1 01             	and    ecx,0x1
c0011660:	8a 10                	mov    dl,BYTE PTR [eax]
c0011662:	75 09                	jne    c001166d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011664:	83 e2 f0             	and    edx,0xfffffff0
c0011667:	09 da                	or     edx,ebx
c0011669:	88 10                	mov    BYTE PTR [eax],dl
c001166b:	5b                   	pop    ebx
c001166c:	c3                   	ret    
c001166d:	c1 e3 04             	shl    ebx,0x4
c0011670:	83 e2 0f             	and    edx,0xf
c0011673:	09 da                	or     edx,ebx
c0011675:	88 10                	mov    BYTE PTR [eax],dl
c0011677:	5b                   	pop    ebx
c0011678:	c3                   	ret    

c0011679 <Virt::getPageState(unsigned long)>:
c0011679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167d:	8b 0d 68 a8 02 c0    	mov    ecx,DWORD PTR ds:0xc002a868
c0011683:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011689:	89 d0                	mov    eax,edx
c001168b:	d1 e8                	shr    eax,1
c001168d:	83 e2 01             	and    edx,0x1
c0011690:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011693:	75 04                	jne    c0011699 <Virt::getPageState(unsigned long)+0x20>
c0011695:	83 e0 0f             	and    eax,0xf
c0011698:	c3                   	ret    
c0011699:	c0 e8 04             	shr    al,0x4
c001169c:	c3                   	ret    

c001169d <Virt::allocateKernelVirtualPages(int)>:
c001169d:	55                   	push   ebp
c001169e:	31 ed                	xor    ebp,ebp
c00116a0:	57                   	push   edi
c00116a1:	56                   	push   esi
c00116a2:	53                   	push   ebx
c00116a3:	31 db                	xor    ebx,ebx
c00116a5:	83 ec 1c             	sub    esp,0x1c
c00116a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116ac:	8b 3d 64 a8 02 c0    	mov    edi,DWORD PTR ds:0xc002a864
c00116b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116b7:	57                   	push   edi
c00116b8:	e8 bc ff ff ff       	call   c0011679 <Virt::getPageState(unsigned long)>
c00116bd:	5a                   	pop    edx
c00116be:	84 c0                	test   al,al
c00116c0:	75 3a                	jne    c00116fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00116c2:	85 db                	test   ebx,ebx
c00116c4:	75 02                	jne    c00116c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00116c6:	89 fd                	mov    ebp,edi
c00116c8:	43                   	inc    ebx
c00116c9:	39 f3                	cmp    ebx,esi
c00116cb:	74 5a                	je     c0011727 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00116cd:	47                   	inc    edi
c00116ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116d4:	76 31                	jbe    c0011707 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116d6:	c7 05 64 a8 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002a864,0xc8000
c00116e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116e5:	75 28                	jne    c001170f <Virt::allocateKernelVirtualPages(int)+0x72>
c00116e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116f1:	57                   	push   edi
c00116f2:	e8 82 ff ff ff       	call   c0011679 <Virt::getPageState(unsigned long)>
c00116f7:	5a                   	pop    edx
c00116f8:	84 c0                	test   al,al
c00116fa:	74 c6                	je     c00116c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00116fc:	31 db                	xor    ebx,ebx
c00116fe:	47                   	inc    edi
c00116ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011705:	77 cf                	ja     c00116d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011707:	89 3d 64 a8 02 c0    	mov    DWORD PTR ds:0xc002a864,edi
c001170d:	eb a8                	jmp    c00116b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	68 c4 7f 02 c0       	push   0xc0027fc4
c0011717:	e8 3b 7a 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001171c:	8b 3d 64 a8 02 c0    	mov    edi,DWORD PTR ds:0xc002a864
c0011722:	83 c4 10             	add    esp,0x10
c0011725:	eb 90                	jmp    c00116b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011727:	89 2d 64 a8 02 c0    	mov    DWORD PTR ds:0xc002a864,ebp
c001172d:	4b                   	dec    ebx
c001172e:	74 5f                	je     c001178f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011730:	85 f6                	test   esi,esi
c0011732:	74 3d                	je     c0011771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011734:	89 e8                	mov    eax,ebp
c0011736:	31 db                	xor    ebx,ebx
c0011738:	8d 7e ff             	lea    edi,[esi-0x1]
c001173b:	eb 14                	jmp    c0011751 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001173d:	6a 01                	push   0x1
c001173f:	43                   	inc    ebx
c0011740:	50                   	push   eax
c0011741:	e8 fe fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011746:	58                   	pop    eax
c0011747:	39 f3                	cmp    ebx,esi
c0011749:	5a                   	pop    edx
c001174a:	74 25                	je     c0011771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001174c:	a1 64 a8 02 c0       	mov    eax,ds:0xc002a864
c0011751:	8d 50 01             	lea    edx,[eax+0x1]
c0011754:	85 db                	test   ebx,ebx
c0011756:	89 15 64 a8 02 c0    	mov    DWORD PTR ds:0xc002a864,edx
c001175c:	74 20                	je     c001177e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001175e:	39 df                	cmp    edi,ebx
c0011760:	75 db                	jne    c001173d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011762:	6a 03                	push   0x3
c0011764:	43                   	inc    ebx
c0011765:	50                   	push   eax
c0011766:	e8 d9 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001176b:	59                   	pop    ecx
c001176c:	39 f3                	cmp    ebx,esi
c001176e:	58                   	pop    eax
c001176f:	75 db                	jne    c001174c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011771:	83 c4 1c             	add    esp,0x1c
c0011774:	89 e8                	mov    eax,ebp
c0011776:	5b                   	pop    ebx
c0011777:	c1 e0 0c             	shl    eax,0xc
c001177a:	5e                   	pop    esi
c001177b:	5f                   	pop    edi
c001177c:	5d                   	pop    ebp
c001177d:	c3                   	ret    
c001177e:	6a 02                	push   0x2
c0011780:	bb 01 00 00 00       	mov    ebx,0x1
c0011785:	50                   	push   eax
c0011786:	e8 b9 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001178b:	58                   	pop    eax
c001178c:	5a                   	pop    edx
c001178d:	eb bd                	jmp    c001174c <Virt::allocateKernelVirtualPages(int)+0xaf>
c001178f:	6a 04                	push   0x4
c0011791:	8d 45 01             	lea    eax,[ebp+0x1]
c0011794:	55                   	push   ebp
c0011795:	a3 64 a8 02 c0       	mov    ds:0xc002a864,eax
c001179a:	e8 a5 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001179f:	59                   	pop    ecx
c00117a0:	89 e8                	mov    eax,ebp
c00117a2:	5b                   	pop    ebx
c00117a3:	c1 e0 0c             	shl    eax,0xc
c00117a6:	83 c4 1c             	add    esp,0x1c
c00117a9:	5b                   	pop    ebx
c00117aa:	5e                   	pop    esi
c00117ab:	5f                   	pop    edi
c00117ac:	5d                   	pop    ebp
c00117ad:	c3                   	ret    

c00117ae <Virt::virtualMemorySetup()>:
c00117ae:	53                   	push   ebx
c00117af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	6a 0f                	push   0xf
c00117b9:	53                   	push   ebx
c00117ba:	43                   	inc    ebx
c00117bb:	e8 84 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117c0:	59                   	pop    ecx
c00117c1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117c7:	58                   	pop    eax
c00117c8:	75 ed                	jne    c00117b7 <Virt::virtualMemorySetup()+0x9>
c00117ca:	83 ec 08             	sub    esp,0x8
c00117cd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117d2:	68 00 00 00 c8       	push   0xc8000000
c00117d7:	68 4b 81 02 c0       	push   0xc002814b
c00117dc:	e8 ac 0e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00117e1:	58                   	pop    eax
c00117e2:	5a                   	pop    edx
c00117e3:	68 00 f0 ff ef       	push   0xeffff000
c00117e8:	68 5f 81 02 c0       	push   0xc002815f
c00117ed:	e8 9b 0e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	83 ec 08             	sub    esp,0x8
c00117f8:	6a 00                	push   0x0
c00117fa:	53                   	push   ebx
c00117fb:	43                   	inc    ebx
c00117fc:	e8 43 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001180a:	75 e9                	jne    c00117f5 <Virt::virtualMemorySetup()+0x47>
c001180c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011811:	83 ec 08             	sub    esp,0x8
c0011814:	6a 0f                	push   0xf
c0011816:	53                   	push   ebx
c0011817:	43                   	inc    ebx
c0011818:	e8 27 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011826:	75 e9                	jne    c0011811 <Virt::virtualMemorySetup()+0x63>
c0011828:	83 c4 08             	add    esp,0x8
c001182b:	5b                   	pop    ebx
c001182c:	c3                   	ret    

c001182d <Virt::getAKernelVAS()>:
c001182d:	a1 a4 b9 02 c0       	mov    eax,ds:0xc002b9a4
c0011832:	c3                   	ret    

c0011833 <Virt::setupPageSwapping(int)>:
c0011833:	57                   	push   edi
c0011834:	56                   	push   esi
c0011835:	53                   	push   ebx
c0011836:	83 ec 1c             	sub    esp,0x1c
c0011839:	68 14 01 00 00       	push   0x114
c001183e:	e8 7d dc ff ff       	call   c000f4c0 <malloc>
c0011843:	83 c4 0c             	add    esp,0xc
c0011846:	89 c6                	mov    esi,eax
c0011848:	ff 35 54 cd 02 c0    	push   DWORD PTR ds:0xc002cd54
c001184e:	68 73 81 02 c0       	push   0xc0028173
c0011853:	50                   	push   eax
c0011854:	e8 63 13 00 00       	call   c0012bbc <File::File(char const*, Process*)>
c0011859:	89 34 24             	mov    DWORD PTR [esp],esi
c001185c:	e8 37 15 00 00       	call   c0012d98 <File::unlink()>
c0011861:	58                   	pop    eax
c0011862:	5a                   	pop    edx
c0011863:	6a 12                	push   0x12
c0011865:	56                   	push   esi
c0011866:	e8 b5 13 00 00       	call   c0012c20 <File::open(FileOpenMode)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	85 c0                	test   eax,eax
c0011870:	0f 85 ca 00 00 00    	jne    c0011940 <Virt::setupPageSwapping(int)+0x10d>
c0011876:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001187a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011882:	c1 e3 08             	shl    ebx,0x8
c0011885:	83 ec 0c             	sub    esp,0xc
c0011888:	68 00 00 01 00       	push   0x10000
c001188d:	e8 2e dc ff ff       	call   c000f4c0 <malloc>
c0011892:	83 c4 0c             	add    esp,0xc
c0011895:	89 c7                	mov    edi,eax
c0011897:	68 00 00 01 00       	push   0x10000
c001189c:	6a 00                	push   0x0
c001189e:	50                   	push   eax
c001189f:	e8 d7 ed fe ff       	call   c000067b <memset>
c00118a4:	83 c4 10             	add    esp,0x10
c00118a7:	85 db                	test   ebx,ebx
c00118a9:	79 03                	jns    c00118ae <Virt::setupPageSwapping(int)+0x7b>
c00118ab:	83 c3 0f             	add    ebx,0xf
c00118ae:	c1 fb 04             	sar    ebx,0x4
c00118b1:	4b                   	dec    ebx
c00118b2:	83 fb ff             	cmp    ebx,0xffffffff
c00118b5:	74 4b                	je     c0011902 <Virt::setupPageSwapping(int)+0xcf>
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00118bc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118c0:	52                   	push   edx
c00118c1:	57                   	push   edi
c00118c2:	6a 00                	push   0x0
c00118c4:	68 00 00 01 00       	push   0x10000
c00118c9:	56                   	push   esi
c00118ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118cd:	83 c4 20             	add    esp,0x20
c00118d0:	85 c0                	test   eax,eax
c00118d2:	75 59                	jne    c001192d <Virt::setupPageSwapping(int)+0xfa>
c00118d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d8:	3d 00 00 01 00       	cmp    eax,0x10000
c00118dd:	74 d2                	je     c00118b1 <Virt::setupPageSwapping(int)+0x7e>
c00118df:	83 ec 08             	sub    esp,0x8
c00118e2:	4b                   	dec    ebx
c00118e3:	50                   	push   eax
c00118e4:	68 c6 81 02 c0       	push   0xc00281c6
c00118e9:	e8 9f 0d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00118ee:	c7 04 24 cf 81 02 c0 	mov    DWORD PTR [esp],0xc00281cf
c00118f5:	e8 5d 78 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00118fa:	83 c4 10             	add    esp,0x10
c00118fd:	83 fb ff             	cmp    ebx,0xffffffff
c0011900:	75 b5                	jne    c00118b7 <Virt::setupPageSwapping(int)+0x84>
c0011902:	83 ec 0c             	sub    esp,0xc
c0011905:	56                   	push   esi
c0011906:	e8 73 13 00 00       	call   c0012c7e <File::close()>
c001190b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001190e:	e8 cd db ff ff       	call   c000f4e0 <rfree>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	85 f6                	test   esi,esi
c0011918:	74 0c                	je     c0011926 <Virt::setupPageSwapping(int)+0xf3>
c001191a:	83 ec 0c             	sub    esp,0xc
c001191d:	8b 06                	mov    eax,DWORD PTR [esi]
c001191f:	56                   	push   esi
c0011920:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	5b                   	pop    ebx
c001192a:	5e                   	pop    esi
c001192b:	5f                   	pop    edi
c001192c:	c3                   	ret    
c001192d:	83 ec 08             	sub    esp,0x8
c0011930:	50                   	push   eax
c0011931:	68 ae 81 02 c0       	push   0xc00281ae
c0011936:	e8 52 0d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	eb 94                	jmp    c00118d4 <Virt::setupPageSwapping(int)+0xa1>
c0011940:	83 ec 08             	sub    esp,0x8
c0011943:	50                   	push   eax
c0011944:	68 8a 81 02 c0       	push   0xc002818a
c0011949:	e8 3f 0d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001194e:	c7 04 24 93 81 02 c0 	mov    DWORD PTR [esp],0xc0028193
c0011955:	e8 fd 77 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001195a:	83 c4 10             	add    esp,0x10
c001195d:	e9 14 ff ff ff       	jmp    c0011876 <Virt::setupPageSwapping(int)+0x43>

c0011962 <VAS::VAS()>:
c0011962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011966:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001196d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011971:	a3 a4 b9 02 c0       	mov    ds:0xc002b9a4,eax
c0011976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197a:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001197e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011982:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011989:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011990:	90                   	nop
c0011991:	c3                   	ret    

c0011992 <VAS::VAS(VAS*)>:
c0011992:	83 ec 0c             	sub    esp,0xc
c0011995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011999:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119a0:	83 ec 0c             	sub    esp,0xc
c00119a3:	68 e4 7f 02 c0       	push   0xc0027fe4
c00119a8:	e8 aa 77 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00119ad:	83 c4 10             	add    esp,0x10
c00119b0:	90                   	nop
c00119b1:	83 c4 0c             	add    esp,0xc
c00119b4:	c3                   	ret    
c00119b5:	90                   	nop

c00119b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ba:	89 c2                	mov    edx,eax
c00119bc:	c1 e8 0a             	shr    eax,0xa
c00119bf:	c1 ea 16             	shr    edx,0x16
c00119c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119c7:	19 c9                	sbb    ecx,ecx
c00119c9:	c1 e2 0c             	shl    edx,0xc
c00119cc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00119d2:	25 fc 0f 00 00       	and    eax,0xffc
c00119d7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00119de:	01 d0                	add    eax,edx
c00119e0:	c3                   	ret    
c00119e1:	90                   	nop

c00119e2 <VAS::getPageTableEntry(unsigned long)>:
c00119e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00119e6:	89 ca                	mov    edx,ecx
c00119e8:	c1 e9 0a             	shr    ecx,0xa
c00119eb:	c1 ea 16             	shr    edx,0x16
c00119ee:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119f4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119fa:	c1 e0 0c             	shl    eax,0xc
c00119fd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011a00:	c3                   	ret    

c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011a01:	57                   	push   edi
c0011a02:	56                   	push   esi
c0011a03:	be 01 00 00 00       	mov    esi,0x1
c0011a08:	53                   	push   ebx
c0011a09:	83 ec 10             	sub    esp,0x10
c0011a0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a10:	c1 eb 0c             	shr    ebx,0xc
c0011a13:	eb 3f                	jmp    c0011a54 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a15:	e8 13 fe ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	57                   	push   edi
c0011a1e:	50                   	push   eax
c0011a1f:	e8 be ff ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a29:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a2d:	f6 c4 04             	test   ah,0x4
c0011a30:	75 5f                	jne    c0011a91 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a32:	80 fa 04             	cmp    dl,0x4
c0011a35:	74 78                	je     c0011aaf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a37:	80 fa 02             	cmp    dl,0x2
c0011a3a:	0f 84 88 00 00 00    	je     c0011ac8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a40:	80 fa 03             	cmp    dl,0x3
c0011a43:	0f 84 ad 00 00 00    	je     c0011af6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a49:	fe ca                	dec    dl
c0011a4b:	0f 84 92 00 00 00    	je     c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a51:	43                   	inc    ebx
c0011a52:	31 f6                	xor    esi,esi
c0011a54:	53                   	push   ebx
c0011a55:	e8 1f fc ff ff       	call   c0011679 <Virt::getPageState(unsigned long)>
c0011a5a:	5f                   	pop    edi
c0011a5b:	89 df                	mov    edi,ebx
c0011a5d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a61:	c1 e7 0c             	shl    edi,0xc
c0011a64:	84 c0                	test   al,al
c0011a66:	75 ad                	jne    c0011a15 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a68:	83 ec 0c             	sub    esp,0xc
c0011a6b:	68 d5 81 02 c0       	push   0xc00281d5
c0011a70:	e8 e2 76 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011a75:	e8 b3 fd ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0011a7a:	5a                   	pop    edx
c0011a7b:	59                   	pop    ecx
c0011a7c:	57                   	push   edi
c0011a7d:	50                   	push   eax
c0011a7e:	e8 5f ff ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011a83:	83 c4 10             	add    esp,0x10
c0011a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a88:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a8c:	f6 c4 04             	test   ah,0x4
c0011a8f:	74 c0                	je     c0011a51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a91:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a95:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a9a:	83 ec 0c             	sub    esp,0xc
c0011a9d:	50                   	push   eax
c0011a9e:	e8 3d df ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011aa3:	83 c4 10             	add    esp,0x10
c0011aa6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011aaa:	80 fa 04             	cmp    dl,0x4
c0011aad:	75 88                	jne    c0011a37 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011aaf:	89 f0                	mov    eax,esi
c0011ab1:	84 c0                	test   al,al
c0011ab3:	75 47                	jne    c0011afc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ab5:	c7 44 24 20 08 80 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028008
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	5b                   	pop    ebx
c0011ac1:	5e                   	pop    esi
c0011ac2:	5f                   	pop    edi
c0011ac3:	e9 8f 76 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c0011ac8:	89 f0                	mov    eax,esi
c0011aca:	84 c0                	test   al,al
c0011acc:	75 15                	jne    c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ace:	83 ec 0c             	sub    esp,0xc
c0011ad1:	68 f1 81 02 c0       	push   0xc00281f1
c0011ad6:	e8 7c 76 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	e9 6e ff ff ff       	jmp    c0011a51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ae3:	83 ec 08             	sub    esp,0x8
c0011ae6:	6a 00                	push   0x0
c0011ae8:	53                   	push   ebx
c0011ae9:	e8 56 fb ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	e9 5b ff ff ff       	jmp    c0011a51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011af6:	89 f0                	mov    eax,esi
c0011af8:	84 c0                	test   al,al
c0011afa:	75 15                	jne    c0011b11 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011afc:	83 ec 08             	sub    esp,0x8
c0011aff:	6a 00                	push   0x0
c0011b01:	53                   	push   ebx
c0011b02:	e8 3d fb ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	5b                   	pop    ebx
c0011b0e:	5e                   	pop    esi
c0011b0f:	5f                   	pop    edi
c0011b10:	c3                   	ret    
c0011b11:	c7 44 24 20 0d 82 02 c0 	mov    DWORD PTR [esp+0x20],0xc002820d
c0011b19:	83 c4 10             	add    esp,0x10
c0011b1c:	5b                   	pop    ebx
c0011b1d:	5e                   	pop    esi
c0011b1e:	5f                   	pop    edi
c0011b1f:	e9 33 76 00 00       	jmp    c0019157 <Krnl::panic(char const*)>

c0011b24 <VAS::freeAllocatedPages(unsigned long)>:
c0011b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b2c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b30:	74 09                	je     c0011b3b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b36:	e9 c6 fe ff ff       	jmp    c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b3b:	c7 44 24 04 2c 80 02 c0 	mov    DWORD PTR [esp+0x4],0xc002802c
c0011b43:	e9 45 0b 00 00       	jmp    c001268d <Dbg::kprintf(char const*, ...)>

c0011b48 <VAS::virtualToPhysical(unsigned long)>:
c0011b48:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b4c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b50:	e8 8d fe ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011b55:	5a                   	pop    edx
c0011b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b58:	59                   	pop    ecx
c0011b59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b5e:	c3                   	ret    
c0011b5f:	90                   	nop

c0011b60 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b60:	55                   	push   ebp
c0011b61:	57                   	push   edi
c0011b62:	56                   	push   esi
c0011b63:	53                   	push   ebx
c0011b64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b68:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b6c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b70:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b74:	85 db                	test   ebx,ebx
c0011b76:	7e 22                	jle    c0011b9a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b78:	c1 e3 0c             	shl    ebx,0xc
c0011b7b:	01 f3                	add    ebx,esi
c0011b7d:	56                   	push   esi
c0011b7e:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b84:	55                   	push   ebp
c0011b85:	e8 58 fe ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011b8a:	5a                   	pop    edx
c0011b8b:	59                   	pop    ecx
c0011b8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b8e:	21 f9                	and    ecx,edi
c0011b90:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b94:	39 f3                	cmp    ebx,esi
c0011b96:	89 08                	mov    DWORD PTR [eax],ecx
c0011b98:	75 e3                	jne    c0011b7d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b9a:	5b                   	pop    ebx
c0011b9b:	5e                   	pop    esi
c0011b9c:	5f                   	pop    edi
c0011b9d:	5d                   	pop    ebp
c0011b9e:	c3                   	ret    
c0011b9f:	90                   	nop

c0011ba0 <VAS::setToWriteCombining(unsigned long, int)>:
c0011ba0:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0011ba5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bab:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011bb2:	75 01                	jne    c0011bb5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bb4:	c3                   	ret    
c0011bb5:	68 80 00 00 00       	push   0x80
c0011bba:	6a ff                	push   0xffffffff
c0011bbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc8:	e8 93 ff ff ff       	call   c0011b60 <VAS::reflagRange(unsigned long, int, int, int)>
c0011bcd:	83 c4 14             	add    esp,0x14
c0011bd0:	c3                   	ret    
c0011bd1:	90                   	nop

c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011bd2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011bd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bdb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be2:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011be5:	19 c0                	sbb    eax,eax
c0011be7:	83 ca 03             	or     edx,0x3
c0011bea:	83 e0 fc             	and    eax,0xfffffffc
c0011bed:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011bf4:	0f 20 d8             	mov    eax,cr3
c0011bf7:	0f 22 d8             	mov    cr3,eax
c0011bfa:	c3                   	ret    
c0011bfb:	90                   	nop

c0011bfc <VAS::~VAS()>:
c0011bfc:	83 ec 2c             	sub    esp,0x2c
c0011bff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c07:	e8 91 a5 00 00       	call   c001c19d <lockScheduler()>
c0011c0c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c16:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c1c:	83 ec 04             	sub    esp,0x4
c0011c1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c23:	6a 01                	push   0x1
c0011c25:	50                   	push   eax
c0011c26:	e8 a7 ff ff ff       	call   c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>
c0011c2b:	83 c4 10             	add    esp,0x10
c0011c2e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c36:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c3e:	0f 8f d7 00 00 00    	jg     c0011d1b <VAS::~VAS()+0x11f>
c0011c44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c4f:	c1 e2 02             	shl    edx,0x2
c0011c52:	01 d0                	add    eax,edx
c0011c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c5e:	83 e0 01             	and    eax,0x1
c0011c61:	0f 84 ab 00 00 00    	je     c0011d12 <VAS::~VAS()+0x116>
c0011c67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c6f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c77:	7f 75                	jg     c0011cee <VAS::~VAS()+0xf2>
c0011c79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c7d:	c1 e0 0a             	shl    eax,0xa
c0011c80:	89 c2                	mov    edx,eax
c0011c82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c86:	01 d0                	add    eax,edx
c0011c88:	c1 e0 0c             	shl    eax,0xc
c0011c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c99:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c9f:	83 ec 04             	sub    esp,0x4
c0011ca2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ca6:	6a 01                	push   0x1
c0011ca8:	50                   	push   eax
c0011ca9:	e8 08 fd ff ff       	call   c00119b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011cb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc3:	25 01 04 00 00       	and    eax,0x401
c0011cc8:	3d 01 04 00 00       	cmp    eax,0x401
c0011ccd:	75 19                	jne    c0011ce8 <VAS::~VAS()+0xec>
c0011ccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	50                   	push   eax
c0011cdc:	e8 ff dc ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ce8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011cec:	eb 81                	jmp    c0011c6f <VAS::~VAS()+0x73>
c0011cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf2:	25 00 04 00 00       	and    eax,0x400
c0011cf7:	74 19                	je     c0011d12 <VAS::~VAS()+0x116>
c0011cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cfd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d02:	83 ec 0c             	sub    esp,0xc
c0011d05:	50                   	push   eax
c0011d06:	e8 d5 dc ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d12:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d16:	e9 1b ff ff ff       	jmp    c0011c36 <VAS::~VAS()+0x3a>
c0011d1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d22:	83 ec 0c             	sub    esp,0xc
c0011d25:	50                   	push   eax
c0011d26:	e8 d6 fc ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d2b:	83 c4 10             	add    esp,0x10
c0011d2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d35:	83 ec 0c             	sub    esp,0xc
c0011d38:	50                   	push   eax
c0011d39:	e8 a2 dc ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d49:	c1 e0 02             	shl    eax,0x2
c0011d4c:	83 ec 08             	sub    esp,0x8
c0011d4f:	50                   	push   eax
c0011d50:	68 50 80 02 c0       	push   0xc0028050
c0011d55:	e8 33 09 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	e8 3d a4 00 00       	call   c001c19f <unlockScheduler()>
c0011d62:	90                   	nop
c0011d63:	83 c4 2c             	add    esp,0x2c
c0011d66:	c3                   	ret    
c0011d67:	90                   	nop

c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d68:	55                   	push   ebp
c0011d69:	57                   	push   edi
c0011d6a:	56                   	push   esi
c0011d6b:	53                   	push   ebx
c0011d6c:	83 ec 1c             	sub    esp,0x1c
c0011d6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d77:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d7d:	77 08                	ja     c0011d87 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d7f:	0f 20 d8             	mov    eax,cr3
c0011d82:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d85:	75 47                	jne    c0011dce <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d8b:	09 d8                	or     eax,ebx
c0011d8d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d92:	75 57                	jne    c0011deb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d94:	89 de                	mov    esi,ebx
c0011d96:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d99:	c1 ee 16             	shr    esi,0x16
c0011d9c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011da3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011da7:	74 54                	je     c0011dfd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011da9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dad:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011db3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011db7:	c1 e6 0c             	shl    esi,0xc
c0011dba:	c1 eb 0a             	shr    ebx,0xa
c0011dbd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011dc3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011dc6:	83 c4 1c             	add    esp,0x1c
c0011dc9:	5b                   	pop    ebx
c0011dca:	5e                   	pop    esi
c0011dcb:	5f                   	pop    edi
c0011dcc:	5d                   	pop    ebp
c0011dcd:	c3                   	ret    
c0011dce:	83 ec 0c             	sub    esp,0xc
c0011dd1:	68 70 80 02 c0       	push   0xc0028070
c0011dd6:	e8 b2 08 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0011ddb:	83 c4 10             	add    esp,0x10
c0011dde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011de2:	09 d8                	or     eax,ebx
c0011de4:	a9 ff 0f 00 00       	test   eax,0xfff
c0011de9:	74 a9                	je     c0011d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011deb:	83 ec 0c             	sub    esp,0xc
c0011dee:	68 d8 80 02 c0       	push   0xc00280d8
c0011df3:	e8 5f 73 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011df8:	83 c4 10             	add    esp,0x10
c0011dfb:	eb 97                	jmp    c0011d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011dfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e01:	e8 64 dc ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011e06:	89 c5                	mov    ebp,eax
c0011e08:	e8 20 fa ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0011e0d:	83 ec 0c             	sub    esp,0xc
c0011e10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e14:	6a 01                	push   0x1
c0011e16:	e8 82 f8 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0011e1b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e22:	6a 01                	push   0x1
c0011e24:	50                   	push   eax
c0011e25:	55                   	push   ebp
c0011e26:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e2c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e30:	51                   	push   ecx
c0011e31:	e8 26 02 00 00       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e36:	83 c4 1c             	add    esp,0x1c
c0011e39:	68 00 10 00 00       	push   0x1000
c0011e3e:	6a 00                	push   0x0
c0011e40:	50                   	push   eax
c0011e41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e45:	e8 31 e8 fe ff       	call   c000067b <memset>
c0011e4a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e4e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e51:	e8 ab fb ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e5a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e63:	e9 41 ff ff ff       	jmp    c0011da9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e68 <VAS::allocatePages(int, int)>:
c0011e68:	55                   	push   ebp
c0011e69:	57                   	push   edi
c0011e6a:	56                   	push   esi
c0011e6b:	53                   	push   ebx
c0011e6c:	83 ec 1c             	sub    esp,0x1c
c0011e6f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e73:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0011e78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e7e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e84:	83 e0 01             	and    eax,0x1
c0011e87:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e8b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e8f:	0f 85 cc 00 00 00    	jne    c0011f61 <VAS::allocatePages(int, int)+0xf9>
c0011e95:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e9c:	85 c0                	test   eax,eax
c0011e9e:	0f 84 a1 00 00 00    	je     c0011f45 <VAS::allocatePages(int, int)+0xdd>
c0011ea4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ea8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eac:	c1 e6 0c             	shl    esi,0xc
c0011eaf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011eb3:	85 c0                	test   eax,eax
c0011eb5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011eb8:	7e 33                	jle    c0011eed <VAS::allocatePages(int, int)+0x85>
c0011eba:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ebe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ec2:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ec8:	e8 9d db ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011ecd:	55                   	push   ebp
c0011ece:	53                   	push   ebx
c0011ecf:	50                   	push   eax
c0011ed0:	57                   	push   edi
c0011ed1:	e8 92 fe ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ed6:	83 c4 10             	add    esp,0x10
c0011ed9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ede:	74 03                	je     c0011ee3 <VAS::allocatePages(int, int)+0x7b>
c0011ee0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ee3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ee9:	39 de                	cmp    esi,ebx
c0011eeb:	75 db                	jne    c0011ec8 <VAS::allocatePages(int, int)+0x60>
c0011eed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ef2:	75 12                	jne    c0011f06 <VAS::allocatePages(int, int)+0x9e>
c0011ef4:	0f 20 d8             	mov    eax,cr3
c0011ef7:	0f 22 d8             	mov    cr3,eax
c0011efa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011efe:	83 c4 1c             	add    esp,0x1c
c0011f01:	5b                   	pop    ebx
c0011f02:	5e                   	pop    esi
c0011f03:	5f                   	pop    edi
c0011f04:	5d                   	pop    ebp
c0011f05:	c3                   	ret    
c0011f06:	c1 ee 0a             	shr    esi,0xa
c0011f09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f0d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f13:	c1 eb 0a             	shr    ebx,0xa
c0011f16:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f1c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f22:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f28:	39 c3                	cmp    ebx,eax
c0011f2a:	77 ce                	ja     c0011efa <VAS::allocatePages(int, int)+0x92>
c0011f2c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f2f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f35:	39 d8                	cmp    eax,ebx
c0011f37:	73 f3                	jae    c0011f2c <VAS::allocatePages(int, int)+0xc4>
c0011f39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f3d:	83 c4 1c             	add    esp,0x1c
c0011f40:	5b                   	pop    ebx
c0011f41:	5e                   	pop    esi
c0011f42:	5f                   	pop    edi
c0011f43:	5d                   	pop    ebp
c0011f44:	c3                   	ret    
c0011f45:	83 ec 0c             	sub    esp,0xc
c0011f48:	68 fc 80 02 c0       	push   0xc00280fc
c0011f4d:	e8 05 72 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011f52:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	e9 43 ff ff ff       	jmp    c0011ea4 <VAS::allocatePages(int, int)+0x3c>
c0011f61:	83 ec 0c             	sub    esp,0xc
c0011f64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f68:	e8 30 f7 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0011f6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f79:	0f 87 9b 00 00 00    	ja     c001201a <VAS::allocatePages(int, int)+0x1b2>
c0011f7f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f83:	85 d2                	test   edx,edx
c0011f85:	7e 3c                	jle    c0011fc3 <VAS::allocatePages(int, int)+0x15b>
c0011f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f8b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f93:	c1 e5 0c             	shl    ebp,0xc
c0011f96:	81 ce 00 04 00 00    	or     esi,0x400
c0011f9c:	01 dd                	add    ebp,ebx
c0011f9e:	e8 c7 da ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011fa3:	56                   	push   esi
c0011fa4:	53                   	push   ebx
c0011fa5:	50                   	push   eax
c0011fa6:	57                   	push   edi
c0011fa7:	e8 bc fd ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fac:	83 c4 10             	add    esp,0x10
c0011faf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fb4:	74 03                	je     c0011fb9 <VAS::allocatePages(int, int)+0x151>
c0011fb6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fb9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fbf:	39 dd                	cmp    ebp,ebx
c0011fc1:	75 db                	jne    c0011f9e <VAS::allocatePages(int, int)+0x136>
c0011fc3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fc8:	0f 84 26 ff ff ff    	je     c0011ef4 <VAS::allocatePages(int, int)+0x8c>
c0011fce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fd6:	89 d3                	mov    ebx,edx
c0011fd8:	c1 e0 0c             	shl    eax,0xc
c0011fdb:	c1 eb 0a             	shr    ebx,0xa
c0011fde:	01 d0                	add    eax,edx
c0011fe0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fe6:	c1 e8 0a             	shr    eax,0xa
c0011fe9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fef:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ff4:	2d 00 00 40 00       	sub    eax,0x400000
c0011ff9:	39 c3                	cmp    ebx,eax
c0011ffb:	0f 87 f9 fe ff ff    	ja     c0011efa <VAS::allocatePages(int, int)+0x92>
c0012001:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012004:	81 c3 00 10 00 00    	add    ebx,0x1000
c001200a:	39 d8                	cmp    eax,ebx
c001200c:	73 f3                	jae    c0012001 <VAS::allocatePages(int, int)+0x199>
c001200e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012012:	83 c4 1c             	add    esp,0x1c
c0012015:	5b                   	pop    ebx
c0012016:	5e                   	pop    esi
c0012017:	5f                   	pop    edi
c0012018:	5d                   	pop    ebp
c0012019:	c3                   	ret    
c001201a:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001201f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012025:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001202c:	0f 84 4d ff ff ff    	je     c0011f7f <VAS::allocatePages(int, int)+0x117>
c0012032:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001203a:	e9 40 ff ff ff       	jmp    c0011f7f <VAS::allocatePages(int, int)+0x117>
c001203f:	90                   	nop

c0012040 <VAS::setCPUSpecific(unsigned long)>:
c0012040:	83 ec 0c             	sub    esp,0xc
c0012043:	6a 05                	push   0x5
c0012045:	68 00 00 40 c2       	push   0xc2400000
c001204a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001204e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012052:	e8 11 fd ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012057:	83 c4 1c             	add    esp,0x1c
c001205a:	c3                   	ret    
c001205b:	90                   	nop

c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001205c:	55                   	push   ebp
c001205d:	57                   	push   edi
c001205e:	56                   	push   esi
c001205f:	53                   	push   ebx
c0012060:	83 ec 1c             	sub    esp,0x1c
c0012063:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0012068:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001206c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012072:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012076:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001207c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012080:	83 e0 01             	and    eax,0x1
c0012083:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012087:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001208b:	85 c0                	test   eax,eax
c001208d:	7e 39                	jle    c00120c8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001208f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012093:	89 f3                	mov    ebx,esi
c0012095:	c1 e0 0c             	shl    eax,0xc
c0012098:	01 f0                	add    eax,esi
c001209a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001209e:	55                   	push   ebp
c001209f:	53                   	push   ebx
c00120a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120a4:	29 f0                	sub    eax,esi
c00120a6:	01 d8                	add    eax,ebx
c00120a8:	50                   	push   eax
c00120a9:	57                   	push   edi
c00120aa:	e8 b9 fc ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120b7:	74 03                	je     c00120bc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120b9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120bc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120c2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00120c6:	75 d6                	jne    c001209e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00120c8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120cd:	75 10                	jne    c00120df <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00120cf:	0f 20 d8             	mov    eax,cr3
c00120d2:	0f 22 d8             	mov    cr3,eax
c00120d5:	83 c4 1c             	add    esp,0x1c
c00120d8:	89 f0                	mov    eax,esi
c00120da:	5b                   	pop    ebx
c00120db:	5e                   	pop    esi
c00120dc:	5f                   	pop    edi
c00120dd:	5d                   	pop    ebp
c00120de:	c3                   	ret    
c00120df:	89 f3                	mov    ebx,esi
c00120e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120e5:	c1 eb 0a             	shr    ebx,0xa
c00120e8:	c1 e0 0c             	shl    eax,0xc
c00120eb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120f1:	01 f0                	add    eax,esi
c00120f3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120f9:	c1 e8 0a             	shr    eax,0xa
c00120fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012101:	2d 00 00 40 00       	sub    eax,0x400000
c0012106:	39 c3                	cmp    ebx,eax
c0012108:	77 cb                	ja     c00120d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001210a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001210d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012113:	39 d8                	cmp    eax,ebx
c0012115:	73 f3                	jae    c001210a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012117:	83 c4 1c             	add    esp,0x1c
c001211a:	89 f0                	mov    eax,esi
c001211c:	5b                   	pop    ebx
c001211d:	5e                   	pop    esi
c001211e:	5f                   	pop    edi
c001211f:	5d                   	pop    ebp
c0012120:	c3                   	ret    
c0012121:	90                   	nop

c0012122 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012122:	55                   	push   ebp
c0012123:	57                   	push   edi
c0012124:	56                   	push   esi
c0012125:	53                   	push   ebx
c0012126:	83 ec 1c             	sub    esp,0x1c
c0012129:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001212d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012131:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012135:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012139:	a9 ff 0f 00 00       	test   eax,0xfff
c001213e:	75 4a                	jne    c001218a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012144:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012147:	c1 eb 16             	shr    ebx,0x16
c001214a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012151:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012155:	74 4d                	je     c00121a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012157:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001215b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001215f:	c1 e8 0a             	shr    eax,0xa
c0012162:	80 fa 01             	cmp    dl,0x1
c0012165:	19 d2                	sbb    edx,edx
c0012167:	c1 e3 0c             	shl    ebx,0xc
c001216a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001216e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012174:	25 fc 0f 00 00       	and    eax,0xffc
c0012179:	01 d8                	add    eax,ebx
c001217b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012182:	83 c4 1c             	add    esp,0x1c
c0012185:	5b                   	pop    ebx
c0012186:	5e                   	pop    esi
c0012187:	5f                   	pop    edi
c0012188:	5d                   	pop    ebp
c0012189:	c3                   	ret    
c001218a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001218e:	83 ec 0c             	sub    esp,0xc
c0012191:	68 28 81 02 c0       	push   0xc0028128
c0012196:	e8 bc 6f 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121a2:	eb 9c                	jmp    c0012140 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00121a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121a8:	e8 bd d8 ff ff       	call   c000fa6a <Phys::allocatePage()>
c00121ad:	89 c5                	mov    ebp,eax
c00121af:	e8 79 f6 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c00121b4:	83 ec 0c             	sub    esp,0xc
c00121b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121bb:	6a 01                	push   0x1
c00121bd:	e8 db f4 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c00121c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00121c9:	6a 01                	push   0x1
c00121cb:	50                   	push   eax
c00121cc:	55                   	push   ebp
c00121cd:	81 cd 07 04 00 00    	or     ebp,0x407
c00121d3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00121d7:	51                   	push   ecx
c00121d8:	e8 7f fe ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121dd:	83 c4 1c             	add    esp,0x1c
c00121e0:	68 00 10 00 00       	push   0x1000
c00121e5:	6a 00                	push   0x0
c00121e7:	50                   	push   eax
c00121e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121ec:	e8 8a e4 fe ff       	call   c000067b <memset>
c00121f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121f5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121f8:	e8 04 f8 ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c00121fd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012200:	83 c4 10             	add    esp,0x10
c0012203:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012206:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001220a:	e9 48 ff ff ff       	jmp    c0012157 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001220f:	90                   	nop

c0012210 <VAS::VAS(bool)>:
c0012210:	53                   	push   ebx
c0012211:	83 ec 28             	sub    esp,0x28
c0012214:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012218:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001221c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012220:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012227:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001222f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012232:	e8 33 d8 ff ff       	call   c000fa6a <Phys::allocatePage()>
c0012237:	89 c2                	mov    edx,eax
c0012239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012240:	e8 e8 f5 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0012245:	89 c3                	mov    ebx,eax
c0012247:	83 ec 0c             	sub    esp,0xc
c001224a:	6a 01                	push   0x1
c001224c:	e8 4c f4 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0012251:	83 c4 10             	add    esp,0x10
c0012254:	89 c2                	mov    edx,eax
c0012256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001225d:	83 ec 0c             	sub    esp,0xc
c0012260:	6a 03                	push   0x3
c0012262:	6a 01                	push   0x1
c0012264:	52                   	push   edx
c0012265:	50                   	push   eax
c0012266:	53                   	push   ebx
c0012267:	e8 f0 fd ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001226c:	83 c4 20             	add    esp,0x20
c001226f:	89 c2                	mov    edx,eax
c0012271:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012275:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012278:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012280:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012288:	7f 1c                	jg     c00122a6 <VAS::VAS(bool)+0x96>
c001228a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001228e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012291:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012295:	c1 e2 02             	shl    edx,0x2
c0012298:	01 d0                	add    eax,edx
c001229a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122a4:	eb da                	jmp    c0012280 <VAS::VAS(bool)+0x70>
c00122a6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122ae:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122b6:	7f 7a                	jg     c0012332 <VAS::VAS(bool)+0x122>
c00122b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122bc:	2d 00 02 00 00       	sub    eax,0x200
c00122c1:	c1 e0 0c             	shl    eax,0xc
c00122c4:	83 c8 03             	or     eax,0x3
c00122c7:	89 c2                	mov    edx,eax
c00122c9:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00122ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122da:	83 e0 10             	and    eax,0x10
c00122dd:	84 c0                	test   al,al
c00122df:	74 07                	je     c00122e8 <VAS::VAS(bool)+0xd8>
c00122e1:	b8 00 01 00 00       	mov    eax,0x100
c00122e6:	eb 05                	jmp    c00122ed <VAS::VAS(bool)+0xdd>
c00122e8:	b8 00 00 00 00       	mov    eax,0x0
c00122ed:	09 d0                	or     eax,edx
c00122ef:	89 c1                	mov    ecx,eax
c00122f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122fc:	c1 e2 02             	shl    edx,0x2
c00122ff:	01 d0                	add    eax,edx
c0012301:	89 ca                	mov    edx,ecx
c0012303:	89 10                	mov    DWORD PTR [eax],edx
c0012305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012309:	2d 40 03 00 00       	sub    eax,0x340
c001230e:	83 f8 7f             	cmp    eax,0x7f
c0012311:	77 16                	ja     c0012329 <VAS::VAS(bool)+0x119>
c0012313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012317:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001231a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001231e:	c1 e2 02             	shl    edx,0x2
c0012321:	01 d0                	add    eax,edx
c0012323:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012329:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001232d:	e9 7c ff ff ff       	jmp    c00122ae <VAS::VAS(bool)+0x9e>
c0012332:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0012337:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001233d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012343:	83 e0 10             	and    eax,0x10
c0012346:	84 c0                	test   al,al
c0012348:	74 07                	je     c0012351 <VAS::VAS(bool)+0x141>
c001234a:	b8 03 41 00 00       	mov    eax,0x4103
c001234f:	eb 05                	jmp    c0012356 <VAS::VAS(bool)+0x146>
c0012351:	b8 03 40 00 00       	mov    eax,0x4003
c0012356:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001235a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001235d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012363:	89 02                	mov    DWORD PTR [edx],eax
c0012365:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001236a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012370:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012376:	83 ec 08             	sub    esp,0x8
c0012379:	50                   	push   eax
c001237a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237e:	e8 bd fc ff ff       	call   c0012040 <VAS::setCPUSpecific(unsigned long)>
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001238a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001238d:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0012392:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012398:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001239e:	83 e0 10             	and    eax,0x10
c00123a1:	84 c0                	test   al,al
c00123a3:	74 07                	je     c00123ac <VAS::VAS(bool)+0x19c>
c00123a5:	b8 00 01 00 00       	mov    eax,0x100
c00123aa:	eb 05                	jmp    c00123b1 <VAS::VAS(bool)+0x1a1>
c00123ac:	b8 00 00 00 00       	mov    eax,0x0
c00123b1:	09 c2                	or     edx,eax
c00123b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123ba:	05 fc 0f 00 00       	add    eax,0xffc
c00123bf:	83 ca 03             	or     edx,0x3
c00123c2:	89 10                	mov    DWORD PTR [eax],edx
c00123c4:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00123c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123cf:	83 ec 0c             	sub    esp,0xc
c00123d2:	50                   	push   eax
c00123d3:	e8 90 19 00 00       	call   c0013d68 <Device::getName()>
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	83 ec 08             	sub    esp,0x8
c00123de:	68 27 82 02 c0       	push   0xc0028227
c00123e3:	50                   	push   eax
c00123e4:	e8 82 e3 fe ff       	call   c000076b <strcmp>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	85 c0                	test   eax,eax
c00123ee:	0f 94 c0             	sete   al
c00123f1:	84 c0                	test   al,al
c00123f3:	74 70                	je     c0012465 <VAS::VAS(bool)+0x255>
c00123f5:	e8 86 9d 00 00       	call   c001c180 <disableIRQs()>
c00123fa:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00123ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012405:	05 7c 09 00 00       	add    eax,0x97c
c001240a:	83 ec 0c             	sub    esp,0xc
c001240d:	50                   	push   eax
c001240e:	e8 29 cb ff ff       	call   c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	25 00 f0 ff ff       	and    eax,0xfffff000
c001241b:	89 c3                	mov    ebx,eax
c001241d:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0012422:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012428:	05 7c 09 00 00       	add    eax,0x97c
c001242d:	83 ec 0c             	sub    esp,0xc
c0012430:	50                   	push   eax
c0012431:	e8 06 cb ff ff       	call   c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012436:	83 c4 10             	add    esp,0x10
c0012439:	83 ec 08             	sub    esp,0x8
c001243c:	50                   	push   eax
c001243d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012441:	e8 9c f5 ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	8b 00                	mov    eax,DWORD PTR [eax]
c001244b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012450:	6a 11                	push   0x11
c0012452:	53                   	push   ebx
c0012453:	50                   	push   eax
c0012454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012458:	e8 0b f9 ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c001245d:	83 c4 10             	add    esp,0x10
c0012460:	e8 29 9d 00 00       	call   c001c18e <enableIRQs()>
c0012465:	90                   	nop
c0012466:	83 c4 28             	add    esp,0x28
c0012469:	5b                   	pop    ebx
c001246a:	c3                   	ret    

c001246b <mapVASFirstTime>:
c001246b:	55                   	push   ebp
c001246c:	57                   	push   edi
c001246d:	56                   	push   esi
c001246e:	53                   	push   ebx
c001246f:	83 ec 0c             	sub    esp,0xc
c0012472:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012477:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001247a:	4a                   	dec    edx
c001247b:	0f 84 8e 00 00 00    	je     c001250f <mapVASFirstTime+0xa4>
c0012481:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012484:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012487:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001248c:	c1 e5 15             	shl    ebp,0x15
c001248f:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012494:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001249a:	29 eb                	sub    ebx,ebp
c001249c:	29 ee                	sub    esi,ebp
c001249e:	e8 c7 d5 ff ff       	call   c000fa6a <Phys::allocatePage()>
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	68 03 04 00 00       	push   0x403
c00124ab:	6a 01                	push   0x1
c00124ad:	53                   	push   ebx
c00124ae:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124b4:	50                   	push   eax
c00124b5:	57                   	push   edi
c00124b6:	e8 a1 fb ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124bb:	83 c4 20             	add    esp,0x20
c00124be:	39 f3                	cmp    ebx,esi
c00124c0:	75 dc                	jne    c001249e <mapVASFirstTime+0x33>
c00124c2:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00124c7:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00124cc:	29 ee                	sub    esi,ebp
c00124ce:	29 e8                	sub    eax,ebp
c00124d0:	89 c5                	mov    ebp,eax
c00124d2:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00124d6:	19 db                	sbb    ebx,ebx
c00124d8:	e8 8d d5 ff ff       	call   c000fa6a <Phys::allocatePage()>
c00124dd:	83 e3 04             	and    ebx,0x4
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	81 c3 03 04 00 00    	add    ebx,0x403
c00124e9:	53                   	push   ebx
c00124ea:	6a 01                	push   0x1
c00124ec:	56                   	push   esi
c00124ed:	81 ee 00 10 00 00    	sub    esi,0x1000
c00124f3:	50                   	push   eax
c00124f4:	57                   	push   edi
c00124f5:	e8 62 fb ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124fa:	83 c4 20             	add    esp,0x20
c00124fd:	39 f5                	cmp    ebp,esi
c00124ff:	75 d1                	jne    c00124d2 <mapVASFirstTime+0x67>
c0012501:	0f 20 d8             	mov    eax,cr3
c0012504:	0f 22 d8             	mov    cr3,eax
c0012507:	83 c4 0c             	add    esp,0xc
c001250a:	5b                   	pop    ebx
c001250b:	5e                   	pop    esi
c001250c:	5f                   	pop    edi
c001250d:	5d                   	pop    ebp
c001250e:	c3                   	ret    
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	68 35 82 02 c0       	push   0xc0028235
c0012517:	e8 71 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	83 c4 0c             	add    esp,0xc
c0012522:	5b                   	pop    ebx
c0012523:	5e                   	pop    esi
c0012524:	5f                   	pop    edi
c0012525:	5d                   	pop    ebp
c0012526:	c3                   	ret    

c0012527 <__cxa_atexit>:
c0012527:	31 c0                	xor    eax,eax
c0012529:	c3                   	ret    

c001252a <__cxa_finalize>:
c001252a:	c3                   	ret    

c001252b <__stack_chk_fail>:
c001252b:	55                   	push   ebp
c001252c:	89 e5                	mov    ebp,esp
c001252e:	83 ec 14             	sub    esp,0x14
c0012531:	68 4e 82 02 c0       	push   0xc002824e
c0012536:	e8 52 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001253b:	58                   	pop    eax
c001253c:	5a                   	pop    edx
c001253d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012540:	68 9e 82 02 c0       	push   0xc002829e
c0012545:	e8 43 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001254a:	59                   	pop    ecx
c001254b:	58                   	pop    eax
c001254c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001254f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012552:	68 9e 82 02 c0       	push   0xc002829e
c0012557:	e8 31 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001255c:	5a                   	pop    edx
c001255d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012560:	59                   	pop    ecx
c0012561:	8b 00                	mov    eax,DWORD PTR [eax]
c0012563:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012566:	68 9e 82 02 c0       	push   0xc002829e
c001256b:	e8 1d 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0012570:	5a                   	pop    edx
c0012571:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012574:	59                   	pop    ecx
c0012575:	8b 00                	mov    eax,DWORD PTR [eax]
c0012577:	8b 00                	mov    eax,DWORD PTR [eax]
c0012579:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001257c:	68 9e 82 02 c0       	push   0xc002829e
c0012581:	e8 07 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0012586:	c7 04 24 a6 82 02 c0 	mov    DWORD PTR [esp],0xc00282a6
c001258d:	e8 c5 6b 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0012592:	83 c4 10             	add    esp,0x10
c0012595:	c9                   	leave  
c0012596:	c3                   	ret    

c0012597 <__cxa_pure_virtual>:
c0012597:	83 ec 18             	sub    esp,0x18
c001259a:	68 be 82 02 c0       	push   0xc00282be
c001259f:	e8 b3 6b 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00125a4:	83 c4 1c             	add    esp,0x1c
c00125a7:	c3                   	ret    

c00125a8 <operator new[](unsigned long)>:
c00125a8:	e9 13 cf ff ff       	jmp    c000f4c0 <malloc>

c00125ad <operator delete(void*, unsigned long)>:
c00125ad:	e9 2e cf ff ff       	jmp    c000f4e0 <rfree>

c00125b2 <operator delete[](void*)>:
c00125b2:	e9 29 cf ff ff       	jmp    c000f4e0 <rfree>

c00125b7 <operator delete[](void*, unsigned long)>:
c00125b7:	e9 24 cf ff ff       	jmp    c000f4e0 <rfree>

c00125bc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125bc:	57                   	push   edi
c00125bd:	b9 3f 00 00 00       	mov    ecx,0x3f
c00125c2:	56                   	push   esi
c00125c3:	be d4 82 02 c0       	mov    esi,0xc00282d4
c00125c8:	53                   	push   ebx
c00125c9:	83 ec 40             	sub    esp,0x40
c00125cc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00125d0:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00125d4:	fc                   	cld    
c00125d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125d7:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00125db:	83 f9 3e             	cmp    ecx,0x3e
c00125de:	7e 05                	jle    c00125e5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00125e0:	b9 3e 00 00 00       	mov    ecx,0x3e
c00125e5:	89 df                	mov    edi,ebx
c00125e7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00125eb:	eb 02                	jmp    c00125ef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00125ed:	89 c7                	mov    edi,eax
c00125ef:	31 d2                	xor    edx,edx
c00125f1:	46                   	inc    esi
c00125f2:	89 f8                	mov    eax,edi
c00125f4:	f7 f1                	div    ecx
c00125f6:	39 cf                	cmp    edi,ecx
c00125f8:	73 f3                	jae    c00125ed <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125fd:	eb 02                	jmp    c0012601 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125ff:	89 c3                	mov    ebx,eax
c0012601:	31 d2                	xor    edx,edx
c0012603:	4e                   	dec    esi
c0012604:	89 d8                	mov    eax,ebx
c0012606:	f7 f1                	div    ecx
c0012608:	39 cb                	cmp    ebx,ecx
c001260a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001260e:	88 16                	mov    BYTE PTR [esi],dl
c0012610:	73 ed                	jae    c00125ff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012612:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012616:	83 c4 40             	add    esp,0x40
c0012619:	5b                   	pop    ebx
c001261a:	5e                   	pop    esi
c001261b:	5f                   	pop    edi
c001261c:	c3                   	ret    

c001261d <Dbg::logc(char)>:
c001261d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012621:	ba fd 03 00 00       	mov    edx,0x3fd
c0012626:	ec                   	in     al,dx
c0012627:	a8 20                	test   al,0x20
c0012629:	74 fb                	je     c0012626 <Dbg::logc(char)+0x9>
c001262b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012630:	88 c8                	mov    al,cl
c0012632:	ee                   	out    dx,al
c0012633:	c3                   	ret    

c0012634 <Dbg::logs(char*)>:
c0012634:	53                   	push   ebx
c0012635:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012639:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001263c:	84 c0                	test   al,al
c001263e:	74 0f                	je     c001264f <Dbg::logs(char*)+0x1b>
c0012640:	50                   	push   eax
c0012641:	43                   	inc    ebx
c0012642:	e8 d6 ff ff ff       	call   c001261d <Dbg::logc(char)>
c0012647:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001264a:	5a                   	pop    edx
c001264b:	84 c0                	test   al,al
c001264d:	75 f1                	jne    c0012640 <Dbg::logs(char*)+0xc>
c001264f:	5b                   	pop    ebx
c0012650:	c3                   	ret    

c0012651 <Dbg::logWriteInt(unsigned int)>:
c0012651:	83 ec 10             	sub    esp,0x10
c0012654:	6a 0a                	push   0xa
c0012656:	8d 44 24 08          	lea    eax,[esp+0x8]
c001265a:	50                   	push   eax
c001265b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265f:	e8 58 ff ff ff       	call   c00125bc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012664:	50                   	push   eax
c0012665:	e8 ca ff ff ff       	call   c0012634 <Dbg::logs(char*)>
c001266a:	83 c4 20             	add    esp,0x20
c001266d:	c3                   	ret    

c001266e <Dbg::logWriteIntBase(unsigned int, int)>:
c001266e:	83 ec 10             	sub    esp,0x10
c0012671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012675:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012679:	50                   	push   eax
c001267a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001267e:	e8 39 ff ff ff       	call   c00125bc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012683:	50                   	push   eax
c0012684:	e8 ab ff ff ff       	call   c0012634 <Dbg::logs(char*)>
c0012689:	83 c4 20             	add    esp,0x20
c001268c:	c3                   	ret    

c001268d <Dbg::kprintf(char const*, ...)>:
c001268d:	55                   	push   ebp
c001268e:	57                   	push   edi
c001268f:	56                   	push   esi
c0012690:	53                   	push   ebx
c0012691:	83 ec 0c             	sub    esp,0xc
c0012694:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012698:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001269c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126a0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126a3:	84 c0                	test   al,al
c00126a5:	74 4a                	je     c00126f1 <Dbg::kprintf(char const*, ...)+0x64>
c00126a7:	31 db                	xor    ebx,ebx
c00126a9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126ac:	3c 25                	cmp    al,0x25
c00126ae:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126b1:	0f 85 e4 00 00 00    	jne    c001279b <Dbg::kprintf(char const*, ...)+0x10e>
c00126b7:	83 c3 02             	add    ebx,0x2
c00126ba:	8a 07                	mov    al,BYTE PTR [edi]
c00126bc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126bf:	83 e8 25             	sub    eax,0x25
c00126c2:	3c 53                	cmp    al,0x53
c00126c4:	0f 87 ba 00 00 00    	ja     c0012784 <Dbg::kprintf(char const*, ...)+0xf7>
c00126ca:	0f b6 c0             	movzx  eax,al
c00126cd:	ff 24 85 14 83 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7cec]
c00126d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126d8:	89 c8                	mov    eax,ecx
c00126da:	83 c1 04             	add    ecx,0x4
c00126dd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126e1:	ff 30                	push   DWORD PTR [eax]
c00126e3:	e8 4c ff ff ff       	call   c0012634 <Dbg::logs(char*)>
c00126e8:	58                   	pop    eax
c00126e9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00126ed:	84 c0                	test   al,al
c00126ef:	75 b8                	jne    c00126a9 <Dbg::kprintf(char const*, ...)+0x1c>
c00126f1:	83 c4 0c             	add    esp,0xc
c00126f4:	5b                   	pop    ebx
c00126f5:	5e                   	pop    esi
c00126f6:	5f                   	pop    edi
c00126f7:	5d                   	pop    ebp
c00126f8:	c3                   	ret    
c00126f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126fd:	89 d0                	mov    eax,edx
c00126ff:	83 c2 04             	add    edx,0x4
c0012702:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012706:	ff 30                	push   DWORD PTR [eax]
c0012708:	e8 44 ff ff ff       	call   c0012651 <Dbg::logWriteInt(unsigned int)>
c001270d:	58                   	pop    eax
c001270e:	eb d9                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012710:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012714:	89 d0                	mov    eax,edx
c0012716:	83 c2 04             	add    edx,0x4
c0012719:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001271c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012720:	50                   	push   eax
c0012721:	e8 f7 fe ff ff       	call   c001261d <Dbg::logc(char)>
c0012726:	58                   	pop    eax
c0012727:	eb c0                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012729:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001272d:	89 c8                	mov    eax,ecx
c001272f:	83 c1 04             	add    ecx,0x4
c0012732:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012736:	ff 30                	push   DWORD PTR [eax]
c0012738:	e8 14 ff ff ff       	call   c0012651 <Dbg::logWriteInt(unsigned int)>
c001273d:	5f                   	pop    edi
c001273e:	eb a9                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012740:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012744:	89 c8                	mov    eax,ecx
c0012746:	83 c1 04             	add    ecx,0x4
c0012749:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001274d:	6a 10                	push   0x10
c001274f:	ff 30                	push   DWORD PTR [eax]
c0012751:	e8 18 ff ff ff       	call   c001266e <Dbg::logWriteIntBase(unsigned int, int)>
c0012756:	59                   	pop    ecx
c0012757:	5f                   	pop    edi
c0012758:	eb 8f                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c001275a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001275e:	89 d0                	mov    eax,edx
c0012760:	83 c2 08             	add    edx,0x8
c0012763:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012767:	6a 10                	push   0x10
c0012769:	ff 30                	push   DWORD PTR [eax]
c001276b:	e8 fe fe ff ff       	call   c001266e <Dbg::logWriteIntBase(unsigned int, int)>
c0012770:	58                   	pop    eax
c0012771:	5a                   	pop    edx
c0012772:	e9 72 ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012777:	6a 25                	push   0x25
c0012779:	e8 9f fe ff ff       	call   c001261d <Dbg::logc(char)>
c001277e:	58                   	pop    eax
c001277f:	e9 65 ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012784:	6a 25                	push   0x25
c0012786:	e8 92 fe ff ff       	call   c001261d <Dbg::logc(char)>
c001278b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001278e:	50                   	push   eax
c001278f:	e8 89 fe ff ff       	call   c001261d <Dbg::logc(char)>
c0012794:	5a                   	pop    edx
c0012795:	59                   	pop    ecx
c0012796:	e9 4e ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c001279b:	50                   	push   eax
c001279c:	89 eb                	mov    ebx,ebp
c001279e:	e8 7a fe ff ff       	call   c001261d <Dbg::logc(char)>
c00127a3:	89 fd                	mov    ebp,edi
c00127a5:	58                   	pop    eax
c00127a6:	e9 3e ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c00127ab:	90                   	nop

c00127ac <File::read(unsigned long long, void*, int*)>:
c00127ac:	53                   	push   ebx
c00127ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127bc:	3c 19                	cmp    al,0x19
c00127be:	77 35                	ja     c00127f5 <File::read(unsigned long long, void*, int*)+0x49>
c00127c0:	8b 04 85 40 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd41c0]
c00127c7:	85 c0                	test   eax,eax
c00127c9:	74 2a                	je     c00127f5 <File::read(unsigned long long, void*, int*)+0x49>
c00127cb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127d1:	85 c0                	test   eax,eax
c00127d3:	74 20                	je     c00127f5 <File::read(unsigned long long, void*, int*)+0x49>
c00127d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127d9:	74 21                	je     c00127fc <File::read(unsigned long long, void*, int*)+0x50>
c00127db:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127e1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ef:	5b                   	pop    ebx
c00127f0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00127f3:	ff e0                	jmp    eax
c00127f5:	b8 0b 00 00 00       	mov    eax,0xb
c00127fa:	eb 05                	jmp    c0012801 <File::read(unsigned long long, void*, int*)+0x55>
c00127fc:	b8 05 00 00 00       	mov    eax,0x5
c0012801:	5b                   	pop    ebx
c0012802:	c3                   	ret    
c0012803:	90                   	nop

c0012804 <File::write(unsigned long long, void*, int*)>:
c0012804:	53                   	push   ebx
c0012805:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012809:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001280d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012814:	3c 19                	cmp    al,0x19
c0012816:	77 35                	ja     c001284d <File::write(unsigned long long, void*, int*)+0x49>
c0012818:	8b 04 85 40 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd41c0]
c001281f:	85 c0                	test   eax,eax
c0012821:	74 2a                	je     c001284d <File::write(unsigned long long, void*, int*)+0x49>
c0012823:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012829:	85 c0                	test   eax,eax
c001282b:	74 20                	je     c001284d <File::write(unsigned long long, void*, int*)+0x49>
c001282d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012831:	74 21                	je     c0012854 <File::write(unsigned long long, void*, int*)+0x50>
c0012833:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012835:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012839:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001283f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012843:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012847:	5b                   	pop    ebx
c0012848:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001284b:	ff e0                	jmp    eax
c001284d:	b8 0b 00 00 00       	mov    eax,0xb
c0012852:	eb 05                	jmp    c0012859 <File::write(unsigned long long, void*, int*)+0x55>
c0012854:	b8 05 00 00 00       	mov    eax,0x5
c0012859:	5b                   	pop    ebx
c001285a:	c3                   	ret    
c001285b:	90                   	nop

c001285c <Directory::read(unsigned long long, void*, int*)>:
c001285c:	53                   	push   ebx
c001285d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012861:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012865:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001286c:	3c 19                	cmp    al,0x19
c001286e:	77 35                	ja     c00128a5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012870:	8b 04 85 40 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd41c0]
c0012877:	85 c0                	test   eax,eax
c0012879:	74 2a                	je     c00128a5 <Directory::read(unsigned long long, void*, int*)+0x49>
c001287b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012881:	85 c0                	test   eax,eax
c0012883:	74 20                	je     c00128a5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012885:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012889:	74 21                	je     c00128ac <Directory::read(unsigned long long, void*, int*)+0x50>
c001288b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001288d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012891:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001289b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001289f:	5b                   	pop    ebx
c00128a0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128a3:	ff e0                	jmp    eax
c00128a5:	b8 0b 00 00 00       	mov    eax,0xb
c00128aa:	eb 05                	jmp    c00128b1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128ac:	b8 05 00 00 00       	mov    eax,0x5
c00128b1:	5b                   	pop    ebx
c00128b2:	c3                   	ret    
c00128b3:	90                   	nop

c00128b4 <Directory::write(unsigned long long, void*, int*)>:
c00128b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128bf:	b8 0b 00 00 00       	mov    eax,0xb
c00128c4:	80 fa 19             	cmp    dl,0x19
c00128c7:	77 18                	ja     c00128e1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128c9:	8b 14 95 40 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41c0]
c00128d0:	85 d2                	test   edx,edx
c00128d2:	74 0d                	je     c00128e1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128d4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128db:	19 c0                	sbb    eax,eax
c00128dd:	83 e0 0a             	and    eax,0xa
c00128e0:	40                   	inc    eax
c00128e1:	c3                   	ret    

c00128e2 <File::isAtty()>:
c00128e2:	31 c0                	xor    eax,eax
c00128e4:	c3                   	ret    
c00128e5:	90                   	nop

c00128e6 <Directory::isAtty()>:
c00128e6:	31 c0                	xor    eax,eax
c00128e8:	c3                   	ret    
c00128e9:	90                   	nop

c00128ea <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128ea:	b8 0a 00 00 00       	mov    eax,0xa
c00128ef:	c3                   	ret    

c00128f0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00128f0:	b8 0a 00 00 00       	mov    eax,0xa
c00128f5:	c3                   	ret    

c00128f6 <File::~File()>:
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	ba d0 84 02 c0       	mov    edx,0xc00284d0
c00128fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012902:	89 10                	mov    DWORD PTR [eax],edx
c0012904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012908:	83 ec 0c             	sub    esp,0xc
c001290b:	50                   	push   eax
c001290c:	e8 2b eb ff ff       	call   c001143c <UnixFile::~UnixFile()>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	90                   	nop
c0012915:	83 c4 0c             	add    esp,0xc
c0012918:	c3                   	ret    
c0012919:	90                   	nop

c001291a <File::~File()>:
c001291a:	83 ec 0c             	sub    esp,0xc
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012924:	e8 cd ff ff ff       	call   c00128f6 <File::~File()>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	68 14 01 00 00       	push   0x114
c0012934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012938:	e8 70 fc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	83 c4 0c             	add    esp,0xc
c0012943:	c3                   	ret    

c0012944 <Directory::~Directory()>:
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	ba ec 84 02 c0       	mov    edx,0xc00284ec
c001294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012950:	89 10                	mov    DWORD PTR [eax],edx
c0012952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012956:	83 ec 0c             	sub    esp,0xc
c0012959:	50                   	push   eax
c001295a:	e8 dd ea ff ff       	call   c001143c <UnixFile::~UnixFile()>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	90                   	nop
c0012963:	83 c4 0c             	add    esp,0xc
c0012966:	c3                   	ret    
c0012967:	90                   	nop

c0012968 <Directory::~Directory()>:
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	83 ec 0c             	sub    esp,0xc
c001296e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012972:	e8 cd ff ff ff       	call   c0012944 <Directory::~Directory()>
c0012977:	83 c4 10             	add    esp,0x10
c001297a:	83 ec 08             	sub    esp,0x8
c001297d:	68 14 01 00 00       	push   0x114
c0012982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012986:	e8 22 fc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	83 c4 0c             	add    esp,0xc
c0012991:	c3                   	ret    

c0012992 <Filesystem::Filesystem()>:
c0012992:	ba 6c 84 02 c0       	mov    edx,0xc002846c
c0012997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001299b:	89 10                	mov    DWORD PTR [eax],edx
c001299d:	8b 15 a8 b9 02 c0    	mov    edx,DWORD PTR ds:0xc002b9a8
c00129a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ae:	a3 a8 b9 02 c0       	mov    ds:0xc002b9a8,eax
c00129b3:	90                   	nop
c00129b4:	c3                   	ret    
c00129b5:	90                   	nop

c00129b6 <Filesystem::~Filesystem()>:
c00129b6:	ba 6c 84 02 c0       	mov    edx,0xc002846c
c00129bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129bf:	89 10                	mov    DWORD PTR [eax],edx
c00129c1:	90                   	nop
c00129c2:	c3                   	ret    
c00129c3:	90                   	nop

c00129c4 <Filesystem::~Filesystem()>:
c00129c4:	83 ec 0c             	sub    esp,0xc
c00129c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129cb:	e8 e6 ff ff ff       	call   c00129b6 <Filesystem::~Filesystem()>
c00129d0:	83 c4 04             	add    esp,0x4
c00129d3:	83 ec 08             	sub    esp,0x8
c00129d6:	6a 08                	push   0x8
c00129d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129dc:	e8 cc fb ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	83 c4 0c             	add    esp,0xc
c00129e7:	c3                   	ret    

c00129e8 <initVFS()>:
c00129e8:	83 ec 18             	sub    esp,0x18
c00129eb:	6a 08                	push   0x8
c00129ed:	e8 ce ca ff ff       	call   c000f4c0 <malloc>
c00129f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00129f5:	e8 60 c6 00 00       	call   c001f05a <FAT::FAT()>
c00129fa:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a01:	e8 ba ca ff ff       	call   c000f4c0 <malloc>
c0012a06:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a09:	e8 c2 d8 00 00       	call   c00202d0 <ISO9660::ISO9660()>
c0012a0e:	83 c4 1c             	add    esp,0x1c
c0012a11:	c3                   	ret    

c0012a12 <standardiseFiles(char*, char const*, char const*)>:
c0012a12:	55                   	push   ebp
c0012a13:	57                   	push   edi
c0012a14:	56                   	push   esi
c0012a15:	53                   	push   ebx
c0012a16:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a1c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a23:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a2a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a31:	68 00 04 00 00       	push   0x400
c0012a36:	6a 00                	push   0x0
c0012a38:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a3c:	56                   	push   esi
c0012a3d:	e8 39 dc fe ff       	call   c000067b <memset>
c0012a42:	83 c4 10             	add    esp,0x10
c0012a45:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a49:	75 0b                	jne    c0012a56 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a4b:	50                   	push   eax
c0012a4c:	50                   	push   eax
c0012a4d:	57                   	push   edi
c0012a4e:	56                   	push   esi
c0012a4f:	e8 c6 dc fe ff       	call   c000071a <strcpy>
c0012a54:	eb 41                	jmp    c0012a97 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a56:	8a 07                	mov    al,BYTE PTR [edi]
c0012a58:	3c 5c                	cmp    al,0x5c
c0012a5a:	74 04                	je     c0012a60 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a5c:	3c 2f                	cmp    al,0x2f
c0012a5e:	75 18                	jne    c0012a78 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a60:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a63:	3c 60                	cmp    al,0x60
c0012a65:	7e 03                	jle    c0012a6a <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a67:	83 e8 20             	sub    eax,0x20
c0012a6a:	88 04 24             	mov    BYTE PTR [esp],al
c0012a6d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a74:	50                   	push   eax
c0012a75:	50                   	push   eax
c0012a76:	eb 18                	jmp    c0012a90 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a78:	50                   	push   eax
c0012a79:	50                   	push   eax
c0012a7a:	55                   	push   ebp
c0012a7b:	56                   	push   esi
c0012a7c:	e8 99 dc fe ff       	call   c000071a <strcpy>
c0012a81:	5a                   	pop    edx
c0012a82:	59                   	pop    ecx
c0012a83:	68 49 98 02 c0       	push   0xc0029849
c0012a88:	56                   	push   esi
c0012a89:	e8 43 dd fe ff       	call   c00007d1 <strcat>
c0012a8e:	5d                   	pop    ebp
c0012a8f:	58                   	pop    eax
c0012a90:	57                   	push   edi
c0012a91:	56                   	push   esi
c0012a92:	e8 3a dd fe ff       	call   c00007d1 <strcat>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a9d:	3c 60                	cmp    al,0x60
c0012a9f:	7e 03                	jle    c0012aa4 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012aa1:	83 e8 20             	sub    eax,0x20
c0012aa4:	88 04 24             	mov    BYTE PTR [esp],al
c0012aa7:	88 03                	mov    BYTE PTR [ebx],al
c0012aa9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ab0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ab6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012aba:	bf 03 00 00 00       	mov    edi,0x3
c0012abf:	b8 03 00 00 00       	mov    eax,0x3
c0012ac4:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ac7:	84 d2                	test   dl,dl
c0012ac9:	0f 84 91 00 00 00    	je     c0012b60 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012acf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012ad2:	80 fa 5c             	cmp    dl,0x5c
c0012ad5:	74 05                	je     c0012adc <standardiseFiles(char*, char const*, char const*)+0xca>
c0012ad7:	80 fa 2f             	cmp    dl,0x2f
c0012ada:	75 12                	jne    c0012aee <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012adc:	89 c5                	mov    ebp,eax
c0012ade:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ae3:	74 09                	je     c0012aee <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ae5:	40                   	inc    eax
c0012ae6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012aea:	89 cf                	mov    edi,ecx
c0012aec:	eb d6                	jmp    c0012ac4 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012aee:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012af3:	75 5b                	jne    c0012b50 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012af5:	80 fa 2e             	cmp    dl,0x2e
c0012af8:	75 56                	jne    c0012b50 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012afa:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012afe:	74 19                	je     c0012b19 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012b00:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b05:	74 53                	je     c0012b5a <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b07:	89 f9                	mov    ecx,edi
c0012b09:	41                   	inc    ecx
c0012b0a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b0d:	80 fa 2f             	cmp    dl,0x2f
c0012b10:	74 f7                	je     c0012b09 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b12:	80 fa 5c             	cmp    dl,0x5c
c0012b15:	74 f2                	je     c0012b09 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b17:	eb d1                	jmp    c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b19:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b1e:	74 3a                	je     c0012b5a <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b20:	83 f8 03             	cmp    eax,0x3
c0012b23:	74 c5                	je     c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b25:	41                   	inc    ecx
c0012b26:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b29:	80 fa 2f             	cmp    dl,0x2f
c0012b2c:	74 f7                	je     c0012b25 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b2e:	80 fa 5c             	cmp    dl,0x5c
c0012b31:	74 f2                	je     c0012b25 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b33:	48                   	dec    eax
c0012b34:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b38:	75 06                	jne    c0012b40 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b3a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b3e:	eb f3                	jmp    c0012b33 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012b40:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b44:	74 07                	je     c0012b4d <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b4a:	48                   	dec    eax
c0012b4b:	eb f3                	jmp    c0012b40 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b4d:	40                   	inc    eax
c0012b4e:	eb 9a                	jmp    c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b50:	80 fa 2f             	cmp    dl,0x2f
c0012b53:	74 95                	je     c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b55:	80 fa 5c             	cmp    dl,0x5c
c0012b58:	74 90                	je     c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b5a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b5d:	40                   	inc    eax
c0012b5e:	eb 8a                	jmp    c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b60:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b64:	83 ec 0c             	sub    esp,0xc
c0012b67:	53                   	push   ebx
c0012b68:	e8 2b db fe ff       	call   c0000698 <strlen>
c0012b6d:	83 c4 10             	add    esp,0x10
c0012b70:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b75:	75 26                	jne    c0012b9d <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b77:	83 ec 0c             	sub    esp,0xc
c0012b7a:	53                   	push   ebx
c0012b7b:	e8 18 db fe ff       	call   c0000698 <strlen>
c0012b80:	83 c4 10             	add    esp,0x10
c0012b83:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b88:	74 26                	je     c0012bb0 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b8a:	83 ec 0c             	sub    esp,0xc
c0012b8d:	53                   	push   ebx
c0012b8e:	e8 05 db fe ff       	call   c0000698 <strlen>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b9b:	eb c7                	jmp    c0012b64 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b9d:	83 ec 0c             	sub    esp,0xc
c0012ba0:	53                   	push   ebx
c0012ba1:	e8 f2 da fe ff       	call   c0000698 <strlen>
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bae:	74 c7                	je     c0012b77 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012bb0:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bb6:	5b                   	pop    ebx
c0012bb7:	5e                   	pop    esi
c0012bb8:	5f                   	pop    edi
c0012bb9:	5d                   	pop    ebp
c0012bba:	c3                   	ret    
c0012bbb:	90                   	nop

c0012bbc <File::File(char const*, Process*)>:
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc3:	83 ec 08             	sub    esp,0x8
c0012bc6:	6a 00                	push   0x0
c0012bc8:	50                   	push   eax
c0012bc9:	e8 8c e6 ff ff       	call   c001125a <UnixFile::UnixFile(int)>
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	ba d0 84 02 c0       	mov    edx,0xc00284d0
c0012bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bda:	89 10                	mov    DWORD PTR [eax],edx
c0012bdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012be0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bea:	83 c0 0d             	add    eax,0xd
c0012bed:	83 ec 04             	sub    esp,0x4
c0012bf0:	52                   	push   edx
c0012bf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bf5:	50                   	push   eax
c0012bf6:	e8 17 fe ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c0012bfb:	83 c4 10             	add    esp,0x10
c0012bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c02:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c05:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c16:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c1a:	90                   	nop
c0012c1b:	83 c4 0c             	add    esp,0xc
c0012c1e:	c3                   	ret    
c0012c1f:	90                   	nop

c0012c20 <File::open(FileOpenMode)>:
c0012c20:	53                   	push   ebx
c0012c21:	b8 0b 00 00 00       	mov    eax,0xb
c0012c26:	83 ec 08             	sub    esp,0x8
c0012c29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c2d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c34:	80 fa 19             	cmp    dl,0x19
c0012c37:	77 40                	ja     c0012c79 <File::open(FileOpenMode)+0x59>
c0012c39:	8b 14 95 40 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41c0]
c0012c40:	85 d2                	test   edx,edx
c0012c42:	74 35                	je     c0012c79 <File::open(FileOpenMode)+0x59>
c0012c44:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c4a:	85 d2                	test   edx,edx
c0012c4c:	74 2b                	je     c0012c79 <File::open(FileOpenMode)+0x59>
c0012c4e:	b8 06 00 00 00       	mov    eax,0x6
c0012c53:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c57:	75 20                	jne    c0012c79 <File::open(FileOpenMode)+0x59>
c0012c59:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c5b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c65:	51                   	push   ecx
c0012c66:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c69:	51                   	push   ecx
c0012c6a:	52                   	push   edx
c0012c6b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	85 c0                	test   eax,eax
c0012c73:	75 04                	jne    c0012c79 <File::open(FileOpenMode)+0x59>
c0012c75:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c79:	83 c4 08             	add    esp,0x8
c0012c7c:	5b                   	pop    ebx
c0012c7d:	c3                   	ret    

c0012c7e <File::close()>:
c0012c7e:	53                   	push   ebx
c0012c7f:	b8 0b 00 00 00       	mov    eax,0xb
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c8b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c92:	80 fa 19             	cmp    dl,0x19
c0012c95:	77 41                	ja     c0012cd8 <File::close()+0x5a>
c0012c97:	8b 1c 95 40 be 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd41c0]
c0012c9e:	85 db                	test   ebx,ebx
c0012ca0:	74 36                	je     c0012cd8 <File::close()+0x5a>
c0012ca2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ca9:	74 2d                	je     c0012cd8 <File::close()+0x5a>
c0012cab:	b8 05 00 00 00       	mov    eax,0x5
c0012cb0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cb4:	74 22                	je     c0012cd8 <File::close()+0x5a>
c0012cb6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cba:	8b 04 95 40 be 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd41c0]
c0012cc1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cc7:	53                   	push   ebx
c0012cc8:	53                   	push   ebx
c0012cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ccb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012cd1:	50                   	push   eax
c0012cd2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012cd5:	83 c4 10             	add    esp,0x10
c0012cd8:	83 c4 08             	add    esp,0x8
c0012cdb:	5b                   	pop    ebx
c0012cdc:	c3                   	ret    
c0012cdd:	90                   	nop

c0012cde <File::seek(unsigned long long)>:
c0012cde:	56                   	push   esi
c0012cdf:	53                   	push   ebx
c0012ce0:	b8 0b 00 00 00       	mov    eax,0xb
c0012ce5:	51                   	push   ecx
c0012ce6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012cee:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012cf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cf9:	80 fa 19             	cmp    dl,0x19
c0012cfc:	77 31                	ja     c0012d2f <File::seek(unsigned long long)+0x51>
c0012cfe:	8b 14 95 40 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41c0]
c0012d05:	85 d2                	test   edx,edx
c0012d07:	74 26                	je     c0012d2f <File::seek(unsigned long long)+0x51>
c0012d09:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d0f:	85 d2                	test   edx,edx
c0012d11:	74 1c                	je     c0012d2f <File::seek(unsigned long long)+0x51>
c0012d13:	b8 05 00 00 00       	mov    eax,0x5
c0012d18:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d1c:	74 11                	je     c0012d2f <File::seek(unsigned long long)+0x51>
c0012d1e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d20:	53                   	push   ebx
c0012d21:	51                   	push   ecx
c0012d22:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d28:	52                   	push   edx
c0012d29:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	5a                   	pop    edx
c0012d30:	5b                   	pop    ebx
c0012d31:	5e                   	pop    esi
c0012d32:	c3                   	ret    
c0012d33:	90                   	nop

c0012d34 <File::tell(unsigned long long*)>:
c0012d34:	83 ec 0c             	sub    esp,0xc
c0012d37:	b8 0b 00 00 00       	mov    eax,0xb
c0012d3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d47:	80 fa 19             	cmp    dl,0x19
c0012d4a:	77 34                	ja     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d4c:	8b 14 95 40 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41c0]
c0012d53:	85 d2                	test   edx,edx
c0012d55:	74 29                	je     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d57:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d5d:	85 d2                	test   edx,edx
c0012d5f:	74 1f                	je     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d61:	b8 05 00 00 00       	mov    eax,0x5
c0012d66:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d6a:	74 14                	je     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d6c:	50                   	push   eax
c0012d6d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d73:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d79:	52                   	push   edx
c0012d7a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	83 c4 0c             	add    esp,0xc
c0012d83:	c3                   	ret    

c0012d84 <File::rewind()>:
c0012d84:	83 ec 10             	sub    esp,0x10
c0012d87:	6a 00                	push   0x0
c0012d89:	6a 00                	push   0x0
c0012d8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d8f:	e8 4a ff ff ff       	call   c0012cde <File::seek(unsigned long long)>
c0012d94:	83 c4 1c             	add    esp,0x1c
c0012d97:	c3                   	ret    

c0012d98 <File::unlink()>:
c0012d98:	83 ec 0c             	sub    esp,0xc
c0012d9b:	b8 0b 00 00 00       	mov    eax,0xb
c0012da0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012da4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dab:	80 f9 19             	cmp    cl,0x19
c0012dae:	77 2f                	ja     c0012ddf <File::unlink()+0x47>
c0012db0:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c0012db7:	85 c9                	test   ecx,ecx
c0012db9:	74 24                	je     c0012ddf <File::unlink()+0x47>
c0012dbb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dc1:	85 c9                	test   ecx,ecx
c0012dc3:	74 1a                	je     c0012ddf <File::unlink()+0x47>
c0012dc5:	b8 06 00 00 00       	mov    eax,0x6
c0012dca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dce:	75 0f                	jne    c0012ddf <File::unlink()+0x47>
c0012dd0:	83 c2 0d             	add    edx,0xd
c0012dd3:	50                   	push   eax
c0012dd4:	50                   	push   eax
c0012dd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dd7:	52                   	push   edx
c0012dd8:	51                   	push   ecx
c0012dd9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	83 c4 0c             	add    esp,0xc
c0012de2:	c3                   	ret    
c0012de3:	90                   	nop

c0012de4 <File::rename(char const*)>:
c0012de4:	83 ec 0c             	sub    esp,0xc
c0012de7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012df0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012df7:	80 f9 19             	cmp    cl,0x19
c0012dfa:	77 32                	ja     c0012e2e <File::rename(char const*)+0x4a>
c0012dfc:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c0012e03:	85 c9                	test   ecx,ecx
c0012e05:	74 27                	je     c0012e2e <File::rename(char const*)+0x4a>
c0012e07:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e0d:	85 c9                	test   ecx,ecx
c0012e0f:	74 1d                	je     c0012e2e <File::rename(char const*)+0x4a>
c0012e11:	b8 06 00 00 00       	mov    eax,0x6
c0012e16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e1a:	75 12                	jne    c0012e2e <File::rename(char const*)+0x4a>
c0012e1c:	83 c2 0d             	add    edx,0xd
c0012e1f:	50                   	push   eax
c0012e20:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e26:	52                   	push   edx
c0012e27:	51                   	push   ecx
c0012e28:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e2b:	83 c4 10             	add    esp,0x10
c0012e2e:	83 c4 0c             	add    esp,0xc
c0012e31:	c3                   	ret    

c0012e32 <File::chfatattr(unsigned char, unsigned char)>:
c0012e32:	57                   	push   edi
c0012e33:	b8 0b 00 00 00       	mov    eax,0xb
c0012e38:	56                   	push   esi
c0012e39:	53                   	push   ebx
c0012e3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e49:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e4d:	80 f9 19             	cmp    cl,0x19
c0012e50:	77 37                	ja     c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e52:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c0012e59:	85 c9                	test   ecx,ecx
c0012e5b:	74 2c                	je     c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e5d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e63:	85 c9                	test   ecx,ecx
c0012e65:	74 22                	je     c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e67:	b8 06 00 00 00       	mov    eax,0x6
c0012e6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e70:	75 17                	jne    c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e72:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e74:	89 f0                	mov    eax,esi
c0012e76:	83 c2 0d             	add    edx,0xd
c0012e79:	0f b6 f0             	movzx  esi,al
c0012e7c:	0f b6 db             	movzx  ebx,bl
c0012e7f:	56                   	push   esi
c0012e80:	53                   	push   ebx
c0012e81:	52                   	push   edx
c0012e82:	51                   	push   ecx
c0012e83:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e86:	83 c4 10             	add    esp,0x10
c0012e89:	5b                   	pop    ebx
c0012e8a:	5e                   	pop    esi
c0012e8b:	5f                   	pop    edi
c0012e8c:	c3                   	ret    
c0012e8d:	90                   	nop

c0012e8e <File::exists()>:
c0012e8e:	83 ec 0c             	sub    esp,0xc
c0012e91:	31 c0                	xor    eax,eax
c0012e93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e97:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9e:	80 f9 19             	cmp    cl,0x19
c0012ea1:	77 24                	ja     c0012ec7 <File::exists()+0x39>
c0012ea3:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c0012eaa:	85 c9                	test   ecx,ecx
c0012eac:	74 19                	je     c0012ec7 <File::exists()+0x39>
c0012eae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb4:	85 c9                	test   ecx,ecx
c0012eb6:	74 0f                	je     c0012ec7 <File::exists()+0x39>
c0012eb8:	83 c2 0d             	add    edx,0xd
c0012ebb:	50                   	push   eax
c0012ebc:	50                   	push   eax
c0012ebd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ebf:	52                   	push   edx
c0012ec0:	51                   	push   ecx
c0012ec1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	83 c4 0c             	add    esp,0xc
c0012eca:	c3                   	ret    
c0012ecb:	90                   	nop

c0012ecc <File::stat(unsigned long long*, bool*)>:
c0012ecc:	56                   	push   esi
c0012ecd:	53                   	push   ebx
c0012ece:	50                   	push   eax
c0012ecf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012edc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ee7:	80 f9 19             	cmp    cl,0x19
c0012eea:	77 3d                	ja     c0012f29 <File::stat(unsigned long long*, bool*)+0x5d>
c0012eec:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c0012ef3:	85 c9                	test   ecx,ecx
c0012ef5:	74 32                	je     c0012f29 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ef7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012efd:	85 c9                	test   ecx,ecx
c0012eff:	74 28                	je     c0012f29 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f01:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f07:	74 13                	je     c0012f1c <File::stat(unsigned long long*, bool*)+0x50>
c0012f09:	83 ec 04             	sub    esp,0x4
c0012f0c:	56                   	push   esi
c0012f0d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f13:	51                   	push   ecx
c0012f14:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f17:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f1a:	eb 0a                	jmp    c0012f26 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f1c:	53                   	push   ebx
c0012f1d:	83 c2 0d             	add    edx,0xd
c0012f20:	56                   	push   esi
c0012f21:	52                   	push   edx
c0012f22:	51                   	push   ecx
c0012f23:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	5a                   	pop    edx
c0012f2a:	5b                   	pop    ebx
c0012f2b:	5e                   	pop    esi
c0012f2c:	c3                   	ret    

c0012f2d <getcwd(Process*, char*, int)>:
c0012f2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f31:	31 c0                	xor    eax,eax
c0012f33:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f36:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f3a:	7d 15                	jge    c0012f51 <getcwd(Process*, char*, int)+0x24>
c0012f3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f40:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f47:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f4a:	84 c9                	test   cl,cl
c0012f4c:	74 06                	je     c0012f54 <getcwd(Process*, char*, int)+0x27>
c0012f4e:	40                   	inc    eax
c0012f4f:	eb e2                	jmp    c0012f33 <getcwd(Process*, char*, int)+0x6>
c0012f51:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f54:	31 c0                	xor    eax,eax
c0012f56:	c3                   	ret    

c0012f57 <setcwd(Process*, char*)>:
c0012f57:	55                   	push   ebp
c0012f58:	57                   	push   edi
c0012f59:	56                   	push   esi
c0012f5a:	53                   	push   ebx
c0012f5b:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f61:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f68:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f6e:	57                   	push   edi
c0012f6f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f76:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f7a:	56                   	push   esi
c0012f7b:	e8 92 fa ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c0012f80:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f83:	e8 10 d7 fe ff       	call   c0000698 <strlen>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	83 f8 02             	cmp    eax,0x2
c0012f8e:	77 17                	ja     c0012fa7 <setcwd(Process*, char*)+0x50>
c0012f90:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f95:	83 e8 41             	sub    eax,0x41
c0012f98:	83 f8 19             	cmp    eax,0x19
c0012f9b:	76 24                	jbe    c0012fc1 <setcwd(Process*, char*)+0x6a>
c0012f9d:	b8 03 00 00 00       	mov    eax,0x3
c0012fa2:	e9 e0 00 00 00       	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	56                   	push   esi
c0012fab:	e8 e8 d6 fe ff       	call   c0000698 <strlen>
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	83 f8 03             	cmp    eax,0x3
c0012fb6:	75 34                	jne    c0012fec <setcwd(Process*, char*)+0x95>
c0012fb8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fbd:	75 2d                	jne    c0012fec <setcwd(Process*, char*)+0x95>
c0012fbf:	eb cf                	jmp    c0012f90 <setcwd(Process*, char*)+0x39>
c0012fc1:	8b 14 85 40 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd41c0]
c0012fc8:	b8 05 00 00 00       	mov    eax,0x5
c0012fcd:	85 d2                	test   edx,edx
c0012fcf:	0f 84 b2 00 00 00    	je     c0013087 <setcwd(Process*, char*)+0x130>
c0012fd5:	b8 06 00 00 00       	mov    eax,0x6
c0012fda:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012fe1:	0f 85 92 00 00 00    	jne    c0013079 <setcwd(Process*, char*)+0x122>
c0012fe7:	e9 9b 00 00 00       	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0012fec:	83 ec 0c             	sub    esp,0xc
c0012fef:	68 14 01 00 00       	push   0x114
c0012ff4:	e8 c7 c4 ff ff       	call   c000f4c0 <malloc>
c0012ff9:	83 c4 0c             	add    esp,0xc
c0012ffc:	89 c3                	mov    ebx,eax
c0012ffe:	55                   	push   ebp
c0012fff:	56                   	push   esi
c0013000:	50                   	push   eax
c0013001:	e8 b6 fb ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0013006:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001300b:	83 c4 0c             	add    esp,0xc
c001300e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013012:	50                   	push   eax
c0013013:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013017:	50                   	push   eax
c0013018:	53                   	push   ebx
c0013019:	e8 ae fe ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	83 f8 02             	cmp    eax,0x2
c0013024:	74 04                	je     c001302a <setcwd(Process*, char*)+0xd3>
c0013026:	85 c0                	test   eax,eax
c0013028:	74 1c                	je     c0013046 <setcwd(Process*, char*)+0xef>
c001302a:	b8 01 00 00 00       	mov    eax,0x1
c001302f:	85 db                	test   ebx,ebx
c0013031:	74 54                	je     c0013087 <setcwd(Process*, char*)+0x130>
c0013033:	83 ec 0c             	sub    esp,0xc
c0013036:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013038:	53                   	push   ebx
c0013039:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001303c:	83 c4 10             	add    esp,0x10
c001303f:	b8 01 00 00 00       	mov    eax,0x1
c0013044:	eb 41                	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0013046:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001304b:	75 1c                	jne    c0013069 <setcwd(Process*, char*)+0x112>
c001304d:	b8 02 00 00 00       	mov    eax,0x2
c0013052:	85 db                	test   ebx,ebx
c0013054:	74 31                	je     c0013087 <setcwd(Process*, char*)+0x130>
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	8b 03                	mov    eax,DWORD PTR [ebx]
c001305b:	53                   	push   ebx
c001305c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001305f:	83 c4 10             	add    esp,0x10
c0013062:	b8 02 00 00 00       	mov    eax,0x2
c0013067:	eb 1e                	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0013069:	85 db                	test   ebx,ebx
c001306b:	74 0c                	je     c0013079 <setcwd(Process*, char*)+0x122>
c001306d:	83 ec 0c             	sub    esp,0xc
c0013070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013072:	53                   	push   ebx
c0013073:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	50                   	push   eax
c001307a:	50                   	push   eax
c001307b:	56                   	push   esi
c001307c:	57                   	push   edi
c001307d:	e8 98 d6 fe ff       	call   c000071a <strcpy>
c0013082:	83 c4 10             	add    esp,0x10
c0013085:	31 c0                	xor    eax,eax
c0013087:	81 c4 1c 02 00 00    	add    esp,0x21c
c001308d:	5b                   	pop    ebx
c001308e:	5e                   	pop    esi
c001308f:	5f                   	pop    edi
c0013090:	5d                   	pop    ebp
c0013091:	c3                   	ret    

c0013092 <Directory::Directory(char const*, Process*)>:
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013099:	83 ec 08             	sub    esp,0x8
c001309c:	6a 00                	push   0x0
c001309e:	50                   	push   eax
c001309f:	e8 b6 e1 ff ff       	call   c001125a <UnixFile::UnixFile(int)>
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	ba ec 84 02 c0       	mov    edx,0xc00284ec
c00130ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b0:	89 10                	mov    DWORD PTR [eax],edx
c00130b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c0:	83 c0 0d             	add    eax,0xd
c00130c3:	83 ec 04             	sub    esp,0x4
c00130c6:	52                   	push   edx
c00130c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130cb:	50                   	push   eax
c00130cc:	e8 41 f9 ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130db:	8d 50 bf             	lea    edx,[eax-0x41]
c00130de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130f0:	90                   	nop
c00130f1:	83 c4 0c             	add    esp,0xc
c00130f4:	c3                   	ret    
c00130f5:	90                   	nop

c00130f6 <Directory::open()>:
c00130f6:	53                   	push   ebx
c00130f7:	b8 0b 00 00 00       	mov    eax,0xb
c00130fc:	83 ec 08             	sub    esp,0x8
c00130ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013103:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001310a:	80 fa 19             	cmp    dl,0x19
c001310d:	77 3d                	ja     c001314c <Directory::open()+0x56>
c001310f:	8b 14 95 40 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41c0]
c0013116:	85 d2                	test   edx,edx
c0013118:	74 32                	je     c001314c <Directory::open()+0x56>
c001311a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013120:	85 d2                	test   edx,edx
c0013122:	74 28                	je     c001314c <Directory::open()+0x56>
c0013124:	b8 06 00 00 00       	mov    eax,0x6
c0013129:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001312d:	75 1d                	jne    c001314c <Directory::open()+0x56>
c001312f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013135:	50                   	push   eax
c0013136:	8b 02                	mov    eax,DWORD PTR [edx]
c0013138:	51                   	push   ecx
c0013139:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001313c:	51                   	push   ecx
c001313d:	52                   	push   edx
c001313e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	85 c0                	test   eax,eax
c0013146:	75 04                	jne    c001314c <Directory::open()+0x56>
c0013148:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001314c:	83 c4 08             	add    esp,0x8
c001314f:	5b                   	pop    ebx
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <Directory::close()>:
c0013152:	53                   	push   ebx
c0013153:	b8 0b 00 00 00       	mov    eax,0xb
c0013158:	83 ec 08             	sub    esp,0x8
c001315b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001315f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013166:	80 fa 19             	cmp    dl,0x19
c0013169:	77 41                	ja     c00131ac <Directory::close()+0x5a>
c001316b:	8b 1c 95 40 be 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd41c0]
c0013172:	85 db                	test   ebx,ebx
c0013174:	74 36                	je     c00131ac <Directory::close()+0x5a>
c0013176:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001317d:	74 2d                	je     c00131ac <Directory::close()+0x5a>
c001317f:	b8 05 00 00 00       	mov    eax,0x5
c0013184:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013188:	74 22                	je     c00131ac <Directory::close()+0x5a>
c001318a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001318e:	8b 04 95 40 be 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd41c0]
c0013195:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001319b:	53                   	push   ebx
c001319c:	53                   	push   ebx
c001319d:	8b 10                	mov    edx,DWORD PTR [eax]
c001319f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131a5:	50                   	push   eax
c00131a6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	83 c4 08             	add    esp,0x8
c00131af:	5b                   	pop    ebx
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <Directory::unlink()>:
c00131b2:	83 ec 0c             	sub    esp,0xc
c00131b5:	b8 0b 00 00 00       	mov    eax,0xb
c00131ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131c5:	80 f9 19             	cmp    cl,0x19
c00131c8:	77 2f                	ja     c00131f9 <Directory::unlink()+0x47>
c00131ca:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c00131d1:	85 c9                	test   ecx,ecx
c00131d3:	74 24                	je     c00131f9 <Directory::unlink()+0x47>
c00131d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131db:	85 c9                	test   ecx,ecx
c00131dd:	74 1a                	je     c00131f9 <Directory::unlink()+0x47>
c00131df:	b8 06 00 00 00       	mov    eax,0x6
c00131e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131e8:	75 0f                	jne    c00131f9 <Directory::unlink()+0x47>
c00131ea:	83 c2 0d             	add    edx,0xd
c00131ed:	50                   	push   eax
c00131ee:	50                   	push   eax
c00131ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131f1:	52                   	push   edx
c00131f2:	51                   	push   ecx
c00131f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	83 c4 0c             	add    esp,0xc
c00131fc:	c3                   	ret    
c00131fd:	90                   	nop

c00131fe <Directory::rename(char const*)>:
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	b8 0b 00 00 00       	mov    eax,0xb
c0013206:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001320a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013211:	80 f9 19             	cmp    cl,0x19
c0013214:	77 32                	ja     c0013248 <Directory::rename(char const*)+0x4a>
c0013216:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c001321d:	85 c9                	test   ecx,ecx
c001321f:	74 27                	je     c0013248 <Directory::rename(char const*)+0x4a>
c0013221:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013227:	85 c9                	test   ecx,ecx
c0013229:	74 1d                	je     c0013248 <Directory::rename(char const*)+0x4a>
c001322b:	b8 06 00 00 00       	mov    eax,0x6
c0013230:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013234:	75 12                	jne    c0013248 <Directory::rename(char const*)+0x4a>
c0013236:	83 c2 0d             	add    edx,0xd
c0013239:	50                   	push   eax
c001323a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001323c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013240:	52                   	push   edx
c0013241:	51                   	push   ecx
c0013242:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013245:	83 c4 10             	add    esp,0x10
c0013248:	83 c4 0c             	add    esp,0xc
c001324b:	c3                   	ret    

c001324c <Directory::exists()>:
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	31 c0                	xor    eax,eax
c0013251:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013255:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001325c:	80 f9 19             	cmp    cl,0x19
c001325f:	77 24                	ja     c0013285 <Directory::exists()+0x39>
c0013261:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c0013268:	85 c9                	test   ecx,ecx
c001326a:	74 19                	je     c0013285 <Directory::exists()+0x39>
c001326c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013272:	85 c9                	test   ecx,ecx
c0013274:	74 0f                	je     c0013285 <Directory::exists()+0x39>
c0013276:	83 c2 0d             	add    edx,0xd
c0013279:	50                   	push   eax
c001327a:	50                   	push   eax
c001327b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001327d:	52                   	push   edx
c001327e:	51                   	push   ecx
c001327f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	83 c4 0c             	add    esp,0xc
c0013288:	c3                   	ret    
c0013289:	90                   	nop

c001328a <Directory::read(dirent*)>:
c001328a:	83 ec 1c             	sub    esp,0x1c
c001328d:	b8 0b 00 00 00       	mov    eax,0xb
c0013292:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013296:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001329d:	80 fa 19             	cmp    dl,0x19
c00132a0:	77 30                	ja     c00132d2 <Directory::read(dirent*)+0x48>
c00132a2:	8b 14 95 40 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd41c0]
c00132a9:	85 d2                	test   edx,edx
c00132ab:	74 25                	je     c00132d2 <Directory::read(dirent*)+0x48>
c00132ad:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132b4:	74 1c                	je     c00132d2 <Directory::read(dirent*)+0x48>
c00132b6:	83 ec 0c             	sub    esp,0xc
c00132b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132bf:	52                   	push   edx
c00132c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132c4:	6a 00                	push   0x0
c00132c6:	68 10 01 00 00       	push   0x110
c00132cb:	51                   	push   ecx
c00132cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132cf:	83 c4 20             	add    esp,0x20
c00132d2:	83 c4 1c             	add    esp,0x1c
c00132d5:	c3                   	ret    

c00132d6 <Directory::create()>:
c00132d6:	83 ec 0c             	sub    esp,0xc
c00132d9:	b8 0b 00 00 00       	mov    eax,0xb
c00132de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132e9:	80 f9 19             	cmp    cl,0x19
c00132ec:	77 2f                	ja     c001331d <Directory::create()+0x47>
c00132ee:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c00132f5:	85 c9                	test   ecx,ecx
c00132f7:	74 24                	je     c001331d <Directory::create()+0x47>
c00132f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132ff:	85 c9                	test   ecx,ecx
c0013301:	74 1a                	je     c001331d <Directory::create()+0x47>
c0013303:	b8 06 00 00 00       	mov    eax,0x6
c0013308:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001330c:	75 0f                	jne    c001331d <Directory::create()+0x47>
c001330e:	83 c2 0d             	add    edx,0xd
c0013311:	50                   	push   eax
c0013312:	50                   	push   eax
c0013313:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013315:	52                   	push   edx
c0013316:	51                   	push   ecx
c0013317:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	83 c4 0c             	add    esp,0xc
c0013320:	c3                   	ret    
c0013321:	90                   	nop

c0013322 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013322:	b8 0a 00 00 00       	mov    eax,0xa
c0013327:	c3                   	ret    

c0013328 <Bus::Bus(char const*)>:
c0013328:	83 ec 0c             	sub    esp,0xc
c001332b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332f:	83 ec 08             	sub    esp,0x8
c0013332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013336:	50                   	push   eax
c0013337:	e8 30 09 00 00       	call   c0013c6c <Device::Device(char const*)>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	ba 08 85 02 c0       	mov    edx,0xc0028508
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	89 10                	mov    DWORD PTR [eax],edx
c001334a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013358:	90                   	nop
c0013359:	83 c4 0c             	add    esp,0xc
c001335c:	c3                   	ret    
c001335d:	90                   	nop

c001335e <Bus::~Bus()>:
c001335e:	83 ec 0c             	sub    esp,0xc
c0013361:	ba 08 85 02 c0       	mov    edx,0xc0028508
c0013366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336a:	89 10                	mov    DWORD PTR [eax],edx
c001336c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	50                   	push   eax
c0013374:	e8 d5 05 00 00       	call   c001394e <Device::~Device()>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	90                   	nop
c001337d:	83 c4 0c             	add    esp,0xc
c0013380:	c3                   	ret    
c0013381:	90                   	nop

c0013382 <Bus::~Bus()>:
c0013382:	83 ec 0c             	sub    esp,0xc
c0013385:	83 ec 0c             	sub    esp,0xc
c0013388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001338c:	e8 cd ff ff ff       	call   c001335e <Bus::~Bus()>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	83 ec 08             	sub    esp,0x8
c0013397:	68 58 01 00 00       	push   0x158
c001339c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a0:	e8 08 f2 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	83 c4 0c             	add    esp,0xc
c00133ab:	c3                   	ret    

c00133ac <Buzzer::Buzzer(char const*)>:
c00133ac:	83 ec 0c             	sub    esp,0xc
c00133af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b3:	83 ec 08             	sub    esp,0x8
c00133b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ba:	50                   	push   eax
c00133bb:	e8 ac 08 00 00       	call   c0013c6c <Device::Device(char const*)>
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	ba 34 85 02 c0       	mov    edx,0xc0028534
c00133c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cc:	89 10                	mov    DWORD PTR [eax],edx
c00133ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133ea:	90                   	nop
c00133eb:	83 c4 0c             	add    esp,0xc
c00133ee:	c3                   	ret    
c00133ef:	90                   	nop

c00133f0 <Buzzer::~Buzzer()>:
c00133f0:	83 ec 0c             	sub    esp,0xc
c00133f3:	ba 34 85 02 c0       	mov    edx,0xc0028534
c00133f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fc:	89 10                	mov    DWORD PTR [eax],edx
c00133fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013402:	83 ec 0c             	sub    esp,0xc
c0013405:	50                   	push   eax
c0013406:	e8 43 05 00 00       	call   c001394e <Device::~Device()>
c001340b:	83 c4 10             	add    esp,0x10
c001340e:	90                   	nop
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	c3                   	ret    
c0013413:	90                   	nop

c0013414 <Buzzer::~Buzzer()>:
c0013414:	83 ec 0c             	sub    esp,0xc
c0013417:	83 ec 0c             	sub    esp,0xc
c001341a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001341e:	e8 cd ff ff ff       	call   c00133f0 <Buzzer::~Buzzer()>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	83 ec 08             	sub    esp,0x8
c0013429:	68 5c 01 00 00       	push   0x15c
c001342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013432:	e8 76 f1 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013437:	83 c4 10             	add    esp,0x10
c001343a:	83 c4 0c             	add    esp,0xc
c001343d:	c3                   	ret    

c001343e <Buzzer::stop()>:
c001343e:	83 ec 14             	sub    esp,0x14
c0013441:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013445:	8b 10                	mov    edx,DWORD PTR [eax]
c0013447:	6a 00                	push   0x0
c0013449:	50                   	push   eax
c001344a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001344d:	83 c4 1c             	add    esp,0x1c
c0013450:	c3                   	ret    

c0013451 <beepThread(void*)>:
c0013451:	53                   	push   ebx
c0013452:	83 ec 08             	sub    esp,0x8
c0013455:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013459:	e8 41 8d 00 00       	call   c001c19f <unlockScheduler()>
c001345e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013463:	52                   	push   edx
c0013464:	52                   	push   edx
c0013465:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001346b:	52                   	push   edx
c001346c:	50                   	push   eax
c001346d:	e8 7a 92 00 00       	call   c001c6ec <nanoSleep(unsigned long long)>
c0013472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013475:	e8 c4 ff ff ff       	call   c001343e <Buzzer::stop()>
c001347a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013482:	83 c4 18             	add    esp,0x18
c0013485:	5b                   	pop    ebx
c0013486:	e9 a7 91 00 00       	jmp    c001c632 <blockTask(TaskState)>
c001348b:	90                   	nop

c001348c <Buzzer::beep(int, int, bool)>:
c001348c:	57                   	push   edi
c001348d:	56                   	push   esi
c001348e:	53                   	push   ebx
c001348f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013493:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013497:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001349b:	52                   	push   edx
c001349c:	52                   	push   edx
c001349d:	8b 06                	mov    eax,DWORD PTR [esi]
c001349f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a3:	56                   	push   esi
c00134a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	89 f8                	mov    eax,edi
c00134ac:	84 c0                	test   al,al
c00134ae:	74 1f                	je     c00134cf <Buzzer::beep(int, int, bool)+0x43>
c00134b0:	50                   	push   eax
c00134b1:	50                   	push   eax
c00134b2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134b8:	99                   	cdq    
c00134b9:	52                   	push   edx
c00134ba:	50                   	push   eax
c00134bb:	e8 2c 92 00 00       	call   c001c6ec <nanoSleep(unsigned long long)>
c00134c0:	83 c4 10             	add    esp,0x10
c00134c3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134c7:	5b                   	pop    ebx
c00134c8:	5e                   	pop    esi
c00134c9:	5f                   	pop    edi
c00134ca:	e9 6f ff ff ff       	jmp    c001343e <Buzzer::stop()>
c00134cf:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134d5:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00134da:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00134e2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00134e6:	c7 44 24 14 51 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013451
c00134ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134f2:	5b                   	pop    ebx
c00134f3:	5e                   	pop    esi
c00134f4:	5f                   	pop    edi
c00134f5:	e9 d4 8d 00 00       	jmp    c001c2ce <Process::createThread(void (*)(void*), void*, int)>

c00134fa <loadClockSettings()>:
c00134fa:	c7 05 b4 b9 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002b9b4,0xa
c0013504:	c6 05 b1 b9 02 c0 00 	mov    BYTE PTR ds:0xc002b9b1,0x0
c001350b:	c6 05 b0 b9 02 c0 01 	mov    BYTE PTR ds:0xc002b9b0,0x1
c0013512:	c3                   	ret    
c0013513:	90                   	nop

c0013514 <Clock::Clock(char const*)>:
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013522:	50                   	push   eax
c0013523:	e8 44 07 00 00       	call   c0013c6c <Device::Device(char const*)>
c0013528:	83 c4 10             	add    esp,0x10
c001352b:	ba 64 85 02 c0       	mov    edx,0xc0028564
c0013530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013534:	89 10                	mov    DWORD PTR [eax],edx
c0013536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013544:	90                   	nop
c0013545:	83 c4 0c             	add    esp,0xc
c0013548:	c3                   	ret    
c0013549:	90                   	nop

c001354a <Clock::~Clock()>:
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	ba 64 85 02 c0       	mov    edx,0xc0028564
c0013552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013556:	89 10                	mov    DWORD PTR [eax],edx
c0013558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355c:	83 ec 0c             	sub    esp,0xc
c001355f:	50                   	push   eax
c0013560:	e8 e9 03 00 00       	call   c001394e <Device::~Device()>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	90                   	nop
c0013569:	83 c4 0c             	add    esp,0xc
c001356c:	c3                   	ret    
c001356d:	90                   	nop

c001356e <Clock::~Clock()>:
c001356e:	83 ec 0c             	sub    esp,0xc
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013578:	e8 cd ff ff ff       	call   c001354a <Clock::~Clock()>
c001357d:	83 c4 10             	add    esp,0x10
c0013580:	83 ec 08             	sub    esp,0x8
c0013583:	68 58 01 00 00       	push   0x158
c0013588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358c:	e8 1c f0 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	83 c4 0c             	add    esp,0xc
c0013597:	c3                   	ret    

c0013598 <Clock::timeInSecondsLocal()>:
c0013598:	53                   	push   ebx
c0013599:	83 ec 14             	sub    esp,0x14
c001359c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00135a2:	50                   	push   eax
c00135a3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135a6:	0f b6 0d b0 b9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002b9b0
c00135ad:	03 0d b4 b9 02 c0    	add    ecx,DWORD PTR ds:0xc002b9b4
c00135b3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135b9:	89 cb                	mov    ebx,ecx
c00135bb:	c1 fb 1f             	sar    ebx,0x1f
c00135be:	01 c8                	add    eax,ecx
c00135c0:	11 da                	adc    edx,ebx
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	31 c9                	xor    ecx,ecx
c00135c7:	80 3d b1 b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b9b1,0x0
c00135ce:	74 05                	je     c00135d5 <Clock::timeInSecondsLocal()+0x3d>
c00135d0:	b9 08 07 00 00       	mov    ecx,0x708
c00135d5:	31 db                	xor    ebx,ebx
c00135d7:	01 c8                	add    eax,ecx
c00135d9:	11 da                	adc    edx,ebx
c00135db:	83 c4 08             	add    esp,0x8
c00135de:	5b                   	pop    ebx
c00135df:	c3                   	ret    

c00135e0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00135e0:	57                   	push   edi
c00135e1:	56                   	push   esi
c00135e2:	53                   	push   ebx
c00135e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135f1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00135f4:	0f b6 05 b0 b9 02 c0 	movzx  eax,BYTE PTR ds:0xc002b9b0
c00135fb:	03 05 b4 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b9b4
c0013601:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013607:	99                   	cdq    
c0013608:	29 c6                	sub    esi,eax
c001360a:	19 d7                	sbb    edi,edx
c001360c:	89 f0                	mov    eax,esi
c001360e:	89 fa                	mov    edx,edi
c0013610:	31 f6                	xor    esi,esi
c0013612:	80 3d b1 b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b9b1,0x0
c0013619:	74 05                	je     c0013620 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001361b:	be 08 07 00 00       	mov    esi,0x708
c0013620:	31 ff                	xor    edi,edi
c0013622:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013626:	29 f0                	sub    eax,esi
c0013628:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001362c:	19 fa                	sbb    edx,edi
c001362e:	89 d8                	mov    eax,ebx
c0013630:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013634:	5b                   	pop    ebx
c0013635:	5e                   	pop    esi
c0013636:	5f                   	pop    edi
c0013637:	ff e0                	jmp    eax

c0013639 <datetimeToSeconds(datetime_t)>:
c0013639:	55                   	push   ebp
c001363a:	57                   	push   edi
c001363b:	56                   	push   esi
c001363c:	53                   	push   ebx
c001363d:	83 ec 14             	sub    esp,0x14
c0013640:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013644:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013648:	89 d3                	mov    ebx,edx
c001364a:	0f b6 c6             	movzx  eax,dh
c001364d:	c1 eb 10             	shr    ebx,0x10
c0013650:	48                   	dec    eax
c0013651:	66 81 eb 6c 07       	sub    bx,0x76c
c0013656:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001365a:	0f b6 f5             	movzx  esi,ch
c001365d:	89 cf                	mov    edi,ecx
c001365f:	6b f6 3c             	imul   esi,esi,0x3c
c0013662:	c1 ef 10             	shr    edi,0x10
c0013665:	0f b6 c9             	movzx  ecx,cl
c0013668:	89 f8                	mov    eax,edi
c001366a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013670:	0f b6 f8             	movzx  edi,al
c0013673:	0f b6 d2             	movzx  edx,dl
c0013676:	01 fe                	add    esi,edi
c0013678:	01 f1                	add    ecx,esi
c001367a:	0f b7 f3             	movzx  esi,bx
c001367d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013681:	c1 f9 1f             	sar    ecx,0x1f
c0013684:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013689:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001368d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013692:	8b 0c 8d a0 85 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7a60]
c0013699:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001369d:	76 29                	jbe    c00136c8 <datetimeToSeconds(datetime_t)+0x8f>
c001369f:	f6 c3 03             	test   bl,0x3
c00136a2:	75 24                	jne    c00136c8 <datetimeToSeconds(datetime_t)+0x8f>
c00136a4:	31 d2                	xor    edx,edx
c00136a6:	bf 64 00 00 00       	mov    edi,0x64
c00136ab:	89 d8                	mov    eax,ebx
c00136ad:	66 f7 f7             	div    di
c00136b0:	66 85 d2             	test   dx,dx
c00136b3:	75 12                	jne    c00136c7 <datetimeToSeconds(datetime_t)+0x8e>
c00136b5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136bb:	bf 90 01 00 00       	mov    edi,0x190
c00136c0:	99                   	cdq    
c00136c1:	f7 ff                	idiv   edi
c00136c3:	85 d2                	test   edx,edx
c00136c5:	75 01                	jne    c00136c8 <datetimeToSeconds(datetime_t)+0x8f>
c00136c7:	41                   	inc    ecx
c00136c8:	66 83 fb 46          	cmp    bx,0x46
c00136cc:	76 45                	jbe    c0013713 <datetimeToSeconds(datetime_t)+0xda>
c00136ce:	bb 46 00 00 00       	mov    ebx,0x46
c00136d3:	bf 64 00 00 00       	mov    edi,0x64
c00136d8:	bd 90 01 00 00       	mov    ebp,0x190
c00136dd:	b8 6d 01 00 00       	mov    eax,0x16d
c00136e2:	f6 c3 03             	test   bl,0x3
c00136e5:	75 23                	jne    c001370a <datetimeToSeconds(datetime_t)+0xd1>
c00136e7:	89 d8                	mov    eax,ebx
c00136e9:	99                   	cdq    
c00136ea:	f7 ff                	idiv   edi
c00136ec:	b8 6e 01 00 00       	mov    eax,0x16e
c00136f1:	85 d2                	test   edx,edx
c00136f3:	75 15                	jne    c001370a <datetimeToSeconds(datetime_t)+0xd1>
c00136f5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136fb:	99                   	cdq    
c00136fc:	f7 fd                	idiv   ebp
c00136fe:	83 fa 01             	cmp    edx,0x1
c0013701:	19 c0                	sbb    eax,eax
c0013703:	f7 d0                	not    eax
c0013705:	05 6e 01 00 00       	add    eax,0x16e
c001370a:	01 c1                	add    ecx,eax
c001370c:	43                   	inc    ebx
c001370d:	39 f3                	cmp    ebx,esi
c001370f:	7c cc                	jl     c00136dd <datetimeToSeconds(datetime_t)+0xa4>
c0013711:	eb 35                	jmp    c0013748 <datetimeToSeconds(datetime_t)+0x10f>
c0013713:	74 33                	je     c0013748 <datetimeToSeconds(datetime_t)+0x10f>
c0013715:	b8 45 00 00 00       	mov    eax,0x45
c001371a:	89 c2                	mov    edx,eax
c001371c:	83 e2 03             	and    edx,0x3
c001371f:	39 f0                	cmp    eax,esi
c0013721:	7e 0f                	jle    c0013732 <datetimeToSeconds(datetime_t)+0xf9>
c0013723:	83 fa 01             	cmp    edx,0x1
c0013726:	19 d2                	sbb    edx,edx
c0013728:	48                   	dec    eax
c0013729:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013730:	eb e8                	jmp    c001371a <datetimeToSeconds(datetime_t)+0xe1>
c0013732:	b8 6d 01 00 00       	mov    eax,0x16d
c0013737:	85 d2                	test   edx,edx
c0013739:	75 0b                	jne    c0013746 <datetimeToSeconds(datetime_t)+0x10d>
c001373b:	66 83 fb 01          	cmp    bx,0x1
c001373f:	19 c0                	sbb    eax,eax
c0013741:	05 6e 01 00 00       	add    eax,0x16e
c0013746:	29 c1                	sub    ecx,eax
c0013748:	b8 80 51 01 00       	mov    eax,0x15180
c001374d:	f7 e9                	imul   ecx
c001374f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013753:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013757:	83 c4 14             	add    esp,0x14
c001375a:	5b                   	pop    ebx
c001375b:	5e                   	pop    esi
c001375c:	5f                   	pop    edi
c001375d:	5d                   	pop    ebp
c001375e:	c3                   	ret    
c001375f:	90                   	nop

c0013760 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013760:	57                   	push   edi
c0013761:	56                   	push   esi
c0013762:	53                   	push   ebx
c0013763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013767:	8b 06                	mov    eax,DWORD PTR [esi]
c0013769:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001376c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013774:	e8 c0 fe ff ff       	call   c0013639 <datetimeToSeconds(datetime_t)>
c0013779:	59                   	pop    ecx
c001377a:	0f b6 0d b0 b9 02 c0 	movzx  ecx,BYTE PTR ds:0xc002b9b0
c0013781:	5b                   	pop    ebx
c0013782:	03 0d b4 b9 02 c0    	add    ecx,DWORD PTR ds:0xc002b9b4
c0013788:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001378e:	89 cb                	mov    ebx,ecx
c0013790:	c1 fb 1f             	sar    ebx,0x1f
c0013793:	29 c8                	sub    eax,ecx
c0013795:	19 da                	sbb    edx,ebx
c0013797:	31 c9                	xor    ecx,ecx
c0013799:	80 3d b1 b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b9b1,0x0
c00137a0:	74 05                	je     c00137a7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00137a2:	b9 08 07 00 00       	mov    ecx,0x708
c00137a7:	31 db                	xor    ebx,ebx
c00137a9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137ad:	29 c8                	sub    eax,ecx
c00137af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137b3:	19 da                	sbb    edx,ebx
c00137b5:	89 f8                	mov    eax,edi
c00137b7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137bb:	5b                   	pop    ebx
c00137bc:	5e                   	pop    esi
c00137bd:	5f                   	pop    edi
c00137be:	ff e0                	jmp    eax

c00137c0 <secondsToDatetime(unsigned long long)>:
c00137c0:	55                   	push   ebp
c00137c1:	57                   	push   edi
c00137c2:	56                   	push   esi
c00137c3:	53                   	push   ebx
c00137c4:	83 ec 1c             	sub    esp,0x1c
c00137c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00137d3:	6a 00                	push   0x0
c00137d5:	68 80 51 01 00       	push   0x15180
c00137da:	55                   	push   ebp
c00137db:	57                   	push   edi
c00137dc:	e8 2b 0d 01 00       	call   c002450c <__udivdi3>
c00137e1:	83 c4 10             	add    esp,0x10
c00137e4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137ee:	6a 00                	push   0x0
c00137f0:	68 80 51 01 00       	push   0x15180
c00137f5:	55                   	push   ebp
c00137f6:	57                   	push   edi
c00137f7:	bf 10 0e 00 00       	mov    edi,0xe10
c00137fc:	e8 0b 0e 01 00       	call   c002460c <__umoddi3>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	99                   	cdq    
c0013805:	f7 ff                	idiv   edi
c0013807:	bf 3c 00 00 00       	mov    edi,0x3c
c001380c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001380f:	89 d0                	mov    eax,edx
c0013811:	99                   	cdq    
c0013812:	f7 ff                	idiv   edi
c0013814:	85 db                	test   ebx,ebx
c0013816:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013819:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001381c:	79 11                	jns    c001382f <secondsToDatetime(unsigned long long)+0x6f>
c001381e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013822:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013828:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001382d:	eb 07                	jmp    c0013836 <secondsToDatetime(unsigned long long)+0x76>
c001382f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013834:	89 d8                	mov    eax,ebx
c0013836:	bf b4 05 00 00       	mov    edi,0x5b4
c001383b:	99                   	cdq    
c001383c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013841:	f7 f9                	idiv   ecx
c0013843:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001384c:	31 d2                	xor    edx,edx
c001384e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013856:	01 c3                	add    ebx,eax
c0013858:	89 d8                	mov    eax,ebx
c001385a:	f7 f1                	div    ecx
c001385c:	31 d2                	xor    edx,edx
c001385e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013861:	89 d8                	mov    eax,ebx
c0013863:	f7 f7                	div    edi
c0013865:	31 d2                	xor    edx,edx
c0013867:	29 c1                	sub    ecx,eax
c0013869:	89 d8                	mov    eax,ebx
c001386b:	f7 f5                	div    ebp
c001386d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013872:	29 c1                	sub    ecx,eax
c0013874:	31 d2                	xor    edx,edx
c0013876:	89 c8                	mov    eax,ecx
c0013878:	f7 f5                	div    ebp
c001387a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001387f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013883:	31 d2                	xor    edx,edx
c0013885:	89 c8                	mov    eax,ecx
c0013887:	f7 f5                	div    ebp
c0013889:	31 d2                	xor    edx,edx
c001388b:	01 c3                	add    ebx,eax
c001388d:	89 c8                	mov    eax,ecx
c001388f:	f7 f7                	div    edi
c0013891:	bf 99 00 00 00       	mov    edi,0x99
c0013896:	29 c3                	sub    ebx,eax
c0013898:	31 d2                	xor    edx,edx
c001389a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00138a2:	29 c3                	sub    ebx,eax
c00138a4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00138a7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138aa:	bb 05 00 00 00       	mov    ebx,0x5
c00138af:	83 c1 02             	add    ecx,0x2
c00138b2:	89 c8                	mov    eax,ecx
c00138b4:	f7 f7                	div    edi
c00138b6:	31 d2                	xor    edx,edx
c00138b8:	89 c7                	mov    edi,eax
c00138ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00138c0:	83 c0 02             	add    eax,0x2
c00138c3:	f7 f3                	div    ebx
c00138c5:	89 eb                	mov    ebx,ebp
c00138c7:	29 c3                	sub    ebx,eax
c00138c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00138cf:	88 1e                	mov    BYTE PTR [esi],bl
c00138d1:	19 c0                	sbb    eax,eax
c00138d3:	31 d2                	xor    edx,edx
c00138d5:	83 e0 0c             	and    eax,0xc
c00138d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00138dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00138e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00138e8:	83 f9 01             	cmp    ecx,0x1
c00138eb:	0f 96 c2             	setbe  dl
c00138ee:	41                   	inc    ecx
c00138ef:	01 d0                	add    eax,edx
c00138f1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00138f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138f8:	83 c4 1c             	add    esp,0x1c
c00138fb:	89 f0                	mov    eax,esi
c00138fd:	5b                   	pop    ebx
c00138fe:	5e                   	pop    esi
c00138ff:	5f                   	pop    edi
c0013900:	5d                   	pop    ebp
c0013901:	c2 04 00             	ret    0x4

c0013904 <Clock::timeInDatetimeLocal()>:
c0013904:	53                   	push   ebx
c0013905:	83 ec 14             	sub    esp,0x14
c0013908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001390c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013910:	e8 83 fc ff ff       	call   c0013598 <Clock::timeInSecondsLocal()>
c0013915:	83 c4 0c             	add    esp,0xc
c0013918:	52                   	push   edx
c0013919:	50                   	push   eax
c001391a:	53                   	push   ebx
c001391b:	e8 a0 fe ff ff       	call   c00137c0 <secondsToDatetime(unsigned long long)>
c0013920:	89 d8                	mov    eax,ebx
c0013922:	83 c4 14             	add    esp,0x14
c0013925:	5b                   	pop    ebx
c0013926:	c2 04 00             	ret    0x4
c0013929:	90                   	nop

c001392a <Device::hibernate()>:
c001392a:	c3                   	ret    
c001392b:	90                   	nop

c001392c <Device::wake()>:
c001392c:	c3                   	ret    
c001392d:	90                   	nop

c001392e <Device::detect()>:
c001392e:	c3                   	ret    
c001392f:	90                   	nop

c0013930 <Device::disableLegacy()>:
c0013930:	c3                   	ret    
c0013931:	90                   	nop

c0013932 <Device::powerSaving(PowerSavingLevel)>:
c0013932:	c3                   	ret    
c0013933:	90                   	nop

c0013934 <DriverlessDevice::close(int, int, void*)>:
c0013934:	31 c0                	xor    eax,eax
c0013936:	c3                   	ret    
c0013937:	90                   	nop

c0013938 <DriverlessDevice::detect()>:
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <DriverlessDevice::open(int, int, void*)>:
c001393a:	83 ec 18             	sub    esp,0x18
c001393d:	68 d0 85 02 c0       	push   0xc00285d0
c0013942:	e8 10 58 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0013947:	83 c8 ff             	or     eax,0xffffffff
c001394a:	83 c4 1c             	add    esp,0x1c
c001394d:	c3                   	ret    

c001394e <Device::~Device()>:
c001394e:	ba f8 85 02 c0       	mov    edx,0xc00285f8
c0013953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013957:	89 10                	mov    DWORD PTR [eax],edx
c0013959:	90                   	nop
c001395a:	c3                   	ret    
c001395b:	90                   	nop

c001395c <Device::~Device()>:
c001395c:	83 ec 0c             	sub    esp,0xc
c001395f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013963:	e8 e6 ff ff ff       	call   c001394e <Device::~Device()>
c0013968:	83 c4 04             	add    esp,0x4
c001396b:	83 ec 08             	sub    esp,0x8
c001396e:	68 58 01 00 00       	push   0x158
c0013973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013977:	e8 31 ec ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001397c:	83 c4 10             	add    esp,0x10
c001397f:	83 c4 0c             	add    esp,0xc
c0013982:	c3                   	ret    
c0013983:	90                   	nop

c0013984 <Device::findAndLoadDriver()>:
c0013984:	c3                   	ret    
c0013985:	90                   	nop

c0013986 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013986:	57                   	push   edi
c0013987:	b9 09 00 00 00       	mov    ecx,0x9
c001398c:	56                   	push   esi
c001398d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013991:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013995:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001399f:	81 c7 18 01 00 00    	add    edi,0x118
c00139a5:	fc                   	cld    
c00139a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139a8:	5e                   	pop    esi
c00139a9:	5f                   	pop    edi
c00139aa:	c3                   	ret    
c00139ab:	90                   	nop

c00139ac <Device::preOpenACPI(void*, char*, char*)>:
c00139ac:	56                   	push   esi
c00139ad:	53                   	push   ebx
c00139ae:	83 ec 08             	sub    esp,0x8
c00139b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139b9:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00139c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139c7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00139cd:	6a 1e                	push   0x1e
c00139cf:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00139d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139d9:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00139df:	50                   	push   eax
c00139e0:	e8 60 cc fe ff       	call   c0000645 <memcpy>
c00139e5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00139e9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00139ed:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00139f5:	83 c4 14             	add    esp,0x14
c00139f8:	5b                   	pop    ebx
c00139f9:	5e                   	pop    esi
c00139fa:	e9 46 cc fe ff       	jmp    c0000645 <memcpy>
c00139ff:	90                   	nop

c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a04:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a09:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a10:	75 0b                	jne    c0013a1d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a14:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a18:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a1b:	eb 1e                	jmp    c0013a3b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a1d:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0013a22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a28:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a2e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a30:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a38:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a3b:	ff e0                	jmp    eax
c0013a3d:	90                   	nop

c0013a3e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a42:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a47:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a4e:	75 0b                	jne    c0013a5b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a56:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a59:	eb 1e                	jmp    c0013a79 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a5b:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0013a60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a66:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a6e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a76:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a79:	ff e0                	jmp    eax
c0013a7b:	90                   	nop

c0013a7c <Device::addChild(Device*)>:
c0013a7c:	53                   	push   ebx
c0013a7d:	83 ec 08             	sub    esp,0x8
c0013a80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a88:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a8e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a94:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a96:	85 d2                	test   edx,edx
c0013a98:	74 04                	je     c0013a9e <Device::addChild(Device*)+0x22>
c0013a9a:	89 d3                	mov    ebx,edx
c0013a9c:	eb f6                	jmp    c0013a94 <Device::addChild(Device*)+0x18>
c0013a9e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013aa1:	83 ec 0c             	sub    esp,0xc
c0013aa4:	6a 08                	push   0x8
c0013aa6:	e8 15 ba ff ff       	call   c000f4c0 <malloc>
c0013aab:	89 03                	mov    DWORD PTR [ebx],eax
c0013aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013aba:	83 c4 18             	add    esp,0x18
c0013abd:	5b                   	pop    ebx
c0013abe:	c3                   	ret    
c0013abf:	90                   	nop

c0013ac0 <Device::removeAllChildren()>:
c0013ac0:	56                   	push   esi
c0013ac1:	53                   	push   ebx
c0013ac2:	52                   	push   edx
c0013ac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ac7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013acd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ad0:	74 17                	je     c0013ae9 <Device::removeAllChildren()+0x29>
c0013ad2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ad5:	85 c0                	test   eax,eax
c0013ad7:	74 0c                	je     c0013ae5 <Device::removeAllChildren()+0x25>
c0013ad9:	83 ec 0c             	sub    esp,0xc
c0013adc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ade:	50                   	push   eax
c0013adf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013ae2:	83 c4 10             	add    esp,0x10
c0013ae5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ae7:	eb e4                	jmp    c0013acd <Device::removeAllChildren()+0xd>
c0013ae9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013af5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013afb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b02:	58                   	pop    eax
c0013b03:	5b                   	pop    ebx
c0013b04:	5e                   	pop    esi
c0013b05:	c3                   	ret    

c0013b06 <Device::hibernateAll()>:
c0013b06:	53                   	push   ebx
c0013b07:	83 ec 14             	sub    esp,0x14
c0013b0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b10:	53                   	push   ebx
c0013b11:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b1a:	83 c4 10             	add    esp,0x10
c0013b1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b20:	74 0f                	je     c0013b31 <Device::hibernateAll()+0x2b>
c0013b22:	83 ec 0c             	sub    esp,0xc
c0013b25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b28:	e8 d9 ff ff ff       	call   c0013b06 <Device::hibernateAll()>
c0013b2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b2f:	eb e9                	jmp    c0013b1a <Device::hibernateAll()+0x14>
c0013b31:	83 c4 08             	add    esp,0x8
c0013b34:	5b                   	pop    ebx
c0013b35:	c3                   	ret    

c0013b36 <Device::wakeAll()>:
c0013b36:	53                   	push   ebx
c0013b37:	83 ec 14             	sub    esp,0x14
c0013b3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b40:	53                   	push   ebx
c0013b41:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b50:	74 0f                	je     c0013b61 <Device::wakeAll()+0x2b>
c0013b52:	83 ec 0c             	sub    esp,0xc
c0013b55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b58:	e8 d9 ff ff ff       	call   c0013b36 <Device::wakeAll()>
c0013b5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b5f:	eb e9                	jmp    c0013b4a <Device::wakeAll()+0x14>
c0013b61:	83 c4 08             	add    esp,0x8
c0013b64:	5b                   	pop    ebx
c0013b65:	c3                   	ret    

c0013b66 <Device::detectAll()>:
c0013b66:	53                   	push   ebx
c0013b67:	83 ec 14             	sub    esp,0x14
c0013b6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b70:	53                   	push   ebx
c0013b71:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b7a:	83 c4 10             	add    esp,0x10
c0013b7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b80:	74 0f                	je     c0013b91 <Device::detectAll()+0x2b>
c0013b82:	83 ec 0c             	sub    esp,0xc
c0013b85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b88:	e8 d9 ff ff ff       	call   c0013b66 <Device::detectAll()>
c0013b8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b8f:	eb e9                	jmp    c0013b7a <Device::detectAll()+0x14>
c0013b91:	83 c4 08             	add    esp,0x8
c0013b94:	5b                   	pop    ebx
c0013b95:	c3                   	ret    

c0013b96 <Device::disableLegacyAll()>:
c0013b96:	53                   	push   ebx
c0013b97:	83 ec 14             	sub    esp,0x14
c0013b9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba0:	53                   	push   ebx
c0013ba1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013ba4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013baa:	83 c4 10             	add    esp,0x10
c0013bad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bb0:	74 0f                	je     c0013bc1 <Device::disableLegacyAll()+0x2b>
c0013bb2:	83 ec 0c             	sub    esp,0xc
c0013bb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb8:	e8 d9 ff ff ff       	call   c0013b96 <Device::disableLegacyAll()>
c0013bbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bbf:	eb e9                	jmp    c0013baa <Device::disableLegacyAll()+0x14>
c0013bc1:	83 c4 08             	add    esp,0x8
c0013bc4:	5b                   	pop    ebx
c0013bc5:	c3                   	ret    

c0013bc6 <Device::loadDriversForAll()>:
c0013bc6:	53                   	push   ebx
c0013bc7:	83 ec 08             	sub    esp,0x8
c0013bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bce:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013bd4:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013bd6:	85 db                	test   ebx,ebx
c0013bd8:	74 12                	je     c0013bec <Device::loadDriversForAll()+0x26>
c0013bda:	83 ec 0c             	sub    esp,0xc
c0013bdd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013be0:	e8 e1 ff ff ff       	call   c0013bc6 <Device::loadDriversForAll()>
c0013be5:	83 c4 10             	add    esp,0x10
c0013be8:	89 d8                	mov    eax,ebx
c0013bea:	eb e8                	jmp    c0013bd4 <Device::loadDriversForAll()+0xe>
c0013bec:	83 c4 08             	add    esp,0x8
c0013bef:	5b                   	pop    ebx
c0013bf0:	c3                   	ret    
c0013bf1:	90                   	nop

c0013bf2 <Device::closeAll()>:
c0013bf2:	53                   	push   ebx
c0013bf3:	83 ec 08             	sub    esp,0x8
c0013bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bfc:	6a 00                	push   0x0
c0013bfe:	6a 00                	push   0x0
c0013c00:	6a 00                	push   0x0
c0013c02:	53                   	push   ebx
c0013c03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c06:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c0c:	83 c4 10             	add    esp,0x10
c0013c0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c12:	74 0f                	je     c0013c23 <Device::closeAll()+0x31>
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c1a:	e8 d3 ff ff ff       	call   c0013bf2 <Device::closeAll()>
c0013c1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c21:	eb e9                	jmp    c0013c0c <Device::closeAll()+0x1a>
c0013c23:	83 c4 08             	add    esp,0x8
c0013c26:	5b                   	pop    ebx
c0013c27:	c3                   	ret    

c0013c28 <Device::powerSavingAll(PowerSavingLevel)>:
c0013c28:	56                   	push   esi
c0013c29:	53                   	push   ebx
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c37:	56                   	push   esi
c0013c38:	53                   	push   ebx
c0013c39:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c48:	74 0f                	je     c0013c59 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c4a:	52                   	push   edx
c0013c4b:	52                   	push   edx
c0013c4c:	56                   	push   esi
c0013c4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c50:	e8 d3 ff ff ff       	call   c0013c28 <Device::powerSavingAll(PowerSavingLevel)>
c0013c55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c57:	eb e9                	jmp    c0013c42 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c59:	58                   	pop    eax
c0013c5a:	5b                   	pop    ebx
c0013c5b:	5e                   	pop    esi
c0013c5c:	c3                   	ret    
c0013c5d:	90                   	nop

c0013c5e <Device::setName(char const*)>:
c0013c5e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c66:	e9 af ca fe ff       	jmp    c000071a <strcpy>
c0013c6b:	90                   	nop

c0013c6c <Device::Device(char const*)>:
c0013c6c:	83 ec 1c             	sub    esp,0x1c
c0013c6f:	ba f8 85 02 c0       	mov    edx,0xc00285f8
c0013c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c78:	89 10                	mov    DWORD PTR [eax],edx
c0013c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c7e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c9a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cb2:	83 ec 08             	sub    esp,0x8
c0013cb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cbd:	e8 9c ff ff ff       	call   c0013c5e <Device::setName(char const*)>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013ccd:	83 ec 0c             	sub    esp,0xc
c0013cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cd4:	e8 e7 b7 ff ff       	call   c000f4c0 <malloc>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ce2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ce9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ced:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013cf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d07:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d18:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d23:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d4a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d58:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d62:	90                   	nop
c0013d63:	83 c4 1c             	add    esp,0x1c
c0013d66:	c3                   	ret    
c0013d67:	90                   	nop

c0013d68 <Device::getName()>:
c0013d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d6c:	05 d0 00 00 00       	add    eax,0xd0
c0013d71:	c3                   	ret    

c0013d72 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d72:	83 ec 0c             	sub    esp,0xc
c0013d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d79:	83 ec 08             	sub    esp,0x8
c0013d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d80:	50                   	push   eax
c0013d81:	e8 e6 fe ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	ba 24 86 02 c0       	mov    edx,0xc0028624
c0013d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d92:	89 10                	mov    DWORD PTR [eax],edx
c0013d94:	90                   	nop
c0013d95:	83 c4 0c             	add    esp,0xc
c0013d98:	c3                   	ret    
c0013d99:	90                   	nop

c0013d9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d9a:	57                   	push   edi
c0013d9b:	56                   	push   esi
c0013d9c:	53                   	push   ebx
c0013d9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013da1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013da5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013da9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013daf:	75 0c                	jne    c0013dbd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013db1:	52                   	push   edx
c0013db2:	52                   	push   edx
c0013db3:	53                   	push   ebx
c0013db4:	56                   	push   esi
c0013db5:	e8 90 26 01 00       	call   c002644a <LinkedList<Device>::addElement(Device*)>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dc3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dc6:	74 12                	je     c0013dda <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013dc8:	50                   	push   eax
c0013dc9:	57                   	push   edi
c0013dca:	56                   	push   esi
c0013dcb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dce:	e8 c7 ff ff ff       	call   c0013d9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013dd3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	eb e9                	jmp    c0013dc3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013dda:	5b                   	pop    ebx
c0013ddb:	5e                   	pop    esi
c0013ddc:	5f                   	pop    edi
c0013ddd:	c3                   	ret    

c0013dde <getDevicesOfType(DeviceType)>:
c0013dde:	53                   	push   ebx
c0013ddf:	83 ec 14             	sub    esp,0x14
c0013de2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013de6:	53                   	push   ebx
c0013de7:	e8 3a 27 01 00       	call   c0026526 <LinkedList<Device>::LinkedList()>
c0013dec:	83 c4 0c             	add    esp,0xc
c0013def:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013df3:	53                   	push   ebx
c0013df4:	ff 35 48 b8 02 c0    	push   DWORD PTR ds:0xc002b848
c0013dfa:	e8 9b ff ff ff       	call   c0013d9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013dff:	89 d8                	mov    eax,ebx
c0013e01:	83 c4 18             	add    esp,0x18
c0013e04:	5b                   	pop    ebx
c0013e05:	c2 04 00             	ret    0x4

c0013e08 <HardDiskController::HardDiskController(char const*)>:
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0f:	83 ec 08             	sub    esp,0x8
c0013e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e16:	50                   	push   eax
c0013e17:	e8 50 fe ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013e1c:	83 c4 10             	add    esp,0x10
c0013e1f:	ba 50 86 02 c0       	mov    edx,0xc0028650
c0013e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e28:	89 10                	mov    DWORD PTR [eax],edx
c0013e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e38:	90                   	nop
c0013e39:	83 c4 0c             	add    esp,0xc
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <HardDiskController::~HardDiskController()>:
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	ba 50 86 02 c0       	mov    edx,0xc0028650
c0013e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4a:	89 10                	mov    DWORD PTR [eax],edx
c0013e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	50                   	push   eax
c0013e54:	e8 f5 fa ff ff       	call   c001394e <Device::~Device()>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	90                   	nop
c0013e5d:	83 c4 0c             	add    esp,0xc
c0013e60:	c3                   	ret    
c0013e61:	90                   	nop

c0013e62 <HardDiskController::~HardDiskController()>:
c0013e62:	83 ec 0c             	sub    esp,0xc
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e6c:	e8 cd ff ff ff       	call   c0013e3e <HardDiskController::~HardDiskController()>
c0013e71:	83 c4 10             	add    esp,0x10
c0013e74:	83 ec 08             	sub    esp,0x8
c0013e77:	68 58 01 00 00       	push   0x158
c0013e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e80:	e8 28 e7 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	83 c4 0c             	add    esp,0xc
c0013e8b:	c3                   	ret    

c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e93:	83 ec 08             	sub    esp,0x8
c0013e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9a:	50                   	push   eax
c0013e9b:	e8 cc fd ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013ea0:	83 c4 10             	add    esp,0x10
c0013ea3:	ba 7c 86 02 c0       	mov    edx,0xc002867c
c0013ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eac:	89 10                	mov    DWORD PTR [eax],edx
c0013eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ebd:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eda:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eee:	90                   	nop
c0013eef:	83 c4 0c             	add    esp,0xc
c0013ef2:	c3                   	ret    
c0013ef3:	90                   	nop

c0013ef4 <PhysicalDisk::startCache()>:
c0013ef4:	56                   	push   esi
c0013ef5:	53                   	push   ebx
c0013ef6:	83 ec 10             	sub    esp,0x10
c0013ef9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013efd:	6a 30                	push   0x30
c0013eff:	e8 bc b5 ff ff       	call   c000f4c0 <malloc>
c0013f04:	89 c6                	mov    esi,eax
c0013f06:	58                   	pop    eax
c0013f07:	5a                   	pop    edx
c0013f08:	53                   	push   ebx
c0013f09:	56                   	push   esi
c0013f0a:	e8 63 25 00 00       	call   c0016472 <VCache::VCache(PhysicalDisk*)>
c0013f0f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f15:	83 c4 14             	add    esp,0x14
c0013f18:	5b                   	pop    ebx
c0013f19:	5e                   	pop    esi
c0013f1a:	c3                   	ret    
c0013f1b:	90                   	nop

c0013f1c <PhysicalDisk::~PhysicalDisk()>:
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	ba 7c 86 02 c0       	mov    edx,0xc002867c
c0013f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f28:	89 10                	mov    DWORD PTR [eax],edx
c0013f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2e:	83 ec 0c             	sub    esp,0xc
c0013f31:	50                   	push   eax
c0013f32:	e8 17 fa ff ff       	call   c001394e <Device::~Device()>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	90                   	nop
c0013f3b:	83 c4 0c             	add    esp,0xc
c0013f3e:	c3                   	ret    
c0013f3f:	90                   	nop

c0013f40 <PhysicalDisk::~PhysicalDisk()>:
c0013f40:	83 ec 0c             	sub    esp,0xc
c0013f43:	83 ec 0c             	sub    esp,0xc
c0013f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4a:	e8 cd ff ff ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c0013f4f:	83 c4 10             	add    esp,0x10
c0013f52:	83 ec 08             	sub    esp,0x8
c0013f55:	68 6c 01 00 00       	push   0x16c
c0013f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f5e:	e8 4a e6 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	83 c4 0c             	add    esp,0xc
c0013f69:	c3                   	ret    

c0013f6a <FPU::FPU(char const*)>:
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f71:	83 ec 08             	sub    esp,0x8
c0013f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f78:	50                   	push   eax
c0013f79:	e8 ee fc ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	ba bc 86 02 c0       	mov    edx,0xc00286bc
c0013f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8a:	89 10                	mov    DWORD PTR [eax],edx
c0013f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f90:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f9a:	90                   	nop
c0013f9b:	83 c4 0c             	add    esp,0xc
c0013f9e:	c3                   	ret    
c0013f9f:	90                   	nop

c0013fa0 <FPU::~FPU()>:
c0013fa0:	83 ec 0c             	sub    esp,0xc
c0013fa3:	ba bc 86 02 c0       	mov    edx,0xc00286bc
c0013fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fac:	89 10                	mov    DWORD PTR [eax],edx
c0013fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	50                   	push   eax
c0013fb6:	e8 93 f9 ff ff       	call   c001394e <Device::~Device()>
c0013fbb:	83 c4 10             	add    esp,0x10
c0013fbe:	90                   	nop
c0013fbf:	83 c4 0c             	add    esp,0xc
c0013fc2:	c3                   	ret    
c0013fc3:	90                   	nop

c0013fc4 <FPU::~FPU()>:
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	83 ec 0c             	sub    esp,0xc
c0013fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fce:	e8 cd ff ff ff       	call   c0013fa0 <FPU::~FPU()>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	83 ec 08             	sub    esp,0x8
c0013fd9:	68 58 01 00 00       	push   0x158
c0013fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fe2:	e8 c6 e5 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	83 c4 0c             	add    esp,0xc
c0013fed:	c3                   	ret    

c0013fee <setupFPU()>:
c0013fee:	53                   	push   ebx
c0013fef:	83 ec 08             	sub    esp,0x8
c0013ff2:	8b 15 48 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b848
c0013ff8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fff:	74 19                	je     c001401a <setupFPU()+0x2c>
c0014001:	83 ec 0c             	sub    esp,0xc
c0014004:	68 58 01 00 00       	push   0x158
c0014009:	e8 b2 b4 ff ff       	call   c000f4c0 <malloc>
c001400e:	89 c3                	mov    ebx,eax
c0014010:	89 04 24             	mov    DWORD PTR [esp],eax
c0014013:	e8 84 f0 00 00       	call   c002309c <AVX::AVX()>
c0014018:	eb 5b                	jmp    c0014075 <setupFPU()+0x87>
c001401a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014020:	84 c0                	test   al,al
c0014022:	79 19                	jns    c001403d <setupFPU()+0x4f>
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	68 58 01 00 00       	push   0x158
c001402c:	e8 8f b4 ff ff       	call   c000f4c0 <malloc>
c0014031:	89 c3                	mov    ebx,eax
c0014033:	89 04 24             	mov    DWORD PTR [esp],eax
c0014036:	e8 87 f1 00 00       	call   c00231c2 <SSE::SSE()>
c001403b:	eb 38                	jmp    c0014075 <setupFPU()+0x87>
c001403d:	a8 20                	test   al,0x20
c001403f:	74 19                	je     c001405a <setupFPU()+0x6c>
c0014041:	83 ec 0c             	sub    esp,0xc
c0014044:	68 58 01 00 00       	push   0x158
c0014049:	e8 72 b4 ff ff       	call   c000f4c0 <malloc>
c001404e:	89 c3                	mov    ebx,eax
c0014050:	89 04 24             	mov    DWORD PTR [esp],eax
c0014053:	e8 d4 f0 00 00       	call   c002312c <MMX::MMX()>
c0014058:	eb 1b                	jmp    c0014075 <setupFPU()+0x87>
c001405a:	a8 10                	test   al,0x10
c001405c:	74 1c                	je     c001407a <setupFPU()+0x8c>
c001405e:	83 ec 0c             	sub    esp,0xc
c0014061:	68 58 01 00 00       	push   0x158
c0014066:	e8 55 b4 ff ff       	call   c000f4c0 <malloc>
c001406b:	89 c3                	mov    ebx,eax
c001406d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014070:	e8 db f1 00 00       	call   c0023250 <x87::x87()>
c0014075:	83 c4 10             	add    esp,0x10
c0014078:	eb 24                	jmp    c001409e <setupFPU()+0xb0>
c001407a:	83 e0 ef             	and    eax,0xffffffef
c001407d:	83 ec 0c             	sub    esp,0xc
c0014080:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014086:	68 a8 86 02 c0       	push   0xc00286a8
c001408b:	e8 fd e5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014090:	0f 20 c0             	mov    eax,cr0
c0014093:	83 c8 04             	or     eax,0x4
c0014096:	0f 22 c0             	mov    cr0,eax
c0014099:	31 db                	xor    ebx,ebx
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	89 d8                	mov    eax,ebx
c00140a0:	83 c4 08             	add    esp,0x8
c00140a3:	5b                   	pop    ebx
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00140a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140ae:	c1 e0 04             	shl    eax,0x4
c00140b1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00140b5:	8d 50 10             	lea    edx,[eax+0x10]
c00140b8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00140be:	74 08                	je     c00140c8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00140c0:	83 c0 04             	add    eax,0x4
c00140c3:	39 d0                	cmp    eax,edx
c00140c5:	75 f1                	jne    c00140b8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00140c7:	c3                   	ret    
c00140c8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140d2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00140dc:	eb e2                	jmp    c00140c0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00140de <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00140de:	57                   	push   edi
c00140df:	31 c0                	xor    eax,eax
c00140e1:	56                   	push   esi
c00140e2:	53                   	push   ebx
c00140e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140ef:	89 da                	mov    edx,ebx
c00140f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140f5:	c1 e2 04             	shl    edx,0x4
c00140f8:	01 ca                	add    edx,ecx
c00140fa:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014102:	74 16                	je     c001411a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014104:	40                   	inc    eax
c0014105:	83 f8 04             	cmp    eax,0x4
c0014108:	75 f0                	jne    c00140fa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001410a:	c7 44 24 10 ec 86 02 c0 	mov    DWORD PTR [esp+0x10],0xc00286ec
c0014112:	5b                   	pop    ebx
c0014113:	5e                   	pop    esi
c0014114:	5f                   	pop    edi
c0014115:	e9 3d 50 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c001411a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001411d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014120:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014126:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001412c:	5b                   	pop    ebx
c001412d:	5e                   	pop    esi
c001412e:	5f                   	pop    edi
c001412f:	c3                   	ret    

c0014130 <doubleFault(regs*, void*)>:
c0014130:	55                   	push   ebp
c0014131:	89 e5                	mov    ebp,esp
c0014133:	83 ec 08             	sub    esp,0x8
c0014136:	83 ec 0c             	sub    esp,0xc
c0014139:	68 27 87 02 c0       	push   0xc0028727
c001413e:	e8 14 50 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014143:	83 c4 10             	add    esp,0x10
c0014146:	90                   	nop
c0014147:	c9                   	leave  
c0014148:	c3                   	ret    
c0014149:	90                   	nop

c001414a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001414a:	56                   	push   esi
c001414b:	53                   	push   ebx
c001414c:	50                   	push   eax
c001414d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014151:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014155:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001415a:	75 35                	jne    c0014191 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001415c:	8d 43 20             	lea    eax,[ebx+0x20]
c001415f:	31 d2                	xor    edx,edx
c0014161:	89 c1                	mov    ecx,eax
c0014163:	c1 e1 04             	shl    ecx,0x4
c0014166:	01 f1                	add    ecx,esi
c0014168:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014170:	74 3e                	je     c00141b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014172:	42                   	inc    edx
c0014173:	83 fa 04             	cmp    edx,0x4
c0014176:	75 f0                	jne    c0014168 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	68 6c 87 02 c0       	push   0xc002876c
c0014180:	e8 d2 4f 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001418d:	5a                   	pop    edx
c001418e:	5b                   	pop    ebx
c001418f:	5e                   	pop    esi
c0014190:	c3                   	ret    
c0014191:	83 ec 0c             	sub    esp,0xc
c0014194:	56                   	push   esi
c0014195:	e8 ce fb ff ff       	call   c0013d68 <Device::getName()>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141a0:	75 ba                	jne    c001415c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141a2:	83 fb 0f             	cmp    ebx,0xf
c00141a5:	7f 29                	jg     c00141d0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00141a7:	0f b6 9b 20 ab 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd54e0]
c00141ae:	eb ac                	jmp    c001415c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141b0:	8d 04 82             	lea    eax,[edx+eax*4]
c00141b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141b7:	8d 04 86             	lea    eax,[esi+eax*4]
c00141ba:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00141c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141c4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00141ca:	89 d8                	mov    eax,ebx
c00141cc:	5a                   	pop    edx
c00141cd:	5b                   	pop    ebx
c00141ce:	5e                   	pop    esi
c00141cf:	c3                   	ret    
c00141d0:	83 ec 0c             	sub    esp,0xc
c00141d3:	68 34 87 02 c0       	push   0xc0028734
c00141d8:	e8 7a 4f 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	e9 77 ff ff ff       	jmp    c001415c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141e5:	90                   	nop

c00141e6 <InterruptController::clearAllHandlers(int, bool)>:
c00141e6:	56                   	push   esi
c00141e7:	53                   	push   ebx
c00141e8:	52                   	push   edx
c00141e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141f1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141f6:	75 61                	jne    c0014259 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141f8:	8d 46 20             	lea    eax,[esi+0x20]
c00141fb:	c1 e6 04             	shl    esi,0x4
c00141fe:	c1 e0 04             	shl    eax,0x4
c0014201:	01 de                	add    esi,ebx
c0014203:	01 d8                	add    eax,ebx
c0014205:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001420f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014219:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014223:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001422d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014237:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014241:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001424b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014255:	58                   	pop    eax
c0014256:	5b                   	pop    ebx
c0014257:	5e                   	pop    esi
c0014258:	c3                   	ret    
c0014259:	83 ec 0c             	sub    esp,0xc
c001425c:	53                   	push   ebx
c001425d:	e8 06 fb ff ff       	call   c0013d68 <Device::getName()>
c0014262:	83 c4 10             	add    esp,0x10
c0014265:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014268:	75 8e                	jne    c00141f8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001426a:	83 fe 0f             	cmp    esi,0xf
c001426d:	7f 09                	jg     c0014278 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001426f:	0f b6 b6 20 ab 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd54e0]
c0014276:	eb 80                	jmp    c00141f8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	68 a8 87 02 c0       	push   0xc00287a8
c0014280:	e8 d2 4e 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	e9 6b ff ff ff       	jmp    c00141f8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001428d:	90                   	nop

c001428e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001428e:	56                   	push   esi
c001428f:	53                   	push   ebx
c0014290:	52                   	push   edx
c0014291:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014295:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014299:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001429e:	75 3a                	jne    c00142da <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00142a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142a4:	8d 50 20             	lea    edx,[eax+0x20]
c00142a7:	c1 e2 04             	shl    edx,0x4
c00142aa:	8d 04 16             	lea    eax,[esi+edx*1]
c00142ad:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142b1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00142b7:	74 0b                	je     c00142c4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00142b9:	83 c0 04             	add    eax,0x4
c00142bc:	39 d0                	cmp    eax,edx
c00142be:	75 f1                	jne    c00142b1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00142c0:	58                   	pop    eax
c00142c1:	5b                   	pop    ebx
c00142c2:	5e                   	pop    esi
c00142c3:	c3                   	ret    
c00142c4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142ce:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142d8:	eb df                	jmp    c00142b9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00142da:	83 ec 0c             	sub    esp,0xc
c00142dd:	56                   	push   esi
c00142de:	e8 85 fa ff ff       	call   c0013d68 <Device::getName()>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142e9:	75 b5                	jne    c00142a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142eb:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142f0:	7f 11                	jg     c0014303 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142f6:	0f b6 80 20 ab 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd54e0]
c00142fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014301:	eb 9d                	jmp    c00142a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014303:	83 ec 0c             	sub    esp,0xc
c0014306:	68 a8 87 02 c0       	push   0xc00287a8
c001430b:	e8 47 4e 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	eb 8b                	jmp    c00142a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014315 <nmiHandler(regs*, void*)>:
c0014315:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001431a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001431e:	e9 e9 a8 ff ff       	jmp    c000ec0c <Computer::handleNMI()>

c0014323 <int_handler>:
c0014323:	55                   	push   ebp
c0014324:	57                   	push   edi
c0014325:	56                   	push   esi
c0014326:	53                   	push   ebx
c0014327:	83 ec 0c             	sub    esp,0xc
c001432a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001432e:	80 3d 54 c3 02 c0 00 	cmp    BYTE PTR ds:0xc002c354,0x0
c0014335:	74 0b                	je     c0014342 <int_handler+0x1f>
c0014337:	fa                   	cli    
c0014338:	f4                   	hlt    
c0014339:	80 3d 54 c3 02 c0 00 	cmp    BYTE PTR ds:0xc002c354,0x0
c0014340:	75 f5                	jne    c0014337 <int_handler+0x14>
c0014342:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0014347:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001434a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014350:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014356:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014359:	83 f8 17             	cmp    eax,0x17
c001435c:	77 13                	ja     c0014371 <int_handler+0x4e>
c001435e:	83 ec 08             	sub    esp,0x8
c0014361:	8b 17                	mov    edx,DWORD PTR [edi]
c0014363:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014366:	0f b6 c0             	movzx  eax,al
c0014369:	50                   	push   eax
c001436a:	57                   	push   edi
c001436b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001436e:	83 c4 10             	add    esp,0x10
c0014371:	83 c3 15             	add    ebx,0x15
c0014374:	c1 e3 04             	shl    ebx,0x4
c0014377:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001437b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014382:	31 db                	xor    ebx,ebx
c0014384:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014388:	85 c0                	test   eax,eax
c001438a:	74 13                	je     c001439f <int_handler+0x7c>
c001438c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001438f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014393:	74 1c                	je     c00143b1 <int_handler+0x8e>
c0014395:	83 ec 08             	sub    esp,0x8
c0014398:	52                   	push   edx
c0014399:	56                   	push   esi
c001439a:	ff d0                	call   eax
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	43                   	inc    ebx
c00143a0:	83 fb 04             	cmp    ebx,0x4
c00143a3:	75 df                	jne    c0014384 <int_handler+0x61>
c00143a5:	83 c4 0c             	add    esp,0xc
c00143a8:	31 c0                	xor    eax,eax
c00143aa:	5b                   	pop    ebx
c00143ab:	31 d2                	xor    edx,edx
c00143ad:	5e                   	pop    esi
c00143ae:	5f                   	pop    edi
c00143af:	5d                   	pop    ebp
c00143b0:	c3                   	ret    
c00143b1:	83 ec 08             	sub    esp,0x8
c00143b4:	52                   	push   edx
c00143b5:	56                   	push   esi
c00143b6:	ff d0                	call   eax
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	83 c4 0c             	add    esp,0xc
c00143be:	5b                   	pop    ebx
c00143bf:	5e                   	pop    esi
c00143c0:	5f                   	pop    edi
c00143c1:	5d                   	pop    ebp
c00143c2:	c3                   	ret    
c00143c3:	90                   	nop

c00143c4 <InterruptController::InterruptController(char const*)>:
c00143c4:	83 ec 1c             	sub    esp,0x1c
c00143c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143cb:	83 ec 08             	sub    esp,0x8
c00143ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143d2:	50                   	push   eax
c00143d3:	e8 94 f8 ff ff       	call   c0013c6c <Device::Device(char const*)>
c00143d8:	83 c4 10             	add    esp,0x10
c00143db:	ba dc 89 02 c0       	mov    edx,0xc00289dc
c00143e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e4:	89 10                	mov    DWORD PTR [eax],edx
c00143e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ea:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143fc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014404:	7f 5e                	jg     c0014464 <InterruptController::InterruptController(char const*)+0xa0>
c0014406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001440e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014413:	7f 49                	jg     c001445e <InterruptController::InterruptController(char const*)+0x9a>
c0014415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014419:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001441d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014424:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014428:	01 ca                	add    edx,ecx
c001442a:	83 c2 54             	add    edx,0x54
c001442d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014439:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001443d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014448:	01 ca                	add    edx,ecx
c001444a:	81 c2 54 04 00 00    	add    edx,0x454
c0014450:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014458:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001445c:	eb b0                	jmp    c001440e <InterruptController::InterruptController(char const*)+0x4a>
c001445e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014462:	eb 98                	jmp    c00143fc <InterruptController::InterruptController(char const*)+0x38>
c0014464:	90                   	nop
c0014465:	83 c4 1c             	add    esp,0x1c
c0014468:	c3                   	ret    
c0014469:	90                   	nop

c001446a <InterruptController::~InterruptController()>:
c001446a:	83 ec 0c             	sub    esp,0xc
c001446d:	ba dc 89 02 c0       	mov    edx,0xc00289dc
c0014472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014476:	89 10                	mov    DWORD PTR [eax],edx
c0014478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001447c:	83 ec 0c             	sub    esp,0xc
c001447f:	50                   	push   eax
c0014480:	e8 c9 f4 ff ff       	call   c001394e <Device::~Device()>
c0014485:	83 c4 10             	add    esp,0x10
c0014488:	90                   	nop
c0014489:	83 c4 0c             	add    esp,0xc
c001448c:	c3                   	ret    
c001448d:	90                   	nop

c001448e <InterruptController::~InterruptController()>:
c001448e:	83 ec 0c             	sub    esp,0xc
c0014491:	83 ec 0c             	sub    esp,0xc
c0014494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014498:	e8 cd ff ff ff       	call   c001446a <InterruptController::~InterruptController()>
c001449d:	83 c4 10             	add    esp,0x10
c00144a0:	83 ec 08             	sub    esp,0x8
c00144a3:	68 58 21 00 00       	push   0x2158
c00144a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144ac:	e8 fc e0 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	83 c4 0c             	add    esp,0xc
c00144b7:	c3                   	ret    

c00144b8 <displayDebugInfo(regs*)>:
c00144b8:	55                   	push   ebp
c00144b9:	57                   	push   edi
c00144ba:	56                   	push   esi
c00144bb:	53                   	push   ebx
c00144bc:	83 ec 24             	sub    esp,0x24
c00144bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144c3:	0f 20 c2             	mov    edx,cr0
c00144c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144ca:	0f 20 d7             	mov    edi,cr2
c00144cd:	0f 20 de             	mov    esi,cr3
c00144d0:	0f 20 e5             	mov    ebp,cr4
c00144d3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00144d6:	68 e2 87 02 c0       	push   0xc00287e2
c00144db:	e8 ad e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00144e0:	58                   	pop    eax
c00144e1:	5a                   	pop    edx
c00144e2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144e5:	68 ed 87 02 c0       	push   0xc00287ed
c00144ea:	e8 9e e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00144ef:	59                   	pop    ecx
c00144f0:	58                   	pop    eax
c00144f1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144f4:	68 f8 87 02 c0       	push   0xc00287f8
c00144f9:	e8 8f e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00144fe:	58                   	pop    eax
c00144ff:	5a                   	pop    edx
c0014500:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014503:	68 03 88 02 c0       	push   0xc0028803
c0014508:	e8 80 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001450d:	59                   	pop    ecx
c001450e:	58                   	pop    eax
c001450f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014512:	68 0e 88 02 c0       	push   0xc002880e
c0014517:	e8 71 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001451c:	58                   	pop    eax
c001451d:	5a                   	pop    edx
c001451e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014521:	68 19 88 02 c0       	push   0xc0028819
c0014526:	e8 62 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001452b:	59                   	pop    ecx
c001452c:	58                   	pop    eax
c001452d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014530:	68 24 88 02 c0       	push   0xc0028824
c0014535:	e8 53 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001453a:	58                   	pop    eax
c001453b:	5a                   	pop    edx
c001453c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001453f:	68 2f 88 02 c0       	push   0xc002882f
c0014544:	e8 44 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014549:	59                   	pop    ecx
c001454a:	58                   	pop    eax
c001454b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001454e:	68 3a 88 02 c0       	push   0xc002883a
c0014553:	e8 35 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014558:	58                   	pop    eax
c0014559:	5a                   	pop    edx
c001455a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001455d:	68 49 88 02 c0       	push   0xc0028849
c0014562:	e8 26 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014567:	59                   	pop    ecx
c0014568:	58                   	pop    eax
c0014569:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001456c:	68 54 88 02 c0       	push   0xc0028854
c0014571:	e8 17 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014576:	58                   	pop    eax
c0014577:	5a                   	pop    edx
c0014578:	57                   	push   edi
c0014579:	68 5f 88 02 c0       	push   0xc002885f
c001457e:	e8 0a e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014583:	59                   	pop    ecx
c0014584:	58                   	pop    eax
c0014585:	56                   	push   esi
c0014586:	68 6a 88 02 c0       	push   0xc002886a
c001458b:	e8 fd e0 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014590:	58                   	pop    eax
c0014591:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014596:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001459c:	e8 ae c2 ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c00145a1:	58                   	pop    eax
c00145a2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145a5:	5a                   	pop    edx
c00145a6:	c1 e0 05             	shl    eax,0x5
c00145a9:	05 80 a8 02 c0       	add    eax,0xc002a880
c00145ae:	50                   	push   eax
c00145af:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00145b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ba:	e8 af c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00145bf:	59                   	pop    ecx
c00145c0:	58                   	pop    eax
c00145c1:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00145c6:	68 75 88 02 c0       	push   0xc0028875
c00145cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d1:	e8 98 c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00145d6:	58                   	pop    eax
c00145d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145dc:	5a                   	pop    edx
c00145dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145e0:	83 c0 0c             	add    eax,0xc
c00145e3:	50                   	push   eax
c00145e4:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00145e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ef:	e8 7a c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00145f4:	59                   	pop    ecx
c00145f5:	58                   	pop    eax
c00145f6:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00145fb:	68 7e 88 02 c0       	push   0xc002887e
c0014600:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014606:	e8 63 c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001460b:	58                   	pop    eax
c001460c:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014611:	5a                   	pop    edx
c0014612:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014615:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461b:	e8 74 c6 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014620:	59                   	pop    ecx
c0014621:	58                   	pop    eax
c0014622:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014627:	68 86 88 02 c0       	push   0xc0028886
c001462c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014632:	e8 37 c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014637:	58                   	pop    eax
c0014638:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001463d:	5a                   	pop    edx
c001463e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014641:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014647:	e8 48 c6 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001464c:	59                   	pop    ecx
c001464d:	58                   	pop    eax
c001464e:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014653:	68 8e 88 02 c0       	push   0xc002888e
c0014658:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465e:	e8 0b c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014663:	58                   	pop    eax
c0014664:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014669:	5a                   	pop    edx
c001466a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001466d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014673:	e8 1c c6 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014678:	59                   	pop    ecx
c0014679:	58                   	pop    eax
c001467a:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001467f:	68 96 88 02 c0       	push   0xc0028896
c0014684:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001468a:	e8 df c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001468f:	58                   	pop    eax
c0014690:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014695:	5a                   	pop    edx
c0014696:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014699:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469f:	e8 f0 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00146a4:	59                   	pop    ecx
c00146a5:	58                   	pop    eax
c00146a6:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00146ab:	68 9e 88 02 c0       	push   0xc002889e
c00146b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b6:	e8 b3 c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00146bb:	58                   	pop    eax
c00146bc:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00146c1:	5a                   	pop    edx
c00146c2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cb:	e8 c4 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00146d0:	59                   	pop    ecx
c00146d1:	58                   	pop    eax
c00146d2:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00146d7:	68 a6 88 02 c0       	push   0xc00288a6
c00146dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e2:	e8 87 c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00146e7:	58                   	pop    eax
c00146e8:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00146ed:	5a                   	pop    edx
c00146ee:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f7:	e8 98 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00146fc:	59                   	pop    ecx
c00146fd:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014702:	5b                   	pop    ebx
c0014703:	68 ae 88 02 c0       	push   0xc00288ae
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 5b c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014713:	58                   	pop    eax
c0014714:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014719:	5a                   	pop    edx
c001471a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001471e:	52                   	push   edx
c001471f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014725:	e8 6a c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001472a:	59                   	pop    ecx
c001472b:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014730:	5b                   	pop    ebx
c0014731:	68 b7 88 02 c0       	push   0xc00288b7
c0014736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473c:	e8 2d c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014741:	58                   	pop    eax
c0014742:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014747:	5a                   	pop    edx
c0014748:	57                   	push   edi
c0014749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474f:	e8 40 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014754:	59                   	pop    ecx
c0014755:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001475a:	5b                   	pop    ebx
c001475b:	68 bf 88 02 c0       	push   0xc00288bf
c0014760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014766:	e8 03 c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001476b:	5f                   	pop    edi
c001476c:	58                   	pop    eax
c001476d:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014772:	56                   	push   esi
c0014773:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014779:	e8 16 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001477e:	58                   	pop    eax
c001477f:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014784:	5a                   	pop    edx
c0014785:	68 c7 88 02 c0       	push   0xc00288c7
c001478a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014790:	e8 d9 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014795:	59                   	pop    ecx
c0014796:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001479b:	5b                   	pop    ebx
c001479c:	55                   	push   ebp
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 ec c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00147a8:	5e                   	pop    esi
c00147a9:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00147ae:	5f                   	pop    edi
c00147af:	68 cf 88 02 c0       	push   0xc00288cf
c00147b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ba:	e8 af c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00147bf:	0f 21 c0             	mov    eax,db0
c00147c2:	5d                   	pop    ebp
c00147c3:	5a                   	pop    edx
c00147c4:	50                   	push   eax
c00147c5:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00147ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d0:	e8 bf c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00147d5:	59                   	pop    ecx
c00147d6:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00147db:	5b                   	pop    ebx
c00147dc:	68 d8 88 02 c0       	push   0xc00288d8
c00147e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e7:	e8 82 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00147ec:	0f 21 c8             	mov    eax,db1
c00147ef:	5e                   	pop    esi
c00147f0:	5f                   	pop    edi
c00147f1:	50                   	push   eax
c00147f2:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 92 c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014802:	5d                   	pop    ebp
c0014803:	58                   	pop    eax
c0014804:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014809:	68 e0 88 02 c0       	push   0xc00288e0
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 55 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014819:	0f 21 d0             	mov    eax,db2
c001481c:	5a                   	pop    edx
c001481d:	59                   	pop    ecx
c001481e:	50                   	push   eax
c001481f:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482a:	e8 65 c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001482f:	5b                   	pop    ebx
c0014830:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014835:	5e                   	pop    esi
c0014836:	68 e8 88 02 c0       	push   0xc00288e8
c001483b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014841:	e8 28 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014846:	0f 21 d8             	mov    eax,db3
c0014849:	5f                   	pop    edi
c001484a:	5d                   	pop    ebp
c001484b:	50                   	push   eax
c001484c:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014851:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014857:	e8 38 c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001485c:	58                   	pop    eax
c001485d:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0014862:	5a                   	pop    edx
c0014863:	68 f0 88 02 c0       	push   0xc00288f0
c0014868:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486e:	e8 fb c3 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014873:	0f 21 f0             	mov    eax,db6
c0014876:	59                   	pop    ecx
c0014877:	5b                   	pop    ebx
c0014878:	50                   	push   eax
c0014879:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001487e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014884:	e8 0b c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014889:	5e                   	pop    esi
c001488a:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001488f:	5f                   	pop    edi
c0014890:	68 f8 88 02 c0       	push   0xc00288f8
c0014895:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489b:	e8 ce c3 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00148a0:	0f 21 f8             	mov    eax,db7
c00148a3:	5d                   	pop    ebp
c00148a4:	5a                   	pop    edx
c00148a5:	50                   	push   eax
c00148a6:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00148ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b1:	e8 de c3 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00148b6:	fa                   	cli    
c00148b7:	f4                   	hlt    
c00148b8:	83 c4 10             	add    esp,0x10
c00148bb:	eb fe                	jmp    c00148bb <displayDebugInfo(regs*)+0x403>

c00148bd <x87EmulHandler(regs*, void*)>:
c00148bd:	53                   	push   ebx
c00148be:	83 ec 14             	sub    esp,0x14
c00148c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148c5:	53                   	push   ebx
c00148c6:	e8 b0 92 00 00       	call   c001db7b <Vm::x87Handler(regs*)>
c00148cb:	83 c4 10             	add    esp,0x10
c00148ce:	84 c0                	test   al,al
c00148d0:	74 05                	je     c00148d7 <x87EmulHandler(regs*, void*)+0x1a>
c00148d2:	83 c4 08             	add    esp,0x8
c00148d5:	5b                   	pop    ebx
c00148d6:	c3                   	ret    
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	68 00 89 02 c0       	push   0xc0028900
c00148df:	e8 a9 dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00148e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148e7:	e8 cc fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c00148ec <gpFault(regs*, void*)>:
c00148ec:	53                   	push   ebx
c00148ed:	83 ec 14             	sub    esp,0x14
c00148f0:	c7 05 d0 b9 02 c0 ef d0 01 c0 	mov    DWORD PTR ds:0xc002b9d0,0xc001d0ef
c00148fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148fe:	53                   	push   ebx
c00148ff:	e8 eb 87 00 00       	call   c001d0ef <Vm::faultHandler(regs*)>
c0014904:	83 c4 10             	add    esp,0x10
c0014907:	84 c0                	test   al,al
c0014909:	74 05                	je     c0014910 <gpFault(regs*, void*)+0x24>
c001490b:	83 c4 08             	add    esp,0x8
c001490e:	5b                   	pop    ebx
c001490f:	c3                   	ret    
c0014910:	83 ec 0c             	sub    esp,0xc
c0014913:	68 16 89 02 c0       	push   0xc0028916
c0014918:	e8 70 dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001491d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014920:	e8 93 fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c0014925 <pgFault(regs*, void*)>:
c0014925:	83 ec 18             	sub    esp,0x18
c0014928:	68 31 89 02 c0       	push   0xc0028931
c001492d:	e8 5b dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014932:	58                   	pop    eax
c0014933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014937:	e8 7c fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c001493c <otherISRHandler(regs*, void*)>:
c001493c:	53                   	push   ebx
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014944:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014947:	50                   	push   eax
c0014948:	50                   	push   eax
c0014949:	68 3e 89 02 c0       	push   0xc002893e
c001494e:	e8 3a dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014956:	e8 5d fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c001495b <opcodeFault(regs*, void*)>:
c001495b:	55                   	push   ebp
c001495c:	89 e5                	mov    ebp,esp
c001495e:	56                   	push   esi
c001495f:	53                   	push   ebx
c0014960:	83 ec 40             	sub    esp,0x40
c0014963:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0014968:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001496e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014974:	84 c0                	test   al,al
c0014976:	74 24                	je     c001499c <opcodeFault(regs*, void*)+0x41>
c0014978:	83 ec 0c             	sub    esp,0xc
c001497b:	68 5c 89 02 c0       	push   0xc002895c
c0014980:	e8 08 dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001498e:	8d 50 19             	lea    edx,[eax+0x19]
c0014991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014994:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014997:	e9 77 05 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c001499c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001499f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149a5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149a9:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149b9:	8a 00                	mov    al,BYTE PTR [eax]
c00149bb:	3c f0                	cmp    al,0xf0
c00149bd:	75 17                	jne    c00149d6 <opcodeFault(regs*, void*)+0x7b>
c00149bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c8:	8d 50 01             	lea    edx,[eax+0x1]
c00149cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149d1:	e9 da 00 00 00       	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c00149d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149d9:	8a 00                	mov    al,BYTE PTR [eax]
c00149db:	3c f2                	cmp    al,0xf2
c00149dd:	74 09                	je     c00149e8 <opcodeFault(regs*, void*)+0x8d>
c00149df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149e2:	8a 00                	mov    al,BYTE PTR [eax]
c00149e4:	3c f3                	cmp    al,0xf3
c00149e6:	75 1b                	jne    c0014a03 <opcodeFault(regs*, void*)+0xa8>
c00149e8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149f5:	8d 50 01             	lea    edx,[eax+0x1]
c00149f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149fe:	e9 ad 00 00 00       	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a06:	8a 00                	mov    al,BYTE PTR [eax]
c0014a08:	3c 66                	cmp    al,0x66
c0014a0a:	75 1f                	jne    c0014a2b <opcodeFault(regs*, void*)+0xd0>
c0014a0c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a10:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a14:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a1d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a23:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a26:	e9 85 00 00 00       	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a30:	3c 67                	cmp    al,0x67
c0014a32:	75 18                	jne    c0014a4c <opcodeFault(regs*, void*)+0xf1>
c0014a34:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a41:	8d 50 01             	lea    edx,[eax+0x1]
c0014a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a4a:	eb 64                	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014a51:	3c 2e                	cmp    al,0x2e
c0014a53:	74 09                	je     c0014a5e <opcodeFault(regs*, void*)+0x103>
c0014a55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a58:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5a:	3c 3e                	cmp    al,0x3e
c0014a5c:	75 18                	jne    c0014a76 <opcodeFault(regs*, void*)+0x11b>
c0014a5e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a62:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a71:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a74:	eb 3a                	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a79:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7b:	3c 36                	cmp    al,0x36
c0014a7d:	74 1b                	je     c0014a9a <opcodeFault(regs*, void*)+0x13f>
c0014a7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a82:	8a 00                	mov    al,BYTE PTR [eax]
c0014a84:	3c 26                	cmp    al,0x26
c0014a86:	74 12                	je     c0014a9a <opcodeFault(regs*, void*)+0x13f>
c0014a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8d:	3c 64                	cmp    al,0x64
c0014a8f:	74 09                	je     c0014a9a <opcodeFault(regs*, void*)+0x13f>
c0014a91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a94:	8a 00                	mov    al,BYTE PTR [eax]
c0014a96:	3c 65                	cmp    al,0x65
c0014a98:	75 16                	jne    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a9a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0014aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ab0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab5:	3c 0f                	cmp    al,0xf
c0014ab7:	0f 85 ad 00 00 00    	jne    c0014b6a <opcodeFault(regs*, void*)+0x20f>
c0014abd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac0:	40                   	inc    eax
c0014ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac3:	3c c2                	cmp    al,0xc2
c0014ac5:	74 0e                	je     c0014ad5 <opcodeFault(regs*, void*)+0x17a>
c0014ac7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aca:	40                   	inc    eax
c0014acb:	8a 00                	mov    al,BYTE PTR [eax]
c0014acd:	3c c3                	cmp    al,0xc3
c0014acf:	0f 85 95 00 00 00    	jne    c0014b6a <opcodeFault(regs*, void*)+0x20f>
c0014ad5:	83 ec 0c             	sub    esp,0xc
c0014ad8:	68 7f 89 02 c0       	push   0xc002897f
c0014add:	e8 ab db ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aeb:	8d 50 01             	lea    edx,[eax+0x1]
c0014aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014af4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afa:	8a 00                	mov    al,BYTE PTR [eax]
c0014afc:	8d 50 fe             	lea    edx,[eax-0x2]
c0014aff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b02:	88 10                	mov    BYTE PTR [eax],dl
c0014b04:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b07:	50                   	push   eax
c0014b08:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b0b:	50                   	push   eax
c0014b0c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b0f:	50                   	push   eax
c0014b10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b13:	e8 44 44 00 00       	call   c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b18:	83 c4 10             	add    esp,0x10
c0014b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b21:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b24:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b27:	01 d0                	add    eax,edx
c0014b29:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b32:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b35:	48                   	dec    eax
c0014b36:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b45:	83 ec 04             	sub    esp,0x4
c0014b48:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b4b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b4e:	50                   	push   eax
c0014b4f:	e8 15 b6 fe ff       	call   c0000169 <voodooXADD>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b5d:	01 c2                	add    edx,eax
c0014b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b65:	e9 a9 03 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c0014b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6f:	3c 0f                	cmp    al,0xf
c0014b71:	0f 85 8b 01 00 00    	jne    c0014d02 <opcodeFault(regs*, void*)+0x3a7>
c0014b77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b7a:	40                   	inc    eax
c0014b7b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7d:	3c c7                	cmp    al,0xc7
c0014b7f:	0f 86 7d 01 00 00    	jbe    c0014d02 <opcodeFault(regs*, void*)+0x3a7>
c0014b85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b88:	40                   	inc    eax
c0014b89:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8b:	3c cf                	cmp    al,0xcf
c0014b8d:	0f 87 6f 01 00 00    	ja     c0014d02 <opcodeFault(regs*, void*)+0x3a7>
c0014b93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b96:	40                   	inc    eax
c0014b97:	8a 00                	mov    al,BYTE PTR [eax]
c0014b99:	83 c0 38             	add    eax,0x38
c0014b9c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b9f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ba3:	75 0b                	jne    c0014bb0 <opcodeFault(regs*, void*)+0x255>
c0014ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014bab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bae:	eb 75                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bb0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bb4:	75 0b                	jne    c0014bc1 <opcodeFault(regs*, void*)+0x266>
c0014bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014bbc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bbf:	eb 64                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bc1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014bc5:	75 0b                	jne    c0014bd2 <opcodeFault(regs*, void*)+0x277>
c0014bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bca:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014bcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd0:	eb 53                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bd2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014bd6:	75 0b                	jne    c0014be3 <opcodeFault(regs*, void*)+0x288>
c0014bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bde:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014be1:	eb 42                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014be3:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014be7:	75 0b                	jne    c0014bf4 <opcodeFault(regs*, void*)+0x299>
c0014be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bec:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014bef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bf2:	eb 31                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bf4:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bf8:	75 0b                	jne    c0014c05 <opcodeFault(regs*, void*)+0x2aa>
c0014bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c03:	eb 20                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014c05:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c09:	75 0b                	jne    c0014c16 <opcodeFault(regs*, void*)+0x2bb>
c0014c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c14:	eb 0f                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014c16:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c1a:	75 09                	jne    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c22:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c25:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c29:	74 10                	je     c0014c3b <opcodeFault(regs*, void*)+0x2e0>
c0014c2b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c32:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c39:	eb 2d                	jmp    c0014c68 <opcodeFault(regs*, void*)+0x30d>
c0014c3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c3e:	c1 e0 18             	shl    eax,0x18
c0014c41:	89 c2                	mov    edx,eax
c0014c43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c46:	c1 e0 08             	shl    eax,0x8
c0014c49:	25 00 00 ff 00       	and    eax,0xff0000
c0014c4e:	09 c2                	or     edx,eax
c0014c50:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c53:	c1 e8 08             	shr    eax,0x8
c0014c56:	25 00 ff 00 00       	and    eax,0xff00
c0014c5b:	09 c2                	or     edx,eax
c0014c5d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c60:	c1 e8 18             	shr    eax,0x18
c0014c63:	09 d0                	or     eax,edx
c0014c65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c68:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c6c:	75 0b                	jne    c0014c79 <opcodeFault(regs*, void*)+0x31e>
c0014c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c71:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c77:	eb 75                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014c79:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c7d:	75 0b                	jne    c0014c8a <opcodeFault(regs*, void*)+0x32f>
c0014c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c85:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c88:	eb 64                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014c8a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c8e:	75 0b                	jne    c0014c9b <opcodeFault(regs*, void*)+0x340>
c0014c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c96:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c99:	eb 53                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014c9b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c9f:	75 0b                	jne    c0014cac <opcodeFault(regs*, void*)+0x351>
c0014ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ca7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014caa:	eb 42                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cac:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cb0:	75 0b                	jne    c0014cbd <opcodeFault(regs*, void*)+0x362>
c0014cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014cbb:	eb 31                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cbd:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cc1:	75 0b                	jne    c0014cce <opcodeFault(regs*, void*)+0x373>
c0014cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ccc:	eb 20                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cce:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cd2:	75 0b                	jne    c0014cdf <opcodeFault(regs*, void*)+0x384>
c0014cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cda:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014cdd:	eb 0f                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cdf:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ce3:	75 09                	jne    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ceb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf4:	8d 50 02             	lea    edx,[eax+0x2]
c0014cf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cfd:	e9 11 02 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c0014d02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d05:	8a 00                	mov    al,BYTE PTR [eax]
c0014d07:	3c 0f                	cmp    al,0xf
c0014d09:	0f 85 76 01 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d12:	40                   	inc    eax
c0014d13:	8a 00                	mov    al,BYTE PTR [eax]
c0014d15:	3c c7                	cmp    al,0xc7
c0014d17:	0f 85 68 01 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d1d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d26:	8d 50 01             	lea    edx,[eax+0x1]
c0014d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d2f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d32:	50                   	push   eax
c0014d33:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d36:	50                   	push   eax
c0014d37:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d3a:	50                   	push   eax
c0014d3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d3e:	e8 19 42 00 00       	call   c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d49:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d4c:	83 f0 01             	xor    eax,0x1
c0014d4f:	84 c0                	test   al,al
c0014d51:	0f 84 2e 01 00 00    	je     c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d57:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d5a:	3c 01                	cmp    al,0x1
c0014d5c:	0f 85 23 01 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d62:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d65:	83 f0 01             	xor    eax,0x1
c0014d68:	84 c0                	test   al,al
c0014d6a:	0f 84 15 01 00 00    	je     c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d76:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d79:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d80:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d83:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d86:	89 c2                	mov    edx,eax
c0014d88:	b8 00 00 00 00       	mov    eax,0x0
c0014d8d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d90:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d96:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d99:	ba 00 00 00 00       	mov    edx,0x0
c0014d9e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014da1:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014daa:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dad:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014db4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014db7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dba:	89 c2                	mov    edx,eax
c0014dbc:	b8 00 00 00 00       	mov    eax,0x0
c0014dc1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dc4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dcd:	ba 00 00 00 00       	mov    edx,0x0
c0014dd2:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014dd5:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014dd8:	e8 c0 73 00 00       	call   c001c19d <lockScheduler()>
c0014ddd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014de0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de5:	89 c1                	mov    ecx,eax
c0014de7:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dea:	89 cb                	mov    ebx,ecx
c0014dec:	89 d0                	mov    eax,edx
c0014dee:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014df1:	89 c6                	mov    esi,eax
c0014df3:	89 f0                	mov    eax,esi
c0014df5:	09 d8                	or     eax,ebx
c0014df7:	85 c0                	test   eax,eax
c0014df9:	75 21                	jne    c0014e1c <opcodeFault(regs*, void*)+0x4c1>
c0014dfb:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014dfe:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e01:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e04:	89 01                	mov    DWORD PTR [ecx],eax
c0014e06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e0f:	83 c8 40             	or     eax,0x40
c0014e12:	89 c2                	mov    edx,eax
c0014e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e17:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e1a:	eb 3e                	jmp    c0014e5a <opcodeFault(regs*, void*)+0x4ff>
c0014e1c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e1f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e24:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e27:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e2a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e30:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e33:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e36:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e39:	89 d0                	mov    eax,edx
c0014e3b:	31 d2                	xor    edx,edx
c0014e3d:	89 c3                	mov    ebx,eax
c0014e3f:	89 d6                	mov    esi,edx
c0014e41:	89 da                	mov    edx,ebx
c0014e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e46:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e4f:	83 e0 bf             	and    eax,0xffffffbf
c0014e52:	89 c2                	mov    edx,eax
c0014e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e57:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e5a:	e8 40 73 00 00       	call   c001c19f <unlockScheduler()>
c0014e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e65:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e68:	01 c2                	add    edx,eax
c0014e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e70:	83 ec 0c             	sub    esp,0xc
c0014e73:	68 8e 89 02 c0       	push   0xc002898e
c0014e78:	e8 10 d8 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014e7d:	83 c4 10             	add    esp,0x10
c0014e80:	e9 8e 00 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c0014e85:	83 ec 0c             	sub    esp,0xc
c0014e88:	68 a1 89 02 c0       	push   0xc00289a1
c0014e8d:	e8 fb d7 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014e92:	83 c4 10             	add    esp,0x10
c0014e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e98:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ea1:	c1 e0 04             	shl    eax,0x4
c0014ea4:	01 d0                	add    eax,edx
c0014ea6:	83 c0 03             	add    eax,0x3
c0014ea9:	8a 00                	mov    al,BYTE PTR [eax]
c0014eab:	0f b6 d8             	movzx  ebx,al
c0014eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eba:	c1 e0 04             	shl    eax,0x4
c0014ebd:	01 d0                	add    eax,edx
c0014ebf:	83 c0 02             	add    eax,0x2
c0014ec2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec4:	0f b6 c8             	movzx  ecx,al
c0014ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eca:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ed3:	c1 e0 04             	shl    eax,0x4
c0014ed6:	01 d0                	add    eax,edx
c0014ed8:	40                   	inc    eax
c0014ed9:	8a 00                	mov    al,BYTE PTR [eax]
c0014edb:	0f b6 d0             	movzx  edx,al
c0014ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee1:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eea:	c1 e0 04             	shl    eax,0x4
c0014eed:	01 f0                	add    eax,esi
c0014eef:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef1:	0f b6 c0             	movzx  eax,al
c0014ef4:	83 ec 0c             	sub    esp,0xc
c0014ef7:	53                   	push   ebx
c0014ef8:	51                   	push   ecx
c0014ef9:	52                   	push   edx
c0014efa:	50                   	push   eax
c0014efb:	68 b4 89 02 c0       	push   0xc00289b4
c0014f00:	e8 88 d7 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014f05:	83 c4 20             	add    esp,0x20
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f0e:	e8 a5 f5 ff ff       	call   c00144b8 <displayDebugInfo(regs*)>
c0014f13:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f16:	5b                   	pop    ebx
c0014f17:	5e                   	pop    esi
c0014f18:	5d                   	pop    ebp
c0014f19:	c3                   	ret    

c0014f1a <displayProgramFault(char const*)>:
c0014f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f22:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f28:	85 c0                	test   eax,eax
c0014f2a:	74 15                	je     c0014f41 <displayProgramFault(char const*)+0x27>
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	6a 04                	push   0x4
c0014f31:	6a 0f                	push   0xf
c0014f33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f37:	50                   	push   eax
c0014f38:	e8 f3 b9 ff ff       	call   c0010930 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f3d:	83 c4 1c             	add    esp,0x1c
c0014f40:	c3                   	ret    
c0014f41:	c3                   	ret    

c0014f42 <setupInterruptController()>:
c0014f42:	55                   	push   ebp
c0014f43:	89 e5                	mov    ebp,esp
c0014f45:	53                   	push   ebx
c0014f46:	83 ec 24             	sub    esp,0x24
c0014f49:	b8 00 00 00 00       	mov    eax,0x0
c0014f4e:	85 c0                	test   eax,eax
c0014f50:	0f 95 c0             	setne  al
c0014f53:	84 c0                	test   al,al
c0014f55:	74 5b                	je     c0014fb2 <setupInterruptController()+0x70>
c0014f57:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f5e:	83 ec 0c             	sub    esp,0xc
c0014f61:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f64:	e8 57 a5 ff ff       	call   c000f4c0 <malloc>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	89 c3                	mov    ebx,eax
c0014f6e:	83 ec 0c             	sub    esp,0xc
c0014f71:	53                   	push   ebx
c0014f72:	e8 17 e5 00 00       	call   c002348e <APIC::APIC()>
c0014f77:	83 c4 10             	add    esp,0x10
c0014f7a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f7d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f83:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f85:	83 c0 08             	add    eax,0x8
c0014f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f8a:	6a 00                	push   0x0
c0014f8c:	6a 00                	push   0x0
c0014f8e:	6a 00                	push   0x0
c0014f90:	52                   	push   edx
c0014f91:	ff d0                	call   eax
c0014f93:	83 c4 10             	add    esp,0x10
c0014f96:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0014f9b:	83 ec 08             	sub    esp,0x8
c0014f9e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fa1:	50                   	push   eax
c0014fa2:	e8 d5 ea ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0014fa7:	83 c4 10             	add    esp,0x10
c0014faa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fad:	e9 52 03 00 00       	jmp    c0015304 <setupInterruptController()+0x3c2>
c0014fb2:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0014fb7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014fbd:	83 e0 01             	and    eax,0x1
c0014fc0:	84 c0                	test   al,al
c0014fc2:	0f 95 c0             	setne  al
c0014fc5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014fc8:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014fcf:	83 ec 0c             	sub    esp,0xc
c0014fd2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014fd5:	e8 e6 a4 ff ff       	call   c000f4c0 <malloc>
c0014fda:	83 c4 10             	add    esp,0x10
c0014fdd:	89 c3                	mov    ebx,eax
c0014fdf:	83 ec 0c             	sub    esp,0xc
c0014fe2:	53                   	push   ebx
c0014fe3:	e8 fe e9 00 00       	call   c00239e6 <PIC::PIC()>
c0014fe8:	83 c4 10             	add    esp,0x10
c0014feb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014fee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014ff1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff6:	83 c0 08             	add    eax,0x8
c0014ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ffb:	6a 00                	push   0x0
c0014ffd:	6a 00                	push   0x0
c0014fff:	6a 00                	push   0x0
c0015001:	52                   	push   edx
c0015002:	ff d0                	call   eax
c0015004:	83 c4 10             	add    esp,0x10
c0015007:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001500b:	74 73                	je     c0015080 <setupInterruptController()+0x13e>
c001500d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015013:	8b 00                	mov    eax,DWORD PTR [eax]
c0015015:	83 c0 0c             	add    eax,0xc
c0015018:	8b 00                	mov    eax,DWORD PTR [eax]
c001501a:	6a 00                	push   0x0
c001501c:	6a 00                	push   0x0
c001501e:	6a 00                	push   0x0
c0015020:	52                   	push   edx
c0015021:	ff d0                	call   eax
c0015023:	83 c4 10             	add    esp,0x10
c0015026:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001502a:	74 15                	je     c0015041 <setupInterruptController()+0xff>
c001502c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001502f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015031:	83 c0 04             	add    eax,0x4
c0015034:	8b 00                	mov    eax,DWORD PTR [eax]
c0015036:	83 ec 0c             	sub    esp,0xc
c0015039:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001503c:	ff d0                	call   eax
c001503e:	83 c4 10             	add    esp,0x10
c0015041:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001504e:	e8 6d a4 ff ff       	call   c000f4c0 <malloc>
c0015053:	83 c4 10             	add    esp,0x10
c0015056:	89 c3                	mov    ebx,eax
c0015058:	83 ec 0c             	sub    esp,0xc
c001505b:	53                   	push   ebx
c001505c:	e8 2d e4 00 00       	call   c002348e <APIC::APIC()>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015067:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001506a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506d:	8b 00                	mov    eax,DWORD PTR [eax]
c001506f:	83 c0 08             	add    eax,0x8
c0015072:	8b 00                	mov    eax,DWORD PTR [eax]
c0015074:	6a 00                	push   0x0
c0015076:	6a 00                	push   0x0
c0015078:	6a 00                	push   0x0
c001507a:	52                   	push   edx
c001507b:	ff d0                	call   eax
c001507d:	83 c4 10             	add    esp,0x10
c0015080:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0015085:	83 ec 08             	sub    esp,0x8
c0015088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001508b:	50                   	push   eax
c001508c:	e8 eb e9 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015097:	8b 00                	mov    eax,DWORD PTR [eax]
c0015099:	83 c0 24             	add    eax,0x24
c001509c:	8b 00                	mov    eax,DWORD PTR [eax]
c001509e:	6a 00                	push   0x0
c00150a0:	68 3c 49 01 c0       	push   0xc001493c
c00150a5:	6a 00                	push   0x0
c00150a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150aa:	ff d0                	call   eax
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b4:	83 c0 24             	add    eax,0x24
c00150b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b9:	6a 00                	push   0x0
c00150bb:	68 3c 49 01 c0       	push   0xc001493c
c00150c0:	6a 01                	push   0x1
c00150c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150c5:	ff d0                	call   eax
c00150c7:	83 c4 10             	add    esp,0x10
c00150ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cf:	83 c0 24             	add    eax,0x24
c00150d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d4:	6a 00                	push   0x0
c00150d6:	68 15 43 01 c0       	push   0xc0014315
c00150db:	6a 02                	push   0x2
c00150dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150e0:	ff d0                	call   eax
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ea:	83 c0 24             	add    eax,0x24
c00150ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ef:	6a 00                	push   0x0
c00150f1:	68 3c 49 01 c0       	push   0xc001493c
c00150f6:	6a 03                	push   0x3
c00150f8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150fb:	ff d0                	call   eax
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015103:	8b 00                	mov    eax,DWORD PTR [eax]
c0015105:	83 c0 24             	add    eax,0x24
c0015108:	8b 00                	mov    eax,DWORD PTR [eax]
c001510a:	6a 00                	push   0x0
c001510c:	68 3c 49 01 c0       	push   0xc001493c
c0015111:	6a 04                	push   0x4
c0015113:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015116:	ff d0                	call   eax
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001511e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015120:	83 c0 24             	add    eax,0x24
c0015123:	8b 00                	mov    eax,DWORD PTR [eax]
c0015125:	6a 00                	push   0x0
c0015127:	68 3c 49 01 c0       	push   0xc001493c
c001512c:	6a 05                	push   0x5
c001512e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015131:	ff d0                	call   eax
c0015133:	83 c4 10             	add    esp,0x10
c0015136:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015139:	8b 00                	mov    eax,DWORD PTR [eax]
c001513b:	83 c0 24             	add    eax,0x24
c001513e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015140:	6a 00                	push   0x0
c0015142:	68 5b 49 01 c0       	push   0xc001495b
c0015147:	6a 06                	push   0x6
c0015149:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001514c:	ff d0                	call   eax
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015154:	8b 00                	mov    eax,DWORD PTR [eax]
c0015156:	83 c0 24             	add    eax,0x24
c0015159:	8b 00                	mov    eax,DWORD PTR [eax]
c001515b:	6a 00                	push   0x0
c001515d:	68 bd 48 01 c0       	push   0xc00148bd
c0015162:	6a 07                	push   0x7
c0015164:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015167:	ff d0                	call   eax
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001516f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015171:	83 c0 24             	add    eax,0x24
c0015174:	8b 00                	mov    eax,DWORD PTR [eax]
c0015176:	6a 00                	push   0x0
c0015178:	68 30 41 01 c0       	push   0xc0014130
c001517d:	6a 08                	push   0x8
c001517f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015182:	ff d0                	call   eax
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001518a:	8b 00                	mov    eax,DWORD PTR [eax]
c001518c:	83 c0 24             	add    eax,0x24
c001518f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015191:	6a 00                	push   0x0
c0015193:	68 3c 49 01 c0       	push   0xc001493c
c0015198:	6a 09                	push   0x9
c001519a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001519d:	ff d0                	call   eax
c001519f:	83 c4 10             	add    esp,0x10
c00151a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a7:	83 c0 24             	add    eax,0x24
c00151aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ac:	6a 00                	push   0x0
c00151ae:	68 3c 49 01 c0       	push   0xc001493c
c00151b3:	6a 0a                	push   0xa
c00151b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b8:	ff d0                	call   eax
c00151ba:	83 c4 10             	add    esp,0x10
c00151bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c2:	83 c0 24             	add    eax,0x24
c00151c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c7:	6a 00                	push   0x0
c00151c9:	68 3c 49 01 c0       	push   0xc001493c
c00151ce:	6a 0b                	push   0xb
c00151d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151d3:	ff d0                	call   eax
c00151d5:	83 c4 10             	add    esp,0x10
c00151d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151db:	8b 00                	mov    eax,DWORD PTR [eax]
c00151dd:	83 c0 24             	add    eax,0x24
c00151e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e2:	6a 00                	push   0x0
c00151e4:	68 3c 49 01 c0       	push   0xc001493c
c00151e9:	6a 0c                	push   0xc
c00151eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ee:	ff d0                	call   eax
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f8:	83 c0 24             	add    eax,0x24
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	6a 00                	push   0x0
c00151ff:	68 ec 48 01 c0       	push   0xc00148ec
c0015204:	6a 0d                	push   0xd
c0015206:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015209:	ff d0                	call   eax
c001520b:	83 c4 10             	add    esp,0x10
c001520e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015211:	8b 00                	mov    eax,DWORD PTR [eax]
c0015213:	83 c0 24             	add    eax,0x24
c0015216:	8b 00                	mov    eax,DWORD PTR [eax]
c0015218:	6a 00                	push   0x0
c001521a:	68 25 49 01 c0       	push   0xc0014925
c001521f:	6a 0e                	push   0xe
c0015221:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015224:	ff d0                	call   eax
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522c:	8b 00                	mov    eax,DWORD PTR [eax]
c001522e:	83 c0 24             	add    eax,0x24
c0015231:	8b 00                	mov    eax,DWORD PTR [eax]
c0015233:	6a 00                	push   0x0
c0015235:	68 3c 49 01 c0       	push   0xc001493c
c001523a:	6a 0f                	push   0xf
c001523c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001523f:	ff d0                	call   eax
c0015241:	83 c4 10             	add    esp,0x10
c0015244:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015247:	8b 00                	mov    eax,DWORD PTR [eax]
c0015249:	83 c0 24             	add    eax,0x24
c001524c:	8b 00                	mov    eax,DWORD PTR [eax]
c001524e:	6a 00                	push   0x0
c0015250:	68 3c 49 01 c0       	push   0xc001493c
c0015255:	6a 10                	push   0x10
c0015257:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001525a:	ff d0                	call   eax
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015262:	8b 00                	mov    eax,DWORD PTR [eax]
c0015264:	83 c0 24             	add    eax,0x24
c0015267:	8b 00                	mov    eax,DWORD PTR [eax]
c0015269:	6a 00                	push   0x0
c001526b:	68 3c 49 01 c0       	push   0xc001493c
c0015270:	6a 11                	push   0x11
c0015272:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015275:	ff d0                	call   eax
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527d:	8b 00                	mov    eax,DWORD PTR [eax]
c001527f:	83 c0 24             	add    eax,0x24
c0015282:	8b 00                	mov    eax,DWORD PTR [eax]
c0015284:	6a 00                	push   0x0
c0015286:	68 3c 49 01 c0       	push   0xc001493c
c001528b:	6a 12                	push   0x12
c001528d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015290:	ff d0                	call   eax
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015298:	8b 00                	mov    eax,DWORD PTR [eax]
c001529a:	83 c0 24             	add    eax,0x24
c001529d:	8b 00                	mov    eax,DWORD PTR [eax]
c001529f:	6a 00                	push   0x0
c00152a1:	68 3c 49 01 c0       	push   0xc001493c
c00152a6:	6a 13                	push   0x13
c00152a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ab:	ff d0                	call   eax
c00152ad:	83 c4 10             	add    esp,0x10
c00152b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b5:	83 c0 24             	add    eax,0x24
c00152b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ba:	6a 00                	push   0x0
c00152bc:	68 3c 49 01 c0       	push   0xc001493c
c00152c1:	6a 14                	push   0x14
c00152c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c6:	ff d0                	call   eax
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d0:	83 c0 24             	add    eax,0x24
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	6a 00                	push   0x0
c00152d7:	68 3c 49 01 c0       	push   0xc001493c
c00152dc:	6a 1e                	push   0x1e
c00152de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e1:	ff d0                	call   eax
c00152e3:	83 c4 10             	add    esp,0x10
c00152e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152eb:	83 c0 24             	add    eax,0x24
c00152ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f0:	6a 00                	push   0x0
c00152f2:	68 6a ab 01 c0       	push   0xc001ab6a
c00152f7:	6a 60                	push   0x60
c00152f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152fc:	ff d0                	call   eax
c00152fe:	83 c4 10             	add    esp,0x10
c0015301:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015304:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015307:	c9                   	leave  
c0015308:	c3                   	ret    
c0015309:	90                   	nop

c001530a <InterruptController::convertLegacyIRQNumber(int)>:
c001530a:	55                   	push   ebp
c001530b:	89 e5                	mov    ebp,esp
c001530d:	83 ec 08             	sub    esp,0x8
c0015310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015313:	83 ec 0c             	sub    esp,0xc
c0015316:	50                   	push   eax
c0015317:	e8 4c ea ff ff       	call   c0013d68 <Device::getName()>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	8a 00                	mov    al,BYTE PTR [eax]
c0015321:	3c 41                	cmp    al,0x41
c0015323:	0f 94 c0             	sete   al
c0015326:	84 c0                	test   al,al
c0015328:	74 28                	je     c0015352 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001532a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001532e:	7f 12                	jg     c0015342 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015330:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015333:	05 20 ab 02 c0       	add    eax,0xc002ab20
c0015338:	8a 00                	mov    al,BYTE PTR [eax]
c001533a:	0f b6 c0             	movzx  eax,al
c001533d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015340:	eb 10                	jmp    c0015352 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	68 34 87 02 c0       	push   0xc0028734
c001534a:	e8 08 3e 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001534f:	83 c4 10             	add    esp,0x10
c0015352:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015355:	c9                   	leave  
c0015356:	c3                   	ret    
c0015357:	90                   	nop

c0015358 <startGUI(void*)>:
c0015358:	55                   	push   ebp
c0015359:	89 e5                	mov    ebp,esp
c001535b:	53                   	push   ebx
c001535c:	83 ec 04             	sub    esp,0x4
c001535f:	e8 3b 6e 00 00       	call   c001c19f <unlockScheduler()>
c0015364:	e8 1f 6e 00 00       	call   c001c188 <getIRQNestingLevel()>
c0015369:	83 ec 08             	sub    esp,0x8
c001536c:	50                   	push   eax
c001536d:	68 1c 8a 02 c0       	push   0xc0028a1c
c0015372:	e8 16 d3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0015377:	83 c4 10             	add    esp,0x10
c001537a:	8b 1d 48 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b848
c0015380:	83 ec 08             	sub    esp,0x8
c0015383:	6a 01                	push   0x1
c0015385:	68 36 8a 02 c0       	push   0xc0028a36
c001538a:	e8 d2 67 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	83 ec 08             	sub    esp,0x8
c0015395:	53                   	push   ebx
c0015396:	50                   	push   eax
c0015397:	e8 d4 69 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	8b 1d 48 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b848
c00153a5:	83 ec 08             	sub    esp,0x8
c00153a8:	6a 01                	push   0x1
c00153aa:	68 50 8a 02 c0       	push   0xc0028a50
c00153af:	e8 ad 67 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	83 ec 08             	sub    esp,0x8
c00153ba:	53                   	push   ebx
c00153bb:	50                   	push   eax
c00153bc:	e8 af 69 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	90                   	nop
c00153c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153c8:	c9                   	leave  
c00153c9:	c3                   	ret    

c00153ca <sendKeyToTerminal(unsigned char)>:
c00153ca:	55                   	push   ebp
c00153cb:	89 e5                	mov    ebp,esp
c00153cd:	83 ec 28             	sub    esp,0x28
c00153d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00153d6:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c00153db:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00153df:	83 ec 08             	sub    esp,0x8
c00153e2:	52                   	push   edx
c00153e3:	50                   	push   eax
c00153e4:	e8 83 ba ff ff       	call   c0010e6c <VgaText::receiveKey(unsigned char)>
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00153f0:	75 41                	jne    c0015433 <sendKeyToTerminal(unsigned char)+0x69>
c00153f2:	e8 cd 6d 00 00       	call   c001c1c4 <lockStuff()>
c00153f7:	a1 e0 b9 02 c0       	mov    eax,ds:0xc002b9e0
c00153fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153ff:	c7 05 e0 b9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b9e0,0x0
c0015409:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001540d:	74 1f                	je     c001542e <sendKeyToTerminal(unsigned char)+0x64>
c001540f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015412:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015415:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015418:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001541b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001541e:	83 ec 0c             	sub    esp,0xc
c0015421:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015424:	e8 8b 73 00 00       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	eb db                	jmp    c0015409 <sendKeyToTerminal(unsigned char)+0x3f>
c001542e:	e8 2a 71 00 00       	call   c001c55d <unlockStuff()>
c0015433:	90                   	nop
c0015434:	c9                   	leave  
c0015435:	c3                   	ret    

c0015436 <sendKeyboardToken(KeyboardToken)>:
c0015436:	55                   	push   ebp
c0015437:	89 e5                	mov    ebp,esp
c0015439:	83 ec 18             	sub    esp,0x18
c001543c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	0f b7 c0             	movzx  eax,ax
c0015445:	83 f2 01             	xor    edx,0x1
c0015448:	88 90 00 ba 02 c0    	mov    BYTE PTR [eax-0x3ffd4600],dl
c001544e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015451:	66 3d 03 02          	cmp    ax,0x203
c0015455:	75 07                	jne    c001545e <sendKeyboardToken(KeyboardToken)+0x28>
c0015457:	a0 00 bb 02 c0       	mov    al,ds:0xc002bb00
c001545c:	84 c0                	test   al,al
c001545e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015462:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015465:	a0 08 be 02 c0       	mov    al,ds:0xc002be08
c001546a:	38 c2                	cmp    dl,al
c001546c:	74 1c                	je     c001548a <sendKeyboardToken(KeyboardToken)+0x54>
c001546e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015471:	a2 08 be 02 c0       	mov    ds:0xc002be08,al
c0015476:	a0 08 be 02 c0       	mov    al,ds:0xc002be08
c001547b:	0f b6 c0             	movzx  eax,al
c001547e:	83 ec 0c             	sub    esp,0xc
c0015481:	50                   	push   eax
c0015482:	e8 53 ac ff ff       	call   c00100da <setTerminalScrollLock(bool)>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001548d:	84 c0                	test   al,al
c001548f:	0f 84 ae 00 00 00    	je     c0015543 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015498:	66 3d 10 03          	cmp    ax,0x310
c001549c:	75 06                	jne    c00154a4 <sendKeyboardToken(KeyboardToken)+0x6e>
c001549e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	66 3d 11 03          	cmp    ax,0x311
c00154ab:	75 06                	jne    c00154b3 <sendKeyboardToken(KeyboardToken)+0x7d>
c00154ad:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	66 3d 12 03          	cmp    ax,0x312
c00154ba:	75 06                	jne    c00154c2 <sendKeyboardToken(KeyboardToken)+0x8c>
c00154bc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	66 3d 13 03          	cmp    ax,0x313
c00154c9:	75 06                	jne    c00154d1 <sendKeyboardToken(KeyboardToken)+0x9b>
c00154cb:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	66 3d 14 03          	cmp    ax,0x314
c00154d8:	75 06                	jne    c00154e0 <sendKeyboardToken(KeyboardToken)+0xaa>
c00154da:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00154e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e3:	66 3d 15 03          	cmp    ax,0x315
c00154e7:	75 06                	jne    c00154ef <sendKeyboardToken(KeyboardToken)+0xb9>
c00154e9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00154ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f2:	66 3d 16 03          	cmp    ax,0x316
c00154f6:	75 06                	jne    c00154fe <sendKeyboardToken(KeyboardToken)+0xc8>
c00154f8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	66 3d 17 03          	cmp    ax,0x317
c0015505:	75 06                	jne    c001550d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015507:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	66 3d 18 03          	cmp    ax,0x318
c0015514:	75 06                	jne    c001551c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015516:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	66 3d 19 03          	cmp    ax,0x319
c0015523:	75 06                	jne    c001552b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015525:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001552b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552e:	66 3d 1a 03          	cmp    ax,0x31a
c0015532:	0f 85 c9 00 00 00    	jne    c0015601 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015538:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001553e:	e9 be 00 00 00       	jmp    c0015601 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015546:	66 3d 10 03          	cmp    ax,0x310
c001554a:	75 0a                	jne    c0015556 <sendKeyboardToken(KeyboardToken)+0x120>
c001554c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015552:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015559:	66 3d 11 03          	cmp    ax,0x311
c001555d:	75 0a                	jne    c0015569 <sendKeyboardToken(KeyboardToken)+0x133>
c001555f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015565:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	66 3d 12 03          	cmp    ax,0x312
c0015570:	75 0a                	jne    c001557c <sendKeyboardToken(KeyboardToken)+0x146>
c0015572:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015578:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	66 3d 13 03          	cmp    ax,0x313
c0015583:	75 0a                	jne    c001558f <sendKeyboardToken(KeyboardToken)+0x159>
c0015585:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001558b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001558f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015592:	66 3d 14 03          	cmp    ax,0x314
c0015596:	75 0a                	jne    c00155a2 <sendKeyboardToken(KeyboardToken)+0x16c>
c0015598:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001559e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a5:	66 3d 15 03          	cmp    ax,0x315
c00155a9:	75 0a                	jne    c00155b5 <sendKeyboardToken(KeyboardToken)+0x17f>
c00155ab:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00155b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b8:	66 3d 16 03          	cmp    ax,0x316
c00155bc:	75 0a                	jne    c00155c8 <sendKeyboardToken(KeyboardToken)+0x192>
c00155be:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00155c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cb:	66 3d 17 03          	cmp    ax,0x317
c00155cf:	75 0a                	jne    c00155db <sendKeyboardToken(KeyboardToken)+0x1a5>
c00155d1:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00155d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155de:	66 3d 18 03          	cmp    ax,0x318
c00155e2:	75 0a                	jne    c00155ee <sendKeyboardToken(KeyboardToken)+0x1b8>
c00155e4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00155ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f1:	66 3d 19 03          	cmp    ax,0x319
c00155f5:	75 0a                	jne    c0015601 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00155f7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00155fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015604:	66 3d 00 02          	cmp    ax,0x200
c0015608:	75 2a                	jne    c0015634 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001560a:	a0 00 be 02 c0       	mov    al,ds:0xc002be00
c001560f:	83 f0 01             	xor    eax,0x1
c0015612:	84 c0                	test   al,al
c0015614:	74 1e                	je     c0015634 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015616:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001561b:	6a 01                	push   0x1
c001561d:	6a 00                	push   0x0
c001561f:	68 58 53 01 c0       	push   0xc0015358
c0015624:	50                   	push   eax
c0015625:	e8 a4 6c 00 00       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	c6 05 00 be 02 c0 01 	mov    BYTE PTR ds:0xc002be00,0x1
c0015634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015637:	66 3d 1d 03          	cmp    ax,0x31d
c001563b:	75 06                	jne    c0015643 <sendKeyboardToken(KeyboardToken)+0x20d>
c001563d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015646:	66 3d 1c 03          	cmp    ax,0x31c
c001564a:	75 06                	jne    c0015652 <sendKeyboardToken(KeyboardToken)+0x21c>
c001564c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	66 3d 1b 03          	cmp    ax,0x31b
c0015659:	75 06                	jne    c0015661 <sendKeyboardToken(KeyboardToken)+0x22b>
c001565b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	66 3d 1e 03          	cmp    ax,0x31e
c0015668:	75 06                	jne    c0015670 <sendKeyboardToken(KeyboardToken)+0x23a>
c001566a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015673:	66 3d 1f 03          	cmp    ax,0x31f
c0015677:	75 06                	jne    c001567f <sendKeyboardToken(KeyboardToken)+0x249>
c0015679:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001567f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015682:	66 3d 1a 03          	cmp    ax,0x31a
c0015686:	75 06                	jne    c001568e <sendKeyboardToken(KeyboardToken)+0x258>
c0015688:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001568e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015692:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015695:	83 f0 01             	xor    eax,0x1
c0015698:	84 c0                	test   al,al
c001569a:	74 77                	je     c0015713 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001569c:	a0 01 bb 02 c0       	mov    al,ds:0xc002bb01
c00156a1:	84 c0                	test   al,al
c00156a3:	74 41                	je     c00156e6 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00156a5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156a9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00156ad:	74 2b                	je     c00156da <sendKeyboardToken(KeyboardToken)+0x2a4>
c00156af:	8b 15 04 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be04
c00156b5:	89 d0                	mov    eax,edx
c00156b7:	c1 e0 02             	shl    eax,0x2
c00156ba:	01 d0                	add    eax,edx
c00156bc:	01 c0                	add    eax,eax
c00156be:	a3 04 be 02 c0       	mov    ds:0xc002be04,eax
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	0f b7 c0             	movzx  eax,ax
c00156c9:	8d 50 d0             	lea    edx,[eax-0x30]
c00156cc:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c00156d1:	01 d0                	add    eax,edx
c00156d3:	a3 04 be 02 c0       	mov    ds:0xc002be04,eax
c00156d8:	eb 6d                	jmp    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c00156da:	c7 05 04 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x0
c00156e4:	eb 61                	jmp    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c00156e6:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c00156eb:	85 c0                	test   eax,eax
c00156ed:	74 18                	je     c0015707 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00156ef:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c00156f4:	0f b6 c0             	movzx  eax,al
c00156f7:	83 ec 0c             	sub    esp,0xc
c00156fa:	50                   	push   eax
c00156fb:	e8 ca fc ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015707:	c7 05 04 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x0
c0015711:	eb 34                	jmp    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	66 3d 01 01          	cmp    ax,0x101
c001571a:	75 2b                	jne    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c001571c:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c0015721:	85 c0                	test   eax,eax
c0015723:	74 18                	je     c001573d <sendKeyboardToken(KeyboardToken)+0x307>
c0015725:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c001572a:	0f b6 c0             	movzx  eax,al
c001572d:	83 ec 0c             	sub    esp,0xc
c0015730:	50                   	push   eax
c0015731:	e8 94 fc ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c0015736:	83 c4 10             	add    esp,0x10
c0015739:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001573d:	c7 05 04 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x0
c0015747:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001574a:	83 f0 01             	xor    eax,0x1
c001574d:	84 c0                	test   al,al
c001574f:	74 4c                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c0015751:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015754:	83 f0 01             	xor    eax,0x1
c0015757:	84 c0                	test   al,al
c0015759:	74 42                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c001575b:	a0 00 bb 02 c0       	mov    al,ds:0xc002bb00
c0015760:	83 f0 01             	xor    eax,0x1
c0015763:	84 c0                	test   al,al
c0015765:	74 36                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c0015767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576a:	66 83 f8 1f          	cmp    ax,0x1f
c001576e:	76 09                	jbe    c0015779 <sendKeyboardToken(KeyboardToken)+0x343>
c0015770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015773:	66 83 f8 7e          	cmp    ax,0x7e
c0015777:	76 12                	jbe    c001578b <sendKeyboardToken(KeyboardToken)+0x355>
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	66 83 f8 0a          	cmp    ax,0xa
c0015780:	74 09                	je     c001578b <sendKeyboardToken(KeyboardToken)+0x355>
c0015782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015785:	66 83 f8 08          	cmp    ax,0x8
c0015789:	75 12                	jne    c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c001578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578e:	0f b6 c0             	movzx  eax,al
c0015791:	83 ec 0c             	sub    esp,0xc
c0015794:	50                   	push   eax
c0015795:	e8 30 fc ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00157a0:	83 f0 01             	xor    eax,0x1
c00157a3:	84 c0                	test   al,al
c00157a5:	74 4f                	je     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157aa:	83 f0 01             	xor    eax,0x1
c00157ad:	84 c0                	test   al,al
c00157af:	74 45                	je     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157b1:	a0 00 bb 02 c0       	mov    al,ds:0xc002bb00
c00157b6:	84 c0                	test   al,al
c00157b8:	74 3c                	je     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bd:	66 83 f8 3f          	cmp    ax,0x3f
c00157c1:	76 33                	jbe    c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c6:	66 83 f8 7f          	cmp    ax,0x7f
c00157ca:	77 2a                	ja     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cf:	88 c2                	mov    dl,al
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	66 83 f8 5f          	cmp    ax,0x5f
c00157d8:	76 04                	jbe    c00157de <sendKeyboardToken(KeyboardToken)+0x3a8>
c00157da:	b0 20                	mov    al,0x20
c00157dc:	eb 02                	jmp    c00157e0 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00157de:	b0 00                	mov    al,0x0
c00157e0:	29 c2                	sub    edx,eax
c00157e2:	88 d0                	mov    al,dl
c00157e4:	83 e8 40             	sub    eax,0x40
c00157e7:	0f b6 c0             	movzx  eax,al
c00157ea:	83 ec 0c             	sub    esp,0xc
c00157ed:	50                   	push   eax
c00157ee:	e8 d7 fb ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c00157f3:	83 c4 10             	add    esp,0x10
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	66 3d 00 03          	cmp    ax,0x300
c00157fd:	75 0f                	jne    c001580e <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015802:	83 f0 01             	xor    eax,0x1
c0015805:	84 c0                	test   al,al
c0015807:	74 05                	je     c001580e <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015809:	e8 f3 b0 ff ff       	call   c0010901 <doTerminalCycle()>
c001580e:	90                   	nop
c001580f:	c9                   	leave  
c0015810:	c3                   	ret    

c0015811 <clearInternalKeybuffer(VgaText*)>:
c0015811:	55                   	push   ebp
c0015812:	89 e5                	mov    ebp,esp
c0015814:	83 ec 08             	sub    esp,0x8
c0015817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581a:	05 34 11 00 00       	add    eax,0x1134
c001581f:	83 ec 0c             	sub    esp,0xc
c0015822:	50                   	push   eax
c0015823:	e8 70 ae fe ff       	call   c0000698 <strlen>
c0015828:	83 c4 10             	add    esp,0x10
c001582b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001582e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015834:	83 ec 04             	sub    esp,0x4
c0015837:	50                   	push   eax
c0015838:	6a 00                	push   0x0
c001583a:	52                   	push   edx
c001583b:	e8 3b ae fe ff       	call   c000067b <memset>
c0015840:	83 c4 10             	add    esp,0x10
c0015843:	90                   	nop
c0015844:	c9                   	leave  
c0015845:	c3                   	ret    

c0015846 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015846:	55                   	push   ebp
c0015847:	89 e5                	mov    ebp,esp
c0015849:	83 ec 18             	sub    esp,0x18
c001584c:	fb                   	sti    
c001584d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015854:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015858:	0f 84 8a 00 00 00    	je     c00158e8 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015867:	84 c0                	test   al,al
c0015869:	75 11                	jne    c001587c <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001586b:	e8 2d 69 00 00       	call   c001c19d <lockScheduler()>
c0015870:	e8 63 6c 00 00       	call   c001c4d8 <schedule()>
c0015875:	e8 25 69 00 00       	call   c001c19f <unlockScheduler()>
c001587a:	eb e2                	jmp    c001585e <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001587c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001587f:	8d 50 01             	lea    edx,[eax+0x1]
c0015882:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015885:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015888:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001588e:	88 10                	mov    BYTE PTR [eax],dl
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015899:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001589c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589f:	05 34 11 00 00       	add    eax,0x1134
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	50                   	push   eax
c00158a8:	e8 eb ad fe ff       	call   c0000698 <strlen>
c00158ad:	83 c4 10             	add    esp,0x10
c00158b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158b3:	81 c2 34 11 00 00    	add    edx,0x1134
c00158b9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00158bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158bf:	81 c2 34 11 00 00    	add    edx,0x1134
c00158c5:	83 ec 04             	sub    esp,0x4
c00158c8:	50                   	push   eax
c00158c9:	51                   	push   ecx
c00158ca:	52                   	push   edx
c00158cb:	e8 3d ad fe ff       	call   c000060d <memmove>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00158d6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00158d9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00158dd:	0f 85 71 ff ff ff    	jne    c0015854 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00158e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e6:	eb 03                	jmp    c00158eb <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00158e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158eb:	c9                   	leave  
c00158ec:	c3                   	ret    
c00158ed:	90                   	nop

c00158ee <Keyboard::Keyboard(char const*)>:
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f5:	83 ec 08             	sub    esp,0x8
c00158f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158fc:	50                   	push   eax
c00158fd:	e8 6a e3 ff ff       	call   c0013c6c <Device::Device(char const*)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	ba 74 8a 02 c0       	mov    edx,0xc0028a74
c001590a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590e:	89 10                	mov    DWORD PTR [eax],edx
c0015910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015914:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001591e:	c6 05 e4 b9 02 c0 01 	mov    BYTE PTR ds:0xc002b9e4,0x1
c0015925:	90                   	nop
c0015926:	83 c4 0c             	add    esp,0xc
c0015929:	c3                   	ret    

c001592a <Keyboard::~Keyboard()>:
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	ba 74 8a 02 c0       	mov    edx,0xc0028a74
c0015932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015936:	89 10                	mov    DWORD PTR [eax],edx
c0015938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	50                   	push   eax
c0015940:	e8 09 e0 ff ff       	call   c001394e <Device::~Device()>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	90                   	nop
c0015949:	83 c4 0c             	add    esp,0xc
c001594c:	c3                   	ret    
c001594d:	90                   	nop

c001594e <Keyboard::~Keyboard()>:
c001594e:	83 ec 0c             	sub    esp,0xc
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015958:	e8 cd ff ff ff       	call   c001592a <Keyboard::~Keyboard()>
c001595d:	83 c4 10             	add    esp,0x10
c0015960:	83 ec 08             	sub    esp,0x8
c0015963:	68 5c 01 00 00       	push   0x15c
c0015968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001596c:	e8 3c cc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	83 c4 0c             	add    esp,0xc
c0015977:	c3                   	ret    

c0015978 <LogicalDisk::close(int, int, void*)>:
c0015978:	83 c8 ff             	or     eax,0xffffffff
c001597b:	c3                   	ret    

c001597c <LogicalDisk::~LogicalDisk()>:
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	ba 24 8b 02 c0       	mov    edx,0xc0028b24
c0015984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015988:	89 10                	mov    DWORD PTR [eax],edx
c001598a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001598e:	83 ec 0c             	sub    esp,0xc
c0015991:	50                   	push   eax
c0015992:	e8 b7 df ff ff       	call   c001394e <Device::~Device()>
c0015997:	83 c4 10             	add    esp,0x10
c001599a:	90                   	nop
c001599b:	83 c4 0c             	add    esp,0xc
c001599e:	c3                   	ret    
c001599f:	90                   	nop

c00159a0 <LogicalDisk::~LogicalDisk()>:
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	83 ec 0c             	sub    esp,0xc
c00159a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159aa:	e8 cd ff ff ff       	call   c001597c <LogicalDisk::~LogicalDisk()>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	83 ec 08             	sub    esp,0x8
c00159b5:	68 74 01 00 00       	push   0x174
c00159ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159be:	e8 ea cb ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	83 c4 0c             	add    esp,0xc
c00159c9:	c3                   	ret    

c00159ca <LogicalDisk::open(int, int, void*)>:
c00159ca:	83 ec 18             	sub    esp,0x18
c00159cd:	68 a0 8a 02 c0       	push   0xc0028aa0
c00159d2:	e8 80 37 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00159d7:	83 c8 ff             	or     eax,0xffffffff
c00159da:	83 c4 1c             	add    esp,0x1c
c00159dd:	c3                   	ret    

c00159de <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00159de:	53                   	push   ebx
c00159df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00159e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00159e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159eb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00159f1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00159f7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00159fd:	77 10                	ja     c0015a0f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00159ff:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015a05:	89 d3                	mov    ebx,edx
c0015a07:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015a0d:	72 05                	jb     c0015a14 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015a0f:	83 c8 ff             	or     eax,0xffffffff
c0015a12:	89 c2                	mov    edx,eax
c0015a14:	5b                   	pop    ebx
c0015a15:	c3                   	ret    

c0015a16 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015a16:	56                   	push   esi
c0015a17:	83 c8 ff             	or     eax,0xffffffff
c0015a1a:	53                   	push   ebx
c0015a1b:	89 c2                	mov    edx,eax
c0015a1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a21:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015a25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015a2f:	77 27                	ja     c0015a58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015a31:	89 d8                	mov    eax,ebx
c0015a33:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015a39:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015a3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a44:	89 c2                	mov    edx,eax
c0015a46:	73 10                	jae    c0015a58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015a48:	89 c8                	mov    eax,ecx
c0015a4a:	89 da                	mov    edx,ebx
c0015a4c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015a52:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015a58:	5b                   	pop    ebx
c0015a59:	5e                   	pop    esi
c0015a5a:	c3                   	ret    
c0015a5b:	90                   	nop

c0015a5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015a5c:	83 ec 1c             	sub    esp,0x1c
c0015a5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a73:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015a7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a82:	83 ec 08             	sub    esp,0x8
c0015a85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a89:	50                   	push   eax
c0015a8a:	e8 dd e1 ff ff       	call   c0013c6c <Device::Device(char const*)>
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	ba 24 8b 02 c0       	mov    edx,0xc0028b24
c0015a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a9b:	89 10                	mov    DWORD PTR [eax],edx
c0015a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015ac1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015acd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ad3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ad9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015add:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ae0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ae4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015aea:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015af8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b02:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015b0c:	90                   	nop
c0015b0d:	83 c4 1c             	add    esp,0x1c
c0015b10:	c3                   	ret    
c0015b11:	90                   	nop

c0015b12 <LogicalDisk::assignDriveLetter()>:
c0015b12:	55                   	push   ebp
c0015b13:	57                   	push   edi
c0015b14:	56                   	push   esi
c0015b15:	53                   	push   ebx
c0015b16:	83 ec 14             	sub    esp,0x14
c0015b19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b1d:	8b 3d 20 be 02 c0    	mov    edi,DWORD PTR ds:0xc002be20
c0015b23:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015b29:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015b2d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015b33:	8b 3d 24 be 02 c0    	mov    edi,DWORD PTR ds:0xc002be24
c0015b39:	3c 01                	cmp    al,0x1
c0015b3b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015b3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015b43:	19 c0                	sbb    eax,eax
c0015b45:	83 e0 02             	and    eax,0x2
c0015b48:	83 c0 41             	add    eax,0x41
c0015b4b:	0f be e8             	movsx  ebp,al
c0015b4e:	3c 43                	cmp    al,0x43
c0015b50:	75 10                	jne    c0015b62 <LogicalDisk::assignDriveLetter()+0x50>
c0015b52:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015b59:	75 5d                	jne    c0015bb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b5b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b60:	75 56                	jne    c0015bb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b62:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015b65:	ba 01 00 00 00       	mov    edx,0x1
c0015b6a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015b6e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015b72:	d3 e2                	shl    edx,cl
c0015b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b78:	89 d7                	mov    edi,edx
c0015b7a:	89 d6                	mov    esi,edx
c0015b7c:	c1 ff 1f             	sar    edi,0x1f
c0015b7f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015b83:	21 f9                	and    ecx,edi
c0015b85:	09 d1                	or     ecx,edx
c0015b87:	75 2f                	jne    c0015bb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b89:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015b8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b91:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015b97:	09 f2                	or     edx,esi
c0015b99:	89 15 20 be 02 c0    	mov    DWORD PTR ds:0xc002be20,edx
c0015b9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ba3:	09 fa                	or     edx,edi
c0015ba5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015ba9:	89 15 24 be 02 c0    	mov    DWORD PTR ds:0xc002be24,edx
c0015baf:	89 1c bd 40 be 02 c0 	mov    DWORD PTR [edi*4-0x3ffd41c0],ebx
c0015bb6:	eb 08                	jmp    c0015bc0 <LogicalDisk::assignDriveLetter()+0xae>
c0015bb8:	45                   	inc    ebp
c0015bb9:	40                   	inc    eax
c0015bba:	3c 5b                	cmp    al,0x5b
c0015bbc:	75 90                	jne    c0015b4e <LogicalDisk::assignDriveLetter()+0x3c>
c0015bbe:	31 c0                	xor    eax,eax
c0015bc0:	83 c4 14             	add    esp,0x14
c0015bc3:	5b                   	pop    ebx
c0015bc4:	5e                   	pop    esi
c0015bc5:	5f                   	pop    edi
c0015bc6:	5d                   	pop    ebp
c0015bc7:	c3                   	ret    

c0015bc8 <LogicalDisk::mount()>:
c0015bc8:	56                   	push   esi
c0015bc9:	53                   	push   ebx
c0015bca:	51                   	push   ecx
c0015bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015bcf:	8b 1d a8 b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b9a8
c0015bd5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015bdf:	85 db                	test   ebx,ebx
c0015be1:	74 50                	je     c0015c33 <LogicalDisk::mount()+0x6b>
c0015be3:	e8 a0 65 00 00       	call   c001c188 <getIRQNestingLevel()>
c0015be8:	52                   	push   edx
c0015be9:	52                   	push   edx
c0015bea:	50                   	push   eax
c0015beb:	68 c4 8a 02 c0       	push   0xc0028ac4
c0015bf0:	e8 98 ca ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0015bf5:	83 c4 0c             	add    esp,0xc
c0015bf8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015bff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c01:	83 e8 41             	sub    eax,0x41
c0015c04:	50                   	push   eax
c0015c05:	56                   	push   esi
c0015c06:	53                   	push   ebx
c0015c07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	84 c0                	test   al,al
c0015c0f:	74 08                	je     c0015c19 <LogicalDisk::mount()+0x51>
c0015c11:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015c17:	eb 1c                	jmp    c0015c35 <LogicalDisk::mount()+0x6d>
c0015c19:	e8 6a 65 00 00       	call   c001c188 <getIRQNestingLevel()>
c0015c1e:	51                   	push   ecx
c0015c1f:	51                   	push   ecx
c0015c20:	50                   	push   eax
c0015c21:	68 df 8a 02 c0       	push   0xc0028adf
c0015c26:	e8 62 ca ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0015c2b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	eb ac                	jmp    c0015bdf <LogicalDisk::mount()+0x17>
c0015c33:	31 c0                	xor    eax,eax
c0015c35:	5a                   	pop    edx
c0015c36:	5b                   	pop    ebx
c0015c37:	5e                   	pop    esi
c0015c38:	c3                   	ret    
c0015c39:	90                   	nop

c0015c3a <LogicalDisk::unmount()>:
c0015c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c3e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c48:	c3                   	ret    
c0015c49:	90                   	nop

c0015c4a <LogicalDisk::unassignDriveLetter()>:
c0015c4a:	57                   	push   edi
c0015c4b:	56                   	push   esi
c0015c4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c50:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015c57:	84 c9                	test   cl,cl
c0015c59:	75 0f                	jne    c0015c6a <LogicalDisk::unassignDriveLetter()+0x20>
c0015c5b:	c7 44 24 0c fa 8a 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028afa
c0015c63:	5e                   	pop    esi
c0015c64:	5f                   	pop    edi
c0015c65:	e9 ed 34 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c0015c6a:	83 e9 41             	sub    ecx,0x41
c0015c6d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015c74:	b8 01 00 00 00       	mov    eax,0x1
c0015c79:	c7 04 8d 40 be 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd41c0],0x0
c0015c84:	d3 e0                	shl    eax,cl
c0015c86:	89 c7                	mov    edi,eax
c0015c88:	f7 d0                	not    eax
c0015c8a:	c1 ff 1f             	sar    edi,0x1f
c0015c8d:	21 05 20 be 02 c0    	and    DWORD PTR ds:0xc002be20,eax
c0015c93:	89 fe                	mov    esi,edi
c0015c95:	f7 d6                	not    esi
c0015c97:	21 35 24 be 02 c0    	and    DWORD PTR ds:0xc002be24,esi
c0015c9d:	5e                   	pop    esi
c0015c9e:	5f                   	pop    edi
c0015c9f:	c3                   	ret    

c0015ca0 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015ca0:	57                   	push   edi
c0015ca1:	56                   	push   esi
c0015ca2:	53                   	push   ebx
c0015ca3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ca7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cb3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cb9:	77 41                	ja     c0015cfc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015cbb:	99                   	cdq    
c0015cbc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015cc2:	01 c8                	add    eax,ecx
c0015cc4:	11 da                	adc    edx,ebx
c0015cc6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ccc:	19 d7                	sbb    edi,edx
c0015cce:	72 33                	jb     c0015d03 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015cd0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015cd6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015cdc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ce0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ce4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015cea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015cf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015cf4:	5b                   	pop    ebx
c0015cf5:	5e                   	pop    esi
c0015cf6:	5f                   	pop    edi
c0015cf7:	e9 f8 09 00 00       	jmp    c00166f4 <VCache::read(unsigned long long, int, void*)>
c0015cfc:	b8 05 00 00 00       	mov    eax,0x5
c0015d01:	eb 05                	jmp    c0015d08 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015d03:	b8 07 00 00 00       	mov    eax,0x7
c0015d08:	5b                   	pop    ebx
c0015d09:	5e                   	pop    esi
c0015d0a:	5f                   	pop    edi
c0015d0b:	c3                   	ret    

c0015d0c <LogicalDisk::write(unsigned long long, int, void*)>:
c0015d0c:	57                   	push   edi
c0015d0d:	56                   	push   esi
c0015d0e:	53                   	push   ebx
c0015d0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d17:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d1f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d25:	77 41                	ja     c0015d68 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015d27:	99                   	cdq    
c0015d28:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015d2e:	01 c8                	add    eax,ecx
c0015d30:	11 da                	adc    edx,ebx
c0015d32:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015d38:	19 d7                	sbb    edi,edx
c0015d3a:	72 33                	jb     c0015d6f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015d3c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015d42:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d4c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d50:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d60:	5b                   	pop    ebx
c0015d61:	5e                   	pop    esi
c0015d62:	5f                   	pop    edi
c0015d63:	e9 a8 08 00 00       	jmp    c0016610 <VCache::write(unsigned long long, int, void*)>
c0015d68:	b8 05 00 00 00       	mov    eax,0x5
c0015d6d:	eb 05                	jmp    c0015d74 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015d6f:	b8 07 00 00 00       	mov    eax,0x7
c0015d74:	5b                   	pop    ebx
c0015d75:	5e                   	pop    esi
c0015d76:	5f                   	pop    edi
c0015d77:	c3                   	ret    

c0015d78 <Mouse::Mouse(char const*)>:
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7f:	83 ec 08             	sub    esp,0x8
c0015d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d86:	50                   	push   eax
c0015d87:	e8 e0 de ff ff       	call   c0013c6c <Device::Device(char const*)>
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	ba 50 8b 02 c0       	mov    edx,0xc0028b50
c0015d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d98:	89 10                	mov    DWORD PTR [eax],edx
c0015d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d9e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015da8:	90                   	nop
c0015da9:	83 c4 0c             	add    esp,0xc
c0015dac:	c3                   	ret    
c0015dad:	90                   	nop

c0015dae <Mouse::~Mouse()>:
c0015dae:	83 ec 0c             	sub    esp,0xc
c0015db1:	ba 50 8b 02 c0       	mov    edx,0xc0028b50
c0015db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dba:	89 10                	mov    DWORD PTR [eax],edx
c0015dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc0:	83 ec 0c             	sub    esp,0xc
c0015dc3:	50                   	push   eax
c0015dc4:	e8 85 db ff ff       	call   c001394e <Device::~Device()>
c0015dc9:	83 c4 10             	add    esp,0x10
c0015dcc:	90                   	nop
c0015dcd:	83 c4 0c             	add    esp,0xc
c0015dd0:	c3                   	ret    
c0015dd1:	90                   	nop

c0015dd2 <Mouse::~Mouse()>:
c0015dd2:	83 ec 0c             	sub    esp,0xc
c0015dd5:	83 ec 0c             	sub    esp,0xc
c0015dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ddc:	e8 cd ff ff ff       	call   c0015dae <Mouse::~Mouse()>
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	83 ec 08             	sub    esp,0x8
c0015de7:	68 58 01 00 00       	push   0x158
c0015dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df0:	e8 b8 c7 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	83 c4 0c             	add    esp,0xc
c0015dfb:	c3                   	ret    

c0015dfc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015dfc:	55                   	push   ebp
c0015dfd:	57                   	push   edi
c0015dfe:	56                   	push   esi
c0015dff:	53                   	push   ebx
c0015e00:	81 ec 28 01 00 00    	sub    esp,0x128
c0015e06:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015e0d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015e14:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015e1b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015e22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e26:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015e2a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e31:	e8 32 df ff ff       	call   c0013d68 <Device::getName()>
c0015e36:	5a                   	pop    edx
c0015e37:	59                   	pop    ecx
c0015e38:	50                   	push   eax
c0015e39:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015e3d:	55                   	push   ebp
c0015e3e:	e8 d7 a8 fe ff       	call   c000071a <strcpy>
c0015e43:	5b                   	pop    ebx
c0015e44:	58                   	pop    eax
c0015e45:	68 74 8b 02 c0       	push   0xc0028b74
c0015e4a:	55                   	push   ebp
c0015e4b:	e8 81 a9 fe ff       	call   c00007d1 <strcat>
c0015e50:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015e57:	e8 64 96 ff ff       	call   c000f4c0 <malloc>
c0015e5c:	83 c4 0c             	add    esp,0xc
c0015e5f:	89 c3                	mov    ebx,eax
c0015e61:	57                   	push   edi
c0015e62:	56                   	push   esi
c0015e63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e6b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015e72:	55                   	push   ebp
c0015e73:	50                   	push   eax
c0015e74:	e8 e3 fb ff ff       	call   c0015a5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015e79:	83 c4 14             	add    esp,0x14
c0015e7c:	53                   	push   ebx
c0015e7d:	e8 90 fc ff ff       	call   c0015b12 <LogicalDisk::assignDriveLetter()>
c0015e82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e85:	e8 3e fd ff ff       	call   c0015bc8 <LogicalDisk::mount()>
c0015e8a:	58                   	pop    eax
c0015e8b:	5a                   	pop    edx
c0015e8c:	53                   	push   ebx
c0015e8d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e94:	e8 e3 db ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0015e99:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e9f:	5b                   	pop    ebx
c0015ea0:	5e                   	pop    esi
c0015ea1:	5f                   	pop    edi
c0015ea2:	5d                   	pop    ebp
c0015ea3:	c3                   	ret    

c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>:
c0015ea4:	55                   	push   ebp
c0015ea5:	57                   	push   edi
c0015ea6:	56                   	push   esi
c0015ea7:	53                   	push   ebx
c0015ea8:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015eae:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015eb5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015ebb:	3d 00 02 00 00       	cmp    eax,0x200
c0015ec0:	74 27                	je     c0015ee9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015ec2:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015ec8:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015ece:	83 ec 10             	sub    esp,0x10
c0015ed1:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015ed5:	99                   	cdq    
c0015ed6:	c1 e6 0a             	shl    esi,0xa
c0015ed9:	52                   	push   edx
c0015eda:	89 fd                	mov    ebp,edi
c0015edc:	50                   	push   eax
c0015edd:	55                   	push   ebp
c0015ede:	56                   	push   esi
c0015edf:	e8 28 e6 00 00       	call   c002450c <__udivdi3>
c0015ee4:	e9 b1 00 00 00       	jmp    c0015f9a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ee9:	83 ec 0c             	sub    esp,0xc
c0015eec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eee:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015ef2:	56                   	push   esi
c0015ef3:	6a 01                	push   0x1
c0015ef5:	6a 00                	push   0x0
c0015ef7:	6a 00                	push   0x0
c0015ef9:	53                   	push   ebx
c0015efa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015efd:	83 c4 20             	add    esp,0x20
c0015f00:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015f08:	75 0a                	jne    c0015f14 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015f0a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015f12:	74 2c                	je     c0015f40 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015f14:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f1a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f20:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f26:	83 ec 10             	sub    esp,0x10
c0015f29:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f2d:	89 f7                	mov    edi,esi
c0015f2f:	c1 e0 0a             	shl    eax,0xa
c0015f32:	c1 ff 1f             	sar    edi,0x1f
c0015f35:	57                   	push   edi
c0015f36:	56                   	push   esi
c0015f37:	52                   	push   edx
c0015f38:	50                   	push   eax
c0015f39:	e8 ce e5 00 00       	call   c002450c <__udivdi3>
c0015f3e:	eb 5a                	jmp    c0015f9a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015f40:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015f47:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015f4e:	83 e1 7f             	and    ecx,0x7f
c0015f51:	83 e0 7f             	and    eax,0x7f
c0015f54:	01 c1                	add    ecx,eax
c0015f56:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015f5d:	83 e0 7f             	and    eax,0x7f
c0015f60:	01 c1                	add    ecx,eax
c0015f62:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015f69:	83 e0 7f             	and    eax,0x7f
c0015f6c:	00 c1                	add    cl,al
c0015f6e:	74 41                	je     c0015fb1 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015f70:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f76:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f7c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f82:	83 ec 10             	sub    esp,0x10
c0015f85:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f89:	89 f7                	mov    edi,esi
c0015f8b:	c1 e0 0a             	shl    eax,0xa
c0015f8e:	c1 ff 1f             	sar    edi,0x1f
c0015f91:	57                   	push   edi
c0015f92:	56                   	push   esi
c0015f93:	52                   	push   edx
c0015f94:	50                   	push   eax
c0015f95:	e8 72 e5 00 00       	call   c002450c <__udivdi3>
c0015f9a:	83 c4 14             	add    esp,0x14
c0015f9d:	52                   	push   edx
c0015f9e:	50                   	push   eax
c0015f9f:	6a 00                	push   0x0
c0015fa1:	6a 00                	push   0x0
c0015fa3:	53                   	push   ebx
c0015fa4:	e8 53 fe ff ff       	call   c0015dfc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015fa9:	83 c4 20             	add    esp,0x20
c0015fac:	e9 79 01 00 00       	jmp    c001612a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015fb1:	89 f0                	mov    eax,esi
c0015fb3:	31 f6                	xor    esi,esi
c0015fb5:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015fbc:	75 02                	jne    c0015fc0 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015fbe:	89 f1                	mov    ecx,esi
c0015fc0:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015fc7:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015fce:	c1 e2 08             	shl    edx,0x8
c0015fd1:	c1 e7 10             	shl    edi,0x10
c0015fd4:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015fdc:	09 fa                	or     edx,edi
c0015fde:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015fe6:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015fed:	83 c0 10             	add    eax,0x10
c0015ff0:	09 fa                	or     edx,edi
c0015ff2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015ff9:	c1 e7 18             	shl    edi,0x18
c0015ffc:	09 fa                	or     edx,edi
c0015ffe:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016005:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016009:	c1 e7 10             	shl    edi,0x10
c001600c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016013:	c1 e2 08             	shl    edx,0x8
c0016016:	09 fa                	or     edx,edi
c0016018:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001601f:	09 fa                	or     edx,edi
c0016021:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016028:	c1 e7 18             	shl    edi,0x18
c001602b:	09 fa                	or     edx,edi
c001602d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016031:	46                   	inc    esi
c0016032:	83 fe 04             	cmp    esi,0x4
c0016035:	0f 85 7a ff ff ff    	jne    c0015fb5 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001603b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603f:	83 f0 01             	xor    eax,0x1
c0016042:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016046:	75 57                	jne    c001609f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016048:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001604c:	83 f0 01             	xor    eax,0x1
c001604f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016053:	75 4a                	jne    c001609f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016055:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016059:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016061:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016069:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001606f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016075:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001607b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001607f:	89 f7                	mov    edi,esi
c0016081:	c1 e0 0a             	shl    eax,0xa
c0016084:	c1 ff 1f             	sar    edi,0x1f
c0016087:	57                   	push   edi
c0016088:	56                   	push   esi
c0016089:	52                   	push   edx
c001608a:	50                   	push   eax
c001608b:	e8 7c e4 00 00       	call   c002450c <__udivdi3>
c0016090:	83 c4 10             	add    esp,0x10
c0016093:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016097:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001609b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001609f:	84 c9                	test   cl,cl
c00160a1:	74 53                	je     c00160f6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00160a3:	0f b6 c9             	movzx  ecx,cl
c00160a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160ae:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00160b2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00160b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00160be:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00160c2:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00160c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00160ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160d6:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00160da:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00160de:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00160e2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00160e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00160ea:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00160ee:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00160f2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00160f6:	31 ed                	xor    ebp,ebp
c00160f8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00160fc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016100:	89 f8                	mov    eax,edi
c0016102:	09 f0                	or     eax,esi
c0016104:	74 1e                	je     c0016124 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016106:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001610a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001610e:	89 d1                	mov    ecx,edx
c0016110:	09 c1                	or     ecx,eax
c0016112:	74 10                	je     c0016124 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016114:	83 ec 0c             	sub    esp,0xc
c0016117:	57                   	push   edi
c0016118:	56                   	push   esi
c0016119:	52                   	push   edx
c001611a:	50                   	push   eax
c001611b:	53                   	push   ebx
c001611c:	e8 db fc ff ff       	call   c0015dfc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016121:	83 c4 20             	add    esp,0x20
c0016124:	45                   	inc    ebp
c0016125:	83 fd 04             	cmp    ebp,0x4
c0016128:	75 ce                	jne    c00160f8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001612a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016130:	5b                   	pop    ebx
c0016131:	5e                   	pop    esi
c0016132:	5f                   	pop    edi
c0016133:	5d                   	pop    ebp
c0016134:	c3                   	ret    
c0016135:	90                   	nop

c0016136 <Serial::Serial(char const*)>:
c0016136:	83 ec 0c             	sub    esp,0xc
c0016139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613d:	83 ec 08             	sub    esp,0x8
c0016140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016144:	50                   	push   eax
c0016145:	e8 22 db ff ff       	call   c0013c6c <Device::Device(char const*)>
c001614a:	83 c4 10             	add    esp,0x10
c001614d:	ba 88 8b 02 c0       	mov    edx,0xc0028b88
c0016152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016156:	89 10                	mov    DWORD PTR [eax],edx
c0016158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001615c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016166:	90                   	nop
c0016167:	83 c4 0c             	add    esp,0xc
c001616a:	c3                   	ret    
c001616b:	90                   	nop

c001616c <Serial::~Serial()>:
c001616c:	83 ec 0c             	sub    esp,0xc
c001616f:	ba 88 8b 02 c0       	mov    edx,0xc0028b88
c0016174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016178:	89 10                	mov    DWORD PTR [eax],edx
c001617a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001617e:	83 ec 0c             	sub    esp,0xc
c0016181:	50                   	push   eax
c0016182:	e8 c7 d7 ff ff       	call   c001394e <Device::~Device()>
c0016187:	83 c4 10             	add    esp,0x10
c001618a:	90                   	nop
c001618b:	83 c4 0c             	add    esp,0xc
c001618e:	c3                   	ret    
c001618f:	90                   	nop

c0016190 <Serial::~Serial()>:
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	83 ec 0c             	sub    esp,0xc
c0016196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001619a:	e8 cd ff ff ff       	call   c001616c <Serial::~Serial()>
c001619f:	83 c4 10             	add    esp,0x10
c00161a2:	83 ec 08             	sub    esp,0x8
c00161a5:	68 58 01 00 00       	push   0x158
c00161aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ae:	e8 fa c3 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00161b3:	83 c4 10             	add    esp,0x10
c00161b6:	83 c4 0c             	add    esp,0xc
c00161b9:	c3                   	ret    

c00161ba <Timer::Timer(char const*)>:
c00161ba:	83 ec 0c             	sub    esp,0xc
c00161bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c1:	83 ec 08             	sub    esp,0x8
c00161c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161c8:	50                   	push   eax
c00161c9:	e8 9e da ff ff       	call   c0013c6c <Device::Device(char const*)>
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	ba cc 8b 02 c0       	mov    edx,0xc0028bcc
c00161d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161da:	89 10                	mov    DWORD PTR [eax],edx
c00161dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e0:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00161ea:	90                   	nop
c00161eb:	83 c4 0c             	add    esp,0xc
c00161ee:	c3                   	ret    
c00161ef:	90                   	nop

c00161f0 <Timer::~Timer()>:
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	ba cc 8b 02 c0       	mov    edx,0xc0028bcc
c00161f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161fc:	89 10                	mov    DWORD PTR [eax],edx
c00161fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016202:	83 ec 0c             	sub    esp,0xc
c0016205:	50                   	push   eax
c0016206:	e8 43 d7 ff ff       	call   c001394e <Device::~Device()>
c001620b:	83 c4 10             	add    esp,0x10
c001620e:	90                   	nop
c001620f:	83 c4 0c             	add    esp,0xc
c0016212:	c3                   	ret    
c0016213:	90                   	nop

c0016214 <Timer::~Timer()>:
c0016214:	83 ec 0c             	sub    esp,0xc
c0016217:	83 ec 0c             	sub    esp,0xc
c001621a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001621e:	e8 cd ff ff ff       	call   c00161f0 <Timer::~Timer()>
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	83 ec 08             	sub    esp,0x8
c0016229:	68 5c 01 00 00       	push   0x15c
c001622e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016232:	e8 76 c3 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0016237:	83 c4 10             	add    esp,0x10
c001623a:	83 c4 0c             	add    esp,0xc
c001623d:	c3                   	ret    

c001623e <Timer::read()>:
c001623e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016242:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016248:	c3                   	ret    

c0016249 <timerHandler(unsigned long long)>:
c0016249:	55                   	push   ebp
c001624a:	57                   	push   edi
c001624b:	56                   	push   esi
c001624c:	53                   	push   ebx
c001624d:	83 ec 0c             	sub    esp,0xc
c0016250:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016254:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016258:	01 35 b0 be 02 c0    	add    DWORD PTR ds:0xc002beb0,esi
c001625e:	11 3d b4 be 02 c0    	adc    DWORD PTR ds:0xc002beb4,edi
c0016264:	80 3d 4d b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b84d,0x0
c001626b:	0f 84 07 01 00 00    	je     c0016378 <timerHandler(unsigned long long)+0x12f>
c0016271:	e8 4e 5f 00 00       	call   c001c1c4 <lockStuff()>
c0016276:	83 ec 0c             	sub    esp,0xc
c0016279:	68 3c cd 02 c0       	push   0xc002cd3c
c001627e:	e8 fb 02 01 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016283:	c7 04 24 3c cd 02 c0 	mov    DWORD PTR [esp],0xc002cd3c
c001628a:	89 c3                	mov    ebx,eax
c001628c:	e8 f5 02 01 00       	call   c0026586 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016291:	83 c4 10             	add    esp,0x10
c0016294:	84 c0                	test   al,al
c0016296:	74 60                	je     c00162f8 <timerHandler(unsigned long long)+0xaf>
c0016298:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001629e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00162a1:	85 c0                	test   eax,eax
c00162a3:	0f 85 91 00 00 00    	jne    c001633a <timerHandler(unsigned long long)+0xf1>
c00162a9:	e9 be 00 00 00       	jmp    c001636c <timerHandler(unsigned long long)+0x123>
c00162ae:	83 ec 0c             	sub    esp,0xc
c00162b1:	55                   	push   ebp
c00162b2:	e8 fd 64 00 00       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	39 eb                	cmp    ebx,ebp
c00162bc:	75 12                	jne    c00162d0 <timerHandler(unsigned long long)+0x87>
c00162be:	83 ec 0c             	sub    esp,0xc
c00162c1:	68 3c cd 02 c0       	push   0xc002cd3c
c00162c6:	e8 b3 02 01 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162cb:	89 c3                	mov    ebx,eax
c00162cd:	83 c4 10             	add    esp,0x10
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	68 3c cd 02 c0       	push   0xc002cd3c
c00162d8:	e8 a9 02 01 00       	call   c0026586 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	84 c0                	test   al,al
c00162e2:	75 b4                	jne    c0016298 <timerHandler(unsigned long long)+0x4f>
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	68 3c cd 02 c0       	push   0xc002cd3c
c00162ec:	e8 8d 02 01 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	39 d8                	cmp    eax,ebx
c00162f6:	74 a0                	je     c0016298 <timerHandler(unsigned long long)+0x4f>
c00162f8:	83 ec 0c             	sub    esp,0xc
c00162fb:	68 3c cd 02 c0       	push   0xc002cd3c
c0016300:	e8 79 02 01 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016305:	c7 04 24 3c cd 02 c0 	mov    DWORD PTR [esp],0xc002cd3c
c001630c:	89 c5                	mov    ebp,eax
c001630e:	e8 8f 02 01 00       	call   c00265a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016313:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016316:	83 c4 10             	add    esp,0x10
c0016319:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001631c:	39 15 b0 be 02 c0    	cmp    DWORD PTR ds:0xc002beb0,edx
c0016322:	a1 b4 be 02 c0       	mov    eax,ds:0xc002beb4
c0016327:	19 c8                	sbb    eax,ecx
c0016329:	73 83                	jae    c00162ae <timerHandler(unsigned long long)+0x65>
c001632b:	50                   	push   eax
c001632c:	50                   	push   eax
c001632d:	55                   	push   ebp
c001632e:	68 3c cd 02 c0       	push   0xc002cd3c
c0016333:	e8 18 03 01 00       	call   c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016338:	eb 93                	jmp    c00162cd <timerHandler(unsigned long long)+0x84>
c001633a:	80 3d 4c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b84c,0x0
c0016341:	74 29                	je     c001636c <timerHandler(unsigned long long)+0x123>
c0016343:	39 c6                	cmp    esi,eax
c0016345:	bb 00 00 00 00       	mov    ebx,0x0
c001634a:	19 df                	sbb    edi,ebx
c001634c:	72 19                	jb     c0016367 <timerHandler(unsigned long long)+0x11e>
c001634e:	e8 4a 5e 00 00       	call   c001c19d <lockScheduler()>
c0016353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016358:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001635b:	e8 78 61 00 00       	call   c001c4d8 <schedule()>
c0016360:	e8 3a 5e 00 00       	call   c001c19f <unlockScheduler()>
c0016365:	eb 05                	jmp    c001636c <timerHandler(unsigned long long)+0x123>
c0016367:	29 f0                	sub    eax,esi
c0016369:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001636c:	83 c4 0c             	add    esp,0xc
c001636f:	5b                   	pop    ebx
c0016370:	5e                   	pop    esi
c0016371:	5f                   	pop    edi
c0016372:	5d                   	pop    ebp
c0016373:	e9 e5 61 00 00       	jmp    c001c55d <unlockStuff()>
c0016378:	83 c4 0c             	add    esp,0xc
c001637b:	5b                   	pop    ebx
c001637c:	5e                   	pop    esi
c001637d:	5f                   	pop    edi
c001637e:	5d                   	pop    ebp
c001637f:	c3                   	ret    

c0016380 <setupTimer(int)>:
c0016380:	57                   	push   edi
c0016381:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0016386:	56                   	push   esi
c0016387:	53                   	push   ebx
c0016388:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001638c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016392:	83 ec 0c             	sub    esp,0xc
c0016395:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001639b:	e8 c8 d9 ff ff       	call   c0013d68 <Device::getName()>
c00163a0:	83 c4 10             	add    esp,0x10
c00163a3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00163a6:	0f 85 8d 00 00 00    	jne    c0016439 <setupTimer(int)+0xb9>
c00163ac:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00163b1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00163b8:	74 7f                	je     c0016439 <setupTimer(int)+0xb9>
c00163ba:	83 ec 0c             	sub    esp,0xc
c00163bd:	68 5c 01 00 00       	push   0x15c
c00163c2:	e8 f9 90 ff ff       	call   c000f4c0 <malloc>
c00163c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00163ca:	89 c3                	mov    ebx,eax
c00163cc:	e8 1f dd 00 00       	call   c00240f0 <PIT::PIT()>
c00163d1:	59                   	pop    ecx
c00163d2:	5f                   	pop    edi
c00163d3:	53                   	push   ebx
c00163d4:	ff 35 48 b8 02 c0    	push   DWORD PTR ds:0xc002b848
c00163da:	e8 9d d6 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c00163df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163e1:	6a 00                	push   0x0
c00163e3:	6a 00                	push   0x0
c00163e5:	56                   	push   esi
c00163e6:	53                   	push   ebx
c00163e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163ea:	83 c4 14             	add    esp,0x14
c00163ed:	68 60 01 00 00       	push   0x160
c00163f2:	e8 c9 90 ff ff       	call   c000f4c0 <malloc>
c00163f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00163fa:	89 c7                	mov    edi,eax
c00163fc:	e8 9f db 00 00       	call   c0023fa0 <APICTimer::APICTimer()>
c0016401:	6a 00                	push   0x0
c0016403:	6a 00                	push   0x0
c0016405:	56                   	push   esi
c0016406:	57                   	push   edi
c0016407:	e8 96 da 00 00       	call   c0023ea2 <APICTimer::open(int, int, void*)>
c001640c:	83 c4 20             	add    esp,0x20
c001640f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016411:	6a 00                	push   0x0
c0016413:	6a 00                	push   0x0
c0016415:	6a 00                	push   0x0
c0016417:	53                   	push   ebx
c0016418:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001641b:	58                   	pop    eax
c001641c:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0016421:	5a                   	pop    edx
c0016422:	57                   	push   edi
c0016423:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016429:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001642f:	e8 48 d6 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0016434:	83 c4 10             	add    esp,0x10
c0016437:	eb 33                	jmp    c001646c <setupTimer(int)+0xec>
c0016439:	83 ec 0c             	sub    esp,0xc
c001643c:	68 5c 01 00 00       	push   0x15c
c0016441:	e8 7a 90 ff ff       	call   c000f4c0 <malloc>
c0016446:	89 04 24             	mov    DWORD PTR [esp],eax
c0016449:	89 c3                	mov    ebx,eax
c001644b:	e8 a0 dc 00 00       	call   c00240f0 <PIT::PIT()>
c0016450:	58                   	pop    eax
c0016451:	5a                   	pop    edx
c0016452:	53                   	push   ebx
c0016453:	ff 35 48 b8 02 c0    	push   DWORD PTR ds:0xc002b848
c0016459:	e8 1e d6 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c001645e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016460:	6a 00                	push   0x0
c0016462:	6a 00                	push   0x0
c0016464:	56                   	push   esi
c0016465:	53                   	push   ebx
c0016466:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016469:	83 c4 20             	add    esp,0x20
c001646c:	89 d8                	mov    eax,ebx
c001646e:	5b                   	pop    ebx
c001646f:	5e                   	pop    esi
c0016470:	5f                   	pop    edi
c0016471:	c3                   	ret    

c0016472 <VCache::VCache(PhysicalDisk*)>:
c0016472:	53                   	push   ebx
c0016473:	83 ec 18             	sub    esp,0x18
c0016476:	ba fc 8b 02 c0       	mov    edx,0xc0028bfc
c001647b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001647f:	89 10                	mov    DWORD PTR [eax],edx
c0016481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016485:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001648c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016490:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001649b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00164a2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00164a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164ad:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00164b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00164bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00164c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164ca:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00164ce:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00164d6:	83 ec 0c             	sub    esp,0xc
c00164d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164dd:	e8 de 8f ff ff       	call   c000f4c0 <malloc>
c00164e2:	83 c4 10             	add    esp,0x10
c00164e5:	89 c3                	mov    ebx,eax
c00164e7:	83 ec 0c             	sub    esp,0xc
c00164ea:	53                   	push   ebx
c00164eb:	e8 cc 5d 00 00       	call   c001c2bc <Mutex::Mutex()>
c00164f0:	83 c4 10             	add    esp,0x10
c00164f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00164fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016502:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016509:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016510:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016514:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001651a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016521:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016525:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001652b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016531:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016535:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016538:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001653b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653f:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016543:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016547:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001654d:	c1 e0 06             	shl    eax,0x6
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	50                   	push   eax
c0016554:	e8 67 8f ff ff       	call   c000f4c0 <malloc>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	89 c2                	mov    edx,eax
c001655e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016562:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016565:	90                   	nop
c0016566:	83 c4 18             	add    esp,0x18
c0016569:	5b                   	pop    ebx
c001656a:	c3                   	ret    
c001656b:	90                   	nop

c001656c <VCache::writeWriteBuffer()>:
c001656c:	53                   	push   ebx
c001656d:	83 ec 14             	sub    esp,0x14
c0016570:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016574:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016577:	8b 10                	mov    edx,DWORD PTR [eax]
c0016579:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001657c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001657f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016582:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016585:	50                   	push   eax
c0016586:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016589:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016590:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016597:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001659b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00165a2:	83 c4 28             	add    esp,0x28
c00165a5:	5b                   	pop    ebx
c00165a6:	c3                   	ret    
c00165a7:	90                   	nop

c00165a8 <VCache::~VCache()>:
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	ba fc 8b 02 c0       	mov    edx,0xc0028bfc
c00165b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b4:	89 10                	mov    DWORD PTR [eax],edx
c00165b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00165bd:	84 c0                	test   al,al
c00165bf:	74 0f                	je     c00165d0 <VCache::~VCache()+0x28>
c00165c1:	83 ec 0c             	sub    esp,0xc
c00165c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165c8:	e8 9f ff ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	50                   	push   eax
c00165db:	e8 f0 8e ff ff       	call   c000f4d0 <free>
c00165e0:	83 c4 10             	add    esp,0x10
c00165e3:	90                   	nop
c00165e4:	83 c4 0c             	add    esp,0xc
c00165e7:	c3                   	ret    

c00165e8 <VCache::~VCache()>:
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	83 ec 0c             	sub    esp,0xc
c00165ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165f2:	e8 b1 ff ff ff       	call   c00165a8 <VCache::~VCache()>
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	83 ec 08             	sub    esp,0x8
c00165fd:	6a 30                	push   0x30
c00165ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016603:	e8 a5 bf ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0016608:	83 c4 10             	add    esp,0x10
c001660b:	83 c4 0c             	add    esp,0xc
c001660e:	c3                   	ret    
c001660f:	90                   	nop

c0016610 <VCache::write(unsigned long long, int, void*)>:
c0016610:	55                   	push   ebp
c0016611:	57                   	push   edi
c0016612:	56                   	push   esi
c0016613:	53                   	push   ebx
c0016614:	83 ec 28             	sub    esp,0x28
c0016617:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001661b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001661f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016623:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016627:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001662a:	e8 ef 60 00 00       	call   c001c71e <Semaphore::acquire()>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016636:	74 66                	je     c001669e <VCache::write(unsigned long long, int, void*)+0x8e>
c0016638:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001663b:	99                   	cdq    
c001663c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016640:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016643:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016646:	89 c1                	mov    ecx,eax
c0016648:	89 d0                	mov    eax,edx
c001664a:	31 f1                	xor    ecx,esi
c001664c:	31 f8                	xor    eax,edi
c001664e:	89 ca                	mov    edx,ecx
c0016650:	09 c2                	or     edx,eax
c0016652:	75 3e                	jne    c0016692 <VCache::write(unsigned long long, int, void*)+0x82>
c0016654:	83 fd 01             	cmp    ebp,0x1
c0016657:	75 39                	jne    c0016692 <VCache::write(unsigned long long, int, void*)+0x82>
c0016659:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001665c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016662:	51                   	push   ecx
c0016663:	50                   	push   eax
c0016664:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016668:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001666c:	0f af c8             	imul   ecx,eax
c001666f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016672:	51                   	push   ecx
c0016673:	e8 cd 9f fe ff       	call   c0000645 <memcpy>
c0016678:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	40                   	inc    eax
c001667f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016682:	83 f8 40             	cmp    eax,0x40
c0016685:	75 57                	jne    c00166de <VCache::write(unsigned long long, int, void*)+0xce>
c0016687:	83 ec 0c             	sub    esp,0xc
c001668a:	53                   	push   ebx
c001668b:	e8 dc fe ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c0016690:	eb 34                	jmp    c00166c6 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016692:	83 ec 0c             	sub    esp,0xc
c0016695:	53                   	push   ebx
c0016696:	e8 d1 fe ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c001669b:	83 c4 10             	add    esp,0x10
c001669e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166a1:	83 fd 3f             	cmp    ebp,0x3f
c00166a4:	7f 25                	jg     c00166cb <VCache::write(unsigned long long, int, void*)+0xbb>
c00166a6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00166a9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00166ac:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00166af:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00166b3:	52                   	push   edx
c00166b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00166ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166c1:	e8 7f 9f fe ff       	call   c0000645 <memcpy>
c00166c6:	83 c4 10             	add    esp,0x10
c00166c9:	eb 13                	jmp    c00166de <VCache::write(unsigned long long, int, void*)+0xce>
c00166cb:	83 ec 0c             	sub    esp,0xc
c00166ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00166d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00166d4:	55                   	push   ebp
c00166d5:	57                   	push   edi
c00166d6:	56                   	push   esi
c00166d7:	50                   	push   eax
c00166d8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00166db:	83 c4 20             	add    esp,0x20
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00166e4:	e8 bd 65 00 00       	call   c001cca6 <Semaphore::release()>
c00166e9:	83 c4 2c             	add    esp,0x2c
c00166ec:	31 c0                	xor    eax,eax
c00166ee:	5b                   	pop    ebx
c00166ef:	5e                   	pop    esi
c00166f0:	5f                   	pop    edi
c00166f1:	5d                   	pop    ebp
c00166f2:	c3                   	ret    
c00166f3:	90                   	nop

c00166f4 <VCache::read(unsigned long long, int, void*)>:
c00166f4:	57                   	push   edi
c00166f5:	56                   	push   esi
c00166f6:	53                   	push   ebx
c00166f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00166ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016703:	83 ec 0c             	sub    esp,0xc
c0016706:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016709:	e8 10 60 00 00       	call   c001c71e <Semaphore::acquire()>
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016715:	74 0c                	je     c0016723 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016717:	83 ec 0c             	sub    esp,0xc
c001671a:	53                   	push   ebx
c001671b:	e8 4c fe ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c0016720:	83 c4 10             	add    esp,0x10
c0016723:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	8b 10                	mov    edx,DWORD PTR [eax]
c001672b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001672f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016733:	57                   	push   edi
c0016734:	56                   	push   esi
c0016735:	50                   	push   eax
c0016736:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016739:	83 c4 14             	add    esp,0x14
c001673c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001673f:	e8 62 65 00 00       	call   c001cca6 <Semaphore::release()>
c0016744:	83 c4 10             	add    esp,0x10
c0016747:	31 c0                	xor    eax,eax
c0016749:	5b                   	pop    ebx
c001674a:	5e                   	pop    esi
c001674b:	5f                   	pop    edi
c001674c:	c3                   	ret    
c001674d:	90                   	nop

c001674e <Video::putrect(int, int, int, int, unsigned int)>:
c001674e:	55                   	push   ebp
c001674f:	57                   	push   edi
c0016750:	56                   	push   esi
c0016751:	53                   	push   ebx
c0016752:	83 ec 1c             	sub    esp,0x1c
c0016755:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016759:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001675d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016761:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016765:	01 e8                	add    eax,ebp
c0016767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001676b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001676f:	01 df                	add    edi,ebx
c0016771:	39 fb                	cmp    ebx,edi
c0016773:	7d 1b                	jge    c0016790 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016775:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016779:	7d 12                	jge    c001678d <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001677b:	8b 16                	mov    edx,DWORD PTR [esi]
c001677d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016781:	53                   	push   ebx
c0016782:	55                   	push   ebp
c0016783:	45                   	inc    ebp
c0016784:	56                   	push   esi
c0016785:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016788:	83 c4 10             	add    esp,0x10
c001678b:	eb e8                	jmp    c0016775 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001678d:	43                   	inc    ebx
c001678e:	eb e1                	jmp    c0016771 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0016790:	83 c4 1c             	add    esp,0x1c
c0016793:	5b                   	pop    ebx
c0016794:	5e                   	pop    esi
c0016795:	5f                   	pop    edi
c0016796:	5d                   	pop    ebp
c0016797:	c3                   	ret    

c0016798 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016798:	55                   	push   ebp
c0016799:	57                   	push   edi
c001679a:	31 ff                	xor    edi,edi
c001679c:	56                   	push   esi
c001679d:	53                   	push   ebx
c001679e:	83 ec 1c             	sub    esp,0x1c
c00167a1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00167a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00167a9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00167b0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00167b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167b9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00167bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00167c1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00167c4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00167c8:	01 f9                	add    ecx,edi
c00167ca:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00167ce:	7d 2f                	jge    c00167ff <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00167d0:	31 f6                	xor    esi,esi
c00167d2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00167d6:	01 f2                	add    edx,esi
c00167d8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00167dc:	7d 1a                	jge    c00167f8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00167de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00167e1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00167e4:	46                   	inc    esi
c00167e5:	51                   	push   ecx
c00167e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167ea:	52                   	push   edx
c00167eb:	55                   	push   ebp
c00167ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167f6:	eb da                	jmp    c00167d2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00167f8:	47                   	inc    edi
c00167f9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00167fd:	eb c5                	jmp    c00167c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00167ff:	83 c4 1c             	add    esp,0x1c
c0016802:	5b                   	pop    ebx
c0016803:	5e                   	pop    esi
c0016804:	5f                   	pop    edi
c0016805:	5d                   	pop    ebp
c0016806:	c3                   	ret    
c0016807:	90                   	nop

c0016808 <Video::blit(unsigned int*, int, int, int, int)>:
c0016808:	55                   	push   ebp
c0016809:	57                   	push   edi
c001680a:	56                   	push   esi
c001680b:	53                   	push   ebx
c001680c:	83 ec 1c             	sub    esp,0x1c
c001680f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016813:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016817:	85 c0                	test   eax,eax
c0016819:	79 02                	jns    c001681d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001681b:	31 c0                	xor    eax,eax
c001681d:	c1 e0 02             	shl    eax,0x2
c0016820:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016828:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001682c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016830:	39 d8                	cmp    eax,ebx
c0016832:	7e 49                	jle    c001687d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016834:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001683a:	7c 41                	jl     c001687d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001683c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016844:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016848:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001684c:	39 f9                	cmp    ecx,edi
c001684e:	7e 22                	jle    c0016872 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016850:	83 c5 04             	add    ebp,0x4
c0016853:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016859:	7c 14                	jl     c001686f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001685b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001685d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016860:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016864:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016868:	56                   	push   esi
c0016869:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001686c:	83 c4 10             	add    esp,0x10
c001686f:	47                   	inc    edi
c0016870:	eb d2                	jmp    c0016844 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016876:	43                   	inc    ebx
c0016877:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001687b:	eb ab                	jmp    c0016828 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001687d:	83 c4 1c             	add    esp,0x1c
c0016880:	5b                   	pop    ebx
c0016881:	5e                   	pop    esi
c0016882:	5f                   	pop    edi
c0016883:	5d                   	pop    ebp
c0016884:	c3                   	ret    
c0016885:	90                   	nop

c0016886 <Video::clearScreen(unsigned int)>:
c0016886:	57                   	push   edi
c0016887:	56                   	push   esi
c0016888:	53                   	push   ebx
c0016889:	31 db                	xor    ebx,ebx
c001688b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001688f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016895:	7e 1f                	jle    c00168b6 <Video::clearScreen(unsigned int)+0x30>
c0016897:	31 ff                	xor    edi,edi
c0016899:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001689f:	7e 12                	jle    c00168b3 <Video::clearScreen(unsigned int)+0x2d>
c00168a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00168a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00168a7:	53                   	push   ebx
c00168a8:	57                   	push   edi
c00168a9:	47                   	inc    edi
c00168aa:	56                   	push   esi
c00168ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00168ae:	83 c4 10             	add    esp,0x10
c00168b1:	eb e6                	jmp    c0016899 <Video::clearScreen(unsigned int)+0x13>
c00168b3:	43                   	inc    ebx
c00168b4:	eb d9                	jmp    c001688f <Video::clearScreen(unsigned int)+0x9>
c00168b6:	5b                   	pop    ebx
c00168b7:	5e                   	pop    esi
c00168b8:	5f                   	pop    edi
c00168b9:	c3                   	ret    

c00168ba <Video::putpixel(int, int, unsigned int)>:
c00168ba:	c7 44 24 04 04 8c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028c04
c00168c2:	e9 c6 bd ff ff       	jmp    c001268d <Dbg::kprintf(char const*, ...)>
c00168c7:	90                   	nop

c00168c8 <Video::Video(char const*)>:
c00168c8:	83 ec 0c             	sub    esp,0xc
c00168cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cf:	83 ec 08             	sub    esp,0x8
c00168d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168d6:	50                   	push   eax
c00168d7:	e8 90 d3 ff ff       	call   c0013c6c <Device::Device(char const*)>
c00168dc:	83 c4 10             	add    esp,0x10
c00168df:	ba 78 8c 02 c0       	mov    edx,0xc0028c78
c00168e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e8:	89 10                	mov    DWORD PTR [eax],edx
c00168ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ee:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00168f8:	90                   	nop
c00168f9:	83 c4 0c             	add    esp,0xc
c00168fc:	c3                   	ret    
c00168fd:	90                   	nop

c00168fe <Video::~Video()>:
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	ba 78 8c 02 c0       	mov    edx,0xc0028c78
c0016906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001690a:	89 10                	mov    DWORD PTR [eax],edx
c001690c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	50                   	push   eax
c0016914:	e8 35 d0 ff ff       	call   c001394e <Device::~Device()>
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	90                   	nop
c001691d:	83 c4 0c             	add    esp,0xc
c0016920:	c3                   	ret    
c0016921:	90                   	nop

c0016922 <Video::~Video()>:
c0016922:	83 ec 0c             	sub    esp,0xc
c0016925:	83 ec 0c             	sub    esp,0xc
c0016928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692c:	e8 cd ff ff ff       	call   c00168fe <Video::~Video()>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	83 ec 08             	sub    esp,0x8
c0016937:	68 64 01 00 00       	push   0x164
c001693c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016940:	e8 68 bc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0016945:	83 c4 10             	add    esp,0x10
c0016948:	83 c4 0c             	add    esp,0xc
c001694b:	c3                   	ret    

c001694c <Video::isMonochrome()>:
c001694c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016950:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016956:	c3                   	ret    
c0016957:	90                   	nop

c0016958 <Video::getWidth()>:
c0016958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001695c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016962:	c3                   	ret    
c0016963:	90                   	nop

c0016964 <Video::getHeight()>:
c0016964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016968:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001696e:	c3                   	ret    
c001696f:	90                   	nop

c0016970 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016970:	55                   	push   ebp
c0016971:	57                   	push   edi
c0016972:	56                   	push   esi
c0016973:	53                   	push   ebx
c0016974:	83 ec 2c             	sub    esp,0x2c
c0016977:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001697b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001697f:	83 f8 01             	cmp    eax,0x1
c0016982:	19 c9                	sbb    ecx,ecx
c0016984:	31 db                	xor    ebx,ebx
c0016986:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001698a:	89 cd                	mov    ebp,ecx
c001698c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016994:	f7 d5                	not    ebp
c0016996:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001699c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00169a0:	01 d8                	add    eax,ebx
c00169a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169a6:	56                   	push   esi
c00169a7:	e8 b8 ff ff ff       	call   c0016964 <Video::getHeight()>
c00169ac:	59                   	pop    ecx
c00169ad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00169b1:	7e 70                	jle    c0016a23 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00169b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00169b7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00169bb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00169be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00169c6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00169cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00169d1:	89 f8                	mov    eax,edi
c00169d3:	83 c0 20             	add    eax,0x20
c00169d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00169da:	56                   	push   esi
c00169db:	e8 78 ff ff ff       	call   c0016958 <Video::getWidth()>
c00169e0:	5a                   	pop    edx
c00169e1:	39 c7                	cmp    edi,eax
c00169e3:	7d 34                	jge    c0016a19 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00169e5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00169ea:	74 05                	je     c00169f1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00169ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00169ee:	55                   	push   ebp
c00169ef:	eb 0d                	jmp    c00169fe <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00169f1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00169f6:	74 12                	je     c0016a0a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00169f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00169fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a02:	57                   	push   edi
c0016a03:	56                   	push   esi
c0016a04:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016a0e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016a12:	47                   	inc    edi
c0016a13:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016a17:	75 c1                	jne    c00169da <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016a19:	43                   	inc    ebx
c0016a1a:	83 fb 20             	cmp    ebx,0x20
c0016a1d:	0f 85 79 ff ff ff    	jne    c001699c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016a23:	83 c4 2c             	add    esp,0x2c
c0016a26:	5b                   	pop    ebx
c0016a27:	5e                   	pop    esi
c0016a28:	5f                   	pop    edi
c0016a29:	5d                   	pop    ebp
c0016a2a:	c3                   	ret    
c0016a2b:	90                   	nop

c0016a2c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016a2c:	55                   	push   ebp
c0016a2d:	57                   	push   edi
c0016a2e:	56                   	push   esi
c0016a2f:	53                   	push   ebx
c0016a30:	83 ec 28             	sub    esp,0x28
c0016a33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016a37:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016a3b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016a3f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016a43:	c1 e7 08             	shl    edi,0x8
c0016a46:	01 c7                	add    edi,eax
c0016a48:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016a4c:	c1 e0 08             	shl    eax,0x8
c0016a4f:	01 d0                	add    eax,edx
c0016a51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a59:	0f af c7             	imul   eax,edi
c0016a5c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016a63:	50                   	push   eax
c0016a64:	e8 57 8a ff ff       	call   c000f4c0 <malloc>
c0016a69:	83 c4 10             	add    esp,0x10
c0016a6c:	89 c5                	mov    ebp,eax
c0016a6e:	85 c0                	test   eax,eax
c0016a70:	75 15                	jne    c0016a87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016a72:	83 ec 0c             	sub    esp,0xc
c0016a75:	68 13 8c 02 c0       	push   0xc0028c13
c0016a7a:	e8 0e bc ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016a7f:	83 c4 10             	add    esp,0x10
c0016a82:	e9 1c 01 00 00       	jmp    c0016ba3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016a87:	be 12 00 00 00       	mov    esi,0x12
c0016a8c:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016a90:	74 11                	je     c0016aa3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016a92:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016a96:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016a9a:	c1 fe 03             	sar    esi,0x3
c0016a9d:	0f af f0             	imul   esi,eax
c0016aa0:	83 c6 12             	add    esi,0x12
c0016aa3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016aa7:	74 04                	je     c0016aad <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016aa9:	85 ff                	test   edi,edi
c0016aab:	75 12                	jne    c0016abf <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016aad:	83 ec 0c             	sub    esp,0xc
c0016ab0:	68 2a 8c 02 c0       	push   0xc0028c2a
c0016ab5:	e8 d3 bb ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016aba:	e9 ce 00 00 00       	jmp    c0016b8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016abf:	52                   	push   edx
c0016ac0:	52                   	push   edx
c0016ac1:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016ac5:	50                   	push   eax
c0016ac6:	68 3f 8c 02 c0       	push   0xc0028c3f
c0016acb:	e8 bd bb ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016ad0:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016ad4:	83 c4 10             	add    esp,0x10
c0016ad7:	80 fa 02             	cmp    dl,0x2
c0016ada:	0f 85 98 00 00 00    	jne    c0016b78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016ae0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ae5:	75 10                	jne    c0016af7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ae7:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016aeb:	75 0a                	jne    c0016af7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016aed:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016af0:	83 e8 18             	sub    eax,0x18
c0016af3:	a8 f7                	test   al,0xf7
c0016af5:	74 0a                	je     c0016b01 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016af7:	83 ec 0c             	sub    esp,0xc
c0016afa:	68 4c 8c 02 c0       	push   0xc0028c4c
c0016aff:	eb 7f                	jmp    c0016b80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016b01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b09:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b15:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016b1d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016b21:	75 0c                	jne    c0016b2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016b23:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016b28:	c1 e0 18             	shl    eax,0x18
c0016b2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b2f:	41                   	inc    ecx
c0016b30:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016b35:	c1 e2 10             	shl    edx,0x10
c0016b38:	89 d0                	mov    eax,edx
c0016b3a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016b3f:	c1 e2 08             	shl    edx,0x8
c0016b42:	09 c2                	or     edx,eax
c0016b44:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016b48:	09 c2                	or     edx,eax
c0016b4a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016b4e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016b52:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016b56:	c1 f8 03             	sar    eax,0x3
c0016b59:	01 c6                	add    esi,eax
c0016b5b:	89 c8                	mov    eax,ecx
c0016b5d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016b61:	39 c7                	cmp    edi,eax
c0016b63:	7f b0                	jg     c0016b15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016b65:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016b69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b6d:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016b70:	7e 22                	jle    c0016b94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016b72:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016b76:	eb 99                	jmp    c0016b11 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016b78:	50                   	push   eax
c0016b79:	50                   	push   eax
c0016b7a:	52                   	push   edx
c0016b7b:	68 5a 8c 02 c0       	push   0xc0028c5a
c0016b80:	e8 08 bb ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016b85:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b88:	e8 43 89 ff ff       	call   c000f4d0 <free>
c0016b8d:	83 c4 10             	add    esp,0x10
c0016b90:	31 ed                	xor    ebp,ebp
c0016b92:	eb 0f                	jmp    c0016ba3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016b94:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016b9b:	89 38                	mov    DWORD PTR [eax],edi
c0016b9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ba1:	89 08                	mov    DWORD PTR [eax],ecx
c0016ba3:	83 c4 1c             	add    esp,0x1c
c0016ba6:	89 e8                	mov    eax,ebp
c0016ba8:	5b                   	pop    ebx
c0016ba9:	5e                   	pop    esi
c0016baa:	5f                   	pop    edi
c0016bab:	5d                   	pop    ebp
c0016bac:	c3                   	ret    
c0016bad:	90                   	nop

c0016bae <Video::putTGA(int, int, unsigned char*, int)>:
c0016bae:	55                   	push   ebp
c0016baf:	57                   	push   edi
c0016bb0:	56                   	push   esi
c0016bb1:	53                   	push   ebx
c0016bb2:	83 ec 28             	sub    esp,0x28
c0016bb5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016bb9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bbd:	50                   	push   eax
c0016bbe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bc2:	50                   	push   eax
c0016bc3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016bc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016bcb:	56                   	push   esi
c0016bcc:	e8 5b fe ff ff       	call   c0016a2c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016bd1:	83 c4 20             	add    esp,0x20
c0016bd4:	85 c0                	test   eax,eax
c0016bd6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016bda:	74 35                	je     c0016c11 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016bdc:	89 c7                	mov    edi,eax
c0016bde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016be2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016be6:	39 d8                	cmp    eax,ebx
c0016be8:	7e 27                	jle    c0016c11 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016bea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016bee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016bf2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016bf6:	39 e8                	cmp    eax,ebp
c0016bf8:	7e 14                	jle    c0016c0e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016bfa:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bfc:	83 c7 04             	add    edi,0x4
c0016bff:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016c02:	53                   	push   ebx
c0016c03:	55                   	push   ebp
c0016c04:	45                   	inc    ebp
c0016c05:	56                   	push   esi
c0016c06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	eb e0                	jmp    c0016bee <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016c0e:	43                   	inc    ebx
c0016c0f:	eb cd                	jmp    c0016bde <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016c11:	83 c4 1c             	add    esp,0x1c
c0016c14:	5b                   	pop    ebx
c0016c15:	5e                   	pop    esi
c0016c16:	5f                   	pop    edi
c0016c17:	5d                   	pop    ebp
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop

c0016c1a <ACPI::close(int, int, void*)>:
c0016c1a:	83 ec 1c             	sub    esp,0x1c
c0016c1d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016c25:	74 0a                	je     c0016c31 <ACPI::close(int, int, void*)+0x17>
c0016c27:	b8 00 00 00 00       	mov    eax,0x0
c0016c2c:	e9 9a 00 00 00       	jmp    c0016ccb <ACPI::close(int, int, void*)+0xb1>
c0016c31:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016c36:	75 37                	jne    c0016c6f <ACPI::close(int, int, void*)+0x55>
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	68 b8 8c 02 c0       	push   0xc0028cb8
c0016c40:	e8 48 ba ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0016c4d:	85 c0                	test   eax,eax
c0016c4f:	74 07                	je     c0016c58 <ACPI::close(int, int, void*)+0x3e>
c0016c51:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0016c56:	ff d0                	call   eax
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	68 8c 8d 02 c0       	push   0xc0028d8c
c0016c60:	e8 f2 24 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c6d:	eb 5c                	jmp    c0016ccb <ACPI::close(int, int, void*)+0xb1>
c0016c6f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016c74:	75 50                	jne    c0016cc6 <ACPI::close(int, int, void*)+0xac>
c0016c76:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0016c7b:	85 c0                	test   eax,eax
c0016c7d:	74 07                	je     c0016c86 <ACPI::close(int, int, void*)+0x6c>
c0016c7f:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0016c84:	ff d0                	call   eax
c0016c86:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016c8b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c90:	83 e0 02             	and    eax,0x2
c0016c93:	74 1c                	je     c0016cb1 <ACPI::close(int, int, void*)+0x97>
c0016c95:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016c9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ca0:	89 c2                	mov    edx,eax
c0016ca2:	ec                   	in     al,dx
c0016ca3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016ca7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016cab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016caf:	eb da                	jmp    c0016c8b <ACPI::close(int, int, void*)+0x71>
c0016cb1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016cb8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016cbd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016cc1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016cc5:	ee                   	out    dx,al
c0016cc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ccb:	83 c4 1c             	add    esp,0x1c
c0016cce:	c3                   	ret    

c0016ccf <findRSDP()>:
c0016ccf:	83 ec 1c             	sub    esp,0x1c
c0016cd2:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0016cd7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016cdd:	83 e0 04             	and    eax,0x4
c0016ce0:	84 c0                	test   al,al
c0016ce2:	75 07                	jne    c0016ceb <findRSDP()+0x1c>
c0016ce4:	b8 00 00 00 00       	mov    eax,0x0
c0016ce9:	eb 6a                	jmp    c0016d55 <findRSDP()+0x86>
c0016ceb:	a1 90 b8 02 c0       	mov    eax,ds:0xc002b890
c0016cf0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016cf5:	7f 1b                	jg     c0016d12 <findRSDP()+0x43>
c0016cf7:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0016cfc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016d02:	83 e2 fb             	and    edx,0xfffffffb
c0016d05:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016d0b:	b8 00 00 00 00       	mov    eax,0x0
c0016d10:	eb 43                	jmp    c0016d55 <findRSDP()+0x86>
c0016d12:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016d1a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016d22:	77 2c                	ja     c0016d50 <findRSDP()+0x81>
c0016d24:	83 ec 04             	sub    esp,0x4
c0016d27:	6a 08                	push   0x8
c0016d29:	68 c5 8c 02 c0       	push   0xc0028cc5
c0016d2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d32:	e8 ab 98 fe ff       	call   c00005e2 <memcmp>
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	85 c0                	test   eax,eax
c0016d3c:	0f 94 c0             	sete   al
c0016d3f:	84 c0                	test   al,al
c0016d41:	74 06                	je     c0016d49 <findRSDP()+0x7a>
c0016d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d47:	eb 0c                	jmp    c0016d55 <findRSDP()+0x86>
c0016d49:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016d4e:	eb ca                	jmp    c0016d1a <findRSDP()+0x4b>
c0016d50:	b8 00 00 00 00       	mov    eax,0x0
c0016d55:	83 c4 1c             	add    esp,0x1c
c0016d58:	c3                   	ret    

c0016d59 <loadACPITables(unsigned char*)>:
c0016d59:	56                   	push   esi
c0016d5a:	53                   	push   ebx
c0016d5b:	83 ec 44             	sub    esp,0x44
c0016d5e:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0016d63:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d69:	83 e0 04             	and    eax,0x4
c0016d6c:	84 c0                	test   al,al
c0016d6e:	0f 84 05 02 00 00    	je     c0016f79 <loadACPITables(unsigned char*)+0x220>
c0016d74:	a0 e0 c0 02 c0       	mov    al,ds:0xc002c0e0
c0016d79:	84 c0                	test   al,al
c0016d7b:	74 75                	je     c0016df2 <loadACPITables(unsigned char*)+0x99>
c0016d7d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016d85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016d8c:	83 e8 24             	sub    eax,0x24
c0016d8f:	c1 e8 03             	shr    eax,0x3
c0016d92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016d96:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016d9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016da2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016da6:	0f 8d b2 00 00 00    	jge    c0016e5e <loadACPITables(unsigned char*)+0x105>
c0016dac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016db0:	83 c0 24             	add    eax,0x24
c0016db3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016db7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016dbb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016dbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016dc3:	c1 e0 03             	shl    eax,0x3
c0016dc6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016dca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016dd3:	89 c1                	mov    ecx,eax
c0016dd5:	a1 cc be 02 c0       	mov    eax,ds:0xc002becc
c0016dda:	8d 50 01             	lea    edx,[eax+0x1]
c0016ddd:	89 15 cc be 02 c0    	mov    DWORD PTR ds:0xc002becc,edx
c0016de3:	89 ca                	mov    edx,ecx
c0016de5:	89 14 c5 e4 be 02 c0 	mov    DWORD PTR [eax*8-0x3ffd411c],edx
c0016dec:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016df0:	eb ac                	jmp    c0016d9e <loadACPITables(unsigned char*)+0x45>
c0016df2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016df6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e01:	83 e8 24             	sub    eax,0x24
c0016e04:	c1 e8 02             	shr    eax,0x2
c0016e07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e0b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016e13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e17:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016e1b:	7d 41                	jge    c0016e5e <loadACPITables(unsigned char*)+0x105>
c0016e1d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e21:	83 c0 24             	add    eax,0x24
c0016e24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e34:	c1 e0 02             	shl    eax,0x2
c0016e37:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016e3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e41:	a1 cc be 02 c0       	mov    eax,ds:0xc002becc
c0016e46:	8d 50 01             	lea    edx,[eax+0x1]
c0016e49:	89 15 cc be 02 c0    	mov    DWORD PTR ds:0xc002becc,edx
c0016e4f:	89 ca                	mov    edx,ecx
c0016e51:	89 14 c5 e4 be 02 c0 	mov    DWORD PTR [eax*8-0x3ffd411c],edx
c0016e58:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016e5c:	eb b5                	jmp    c0016e13 <loadACPITables(unsigned char*)+0xba>
c0016e5e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016e66:	a1 cc be 02 c0       	mov    eax,ds:0xc002becc
c0016e6b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016e6f:	0f 8d 05 01 00 00    	jge    c0016f7a <loadACPITables(unsigned char*)+0x221>
c0016e75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e79:	8b 04 c5 e4 be 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd411c]
c0016e80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e90:	25 ff 0f 00 00       	and    eax,0xfff
c0016e95:	89 c6                	mov    esi,eax
c0016e97:	e8 91 a9 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0016e9c:	89 c3                	mov    ebx,eax
c0016e9e:	83 ec 0c             	sub    esp,0xc
c0016ea1:	6a 01                	push   0x1
c0016ea3:	e8 f5 a7 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0016ea8:	83 c4 10             	add    esp,0x10
c0016eab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016eaf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016eb5:	83 ec 0c             	sub    esp,0xc
c0016eb8:	6a 01                	push   0x1
c0016eba:	6a 01                	push   0x1
c0016ebc:	50                   	push   eax
c0016ebd:	52                   	push   edx
c0016ebe:	53                   	push   ebx
c0016ebf:	e8 98 b1 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ec4:	83 c4 20             	add    esp,0x20
c0016ec7:	09 f0                	or     eax,esi
c0016ec9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ecd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ed1:	c1 e0 03             	shl    eax,0x3
c0016ed4:	05 e0 be 02 c0       	add    eax,0xc002bee0
c0016ed9:	83 ec 04             	sub    esp,0x4
c0016edc:	6a 04                	push   0x4
c0016ede:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ee2:	50                   	push   eax
c0016ee3:	e8 5d 97 fe ff       	call   c0000645 <memcpy>
c0016ee8:	83 c4 10             	add    esp,0x10
c0016eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ef6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016efa:	05 00 10 00 00       	add    eax,0x1000
c0016eff:	c1 e8 0c             	shr    eax,0xc
c0016f02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f11:	25 ff 0f 00 00       	and    eax,0xfff
c0016f16:	89 c6                	mov    esi,eax
c0016f18:	e8 10 a9 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0016f1d:	89 c3                	mov    ebx,eax
c0016f1f:	83 ec 0c             	sub    esp,0xc
c0016f22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f26:	e8 72 a7 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f32:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f38:	83 ec 0c             	sub    esp,0xc
c0016f3b:	6a 01                	push   0x1
c0016f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f41:	50                   	push   eax
c0016f42:	52                   	push   edx
c0016f43:	53                   	push   ebx
c0016f44:	e8 13 b1 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f49:	83 c4 20             	add    esp,0x20
c0016f4c:	09 f0                	or     eax,esi
c0016f4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016f55:	83 ec 0c             	sub    esp,0xc
c0016f58:	50                   	push   eax
c0016f59:	e8 a3 aa ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0016f5e:	83 c4 10             	add    esp,0x10
c0016f61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f69:	89 14 c5 e4 be 02 c0 	mov    DWORD PTR [eax*8-0x3ffd411c],edx
c0016f70:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016f74:	e9 ed fe ff ff       	jmp    c0016e66 <loadACPITables(unsigned char*)+0x10d>
c0016f79:	90                   	nop
c0016f7a:	83 c4 44             	add    esp,0x44
c0016f7d:	5b                   	pop    ebx
c0016f7e:	5e                   	pop    esi
c0016f7f:	c3                   	ret    

c0016f80 <findRSDT(unsigned char*)>:
c0016f80:	56                   	push   esi
c0016f81:	53                   	push   ebx
c0016f82:	83 ec 44             	sub    esp,0x44
c0016f85:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0016f8a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016f90:	83 e0 04             	and    eax,0x4
c0016f93:	84 c0                	test   al,al
c0016f95:	75 0a                	jne    c0016fa1 <findRSDT(unsigned char*)+0x21>
c0016f97:	b8 00 00 00 00       	mov    eax,0x0
c0016f9c:	e9 f7 00 00 00       	jmp    c0017098 <findRSDT(unsigned char*)+0x118>
c0016fa1:	83 ec 04             	sub    esp,0x4
c0016fa4:	6a 24                	push   0x24
c0016fa6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016faa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fae:	50                   	push   eax
c0016faf:	e8 91 96 fe ff       	call   c0000645 <memcpy>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016fbb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016fbf:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016fc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fcb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016fcf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fd7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016fdb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fdf:	25 ff 0f 00 00       	and    eax,0xfff
c0016fe4:	89 c6                	mov    esi,eax
c0016fe6:	e8 42 a8 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0016feb:	89 c3                	mov    ebx,eax
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	6a 02                	push   0x2
c0016ff2:	e8 a6 a6 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0016ff7:	83 c4 10             	add    esp,0x10
c0016ffa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ffe:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017004:	83 ec 0c             	sub    esp,0xc
c0017007:	6a 01                	push   0x1
c0017009:	6a 02                	push   0x2
c001700b:	50                   	push   eax
c001700c:	52                   	push   edx
c001700d:	53                   	push   ebx
c001700e:	e8 49 b0 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017013:	83 c4 20             	add    esp,0x20
c0017016:	09 f0                	or     eax,esi
c0017018:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001701c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017020:	25 ff 0f 00 00       	and    eax,0xfff
c0017025:	89 c6                	mov    esi,eax
c0017027:	e8 01 a8 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c001702c:	89 c3                	mov    ebx,eax
c001702e:	83 ec 0c             	sub    esp,0xc
c0017031:	6a 02                	push   0x2
c0017033:	e8 65 a6 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0017038:	83 c4 10             	add    esp,0x10
c001703b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001703f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017045:	83 ec 0c             	sub    esp,0xc
c0017048:	6a 01                	push   0x1
c001704a:	6a 02                	push   0x2
c001704c:	50                   	push   eax
c001704d:	52                   	push   edx
c001704e:	53                   	push   ebx
c001704f:	e8 08 b0 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017054:	83 c4 20             	add    esp,0x20
c0017057:	09 f0                	or     eax,esi
c0017059:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001705d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017062:	75 11                	jne    c0017075 <findRSDT(unsigned char*)+0xf5>
c0017064:	c6 05 e0 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0e0,0x0
c001706b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001706f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017073:	eb 1f                	jmp    c0017094 <findRSDT(unsigned char*)+0x114>
c0017075:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001707a:	75 11                	jne    c001708d <findRSDT(unsigned char*)+0x10d>
c001707c:	c6 05 e0 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0e0,0x1
c0017083:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017087:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001708b:	eb 07                	jmp    c0017094 <findRSDT(unsigned char*)+0x114>
c001708d:	b8 00 00 00 00       	mov    eax,0x0
c0017092:	eb 04                	jmp    c0017098 <findRSDT(unsigned char*)+0x118>
c0017094:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017098:	83 c4 44             	add    esp,0x44
c001709b:	5b                   	pop    ebx
c001709c:	5e                   	pop    esi
c001709d:	c3                   	ret    

c001709e <findDataTable(unsigned char*, char*)>:
c001709e:	83 ec 1c             	sub    esp,0x1c
c00170a1:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00170a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170ac:	83 e0 04             	and    eax,0x4
c00170af:	84 c0                	test   al,al
c00170b1:	75 07                	jne    c00170ba <findDataTable(unsigned char*, char*)+0x1c>
c00170b3:	b8 00 00 00 00       	mov    eax,0x0
c00170b8:	eb 7c                	jmp    c0017136 <findDataTable(unsigned char*, char*)+0x98>
c00170ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170c2:	a1 cc be 02 c0       	mov    eax,ds:0xc002becc
c00170c7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00170cb:	7d 3a                	jge    c0017107 <findDataTable(unsigned char*, char*)+0x69>
c00170cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d1:	c1 e0 03             	shl    eax,0x3
c00170d4:	05 e0 be 02 c0       	add    eax,0xc002bee0
c00170d9:	83 ec 04             	sub    esp,0x4
c00170dc:	6a 04                	push   0x4
c00170de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170e2:	50                   	push   eax
c00170e3:	e8 fa 94 fe ff       	call   c00005e2 <memcmp>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	85 c0                	test   eax,eax
c00170ed:	0f 94 c0             	sete   al
c00170f0:	84 c0                	test   al,al
c00170f2:	74 0d                	je     c0017101 <findDataTable(unsigned char*, char*)+0x63>
c00170f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170f8:	8b 04 c5 e4 be 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd411c]
c00170ff:	eb 35                	jmp    c0017136 <findDataTable(unsigned char*, char*)+0x98>
c0017101:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017105:	eb bb                	jmp    c00170c2 <findDataTable(unsigned char*, char*)+0x24>
c0017107:	a0 e0 c0 02 c0       	mov    al,ds:0xc002c0e0
c001710c:	84 c0                	test   al,al
c001710e:	74 07                	je     c0017117 <findDataTable(unsigned char*, char*)+0x79>
c0017110:	b8 58 00 00 00       	mov    eax,0x58
c0017115:	eb 05                	jmp    c001711c <findDataTable(unsigned char*, char*)+0x7e>
c0017117:	b8 52 00 00 00       	mov    eax,0x52
c001711c:	83 ec 04             	sub    esp,0x4
c001711f:	50                   	push   eax
c0017120:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017124:	68 b0 8d 02 c0       	push   0xc0028db0
c0017129:	e8 5f b5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001712e:	83 c4 10             	add    esp,0x10
c0017131:	b8 00 00 00 00       	mov    eax,0x0
c0017136:	83 c4 1c             	add    esp,0x1c
c0017139:	c3                   	ret    

c001713a <scanMADT()>:
c001713a:	53                   	push   ebx
c001713b:	83 ec 38             	sub    esp,0x38
c001713e:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0017143:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017149:	83 e0 04             	and    eax,0x4
c001714c:	84 c0                	test   al,al
c001714e:	0f 84 63 04 00 00    	je     c00175b7 <scanMADT()+0x47d>
c0017154:	e8 76 fb ff ff       	call   c0016ccf <findRSDP()>
c0017159:	a3 ec c0 02 c0       	mov    ds:0xc002c0ec,eax
c001715e:	a1 ec c0 02 c0       	mov    eax,ds:0xc002c0ec
c0017163:	85 c0                	test   eax,eax
c0017165:	75 19                	jne    c0017180 <scanMADT()+0x46>
c0017167:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001716c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017172:	83 e2 fb             	and    edx,0xfffffffb
c0017175:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001717b:	e9 3b 04 00 00       	jmp    c00175bb <scanMADT()+0x481>
c0017180:	a1 ec c0 02 c0       	mov    eax,ds:0xc002c0ec
c0017185:	83 ec 0c             	sub    esp,0xc
c0017188:	50                   	push   eax
c0017189:	e8 f2 fd ff ff       	call   c0016f80 <findRSDT(unsigned char*)>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	a3 e8 c0 02 c0       	mov    ds:0xc002c0e8,eax
c0017196:	a1 e8 c0 02 c0       	mov    eax,ds:0xc002c0e8
c001719b:	85 c0                	test   eax,eax
c001719d:	75 19                	jne    c00171b8 <scanMADT()+0x7e>
c001719f:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00171a4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171aa:	83 e2 fb             	and    edx,0xfffffffb
c00171ad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171b3:	e9 03 04 00 00       	jmp    c00175bb <scanMADT()+0x481>
c00171b8:	a1 e8 c0 02 c0       	mov    eax,ds:0xc002c0e8
c00171bd:	83 ec 0c             	sub    esp,0xc
c00171c0:	50                   	push   eax
c00171c1:	e8 93 fb ff ff       	call   c0016d59 <loadACPITables(unsigned char*)>
c00171c6:	83 c4 10             	add    esp,0x10
c00171c9:	a1 e8 c0 02 c0       	mov    eax,ds:0xc002c0e8
c00171ce:	83 ec 08             	sub    esp,0x8
c00171d1:	68 ce 8c 02 c0       	push   0xc0028cce
c00171d6:	50                   	push   eax
c00171d7:	e8 c2 fe ff ff       	call   c001709e <findDataTable(unsigned char*, char*)>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00171e3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00171e8:	75 19                	jne    c0017203 <scanMADT()+0xc9>
c00171ea:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00171ef:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171f5:	83 e2 fe             	and    edx,0xfffffffe
c00171f8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171fe:	e9 b8 03 00 00       	jmp    c00175bb <scanMADT()+0x481>
c0017203:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001720b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001720f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017212:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017216:	0f 87 9f 03 00 00    	ja     c00175bb <scanMADT()+0x481>
c001721c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017224:	0f 87 91 03 00 00    	ja     c00175bb <scanMADT()+0x481>
c001722a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001722e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017232:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017236:	8d 50 01             	lea    edx,[eax+0x1]
c0017239:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001723d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017241:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017245:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017249:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001724d:	8d 50 01             	lea    edx,[eax+0x1]
c0017250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017254:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017258:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001725c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017260:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017265:	0f 86 4f 03 00 00    	jbe    c00175ba <scanMADT()+0x480>
c001726b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017270:	75 57                	jne    c00172c9 <scanMADT()+0x18f>
c0017272:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017276:	8d 50 01             	lea    edx,[eax+0x1]
c0017279:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001727d:	8a 15 e0 c2 02 c0    	mov    dl,BYTE PTR ds:0xc002c2e0
c0017283:	0f b6 d2             	movzx  edx,dl
c0017286:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001728a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001728e:	88 82 20 c3 02 c0    	mov    BYTE PTR [edx-0x3ffd3ce0],al
c0017294:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017298:	8d 50 01             	lea    edx,[eax+0x1]
c001729b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001729f:	8a 15 e0 c2 02 c0    	mov    dl,BYTE PTR ds:0xc002c2e0
c00172a5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00172a8:	88 0d e0 c2 02 c0    	mov    BYTE PTR ds:0xc002c2e0,cl
c00172ae:	0f b6 d2             	movzx  edx,dl
c00172b1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00172b5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00172b9:	88 82 00 c3 02 c0    	mov    BYTE PTR [edx-0x3ffd3d00],al
c00172bf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00172c4:	e9 da 02 00 00       	jmp    c00175a3 <scanMADT()+0x469>
c00172c9:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00172ce:	0f 85 14 01 00 00    	jne    c00173e8 <scanMADT()+0x2ae>
c00172d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172d8:	8d 50 01             	lea    edx,[eax+0x1]
c00172db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172df:	8a 15 a0 c1 02 c0    	mov    dl,BYTE PTR ds:0xc002c1a0
c00172e5:	0f b6 d2             	movzx  edx,dl
c00172e8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00172ec:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00172f0:	88 82 c0 c1 02 c0    	mov    BYTE PTR [edx-0x3ffd3e40],al
c00172f6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00172fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017302:	01 d0                	add    eax,edx
c0017304:	83 c0 2c             	add    eax,0x2c
c0017307:	8a 00                	mov    al,BYTE PTR [eax]
c0017309:	0f b6 d0             	movzx  edx,al
c001730c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017310:	8d 48 01             	lea    ecx,[eax+0x1]
c0017313:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017317:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001731b:	0f b6 c0             	movzx  eax,al
c001731e:	c1 e0 08             	shl    eax,0x8
c0017321:	89 d1                	mov    ecx,edx
c0017323:	09 c1                	or     ecx,eax
c0017325:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017329:	8d 50 02             	lea    edx,[eax+0x2]
c001732c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017330:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017334:	0f b6 c0             	movzx  eax,al
c0017337:	c1 e0 10             	shl    eax,0x10
c001733a:	09 c1                	or     ecx,eax
c001733c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017340:	8d 50 03             	lea    edx,[eax+0x3]
c0017343:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017347:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001734b:	0f b6 c0             	movzx  eax,al
c001734e:	c1 e0 18             	shl    eax,0x18
c0017351:	09 c1                	or     ecx,eax
c0017353:	89 ca                	mov    edx,ecx
c0017355:	a0 a0 c1 02 c0       	mov    al,ds:0xc002c1a0
c001735a:	0f b6 c0             	movzx  eax,al
c001735d:	89 14 85 e0 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e20],edx
c0017364:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017369:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001736d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017371:	01 d0                	add    eax,edx
c0017373:	83 c0 2c             	add    eax,0x2c
c0017376:	8a 00                	mov    al,BYTE PTR [eax]
c0017378:	0f b6 d0             	movzx  edx,al
c001737b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001737f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017386:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001738a:	0f b6 c0             	movzx  eax,al
c001738d:	c1 e0 08             	shl    eax,0x8
c0017390:	89 d1                	mov    ecx,edx
c0017392:	09 c1                	or     ecx,eax
c0017394:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017398:	8d 50 02             	lea    edx,[eax+0x2]
c001739b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001739f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173a3:	0f b6 c0             	movzx  eax,al
c00173a6:	c1 e0 10             	shl    eax,0x10
c00173a9:	09 c1                	or     ecx,eax
c00173ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173af:	8d 50 03             	lea    edx,[eax+0x3]
c00173b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173ba:	0f b6 c0             	movzx  eax,al
c00173bd:	c1 e0 18             	shl    eax,0x18
c00173c0:	09 c1                	or     ecx,eax
c00173c2:	89 ca                	mov    edx,ecx
c00173c4:	a0 a0 c1 02 c0       	mov    al,ds:0xc002c1a0
c00173c9:	0f b6 c0             	movzx  eax,al
c00173cc:	89 14 85 60 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3da0],edx
c00173d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00173d8:	a0 a0 c1 02 c0       	mov    al,ds:0xc002c1a0
c00173dd:	40                   	inc    eax
c00173de:	a2 a0 c1 02 c0       	mov    ds:0xc002c1a0,al
c00173e3:	e9 bb 01 00 00       	jmp    c00175a3 <scanMADT()+0x469>
c00173e8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00173ed:	0f 85 e9 00 00 00    	jne    c00174dc <scanMADT()+0x3a2>
c00173f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173f7:	8d 50 01             	lea    edx,[eax+0x1]
c00173fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017402:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017406:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001740a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001740e:	8d 50 01             	lea    edx,[eax+0x1]
c0017411:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017415:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017419:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001741d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017421:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017425:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017429:	01 d0                	add    eax,edx
c001742b:	83 c0 2c             	add    eax,0x2c
c001742e:	8a 00                	mov    al,BYTE PTR [eax]
c0017430:	0f b6 d0             	movzx  edx,al
c0017433:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017437:	8d 48 01             	lea    ecx,[eax+0x1]
c001743a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001743e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017442:	0f b6 c0             	movzx  eax,al
c0017445:	c1 e0 08             	shl    eax,0x8
c0017448:	89 d1                	mov    ecx,edx
c001744a:	09 c1                	or     ecx,eax
c001744c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017450:	8d 50 02             	lea    edx,[eax+0x2]
c0017453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017457:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001745b:	0f b6 c0             	movzx  eax,al
c001745e:	c1 e0 10             	shl    eax,0x10
c0017461:	09 c1                	or     ecx,eax
c0017463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017467:	8d 50 03             	lea    edx,[eax+0x3]
c001746a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001746e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017472:	0f b6 c0             	movzx  eax,al
c0017475:	c1 e0 18             	shl    eax,0x18
c0017478:	09 c8                	or     eax,ecx
c001747a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001747e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017483:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001748b:	01 d0                	add    eax,edx
c001748d:	83 c0 2c             	add    eax,0x2c
c0017490:	8a 00                	mov    al,BYTE PTR [eax]
c0017492:	0f b6 c0             	movzx  eax,al
c0017495:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017499:	8d 4a 01             	lea    ecx,[edx+0x1]
c001749c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174a0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00174a4:	0f b6 d2             	movzx  edx,dl
c00174a7:	c1 e2 08             	shl    edx,0x8
c00174aa:	09 d0                	or     eax,edx
c00174ac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00174b1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00174b6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00174bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174bf:	88 90 20 ab 02 c0    	mov    BYTE PTR [eax-0x3ffd54e0],dl
c00174c5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00174ca:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00174cf:	66 89 84 12 80 c1 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd3e80],ax
c00174d7:	e9 c7 00 00 00       	jmp    c00175a3 <scanMADT()+0x469>
c00174dc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00174e1:	0f 85 b0 00 00 00    	jne    c0017597 <scanMADT()+0x45d>
c00174e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174eb:	8d 50 01             	lea    edx,[eax+0x1]
c00174ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00174fa:	0f b6 c0             	movzx  eax,al
c00174fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017501:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017505:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017509:	01 d0                	add    eax,edx
c001750b:	83 c0 2c             	add    eax,0x2c
c001750e:	8a 00                	mov    al,BYTE PTR [eax]
c0017510:	0f b6 d0             	movzx  edx,al
c0017513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017517:	8d 48 01             	lea    ecx,[eax+0x1]
c001751a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001751e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017522:	0f b6 c0             	movzx  eax,al
c0017525:	c1 e0 08             	shl    eax,0x8
c0017528:	09 d0                	or     eax,edx
c001752a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001752e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017537:	8d 50 01             	lea    edx,[eax+0x1]
c001753a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001753e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017542:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017546:	0f b6 c0             	movzx  eax,al
c0017549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001754d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017551:	c1 e0 08             	shl    eax,0x8
c0017554:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017558:	89 c1                	mov    ecx,eax
c001755a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001755e:	c1 e0 18             	shl    eax,0x18
c0017561:	89 c3                	mov    ebx,eax
c0017563:	a1 f0 c0 02 c0       	mov    eax,ds:0xc002c0f0
c0017568:	8d 50 01             	lea    edx,[eax+0x1]
c001756b:	89 15 f0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0f0,edx
c0017571:	09 d9                	or     ecx,ebx
c0017573:	89 ca                	mov    edx,ecx
c0017575:	89 14 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],edx
c001757c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017580:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017588:	68 e0 8d 02 c0       	push   0xc0028de0
c001758d:	e8 fb b0 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0017592:	83 c4 10             	add    esp,0x10
c0017595:	eb 0c                	jmp    c00175a3 <scanMADT()+0x469>
c0017597:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001759c:	75 05                	jne    c00175a3 <scanMADT()+0x469>
c001759e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00175a3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00175a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175ac:	01 d0                	add    eax,edx
c00175ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175b2:	e9 54 fc ff ff       	jmp    c001720b <scanMADT()+0xd1>
c00175b7:	90                   	nop
c00175b8:	eb 01                	jmp    c00175bb <scanMADT()+0x481>
c00175ba:	90                   	nop
c00175bb:	83 c4 38             	add    esp,0x38
c00175be:	5b                   	pop    ebx
c00175bf:	c3                   	ret    

c00175c0 <ACPI::ACPI()>:
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c7:	83 ec 08             	sub    esp,0x8
c00175ca:	68 d3 8c 02 c0       	push   0xc0028cd3
c00175cf:	50                   	push   eax
c00175d0:	e8 97 c6 ff ff       	call   c0013c6c <Device::Device(char const*)>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	ba b8 8e 02 c0       	mov    edx,0xc0028eb8
c00175dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e1:	89 10                	mov    DWORD PTR [eax],edx
c00175e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00175ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f2:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00175fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017600:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017615:	e8 20 fb ff ff       	call   c001713a <scanMADT()>
c001761a:	90                   	nop
c001761b:	83 c4 0c             	add    esp,0xc
c001761e:	c3                   	ret    
c001761f:	90                   	nop

c0017620 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017620:	83 ec 2c             	sub    esp,0x2c
c0017623:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017627:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001762b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001762f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017633:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017638:	88 d0                	mov    al,dl
c001763a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001763e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017643:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001764b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001764f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017655:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017659:	0f 8d 97 00 00 00    	jge    c00176f6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001765f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017663:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017667:	83 c2 2a             	add    edx,0x2a
c001766a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001766e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017673:	75 78                	jne    c00176ed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017675:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001767d:	83 c2 2a             	add    edx,0x2a
c0017680:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017684:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017688:	75 63                	jne    c00176ed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001768a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001768f:	74 3a                	je     c00176cb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017691:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017695:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017699:	83 c2 2a             	add    edx,0x2a
c001769c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00176a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176a7:	39 c2                	cmp    edx,eax
c00176a9:	74 10                	je     c00176bb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00176ab:	83 ec 0c             	sub    esp,0xc
c00176ae:	68 1c 8e 02 c0       	push   0xc0028e1c
c00176b3:	e8 9f 1a 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00176b8:	83 c4 10             	add    esp,0x10
c00176bb:	83 ec 0c             	sub    esp,0xc
c00176be:	68 d8 8c 02 c0       	push   0xc0028cd8
c00176c3:	e8 8f 1a 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00176cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176d7:	83 c2 2a             	add    edx,0x2a
c00176da:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00176de:	8b 02                	mov    eax,DWORD PTR [edx]
c00176e0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00176e3:	89 01                	mov    DWORD PTR [ecx],eax
c00176e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00176e8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00176ed:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00176f1:	e9 55 ff ff ff       	jmp    c001764b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00176f6:	90                   	nop
c00176f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176fb:	83 c4 2c             	add    esp,0x2c
c00176fe:	c2 04 00             	ret    0x4
c0017701:	90                   	nop

c0017702 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017702:	56                   	push   esi
c0017703:	53                   	push   ebx
c0017704:	83 ec 14             	sub    esp,0x14
c0017707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001770b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001770f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017713:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017718:	88 c8                	mov    al,cl
c001771a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001771e:	88 d0                	mov    al,dl
c0017720:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017728:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001772e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017732:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017738:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001773d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017742:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017747:	83 ec 04             	sub    esp,0x4
c001774a:	56                   	push   esi
c001774b:	53                   	push   ebx
c001774c:	51                   	push   ecx
c001774d:	52                   	push   edx
c001774e:	50                   	push   eax
c001774f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017753:	68 4c 8e 02 c0       	push   0xc0028e4c
c0017758:	e8 30 af ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001775d:	83 c4 20             	add    esp,0x20
c0017760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017764:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001776a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001776e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017771:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017775:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001777d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017783:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017787:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001778a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001778e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017797:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001779d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00177a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00177a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a8:	83 c2 2a             	add    edx,0x2a
c00177ab:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00177af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00177b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177bd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00177c0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00177c4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00177c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177cc:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177d2:	8d 50 01             	lea    edx,[eax+0x1]
c00177d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177d9:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00177df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177e9:	3d 00 08 00 00       	cmp    eax,0x800
c00177ee:	75 10                	jne    c0017800 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00177f0:	83 ec 0c             	sub    esp,0xc
c00177f3:	68 e7 8c 02 c0       	push   0xc0028ce7
c00177f8:	e8 5a 19 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00177fd:	83 c4 10             	add    esp,0x10
c0017800:	90                   	nop
c0017801:	83 c4 14             	add    esp,0x14
c0017804:	5b                   	pop    ebx
c0017805:	5e                   	pop    esi
c0017806:	c3                   	ret    
c0017807:	90                   	nop

c0017808 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017808:	b8 00 00 00 00       	mov    eax,0x0
c001780d:	c3                   	ret    

c001780e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001780e:	83 ec 1c             	sub    esp,0x1c
c0017811:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017815:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017818:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001781c:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0017821:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017826:	83 ec 08             	sub    esp,0x8
c0017829:	52                   	push   edx
c001782a:	50                   	push   eax
c001782b:	e8 a8 72 ff ff       	call   c000ead8 <Computer::readCMOS(unsigned char)>
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017837:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001783c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017841:	83 ec 04             	sub    esp,0x4
c0017844:	6a 01                	push   0x1
c0017846:	52                   	push   edx
c0017847:	50                   	push   eax
c0017848:	e8 a1 73 ff ff       	call   c000ebee <Computer::writeCMOS(unsigned char, unsigned char)>
c001784d:	83 c4 10             	add    esp,0x10
c0017850:	90                   	nop
c0017851:	83 c4 1c             	add    esp,0x1c
c0017854:	c3                   	ret    
c0017855:	90                   	nop

c0017856 <ACPI::open(int, int, void*)>:
c0017856:	53                   	push   ebx
c0017857:	83 ec 28             	sub    esp,0x28
c001785a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001785e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017869:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001786f:	84 c0                	test   al,al
c0017871:	74 67                	je     c00178da <ACPI::open(int, int, void*)+0x84>
c0017873:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c001787b:	83 ec 0c             	sub    esp,0xc
c001787e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017882:	e8 39 7c ff ff       	call   c000f4c0 <malloc>
c0017887:	83 c4 10             	add    esp,0x10
c001788a:	89 c3                	mov    ebx,eax
c001788c:	83 ec 0c             	sub    esp,0xc
c001788f:	53                   	push   ebx
c0017890:	e8 73 91 00 00       	call   c0020a08 <PCI::PCI()>
c0017895:	83 c4 10             	add    esp,0x10
c0017898:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001789c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178a0:	83 ec 08             	sub    esp,0x8
c00178a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00178a7:	50                   	push   eax
c00178a8:	e8 cf c1 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00178b6:	83 c0 08             	add    eax,0x8
c00178b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00178bb:	6a 00                	push   0x0
c00178bd:	6a 00                	push   0x0
c00178bf:	6a 00                	push   0x0
c00178c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00178c5:	ff d0                	call   eax
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	83 ec 0c             	sub    esp,0xc
c00178cd:	68 04 8d 02 c0       	push   0xc0028d04
c00178d2:	e8 b6 ad ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	83 ec 0c             	sub    esp,0xc
c00178dd:	68 0f 8d 02 c0       	push   0xc0028d0f
c00178e2:	e8 ba 37 00 00       	call   c001b0a1 <Thr::loadKernelSymbolTable(char const*)>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	8b 1d 48 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b848
c00178f0:	83 ec 08             	sub    esp,0x8
c00178f3:	6a 01                	push   0x1
c00178f5:	68 2d 8d 02 c0       	push   0xc0028d2d
c00178fa:	e8 62 42 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	83 ec 08             	sub    esp,0x8
c0017905:	53                   	push   ebx
c0017906:	50                   	push   eax
c0017907:	e8 64 44 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c001790c:	83 c4 10             	add    esp,0x10
c001790f:	8b 1d 48 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b848
c0017915:	83 ec 08             	sub    esp,0x8
c0017918:	6a 01                	push   0x1
c001791a:	68 4a 8d 02 c0       	push   0xc0028d4a
c001791f:	e8 3d 42 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c0017924:	83 c4 10             	add    esp,0x10
c0017927:	83 ec 08             	sub    esp,0x8
c001792a:	53                   	push   ebx
c001792b:	50                   	push   eax
c001792c:	e8 3f 44 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0017939:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001793f:	83 e0 04             	and    eax,0x4
c0017942:	84 c0                	test   al,al
c0017944:	0f 84 d6 00 00 00    	je     c0017a20 <ACPI::open(int, int, void*)+0x1ca>
c001794a:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017952:	83 ec 0c             	sub    esp,0xc
c0017955:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017959:	e8 62 7b ff ff       	call   c000f4c0 <malloc>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	89 c3                	mov    ebx,eax
c0017963:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0017968:	83 ec 04             	sub    esp,0x4
c001796b:	50                   	push   eax
c001796c:	68 67 8d 02 c0       	push   0xc0028d67
c0017971:	53                   	push   ebx
c0017972:	e8 45 b2 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001797e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017983:	74 17                	je     c001799c <ACPI::open(int, int, void*)+0x146>
c0017985:	83 ec 0c             	sub    esp,0xc
c0017988:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001798c:	e8 fd b4 ff ff       	call   c0012e8e <File::exists()>
c0017991:	83 c4 10             	add    esp,0x10
c0017994:	84 c0                	test   al,al
c0017996:	74 04                	je     c001799c <ACPI::open(int, int, void*)+0x146>
c0017998:	b0 01                	mov    al,0x1
c001799a:	eb 02                	jmp    c001799e <ACPI::open(int, int, void*)+0x148>
c001799c:	b0 00                	mov    al,0x0
c001799e:	84 c0                	test   al,al
c00179a0:	74 25                	je     c00179c7 <ACPI::open(int, int, void*)+0x171>
c00179a2:	8b 1d 48 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b848
c00179a8:	83 ec 08             	sub    esp,0x8
c00179ab:	6a 01                	push   0x1
c00179ad:	68 67 8d 02 c0       	push   0xc0028d67
c00179b2:	e8 aa 41 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c00179b7:	83 c4 10             	add    esp,0x10
c00179ba:	83 ec 08             	sub    esp,0x8
c00179bd:	53                   	push   ebx
c00179be:	50                   	push   eax
c00179bf:	e8 ac 43 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00179cc:	74 1e                	je     c00179ec <ACPI::open(int, int, void*)+0x196>
c00179ce:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00179d3:	74 17                	je     c00179ec <ACPI::open(int, int, void*)+0x196>
c00179d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179db:	83 c0 08             	add    eax,0x8
c00179de:	8b 00                	mov    eax,DWORD PTR [eax]
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179e7:	ff d0                	call   eax
c00179e9:	83 c4 10             	add    esp,0x10
c00179ec:	a1 e8 c0 02 c0       	mov    eax,ds:0xc002c0e8
c00179f1:	83 ec 08             	sub    esp,0x8
c00179f4:	68 84 8d 02 c0       	push   0xc0028d84
c00179f9:	50                   	push   eax
c00179fa:	e8 9f f6 ff ff       	call   c001709e <findDataTable(unsigned char*, char*)>
c00179ff:	83 c4 10             	add    esp,0x10
c0017a02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a06:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a0b:	74 13                	je     c0017a20 <ACPI::open(int, int, void*)+0x1ca>
c0017a0d:	83 ec 08             	sub    esp,0x8
c0017a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a18:	e8 f1 fd ff ff       	call   c001780e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	b8 00 00 00 00       	mov    eax,0x0
c0017a25:	83 c4 28             	add    esp,0x28
c0017a28:	5b                   	pop    ebx
c0017a29:	c3                   	ret    

c0017a2a <ACPI::sleep()>:
c0017a2a:	83 ec 0c             	sub    esp,0xc
c0017a2d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0017a32:	85 c0                	test   eax,eax
c0017a34:	74 07                	je     c0017a3d <ACPI::sleep()+0x13>
c0017a36:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0017a3b:	ff d0                	call   eax
c0017a3d:	90                   	nop
c0017a3e:	83 c4 0c             	add    esp,0xc
c0017a41:	c3                   	ret    

c0017a42 <CPU::close(int, int, void*)>:
c0017a42:	31 c0                	xor    eax,eax
c0017a44:	c3                   	ret    
c0017a45:	90                   	nop

c0017a46 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017a46:	55                   	push   ebp
c0017a47:	57                   	push   edi
c0017a48:	56                   	push   esi
c0017a49:	53                   	push   ebx
c0017a4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017a4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a52:	89 ce                	mov    esi,ecx
c0017a54:	89 d5                	mov    ebp,edx
c0017a56:	80 f9 04             	cmp    cl,0x4
c0017a59:	75 28                	jne    c0017a83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017a5b:	8d 42 f9             	lea    eax,[edx-0x7]
c0017a5e:	3c 03                	cmp    al,0x3
c0017a60:	0f 86 63 01 00 00    	jbe    c0017bc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017a66:	80 fa 03             	cmp    dl,0x3
c0017a69:	0f 84 5a 01 00 00    	je     c0017bc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017a6f:	8d 7a f2             	lea    edi,[edx-0xe]
c0017a72:	b8 f0 ac 02 c0       	mov    eax,0xc002acf0
c0017a77:	89 fb                	mov    ebx,edi
c0017a79:	80 fb 01             	cmp    bl,0x1
c0017a7c:	77 4e                	ja     c0017acc <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017a7e:	e9 52 01 00 00       	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a83:	80 f9 05             	cmp    cl,0x5
c0017a86:	75 4d                	jne    c0017ad5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017a88:	b8 00 ad 02 c0       	mov    eax,0xc002ad00
c0017a8d:	80 fa 03             	cmp    dl,0x3
c0017a90:	0f 86 3f 01 00 00    	jbe    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a96:	8d 7a fa             	lea    edi,[edx-0x6]
c0017a99:	b8 10 ad 02 c0       	mov    eax,0xc002ad10
c0017a9e:	89 fb                	mov    ebx,edi
c0017aa0:	80 fb 01             	cmp    bl,0x1
c0017aa3:	0f 86 2c 01 00 00    	jbe    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017aa9:	b8 20 ad 02 c0       	mov    eax,0xc002ad20
c0017aae:	80 fa 08             	cmp    dl,0x8
c0017ab1:	0f 84 1e 01 00 00    	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ab7:	89 d7                	mov    edi,edx
c0017ab9:	b8 30 ad 02 c0       	mov    eax,0xc002ad30
c0017abe:	83 e7 fb             	and    edi,0xfffffffb
c0017ac1:	89 fb                	mov    ebx,edi
c0017ac3:	80 fb 09             	cmp    bl,0x9
c0017ac6:	0f 84 09 01 00 00    	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017acc:	31 c0                	xor    eax,eax
c0017ace:	89 eb                	mov    ebx,ebp
c0017ad0:	0f b6 fb             	movzx  edi,bl
c0017ad3:	eb 30                	jmp    c0017b05 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017ad5:	31 c0                	xor    eax,eax
c0017ad7:	80 f9 06             	cmp    cl,0x6
c0017ada:	75 f2                	jne    c0017ace <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017adc:	80 fa 0a             	cmp    dl,0xa
c0017adf:	77 ed                	ja     c0017ace <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017ae1:	bf de 05 00 00       	mov    edi,0x5de
c0017ae6:	0f a3 d7             	bt     edi,edx
c0017ae9:	73 e3                	jae    c0017ace <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017aeb:	b8 40 ad 02 c0       	mov    eax,0xc002ad40
c0017af0:	e9 e0 00 00 00       	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017af5:	39 c7                	cmp    edi,eax
c0017af7:	0f 84 d3 00 00 00    	je     c0017bd0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017afd:	40                   	inc    eax
c0017afe:	3d d0 00 00 00       	cmp    eax,0xd0
c0017b03:	74 09                	je     c0017b0e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017b05:	89 f3                	mov    ebx,esi
c0017b07:	80 fb 0f             	cmp    bl,0xf
c0017b0a:	75 f1                	jne    c0017afd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017b0c:	eb e7                	jmp    c0017af5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017b0e:	80 f9 10             	cmp    cl,0x10
c0017b11:	75 14                	jne    c0017b27 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017b13:	8d 42 fc             	lea    eax,[edx-0x4]
c0017b16:	83 e0 fb             	and    eax,0xfffffffb
c0017b19:	3c 02                	cmp    al,0x2
c0017b1b:	76 34                	jbe    c0017b51 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017b1d:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017b22:	80 fa 02             	cmp    dl,0x2
c0017b25:	eb 24                	jmp    c0017b4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017b27:	80 f9 11             	cmp    cl,0x11
c0017b2a:	75 13                	jne    c0017b3f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017b2c:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017b31:	80 fa 03             	cmp    dl,0x3
c0017b34:	0f 85 9b 00 00 00    	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b3a:	e9 91 00 00 00       	jmp    c0017bd0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017b3f:	80 f9 12             	cmp    cl,0x12
c0017b42:	75 14                	jne    c0017b58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017b44:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017b49:	fe ca                	dec    dl
c0017b4b:	0f 85 84 00 00 00    	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b51:	b8 60 ad 02 c0       	mov    eax,0xc002ad60
c0017b56:	eb 7d                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b58:	80 f9 14             	cmp    cl,0x14
c0017b5b:	75 12                	jne    c0017b6f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017b5d:	4a                   	dec    edx
c0017b5e:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017b63:	80 fa 01             	cmp    dl,0x1
c0017b66:	77 6d                	ja     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b68:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c0017b6d:	eb 66                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b6f:	80 f9 15             	cmp    cl,0x15
c0017b72:	75 31                	jne    c0017ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017b74:	b8 80 ad 02 c0       	mov    eax,0xc002ad80
c0017b79:	80 fa 01             	cmp    dl,0x1
c0017b7c:	74 57                	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b7e:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017b83:	80 fa 13             	cmp    dl,0x13
c0017b86:	76 0c                	jbe    c0017b94 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017b88:	80 fa 30             	cmp    dl,0x30
c0017b8b:	75 48                	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b8d:	b8 a0 ad 02 c0       	mov    eax,0xc002ada0
c0017b92:	eb 41                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b94:	b9 04 00 09 00       	mov    ecx,0x90004
c0017b99:	0f a3 d1             	bt     ecx,edx
c0017b9c:	73 37                	jae    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b9e:	b8 90 ad 02 c0       	mov    eax,0xc002ad90
c0017ba3:	eb 30                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ba5:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017baa:	80 f9 16             	cmp    cl,0x16
c0017bad:	75 26                	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017baf:	b8 b0 ad 02 c0       	mov    eax,0xc002adb0
c0017bb4:	84 d2                	test   dl,dl
c0017bb6:	74 1d                	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bb8:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017bbd:	80 fa 30             	cmp    dl,0x30
c0017bc0:	75 13                	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc2:	b8 c0 ad 02 c0       	mov    eax,0xc002adc0
c0017bc7:	eb 0c                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc9:	b8 e0 ac 02 c0       	mov    eax,0xc002ace0
c0017bce:	eb 05                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bd0:	b8 50 ad 02 c0       	mov    eax,0xc002ad50
c0017bd5:	5b                   	pop    ebx
c0017bd6:	5e                   	pop    esi
c0017bd7:	5f                   	pop    edi
c0017bd8:	5d                   	pop    ebp
c0017bd9:	c3                   	ret    

c0017bda <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017bda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017bde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017be2:	80 f9 04             	cmp    cl,0x4
c0017be5:	75 6b                	jne    c0017c52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017be7:	b8 40 ab 02 c0       	mov    eax,0xc002ab40
c0017bec:	80 fa 01             	cmp    dl,0x1
c0017bef:	0f 86 92 02 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017bf5:	b8 50 ab 02 c0       	mov    eax,0xc002ab50
c0017bfa:	80 fa 02             	cmp    dl,0x2
c0017bfd:	0f 84 84 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c03:	b8 60 ab 02 c0       	mov    eax,0xc002ab60
c0017c08:	80 fa 03             	cmp    dl,0x3
c0017c0b:	0f 84 76 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c11:	b8 70 ab 02 c0       	mov    eax,0xc002ab70
c0017c16:	80 fa 04             	cmp    dl,0x4
c0017c19:	0f 84 68 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c1f:	b8 80 ab 02 c0       	mov    eax,0xc002ab80
c0017c24:	80 fa 05             	cmp    dl,0x5
c0017c27:	0f 84 5a 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c2d:	b8 60 ab 02 c0       	mov    eax,0xc002ab60
c0017c32:	80 fa 07             	cmp    dl,0x7
c0017c35:	0f 84 4c 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c3b:	83 ea 08             	sub    edx,0x8
c0017c3e:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017c43:	80 fa 01             	cmp    dl,0x1
c0017c46:	0f 87 3b 02 00 00    	ja     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c4c:	b8 90 ab 02 c0       	mov    eax,0xc002ab90
c0017c51:	c3                   	ret    
c0017c52:	80 f9 05             	cmp    cl,0x5
c0017c55:	75 45                	jne    c0017c9c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017c57:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017c5a:	b8 a0 ab 02 c0       	mov    eax,0xc002aba0
c0017c5f:	80 f9 02             	cmp    cl,0x2
c0017c62:	0f 86 1f 02 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c68:	80 fa 04             	cmp    dl,0x4
c0017c6b:	0f 84 f3 01 00 00    	je     c0017e64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017c71:	80 fa 07             	cmp    dl,0x7
c0017c74:	0f 84 0d 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c7a:	b8 b0 ab 02 c0       	mov    eax,0xc002abb0
c0017c7f:	80 fa 08             	cmp    dl,0x8
c0017c82:	0f 84 ff 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c88:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017c8d:	80 fa 09             	cmp    dl,0x9
c0017c90:	0f 85 f1 01 00 00    	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c96:	b8 c0 ab 02 c0       	mov    eax,0xc002abc0
c0017c9b:	c3                   	ret    
c0017c9c:	80 f9 06             	cmp    cl,0x6
c0017c9f:	0f 85 85 01 00 00    	jne    c0017e2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017ca5:	b8 d0 ab 02 c0       	mov    eax,0xc002abd0
c0017caa:	80 fa 01             	cmp    dl,0x1
c0017cad:	0f 84 d4 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cb3:	8d 42 fb             	lea    eax,[edx-0x5]
c0017cb6:	3c 01                	cmp    al,0x1
c0017cb8:	0f 86 ac 01 00 00    	jbe    c0017e6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017cbe:	80 fa 03             	cmp    dl,0x3
c0017cc1:	0f 84 a3 01 00 00    	je     c0017e6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017cc7:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017cca:	b8 f0 ab 02 c0       	mov    eax,0xc002abf0
c0017ccf:	80 f9 01             	cmp    cl,0x1
c0017cd2:	0f 86 af 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cd8:	80 fa 09             	cmp    dl,0x9
c0017cdb:	0f 84 8f 01 00 00    	je     c0017e70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017ce1:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017ce4:	80 f9 01             	cmp    cl,0x1
c0017ce7:	0f 86 9a 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ced:	b8 00 ac 02 c0       	mov    eax,0xc002ac00
c0017cf2:	80 fa 0d             	cmp    dl,0xd
c0017cf5:	0f 84 8c 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cfb:	b8 10 ac 02 c0       	mov    eax,0xc002ac10
c0017d00:	80 fa 0e             	cmp    dl,0xe
c0017d03:	0f 84 7e 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d09:	b8 20 ac 02 c0       	mov    eax,0xc002ac20
c0017d0e:	80 fa 0f             	cmp    dl,0xf
c0017d11:	0f 84 70 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d17:	b8 00 ac 02 c0       	mov    eax,0xc002ac00
c0017d1c:	80 fa 15             	cmp    dl,0x15
c0017d1f:	0f 84 62 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d25:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017d28:	b8 20 ac 02 c0       	mov    eax,0xc002ac20
c0017d2d:	80 f9 01             	cmp    cl,0x1
c0017d30:	0f 86 51 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d36:	80 fa 1a             	cmp    dl,0x1a
c0017d39:	0f 84 37 01 00 00    	je     c0017e76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017d3f:	80 fa 1c             	cmp    dl,0x1c
c0017d42:	0f 84 34 01 00 00    	je     c0017e7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017d48:	80 fa 1d             	cmp    dl,0x1d
c0017d4b:	0f 84 36 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d51:	b8 50 ac 02 c0       	mov    eax,0xc002ac50
c0017d56:	80 fa 25             	cmp    dl,0x25
c0017d59:	0f 84 28 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d5f:	8d 4a da             	lea    ecx,[edx-0x26]
c0017d62:	b8 40 ac 02 c0       	mov    eax,0xc002ac40
c0017d67:	80 f9 01             	cmp    cl,0x1
c0017d6a:	0f 86 17 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d70:	b8 60 ac 02 c0       	mov    eax,0xc002ac60
c0017d75:	80 fa 2a             	cmp    dl,0x2a
c0017d78:	0f 84 09 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7e:	b8 50 ac 02 c0       	mov    eax,0xc002ac50
c0017d83:	80 fa 2c             	cmp    dl,0x2c
c0017d86:	0f 84 fb 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8c:	b8 60 ac 02 c0       	mov    eax,0xc002ac60
c0017d91:	80 fa 2d             	cmp    dl,0x2d
c0017d94:	0f 84 ed 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d9a:	b8 30 ac 02 c0       	mov    eax,0xc002ac30
c0017d9f:	80 fa 2e             	cmp    dl,0x2e
c0017da2:	0f 84 df 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da8:	b8 50 ac 02 c0       	mov    eax,0xc002ac50
c0017dad:	80 fa 2f             	cmp    dl,0x2f
c0017db0:	0f 84 d1 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017db9:	b8 40 ac 02 c0       	mov    eax,0xc002ac40
c0017dbe:	80 f9 01             	cmp    cl,0x1
c0017dc1:	0f 86 c0 00 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc7:	b8 70 ac 02 c0       	mov    eax,0xc002ac70
c0017dcc:	80 fa 37             	cmp    dl,0x37
c0017dcf:	0f 84 b2 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd5:	b8 80 ac 02 c0       	mov    eax,0xc002ac80
c0017dda:	80 fa 3a             	cmp    dl,0x3a
c0017ddd:	0f 84 a4 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de3:	b8 90 ac 02 c0       	mov    eax,0xc002ac90
c0017de8:	80 fa 3c             	cmp    dl,0x3c
c0017deb:	0f 84 96 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df1:	b8 a0 ac 02 c0       	mov    eax,0xc002aca0
c0017df6:	80 fa 3d             	cmp    dl,0x3d
c0017df9:	0f 84 88 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dff:	b8 80 ac 02 c0       	mov    eax,0xc002ac80
c0017e04:	80 fa 3e             	cmp    dl,0x3e
c0017e07:	74 7e                	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e09:	8d 42 bb             	lea    eax,[edx-0x45]
c0017e0c:	3c 01                	cmp    al,0x1
c0017e0e:	76 72                	jbe    c0017e82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e10:	80 fa 3f             	cmp    dl,0x3f
c0017e13:	74 6d                	je     c0017e82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e15:	80 fa 4a             	cmp    dl,0x4a
c0017e18:	74 0a                	je     c0017e24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017e1a:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017e1f:	80 fa 4d             	cmp    dl,0x4d
c0017e22:	75 63                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e24:	b8 70 ac 02 c0       	mov    eax,0xc002ac70
c0017e29:	c3                   	ret    
c0017e2a:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017e2f:	80 f9 0b             	cmp    cl,0xb
c0017e32:	75 0a                	jne    c0017e3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017e34:	fe ca                	dec    dl
c0017e36:	75 4f                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e38:	b8 b0 ac 02 c0       	mov    eax,0xc002acb0
c0017e3d:	c3                   	ret    
c0017e3e:	80 f9 0f             	cmp    cl,0xf
c0017e41:	75 44                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e43:	b8 c0 ac 02 c0       	mov    eax,0xc002acc0
c0017e48:	80 fa 02             	cmp    dl,0x2
c0017e4b:	76 3a                	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e4d:	8d 42 fd             	lea    eax,[edx-0x3]
c0017e50:	3c 01                	cmp    al,0x1
c0017e52:	76 0a                	jbe    c0017e5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017e54:	b8 ce 91 02 c0       	mov    eax,0xc00291ce
c0017e59:	80 fa 06             	cmp    dl,0x6
c0017e5c:	75 29                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e5e:	b8 d0 ac 02 c0       	mov    eax,0xc002acd0
c0017e63:	c3                   	ret    
c0017e64:	b8 b0 ab 02 c0       	mov    eax,0xc002abb0
c0017e69:	c3                   	ret    
c0017e6a:	b8 e0 ab 02 c0       	mov    eax,0xc002abe0
c0017e6f:	c3                   	ret    
c0017e70:	b8 00 ac 02 c0       	mov    eax,0xc002ac00
c0017e75:	c3                   	ret    
c0017e76:	b8 30 ac 02 c0       	mov    eax,0xc002ac30
c0017e7b:	c3                   	ret    
c0017e7c:	b8 40 ac 02 c0       	mov    eax,0xc002ac40
c0017e81:	c3                   	ret    
c0017e82:	b8 90 ac 02 c0       	mov    eax,0xc002ac90
c0017e87:	c3                   	ret    

c0017e88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017e88:	60                   	pusha  
c0017e89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e95:	9c                   	pushf  
c0017e96:	fa                   	cli    
c0017e97:	0f 09                	wbinvd 
c0017e99:	0f 30                	wrmsr  
c0017e9b:	9d                   	popf   
c0017e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ea0:	89 02                	mov    DWORD PTR [edx],eax
c0017ea2:	61                   	popa   
c0017ea3:	c3                   	ret    

c0017ea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017ea4:	60                   	pusha  
c0017ea5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017ea9:	9c                   	pushf  
c0017eaa:	fa                   	cli    
c0017eab:	0f 09                	wbinvd 
c0017ead:	31 c0                	xor    eax,eax
c0017eaf:	31 d2                	xor    edx,edx
c0017eb1:	0f 32                	rdmsr  
c0017eb3:	9d                   	popf   
c0017eb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017eb8:	89 02                	mov    DWORD PTR [edx],eax
c0017eba:	61                   	popa   
c0017ebb:	c3                   	ret    

c0017ebc <CPU::AMD_K6_writeback(int, int, int)>:
c0017ebc:	56                   	push   esi
c0017ebd:	53                   	push   ebx
c0017ebe:	83 ec 10             	sub    esp,0x10
c0017ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017eca:	75 5d                	jne    c0017f29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017ecc:	83 f8 08             	cmp    eax,0x8
c0017ecf:	75 09                	jne    c0017eda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017ed1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017ed6:	7e 13                	jle    c0017eeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017ed8:	eb 30                	jmp    c0017f0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017eda:	83 f8 06             	cmp    eax,0x6
c0017edd:	7c 4a                	jl     c0017f29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017edf:	83 f8 07             	cmp    eax,0x7
c0017ee2:	7e 07                	jle    c0017eeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017ee4:	83 f8 09             	cmp    eax,0x9
c0017ee7:	74 21                	je     c0017f0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017ee9:	eb 3e                	jmp    c0017f29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017eeb:	89 e6                	mov    esi,esp
c0017eed:	8b 1d 84 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b884
c0017ef3:	56                   	push   esi
c0017ef4:	c1 eb 15             	shr    ebx,0x15
c0017ef7:	68 82 00 00 c0       	push   0xc0000082
c0017efc:	83 e3 7e             	and    ebx,0x7e
c0017eff:	e8 a0 ff ff ff       	call   c0017ea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f04:	56                   	push   esi
c0017f05:	6a 00                	push   0x0
c0017f07:	53                   	push   ebx
c0017f08:	eb 12                	jmp    c0017f1c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017f0a:	89 e3                	mov    ebx,esp
c0017f0c:	53                   	push   ebx
c0017f0d:	68 82 00 00 c0       	push   0xc0000082
c0017f12:	e8 8d ff ff ff       	call   c0017ea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f17:	53                   	push   ebx
c0017f18:	6a 00                	push   0x0
c0017f1a:	6a 00                	push   0x0
c0017f1c:	68 82 00 00 c0       	push   0xc0000082
c0017f21:	e8 62 ff ff ff       	call   c0017e88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017f26:	83 c4 18             	add    esp,0x18
c0017f29:	83 c4 10             	add    esp,0x10
c0017f2c:	5b                   	pop    ebx
c0017f2d:	5e                   	pop    esi
c0017f2e:	c3                   	ret    
c0017f2f:	90                   	nop

c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017f30:	55                   	push   ebp
c0017f31:	57                   	push   edi
c0017f32:	56                   	push   esi
c0017f33:	53                   	push   ebx
c0017f34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017f3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f40:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017f44:	39 05 e0 ad 02 c0    	cmp    DWORD PTR ds:0xc002ade0,eax
c0017f4a:	75 23                	jne    c0017f6f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017f4c:	a1 4c c3 02 c0       	mov    eax,ds:0xc002c34c
c0017f51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f55:	89 06                	mov    DWORD PTR [esi],eax
c0017f57:	a1 48 c3 02 c0       	mov    eax,ds:0xc002c348
c0017f5c:	89 07                	mov    DWORD PTR [edi],eax
c0017f5e:	a1 44 c3 02 c0       	mov    eax,ds:0xc002c344
c0017f63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017f66:	a1 40 c3 02 c0       	mov    eax,ds:0xc002c340
c0017f6b:	89 02                	mov    DWORD PTR [edx],eax
c0017f6d:	eb 3f                	jmp    c0017fae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017f6f:	31 c9                	xor    ecx,ecx
c0017f71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f75:	0f a2                	cpuid  
c0017f77:	89 06                	mov    DWORD PTR [esi],eax
c0017f79:	89 1f                	mov    DWORD PTR [edi],ebx
c0017f7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f7f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017f82:	89 10                	mov    DWORD PTR [eax],edx
c0017f84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f88:	a3 e0 ad 02 c0       	mov    ds:0xc002ade0,eax
c0017f8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0017f8f:	a3 4c c3 02 c0       	mov    ds:0xc002c34c,eax
c0017f94:	8b 07                	mov    eax,DWORD PTR [edi]
c0017f96:	a3 48 c3 02 c0       	mov    ds:0xc002c348,eax
c0017f9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017f9e:	a3 44 c3 02 c0       	mov    ds:0xc002c344,eax
c0017fa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017fa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fa9:	a3 40 c3 02 c0       	mov    ds:0xc002c340,eax
c0017fae:	5b                   	pop    ebx
c0017faf:	5e                   	pop    esi
c0017fb0:	5f                   	pop    edi
c0017fb1:	5d                   	pop    ebp
c0017fb2:	c3                   	ret    
c0017fb3:	90                   	nop

c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>:
c0017fb4:	83 ec 10             	sub    esp,0x10
c0017fb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fbb:	50                   	push   eax
c0017fbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fc0:	50                   	push   eax
c0017fc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fc5:	50                   	push   eax
c0017fc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fca:	50                   	push   eax
c0017fcb:	6a 01                	push   0x1
c0017fcd:	e8 5e ff ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017fda:	0f 95 c0             	setne  al
c0017fdd:	83 c4 24             	add    esp,0x24
c0017fe0:	c3                   	ret    
c0017fe1:	90                   	nop

c0017fe2 <CPU::cpuidCheckECX(unsigned int)>:
c0017fe2:	83 ec 10             	sub    esp,0x10
c0017fe5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fe9:	50                   	push   eax
c0017fea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fee:	50                   	push   eax
c0017fef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ff3:	50                   	push   eax
c0017ff4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ff8:	50                   	push   eax
c0017ff9:	6a 01                	push   0x1
c0017ffb:	e8 30 ff ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018004:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018008:	0f 95 c0             	setne  al
c001800b:	83 c4 24             	add    esp,0x24
c001800e:	c3                   	ret    
c001800f:	90                   	nop

c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018010:	83 ec 10             	sub    esp,0x10
c0018013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018017:	50                   	push   eax
c0018018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001801c:	50                   	push   eax
c001801d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018021:	50                   	push   eax
c0018022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018026:	50                   	push   eax
c0018027:	6a 07                	push   0x7
c0018029:	e8 02 ff ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001802e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018032:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018036:	0f 95 c0             	setne  al
c0018039:	83 c4 24             	add    esp,0x24
c001803c:	c3                   	ret    
c001803d:	90                   	nop

c001803e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001803e:	83 ec 10             	sub    esp,0x10
c0018041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018045:	50                   	push   eax
c0018046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001804a:	50                   	push   eax
c001804b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001804f:	50                   	push   eax
c0018050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018054:	50                   	push   eax
c0018055:	6a 07                	push   0x7
c0018057:	e8 d4 fe ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001805c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018060:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018064:	0f 95 c0             	setne  al
c0018067:	83 c4 24             	add    esp,0x24
c001806a:	c3                   	ret    
c001806b:	90                   	nop

c001806c <CPU::CPU()>:
c001806c:	83 ec 0c             	sub    esp,0xc
c001806f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018073:	83 ec 08             	sub    esp,0x8
c0018076:	68 ce 91 02 c0       	push   0xc00291ce
c001807b:	50                   	push   eax
c001807c:	e8 eb bb ff ff       	call   c0013c6c <Device::Device(char const*)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	ba a8 92 02 c0       	mov    edx,0xc00292a8
c0018089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001808d:	89 10                	mov    DWORD PTR [eax],edx
c001808f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018093:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001809d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a1:	05 78 01 00 00       	add    eax,0x178
c00180a6:	83 ec 0c             	sub    esp,0xc
c00180a9:	50                   	push   eax
c00180aa:	e8 29 6c ff ff       	call   c000ecd8 <GDT::GDT()>
c00180af:	83 c4 10             	add    esp,0x10
c00180b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b6:	05 7c 09 00 00       	add    eax,0x97c
c00180bb:	83 ec 0c             	sub    esp,0xc
c00180be:	50                   	push   eax
c00180bf:	e8 76 6e ff ff       	call   c000ef3a <IDT::IDT()>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cb:	05 7c 11 00 00       	add    eax,0x117c
c00180d0:	83 ec 0c             	sub    esp,0xc
c00180d3:	50                   	push   eax
c00180d4:	e8 f5 8e ff ff       	call   c0010fce <TSS::TSS()>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00180e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180eb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00180f5:	90                   	nop
c00180f6:	83 c4 0c             	add    esp,0xc
c00180f9:	c3                   	ret    

c00180fa <CPU::displayFeatures()>:
c00180fa:	53                   	push   ebx
c00180fb:	83 ec 10             	sub    esp,0x10
c00180fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018102:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018108:	68 dc 8e 02 c0       	push   0xc0028edc
c001810d:	e8 7b a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018112:	59                   	pop    ecx
c0018113:	58                   	pop    eax
c0018114:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001811a:	50                   	push   eax
c001811b:	68 ed 8e 02 c0       	push   0xc0028eed
c0018120:	e8 68 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018125:	58                   	pop    eax
c0018126:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001812c:	5a                   	pop    edx
c001812d:	c1 e8 0e             	shr    eax,0xe
c0018130:	0f b6 c0             	movzx  eax,al
c0018133:	50                   	push   eax
c0018134:	68 fe 8e 02 c0       	push   0xc0028efe
c0018139:	e8 4f a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001813e:	59                   	pop    ecx
c001813f:	58                   	pop    eax
c0018140:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018146:	66 c1 e8 06          	shr    ax,0x6
c001814a:	0f b6 c0             	movzx  eax,al
c001814d:	50                   	push   eax
c001814e:	68 0f 8f 02 c0       	push   0xc0028f0f
c0018153:	e8 35 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018158:	c7 04 24 22 93 02 c0 	mov    DWORD PTR [esp],0xc0029322
c001815f:	e8 29 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c001816c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018173:	74 05                	je     c001817a <CPU::displayFeatures()+0x80>
c0018175:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c001817a:	52                   	push   edx
c001817b:	52                   	push   edx
c001817c:	50                   	push   eax
c001817d:	68 20 8f 02 c0       	push   0xc0028f20
c0018182:	e8 06 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c001818f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018196:	78 05                	js     c001819d <CPU::displayFeatures()+0xa3>
c0018198:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c001819d:	51                   	push   ecx
c001819e:	51                   	push   ecx
c001819f:	50                   	push   eax
c00181a0:	68 37 8f 02 c0       	push   0xc0028f37
c00181a5:	e8 e3 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00181aa:	83 c4 10             	add    esp,0x10
c00181ad:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c00181b2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00181b9:	75 05                	jne    c00181c0 <CPU::displayFeatures()+0xc6>
c00181bb:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c00181c0:	52                   	push   edx
c00181c1:	52                   	push   edx
c00181c2:	50                   	push   eax
c00181c3:	68 4e 8f 02 c0       	push   0xc0028f4e
c00181c8:	e8 c0 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00181cd:	83 c4 10             	add    esp,0x10
c00181d0:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c00181d5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00181dc:	75 05                	jne    c00181e3 <CPU::displayFeatures()+0xe9>
c00181de:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c00181e3:	51                   	push   ecx
c00181e4:	51                   	push   ecx
c00181e5:	50                   	push   eax
c00181e6:	68 65 8f 02 c0       	push   0xc0028f65
c00181eb:	e8 9d a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c00181f8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00181ff:	75 05                	jne    c0018206 <CPU::displayFeatures()+0x10c>
c0018201:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c0018206:	52                   	push   edx
c0018207:	52                   	push   edx
c0018208:	50                   	push   eax
c0018209:	68 7c 8f 02 c0       	push   0xc0028f7c
c001820e:	e8 7a a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c001821b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018222:	75 05                	jne    c0018229 <CPU::displayFeatures()+0x12f>
c0018224:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c0018229:	51                   	push   ecx
c001822a:	51                   	push   ecx
c001822b:	50                   	push   eax
c001822c:	68 93 8f 02 c0       	push   0xc0028f93
c0018231:	e8 57 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018236:	83 c4 10             	add    esp,0x10
c0018239:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c001823e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018245:	75 05                	jne    c001824c <CPU::displayFeatures()+0x152>
c0018247:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c001824c:	52                   	push   edx
c001824d:	52                   	push   edx
c001824e:	50                   	push   eax
c001824f:	68 aa 8f 02 c0       	push   0xc0028faa
c0018254:	e8 34 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c0018261:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018268:	75 05                	jne    c001826f <CPU::displayFeatures()+0x175>
c001826a:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c001826f:	51                   	push   ecx
c0018270:	51                   	push   ecx
c0018271:	50                   	push   eax
c0018272:	68 c1 8f 02 c0       	push   0xc0028fc1
c0018277:	e8 11 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001827c:	83 c4 10             	add    esp,0x10
c001827f:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c0018284:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001828b:	75 05                	jne    c0018292 <CPU::displayFeatures()+0x198>
c001828d:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c0018292:	52                   	push   edx
c0018293:	52                   	push   edx
c0018294:	50                   	push   eax
c0018295:	68 d8 8f 02 c0       	push   0xc0028fd8
c001829a:	e8 ee a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c00182a7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00182ae:	75 05                	jne    c00182b5 <CPU::displayFeatures()+0x1bb>
c00182b0:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c00182b5:	51                   	push   ecx
c00182b6:	51                   	push   ecx
c00182b7:	50                   	push   eax
c00182b8:	68 ef 8f 02 c0       	push   0xc0028fef
c00182bd:	e8 cb a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c00182ca:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00182d1:	75 05                	jne    c00182d8 <CPU::displayFeatures()+0x1de>
c00182d3:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c00182d8:	52                   	push   edx
c00182d9:	52                   	push   edx
c00182da:	50                   	push   eax
c00182db:	68 06 90 02 c0       	push   0xc0029006
c00182e0:	e8 a8 a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00182e5:	83 c4 10             	add    esp,0x10
c00182e8:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c00182ed:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00182f4:	75 05                	jne    c00182fb <CPU::displayFeatures()+0x201>
c00182f6:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c00182fb:	51                   	push   ecx
c00182fc:	51                   	push   ecx
c00182fd:	50                   	push   eax
c00182fe:	68 1d 90 02 c0       	push   0xc002901d
c0018303:	e8 85 a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c0018310:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018317:	75 05                	jne    c001831e <CPU::displayFeatures()+0x224>
c0018319:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c001831e:	52                   	push   edx
c001831f:	52                   	push   edx
c0018320:	50                   	push   eax
c0018321:	68 34 90 02 c0       	push   0xc0029034
c0018326:	e8 62 a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c0018333:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001833a:	78 05                	js     c0018341 <CPU::displayFeatures()+0x247>
c001833c:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c0018341:	51                   	push   ecx
c0018342:	51                   	push   ecx
c0018343:	50                   	push   eax
c0018344:	68 4b 90 02 c0       	push   0xc002904b
c0018349:	e8 3f a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	b8 b8 7a 02 c0       	mov    eax,0xc0027ab8
c0018356:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001835d:	75 05                	jne    c0018364 <CPU::displayFeatures()+0x26a>
c001835f:	b8 bc 7a 02 c0       	mov    eax,0xc0027abc
c0018364:	52                   	push   edx
c0018365:	52                   	push   edx
c0018366:	50                   	push   eax
c0018367:	68 62 90 02 c0       	push   0xc0029062
c001836c:	e8 1c a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018371:	83 c4 18             	add    esp,0x18
c0018374:	5b                   	pop    ebx
c0018375:	c3                   	ret    

c0018376 <CPU::detectFeatures()>:
c0018376:	55                   	push   ebp
c0018377:	57                   	push   edi
c0018378:	56                   	push   esi
c0018379:	53                   	push   ebx
c001837a:	83 ec 50             	sub    esp,0x50
c001837d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018381:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001838b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018392:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018398:	6a 0d                	push   0xd
c001839a:	6a 00                	push   0x0
c001839c:	57                   	push   edi
c001839d:	e8 d9 82 fe ff       	call   c000067b <memset>
c00183a2:	83 c4 10             	add    esp,0x10
c00183a5:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00183aa:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00183b1:	0f 84 20 09 00 00    	je     c0018cd7 <CPU::detectFeatures()+0x961>
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	6a 10                	push   0x10
c00183bc:	e8 f3 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c00183c1:	83 e0 01             	and    eax,0x1
c00183c4:	8d 14 00             	lea    edx,[eax+eax*1]
c00183c7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00183cd:	83 e0 fd             	and    eax,0xfffffffd
c00183d0:	09 d0                	or     eax,edx
c00183d2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00183d8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00183df:	e8 d0 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c00183e4:	83 e0 01             	and    eax,0x1
c00183e7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00183ee:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00183f4:	83 e0 fb             	and    eax,0xfffffffb
c00183f7:	09 d0                	or     eax,edx
c00183f9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00183ff:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018406:	e8 a9 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c001840b:	83 e0 01             	and    eax,0x1
c001840e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018415:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001841b:	83 e0 f7             	and    eax,0xfffffff7
c001841e:	09 d0                	or     eax,edx
c0018420:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018426:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001842d:	e8 82 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018432:	83 e0 01             	and    eax,0x1
c0018435:	c1 e0 04             	shl    eax,0x4
c0018438:	88 c2                	mov    dl,al
c001843a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018440:	83 e0 ef             	and    eax,0xffffffef
c0018443:	09 d0                	or     eax,edx
c0018445:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001844b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018452:	e8 5d fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018457:	83 e0 01             	and    eax,0x1
c001845a:	c1 e0 05             	shl    eax,0x5
c001845d:	88 c2                	mov    dl,al
c001845f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018465:	83 e0 df             	and    eax,0xffffffdf
c0018468:	09 d0                	or     eax,edx
c001846a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018470:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018477:	e8 38 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c001847c:	83 e0 01             	and    eax,0x1
c001847f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018482:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018488:	83 e0 fd             	and    eax,0xfffffffd
c001848b:	09 d0                	or     eax,edx
c001848d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018493:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001849a:	e8 15 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c001849f:	83 e0 01             	and    eax,0x1
c00184a2:	c1 e0 06             	shl    eax,0x6
c00184a5:	88 c2                	mov    dl,al
c00184a7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00184ad:	83 e0 bf             	and    eax,0xffffffbf
c00184b0:	09 d0                	or     eax,edx
c00184b2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00184b8:	58                   	pop    eax
c00184b9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00184bd:	56                   	push   esi
c00184be:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00184c2:	55                   	push   ebp
c00184c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184c7:	50                   	push   eax
c00184c8:	8d 54 24 28          	lea    edx,[esp+0x28]
c00184cc:	52                   	push   edx
c00184cd:	6a 00                	push   0x0
c00184cf:	e8 5c fa ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184d4:	83 c4 1c             	add    esp,0x1c
c00184d7:	6a 04                	push   0x4
c00184d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00184dd:	50                   	push   eax
c00184de:	57                   	push   edi
c00184df:	e8 61 81 fe ff       	call   c0000645 <memcpy>
c00184e4:	83 c4 0c             	add    esp,0xc
c00184e7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00184ed:	6a 04                	push   0x4
c00184ef:	56                   	push   esi
c00184f0:	50                   	push   eax
c00184f1:	e8 4f 81 fe ff       	call   c0000645 <memcpy>
c00184f6:	83 c4 0c             	add    esp,0xc
c00184f9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00184ff:	6a 04                	push   0x4
c0018501:	55                   	push   ebp
c0018502:	50                   	push   eax
c0018503:	e8 3d 81 fe ff       	call   c0000645 <memcpy>
c0018508:	58                   	pop    eax
c0018509:	5a                   	pop    edx
c001850a:	68 79 90 02 c0       	push   0xc0029079
c001850f:	57                   	push   edi
c0018510:	e8 56 82 fe ff       	call   c000076b <strcmp>
c0018515:	83 c4 10             	add    esp,0x10
c0018518:	85 c0                	test   eax,eax
c001851a:	75 0f                	jne    c001852b <CPU::detectFeatures()+0x1b5>
c001851c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018526:	e9 22 02 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001852b:	50                   	push   eax
c001852c:	50                   	push   eax
c001852d:	68 86 90 02 c0       	push   0xc0029086
c0018532:	57                   	push   edi
c0018533:	e8 33 82 fe ff       	call   c000076b <strcmp>
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	85 c0                	test   eax,eax
c001853d:	74 dd                	je     c001851c <CPU::detectFeatures()+0x1a6>
c001853f:	51                   	push   ecx
c0018540:	51                   	push   ecx
c0018541:	68 93 90 02 c0       	push   0xc0029093
c0018546:	57                   	push   edi
c0018547:	e8 1f 82 fe ff       	call   c000076b <strcmp>
c001854c:	83 c4 10             	add    esp,0x10
c001854f:	85 c0                	test   eax,eax
c0018551:	74 2a                	je     c001857d <CPU::detectFeatures()+0x207>
c0018553:	52                   	push   edx
c0018554:	52                   	push   edx
c0018555:	68 a0 90 02 c0       	push   0xc00290a0
c001855a:	57                   	push   edi
c001855b:	e8 0b 82 fe ff       	call   c000076b <strcmp>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	85 c0                	test   eax,eax
c0018565:	74 16                	je     c001857d <CPU::detectFeatures()+0x207>
c0018567:	50                   	push   eax
c0018568:	50                   	push   eax
c0018569:	68 ad 90 02 c0       	push   0xc00290ad
c001856e:	57                   	push   edi
c001856f:	e8 f7 81 fe ff       	call   c000076b <strcmp>
c0018574:	83 c4 10             	add    esp,0x10
c0018577:	85 c0                	test   eax,eax
c0018579:	74 48                	je     c00185c3 <CPU::detectFeatures()+0x24d>
c001857b:	eb 0f                	jmp    c001858c <CPU::detectFeatures()+0x216>
c001857d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018587:	e9 c1 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001858c:	50                   	push   eax
c001858d:	50                   	push   eax
c001858e:	68 ba 90 02 c0       	push   0xc00290ba
c0018593:	57                   	push   edi
c0018594:	e8 d2 81 fe ff       	call   c000076b <strcmp>
c0018599:	83 c4 10             	add    esp,0x10
c001859c:	85 c0                	test   eax,eax
c001859e:	74 23                	je     c00185c3 <CPU::detectFeatures()+0x24d>
c00185a0:	50                   	push   eax
c00185a1:	50                   	push   eax
c00185a2:	68 c7 90 02 c0       	push   0xc00290c7
c00185a7:	57                   	push   edi
c00185a8:	e8 be 81 fe ff       	call   c000076b <strcmp>
c00185ad:	83 c4 10             	add    esp,0x10
c00185b0:	85 c0                	test   eax,eax
c00185b2:	75 1e                	jne    c00185d2 <CPU::detectFeatures()+0x25c>
c00185b4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00185be:	e9 8a 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00185c3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00185cd:	e9 7b 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00185d2:	50                   	push   eax
c00185d3:	50                   	push   eax
c00185d4:	68 d4 90 02 c0       	push   0xc00290d4
c00185d9:	57                   	push   edi
c00185da:	e8 8c 81 fe ff       	call   c000076b <strcmp>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	85 c0                	test   eax,eax
c00185e4:	75 0f                	jne    c00185f5 <CPU::detectFeatures()+0x27f>
c00185e6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00185f0:	e9 58 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00185f5:	50                   	push   eax
c00185f6:	50                   	push   eax
c00185f7:	68 93 90 02 c0       	push   0xc0029093
c00185fc:	57                   	push   edi
c00185fd:	e8 69 81 fe ff       	call   c000076b <strcmp>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	85 c0                	test   eax,eax
c0018607:	75 0f                	jne    c0018618 <CPU::detectFeatures()+0x2a2>
c0018609:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018613:	e9 35 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c0018618:	50                   	push   eax
c0018619:	50                   	push   eax
c001861a:	68 e1 90 02 c0       	push   0xc00290e1
c001861f:	57                   	push   edi
c0018620:	e8 46 81 fe ff       	call   c000076b <strcmp>
c0018625:	83 c4 10             	add    esp,0x10
c0018628:	85 c0                	test   eax,eax
c001862a:	75 0f                	jne    c001863b <CPU::detectFeatures()+0x2c5>
c001862c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018636:	e9 12 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001863b:	51                   	push   ecx
c001863c:	51                   	push   ecx
c001863d:	68 ee 90 02 c0       	push   0xc00290ee
c0018642:	57                   	push   edi
c0018643:	e8 23 81 fe ff       	call   c000076b <strcmp>
c0018648:	83 c4 10             	add    esp,0x10
c001864b:	85 c0                	test   eax,eax
c001864d:	75 0f                	jne    c001865e <CPU::detectFeatures()+0x2e8>
c001864f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018659:	e9 ef 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001865e:	52                   	push   edx
c001865f:	52                   	push   edx
c0018660:	68 fb 90 02 c0       	push   0xc00290fb
c0018665:	57                   	push   edi
c0018666:	e8 00 81 fe ff       	call   c000076b <strcmp>
c001866b:	83 c4 10             	add    esp,0x10
c001866e:	85 c0                	test   eax,eax
c0018670:	75 0f                	jne    c0018681 <CPU::detectFeatures()+0x30b>
c0018672:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001867c:	e9 cc 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c0018681:	50                   	push   eax
c0018682:	50                   	push   eax
c0018683:	68 08 91 02 c0       	push   0xc0029108
c0018688:	57                   	push   edi
c0018689:	e8 dd 80 fe ff       	call   c000076b <strcmp>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	85 c0                	test   eax,eax
c0018693:	75 0f                	jne    c00186a4 <CPU::detectFeatures()+0x32e>
c0018695:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001869f:	e9 a9 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00186a4:	50                   	push   eax
c00186a5:	50                   	push   eax
c00186a6:	68 15 91 02 c0       	push   0xc0029115
c00186ab:	57                   	push   edi
c00186ac:	e8 ba 80 fe ff       	call   c000076b <strcmp>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	85 c0                	test   eax,eax
c00186b6:	75 0f                	jne    c00186c7 <CPU::detectFeatures()+0x351>
c00186b8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00186c2:	e9 86 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00186c7:	50                   	push   eax
c00186c8:	50                   	push   eax
c00186c9:	68 22 91 02 c0       	push   0xc0029122
c00186ce:	57                   	push   edi
c00186cf:	e8 97 80 fe ff       	call   c000076b <strcmp>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	85 c0                	test   eax,eax
c00186d9:	75 0c                	jne    c00186e7 <CPU::detectFeatures()+0x371>
c00186db:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00186e5:	eb 66                	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00186e7:	50                   	push   eax
c00186e8:	50                   	push   eax
c00186e9:	68 2f 91 02 c0       	push   0xc002912f
c00186ee:	57                   	push   edi
c00186ef:	e8 77 80 fe ff       	call   c000076b <strcmp>
c00186f4:	83 c4 10             	add    esp,0x10
c00186f7:	85 c0                	test   eax,eax
c00186f9:	75 0c                	jne    c0018707 <CPU::detectFeatures()+0x391>
c00186fb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018705:	eb 46                	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c0018707:	50                   	push   eax
c0018708:	50                   	push   eax
c0018709:	68 3c 91 02 c0       	push   0xc002913c
c001870e:	57                   	push   edi
c001870f:	e8 57 80 fe ff       	call   c000076b <strcmp>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	85 c0                	test   eax,eax
c0018719:	74 e0                	je     c00186fb <CPU::detectFeatures()+0x385>
c001871b:	50                   	push   eax
c001871c:	50                   	push   eax
c001871d:	68 49 91 02 c0       	push   0xc0029149
c0018722:	57                   	push   edi
c0018723:	e8 43 80 fe ff       	call   c000076b <strcmp>
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	85 c0                	test   eax,eax
c001872d:	74 cc                	je     c00186fb <CPU::detectFeatures()+0x385>
c001872f:	51                   	push   ecx
c0018730:	51                   	push   ecx
c0018731:	68 56 91 02 c0       	push   0xc0029156
c0018736:	57                   	push   edi
c0018737:	e8 2f 80 fe ff       	call   c000076b <strcmp>
c001873c:	83 c4 10             	add    esp,0x10
c001873f:	85 c0                	test   eax,eax
c0018741:	74 b8                	je     c00186fb <CPU::detectFeatures()+0x385>
c0018743:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001874d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018752:	0f 86 be 00 00 00    	jbe    c0018816 <CPU::detectFeatures()+0x4a0>
c0018758:	83 ec 0c             	sub    esp,0xc
c001875b:	68 80 00 00 00       	push   0x80
c0018760:	e8 ab f8 ff ff       	call   c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018765:	83 e0 01             	and    eax,0x1
c0018768:	c1 e0 06             	shl    eax,0x6
c001876b:	88 c2                	mov    dl,al
c001876d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018773:	83 e0 bf             	and    eax,0xffffffbf
c0018776:	09 d0                	or     eax,edx
c0018778:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001877e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018785:	e8 86 f8 ff ff       	call   c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001878a:	83 e0 01             	and    eax,0x1
c001878d:	c1 e0 04             	shl    eax,0x4
c0018790:	88 c2                	mov    dl,al
c0018792:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018798:	83 e0 ef             	and    eax,0xffffffef
c001879b:	09 d0                	or     eax,edx
c001879d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00187a3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00187aa:	e8 61 f8 ff ff       	call   c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00187af:	c1 e0 07             	shl    eax,0x7
c00187b2:	88 c2                	mov    dl,al
c00187b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187ba:	83 e0 7f             	and    eax,0x7f
c00187bd:	09 d0                	or     eax,edx
c00187bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187c5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00187cc:	e8 6d f8 ff ff       	call   c001803e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00187d1:	83 e0 01             	and    eax,0x1
c00187d4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00187db:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00187e1:	83 e0 f7             	and    eax,0xfffffff7
c00187e4:	09 d0                	or     eax,edx
c00187e6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00187ec:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00187f3:	e8 46 f8 ff ff       	call   c001803e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	83 e0 01             	and    eax,0x1
c00187fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018805:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001880b:	83 e0 fb             	and    eax,0xfffffffb
c001880e:	09 d0                	or     eax,edx
c0018810:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018816:	83 ec 0c             	sub    esp,0xc
c0018819:	56                   	push   esi
c001881a:	55                   	push   ebp
c001881b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001881f:	57                   	push   edi
c0018820:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018824:	50                   	push   eax
c0018825:	6a 01                	push   0x1
c0018827:	e8 04 f7 ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001882c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018830:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018836:	88 ca                	mov    dl,cl
c0018838:	83 e0 f0             	and    eax,0xfffffff0
c001883b:	83 e2 0f             	and    edx,0xf
c001883e:	09 d0                	or     eax,edx
c0018840:	88 ca                	mov    dl,cl
c0018842:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018848:	c0 ea 04             	shr    dl,0x4
c001884b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001884f:	0f b6 c2             	movzx  eax,dl
c0018852:	83 c4 20             	add    esp,0x20
c0018855:	c1 e0 06             	shl    eax,0x6
c0018858:	89 c5                	mov    ebp,eax
c001885a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018860:	66 25 3f c0          	and    ax,0xc03f
c0018864:	09 e8                	or     eax,ebp
c0018866:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001886d:	89 c8                	mov    eax,ecx
c001886f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018875:	c1 e8 08             	shr    eax,0x8
c0018878:	83 e2 3f             	and    edx,0x3f
c001887b:	83 e0 0f             	and    eax,0xf
c001887e:	89 c5                	mov    ebp,eax
c0018880:	c1 e5 06             	shl    ebp,0x6
c0018883:	09 d5                	or     ebp,edx
c0018885:	89 ea                	mov    edx,ebp
c0018887:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001888d:	88 c2                	mov    dl,al
c001888f:	c0 ea 02             	shr    dl,0x2
c0018892:	89 d5                	mov    ebp,edx
c0018894:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001889a:	83 e2 c0             	and    edx,0xffffffc0
c001889d:	09 d5                	or     ebp,edx
c001889f:	89 ea                	mov    edx,ebp
c00188a1:	89 cd                	mov    ebp,ecx
c00188a3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00188a9:	c1 ed 0c             	shr    ebp,0xc
c00188ac:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00188b2:	83 e5 03             	and    ebp,0x3
c00188b5:	83 e2 cf             	and    edx,0xffffffcf
c00188b8:	c1 e5 04             	shl    ebp,0x4
c00188bb:	09 d5                	or     ebp,edx
c00188bd:	3c 06                	cmp    al,0x6
c00188bf:	89 ea                	mov    edx,ebp
c00188c1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00188c7:	74 04                	je     c00188cd <CPU::detectFeatures()+0x557>
c00188c9:	3c 0f                	cmp    al,0xf
c00188cb:	75 5c                	jne    c0018929 <CPU::detectFeatures()+0x5b3>
c00188cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00188d1:	89 cd                	mov    ebp,ecx
c00188d3:	c1 ed 10             	shr    ebp,0x10
c00188d6:	c1 e5 04             	shl    ebp,0x4
c00188d9:	09 ea                	or     edx,ebp
c00188db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00188e1:	0f b6 d2             	movzx  edx,dl
c00188e4:	66 81 e5 3f c0       	and    bp,0xc03f
c00188e9:	c1 e2 06             	shl    edx,0x6
c00188ec:	09 ea                	or     edx,ebp
c00188ee:	3c 0f                	cmp    al,0xf
c00188f0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00188f7:	75 30                	jne    c0018929 <CPU::detectFeatures()+0x5b3>
c00188f9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00188ff:	c1 e9 14             	shr    ecx,0x14
c0018902:	83 e0 3f             	and    eax,0x3f
c0018905:	83 c1 0f             	add    ecx,0xf
c0018908:	88 ca                	mov    dl,cl
c001890a:	c0 e9 02             	shr    cl,0x2
c001890d:	c1 e2 06             	shl    edx,0x6
c0018910:	09 d0                	or     eax,edx
c0018912:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018918:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001891e:	83 e0 c0             	and    eax,0xffffffc0
c0018921:	09 c1                	or     ecx,eax
c0018923:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018929:	83 ec 0c             	sub    esp,0xc
c001892c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018933:	56                   	push   esi
c0018934:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018938:	50                   	push   eax
c0018939:	57                   	push   edi
c001893a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001893e:	55                   	push   ebp
c001893f:	68 00 00 00 80       	push   0x80000000
c0018944:	e8 e7 f5 ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018949:	83 c4 20             	add    esp,0x20
c001894c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018954:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018958:	76 1e                	jbe    c0018978 <CPU::detectFeatures()+0x602>
c001895a:	83 ec 0c             	sub    esp,0xc
c001895d:	56                   	push   esi
c001895e:	50                   	push   eax
c001895f:	57                   	push   edi
c0018960:	55                   	push   ebp
c0018961:	68 01 00 00 80       	push   0x80000001
c0018966:	e8 c5 f5 ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001896b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018975:	83 c4 20             	add    esp,0x20
c0018978:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001897e:	83 f8 01             	cmp    eax,0x1
c0018981:	75 6f                	jne    c00189f2 <CPU::detectFeatures()+0x67c>
c0018983:	51                   	push   ecx
c0018984:	51                   	push   ecx
c0018985:	68 62 91 02 c0       	push   0xc0029162
c001898a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001898e:	56                   	push   esi
c001898f:	e8 86 7d fe ff       	call   c000071a <strcpy>
c0018994:	5f                   	pop    edi
c0018995:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001899b:	5d                   	pop    ebp
c001899c:	66 c1 e8 06          	shr    ax,0x6
c00189a0:	0f b6 c0             	movzx  eax,al
c00189a3:	50                   	push   eax
c00189a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189aa:	c1 e8 0e             	shr    eax,0xe
c00189ad:	0f b6 c0             	movzx  eax,al
c00189b0:	50                   	push   eax
c00189b1:	e8 24 f2 ff ff       	call   c0017bda <CPU::lookupIntelName(unsigned char, unsigned char)>
c00189b6:	5a                   	pop    edx
c00189b7:	59                   	pop    ecx
c00189b8:	50                   	push   eax
c00189b9:	56                   	push   esi
c00189ba:	e8 12 7e fe ff       	call   c00007d1 <strcat>
c00189bf:	5f                   	pop    edi
c00189c0:	5d                   	pop    ebp
c00189c1:	56                   	push   esi
c00189c2:	53                   	push   ebx
c00189c3:	e8 96 b2 ff ff       	call   c0013c5e <Device::setName(char const*)>
c00189c8:	58                   	pop    eax
c00189c9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00189cf:	5a                   	pop    edx
c00189d0:	68 69 91 02 c0       	push   0xc0029169
c00189d5:	50                   	push   eax
c00189d6:	e8 90 7d fe ff       	call   c000076b <strcmp>
c00189db:	83 c4 10             	add    esp,0x10
c00189de:	85 c0                	test   eax,eax
c00189e0:	0f 85 71 03 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c00189e6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00189ed:	e9 65 03 00 00       	jmp    c0018d57 <CPU::detectFeatures()+0x9e1>
c00189f2:	83 f8 02             	cmp    eax,0x2
c00189f5:	0f 85 b5 00 00 00    	jne    c0018ab0 <CPU::detectFeatures()+0x73a>
c00189fb:	57                   	push   edi
c00189fc:	57                   	push   edi
c00189fd:	68 7b 91 02 c0       	push   0xc002917b
c0018a02:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a06:	56                   	push   esi
c0018a07:	e8 0e 7d fe ff       	call   c000071a <strcpy>
c0018a0c:	5d                   	pop    ebp
c0018a0d:	58                   	pop    eax
c0018a0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a14:	66 c1 e8 06          	shr    ax,0x6
c0018a18:	0f b6 c0             	movzx  eax,al
c0018a1b:	50                   	push   eax
c0018a1c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a22:	c1 e8 0e             	shr    eax,0xe
c0018a25:	0f b6 c0             	movzx  eax,al
c0018a28:	50                   	push   eax
c0018a29:	e8 18 f0 ff ff       	call   c0017a46 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018a2e:	5a                   	pop    edx
c0018a2f:	59                   	pop    ecx
c0018a30:	50                   	push   eax
c0018a31:	56                   	push   esi
c0018a32:	e8 9a 7d fe ff       	call   c00007d1 <strcat>
c0018a37:	5f                   	pop    edi
c0018a38:	5d                   	pop    ebp
c0018a39:	56                   	push   esi
c0018a3a:	53                   	push   ebx
c0018a3b:	e8 1e b2 ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018a40:	58                   	pop    eax
c0018a41:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018a47:	5a                   	pop    edx
c0018a48:	68 80 91 02 c0       	push   0xc0029180
c0018a4d:	50                   	push   eax
c0018a4e:	e8 18 7d fe ff       	call   c000076b <strcmp>
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	85 c0                	test   eax,eax
c0018a58:	75 20                	jne    c0018a7a <CPU::detectFeatures()+0x704>
c0018a5a:	8b 15 48 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b848
c0018a60:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018a66:	a8 01                	test   al,0x1
c0018a68:	74 10                	je     c0018a7a <CPU::detectFeatures()+0x704>
c0018a6a:	83 e0 fe             	and    eax,0xfffffffe
c0018a6d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018a73:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018a7a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a80:	c1 e8 0e             	shr    eax,0xe
c0018a83:	3c 05                	cmp    al,0x5
c0018a85:	0f 85 cc 02 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018a8b:	56                   	push   esi
c0018a8c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018a92:	83 e0 0f             	and    eax,0xf
c0018a95:	50                   	push   eax
c0018a96:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a9c:	66 c1 e8 06          	shr    ax,0x6
c0018aa0:	0f b6 c0             	movzx  eax,al
c0018aa3:	50                   	push   eax
c0018aa4:	6a 05                	push   0x5
c0018aa6:	e8 11 f4 ff ff       	call   c0017ebc <CPU::AMD_K6_writeback(int, int, int)>
c0018aab:	e9 1f 02 00 00       	jmp    c0018ccf <CPU::detectFeatures()+0x959>
c0018ab0:	8d 50 fd             	lea    edx,[eax-0x3]
c0018ab3:	83 fa 01             	cmp    edx,0x1
c0018ab6:	76 09                	jbe    c0018ac1 <CPU::detectFeatures()+0x74b>
c0018ab8:	83 f8 06             	cmp    eax,0x6
c0018abb:	0f 85 91 01 00 00    	jne    c0018c52 <CPU::detectFeatures()+0x8dc>
c0018ac1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ac7:	c1 ea 0e             	shr    edx,0xe
c0018aca:	80 fa 05             	cmp    dl,0x5
c0018acd:	75 7b                	jne    c0018b4a <CPU::detectFeatures()+0x7d4>
c0018acf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ad5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018ada:	66 81 fa 00 01       	cmp    dx,0x100
c0018adf:	75 0c                	jne    c0018aed <CPU::detectFeatures()+0x777>
c0018ae1:	51                   	push   ecx
c0018ae2:	51                   	push   ecx
c0018ae3:	68 87 91 02 c0       	push   0xc0029187
c0018ae8:	e9 dc 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018aed:	66 81 fa 00 02       	cmp    dx,0x200
c0018af2:	75 0c                	jne    c0018b00 <CPU::detectFeatures()+0x78a>
c0018af4:	52                   	push   edx
c0018af5:	52                   	push   edx
c0018af6:	68 9a 91 02 c0       	push   0xc002919a
c0018afb:	e9 c9 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b00:	66 81 fa 40 02       	cmp    dx,0x240
c0018b05:	75 0c                	jne    c0018b13 <CPU::detectFeatures()+0x79d>
c0018b07:	50                   	push   eax
c0018b08:	50                   	push   eax
c0018b09:	68 ac 91 02 c0       	push   0xc00291ac
c0018b0e:	e9 b6 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b13:	83 f8 06             	cmp    eax,0x6
c0018b16:	75 0c                	jne    c0018b24 <CPU::detectFeatures()+0x7ae>
c0018b18:	50                   	push   eax
c0018b19:	50                   	push   eax
c0018b1a:	68 be 91 02 c0       	push   0xc00291be
c0018b1f:	e9 a5 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b24:	83 f8 04             	cmp    eax,0x4
c0018b27:	75 0c                	jne    c0018b35 <CPU::detectFeatures()+0x7bf>
c0018b29:	50                   	push   eax
c0018b2a:	50                   	push   eax
c0018b2b:	68 ca 91 02 c0       	push   0xc00291ca
c0018b30:	e9 94 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b35:	83 f8 03             	cmp    eax,0x3
c0018b38:	0f 85 19 02 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018b3e:	50                   	push   eax
c0018b3f:	50                   	push   eax
c0018b40:	68 d2 91 02 c0       	push   0xc00291d2
c0018b45:	e9 7f 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b4a:	80 fa 06             	cmp    dl,0x6
c0018b4d:	0f 85 db 00 00 00    	jne    c0018c2e <CPU::detectFeatures()+0x8b8>
c0018b53:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b59:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018b5e:	66 81 fa 80 01       	cmp    dx,0x180
c0018b63:	75 0c                	jne    c0018b71 <CPU::detectFeatures()+0x7fb>
c0018b65:	50                   	push   eax
c0018b66:	50                   	push   eax
c0018b67:	68 dd 91 02 c0       	push   0xc00291dd
c0018b6c:	e9 58 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b71:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018b77:	66 f7 c1 80 ff       	test   cx,0xff80
c0018b7c:	75 0c                	jne    c0018b8a <CPU::detectFeatures()+0x814>
c0018b7e:	50                   	push   eax
c0018b7f:	50                   	push   eax
c0018b80:	68 ed 91 02 c0       	push   0xc00291ed
c0018b85:	e9 3f 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b8a:	66 81 fa 40 02       	cmp    dx,0x240
c0018b8f:	75 0c                	jne    c0018b9d <CPU::detectFeatures()+0x827>
c0018b91:	55                   	push   ebp
c0018b92:	55                   	push   ebp
c0018b93:	68 f4 91 02 c0       	push   0xc00291f4
c0018b98:	e9 2c 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b9d:	66 81 fa 80 02       	cmp    dx,0x280
c0018ba2:	75 0c                	jne    c0018bb0 <CPU::detectFeatures()+0x83a>
c0018ba4:	57                   	push   edi
c0018ba5:	57                   	push   edi
c0018ba6:	68 fd 91 02 c0       	push   0xc00291fd
c0018bab:	e9 19 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018bb0:	66 81 fa 40 03       	cmp    dx,0x340
c0018bb5:	74 ed                	je     c0018ba4 <CPU::detectFeatures()+0x82e>
c0018bb7:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018bbc:	75 0c                	jne    c0018bca <CPU::detectFeatures()+0x854>
c0018bbe:	56                   	push   esi
c0018bbf:	56                   	push   esi
c0018bc0:	68 04 92 02 c0       	push   0xc0029204
c0018bc5:	e9 ff 00 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018bca:	83 f8 06             	cmp    eax,0x6
c0018bcd:	0f 84 45 ff ff ff    	je     c0018b18 <CPU::detectFeatures()+0x7a2>
c0018bd3:	83 f8 04             	cmp    eax,0x4
c0018bd6:	0f 84 4d ff ff ff    	je     c0018b29 <CPU::detectFeatures()+0x7b3>
c0018bdc:	83 f8 03             	cmp    eax,0x3
c0018bdf:	0f 85 72 01 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018be5:	51                   	push   ecx
c0018be6:	51                   	push   ecx
c0018be7:	68 0d 92 02 c0       	push   0xc002920d
c0018bec:	53                   	push   ebx
c0018bed:	e8 6c b0 ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018bf2:	b1 c1                	mov    cl,0xc1
c0018bf4:	88 c8                	mov    al,cl
c0018bf6:	e6 22                	out    0x22,al
c0018bf8:	e4 23                	in     al,0x23
c0018bfa:	88 c2                	mov    dl,al
c0018bfc:	88 c8                	mov    al,cl
c0018bfe:	e6 22                	out    0x22,al
c0018c00:	88 d0                	mov    al,dl
c0018c02:	83 c8 10             	or     eax,0x10
c0018c05:	e6 23                	out    0x23,al
c0018c07:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018c0e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018c11:	89 d0                	mov    eax,edx
c0018c13:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018c19:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018c1d:	40                   	inc    eax
c0018c1e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018c24:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018c29:	e9 a1 00 00 00       	jmp    c0018ccf <CPU::detectFeatures()+0x959>
c0018c2e:	83 f8 06             	cmp    eax,0x6
c0018c31:	0f 84 e1 fe ff ff    	je     c0018b18 <CPU::detectFeatures()+0x7a2>
c0018c37:	83 f8 04             	cmp    eax,0x4
c0018c3a:	0f 84 e9 fe ff ff    	je     c0018b29 <CPU::detectFeatures()+0x7b3>
c0018c40:	83 f8 03             	cmp    eax,0x3
c0018c43:	0f 85 0e 01 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018c49:	52                   	push   edx
c0018c4a:	52                   	push   edx
c0018c4b:	68 18 92 02 c0       	push   0xc0029218
c0018c50:	eb 77                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c52:	83 f8 07             	cmp    eax,0x7
c0018c55:	75 09                	jne    c0018c60 <CPU::detectFeatures()+0x8ea>
c0018c57:	50                   	push   eax
c0018c58:	50                   	push   eax
c0018c59:	68 22 92 02 c0       	push   0xc0029222
c0018c5e:	eb 69                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c60:	83 f8 0a             	cmp    eax,0xa
c0018c63:	75 09                	jne    c0018c6e <CPU::detectFeatures()+0x8f8>
c0018c65:	50                   	push   eax
c0018c66:	50                   	push   eax
c0018c67:	68 2d 92 02 c0       	push   0xc002922d
c0018c6c:	eb 5b                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c6e:	83 f8 0b             	cmp    eax,0xb
c0018c71:	75 09                	jne    c0018c7c <CPU::detectFeatures()+0x906>
c0018c73:	50                   	push   eax
c0018c74:	50                   	push   eax
c0018c75:	68 35 92 02 c0       	push   0xc0029235
c0018c7a:	eb 4d                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c7c:	83 f8 08             	cmp    eax,0x8
c0018c7f:	75 09                	jne    c0018c8a <CPU::detectFeatures()+0x914>
c0018c81:	50                   	push   eax
c0018c82:	50                   	push   eax
c0018c83:	68 3e 92 02 c0       	push   0xc002923e
c0018c88:	eb 3f                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c8a:	83 f8 09             	cmp    eax,0x9
c0018c8d:	75 09                	jne    c0018c98 <CPU::detectFeatures()+0x922>
c0018c8f:	50                   	push   eax
c0018c90:	50                   	push   eax
c0018c91:	68 46 92 02 c0       	push   0xc0029246
c0018c96:	eb 31                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c98:	83 f8 05             	cmp    eax,0x5
c0018c9b:	75 09                	jne    c0018ca6 <CPU::detectFeatures()+0x930>
c0018c9d:	50                   	push   eax
c0018c9e:	50                   	push   eax
c0018c9f:	68 4e 92 02 c0       	push   0xc002924e
c0018ca4:	eb 23                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018ca6:	83 f8 0c             	cmp    eax,0xc
c0018ca9:	75 09                	jne    c0018cb4 <CPU::detectFeatures()+0x93e>
c0018cab:	55                   	push   ebp
c0018cac:	55                   	push   ebp
c0018cad:	68 5c 92 02 c0       	push   0xc002925c
c0018cb2:	eb 15                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018cb4:	83 f8 0d             	cmp    eax,0xd
c0018cb7:	75 09                	jne    c0018cc2 <CPU::detectFeatures()+0x94c>
c0018cb9:	57                   	push   edi
c0018cba:	57                   	push   edi
c0018cbb:	68 67 92 02 c0       	push   0xc0029267
c0018cc0:	eb 07                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018cc2:	56                   	push   esi
c0018cc3:	56                   	push   esi
c0018cc4:	68 7b 92 02 c0       	push   0xc002927b
c0018cc9:	53                   	push   ebx
c0018cca:	e8 8f af ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018ccf:	83 c4 10             	add    esp,0x10
c0018cd2:	e9 80 00 00 00       	jmp    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018cd7:	51                   	push   ecx
c0018cd8:	51                   	push   ecx
c0018cd9:	68 c7 90 02 c0       	push   0xc00290c7
c0018cde:	57                   	push   edi
c0018cdf:	e8 36 7a fe ff       	call   c000071a <strcpy>
c0018ce4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018cee:	e8 70 75 fe ff       	call   c0000263 <is486>
c0018cf3:	83 c4 10             	add    esp,0x10
c0018cf6:	85 c0                	test   eax,eax
c0018cf8:	74 2b                	je     c0018d25 <CPU::detectFeatures()+0x9af>
c0018cfa:	52                   	push   edx
c0018cfb:	52                   	push   edx
c0018cfc:	68 87 92 02 c0       	push   0xc0029287
c0018d01:	53                   	push   ebx
c0018d02:	e8 57 af ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018d07:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d0e:	0f 20 c0             	mov    eax,cr0
c0018d11:	83 e0 14             	and    eax,0x14
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	83 f8 04             	cmp    eax,0x4
c0018d1a:	75 1f                	jne    c0018d3b <CPU::detectFeatures()+0x9c5>
c0018d1c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018d23:	eb 32                	jmp    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018d25:	50                   	push   eax
c0018d26:	50                   	push   eax
c0018d27:	68 92 92 02 c0       	push   0xc0029292
c0018d2c:	53                   	push   ebx
c0018d2d:	e8 2c af ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018d32:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018d39:	eb d3                	jmp    c0018d0e <CPU::detectFeatures()+0x998>
c0018d3b:	e8 fe 74 fe ff       	call   c000023e <hasLegacyFPU>
c0018d40:	83 e0 01             	and    eax,0x1
c0018d43:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d46:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d4c:	83 e0 fd             	and    eax,0xfffffffd
c0018d4f:	09 d0                	or     eax,edx
c0018d51:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d57:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018d5e:	83 c4 4c             	add    esp,0x4c
c0018d61:	5b                   	pop    ebx
c0018d62:	5e                   	pop    esi
c0018d63:	5f                   	pop    edi
c0018d64:	5d                   	pop    ebp
c0018d65:	c3                   	ret    

c0018d66 <CPU::setupSMEP()>:
c0018d66:	0f 20 e0             	mov    eax,cr4
c0018d69:	0d 00 00 10 00       	or     eax,0x100000
c0018d6e:	0f 22 e0             	mov    cr4,eax
c0018d71:	c3                   	ret    

c0018d72 <CPU::setupUMIP()>:
c0018d72:	0f 20 e0             	mov    eax,cr4
c0018d75:	80 cc 08             	or     ah,0x8
c0018d78:	0f 22 e0             	mov    cr4,eax
c0018d7b:	c3                   	ret    

c0018d7c <CPU::setupTSC()>:
c0018d7c:	0f 20 e0             	mov    eax,cr4
c0018d7f:	83 c8 04             	or     eax,0x4
c0018d82:	0f 22 e0             	mov    cr4,eax
c0018d85:	c3                   	ret    

c0018d86 <CPU::setupLargePages()>:
c0018d86:	0f 20 e0             	mov    eax,cr4
c0018d89:	83 c8 10             	or     eax,0x10
c0018d8c:	0f 22 e0             	mov    cr4,eax
c0018d8f:	c3                   	ret    

c0018d90 <CPU::setupPAT()>:
c0018d90:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0018d95:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018d9c:	74 2c                	je     c0018dca <CPU::setupPAT()+0x3a>
c0018d9e:	53                   	push   ebx
c0018d9f:	83 ec 10             	sub    esp,0x10
c0018da2:	68 77 02 00 00       	push   0x277
c0018da7:	50                   	push   eax
c0018da8:	e8 bb 5c ff ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c0018dad:	83 e2 f8             	and    edx,0xfffffff8
c0018db0:	83 ca 01             	or     edx,0x1
c0018db3:	52                   	push   edx
c0018db4:	50                   	push   eax
c0018db5:	68 77 02 00 00       	push   0x277
c0018dba:	ff 35 48 b8 02 c0    	push   DWORD PTR ds:0xc002b848
c0018dc0:	e8 cf 5c ff ff       	call   c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018dc5:	83 c4 28             	add    esp,0x28
c0018dc8:	5b                   	pop    ebx
c0018dc9:	c3                   	ret    
c0018dca:	c3                   	ret    
c0018dcb:	90                   	nop

c0018dcc <CPU::setupMTRR()>:
c0018dcc:	c3                   	ret    
c0018dcd:	90                   	nop

c0018dce <CPU::setupGlobalPages()>:
c0018dce:	0f 20 e0             	mov    eax,cr4
c0018dd1:	0c 80                	or     al,0x80
c0018dd3:	0f 22 e0             	mov    cr4,eax
c0018dd6:	c3                   	ret    
c0018dd7:	90                   	nop

c0018dd8 <CPU::allowUsermodeDataAccess()>:
c0018dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ddc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018de3:	74 03                	je     c0018de8 <CPU::allowUsermodeDataAccess()+0x10>
c0018de5:	0f 01 cb             	stac   
c0018de8:	c3                   	ret    
c0018de9:	90                   	nop

c0018dea <CPU::prohibitUsermodeDataAccess()>:
c0018dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dee:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018df5:	74 03                	je     c0018dfa <CPU::prohibitUsermodeDataAccess()+0x10>
c0018df7:	0f 01 ca             	clac   
c0018dfa:	c3                   	ret    
c0018dfb:	90                   	nop

c0018dfc <CPU::setupSMAP()>:
c0018dfc:	0f 20 e0             	mov    eax,cr4
c0018dff:	0d 00 00 20 00       	or     eax,0x200000
c0018e04:	0f 22 e0             	mov    cr4,eax
c0018e07:	eb e1                	jmp    c0018dea <CPU::prohibitUsermodeDataAccess()>
c0018e09:	90                   	nop

c0018e0a <CPU::setupFeatures()>:
c0018e0a:	83 ec 0c             	sub    esp,0xc
c0018e0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e11:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018e18:	74 07                	je     c0018e21 <CPU::setupFeatures()+0x17>
c0018e1a:	52                   	push   edx
c0018e1b:	e8 46 ff ff ff       	call   c0018d66 <CPU::setupSMEP()>
c0018e20:	58                   	pop    eax
c0018e21:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018e28:	74 07                	je     c0018e31 <CPU::setupFeatures()+0x27>
c0018e2a:	52                   	push   edx
c0018e2b:	e8 cc ff ff ff       	call   c0018dfc <CPU::setupSMAP()>
c0018e30:	58                   	pop    eax
c0018e31:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018e38:	74 07                	je     c0018e41 <CPU::setupFeatures()+0x37>
c0018e3a:	52                   	push   edx
c0018e3b:	e8 32 ff ff ff       	call   c0018d72 <CPU::setupUMIP()>
c0018e40:	58                   	pop    eax
c0018e41:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018e48:	74 07                	je     c0018e51 <CPU::setupFeatures()+0x47>
c0018e4a:	52                   	push   edx
c0018e4b:	e8 2c ff ff ff       	call   c0018d7c <CPU::setupTSC()>
c0018e50:	58                   	pop    eax
c0018e51:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018e58:	74 07                	je     c0018e61 <CPU::setupFeatures()+0x57>
c0018e5a:	52                   	push   edx
c0018e5b:	e8 26 ff ff ff       	call   c0018d86 <CPU::setupLargePages()>
c0018e60:	59                   	pop    ecx
c0018e61:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018e68:	74 07                	je     c0018e71 <CPU::setupFeatures()+0x67>
c0018e6a:	52                   	push   edx
c0018e6b:	e8 5e ff ff ff       	call   c0018dce <CPU::setupGlobalPages()>
c0018e70:	58                   	pop    eax
c0018e71:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018e78:	74 0c                	je     c0018e86 <CPU::setupFeatures()+0x7c>
c0018e7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018e7e:	83 c4 0c             	add    esp,0xc
c0018e81:	e9 0a ff ff ff       	jmp    c0018d90 <CPU::setupPAT()>
c0018e86:	83 c4 0c             	add    esp,0xc
c0018e89:	c3                   	ret    

c0018e8a <CPU::open(int, int, void*)>:
c0018e8a:	57                   	push   edi
c0018e8b:	56                   	push   esi
c0018e8c:	53                   	push   ebx
c0018e8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018e91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018e95:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018e9b:	83 ec 0c             	sub    esp,0xc
c0018e9e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018ea4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018eaa:	50                   	push   eax
c0018eab:	e8 a4 5e ff ff       	call   c000ed54 <GDT::setup()>
c0018eb0:	83 c4 0c             	add    esp,0xc
c0018eb3:	6a 00                	push   0x0
c0018eb5:	68 ef be ad de       	push   0xdeadbeef
c0018eba:	57                   	push   edi
c0018ebb:	e8 4e 81 ff ff       	call   c001100e <TSS::setup(unsigned long, unsigned long)>
c0018ec0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018ec3:	e8 26 81 ff ff       	call   c0010fee <TSS::flush()>
c0018ec8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ed1:	e8 da 60 ff ff       	call   c000efb0 <IDT::setup()>
c0018ed6:	b8 00 04 00 00       	mov    eax,0x400
c0018edb:	0f 23 f8             	mov    db7,eax
c0018ede:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018ee8:	e8 7d 6b ff ff       	call   c000fa6a <Phys::allocatePage()>
c0018eed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018ef3:	89 30                	mov    DWORD PTR [eax],esi
c0018ef5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018efb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018efe:	58                   	pop    eax
c0018eff:	5a                   	pop    edx
c0018f00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018f06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018f0a:	e8 31 91 ff ff       	call   c0012040 <VAS::setCPUSpecific(unsigned long)>
c0018f0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f12:	e8 5f f4 ff ff       	call   c0018376 <CPU::detectFeatures()>
c0018f17:	e8 26 c0 ff ff       	call   c0014f42 <setupInterruptController()>
c0018f1c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018f22:	a1 60 b8 02 c0       	mov    eax,ds:0xc002b860
c0018f27:	83 e0 10             	and    eax,0x10
c0018f2a:	83 f8 01             	cmp    eax,0x1
c0018f2d:	19 c0                	sbb    eax,eax
c0018f2f:	83 e0 46             	and    eax,0x46
c0018f32:	83 c0 1e             	add    eax,0x1e
c0018f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f38:	e8 43 d4 ff ff       	call   c0016380 <setupTimer(int)>
c0018f3d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018f43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f46:	e8 bf fe ff ff       	call   c0018e0a <CPU::setupFeatures()>
c0018f4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f4e:	e8 a7 f1 ff ff       	call   c00180fa <CPU::displayFeatures()>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	31 c0                	xor    eax,eax
c0018f58:	5b                   	pop    ebx
c0018f59:	5e                   	pop    esi
c0018f5a:	5f                   	pop    edi
c0018f5b:	c3                   	ret    

c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018f5c:	57                   	push   edi
c0018f5d:	56                   	push   esi
c0018f5e:	53                   	push   ebx
c0018f5f:	51                   	push   ecx
c0018f60:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018f64:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018f67:	0f 02 c0             	lar    eax,ax
c0018f6a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018f6d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018f71:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018f74:	88 ca                	mov    dl,cl
c0018f76:	c0 ea 06             	shr    dl,0x6
c0018f79:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018f7d:	89 ca                	mov    edx,ecx
c0018f7f:	66 c1 ea 03          	shr    dx,0x3
c0018f83:	83 e2 07             	and    edx,0x7
c0018f86:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018f8b:	88 17                	mov    BYTE PTR [edi],dl
c0018f8d:	0f 84 a6 01 00 00    	je     c0019139 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018f93:	83 e1 07             	and    ecx,0x7
c0018f96:	80 f9 04             	cmp    cl,0x4
c0018f99:	0f 84 98 00 00 00    	je     c0019037 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018f9f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018fa4:	0f 95 c0             	setne  al
c0018fa7:	80 f9 05             	cmp    cl,0x5
c0018faa:	0f 95 c2             	setne  dl
c0018fad:	08 c2                	or     dl,al
c0018faf:	74 79                	je     c001902a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018fb1:	84 c9                	test   cl,cl
c0018fb3:	75 05                	jne    c0018fba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018fb5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018fb8:	eb 3c                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fba:	80 f9 01             	cmp    cl,0x1
c0018fbd:	75 05                	jne    c0018fc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018fbf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018fc2:	eb 32                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fc4:	80 f9 02             	cmp    cl,0x2
c0018fc7:	75 05                	jne    c0018fce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018fc9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018fcc:	eb 28                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fce:	31 c0                	xor    eax,eax
c0018fd0:	80 f9 03             	cmp    cl,0x3
c0018fd3:	75 05                	jne    c0018fda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018fd5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018fd8:	eb 1c                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fda:	80 f9 05             	cmp    cl,0x5
c0018fdd:	75 05                	jne    c0018fe4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018fdf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018fe2:	eb 12                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fe4:	80 f9 06             	cmp    cl,0x6
c0018fe7:	75 05                	jne    c0018fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018fe9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018fec:	eb 08                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fee:	80 f9 07             	cmp    cl,0x7
c0018ff1:	75 03                	jne    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018ff3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018ff6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018ffb:	75 10                	jne    c001900d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018ffd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019001:	b9 03 00 00 00       	mov    ecx,0x3
c0019006:	01 d0                	add    eax,edx
c0019008:	e9 37 01 00 00       	jmp    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001900d:	b9 02 00 00 00       	mov    ecx,0x2
c0019012:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019017:	0f 85 27 01 00 00    	jne    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001901d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019020:	b9 06 00 00 00       	mov    ecx,0x6
c0019025:	e9 1a 01 00 00       	jmp    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001902a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001902d:	b9 06 00 00 00       	mov    ecx,0x6
c0019032:	e9 0f 01 00 00       	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019037:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001903a:	88 ca                	mov    dl,cl
c001903c:	c0 ea 06             	shr    dl,0x6
c001903f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019043:	89 ca                	mov    edx,ecx
c0019045:	66 c1 ea 03          	shr    dx,0x3
c0019049:	83 e2 07             	and    edx,0x7
c001904c:	80 e1 07             	and    cl,0x7
c001904f:	75 05                	jne    c0019056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019051:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019054:	eb 4c                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019056:	80 f9 01             	cmp    cl,0x1
c0019059:	75 05                	jne    c0019060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001905b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001905e:	eb 42                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019060:	80 f9 02             	cmp    cl,0x2
c0019063:	75 05                	jne    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019065:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019068:	eb 38                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001906a:	80 f9 03             	cmp    cl,0x3
c001906d:	75 05                	jne    c0019074 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001906f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019072:	eb 2e                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019074:	80 f9 04             	cmp    cl,0x4
c0019077:	75 12                	jne    c001908b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019079:	f6 c4 60             	test   ah,0x60
c001907c:	75 08                	jne    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001907e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019081:	8d 78 14             	lea    edi,[eax+0x14]
c0019084:	eb 1c                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019086:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019089:	eb 17                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001908b:	80 f9 05             	cmp    cl,0x5
c001908e:	75 05                	jne    c0019095 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019090:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019093:	eb 0d                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019095:	80 f9 06             	cmp    cl,0x6
c0019098:	75 05                	jne    c001909f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001909a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001909d:	eb 03                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001909f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00190a2:	84 d2                	test   dl,dl
c00190a4:	75 05                	jne    c00190ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00190a6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00190a9:	eb 3c                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190ab:	80 fa 01             	cmp    dl,0x1
c00190ae:	75 05                	jne    c00190b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00190b0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00190b3:	eb 32                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190b5:	80 fa 02             	cmp    dl,0x2
c00190b8:	75 05                	jne    c00190bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00190ba:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00190bd:	eb 28                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190bf:	80 fa 03             	cmp    dl,0x3
c00190c2:	75 05                	jne    c00190c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00190c4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00190c7:	eb 1e                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190c9:	31 c0                	xor    eax,eax
c00190cb:	80 fa 04             	cmp    dl,0x4
c00190ce:	74 17                	je     c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190d0:	80 fa 05             	cmp    dl,0x5
c00190d3:	75 05                	jne    c00190da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00190d5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00190d8:	eb 0d                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190da:	80 fa 06             	cmp    dl,0x6
c00190dd:	75 05                	jne    c00190e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00190df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00190e2:	eb 03                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00190e7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00190ec:	0f 94 c2             	sete   dl
c00190ef:	80 f9 05             	cmp    cl,0x5
c00190f2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00190f6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00190fb:	d3 e0                	shl    eax,cl
c00190fd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019101:	74 0a                	je     c001910d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019103:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019106:	b9 07 00 00 00       	mov    ecx,0x7
c001910b:	eb 37                	jmp    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001910d:	01 f8                	add    eax,edi
c001910f:	b9 03 00 00 00       	mov    ecx,0x3
c0019114:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019119:	74 2b                	je     c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001911b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019120:	75 0d                	jne    c001912f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019122:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019126:	01 c8                	add    eax,ecx
c0019128:	b9 04 00 00 00       	mov    ecx,0x4
c001912d:	eb 17                	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001912f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019132:	b9 07 00 00 00       	mov    ecx,0x7
c0019137:	eb 0d                	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019139:	b9 02 00 00 00       	mov    ecx,0x2
c001913e:	b2 01                	mov    dl,0x1
c0019140:	31 c0                	xor    eax,eax
c0019142:	eb 02                	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019144:	31 d2                	xor    edx,edx
c0019146:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001914a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001914c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019150:	88 11                	mov    BYTE PTR [ecx],dl
c0019152:	5a                   	pop    edx
c0019153:	5b                   	pop    ebx
c0019154:	5e                   	pop    esi
c0019155:	5f                   	pop    edi
c0019156:	c3                   	ret    

c0019157 <Krnl::panic(char const*)>:
c0019157:	55                   	push   ebp
c0019158:	89 e5                	mov    ebp,esp
c001915a:	53                   	push   ebx
c001915b:	50                   	push   eax
c001915c:	a1 50 c3 02 c0       	mov    eax,ds:0xc002c350
c0019161:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019164:	85 c0                	test   eax,eax
c0019166:	74 02                	je     c001916a <Krnl::panic(char const*)+0x13>
c0019168:	ff d0                	call   eax
c001916a:	fa                   	cli    
c001916b:	c6 05 54 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c354,0x1
c0019172:	83 ec 08             	sub    esp,0x8
c0019175:	c6 05 00 a8 02 c0 00 	mov    BYTE PTR ds:0xc002a800,0x0
c001917c:	53                   	push   ebx
c001917d:	68 cc 92 02 c0       	push   0xc00292cc
c0019182:	e8 06 95 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019187:	58                   	pop    eax
c0019188:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001918d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019193:	e8 b7 76 ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c0019198:	83 c4 0c             	add    esp,0xc
c001919b:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00191a0:	6a 01                	push   0x1
c00191a2:	6a 0f                	push   0xf
c00191a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191aa:	e8 df 70 ff ff       	call   c001028e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00191af:	5a                   	pop    edx
c00191b0:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00191b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191bb:	e8 30 79 ff ff       	call   c0010af0 <VgaText::clearScreen()>
c00191c0:	59                   	pop    ecx
c00191c1:	58                   	pop    eax
c00191c2:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00191c7:	68 e5 92 02 c0       	push   0xc00292e5
c00191cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191d2:	e8 97 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00191d7:	58                   	pop    eax
c00191d8:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00191dd:	5a                   	pop    edx
c00191de:	68 8c 93 02 c0       	push   0xc002938c
c00191e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191e9:	e8 80 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00191ee:	59                   	pop    ecx
c00191ef:	58                   	pop    eax
c00191f0:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00191f5:	68 01 93 02 c0       	push   0xc0029301
c00191fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019200:	e8 69 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019205:	58                   	pop    eax
c0019206:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001920b:	5a                   	pop    edx
c001920c:	53                   	push   ebx
c001920d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019213:	e8 56 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019218:	59                   	pop    ecx
c0019219:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001921e:	5b                   	pop    ebx
c001921f:	68 21 93 02 c0       	push   0xc0029321
c0019224:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001922a:	e8 3f 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001922f:	58                   	pop    eax
c0019230:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019235:	5a                   	pop    edx
c0019236:	68 c8 93 02 c0       	push   0xc00293c8
c001923b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019241:	e8 28 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019246:	59                   	pop    ecx
c0019247:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001924c:	5b                   	pop    ebx
c001924d:	68 01 93 02 c0       	push   0xc0029301
c0019252:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019258:	e8 11 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001925d:	58                   	pop    eax
c001925e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019263:	5a                   	pop    edx
c0019264:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019267:	83 c0 0c             	add    eax,0xc
c001926a:	50                   	push   eax
c001926b:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019270:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019276:	e8 f3 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001927b:	59                   	pop    ecx
c001927c:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019281:	5b                   	pop    ebx
c0019282:	68 20 93 02 c0       	push   0xc0029320
c0019287:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001928d:	e8 dc 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019292:	58                   	pop    eax
c0019293:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019298:	5a                   	pop    edx
c0019299:	68 f4 93 02 c0       	push   0xc00293f4
c001929e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192a4:	e8 c5 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00192a9:	59                   	pop    ecx
c00192aa:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00192af:	5b                   	pop    ebx
c00192b0:	68 34 94 02 c0       	push   0xc0029434
c00192b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192bb:	e8 ae 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00192c0:	58                   	pop    eax
c00192c1:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00192c6:	5a                   	pop    edx
c00192c7:	68 0c 93 02 c0       	push   0xc002930c
c00192cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192d2:	e8 97 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00192d7:	59                   	pop    ecx
c00192d8:	5b                   	pop    ebx
c00192d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00192dc:	68 24 93 02 c0       	push   0xc0029324
c00192e1:	e8 a7 93 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00192e6:	58                   	pop    eax
c00192e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00192ea:	5a                   	pop    edx
c00192eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00192ee:	68 2d 93 02 c0       	push   0xc002932d
c00192f3:	e8 95 93 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00192f8:	59                   	pop    ecx
c00192f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00192fc:	5b                   	pop    ebx
c00192fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00192ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019302:	68 36 93 02 c0       	push   0xc0029336
c0019307:	e8 81 93 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001930c:	58                   	pop    eax
c001930d:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019312:	5a                   	pop    edx
c0019313:	68 78 94 02 c0       	push   0xc0029478
c0019318:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001931e:	e8 4b 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019323:	59                   	pop    ecx
c0019324:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019329:	5b                   	pop    ebx
c001932a:	68 3f 93 02 c0       	push   0xc002933f
c001932f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019335:	e8 34 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001933a:	0f 20 c0             	mov    eax,cr0
c001933d:	5a                   	pop    edx
c001933e:	59                   	pop    ecx
c001933f:	50                   	push   eax
c0019340:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019345:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001934b:	e8 44 79 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019350:	5b                   	pop    ebx
c0019351:	58                   	pop    eax
c0019352:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019357:	68 49 93 02 c0       	push   0xc0029349
c001935c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019362:	e8 07 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019367:	0f 20 d0             	mov    eax,cr2
c001936a:	5a                   	pop    edx
c001936b:	59                   	pop    ecx
c001936c:	50                   	push   eax
c001936d:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019372:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019378:	e8 17 79 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001937d:	5b                   	pop    ebx
c001937e:	58                   	pop    eax
c001937f:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019384:	68 53 93 02 c0       	push   0xc0029353
c0019389:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001938f:	e8 da 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019394:	0f 20 d8             	mov    eax,cr3
c0019397:	5a                   	pop    edx
c0019398:	59                   	pop    ecx
c0019399:	50                   	push   eax
c001939a:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001939f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193a5:	e8 ea 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00193aa:	5b                   	pop    ebx
c00193ab:	58                   	pop    eax
c00193ac:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00193b1:	68 66 93 02 c0       	push   0xc0029366
c00193b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193bc:	e8 ad 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00193c1:	0f 20 e0             	mov    eax,cr4
c00193c4:	5a                   	pop    edx
c00193c5:	59                   	pop    ecx
c00193c6:	50                   	push   eax
c00193c7:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00193cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193d2:	e8 bd 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00193d7:	5b                   	pop    ebx
c00193d8:	58                   	pop    eax
c00193d9:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00193de:	68 70 93 02 c0       	push   0xc0029370
c00193e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193e9:	e8 80 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00193ee:	5a                   	pop    edx
c00193ef:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c00193f4:	59                   	pop    ecx
c00193f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00193fb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00193fe:	50                   	push   eax
c00193ff:	e8 90 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019404:	5b                   	pop    ebx
c0019405:	58                   	pop    eax
c0019406:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001940b:	68 87 93 02 c0       	push   0xc0029387
c0019410:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019416:	e8 53 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001941b:	5a                   	pop    edx
c001941c:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019421:	59                   	pop    ecx
c0019422:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019428:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001942b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001942e:	50                   	push   eax
c001942f:	e8 60 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019434:	5b                   	pop    ebx
c0019435:	58                   	pop    eax
c0019436:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001943b:	68 87 93 02 c0       	push   0xc0029387
c0019440:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019446:	e8 23 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001944b:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c0019450:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019453:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019459:	8b 12                	mov    edx,DWORD PTR [edx]
c001945b:	59                   	pop    ecx
c001945c:	5b                   	pop    ebx
c001945d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019460:	50                   	push   eax
c0019461:	e8 2e 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019466:	83 c4 10             	add    esp,0x10
c0019469:	b2 fe                	mov    dl,0xfe
c001946b:	e4 60                	in     al,0x60
c001946d:	3c 1c                	cmp    al,0x1c
c001946f:	74 04                	je     c0019475 <Krnl::panic(char const*)+0x31e>
c0019471:	3c 5a                	cmp    al,0x5a
c0019473:	75 f6                	jne    c001946b <Krnl::panic(char const*)+0x314>
c0019475:	e4 64                	in     al,0x64
c0019477:	a8 02                	test   al,0x2
c0019479:	75 fa                	jne    c0019475 <Krnl::panic(char const*)+0x31e>
c001947b:	88 d0                	mov    al,dl
c001947d:	e6 64                	out    0x64,al
c001947f:	fa                   	cli    
c0019480:	f4                   	hlt    
c0019481:	eb e8                	jmp    c001946b <Krnl::panic(char const*)+0x314>

c0019483 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019483:	55                   	push   ebp
c0019484:	57                   	push   edi
c0019485:	56                   	push   esi
c0019486:	53                   	push   ebx
c0019487:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001948d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019494:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019496:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019499:	80 fb 40             	cmp    bl,0x40
c001949c:	75 1b                	jne    c00194b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001949e:	8a 16                	mov    dl,BYTE PTR [esi]
c00194a0:	84 d2                	test   dl,dl
c00194a2:	0f 84 f1 00 00 00    	je     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00194a8:	8d 46 01             	lea    eax,[esi+0x1]
c00194ab:	80 fa 3a             	cmp    dl,0x3a
c00194ae:	74 04                	je     c00194b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00194b0:	89 c6                	mov    esi,eax
c00194b2:	eb ea                	jmp    c001949e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00194b4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00194b7:	89 c6                	mov    esi,eax
c00194b9:	50                   	push   eax
c00194ba:	6a 40                	push   0x40
c00194bc:	6a 00                	push   0x0
c00194be:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194c2:	50                   	push   eax
c00194c3:	e8 b3 71 fe ff       	call   c000067b <memset>
c00194c8:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00194cf:	31 c0                	xor    eax,eax
c00194d1:	83 c4 10             	add    esp,0x10
c00194d4:	8a 0f                	mov    cl,BYTE PTR [edi]
c00194d6:	84 c9                	test   cl,cl
c00194d8:	0f 84 bb 00 00 00    	je     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00194de:	3d c7 00 00 00       	cmp    eax,0xc7
c00194e3:	0f 8f b0 00 00 00    	jg     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00194e9:	80 f9 0a             	cmp    cl,0xa
c00194ec:	0f 85 98 00 00 00    	jne    c001958a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00194f2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00194f7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00194fb:	a8 df                	test   al,0xdf
c00194fd:	0f 94 c1             	sete   cl
c0019500:	3c 23                	cmp    al,0x23
c0019502:	0f 94 c2             	sete   dl
c0019505:	08 d1                	or     cl,dl
c0019507:	75 4a                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019509:	8d 50 f7             	lea    edx,[eax-0x9]
c001950c:	80 fa 01             	cmp    dl,0x1
c001950f:	76 42                	jbe    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019511:	3c 5b                	cmp    al,0x5b
c0019513:	75 42                	jne    c0019557 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019515:	80 fb 40             	cmp    bl,0x40
c0019518:	75 39                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001951a:	83 ec 0c             	sub    esp,0xc
c001951d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019521:	52                   	push   edx
c0019522:	e8 71 71 fe ff       	call   c0000698 <strlen>
c0019527:	83 c4 10             	add    esp,0x10
c001952a:	83 f8 3f             	cmp    eax,0x3f
c001952d:	77 6a                	ja     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001952f:	50                   	push   eax
c0019530:	50                   	push   eax
c0019531:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019535:	52                   	push   edx
c0019536:	8d 54 24 24          	lea    edx,[esp+0x24]
c001953a:	52                   	push   edx
c001953b:	e8 da 71 fe ff       	call   c000071a <strcpy>
c0019540:	58                   	pop    eax
c0019541:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019545:	52                   	push   edx
c0019546:	e8 4d 71 fe ff       	call   c0000698 <strlen>
c001954b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	31 d2                	xor    edx,edx
c0019555:	eb 3a                	jmp    c0019591 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019557:	80 fb 40             	cmp    bl,0x40
c001955a:	74 06                	je     c0019562 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001955c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019560:	eb 20                	jmp    c0019582 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019562:	50                   	push   eax
c0019563:	50                   	push   eax
c0019564:	55                   	push   ebp
c0019565:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019569:	50                   	push   eax
c001956a:	e8 fc 71 fe ff       	call   c000076b <strcmp>
c001956f:	83 c4 10             	add    esp,0x10
c0019572:	85 c0                	test   eax,eax
c0019574:	75 dd                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019576:	eb e4                	jmp    c001955c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019578:	8d 50 01             	lea    edx,[eax+0x1]
c001957b:	80 f9 3d             	cmp    cl,0x3d
c001957e:	74 1d                	je     c001959d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019580:	89 d0                	mov    eax,edx
c0019582:	8a 08                	mov    cl,BYTE PTR [eax]
c0019584:	84 c9                	test   cl,cl
c0019586:	75 f0                	jne    c0019578 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019588:	eb 0f                	jmp    c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001958a:	8d 50 01             	lea    edx,[eax+0x1]
c001958d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019591:	47                   	inc    edi
c0019592:	89 d0                	mov    eax,edx
c0019594:	e9 3b ff ff ff       	jmp    c00194d4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019599:	31 c0                	xor    eax,eax
c001959b:	eb 33                	jmp    c00195d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001959d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00195a1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00195a4:	50                   	push   eax
c00195a5:	50                   	push   eax
c00195a6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00195aa:	50                   	push   eax
c00195ab:	56                   	push   esi
c00195ac:	e8 ba 71 fe ff       	call   c000076b <strcmp>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	85 c0                	test   eax,eax
c00195b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195ba:	75 97                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00195bc:	51                   	push   ecx
c00195bd:	51                   	push   ecx
c00195be:	52                   	push   edx
c00195bf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00195c6:	e8 4f 71 fe ff       	call   c000071a <strcpy>
c00195cb:	83 c4 10             	add    esp,0x10
c00195ce:	b0 01                	mov    al,0x1
c00195d0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00195d6:	5b                   	pop    ebx
c00195d7:	5e                   	pop    esi
c00195d8:	5f                   	pop    edi
c00195d9:	5d                   	pop    ebp
c00195da:	c3                   	ret    

c00195db <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00195db:	57                   	push   edi
c00195dc:	56                   	push   esi
c00195dd:	53                   	push   ebx
c00195de:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00195e4:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00195eb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00195f2:	53                   	push   ebx
c00195f3:	e8 a0 70 fe ff       	call   c0000698 <strlen>
c00195f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00195fb:	89 c7                	mov    edi,eax
c00195fd:	e8 96 70 fe ff       	call   c0000698 <strlen>
c0019602:	83 c4 10             	add    esp,0x10
c0019605:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0019609:	3d ff 00 00 00       	cmp    eax,0xff
c001960e:	0f 87 d3 00 00 00    	ja     c00196e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019614:	57                   	push   edi
c0019615:	57                   	push   edi
c0019616:	56                   	push   esi
c0019617:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001961b:	56                   	push   esi
c001961c:	e8 f9 70 fe ff       	call   c000071a <strcpy>
c0019621:	58                   	pop    eax
c0019622:	5a                   	pop    edx
c0019623:	68 49 98 02 c0       	push   0xc0029849
c0019628:	56                   	push   esi
c0019629:	e8 a3 71 fe ff       	call   c00007d1 <strcat>
c001962e:	59                   	pop    ecx
c001962f:	5f                   	pop    edi
c0019630:	53                   	push   ebx
c0019631:	56                   	push   esi
c0019632:	e8 9a 71 fe ff       	call   c00007d1 <strcat>
c0019637:	58                   	pop    eax
c0019638:	5a                   	pop    edx
c0019639:	68 9e 94 02 c0       	push   0xc002949e
c001963e:	56                   	push   esi
c001963f:	e8 8d 71 fe ff       	call   c00007d1 <strcat>
c0019644:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001964b:	e8 70 5e ff ff       	call   c000f4c0 <malloc>
c0019650:	83 c4 0c             	add    esp,0xc
c0019653:	89 c3                	mov    ebx,eax
c0019655:	ff 35 54 cd 02 c0    	push   DWORD PTR ds:0xc002cd54
c001965b:	56                   	push   esi
c001965c:	50                   	push   eax
c001965d:	e8 5a 95 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0019662:	83 c4 10             	add    esp,0x10
c0019665:	85 db                	test   ebx,ebx
c0019667:	74 7e                	je     c00196e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019669:	51                   	push   ecx
c001966a:	51                   	push   ecx
c001966b:	6a 01                	push   0x1
c001966d:	53                   	push   ebx
c001966e:	e8 ad 95 ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c0019673:	83 c4 10             	add    esp,0x10
c0019676:	85 c0                	test   eax,eax
c0019678:	74 08                	je     c0019682 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001967a:	83 ec 0c             	sub    esp,0xc
c001967d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001967f:	53                   	push   ebx
c0019680:	eb 5f                	jmp    c00196e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019682:	52                   	push   edx
c0019683:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019687:	50                   	push   eax
c0019688:	8d 44 24 20          	lea    eax,[esp+0x20]
c001968c:	50                   	push   eax
c001968d:	53                   	push   ebx
c001968e:	e8 39 98 ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c0019693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019697:	83 c4 10             	add    esp,0x10
c001969a:	89 c1                	mov    ecx,eax
c001969c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00196a0:	74 31                	je     c00196d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00196a2:	83 ec 0c             	sub    esp,0xc
c00196a5:	50                   	push   eax
c00196a6:	e8 15 5e ff ff       	call   c000f4c0 <malloc>
c00196ab:	89 c6                	mov    esi,eax
c00196ad:	58                   	pop    eax
c00196ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00196b4:	52                   	push   edx
c00196b5:	56                   	push   esi
c00196b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196be:	53                   	push   ebx
c00196bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00196c2:	83 c4 20             	add    esp,0x20
c00196c5:	85 c0                	test   eax,eax
c00196c7:	75 0a                	jne    c00196d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00196c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00196d1:	74 18                	je     c00196eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00196d3:	83 ec 0c             	sub    esp,0xc
c00196d6:	53                   	push   ebx
c00196d7:	e8 a2 95 ff ff       	call   c0012c7e <File::close()>
c00196dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	31 c0                	xor    eax,eax
c00196e9:	eb 3b                	jmp    c0019726 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00196eb:	83 ec 0c             	sub    esp,0xc
c00196ee:	53                   	push   ebx
c00196ef:	e8 8a 95 ff ff       	call   c0012c7e <File::close()>
c00196f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196fc:	83 c4 0c             	add    esp,0xc
c00196ff:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0019706:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001970d:	56                   	push   esi
c001970e:	e8 70 fd ff ff       	call   c0019483 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0019713:	89 34 24             	mov    DWORD PTR [esp],esi
c0019716:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001971a:	e8 b1 5d ff ff       	call   c000f4d0 <free>
c001971f:	83 c4 10             	add    esp,0x10
c0019722:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019726:	81 c4 20 01 00 00    	add    esp,0x120
c001972c:	5b                   	pop    ebx
c001972d:	5e                   	pop    esi
c001972e:	5f                   	pop    edi
c001972f:	c3                   	ret    

c0019730 <Reg::getLine(char*, char*, char*)>:
c0019730:	57                   	push   edi
c0019731:	56                   	push   esi
c0019732:	53                   	push   ebx
c0019733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019737:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001973b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001973f:	57                   	push   edi
c0019740:	56                   	push   esi
c0019741:	53                   	push   ebx
c0019742:	68 a3 94 02 c0       	push   0xc00294a3
c0019747:	e8 8f fe ff ff       	call   c00195db <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001974c:	83 c4 10             	add    esp,0x10
c001974f:	84 c0                	test   al,al
c0019751:	75 10                	jne    c0019763 <Reg::getLine(char*, char*, char*)+0x33>
c0019753:	57                   	push   edi
c0019754:	56                   	push   esi
c0019755:	53                   	push   ebx
c0019756:	68 c8 94 02 c0       	push   0xc00294c8
c001975b:	e8 7b fe ff ff       	call   c00195db <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019760:	83 c4 10             	add    esp,0x10
c0019763:	5b                   	pop    ebx
c0019764:	5e                   	pop    esi
c0019765:	5f                   	pop    edi
c0019766:	c3                   	ret    

c0019767 <Reg::readInt(char*, char*, int*)>:
c0019767:	55                   	push   ebp
c0019768:	57                   	push   edi
c0019769:	56                   	push   esi
c001976a:	53                   	push   ebx
c001976b:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019771:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019775:	57                   	push   edi
c0019776:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001977d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019784:	e8 a7 ff ff ff       	call   c0019730 <Reg::getLine(char*, char*, char*)>
c0019789:	83 c4 10             	add    esp,0x10
c001978c:	84 c0                	test   al,al
c001978e:	0f 84 b3 00 00 00    	je     c0019847 <Reg::readInt(char*, char*, int*)+0xe0>
c0019794:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019798:	80 fa 2b             	cmp    dl,0x2b
c001979b:	74 0c                	je     c00197a9 <Reg::readInt(char*, char*, int*)+0x42>
c001979d:	80 fa 2d             	cmp    dl,0x2d
c00197a0:	75 0e                	jne    c00197b0 <Reg::readInt(char*, char*, int*)+0x49>
c00197a2:	ba 01 00 00 00       	mov    edx,0x1
c00197a7:	eb 0b                	jmp    c00197b4 <Reg::readInt(char*, char*, int*)+0x4d>
c00197a9:	ba 01 00 00 00       	mov    edx,0x1
c00197ae:	eb 02                	jmp    c00197b2 <Reg::readInt(char*, char*, int*)+0x4b>
c00197b0:	31 d2                	xor    edx,edx
c00197b2:	31 c0                	xor    eax,eax
c00197b4:	be 0a 00 00 00       	mov    esi,0xa
c00197b9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00197be:	75 20                	jne    c00197e0 <Reg::readInt(char*, char*, int*)+0x79>
c00197c0:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00197c4:	80 f9 78             	cmp    cl,0x78
c00197c7:	75 0a                	jne    c00197d3 <Reg::readInt(char*, char*, int*)+0x6c>
c00197c9:	83 c2 02             	add    edx,0x2
c00197cc:	be 10 00 00 00       	mov    esi,0x10
c00197d1:	eb 0d                	jmp    c00197e0 <Reg::readInt(char*, char*, int*)+0x79>
c00197d3:	80 f9 62             	cmp    cl,0x62
c00197d6:	75 08                	jne    c00197e0 <Reg::readInt(char*, char*, int*)+0x79>
c00197d8:	83 c2 02             	add    edx,0x2
c00197db:	be 02 00 00 00       	mov    esi,0x2
c00197e0:	01 d7                	add    edi,edx
c00197e2:	31 d2                	xor    edx,edx
c00197e4:	8a 1f                	mov    bl,BYTE PTR [edi]
c00197e6:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00197ea:	80 fb 0d             	cmp    bl,0xd
c00197ed:	0f 94 c3             	sete   bl
c00197f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00197f5:	0f 94 c1             	sete   cl
c00197f8:	08 cb                	or     bl,cl
c00197fa:	75 3a                	jne    c0019836 <Reg::readInt(char*, char*, int*)+0xcf>
c00197fc:	0f af d6             	imul   edx,esi
c00197ff:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0019804:	83 fe 10             	cmp    esi,0x10
c0019807:	75 26                	jne    c001982f <Reg::readInt(char*, char*, int*)+0xc8>
c0019809:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001980d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019810:	89 e9                	mov    ecx,ebp
c0019812:	80 f9 05             	cmp    cl,0x5
c0019815:	77 06                	ja     c001981d <Reg::readInt(char*, char*, int*)+0xb6>
c0019817:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001981b:	eb 16                	jmp    c0019833 <Reg::readInt(char*, char*, int*)+0xcc>
c001981d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019821:	83 e9 61             	sub    ecx,0x61
c0019824:	80 f9 05             	cmp    cl,0x5
c0019827:	77 06                	ja     c001982f <Reg::readInt(char*, char*, int*)+0xc8>
c0019829:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001982d:	eb 04                	jmp    c0019833 <Reg::readInt(char*, char*, int*)+0xcc>
c001982f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019833:	47                   	inc    edi
c0019834:	eb ae                	jmp    c00197e4 <Reg::readInt(char*, char*, int*)+0x7d>
c0019836:	84 c0                	test   al,al
c0019838:	74 02                	je     c001983c <Reg::readInt(char*, char*, int*)+0xd5>
c001983a:	f7 da                	neg    edx
c001983c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0019843:	89 10                	mov    DWORD PTR [eax],edx
c0019845:	88 d8                	mov    al,bl
c0019847:	81 c4 ec 00 00 00    	add    esp,0xec
c001984d:	5b                   	pop    ebx
c001984e:	5e                   	pop    esi
c001984f:	5f                   	pop    edi
c0019850:	5d                   	pop    ebp
c0019851:	c3                   	ret    

c0019852 <Reg::readString(char*, char*, char*, int)>:
c0019852:	57                   	push   edi
c0019853:	56                   	push   esi
c0019854:	53                   	push   ebx
c0019855:	81 ec d4 00 00 00    	sub    esp,0xd4
c001985b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019862:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019866:	57                   	push   edi
c0019867:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001986e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019875:	e8 b6 fe ff ff       	call   c0019730 <Reg::getLine(char*, char*, char*)>
c001987a:	83 c4 10             	add    esp,0x10
c001987d:	89 c6                	mov    esi,eax
c001987f:	84 c0                	test   al,al
c0019881:	74 44                	je     c00198c7 <Reg::readString(char*, char*, char*, int)+0x75>
c0019883:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001988a:	31 c0                	xor    eax,eax
c001988c:	4a                   	dec    edx
c001988d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019890:	84 c9                	test   cl,cl
c0019892:	74 0f                	je     c00198a3 <Reg::readString(char*, char*, char*, int)+0x51>
c0019894:	39 c2                	cmp    edx,eax
c0019896:	7e 0b                	jle    c00198a3 <Reg::readString(char*, char*, char*, int)+0x51>
c0019898:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001989b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00198a0:	40                   	inc    eax
c00198a1:	eb ea                	jmp    c001988d <Reg::readString(char*, char*, char*, int)+0x3b>
c00198a3:	83 ec 0c             	sub    esp,0xc
c00198a6:	53                   	push   ebx
c00198a7:	e8 ec 6d fe ff       	call   c0000698 <strlen>
c00198ac:	83 c4 10             	add    esp,0x10
c00198af:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00198b4:	75 11                	jne    c00198c7 <Reg::readString(char*, char*, char*, int)+0x75>
c00198b6:	83 ec 0c             	sub    esp,0xc
c00198b9:	53                   	push   ebx
c00198ba:	e8 d9 6d fe ff       	call   c0000698 <strlen>
c00198bf:	83 c4 10             	add    esp,0x10
c00198c2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00198c7:	81 c4 d0 00 00 00    	add    esp,0xd0
c00198cd:	89 f0                	mov    eax,esi
c00198cf:	5b                   	pop    ebx
c00198d0:	5e                   	pop    esi
c00198d1:	5f                   	pop    edi
c00198d2:	c3                   	ret    

c00198d3 <Reg::readBool(char*, char*, bool*)>:
c00198d3:	83 ec 20             	sub    esp,0x20
c00198d6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198da:	50                   	push   eax
c00198db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198e3:	e8 7f fe ff ff       	call   c0019767 <Reg::readInt(char*, char*, int*)>
c00198e8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00198ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00198f1:	0f 95 02             	setne  BYTE PTR [edx]
c00198f4:	83 c4 2c             	add    esp,0x2c
c00198f7:	c3                   	ret    

c00198f8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00198f8:	53                   	push   ebx
c00198f9:	83 ec 1c             	sub    esp,0x1c
c00198fc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019900:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019904:	50                   	push   eax
c0019905:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019909:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001990d:	e8 c1 ff ff ff       	call   c00198d3 <Reg::readBool(char*, char*, bool*)>
c0019912:	83 c4 10             	add    esp,0x10
c0019915:	84 c0                	test   al,al
c0019917:	74 04                	je     c001991d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0019919:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001991d:	88 d8                	mov    al,bl
c001991f:	83 c4 18             	add    esp,0x18
c0019922:	5b                   	pop    ebx
c0019923:	c3                   	ret    

c0019924 <Reg::readIntWithDefault(char*, char*, int)>:
c0019924:	53                   	push   ebx
c0019925:	83 ec 1c             	sub    esp,0x1c
c0019928:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001992c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019930:	50                   	push   eax
c0019931:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019935:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019939:	e8 29 fe ff ff       	call   c0019767 <Reg::readInt(char*, char*, int*)>
c001993e:	83 c4 10             	add    esp,0x10
c0019941:	84 c0                	test   al,al
c0019943:	74 04                	je     c0019949 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0019945:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019949:	89 d8                	mov    eax,ebx
c001994b:	83 c4 18             	add    esp,0x18
c001994e:	5b                   	pop    ebx
c001994f:	c3                   	ret    

c0019950 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019950:	57                   	push   edi
c0019951:	56                   	push   esi
c0019952:	53                   	push   ebx
c0019953:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019957:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001995b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001995f:	56                   	push   esi
c0019960:	53                   	push   ebx
c0019961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019969:	e8 e4 fe ff ff       	call   c0019852 <Reg::readString(char*, char*, char*, int)>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	84 c0                	test   al,al
c0019973:	75 1b                	jne    c0019990 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c0019975:	50                   	push   eax
c0019976:	56                   	push   esi
c0019977:	4e                   	dec    esi
c0019978:	6a 00                	push   0x0
c001997a:	53                   	push   ebx
c001997b:	e8 fb 6c fe ff       	call   c000067b <memset>
c0019980:	83 c4 0c             	add    esp,0xc
c0019983:	56                   	push   esi
c0019984:	57                   	push   edi
c0019985:	53                   	push   ebx
c0019986:	89 fb                	mov    ebx,edi
c0019988:	e8 b8 6c fe ff       	call   c0000645 <memcpy>
c001998d:	83 c4 10             	add    esp,0x10
c0019990:	89 d8                	mov    eax,ebx
c0019992:	5b                   	pop    ebx
c0019993:	5e                   	pop    esi
c0019994:	5f                   	pop    edi
c0019995:	c3                   	ret    

c0019996 <Sys::exit(regs*)>:
c0019996:	83 ec 18             	sub    esp,0x18
c0019999:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001999d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199a0:	e8 15 32 00 00       	call   c001cbba <terminateTask(int)>
c00199a5:	83 c8 ff             	or     eax,0xffffffff
c00199a8:	83 c4 1c             	add    esp,0x1c
c00199ab:	89 c2                	mov    edx,eax
c00199ad:	c3                   	ret    

c00199ae <Sys::getCwd(regs*)>:
c00199ae:	83 ec 10             	sub    esp,0x10
c00199b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199b5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00199b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199c0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199c3:	e8 65 95 ff ff       	call   c0012f2d <getcwd(Process*, char*, int)>
c00199c8:	83 c4 1c             	add    esp,0x1c
c00199cb:	99                   	cdq    
c00199cc:	c3                   	ret    

c00199cd <Sys::getPID(regs*)>:
c00199cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00199d7:	99                   	cdq    
c00199d8:	c3                   	ret    

c00199d9 <Sys::loadDLL(regs*)>:
c00199d9:	56                   	push   esi
c00199da:	53                   	push   ebx
c00199db:	31 d2                	xor    edx,edx
c00199dd:	51                   	push   ecx
c00199de:	b8 01 00 00 00       	mov    eax,0x1
c00199e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00199e7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00199eb:	0f 84 8c 00 00 00    	je     c0019a7d <Sys::loadDLL(regs*)+0xa4>
c00199f1:	83 ec 0c             	sub    esp,0xc
c00199f4:	68 14 01 00 00       	push   0x114
c00199f9:	e8 c2 5a ff ff       	call   c000f4c0 <malloc>
c00199fe:	83 c4 0c             	add    esp,0xc
c0019a01:	89 c3                	mov    ebx,eax
c0019a03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a08:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a0b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019a0e:	53                   	push   ebx
c0019a0f:	e8 a8 91 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0019a14:	83 c4 10             	add    esp,0x10
c0019a17:	31 d2                	xor    edx,edx
c0019a19:	b8 02 00 00 00       	mov    eax,0x2
c0019a1e:	85 db                	test   ebx,ebx
c0019a20:	74 5b                	je     c0019a7d <Sys::loadDLL(regs*)+0xa4>
c0019a22:	83 ec 0c             	sub    esp,0xc
c0019a25:	53                   	push   ebx
c0019a26:	e8 63 94 ff ff       	call   c0012e8e <File::exists()>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	84 c0                	test   al,al
c0019a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a32:	75 11                	jne    c0019a45 <Sys::loadDLL(regs*)+0x6c>
c0019a34:	83 ec 0c             	sub    esp,0xc
c0019a37:	53                   	push   ebx
c0019a38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a3b:	83 c4 10             	add    esp,0x10
c0019a3e:	b8 03 00 00 00       	mov    eax,0x3
c0019a43:	eb 36                	jmp    c0019a7b <Sys::loadDLL(regs*)+0xa2>
c0019a45:	83 ec 0c             	sub    esp,0xc
c0019a48:	53                   	push   ebx
c0019a49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a4c:	58                   	pop    eax
c0019a4d:	5a                   	pop    edx
c0019a4e:	6a 00                	push   0x0
c0019a50:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019a53:	e8 09 21 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	89 c1                	mov    ecx,eax
c0019a5d:	31 d2                	xor    edx,edx
c0019a5f:	b8 04 00 00 00       	mov    eax,0x4
c0019a64:	85 c9                	test   ecx,ecx
c0019a66:	74 15                	je     c0019a7d <Sys::loadDLL(regs*)+0xa4>
c0019a68:	53                   	push   ebx
c0019a69:	53                   	push   ebx
c0019a6a:	ff 35 48 b8 02 c0    	push   DWORD PTR ds:0xc002b848
c0019a70:	51                   	push   ecx
c0019a71:	e8 fa 22 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c0019a76:	83 c4 10             	add    esp,0x10
c0019a79:	31 c0                	xor    eax,eax
c0019a7b:	31 d2                	xor    edx,edx
c0019a7d:	59                   	pop    ecx
c0019a7e:	5b                   	pop    ebx
c0019a7f:	5e                   	pop    esi
c0019a80:	c3                   	ret    

c0019a81 <Sys::read(regs*)>:
c0019a81:	57                   	push   edi
c0019a82:	56                   	push   esi
c0019a83:	53                   	push   ebx
c0019a84:	83 ec 10             	sub    esp,0x10
c0019a87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019a8e:	83 f8 02             	cmp    eax,0x2
c0019a91:	77 10                	ja     c0019aa3 <Sys::read(regs*)+0x22>
c0019a93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019a9b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019aa1:	eb 0e                	jmp    c0019ab1 <Sys::read(regs*)+0x30>
c0019aa3:	83 ec 0c             	sub    esp,0xc
c0019aa6:	50                   	push   eax
c0019aa7:	e8 9b 7a ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019aac:	83 c4 10             	add    esp,0x10
c0019aaf:	89 c1                	mov    ecx,eax
c0019ab1:	83 c8 ff             	or     eax,0xffffffff
c0019ab4:	85 c9                	test   ecx,ecx
c0019ab6:	89 c2                	mov    edx,eax
c0019ab8:	74 28                	je     c0019ae2 <Sys::read(regs*)+0x61>
c0019aba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ac2:	31 ff                	xor    edi,edi
c0019ac4:	83 ec 0c             	sub    esp,0xc
c0019ac7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019ac9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019acd:	52                   	push   edx
c0019ace:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019ad1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019ad4:	57                   	push   edi
c0019ad5:	56                   	push   esi
c0019ad6:	51                   	push   ecx
c0019ad7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019ade:	83 c4 20             	add    esp,0x20
c0019ae1:	99                   	cdq    
c0019ae2:	83 c4 10             	add    esp,0x10
c0019ae5:	5b                   	pop    ebx
c0019ae6:	5e                   	pop    esi
c0019ae7:	5f                   	pop    edi
c0019ae8:	c3                   	ret    

c0019ae9 <Sys::sbrk(regs*)>:
c0019ae9:	56                   	push   esi
c0019aea:	53                   	push   ebx
c0019aeb:	50                   	push   eax
c0019aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019af1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019af5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019af8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019afb:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019b01:	85 db                	test   ebx,ebx
c0019b03:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019b06:	74 02                	je     c0019b0a <Sys::sbrk(regs*)+0x21>
c0019b08:	79 06                	jns    c0019b10 <Sys::sbrk(regs*)+0x27>
c0019b0a:	89 f0                	mov    eax,esi
c0019b0c:	31 d2                	xor    edx,edx
c0019b0e:	eb 2a                	jmp    c0019b3a <Sys::sbrk(regs*)+0x51>
c0019b10:	83 c8 ff             	or     eax,0xffffffff
c0019b13:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019b19:	89 c2                	mov    edx,eax
c0019b1b:	77 1d                	ja     c0019b3a <Sys::sbrk(regs*)+0x51>
c0019b1d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019b23:	50                   	push   eax
c0019b24:	c1 ea 0c             	shr    edx,0xc
c0019b27:	68 07 04 00 00       	push   0x407
c0019b2c:	52                   	push   edx
c0019b2d:	51                   	push   ecx
c0019b2e:	e8 35 83 ff ff       	call   c0011e68 <VAS::allocatePages(int, int)>
c0019b33:	89 f0                	mov    eax,esi
c0019b35:	31 d2                	xor    edx,edx
c0019b37:	83 c4 10             	add    esp,0x10
c0019b3a:	59                   	pop    ecx
c0019b3b:	5b                   	pop    ebx
c0019b3c:	5e                   	pop    esi
c0019b3d:	c3                   	ret    

c0019b3e <Sys::setCwd(regs*)>:
c0019b3e:	83 ec 14             	sub    esp,0x14
c0019b41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b45:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b4d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b50:	e8 02 94 ff ff       	call   c0012f57 <setcwd(Process*, char*)>
c0019b55:	83 c4 1c             	add    esp,0x1c
c0019b58:	99                   	cdq    
c0019b59:	c3                   	ret    

c0019b5a <Sys::write(regs*)>:
c0019b5a:	57                   	push   edi
c0019b5b:	56                   	push   esi
c0019b5c:	53                   	push   ebx
c0019b5d:	83 ec 10             	sub    esp,0x10
c0019b60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019b64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b67:	83 f8 02             	cmp    eax,0x2
c0019b6a:	77 10                	ja     c0019b7c <Sys::write(regs*)+0x22>
c0019b6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b74:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019b7a:	eb 0e                	jmp    c0019b8a <Sys::write(regs*)+0x30>
c0019b7c:	83 ec 0c             	sub    esp,0xc
c0019b7f:	50                   	push   eax
c0019b80:	e8 c2 79 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	89 c1                	mov    ecx,eax
c0019b8a:	83 c8 ff             	or     eax,0xffffffff
c0019b8d:	85 c9                	test   ecx,ecx
c0019b8f:	89 c2                	mov    edx,eax
c0019b91:	74 28                	je     c0019bbb <Sys::write(regs*)+0x61>
c0019b93:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b9b:	31 ff                	xor    edi,edi
c0019b9d:	83 ec 0c             	sub    esp,0xc
c0019ba0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019ba2:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019ba6:	52                   	push   edx
c0019ba7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019baa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019bad:	57                   	push   edi
c0019bae:	56                   	push   esi
c0019baf:	51                   	push   ecx
c0019bb0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019bb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019bb7:	83 c4 20             	add    esp,0x20
c0019bba:	99                   	cdq    
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	5b                   	pop    ebx
c0019bbf:	5e                   	pop    esi
c0019bc0:	5f                   	pop    edi
c0019bc1:	c3                   	ret    

c0019bc2 <Sys::yield(regs*)>:
c0019bc2:	57                   	push   edi
c0019bc3:	56                   	push   esi
c0019bc4:	53                   	push   ebx
c0019bc5:	e8 d3 25 00 00       	call   c001c19d <lockScheduler()>
c0019bca:	e8 09 29 00 00       	call   c001c4d8 <schedule()>
c0019bcf:	e8 cb 25 00 00       	call   c001c19f <unlockScheduler()>
c0019bd4:	8b 35 b0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002beb0
c0019bda:	8b 3d b4 be 02 c0    	mov    edi,DWORD PTR ds:0xc002beb4
c0019be0:	89 f0                	mov    eax,esi
c0019be2:	89 fb                	mov    ebx,edi
c0019be4:	89 f1                	mov    ecx,esi
c0019be6:	c1 e0 07             	shl    eax,0x7
c0019be9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c0019bed:	25 80 30 0f 00       	and    eax,0xf3080
c0019bf2:	c1 eb 17             	shr    ebx,0x17
c0019bf5:	31 c8                	xor    eax,ecx
c0019bf7:	89 da                	mov    edx,ebx
c0019bf9:	5b                   	pop    ebx
c0019bfa:	5e                   	pop    esi
c0019bfb:	5f                   	pop    edi
c0019bfc:	c3                   	ret    

c0019bfd <sysCallSeekDir(regs*)>:
c0019bfd:	31 c0                	xor    eax,eax
c0019bff:	31 d2                	xor    edx,edx
c0019c01:	c3                   	ret    

c0019c02 <sysCallTellDir(regs*)>:
c0019c02:	31 c0                	xor    eax,eax
c0019c04:	31 d2                	xor    edx,edx
c0019c06:	c3                   	ret    

c0019c07 <sysCallVerify(regs*)>:
c0019c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c0b:	31 d2                	xor    edx,edx
c0019c0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019c10:	c3                   	ret    

c0019c11 <sysCallGetArgc(regs*)>:
c0019c11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c19:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019c1f:	99                   	cdq    
c0019c20:	c3                   	ret    

c0019c21 <sysFormatDisk(regs*)>:
c0019c21:	56                   	push   esi
c0019c22:	53                   	push   ebx
c0019c23:	53                   	push   ebx
c0019c24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c28:	8b 1d a8 b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b9a8
c0019c2e:	eb 25                	jmp    c0019c55 <sysFormatDisk(regs*)+0x34>
c0019c30:	83 ec 0c             	sub    esp,0xc
c0019c33:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c36:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019c38:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019c3b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c3e:	50                   	push   eax
c0019c3f:	ff 34 85 40 be 02 c0 	push   DWORD PTR [eax*4-0x3ffd41c0]
c0019c46:	53                   	push   ebx
c0019c47:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019c4a:	83 c4 20             	add    esp,0x20
c0019c4d:	83 f8 08             	cmp    eax,0x8
c0019c50:	75 12                	jne    c0019c64 <sysFormatDisk(regs*)+0x43>
c0019c52:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019c55:	85 db                	test   ebx,ebx
c0019c57:	75 d7                	jne    c0019c30 <sysFormatDisk(regs*)+0xf>
c0019c59:	59                   	pop    ecx
c0019c5a:	b8 03 00 00 00       	mov    eax,0x3
c0019c5f:	31 d2                	xor    edx,edx
c0019c61:	5b                   	pop    ebx
c0019c62:	5e                   	pop    esi
c0019c63:	c3                   	ret    
c0019c64:	85 c0                	test   eax,eax
c0019c66:	74 1b                	je     c0019c83 <sysFormatDisk(regs*)+0x62>
c0019c68:	83 f8 09             	cmp    eax,0x9
c0019c6b:	74 0b                	je     c0019c78 <sysFormatDisk(regs*)+0x57>
c0019c6d:	59                   	pop    ecx
c0019c6e:	b8 02 00 00 00       	mov    eax,0x2
c0019c73:	31 d2                	xor    edx,edx
c0019c75:	5b                   	pop    ebx
c0019c76:	5e                   	pop    esi
c0019c77:	c3                   	ret    
c0019c78:	59                   	pop    ecx
c0019c79:	b8 01 00 00 00       	mov    eax,0x1
c0019c7e:	31 d2                	xor    edx,edx
c0019c80:	5b                   	pop    ebx
c0019c81:	5e                   	pop    esi
c0019c82:	c3                   	ret    
c0019c83:	59                   	pop    ecx
c0019c84:	31 c0                	xor    eax,eax
c0019c86:	31 d2                	xor    edx,edx
c0019c88:	5b                   	pop    ebx
c0019c89:	5e                   	pop    esi
c0019c8a:	c3                   	ret    

c0019c8b <sysSetDiskVolumeLabel(regs*)>:
c0019c8b:	56                   	push   esi
c0019c8c:	53                   	push   ebx
c0019c8d:	53                   	push   ebx
c0019c8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c92:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019c95:	83 f8 19             	cmp    eax,0x19
c0019c98:	77 29                	ja     c0019cc3 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019c9a:	8b 0c 85 40 be 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd41c0]
c0019ca1:	85 c9                	test   ecx,ecx
c0019ca3:	74 1e                	je     c0019cc3 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019ca5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019ca8:	85 d2                	test   edx,edx
c0019caa:	74 17                	je     c0019cc3 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019cac:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0019cb2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019cb4:	52                   	push   edx
c0019cb5:	50                   	push   eax
c0019cb6:	51                   	push   ecx
c0019cb7:	53                   	push   ebx
c0019cb8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0019cbb:	83 c4 10             	add    esp,0x10
c0019cbe:	99                   	cdq    
c0019cbf:	59                   	pop    ecx
c0019cc0:	5b                   	pop    ebx
c0019cc1:	5e                   	pop    esi
c0019cc2:	c3                   	ret    
c0019cc3:	59                   	pop    ecx
c0019cc4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019cc9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019cce:	5b                   	pop    ebx
c0019ccf:	5e                   	pop    esi
c0019cd0:	c3                   	ret    

c0019cd1 <sysGetDiskVolumeLabel(regs*)>:
c0019cd1:	57                   	push   edi
c0019cd2:	56                   	push   esi
c0019cd3:	53                   	push   ebx
c0019cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019cdb:	83 fa 19             	cmp    edx,0x19
c0019cde:	77 34                	ja     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019ce0:	8b 0c 95 40 be 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd41c0]
c0019ce7:	85 c9                	test   ecx,ecx
c0019ce9:	74 29                	je     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019ceb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019cee:	85 db                	test   ebx,ebx
c0019cf0:	74 22                	je     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019cf2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019cf5:	85 c0                	test   eax,eax
c0019cf7:	74 1b                	je     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019cf9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019cff:	83 ec 0c             	sub    esp,0xc
c0019d02:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019d04:	50                   	push   eax
c0019d05:	53                   	push   ebx
c0019d06:	52                   	push   edx
c0019d07:	51                   	push   ecx
c0019d08:	56                   	push   esi
c0019d09:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019d0c:	83 c4 20             	add    esp,0x20
c0019d0f:	99                   	cdq    
c0019d10:	5b                   	pop    ebx
c0019d11:	5e                   	pop    esi
c0019d12:	5f                   	pop    edi
c0019d13:	c3                   	ret    
c0019d14:	5b                   	pop    ebx
c0019d15:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019d1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d1f:	5e                   	pop    esi
c0019d20:	5f                   	pop    edi
c0019d21:	c3                   	ret    

c0019d22 <sysShutdown(regs*)>:
c0019d22:	83 ec 0c             	sub    esp,0xc
c0019d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d29:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019d2c:	85 c0                	test   eax,eax
c0019d2e:	74 18                	je     c0019d48 <sysShutdown(regs*)+0x26>
c0019d30:	83 f8 01             	cmp    eax,0x1
c0019d33:	74 38                	je     c0019d6d <sysShutdown(regs*)+0x4b>
c0019d35:	83 f8 02             	cmp    eax,0x2
c0019d38:	74 24                	je     c0019d5e <sysShutdown(regs*)+0x3c>
c0019d3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019d3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d44:	83 c4 0c             	add    esp,0xc
c0019d47:	c3                   	ret    
c0019d48:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0019d4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0019d4f:	6a 00                	push   0x0
c0019d51:	6a 00                	push   0x0
c0019d53:	6a 00                	push   0x0
c0019d55:	50                   	push   eax
c0019d56:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019d59:	83 c4 10             	add    esp,0x10
c0019d5c:	eb dc                	jmp    c0019d3a <sysShutdown(regs*)+0x18>
c0019d5e:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0019d63:	8b 10                	mov    edx,DWORD PTR [eax]
c0019d65:	6a 00                	push   0x0
c0019d67:	6a 00                	push   0x0
c0019d69:	6a 01                	push   0x1
c0019d6b:	eb e8                	jmp    c0019d55 <sysShutdown(regs*)+0x33>
c0019d6d:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c0019d72:	85 c0                	test   eax,eax
c0019d74:	74 02                	je     c0019d78 <sysShutdown(regs*)+0x56>
c0019d76:	ff d0                	call   eax
c0019d78:	31 c0                	xor    eax,eax
c0019d7a:	31 d2                	xor    edx,edx
c0019d7c:	83 c4 0c             	add    esp,0xc
c0019d7f:	c3                   	ret    

c0019d80 <sysCallRealpath(regs*)>:
c0019d80:	83 ec 0c             	sub    esp,0xc
c0019d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d87:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019d8a:	85 d2                	test   edx,edx
c0019d8c:	74 07                	je     c0019d95 <sysCallRealpath(regs*)+0x15>
c0019d8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019d91:	85 c0                	test   eax,eax
c0019d93:	75 0b                	jne    c0019da0 <sysCallRealpath(regs*)+0x20>
c0019d95:	b8 01 00 00 00       	mov    eax,0x1
c0019d9a:	31 d2                	xor    edx,edx
c0019d9c:	83 c4 0c             	add    esp,0xc
c0019d9f:	c3                   	ret    
c0019da0:	51                   	push   ecx
c0019da1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019da7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019daa:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019db0:	51                   	push   ecx
c0019db1:	52                   	push   edx
c0019db2:	50                   	push   eax
c0019db3:	e8 5a 8c ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c0019db8:	83 c4 10             	add    esp,0x10
c0019dbb:	31 c0                	xor    eax,eax
c0019dbd:	31 d2                	xor    edx,edx
c0019dbf:	83 c4 0c             	add    esp,0xc
c0019dc2:	c3                   	ret    

c0019dc3 <sysCallReadDir(regs*)>:
c0019dc3:	53                   	push   ebx
c0019dc4:	83 ec 18             	sub    esp,0x18
c0019dc7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019dcb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019dce:	83 f8 02             	cmp    eax,0x2
c0019dd1:	76 53                	jbe    c0019e26 <sysCallReadDir(regs*)+0x63>
c0019dd3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019dd6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019ddc:	77 4f                	ja     c0019e2d <sysCallReadDir(regs*)+0x6a>
c0019dde:	83 ec 0c             	sub    esp,0xc
c0019de1:	50                   	push   eax
c0019de2:	e8 60 77 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019de7:	83 c4 10             	add    esp,0x10
c0019dea:	85 c0                	test   eax,eax
c0019dec:	74 50                	je     c0019e3e <sysCallReadDir(regs*)+0x7b>
c0019dee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019df6:	83 ec 0c             	sub    esp,0xc
c0019df9:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dfb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019dff:	51                   	push   ecx
c0019e00:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019e03:	6a 00                	push   0x0
c0019e05:	68 10 01 00 00       	push   0x110
c0019e0a:	50                   	push   eax
c0019e0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e0e:	83 c4 20             	add    esp,0x20
c0019e11:	85 c0                	test   eax,eax
c0019e13:	74 38                	je     c0019e4d <sysCallReadDir(regs*)+0x8a>
c0019e15:	83 f8 07             	cmp    eax,0x7
c0019e18:	74 0c                	je     c0019e26 <sysCallReadDir(regs*)+0x63>
c0019e1a:	b8 02 00 00 00       	mov    eax,0x2
c0019e1f:	31 d2                	xor    edx,edx
c0019e21:	83 c4 18             	add    esp,0x18
c0019e24:	5b                   	pop    ebx
c0019e25:	c3                   	ret    
c0019e26:	b8 01 00 00 00       	mov    eax,0x1
c0019e2b:	eb f2                	jmp    c0019e1f <sysCallReadDir(regs*)+0x5c>
c0019e2d:	83 ec 08             	sub    esp,0x8
c0019e30:	52                   	push   edx
c0019e31:	68 e4 94 02 c0       	push   0xc00294e4
c0019e36:	e8 52 88 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019e3b:	83 c4 10             	add    esp,0x10
c0019e3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019e48:	83 c4 18             	add    esp,0x18
c0019e4b:	5b                   	pop    ebx
c0019e4c:	c3                   	ret    
c0019e4d:	31 c0                	xor    eax,eax
c0019e4f:	eb ce                	jmp    c0019e1f <sysCallReadDir(regs*)+0x5c>

c0019e51 <sysCallIsATTY(regs*)>:
c0019e51:	83 ec 0c             	sub    esp,0xc
c0019e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019e5b:	83 f8 02             	cmp    eax,0x2
c0019e5e:	76 07                	jbe    c0019e67 <sysCallIsATTY(regs*)+0x16>
c0019e60:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019e65:	75 26                	jne    c0019e8d <sysCallIsATTY(regs*)+0x3c>
c0019e67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019e75:	85 c0                	test   eax,eax
c0019e77:	74 24                	je     c0019e9d <sysCallIsATTY(regs*)+0x4c>
c0019e79:	83 ec 0c             	sub    esp,0xc
c0019e7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e7e:	50                   	push   eax
c0019e7f:	ff 12                	call   DWORD PTR [edx]
c0019e81:	31 d2                	xor    edx,edx
c0019e83:	0f b6 c0             	movzx  eax,al
c0019e86:	83 c4 10             	add    esp,0x10
c0019e89:	83 c4 0c             	add    esp,0xc
c0019e8c:	c3                   	ret    
c0019e8d:	83 ec 0c             	sub    esp,0xc
c0019e90:	50                   	push   eax
c0019e91:	e8 b1 76 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019e96:	83 c4 10             	add    esp,0x10
c0019e99:	85 c0                	test   eax,eax
c0019e9b:	75 dc                	jne    c0019e79 <sysCallIsATTY(regs*)+0x28>
c0019e9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ea2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ea7:	83 c4 0c             	add    esp,0xc
c0019eaa:	c3                   	ret    

c0019eab <sysCallSeek(regs*)>:
c0019eab:	53                   	push   ebx
c0019eac:	83 ec 08             	sub    esp,0x8
c0019eaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eb3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019eb6:	83 f8 02             	cmp    eax,0x2
c0019eb9:	76 4a                	jbe    c0019f05 <sysCallSeek(regs*)+0x5a>
c0019ebb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019ec0:	77 32                	ja     c0019ef4 <sysCallSeek(regs*)+0x49>
c0019ec2:	83 ec 0c             	sub    esp,0xc
c0019ec5:	50                   	push   eax
c0019ec6:	e8 7c 76 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019ecb:	83 c4 0c             	add    esp,0xc
c0019ece:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019ed1:	31 db                	xor    ebx,ebx
c0019ed3:	53                   	push   ebx
c0019ed4:	51                   	push   ecx
c0019ed5:	50                   	push   eax
c0019ed6:	e8 03 8e ff ff       	call   c0012cde <File::seek(unsigned long long)>
c0019edb:	83 c4 10             	add    esp,0x10
c0019ede:	85 c0                	test   eax,eax
c0019ee0:	0f 95 c0             	setne  al
c0019ee3:	31 d2                	xor    edx,edx
c0019ee5:	0f b6 c0             	movzx  eax,al
c0019ee8:	f7 d8                	neg    eax
c0019eea:	83 d2 00             	adc    edx,0x0
c0019eed:	83 c4 08             	add    esp,0x8
c0019ef0:	f7 da                	neg    edx
c0019ef2:	5b                   	pop    ebx
c0019ef3:	c3                   	ret    
c0019ef4:	83 ec 08             	sub    esp,0x8
c0019ef7:	50                   	push   eax
c0019ef8:	68 a0 95 02 c0       	push   0xc00295a0
c0019efd:	e8 8b 87 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019f02:	83 c4 10             	add    esp,0x10
c0019f05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f0a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f0f:	83 c4 08             	add    esp,0x8
c0019f12:	5b                   	pop    ebx
c0019f13:	c3                   	ret    

c0019f14 <sysCallTell(regs*)>:
c0019f14:	53                   	push   ebx
c0019f15:	83 ec 08             	sub    esp,0x8
c0019f18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019f1f:	83 f8 02             	cmp    eax,0x2
c0019f22:	76 5e                	jbe    c0019f82 <sysCallTell(regs*)+0x6e>
c0019f24:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019f29:	77 2d                	ja     c0019f58 <sysCallTell(regs*)+0x44>
c0019f2b:	83 ec 0c             	sub    esp,0xc
c0019f2e:	50                   	push   eax
c0019f2f:	e8 13 76 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019f34:	5a                   	pop    edx
c0019f35:	59                   	pop    ecx
c0019f36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019f39:	50                   	push   eax
c0019f3a:	e8 f5 8d ff ff       	call   c0012d34 <File::tell(unsigned long long*)>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	85 c0                	test   eax,eax
c0019f44:	0f 95 c0             	setne  al
c0019f47:	31 d2                	xor    edx,edx
c0019f49:	0f b6 c0             	movzx  eax,al
c0019f4c:	f7 d8                	neg    eax
c0019f4e:	83 d2 00             	adc    edx,0x0
c0019f51:	83 c4 08             	add    esp,0x8
c0019f54:	f7 da                	neg    edx
c0019f56:	5b                   	pop    ebx
c0019f57:	c3                   	ret    
c0019f58:	83 ec 08             	sub    esp,0x8
c0019f5b:	50                   	push   eax
c0019f5c:	68 ba 95 02 c0       	push   0xc00295ba
c0019f61:	e8 27 87 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019f66:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019f72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019f79:	31 d2                	xor    edx,edx
c0019f7b:	31 c0                	xor    eax,eax
c0019f7d:	83 c4 08             	add    esp,0x8
c0019f80:	5b                   	pop    ebx
c0019f81:	c3                   	ret    
c0019f82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f8c:	83 c4 08             	add    esp,0x8
c0019f8f:	5b                   	pop    ebx
c0019f90:	c3                   	ret    

c0019f91 <sysCallSize(regs*)>:
c0019f91:	53                   	push   ebx
c0019f92:	83 ec 18             	sub    esp,0x18
c0019f95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019f9c:	83 f8 02             	cmp    eax,0x2
c0019f9f:	76 64                	jbe    c001a005 <sysCallSize(regs*)+0x74>
c0019fa1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019fa6:	77 33                	ja     c0019fdb <sysCallSize(regs*)+0x4a>
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	50                   	push   eax
c0019fac:	e8 96 75 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019fb1:	83 c4 0c             	add    esp,0xc
c0019fb4:	8d 54 24 13          	lea    edx,[esp+0x13]
c0019fb8:	52                   	push   edx
c0019fb9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019fbc:	50                   	push   eax
c0019fbd:	e8 0a 8f ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c0019fc2:	83 c4 10             	add    esp,0x10
c0019fc5:	85 c0                	test   eax,eax
c0019fc7:	0f 95 c0             	setne  al
c0019fca:	31 d2                	xor    edx,edx
c0019fcc:	0f b6 c0             	movzx  eax,al
c0019fcf:	f7 d8                	neg    eax
c0019fd1:	83 d2 00             	adc    edx,0x0
c0019fd4:	83 c4 18             	add    esp,0x18
c0019fd7:	f7 da                	neg    edx
c0019fd9:	5b                   	pop    ebx
c0019fda:	c3                   	ret    
c0019fdb:	83 ec 08             	sub    esp,0x8
c0019fde:	50                   	push   eax
c0019fdf:	68 d4 95 02 c0       	push   0xc00295d4
c0019fe4:	e8 a4 86 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019fe9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ff5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ffc:	31 d2                	xor    edx,edx
c0019ffe:	31 c0                	xor    eax,eax
c001a000:	83 c4 18             	add    esp,0x18
c001a003:	5b                   	pop    ebx
c001a004:	c3                   	ret    
c001a005:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a00a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a00f:	83 c4 18             	add    esp,0x18
c001a012:	5b                   	pop    ebx
c001a013:	c3                   	ret    

c001a014 <sysCallSizeFromFilename(regs*)>:
c001a014:	57                   	push   edi
c001a015:	56                   	push   esi
c001a016:	53                   	push   ebx
c001a017:	83 ec 20             	sub    esp,0x20
c001a01a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a01e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001a021:	83 fb 02             	cmp    ebx,0x2
c001a024:	0f 86 99 00 00 00    	jbe    c001a0c3 <sysCallSizeFromFilename(regs*)+0xaf>
c001a02a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001a030:	77 65                	ja     c001a097 <sysCallSizeFromFilename(regs*)+0x83>
c001a032:	83 ec 0c             	sub    esp,0xc
c001a035:	68 14 01 00 00       	push   0x114
c001a03a:	e8 81 54 ff ff       	call   c000f4c0 <malloc>
c001a03f:	83 c4 0c             	add    esp,0xc
c001a042:	89 c6                	mov    esi,eax
c001a044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a049:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a04c:	53                   	push   ebx
c001a04d:	56                   	push   esi
c001a04e:	e8 69 8b ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a053:	83 c4 0c             	add    esp,0xc
c001a056:	8d 44 24 23          	lea    eax,[esp+0x23]
c001a05a:	50                   	push   eax
c001a05b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001a05e:	56                   	push   esi
c001a05f:	e8 68 8e ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001a064:	83 c4 10             	add    esp,0x10
c001a067:	85 f6                	test   esi,esi
c001a069:	74 14                	je     c001a07f <sysCallSizeFromFilename(regs*)+0x6b>
c001a06b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a06f:	8b 16                	mov    edx,DWORD PTR [esi]
c001a071:	83 ec 0c             	sub    esp,0xc
c001a074:	56                   	push   esi
c001a075:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a07f:	85 c0                	test   eax,eax
c001a081:	0f 95 c0             	setne  al
c001a084:	31 d2                	xor    edx,edx
c001a086:	0f b6 c0             	movzx  eax,al
c001a089:	f7 d8                	neg    eax
c001a08b:	83 d2 00             	adc    edx,0x0
c001a08e:	83 c4 20             	add    esp,0x20
c001a091:	f7 da                	neg    edx
c001a093:	5b                   	pop    ebx
c001a094:	5e                   	pop    esi
c001a095:	5f                   	pop    edi
c001a096:	c3                   	ret    
c001a097:	83 ec 08             	sub    esp,0x8
c001a09a:	53                   	push   ebx
c001a09b:	68 d4 95 02 c0       	push   0xc00295d4
c001a0a0:	e8 e8 85 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a0a5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001a0a8:	83 c4 10             	add    esp,0x10
c001a0ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a0b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a0b8:	31 d2                	xor    edx,edx
c001a0ba:	83 c4 20             	add    esp,0x20
c001a0bd:	31 c0                	xor    eax,eax
c001a0bf:	5b                   	pop    ebx
c001a0c0:	5e                   	pop    esi
c001a0c1:	5f                   	pop    edi
c001a0c2:	c3                   	ret    
c001a0c3:	83 c4 20             	add    esp,0x20
c001a0c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a0cb:	5b                   	pop    ebx
c001a0cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a0d1:	5e                   	pop    esi
c001a0d2:	5f                   	pop    edi
c001a0d3:	c3                   	ret    

c001a0d4 <sysCallClose(regs*)>:
c001a0d4:	53                   	push   ebx
c001a0d5:	83 ec 08             	sub    esp,0x8
c001a0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a0df:	83 f8 02             	cmp    eax,0x2
c001a0e2:	76 50                	jbe    c001a134 <sysCallClose(regs*)+0x60>
c001a0e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a0e9:	74 58                	je     c001a143 <sysCallClose(regs*)+0x6f>
c001a0eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a0f0:	74 60                	je     c001a152 <sysCallClose(regs*)+0x7e>
c001a0f2:	77 2f                	ja     c001a123 <sysCallClose(regs*)+0x4f>
c001a0f4:	83 ec 0c             	sub    esp,0xc
c001a0f7:	50                   	push   eax
c001a0f8:	e8 4a 74 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c001a0fd:	89 c3                	mov    ebx,eax
c001a0ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001a102:	e8 77 8b ff ff       	call   c0012c7e <File::close()>
c001a107:	83 c4 10             	add    esp,0x10
c001a10a:	85 db                	test   ebx,ebx
c001a10c:	74 0c                	je     c001a11a <sysCallClose(regs*)+0x46>
c001a10e:	83 ec 0c             	sub    esp,0xc
c001a111:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a113:	53                   	push   ebx
c001a114:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a117:	83 c4 10             	add    esp,0x10
c001a11a:	31 c0                	xor    eax,eax
c001a11c:	31 d2                	xor    edx,edx
c001a11e:	83 c4 08             	add    esp,0x8
c001a121:	5b                   	pop    ebx
c001a122:	c3                   	ret    
c001a123:	83 ec 08             	sub    esp,0x8
c001a126:	50                   	push   eax
c001a127:	68 08 95 02 c0       	push   0xc0029508
c001a12c:	e8 5c 85 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a131:	83 c4 10             	add    esp,0x10
c001a134:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a139:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a13e:	83 c4 08             	add    esp,0x8
c001a141:	5b                   	pop    ebx
c001a142:	c3                   	ret    
c001a143:	83 ec 0c             	sub    esp,0xc
c001a146:	68 ef 95 02 c0       	push   0xc00295ef
c001a14b:	e8 3d 85 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a150:	eb c5                	jmp    c001a117 <sysCallClose(regs*)+0x43>
c001a152:	83 ec 0c             	sub    esp,0xc
c001a155:	68 fd 95 02 c0       	push   0xc00295fd
c001a15a:	eb ef                	jmp    c001a14b <sysCallClose(regs*)+0x77>

c001a15c <sysCallOpenDir(regs*)>:
c001a15c:	56                   	push   esi
c001a15d:	53                   	push   ebx
c001a15e:	53                   	push   ebx
c001a15f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a163:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001a166:	85 f6                	test   esi,esi
c001a168:	74 59                	je     c001a1c3 <sysCallOpenDir(regs*)+0x67>
c001a16a:	83 ec 0c             	sub    esp,0xc
c001a16d:	68 14 01 00 00       	push   0x114
c001a172:	e8 49 53 ff ff       	call   c000f4c0 <malloc>
c001a177:	83 c4 0c             	add    esp,0xc
c001a17a:	89 c6                	mov    esi,eax
c001a17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a181:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a184:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a187:	56                   	push   esi
c001a188:	e8 05 8f ff ff       	call   c0013092 <Directory::Directory(char const*, Process*)>
c001a18d:	83 c4 10             	add    esp,0x10
c001a190:	85 f6                	test   esi,esi
c001a192:	74 2f                	je     c001a1c3 <sysCallOpenDir(regs*)+0x67>
c001a194:	83 ec 0c             	sub    esp,0xc
c001a197:	56                   	push   esi
c001a198:	e8 59 8f ff ff       	call   c00130f6 <Directory::open()>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	85 c0                	test   eax,eax
c001a1a2:	75 1f                	jne    c001a1c3 <sysCallOpenDir(regs*)+0x67>
c001a1a4:	83 ec 0c             	sub    esp,0xc
c001a1a7:	56                   	push   esi
c001a1a8:	e8 a5 70 ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a1ad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	89 02                	mov    DWORD PTR [edx],eax
c001a1b5:	c1 f8 1f             	sar    eax,0x1f
c001a1b8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a1bb:	31 c0                	xor    eax,eax
c001a1bd:	59                   	pop    ecx
c001a1be:	31 d2                	xor    edx,edx
c001a1c0:	5b                   	pop    ebx
c001a1c1:	5e                   	pop    esi
c001a1c2:	c3                   	ret    
c001a1c3:	59                   	pop    ecx
c001a1c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a1c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a1ce:	5b                   	pop    ebx
c001a1cf:	5e                   	pop    esi
c001a1d0:	c3                   	ret    

c001a1d1 <sysCallCloseDir(regs*)>:
c001a1d1:	53                   	push   ebx
c001a1d2:	83 ec 08             	sub    esp,0x8
c001a1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a1dc:	83 f8 02             	cmp    eax,0x2
c001a1df:	76 47                	jbe    c001a228 <sysCallCloseDir(regs*)+0x57>
c001a1e1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a1e6:	77 2f                	ja     c001a217 <sysCallCloseDir(regs*)+0x46>
c001a1e8:	83 ec 0c             	sub    esp,0xc
c001a1eb:	50                   	push   eax
c001a1ec:	e8 56 73 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c001a1f1:	89 c3                	mov    ebx,eax
c001a1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1f6:	e8 57 8f ff ff       	call   c0013152 <Directory::close()>
c001a1fb:	83 c4 10             	add    esp,0x10
c001a1fe:	85 db                	test   ebx,ebx
c001a200:	74 0c                	je     c001a20e <sysCallCloseDir(regs*)+0x3d>
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a207:	53                   	push   ebx
c001a208:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	31 c0                	xor    eax,eax
c001a210:	31 d2                	xor    edx,edx
c001a212:	83 c4 08             	add    esp,0x8
c001a215:	5b                   	pop    ebx
c001a216:	c3                   	ret    
c001a217:	83 ec 08             	sub    esp,0x8
c001a21a:	50                   	push   eax
c001a21b:	68 30 95 02 c0       	push   0xc0029530
c001a220:	e8 68 84 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a225:	83 c4 10             	add    esp,0x10
c001a228:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a22d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a232:	83 c4 08             	add    esp,0x8
c001a235:	5b                   	pop    ebx
c001a236:	c3                   	ret    

c001a237 <sysCallMakeDir(regs*)>:
c001a237:	56                   	push   esi
c001a238:	53                   	push   ebx
c001a239:	83 ec 10             	sub    esp,0x10
c001a23c:	68 14 01 00 00       	push   0x114
c001a241:	e8 7a 52 ff ff       	call   c000f4c0 <malloc>
c001a246:	83 c4 0c             	add    esp,0xc
c001a249:	89 c3                	mov    ebx,eax
c001a24b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a250:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a253:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a257:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a25a:	53                   	push   ebx
c001a25b:	e8 32 8e ff ff       	call   c0013092 <Directory::Directory(char const*, Process*)>
c001a260:	83 c4 10             	add    esp,0x10
c001a263:	85 db                	test   ebx,ebx
c001a265:	74 32                	je     c001a299 <sysCallMakeDir(regs*)+0x62>
c001a267:	83 ec 0c             	sub    esp,0xc
c001a26a:	53                   	push   ebx
c001a26b:	e8 66 90 ff ff       	call   c00132d6 <Directory::create()>
c001a270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a273:	89 c6                	mov    esi,eax
c001a275:	e8 d8 8e ff ff       	call   c0013152 <Directory::close()>
c001a27a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a27c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a27f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a282:	83 c4 10             	add    esp,0x10
c001a285:	31 c0                	xor    eax,eax
c001a287:	59                   	pop    ecx
c001a288:	85 f6                	test   esi,esi
c001a28a:	5b                   	pop    ebx
c001a28b:	0f 95 c0             	setne  al
c001a28e:	5e                   	pop    esi
c001a28f:	31 d2                	xor    edx,edx
c001a291:	f7 d8                	neg    eax
c001a293:	83 d2 00             	adc    edx,0x0
c001a296:	f7 da                	neg    edx
c001a298:	c3                   	ret    
c001a299:	59                   	pop    ecx
c001a29a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a29f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a2a4:	5b                   	pop    ebx
c001a2a5:	5e                   	pop    esi
c001a2a6:	c3                   	ret    

c001a2a7 <sysCallWait(regs*)>:
c001a2a7:	83 ec 10             	sub    esp,0x10
c001a2aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2ae:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a2b1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a2b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a2b7:	e8 97 23 00 00       	call   c001c653 <waitTask(int, int*, int)>
c001a2bc:	83 c4 1c             	add    esp,0x1c
c001a2bf:	99                   	cdq    
c001a2c0:	c3                   	ret    

c001a2c1 <sysCallNotImpl(regs*)>:
c001a2c1:	83 ec 18             	sub    esp,0x18
c001a2c4:	68 0b 96 02 c0       	push   0xc002960b
c001a2c9:	e8 89 ee ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001a2ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a2d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a2d8:	83 c4 1c             	add    esp,0x1c
c001a2db:	c3                   	ret    

c001a2dc <sysPanic(regs*)>:
c001a2dc:	83 ec 18             	sub    esp,0x18
c001a2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2e3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a2e6:	e8 6c ee ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001a2eb:	c7 04 24 25 96 02 c0 	mov    DWORD PTR [esp],0xc0029625
c001a2f2:	e8 60 ee ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001a2f7:	b8 01 00 00 00       	mov    eax,0x1
c001a2fc:	31 d2                	xor    edx,edx
c001a2fe:	83 c4 1c             	add    esp,0x1c
c001a301:	c3                   	ret    

c001a302 <sysCallRmdir(regs*)>:
c001a302:	56                   	push   esi
c001a303:	53                   	push   ebx
c001a304:	83 ec 20             	sub    esp,0x20
c001a307:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a30b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a30e:	68 14 01 00 00       	push   0x114
c001a313:	e8 a8 51 ff ff       	call   c000f4c0 <malloc>
c001a318:	83 c4 0c             	add    esp,0xc
c001a31b:	89 c3                	mov    ebx,eax
c001a31d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a322:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a325:	56                   	push   esi
c001a326:	53                   	push   ebx
c001a327:	e8 90 88 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a32c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a32f:	e8 64 8a ff ff       	call   c0012d98 <File::unlink()>
c001a334:	83 c4 10             	add    esp,0x10
c001a337:	85 db                	test   ebx,ebx
c001a339:	74 14                	je     c001a34f <sysCallRmdir(regs*)+0x4d>
c001a33b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a33f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a341:	83 ec 0c             	sub    esp,0xc
c001a344:	53                   	push   ebx
c001a345:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a34f:	85 c0                	test   eax,eax
c001a351:	0f 95 c0             	setne  al
c001a354:	31 d2                	xor    edx,edx
c001a356:	0f b6 c0             	movzx  eax,al
c001a359:	f7 d8                	neg    eax
c001a35b:	83 d2 00             	adc    edx,0x0
c001a35e:	83 c4 14             	add    esp,0x14
c001a361:	f7 da                	neg    edx
c001a363:	5b                   	pop    ebx
c001a364:	5e                   	pop    esi
c001a365:	c3                   	ret    

c001a366 <sysCallUnlink(regs*)>:
c001a366:	56                   	push   esi
c001a367:	53                   	push   ebx
c001a368:	83 ec 20             	sub    esp,0x20
c001a36b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a36f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a372:	68 14 01 00 00       	push   0x114
c001a377:	e8 44 51 ff ff       	call   c000f4c0 <malloc>
c001a37c:	83 c4 0c             	add    esp,0xc
c001a37f:	89 c3                	mov    ebx,eax
c001a381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a386:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a389:	56                   	push   esi
c001a38a:	53                   	push   ebx
c001a38b:	e8 2c 88 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a390:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a393:	e8 00 8a ff ff       	call   c0012d98 <File::unlink()>
c001a398:	83 c4 10             	add    esp,0x10
c001a39b:	85 db                	test   ebx,ebx
c001a39d:	74 14                	je     c001a3b3 <sysCallUnlink(regs*)+0x4d>
c001a39f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3a5:	83 ec 0c             	sub    esp,0xc
c001a3a8:	53                   	push   ebx
c001a3a9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a3ac:	83 c4 10             	add    esp,0x10
c001a3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3b3:	85 c0                	test   eax,eax
c001a3b5:	0f 95 c0             	setne  al
c001a3b8:	31 d2                	xor    edx,edx
c001a3ba:	0f b6 c0             	movzx  eax,al
c001a3bd:	f7 d8                	neg    eax
c001a3bf:	83 d2 00             	adc    edx,0x0
c001a3c2:	83 c4 14             	add    esp,0x14
c001a3c5:	f7 da                	neg    edx
c001a3c7:	5b                   	pop    ebx
c001a3c8:	5e                   	pop    esi
c001a3c9:	c3                   	ret    

c001a3ca <sysCallGetArgv(regs*)>:
c001a3ca:	83 ec 0c             	sub    esp,0xc
c001a3cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a3d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a3d4:	85 c0                	test   eax,eax
c001a3d6:	78 2b                	js     c001a403 <sysCallGetArgv(regs*)+0x39>
c001a3d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a3de:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a3e1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a3e7:	7d 1a                	jge    c001a403 <sysCallGetArgv(regs*)+0x39>
c001a3e9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a3f0:	85 c0                	test   eax,eax
c001a3f2:	74 17                	je     c001a40b <sysCallGetArgv(regs*)+0x41>
c001a3f4:	83 ec 08             	sub    esp,0x8
c001a3f7:	50                   	push   eax
c001a3f8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a3fb:	e8 1a 63 fe ff       	call   c000071a <strcpy>
c001a400:	83 c4 10             	add    esp,0x10
c001a403:	31 c0                	xor    eax,eax
c001a405:	31 d2                	xor    edx,edx
c001a407:	83 c4 0c             	add    esp,0xc
c001a40a:	c3                   	ret    
c001a40b:	b8 01 00 00 00       	mov    eax,0x1
c001a410:	31 d2                	xor    edx,edx
c001a412:	83 c4 0c             	add    esp,0xc
c001a415:	c3                   	ret    

c001a416 <sysCallTTYName(regs*)>:
c001a416:	56                   	push   esi
c001a417:	53                   	push   ebx
c001a418:	53                   	push   ebx
c001a419:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a41d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a420:	85 c0                	test   eax,eax
c001a422:	74 5f                	je     c001a483 <sysCallTTYName(regs*)+0x6d>
c001a424:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a427:	83 f8 02             	cmp    eax,0x2
c001a42a:	77 3e                	ja     c001a46a <sysCallTTYName(regs*)+0x54>
c001a42c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a431:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a434:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a43a:	85 db                	test   ebx,ebx
c001a43c:	74 45                	je     c001a483 <sysCallTTYName(regs*)+0x6d>
c001a43e:	83 ec 0c             	sub    esp,0xc
c001a441:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a443:	53                   	push   ebx
c001a444:	ff 10                	call   DWORD PTR [eax]
c001a446:	83 c4 10             	add    esp,0x10
c001a449:	84 c0                	test   al,al
c001a44b:	74 41                	je     c001a48e <sysCallTTYName(regs*)+0x78>
c001a44d:	83 ec 08             	sub    esp,0x8
c001a450:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a456:	53                   	push   ebx
c001a457:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a45a:	e8 bb 62 fe ff       	call   c000071a <strcpy>
c001a45f:	83 c4 10             	add    esp,0x10
c001a462:	31 c0                	xor    eax,eax
c001a464:	59                   	pop    ecx
c001a465:	31 d2                	xor    edx,edx
c001a467:	5b                   	pop    ebx
c001a468:	5e                   	pop    esi
c001a469:	c3                   	ret    
c001a46a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a46f:	74 bb                	je     c001a42c <sysCallTTYName(regs*)+0x16>
c001a471:	83 ec 0c             	sub    esp,0xc
c001a474:	50                   	push   eax
c001a475:	e8 cd 70 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	89 c3                	mov    ebx,eax
c001a47f:	85 db                	test   ebx,ebx
c001a481:	75 bb                	jne    c001a43e <sysCallTTYName(regs*)+0x28>
c001a483:	59                   	pop    ecx
c001a484:	b8 01 00 00 00       	mov    eax,0x1
c001a489:	31 d2                	xor    edx,edx
c001a48b:	5b                   	pop    ebx
c001a48c:	5e                   	pop    esi
c001a48d:	c3                   	ret    
c001a48e:	59                   	pop    ecx
c001a48f:	b8 02 00 00 00       	mov    eax,0x2
c001a494:	31 d2                	xor    edx,edx
c001a496:	5b                   	pop    ebx
c001a497:	5e                   	pop    esi
c001a498:	c3                   	ret    

c001a499 <sysCallGetEnv(regs*)>:
c001a499:	83 ec 0c             	sub    esp,0xc
c001a49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a0:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a4a3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a4a6:	85 c9                	test   ecx,ecx
c001a4a8:	75 22                	jne    c001a4cc <sysCallGetEnv(regs*)+0x33>
c001a4aa:	85 d2                	test   edx,edx
c001a4ac:	74 08                	je     c001a4b6 <sysCallGetEnv(regs*)+0x1d>
c001a4ae:	31 c0                	xor    eax,eax
c001a4b0:	31 d2                	xor    edx,edx
c001a4b2:	83 c4 0c             	add    esp,0xc
c001a4b5:	c3                   	ret    
c001a4b6:	83 ec 0c             	sub    esp,0xc
c001a4b9:	68 54 95 02 c0       	push   0xc0029554
c001a4be:	e8 d5 61 fe ff       	call   c0000698 <strlen>
c001a4c3:	83 c4 10             	add    esp,0x10
c001a4c6:	31 d2                	xor    edx,edx
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	c3                   	ret    
c001a4cc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a4cf:	85 d2                	test   edx,edx
c001a4d1:	74 05                	je     c001a4d8 <sysCallGetEnv(regs*)+0x3f>
c001a4d3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a4d6:	eb d6                	jmp    c001a4ae <sysCallGetEnv(regs*)+0x15>
c001a4d8:	83 ec 08             	sub    esp,0x8
c001a4db:	68 54 95 02 c0       	push   0xc0029554
c001a4e0:	50                   	push   eax
c001a4e1:	e8 34 62 fe ff       	call   c000071a <strcpy>
c001a4e6:	83 c4 10             	add    esp,0x10
c001a4e9:	eb c3                	jmp    c001a4ae <sysCallGetEnv(regs*)+0x15>

c001a4eb <sysCallUSleep(regs*)>:
c001a4eb:	83 ec 14             	sub    esp,0x14
c001a4ee:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a4f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a4f7:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a4fe:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a501:	01 ca                	add    edx,ecx
c001a503:	52                   	push   edx
c001a504:	50                   	push   eax
c001a505:	e8 e2 21 00 00       	call   c001c6ec <nanoSleep(unsigned long long)>
c001a50a:	31 c0                	xor    eax,eax
c001a50c:	31 d2                	xor    edx,edx
c001a50e:	83 c4 1c             	add    esp,0x1c
c001a511:	c3                   	ret    

c001a512 <sysCallSpawn(regs*)>:
c001a512:	56                   	push   esi
c001a513:	53                   	push   ebx
c001a514:	53                   	push   ebx
c001a515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a519:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a51c:	85 f6                	test   esi,esi
c001a51e:	75 08                	jne    c001a528 <sysCallSpawn(regs*)+0x16>
c001a520:	59                   	pop    ecx
c001a521:	31 c0                	xor    eax,eax
c001a523:	31 d2                	xor    edx,edx
c001a525:	5b                   	pop    ebx
c001a526:	5e                   	pop    esi
c001a527:	c3                   	ret    
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	68 3b 07 00 00       	push   0x73b
c001a530:	e8 8b 4f ff ff       	call   c000f4c0 <malloc>
c001a535:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a538:	89 c6                	mov    esi,eax
c001a53a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a53f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a542:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a545:	56                   	push   esi
c001a546:	e8 d9 18 00 00       	call   c001be24 <Process::Process(char const*, Process*, char**)>
c001a54b:	83 c4 20             	add    esp,0x20
c001a54e:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001a555:	75 c9                	jne    c001a520 <sysCallSpawn(regs*)+0xe>
c001a557:	83 ec 0c             	sub    esp,0xc
c001a55a:	56                   	push   esi
c001a55b:	e8 52 1e 00 00       	call   c001c3b2 <Process::createUserThread()>
c001a560:	8b 06                	mov    eax,DWORD PTR [esi]
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	99                   	cdq    
c001a566:	59                   	pop    ecx
c001a567:	5b                   	pop    ebx
c001a568:	5e                   	pop    esi
c001a569:	c3                   	ret    

c001a56a <sysAppSettings(regs*)>:
c001a56a:	53                   	push   ebx
c001a56b:	83 ec 08             	sub    esp,0x8
c001a56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a572:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a575:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a57b:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a580:	66 3d c0 09          	cmp    ax,0x9c0
c001a584:	75 2f                	jne    c001a5b5 <sysAppSettings(regs*)+0x4b>
c001a586:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a58c:	83 e0 1f             	and    eax,0x1f
c001a58f:	3c 01                	cmp    al,0x1
c001a591:	74 2e                	je     c001a5c1 <sysAppSettings(regs*)+0x57>
c001a593:	3c 07                	cmp    al,0x7
c001a595:	0f 84 bd 00 00 00    	je     c001a658 <sysAppSettings(regs*)+0xee>
c001a59b:	84 c0                	test   al,al
c001a59d:	0f 84 dc 00 00 00    	je     c001a67f <sysAppSettings(regs*)+0x115>
c001a5a3:	3c 08                	cmp    al,0x8
c001a5a5:	74 6d                	je     c001a614 <sysAppSettings(regs*)+0xaa>
c001a5a7:	0f b6 c0             	movzx  eax,al
c001a5aa:	83 c4 08             	add    esp,0x8
c001a5ad:	05 e8 03 00 00       	add    eax,0x3e8
c001a5b2:	5b                   	pop    ebx
c001a5b3:	99                   	cdq    
c001a5b4:	c3                   	ret    
c001a5b5:	b8 01 00 00 00       	mov    eax,0x1
c001a5ba:	31 d2                	xor    edx,edx
c001a5bc:	83 c4 08             	add    esp,0x8
c001a5bf:	5b                   	pop    ebx
c001a5c0:	c3                   	ret    
c001a5c1:	51                   	push   ecx
c001a5c2:	68 00 01 00 00       	push   0x100
c001a5c7:	6a 00                	push   0x0
c001a5c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5d1:	83 c0 0c             	add    eax,0xc
c001a5d4:	50                   	push   eax
c001a5d5:	e8 a1 60 fe ff       	call   c000067b <memset>
c001a5da:	83 c4 0c             	add    esp,0xc
c001a5dd:	68 ff 00 00 00       	push   0xff
c001a5e2:	53                   	push   ebx
c001a5e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5eb:	83 c0 0c             	add    eax,0xc
c001a5ee:	50                   	push   eax
c001a5ef:	e8 51 60 fe ff       	call   c0000645 <memcpy>
c001a5f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5f9:	5b                   	pop    ebx
c001a5fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5fd:	5a                   	pop    edx
c001a5fe:	8d 50 0c             	lea    edx,[eax+0xc]
c001a601:	52                   	push   edx
c001a602:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a608:	e8 b5 60 ff ff       	call   c00106c2 <VgaText::setTitle(char*)>
c001a60d:	83 c4 10             	add    esp,0x10
c001a610:	31 c0                	xor    eax,eax
c001a612:	eb a6                	jmp    c001a5ba <sysAppSettings(regs*)+0x50>
c001a614:	83 ec 08             	sub    esp,0x8
c001a617:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a61d:	83 e0 0f             	and    eax,0xf
c001a620:	50                   	push   eax
c001a621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a626:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a629:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62f:	e8 7e 60 ff ff       	call   c00106b2 <VgaText::setTitleColour(VgaColour)>
c001a634:	58                   	pop    eax
c001a635:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a63b:	5a                   	pop    edx
c001a63c:	c1 e8 04             	shr    eax,0x4
c001a63f:	83 e0 0f             	and    eax,0xf
c001a642:	50                   	push   eax
c001a643:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a648:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a64b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a651:	e8 4c 60 ff ff       	call   c00106a2 <VgaText::setTitleTextColour(VgaColour)>
c001a656:	eb b5                	jmp    c001a60d <sysAppSettings(regs*)+0xa3>
c001a658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a65d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a660:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001a666:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001a66c:	c0 e8 06             	shr    al,0x6
c001a66f:	83 e0 01             	and    eax,0x1
c001a672:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001a678:	31 c0                	xor    eax,eax
c001a67a:	e9 3b ff ff ff       	jmp    c001a5ba <sysAppSettings(regs*)+0x50>
c001a67f:	b8 02 00 00 00       	mov    eax,0x2
c001a684:	e9 31 ff ff ff       	jmp    c001a5ba <sysAppSettings(regs*)+0x50>

c001a689 <sysSetFatAttrib(regs*)>:
c001a689:	57                   	push   edi
c001a68a:	56                   	push   esi
c001a68b:	53                   	push   ebx
c001a68c:	83 ec 1c             	sub    esp,0x1c
c001a68f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a693:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a696:	68 14 01 00 00       	push   0x114
c001a69b:	e8 20 4e ff ff       	call   c000f4c0 <malloc>
c001a6a0:	83 c4 0c             	add    esp,0xc
c001a6a3:	89 c3                	mov    ebx,eax
c001a6a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6aa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a6ad:	57                   	push   edi
c001a6ae:	53                   	push   ebx
c001a6af:	e8 08 85 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a6b4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a6b7:	83 c4 0c             	add    esp,0xc
c001a6ba:	0f b6 d4             	movzx  edx,ah
c001a6bd:	0f b6 c0             	movzx  eax,al
c001a6c0:	52                   	push   edx
c001a6c1:	50                   	push   eax
c001a6c2:	53                   	push   ebx
c001a6c3:	e8 6a 87 ff ff       	call   c0012e32 <File::chfatattr(unsigned char, unsigned char)>
c001a6c8:	83 c4 10             	add    esp,0x10
c001a6cb:	85 db                	test   ebx,ebx
c001a6cd:	74 14                	je     c001a6e3 <sysSetFatAttrib(regs*)+0x5a>
c001a6cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a6d5:	83 ec 0c             	sub    esp,0xc
c001a6d8:	53                   	push   ebx
c001a6d9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a6dc:	83 c4 10             	add    esp,0x10
c001a6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6e3:	85 c0                	test   eax,eax
c001a6e5:	0f 95 c0             	setne  al
c001a6e8:	31 d2                	xor    edx,edx
c001a6ea:	0f b6 c0             	movzx  eax,al
c001a6ed:	f7 d8                	neg    eax
c001a6ef:	83 d2 00             	adc    edx,0x0
c001a6f2:	83 c4 10             	add    esp,0x10
c001a6f5:	f7 da                	neg    edx
c001a6f7:	5b                   	pop    ebx
c001a6f8:	5e                   	pop    esi
c001a6f9:	5f                   	pop    edi
c001a6fa:	c3                   	ret    

c001a6fb <sysPipe(regs*)>:
c001a6fb:	57                   	push   edi
c001a6fc:	56                   	push   esi
c001a6fd:	53                   	push   ebx
c001a6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a702:	83 ec 0c             	sub    esp,0xc
c001a705:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a708:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a70b:	6a 20                	push   0x20
c001a70d:	e8 ae 4d ff ff       	call   c000f4c0 <malloc>
c001a712:	89 c3                	mov    ebx,eax
c001a714:	58                   	pop    eax
c001a715:	5a                   	pop    edx
c001a716:	68 00 50 00 00       	push   0x5000
c001a71b:	53                   	push   ebx
c001a71c:	e8 df 58 ff ff       	call   c0010000 <Pipe::Pipe(int)>
c001a721:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a724:	e8 29 6b ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a729:	89 07                	mov    DWORD PTR [edi],eax
c001a72b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a72e:	e8 1f 6b ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a733:	83 c4 10             	add    esp,0x10
c001a736:	89 06                	mov    DWORD PTR [esi],eax
c001a738:	31 d2                	xor    edx,edx
c001a73a:	5b                   	pop    ebx
c001a73b:	31 c0                	xor    eax,eax
c001a73d:	5e                   	pop    esi
c001a73e:	5f                   	pop    edi
c001a73f:	c3                   	ret    

c001a740 <sysGetUnixTime(regs*)>:
c001a740:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001a745:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a74b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a74f:	e9 44 8e ff ff       	jmp    c0013598 <Clock::timeInSecondsLocal()>

c001a754 <string_ends_with(char const*, char const*)>:
c001a754:	57                   	push   edi
c001a755:	56                   	push   esi
c001a756:	53                   	push   ebx
c001a757:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a75b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a75f:	83 ec 0c             	sub    esp,0xc
c001a762:	53                   	push   ebx
c001a763:	e8 30 5f fe ff       	call   c0000698 <strlen>
c001a768:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a76b:	89 c6                	mov    esi,eax
c001a76d:	e8 26 5f fe ff       	call   c0000698 <strlen>
c001a772:	83 c4 10             	add    esp,0x10
c001a775:	39 c6                	cmp    esi,eax
c001a777:	7d 06                	jge    c001a77f <string_ends_with(char const*, char const*)+0x2b>
c001a779:	5b                   	pop    ebx
c001a77a:	31 c0                	xor    eax,eax
c001a77c:	5e                   	pop    esi
c001a77d:	5f                   	pop    edi
c001a77e:	c3                   	ret    
c001a77f:	83 ec 08             	sub    esp,0x8
c001a782:	29 c6                	sub    esi,eax
c001a784:	57                   	push   edi
c001a785:	01 f3                	add    ebx,esi
c001a787:	53                   	push   ebx
c001a788:	e8 de 5f fe ff       	call   c000076b <strcmp>
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	85 c0                	test   eax,eax
c001a792:	5b                   	pop    ebx
c001a793:	0f 94 c0             	sete   al
c001a796:	5e                   	pop    esi
c001a797:	0f b6 c0             	movzx  eax,al
c001a79a:	5f                   	pop    edi
c001a79b:	c3                   	ret    

c001a79c <sysCallOpen(regs*)>:
c001a79c:	56                   	push   esi
c001a79d:	53                   	push   ebx
c001a79e:	81 ec 04 01 00 00    	sub    esp,0x104
c001a7a4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a7ab:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a7ae:	85 c9                	test   ecx,ecx
c001a7b0:	0f 84 b3 00 00 00    	je     c001a869 <sysCallOpen(regs*)+0xcd>
c001a7b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a7b9:	85 c0                	test   eax,eax
c001a7bb:	0f 84 a8 00 00 00    	je     c001a869 <sysCallOpen(regs*)+0xcd>
c001a7c1:	52                   	push   edx
c001a7c2:	68 34 96 02 c0       	push   0xc0029634
c001a7c7:	50                   	push   eax
c001a7c8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a7cc:	56                   	push   esi
c001a7cd:	e8 40 82 ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c001a7d2:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7d5:	e8 be 5e fe ff       	call   c0000698 <strlen>
c001a7da:	83 c4 10             	add    esp,0x10
c001a7dd:	48                   	dec    eax
c001a7de:	74 1d                	je     c001a7fd <sysCallOpen(regs*)+0x61>
c001a7e0:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a7e3:	eb 0f                	jmp    c001a7f4 <sysCallOpen(regs*)+0x58>
c001a7e5:	80 fa 3a             	cmp    dl,0x3a
c001a7e8:	74 0f                	je     c001a7f9 <sysCallOpen(regs*)+0x5d>
c001a7ea:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a7ee:	48                   	dec    eax
c001a7ef:	74 0c                	je     c001a7fd <sysCallOpen(regs*)+0x61>
c001a7f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a7f4:	80 fa 2e             	cmp    dl,0x2e
c001a7f7:	75 ec                	jne    c001a7e5 <sysCallOpen(regs*)+0x49>
c001a7f9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a7fd:	83 ec 08             	sub    esp,0x8
c001a800:	68 38 96 02 c0       	push   0xc0029638
c001a805:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a808:	e8 47 ff ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a80d:	83 c4 10             	add    esp,0x10
c001a810:	85 c0                	test   eax,eax
c001a812:	75 17                	jne    c001a82b <sysCallOpen(regs*)+0x8f>
c001a814:	83 ec 08             	sub    esp,0x8
c001a817:	68 59 96 02 c0       	push   0xc0029659
c001a81c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a81f:	e8 30 ff ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a824:	83 c4 10             	add    esp,0x10
c001a827:	85 c0                	test   eax,eax
c001a829:	74 51                	je     c001a87c <sysCallOpen(regs*)+0xe0>
c001a82b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a82e:	83 ec 08             	sub    esp,0x8
c001a831:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a837:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a83e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a841:	ff 30                	push   DWORD PTR [eax]
c001a843:	68 3d 96 02 c0       	push   0xc002963d
c001a848:	e8 40 7e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a84d:	c7 04 24 4c 96 02 c0 	mov    DWORD PTR [esp],0xc002964c
c001a854:	e8 34 7e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	81 c4 04 01 00 00    	add    esp,0x104
c001a862:	31 c0                	xor    eax,eax
c001a864:	31 d2                	xor    edx,edx
c001a866:	5b                   	pop    ebx
c001a867:	5e                   	pop    esi
c001a868:	c3                   	ret    
c001a869:	81 c4 04 01 00 00    	add    esp,0x104
c001a86f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a874:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a879:	5b                   	pop    ebx
c001a87a:	5e                   	pop    esi
c001a87b:	c3                   	ret    
c001a87c:	83 ec 08             	sub    esp,0x8
c001a87f:	68 39 96 02 c0       	push   0xc0029639
c001a884:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a887:	e8 df 5e fe ff       	call   c000076b <strcmp>
c001a88c:	83 c4 10             	add    esp,0x10
c001a88f:	85 c0                	test   eax,eax
c001a891:	74 98                	je     c001a82b <sysCallOpen(regs*)+0x8f>
c001a893:	83 ec 08             	sub    esp,0x8
c001a896:	68 38 96 02 c0       	push   0xc0029638
c001a89b:	56                   	push   esi
c001a89c:	e8 b3 fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a8a1:	83 c4 10             	add    esp,0x10
c001a8a4:	85 c0                	test   eax,eax
c001a8a6:	75 83                	jne    c001a82b <sysCallOpen(regs*)+0x8f>
c001a8a8:	83 ec 08             	sub    esp,0x8
c001a8ab:	68 5e 96 02 c0       	push   0xc002965e
c001a8b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8b3:	e8 9c fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a8b8:	83 c4 10             	add    esp,0x10
c001a8bb:	85 c0                	test   eax,eax
c001a8bd:	0f 85 d9 00 00 00    	jne    c001a99c <sysCallOpen(regs*)+0x200>
c001a8c3:	83 ec 08             	sub    esp,0x8
c001a8c6:	68 63 96 02 c0       	push   0xc0029663
c001a8cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8ce:	e8 81 fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a8d3:	83 c4 10             	add    esp,0x10
c001a8d6:	85 c0                	test   eax,eax
c001a8d8:	0f 85 be 00 00 00    	jne    c001a99c <sysCallOpen(regs*)+0x200>
c001a8de:	83 ec 08             	sub    esp,0x8
c001a8e1:	68 5f 96 02 c0       	push   0xc002965f
c001a8e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8e9:	e8 7d 5e fe ff       	call   c000076b <strcmp>
c001a8ee:	83 c4 10             	add    esp,0x10
c001a8f1:	85 c0                	test   eax,eax
c001a8f3:	0f 84 a3 00 00 00    	je     c001a99c <sysCallOpen(regs*)+0x200>
c001a8f9:	83 ec 08             	sub    esp,0x8
c001a8fc:	68 5e 96 02 c0       	push   0xc002965e
c001a901:	56                   	push   esi
c001a902:	e8 4d fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	85 c0                	test   eax,eax
c001a90c:	0f 85 8a 00 00 00    	jne    c001a99c <sysCallOpen(regs*)+0x200>
c001a912:	83 ec 0c             	sub    esp,0xc
c001a915:	68 14 01 00 00       	push   0x114
c001a91a:	e8 a1 4b ff ff       	call   c000f4c0 <malloc>
c001a91f:	83 c4 0c             	add    esp,0xc
c001a922:	89 c6                	mov    esi,eax
c001a924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a929:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a92c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a92f:	56                   	push   esi
c001a930:	e8 87 82 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	85 f6                	test   esi,esi
c001a93a:	0f 84 29 ff ff ff    	je     c001a869 <sysCallOpen(regs*)+0xcd>
c001a940:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a943:	0f b6 c2             	movzx  eax,dl
c001a946:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a949:	89 d0                	mov    eax,edx
c001a94b:	83 e0 01             	and    eax,0x1
c001a94e:	f6 c2 02             	test   dl,0x2
c001a951:	74 03                	je     c001a956 <sysCallOpen(regs*)+0x1ba>
c001a953:	83 c8 02             	or     eax,0x2
c001a956:	f6 c2 04             	test   dl,0x4
c001a959:	74 03                	je     c001a95e <sysCallOpen(regs*)+0x1c2>
c001a95b:	83 c8 04             	or     eax,0x4
c001a95e:	f6 c2 08             	test   dl,0x8
c001a961:	74 03                	je     c001a966 <sysCallOpen(regs*)+0x1ca>
c001a963:	83 c8 0a             	or     eax,0xa
c001a966:	83 e2 10             	and    edx,0x10
c001a969:	74 03                	je     c001a96e <sysCallOpen(regs*)+0x1d2>
c001a96b:	83 c8 12             	or     eax,0x12
c001a96e:	83 ec 08             	sub    esp,0x8
c001a971:	50                   	push   eax
c001a972:	56                   	push   esi
c001a973:	e8 a8 82 ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001a978:	83 c4 10             	add    esp,0x10
c001a97b:	85 c0                	test   eax,eax
c001a97d:	0f 85 e6 fe ff ff    	jne    c001a869 <sysCallOpen(regs*)+0xcd>
c001a983:	83 ec 0c             	sub    esp,0xc
c001a986:	56                   	push   esi
c001a987:	e8 c6 68 ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a98c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a98f:	89 02                	mov    DWORD PTR [edx],eax
c001a991:	c1 f8 1f             	sar    eax,0x1f
c001a994:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a997:	e9 bd fe ff ff       	jmp    c001a859 <sysCallOpen(regs*)+0xbd>
c001a99c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a99f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a9a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a9ac:	e9 ab fe ff ff       	jmp    c001a85c <sysCallOpen(regs*)+0xc0>

c001a9b1 <setupSystemCalls()>:
c001a9b1:	c7 05 60 c3 02 c0 c2 9b 01 c0 	mov    DWORD PTR ds:0xc002c360,0xc0019bc2
c001a9bb:	c7 05 64 c3 02 c0 96 99 01 c0 	mov    DWORD PTR ds:0xc002c364,0xc0019996
c001a9c5:	c7 05 68 c3 02 c0 e9 9a 01 c0 	mov    DWORD PTR ds:0xc002c368,0xc0019ae9
c001a9cf:	c7 05 6c c3 02 c0 5a 9b 01 c0 	mov    DWORD PTR ds:0xc002c36c,0xc0019b5a
c001a9d9:	c7 05 70 c3 02 c0 81 9a 01 c0 	mov    DWORD PTR ds:0xc002c370,0xc0019a81
c001a9e3:	c7 05 74 c3 02 c0 cd 99 01 c0 	mov    DWORD PTR ds:0xc002c374,0xc00199cd
c001a9ed:	c7 05 78 c3 02 c0 ae 99 01 c0 	mov    DWORD PTR ds:0xc002c378,0xc00199ae
c001a9f7:	c7 05 7c c3 02 c0 3e 9b 01 c0 	mov    DWORD PTR ds:0xc002c37c,0xc0019b3e
c001aa01:	c7 05 84 c3 02 c0 d4 a0 01 c0 	mov    DWORD PTR ds:0xc002c384,0xc001a0d4
c001aa0b:	c7 05 80 c3 02 c0 9c a7 01 c0 	mov    DWORD PTR ds:0xc002c380,0xc001a79c
c001aa15:	c7 05 88 c3 02 c0 5c a1 01 c0 	mov    DWORD PTR ds:0xc002c388,0xc001a15c
c001aa1f:	c7 05 8c c3 02 c0 c3 9d 01 c0 	mov    DWORD PTR ds:0xc002c38c,0xc0019dc3
c001aa29:	c7 05 90 c3 02 c0 fd 9b 01 c0 	mov    DWORD PTR ds:0xc002c390,0xc0019bfd
c001aa33:	c7 05 94 c3 02 c0 02 9c 01 c0 	mov    DWORD PTR ds:0xc002c394,0xc0019c02
c001aa3d:	c7 05 98 c3 02 c0 37 a2 01 c0 	mov    DWORD PTR ds:0xc002c398,0xc001a237
c001aa47:	c7 05 9c c3 02 c0 d1 a1 01 c0 	mov    DWORD PTR ds:0xc002c39c,0xc001a1d1
c001aa51:	c7 05 a0 c3 02 c0 ab 9e 01 c0 	mov    DWORD PTR ds:0xc002c3a0,0xc0019eab
c001aa5b:	c7 05 a4 c3 02 c0 14 9f 01 c0 	mov    DWORD PTR ds:0xc002c3a4,0xc0019f14
c001aa65:	c7 05 a8 c3 02 c0 91 9f 01 c0 	mov    DWORD PTR ds:0xc002c3a8,0xc0019f91
c001aa6f:	c7 05 ac c3 02 c0 07 9c 01 c0 	mov    DWORD PTR ds:0xc002c3ac,0xc0019c07
c001aa79:	c7 05 b0 c3 02 c0 a7 a2 01 c0 	mov    DWORD PTR ds:0xc002c3b0,0xc001a2a7
c001aa83:	c7 05 b4 c3 02 c0 c1 a2 01 c0 	mov    DWORD PTR ds:0xc002c3b4,0xc001a2c1
c001aa8d:	c7 05 b8 c3 02 c0 c1 a2 01 c0 	mov    DWORD PTR ds:0xc002c3b8,0xc001a2c1
c001aa97:	c7 05 bc c3 02 c0 02 a3 01 c0 	mov    DWORD PTR ds:0xc002c3bc,0xc001a302
c001aaa1:	c7 05 c0 c3 02 c0 66 a3 01 c0 	mov    DWORD PTR ds:0xc002c3c0,0xc001a366
c001aaab:	c7 05 c4 c3 02 c0 11 9c 01 c0 	mov    DWORD PTR ds:0xc002c3c4,0xc0019c11
c001aab5:	c7 05 c8 c3 02 c0 ca a3 01 c0 	mov    DWORD PTR ds:0xc002c3c8,0xc001a3ca
c001aabf:	c7 05 cc c3 02 c0 80 9d 01 c0 	mov    DWORD PTR ds:0xc002c3cc,0xc0019d80
c001aac9:	c7 05 d0 c3 02 c0 16 a4 01 c0 	mov    DWORD PTR ds:0xc002c3d0,0xc001a416
c001aad3:	c7 05 d4 c3 02 c0 51 9e 01 c0 	mov    DWORD PTR ds:0xc002c3d4,0xc0019e51
c001aadd:	c7 05 d8 c3 02 c0 eb a4 01 c0 	mov    DWORD PTR ds:0xc002c3d8,0xc001a4eb
c001aae7:	c7 05 dc c3 02 c0 14 a0 01 c0 	mov    DWORD PTR ds:0xc002c3dc,0xc001a014
c001aaf1:	c7 05 e0 c3 02 c0 12 a5 01 c0 	mov    DWORD PTR ds:0xc002c3e0,0xc001a512
c001aafb:	c7 05 e4 c3 02 c0 99 a4 01 c0 	mov    DWORD PTR ds:0xc002c3e4,0xc001a499
c001ab05:	c7 05 e8 c3 02 c0 6a a5 01 c0 	mov    DWORD PTR ds:0xc002c3e8,0xc001a56a
c001ab0f:	c7 05 ec c3 02 c0 21 9c 01 c0 	mov    DWORD PTR ds:0xc002c3ec,0xc0019c21
c001ab19:	c7 05 f0 c3 02 c0 8b 9c 01 c0 	mov    DWORD PTR ds:0xc002c3f0,0xc0019c8b
c001ab23:	c7 05 f4 c3 02 c0 d1 9c 01 c0 	mov    DWORD PTR ds:0xc002c3f4,0xc0019cd1
c001ab2d:	c7 05 f8 c3 02 c0 89 a6 01 c0 	mov    DWORD PTR ds:0xc002c3f8,0xc001a689
c001ab37:	c7 05 fc c3 02 c0 dc a2 01 c0 	mov    DWORD PTR ds:0xc002c3fc,0xc001a2dc
c001ab41:	c7 05 00 c4 02 c0 22 9d 01 c0 	mov    DWORD PTR ds:0xc002c400,0xc0019d22
c001ab4b:	c7 05 04 c4 02 c0 fb a6 01 c0 	mov    DWORD PTR ds:0xc002c404,0xc001a6fb
c001ab55:	c7 05 08 c4 02 c0 40 a7 01 c0 	mov    DWORD PTR ds:0xc002c408,0xc001a740
c001ab5f:	c7 05 0c c4 02 c0 d9 99 01 c0 	mov    DWORD PTR ds:0xc002c40c,0xc00199d9
c001ab69:	c3                   	ret    

c001ab6a <systemCall(regs*, void*)>:
c001ab6a:	53                   	push   ebx
c001ab6b:	83 ec 08             	sub    esp,0x8
c001ab6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab72:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ab75:	83 f8 7f             	cmp    eax,0x7f
c001ab78:	77 16                	ja     c001ab90 <systemCall(regs*, void*)+0x26>
c001ab7a:	8b 14 85 60 c3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ca0]
c001ab81:	85 d2                	test   edx,edx
c001ab83:	74 0b                	je     c001ab90 <systemCall(regs*, void*)+0x26>
c001ab85:	83 ec 0c             	sub    esp,0xc
c001ab88:	53                   	push   ebx
c001ab89:	ff d2                	call   edx
c001ab8b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ab8e:	eb 0d                	jmp    c001ab9d <systemCall(regs*, void*)+0x33>
c001ab90:	52                   	push   edx
c001ab91:	52                   	push   edx
c001ab92:	50                   	push   eax
c001ab93:	68 68 96 02 c0       	push   0xc0029668
c001ab98:	e8 f0 7a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001aba5:	31 d2                	xor    edx,edx
c001aba7:	83 c4 08             	add    esp,0x8
c001abaa:	5b                   	pop    ebx
c001abab:	c3                   	ret    

c001abac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001abac:	55                   	push   ebp
c001abad:	89 e5                	mov    ebp,esp
c001abaf:	57                   	push   edi
c001abb0:	56                   	push   esi
c001abb1:	53                   	push   ebx
c001abb2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001abb8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001abbb:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001abbe:	85 c0                	test   eax,eax
c001abc0:	0f 95 c1             	setne  cl
c001abc3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001abc7:	0f 94 c2             	sete   dl
c001abca:	84 d1                	test   cl,dl
c001abcc:	74 26                	je     c001abf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001abce:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001abd5:	74 1d                	je     c001abf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001abd7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001abda:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001abe0:	89 d6                	mov    esi,edx
c001abe2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001abe8:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001abee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001abf1:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001abf4:	83 ec 0c             	sub    esp,0xc
c001abf7:	05 ff 0f 00 00       	add    eax,0xfff
c001abfc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001abff:	6a 01                	push   0x1
c001ac01:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001ac07:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001ac0d:	e8 8b 6a ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c001ac12:	83 c4 10             	add    esp,0x10
c001ac15:	89 c6                	mov    esi,eax
c001ac17:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001ac1d:	0f 86 21 01 00 00    	jbe    c001ad44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001ac23:	c1 eb 0c             	shr    ebx,0xc
c001ac26:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001ac30:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001ac36:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ac39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ac3c:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001ac42:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001ac45:	29 d8                	sub    eax,ebx
c001ac47:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001ac4d:	0f 83 f4 00 00 00    	jae    c001ad47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001ac53:	83 ec 0c             	sub    esp,0xc
c001ac56:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001ac5c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001ac5f:	3d 00 10 00 00       	cmp    eax,0x1000
c001ac64:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001ac66:	52                   	push   edx
c001ac67:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001ac6d:	52                   	push   edx
c001ac6e:	76 05                	jbe    c001ac75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001ac70:	b8 00 10 00 00       	mov    eax,0x1000
c001ac75:	31 d2                	xor    edx,edx
c001ac77:	52                   	push   edx
c001ac78:	50                   	push   eax
c001ac79:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001ac7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac7f:	83 c4 20             	add    esp,0x20
c001ac82:	85 c0                	test   eax,eax
c001ac84:	74 1f                	je     c001aca5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001ac86:	51                   	push   ecx
c001ac87:	51                   	push   ecx
c001ac88:	50                   	push   eax
c001ac89:	68 7c 96 02 c0       	push   0xc002967c
c001ac8e:	e8 fa 79 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ac93:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac96:	e8 66 6d ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	31 c0                	xor    eax,eax
c001aca0:	e9 7c 01 00 00       	jmp    c001ae21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001aca5:	e8 f3 14 00 00       	call   c001c19d <lockScheduler()>
c001acaa:	e8 bb 4d ff ff       	call   c000fa6a <Phys::allocatePage()>
c001acaf:	6a 07                	push   0x7
c001acb1:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001acb7:	56                   	push   esi
c001acb8:	50                   	push   eax
c001acb9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001acbf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001acc2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001acc8:	e8 9b 70 ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c001accd:	83 c4 0c             	add    esp,0xc
c001acd0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001acd6:	6a 00                	push   0x0
c001acd8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001acde:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ace1:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001ace7:	e8 e6 6e ff ff       	call   c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>
c001acec:	58                   	pop    eax
c001aced:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001acf3:	5a                   	pop    edx
c001acf4:	68 07 04 00 00       	push   0x407
c001acf9:	53                   	push   ebx
c001acfa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ad00:	50                   	push   eax
c001ad01:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ad07:	6a 00                	push   0x0
c001ad09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad11:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ad17:	e8 06 74 ff ff       	call   c0012122 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ad1c:	83 c4 1c             	add    esp,0x1c
c001ad1f:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001ad25:	68 00 10 00 00       	push   0x1000
c001ad2a:	50                   	push   eax
c001ad2b:	56                   	push   esi
c001ad2c:	e8 14 59 fe ff       	call   c0000645 <memcpy>
c001ad31:	e8 69 14 00 00       	call   c001c19f <unlockScheduler()>
c001ad36:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001ad3c:	83 c4 10             	add    esp,0x10
c001ad3f:	e9 f5 fe ff ff       	jmp    c001ac39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001ad44:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ad47:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001ad51:	0f 86 bc 00 00 00    	jbe    c001ae13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001ad57:	e8 41 14 00 00       	call   c001c19d <lockScheduler()>
c001ad5c:	51                   	push   ecx
c001ad5d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ad63:	6a 00                	push   0x0
c001ad65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad6d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ad73:	e8 5a 6e ff ff       	call   c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>
c001ad78:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	c1 e8 0c             	shr    eax,0xc
c001ad84:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001ad8e:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001ad94:	e8 d1 4c ff ff       	call   c000fa6a <Phys::allocatePage()>
c001ad99:	6a 07                	push   0x7
c001ad9b:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001ada1:	56                   	push   esi
c001ada2:	50                   	push   eax
c001ada3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ada9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001adac:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001adb2:	e8 b1 6f ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c001adb7:	58                   	pop    eax
c001adb8:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001adbe:	5a                   	pop    edx
c001adbf:	68 07 04 00 00       	push   0x407
c001adc4:	53                   	push   ebx
c001adc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001adcb:	50                   	push   eax
c001adcc:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001add2:	6a 00                	push   0x0
c001add4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001add9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001addc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ade2:	e8 3b 73 ff ff       	call   c0012122 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ade7:	83 c4 1c             	add    esp,0x1c
c001adea:	68 00 10 00 00       	push   0x1000
c001adef:	6a 00                	push   0x0
c001adf1:	56                   	push   esi
c001adf2:	e8 84 58 fe ff       	call   c000067b <memset>
c001adf7:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001ae06:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001ae0c:	77 86                	ja     c001ad94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001ae0e:	e8 8c 13 00 00       	call   c001c19f <unlockScheduler()>
c001ae13:	83 ec 0c             	sub    esp,0xc
c001ae16:	56                   	push   esi
c001ae17:	e8 e5 6b ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c001ae1c:	83 c4 10             	add    esp,0x10
c001ae1f:	b0 01                	mov    al,0x1
c001ae21:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ae24:	5b                   	pop    ebx
c001ae25:	5e                   	pop    esi
c001ae26:	5f                   	pop    edi
c001ae27:	5d                   	pop    ebp
c001ae28:	c3                   	ret    

c001ae29 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ae29:	55                   	push   ebp
c001ae2a:	57                   	push   edi
c001ae2b:	56                   	push   esi
c001ae2c:	53                   	push   ebx
c001ae2d:	83 ec 48             	sub    esp,0x48
c001ae30:	68 14 01 00 00       	push   0x114
c001ae35:	e8 86 46 ff ff       	call   c000f4c0 <malloc>
c001ae3a:	83 c4 0c             	add    esp,0xc
c001ae3d:	89 c6                	mov    esi,eax
c001ae3f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ae43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ae47:	50                   	push   eax
c001ae48:	e8 6f 7d ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001ae4d:	58                   	pop    eax
c001ae4e:	5a                   	pop    edx
c001ae4f:	6a 01                	push   0x1
c001ae51:	56                   	push   esi
c001ae52:	e8 c9 7d ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001ae57:	83 c4 10             	add    esp,0x10
c001ae5a:	85 c0                	test   eax,eax
c001ae5c:	0f 85 47 01 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae62:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ae6a:	83 ec 0c             	sub    esp,0xc
c001ae6d:	6a 34                	push   0x34
c001ae6f:	e8 4c 46 ff ff       	call   c000f4c0 <malloc>
c001ae74:	89 c3                	mov    ebx,eax
c001ae76:	58                   	pop    eax
c001ae77:	8b 06                	mov    eax,DWORD PTR [esi]
c001ae79:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ae7d:	57                   	push   edi
c001ae7e:	53                   	push   ebx
c001ae7f:	6a 00                	push   0x0
c001ae81:	6a 34                	push   0x34
c001ae83:	56                   	push   esi
c001ae84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae87:	83 c4 20             	add    esp,0x20
c001ae8a:	85 c0                	test   eax,eax
c001ae8c:	0f 85 17 01 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae92:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ae98:	0f 85 0b 01 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae9e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aea1:	85 c0                	test   eax,eax
c001aea3:	0f 84 00 01 00 00    	je     c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aea9:	31 d2                	xor    edx,edx
c001aeab:	55                   	push   ebp
c001aeac:	52                   	push   edx
c001aead:	50                   	push   eax
c001aeae:	56                   	push   esi
c001aeaf:	e8 2a 7e ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	85 c0                	test   eax,eax
c001aeb9:	0f 85 ea 00 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aebf:	83 ec 0c             	sub    esp,0xc
c001aec2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001aec5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001aec9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aecd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001aed1:	0f af c2             	imul   eax,edx
c001aed4:	50                   	push   eax
c001aed5:	e8 e6 45 ff ff       	call   c000f4c0 <malloc>
c001aeda:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001aedc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aee0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001aee3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aee7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001aeeb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001aeef:	0f af c2             	imul   eax,edx
c001aef2:	99                   	cdq    
c001aef3:	52                   	push   edx
c001aef4:	50                   	push   eax
c001aef5:	56                   	push   esi
c001aef6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aef9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001aefc:	83 c4 20             	add    esp,0x20
c001aeff:	85 c0                	test   eax,eax
c001af01:	0f 84 a2 00 00 00    	je     c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af07:	31 d2                	xor    edx,edx
c001af09:	51                   	push   ecx
c001af0a:	52                   	push   edx
c001af0b:	50                   	push   eax
c001af0c:	56                   	push   esi
c001af0d:	e8 cc 7d ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	85 c0                	test   eax,eax
c001af17:	0f 85 8c 00 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af1d:	83 ec 0c             	sub    esp,0xc
c001af20:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001af24:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001af28:	31 ed                	xor    ebp,ebp
c001af2a:	0f af c2             	imul   eax,edx
c001af2d:	50                   	push   eax
c001af2e:	e8 8d 45 ff ff       	call   c000f4c0 <malloc>
c001af33:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001af35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af39:	89 3c 24             	mov    DWORD PTR [esp],edi
c001af3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af40:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001af44:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001af48:	0f af c2             	imul   eax,edx
c001af4b:	99                   	cdq    
c001af4c:	52                   	push   edx
c001af4d:	50                   	push   eax
c001af4e:	56                   	push   esi
c001af4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af52:	83 c4 20             	add    esp,0x20
c001af55:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001af5d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001af61:	0f 86 80 00 00 00    	jbe    c001afe7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001af67:	0f b7 fd             	movzx  edi,bp
c001af6a:	c1 e7 05             	shl    edi,0x5
c001af6d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001af71:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001af74:	75 6b                	jne    c001afe1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001af76:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001af79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af7d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001af80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af84:	52                   	push   edx
c001af85:	31 d2                	xor    edx,edx
c001af87:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001af8a:	52                   	push   edx
c001af8b:	50                   	push   eax
c001af8c:	56                   	push   esi
c001af8d:	e8 4c 7d ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001af92:	83 c4 10             	add    esp,0x10
c001af95:	85 c0                	test   eax,eax
c001af97:	74 17                	je     c001afb0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001af99:	83 ec 0c             	sub    esp,0xc
c001af9c:	68 a7 96 02 c0       	push   0xc00296a7
c001afa1:	e8 e7 76 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	31 c0                	xor    eax,eax
c001afab:	e9 87 00 00 00       	jmp    c001b037 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001afb6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001afb9:	50                   	push   eax
c001afba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc2:	56                   	push   esi
c001afc3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001afc7:	e8 e0 fb ff ff       	call   c001abac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001afcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afd0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001afd4:	83 c4 20             	add    esp,0x20
c001afd7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001afdb:	73 04                	jae    c001afe1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001afdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afe1:	45                   	inc    ebp
c001afe2:	e9 76 ff ff ff       	jmp    c001af5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001afe7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001afeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001afef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aff3:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001aff9:	83 ec 0c             	sub    esp,0xc
c001affc:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001b002:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b007:	05 00 10 00 00       	add    eax,0x1000
c001b00c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b013:	e8 b8 44 ff ff       	call   c000f4d0 <free>
c001b018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b01b:	e8 b0 44 ff ff       	call   c000f4d0 <free>
c001b020:	58                   	pop    eax
c001b021:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b025:	e8 a6 44 ff ff       	call   c000f4d0 <free>
c001b02a:	89 34 24             	mov    DWORD PTR [esp],esi
c001b02d:	e8 4c 7c ff ff       	call   c0012c7e <File::close()>
c001b032:	83 c4 10             	add    esp,0x10
c001b035:	b0 01                	mov    al,0x1
c001b037:	83 c4 3c             	add    esp,0x3c
c001b03a:	5b                   	pop    ebx
c001b03b:	5e                   	pop    esi
c001b03c:	5f                   	pop    edi
c001b03d:	5d                   	pop    ebp
c001b03e:	c3                   	ret    

c001b03f <Thr::runtimeReferenceHelper()>:
c001b03f:	83 ec 18             	sub    esp,0x18
c001b042:	68 af 96 02 c0       	push   0xc00296af
c001b047:	e8 41 76 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001b04c:	fa                   	cli    
c001b04d:	83 c4 10             	add    esp,0x10
c001b050:	eb fe                	jmp    c001b050 <Thr::runtimeReferenceHelper()+0x11>

c001b052 <Thr::getAddressOfKernelSymbol(char const*)>:
c001b052:	57                   	push   edi
c001b053:	56                   	push   esi
c001b054:	53                   	push   ebx
c001b055:	31 db                	xor    ebx,ebx
c001b057:	39 1d 00 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd00,ebx
c001b05d:	7e 3c                	jle    c001b09b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001b05f:	8b 34 9d 80 cc 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3380]
c001b066:	31 ff                	xor    edi,edi
c001b068:	39 3c 9d 80 cb 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3480],edi
c001b06f:	7e 27                	jle    c001b098 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001b071:	50                   	push   eax
c001b072:	50                   	push   eax
c001b073:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b077:	8b 06                	mov    eax,DWORD PTR [esi]
c001b079:	03 04 9d 00 cc 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3400]
c001b080:	50                   	push   eax
c001b081:	e8 e5 56 fe ff       	call   c000076b <strcmp>
c001b086:	83 c4 10             	add    esp,0x10
c001b089:	85 c0                	test   eax,eax
c001b08b:	75 05                	jne    c001b092 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001b08d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b090:	eb 0b                	jmp    c001b09d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001b092:	83 c6 10             	add    esi,0x10
c001b095:	47                   	inc    edi
c001b096:	eb d0                	jmp    c001b068 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001b098:	43                   	inc    ebx
c001b099:	eb bc                	jmp    c001b057 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001b09b:	31 c0                	xor    eax,eax
c001b09d:	5b                   	pop    ebx
c001b09e:	5e                   	pop    esi
c001b09f:	5f                   	pop    edi
c001b0a0:	c3                   	ret    

c001b0a1 <Thr::loadKernelSymbolTable(char const*)>:
c001b0a1:	55                   	push   ebp
c001b0a2:	57                   	push   edi
c001b0a3:	56                   	push   esi
c001b0a4:	53                   	push   ebx
c001b0a5:	83 ec 68             	sub    esp,0x68
c001b0a8:	8b 35 54 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cd54
c001b0ae:	68 14 01 00 00       	push   0x114
c001b0b3:	e8 08 44 ff ff       	call   c000f4c0 <malloc>
c001b0b8:	83 c4 0c             	add    esp,0xc
c001b0bb:	89 c3                	mov    ebx,eax
c001b0bd:	56                   	push   esi
c001b0be:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b0c2:	50                   	push   eax
c001b0c3:	e8 f4 7a ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001b0c8:	5e                   	pop    esi
c001b0c9:	5f                   	pop    edi
c001b0ca:	6a 01                	push   0x1
c001b0cc:	53                   	push   ebx
c001b0cd:	e8 4e 7b ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001b0d2:	83 c4 10             	add    esp,0x10
c001b0d5:	31 d2                	xor    edx,edx
c001b0d7:	85 c0                	test   eax,eax
c001b0d9:	0f 85 74 02 00 00    	jne    c001b353 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b0df:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b0e7:	83 ec 0c             	sub    esp,0xc
c001b0ea:	6a 34                	push   0x34
c001b0ec:	e8 cf 43 ff ff       	call   c000f4c0 <malloc>
c001b0f1:	59                   	pop    ecx
c001b0f2:	89 c7                	mov    edi,eax
c001b0f4:	8d 74 24 34          	lea    esi,[esp+0x34]
c001b0f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0fa:	56                   	push   esi
c001b0fb:	57                   	push   edi
c001b0fc:	6a 00                	push   0x0
c001b0fe:	6a 34                	push   0x34
c001b100:	53                   	push   ebx
c001b101:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b104:	83 c4 20             	add    esp,0x20
c001b107:	85 c0                	test   eax,eax
c001b109:	74 17                	je     c001b122 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001b10b:	83 ec 0c             	sub    esp,0xc
c001b10e:	68 d1 96 02 c0       	push   0xc00296d1
c001b113:	e8 3f e0 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b118:	83 c4 10             	add    esp,0x10
c001b11b:	31 d2                	xor    edx,edx
c001b11d:	e9 31 02 00 00       	jmp    c001b353 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b122:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b128:	75 e1                	jne    c001b10b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b12a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b12d:	85 c0                	test   eax,eax
c001b12f:	74 da                	je     c001b10b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b131:	52                   	push   edx
c001b132:	31 d2                	xor    edx,edx
c001b134:	52                   	push   edx
c001b135:	50                   	push   eax
c001b136:	53                   	push   ebx
c001b137:	e8 a2 7b ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b13c:	83 c4 10             	add    esp,0x10
c001b13f:	85 c0                	test   eax,eax
c001b141:	75 c8                	jne    c001b10b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b143:	83 ec 0c             	sub    esp,0xc
c001b146:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b14a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b14e:	31 ed                	xor    ebp,ebp
c001b150:	0f af c2             	imul   eax,edx
c001b153:	50                   	push   eax
c001b154:	e8 67 43 ff ff       	call   c000f4c0 <malloc>
c001b159:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b15b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b15f:	89 34 24             	mov    DWORD PTR [esp],esi
c001b162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b166:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b16a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b16e:	0f af c2             	imul   eax,edx
c001b171:	99                   	cdq    
c001b172:	52                   	push   edx
c001b173:	50                   	push   eax
c001b174:	53                   	push   ebx
c001b175:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b178:	83 c4 20             	add    esp,0x20
c001b17b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b183:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b18b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b193:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b19b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001b19f:	0f 86 aa 00 00 00    	jbe    c001b24f <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001b1a5:	0f b7 f5             	movzx  esi,bp
c001b1a8:	6b f6 28             	imul   esi,esi,0x28
c001b1ab:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b1af:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b1b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b1b6:	50                   	push   eax
c001b1b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b1bb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001b1bf:	8b 16                	mov    edx,DWORD PTR [esi]
c001b1c1:	6b c0 28             	imul   eax,eax,0x28
c001b1c4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001b1c8:	89 d0                	mov    eax,edx
c001b1ca:	31 d2                	xor    edx,edx
c001b1cc:	52                   	push   edx
c001b1cd:	50                   	push   eax
c001b1ce:	53                   	push   ebx
c001b1cf:	e8 0a 7b ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b1d4:	83 c4 0c             	add    esp,0xc
c001b1d7:	6a 20                	push   0x20
c001b1d9:	6a 00                	push   0x0
c001b1db:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b1df:	52                   	push   edx
c001b1e0:	e8 96 54 fe ff       	call   c000067b <memset>
c001b1e5:	58                   	pop    eax
c001b1e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1e8:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001b1ec:	51                   	push   ecx
c001b1ed:	8d 54 24 40          	lea    edx,[esp+0x40]
c001b1f1:	52                   	push   edx
c001b1f2:	6a 00                	push   0x0
c001b1f4:	6a 1f                	push   0x1f
c001b1f6:	53                   	push   ebx
c001b1f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b1fa:	83 c4 18             	add    esp,0x18
c001b1fd:	68 e8 96 02 c0       	push   0xc00296e8
c001b202:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b206:	52                   	push   edx
c001b207:	e8 5f 55 fe ff       	call   c000076b <strcmp>
c001b20c:	83 c4 10             	add    esp,0x10
c001b20f:	85 c0                	test   eax,eax
c001b211:	75 0f                	jne    c001b222 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001b213:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b216:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b21a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b21e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b222:	50                   	push   eax
c001b223:	50                   	push   eax
c001b224:	68 f0 96 02 c0       	push   0xc00296f0
c001b229:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b22d:	50                   	push   eax
c001b22e:	e8 38 55 fe ff       	call   c000076b <strcmp>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	85 c0                	test   eax,eax
c001b238:	75 0f                	jne    c001b249 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001b23a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b23d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b241:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b249:	45                   	inc    ebp
c001b24a:	e9 4c ff ff ff       	jmp    c001b19b <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001b24f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b254:	75 10                	jne    c001b266 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001b256:	83 ec 0c             	sub    esp,0xc
c001b259:	68 f8 96 02 c0       	push   0xc00296f8
c001b25e:	e8 f4 de ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b263:	83 c4 10             	add    esp,0x10
c001b266:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001b26b:	75 10                	jne    c001b27d <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001b26d:	83 ec 0c             	sub    esp,0xc
c001b270:	68 f8 96 02 c0       	push   0xc00296f8
c001b275:	e8 dd de ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b27a:	83 c4 10             	add    esp,0x10
c001b27d:	31 d2                	xor    edx,edx
c001b27f:	50                   	push   eax
c001b280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b284:	52                   	push   edx
c001b285:	50                   	push   eax
c001b286:	53                   	push   ebx
c001b287:	e8 52 7a ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b28c:	5a                   	pop    edx
c001b28d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b291:	e8 2a 42 ff ff       	call   c000f4c0 <malloc>
c001b296:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b29a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b29e:	31 c9                	xor    ecx,ecx
c001b2a0:	5e                   	pop    esi
c001b2a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2a3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001b2a7:	55                   	push   ebp
c001b2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2ac:	51                   	push   ecx
c001b2ad:	52                   	push   edx
c001b2ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b2b2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001b2b6:	53                   	push   ebx
c001b2b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2ba:	83 c4 14             	add    esp,0x14
c001b2bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b2c1:	e8 fa 41 ff ff       	call   c000f4c0 <malloc>
c001b2c6:	89 c6                	mov    esi,eax
c001b2c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2cd:	56                   	push   esi
c001b2ce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b2d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b2d6:	51                   	push   ecx
c001b2d7:	52                   	push   edx
c001b2d8:	53                   	push   ebx
c001b2d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b2e0:	8b 15 00 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cd00
c001b2e6:	83 c4 1c             	add    esp,0x1c
c001b2e9:	c1 e8 04             	shr    eax,0x4
c001b2ec:	89 04 95 80 cb 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3480],eax
c001b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2f7:	31 d2                	xor    edx,edx
c001b2f9:	52                   	push   edx
c001b2fa:	50                   	push   eax
c001b2fb:	53                   	push   ebx
c001b2fc:	e8 dd 79 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b301:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b303:	31 d2                	xor    edx,edx
c001b305:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b308:	56                   	push   esi
c001b309:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b30d:	52                   	push   edx
c001b30e:	50                   	push   eax
c001b30f:	53                   	push   ebx
c001b310:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b313:	83 c4 14             	add    esp,0x14
c001b316:	53                   	push   ebx
c001b317:	e8 62 79 ff ff       	call   c0012c7e <File::close()>
c001b31c:	5d                   	pop    ebp
c001b31d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b321:	e8 aa 41 ff ff       	call   c000f4d0 <free>
c001b326:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b329:	e8 a2 41 ff ff       	call   c000f4d0 <free>
c001b32e:	a1 00 cd 02 c0       	mov    eax,ds:0xc002cd00
c001b333:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b337:	8d 50 01             	lea    edx,[eax+0x1]
c001b33a:	89 0c 85 80 cc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3380],ecx
c001b341:	89 15 00 cd 02 c0    	mov    DWORD PTR ds:0xc002cd00,edx
c001b347:	89 34 85 00 cc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3400],esi
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	b2 01                	mov    dl,0x1
c001b353:	83 c4 5c             	add    esp,0x5c
c001b356:	88 d0                	mov    al,dl
c001b358:	5b                   	pop    ebx
c001b359:	5e                   	pop    esi
c001b35a:	5f                   	pop    edi
c001b35b:	5d                   	pop    ebp
c001b35c:	c3                   	ret    

c001b35d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001b35d:	55                   	push   ebp
c001b35e:	57                   	push   edi
c001b35f:	56                   	push   esi
c001b360:	53                   	push   ebx
c001b361:	81 ec 68 03 00 00    	sub    esp,0x368
c001b367:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001b36e:	8b 1d 54 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd54
c001b374:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b378:	68 14 01 00 00       	push   0x114
c001b37d:	e8 3e 41 ff ff       	call   c000f4c0 <malloc>
c001b382:	83 c4 0c             	add    esp,0xc
c001b385:	89 c5                	mov    ebp,eax
c001b387:	53                   	push   ebx
c001b388:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b38f:	50                   	push   eax
c001b390:	e8 27 78 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001b395:	58                   	pop    eax
c001b396:	5a                   	pop    edx
c001b397:	6a 01                	push   0x1
c001b399:	55                   	push   ebp
c001b39a:	e8 81 78 ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001b39f:	83 c4 10             	add    esp,0x10
c001b3a2:	85 c0                	test   eax,eax
c001b3a4:	0f 85 f2 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3aa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b3b2:	83 ec 0c             	sub    esp,0xc
c001b3b5:	6a 34                	push   0x34
c001b3b7:	e8 04 41 ff ff       	call   c000f4c0 <malloc>
c001b3bc:	89 c7                	mov    edi,eax
c001b3be:	58                   	pop    eax
c001b3bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b3c2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b3c6:	53                   	push   ebx
c001b3c7:	57                   	push   edi
c001b3c8:	6a 00                	push   0x0
c001b3ca:	6a 34                	push   0x34
c001b3cc:	55                   	push   ebp
c001b3cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3d0:	83 c4 20             	add    esp,0x20
c001b3d3:	85 c0                	test   eax,eax
c001b3d5:	0f 85 c1 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3db:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b3e1:	0f 85 b5 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3e7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b3ea:	85 c0                	test   eax,eax
c001b3ec:	0f 84 aa 06 00 00    	je     c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	56                   	push   esi
c001b3f5:	52                   	push   edx
c001b3f6:	50                   	push   eax
c001b3f7:	55                   	push   ebp
c001b3f8:	e8 e1 78 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	85 c0                	test   eax,eax
c001b402:	0f 85 94 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b40e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b412:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b416:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b41a:	0f af c2             	imul   eax,edx
c001b41d:	50                   	push   eax
c001b41e:	e8 9d 40 ff ff       	call   c000f4c0 <malloc>
c001b423:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b426:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b42a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b431:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b435:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b439:	0f af c2             	imul   eax,edx
c001b43c:	99                   	cdq    
c001b43d:	52                   	push   edx
c001b43e:	50                   	push   eax
c001b43f:	55                   	push   ebp
c001b440:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b443:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b446:	83 c4 20             	add    esp,0x20
c001b449:	85 c0                	test   eax,eax
c001b44b:	0f 84 4b 06 00 00    	je     c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b451:	31 d2                	xor    edx,edx
c001b453:	51                   	push   ecx
c001b454:	52                   	push   edx
c001b455:	50                   	push   eax
c001b456:	55                   	push   ebp
c001b457:	e8 82 78 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	85 c0                	test   eax,eax
c001b461:	0f 85 35 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b467:	83 ec 0c             	sub    esp,0xc
c001b46a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b46e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b472:	31 f6                	xor    esi,esi
c001b474:	0f af c2             	imul   eax,edx
c001b477:	50                   	push   eax
c001b478:	e8 43 40 ff ff       	call   c000f4c0 <malloc>
c001b47d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b480:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b484:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b48f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b493:	0f af c2             	imul   eax,edx
c001b496:	99                   	cdq    
c001b497:	52                   	push   edx
c001b498:	50                   	push   eax
c001b499:	55                   	push   ebp
c001b49a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b49d:	83 c4 20             	add    esp,0x20
c001b4a0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b4a4:	0f 86 8a 00 00 00    	jbe    c001b534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b4aa:	0f b7 de             	movzx  ebx,si
c001b4ad:	c1 e3 05             	shl    ebx,0x5
c001b4b0:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b4b4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b4b7:	75 75                	jne    c001b52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b4b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b4bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b4c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4c7:	52                   	push   edx
c001b4c8:	31 d2                	xor    edx,edx
c001b4ca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b4cd:	52                   	push   edx
c001b4ce:	50                   	push   eax
c001b4cf:	55                   	push   ebp
c001b4d0:	e8 09 78 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b4d5:	83 c4 10             	add    esp,0x10
c001b4d8:	85 c0                	test   eax,eax
c001b4da:	0f 85 bc 05 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b4e0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b4e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b4ea:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b4ee:	31 d2                	xor    edx,edx
c001b4f0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b4f4:	83 ec 0c             	sub    esp,0xc
c001b4f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b4fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b502:	50                   	push   eax
c001b503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b50b:	52                   	push   edx
c001b50c:	50                   	push   eax
c001b50d:	55                   	push   ebp
c001b50e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b511:	83 c4 1c             	add    esp,0x1c
c001b514:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b517:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b51a:	50                   	push   eax
c001b51b:	6a 00                	push   0x0
c001b51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b521:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b525:	50                   	push   eax
c001b526:	e8 50 51 fe ff       	call   c000067b <memset>
c001b52b:	83 c4 10             	add    esp,0x10
c001b52e:	46                   	inc    esi
c001b52f:	e9 6c ff ff ff       	jmp    c001b4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b534:	31 db                	xor    ebx,ebx
c001b536:	50                   	push   eax
c001b537:	68 00 01 00 00       	push   0x100
c001b53c:	6a 00                	push   0x0
c001b53e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b542:	50                   	push   eax
c001b543:	e8 33 51 fe ff       	call   c000067b <memset>
c001b548:	83 c4 0c             	add    esp,0xc
c001b54b:	68 00 01 00 00       	push   0x100
c001b550:	6a 00                	push   0x0
c001b552:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b559:	50                   	push   eax
c001b55a:	e8 1c 51 fe ff       	call   c000067b <memset>
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b56a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b572:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b57a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b582:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b58a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b58e:	0f 86 30 01 00 00    	jbe    c001b6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b594:	0f b7 f3             	movzx  esi,bx
c001b597:	6b f6 28             	imul   esi,esi,0x28
c001b59a:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b59e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b5a5:	50                   	push   eax
c001b5a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5aa:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b5ae:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5b0:	6b d2 28             	imul   edx,edx,0x28
c001b5b3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b5b7:	31 d2                	xor    edx,edx
c001b5b9:	52                   	push   edx
c001b5ba:	50                   	push   eax
c001b5bb:	55                   	push   ebp
c001b5bc:	e8 1d 77 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b5c1:	83 c4 0c             	add    esp,0xc
c001b5c4:	6a 20                	push   0x20
c001b5c6:	6a 00                	push   0x0
c001b5c8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b5cf:	51                   	push   ecx
c001b5d0:	e8 a6 50 fe ff       	call   c000067b <memset>
c001b5d5:	58                   	pop    eax
c001b5d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b5d9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b5dd:	52                   	push   edx
c001b5de:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001b5e5:	51                   	push   ecx
c001b5e6:	6a 00                	push   0x0
c001b5e8:	6a 1f                	push   0x1f
c001b5ea:	55                   	push   ebp
c001b5eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b5ee:	83 c4 1c             	add    esp,0x1c
c001b5f1:	6a 09                	push   0x9
c001b5f3:	68 12 97 02 c0       	push   0xc0029712
c001b5f8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b5ff:	51                   	push   ecx
c001b600:	e8 dd 4f fe ff       	call   c00005e2 <memcmp>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	85 c0                	test   eax,eax
c001b60a:	75 21                	jne    c001b62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001b60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b610:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b618:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b61c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b61f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b626:	89 c8                	mov    eax,ecx
c001b628:	40                   	inc    eax
c001b629:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b62d:	50                   	push   eax
c001b62e:	6a 09                	push   0x9
c001b630:	68 1c 97 02 c0       	push   0xc002971c
c001b635:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b63c:	50                   	push   eax
c001b63d:	e8 a0 4f fe ff       	call   c00005e2 <memcmp>
c001b642:	83 c4 10             	add    esp,0x10
c001b645:	85 c0                	test   eax,eax
c001b647:	75 21                	jne    c001b66a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001b649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b64d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b651:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b655:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b659:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b65c:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b663:	89 c8                	mov    eax,ecx
c001b665:	40                   	inc    eax
c001b666:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b66a:	50                   	push   eax
c001b66b:	50                   	push   eax
c001b66c:	68 e8 96 02 c0       	push   0xc00296e8
c001b671:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b678:	50                   	push   eax
c001b679:	e8 ed 50 fe ff       	call   c000076b <strcmp>
c001b67e:	83 c4 10             	add    esp,0x10
c001b681:	85 c0                	test   eax,eax
c001b683:	75 0f                	jne    c001b694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001b685:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b68c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b690:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b694:	50                   	push   eax
c001b695:	50                   	push   eax
c001b696:	68 f0 96 02 c0       	push   0xc00296f0
c001b69b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b6a2:	50                   	push   eax
c001b6a3:	e8 c3 50 fe ff       	call   c000076b <strcmp>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	85 c0                	test   eax,eax
c001b6ad:	75 0f                	jne    c001b6be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001b6af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b6b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b6b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6be:	43                   	inc    ebx
c001b6bf:	e9 c6 fe ff ff       	jmp    c001b58a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001b6c4:	31 d2                	xor    edx,edx
c001b6c6:	50                   	push   eax
c001b6c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6cb:	52                   	push   edx
c001b6cc:	50                   	push   eax
c001b6cd:	55                   	push   ebp
c001b6ce:	e8 0b 76 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b6d3:	5a                   	pop    edx
c001b6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6d8:	e8 e3 3d ff ff       	call   c000f4c0 <malloc>
c001b6dd:	31 d2                	xor    edx,edx
c001b6df:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b6e3:	59                   	pop    ecx
c001b6e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b6e7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b6eb:	53                   	push   ebx
c001b6ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b6f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6f4:	52                   	push   edx
c001b6f5:	50                   	push   eax
c001b6f6:	55                   	push   ebp
c001b6f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b6fa:	83 c4 14             	add    esp,0x14
c001b6fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b701:	e8 ba 3d ff ff       	call   c000f4c0 <malloc>
c001b706:	31 d2                	xor    edx,edx
c001b708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b70c:	83 c4 0c             	add    esp,0xc
c001b70f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b713:	52                   	push   edx
c001b714:	50                   	push   eax
c001b715:	55                   	push   ebp
c001b716:	e8 c3 75 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b71b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b71e:	31 d2                	xor    edx,edx
c001b720:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b723:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b727:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b72b:	52                   	push   edx
c001b72c:	50                   	push   eax
c001b72d:	55                   	push   ebp
c001b72e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b731:	83 c4 20             	add    esp,0x20
c001b734:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b73c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b740:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b744:	0f 84 56 03 00 00    	je     c001baa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001b74a:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b751:	31 d2                	xor    edx,edx
c001b753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b757:	c1 e8 03             	shr    eax,0x3
c001b75a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b75e:	50                   	push   eax
c001b75f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b763:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b767:	52                   	push   edx
c001b768:	50                   	push   eax
c001b769:	55                   	push   ebp
c001b76a:	e8 6f 75 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b76f:	58                   	pop    eax
c001b770:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b774:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b77b:	e8 40 3d ff ff       	call   c000f4c0 <malloc>
c001b780:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b783:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b787:	31 d2                	xor    edx,edx
c001b789:	58                   	pop    eax
c001b78a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b78e:	50                   	push   eax
c001b78f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b793:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b797:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b79e:	52                   	push   edx
c001b79f:	50                   	push   eax
c001b7a0:	55                   	push   ebp
c001b7a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7a4:	83 c4 20             	add    esp,0x20
c001b7a7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b7af:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b7b3:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b7b7:	0f 8d c7 02 00 00    	jge    c001ba84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001b7bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b7c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7c5:	31 db                	xor    ebx,ebx
c001b7c7:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b7ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b7ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7d2:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b7d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b7da:	c1 e8 08             	shr    eax,0x8
c001b7dd:	89 c6                	mov    esi,eax
c001b7df:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b7e3:	c1 e6 04             	shl    esi,0x4
c001b7e6:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b7ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b7ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7f1:	85 c0                	test   eax,eax
c001b7f3:	0f 85 17 01 00 00    	jne    c001b910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b7f9:	83 ec 0c             	sub    esp,0xc
c001b7fc:	b3 01                	mov    bl,0x1
c001b7fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b802:	03 06                	add    eax,DWORD PTR [esi]
c001b804:	50                   	push   eax
c001b805:	e8 48 f8 ff ff       	call   c001b052 <Thr::getAddressOfKernelSymbol(char const*)>
c001b80a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b80e:	83 c4 10             	add    esp,0x10
c001b811:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b816:	0f 85 f4 00 00 00    	jne    c001b910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b81c:	50                   	push   eax
c001b81d:	50                   	push   eax
c001b81e:	68 26 97 02 c0       	push   0xc0029726
c001b823:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b827:	03 06                	add    eax,DWORD PTR [esi]
c001b829:	50                   	push   eax
c001b82a:	e8 3c 4f fe ff       	call   c000076b <strcmp>
c001b82f:	83 c4 10             	add    esp,0x10
c001b832:	85 c0                	test   eax,eax
c001b834:	75 0a                	jne    c001b840 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001b836:	b8 0c 45 02 c0       	mov    eax,0xc002450c
c001b83b:	e9 ca 00 00 00       	jmp    c001b90a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b840:	50                   	push   eax
c001b841:	50                   	push   eax
c001b842:	68 30 97 02 c0       	push   0xc0029730
c001b847:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b84b:	03 06                	add    eax,DWORD PTR [esi]
c001b84d:	50                   	push   eax
c001b84e:	e8 18 4f fe ff       	call   c000076b <strcmp>
c001b853:	83 c4 10             	add    esp,0x10
c001b856:	85 c0                	test   eax,eax
c001b858:	75 0a                	jne    c001b864 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001b85a:	b8 40 42 02 c0       	mov    eax,0xc0024240
c001b85f:	e9 a6 00 00 00       	jmp    c001b90a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b864:	53                   	push   ebx
c001b865:	53                   	push   ebx
c001b866:	68 39 97 02 c0       	push   0xc0029739
c001b86b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b86f:	03 06                	add    eax,DWORD PTR [esi]
c001b871:	50                   	push   eax
c001b872:	e8 f4 4e fe ff       	call   c000076b <strcmp>
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	85 c0                	test   eax,eax
c001b87c:	75 0a                	jne    c001b888 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001b87e:	b8 0c 46 02 c0       	mov    eax,0xc002460c
c001b883:	e9 82 00 00 00       	jmp    c001b90a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b888:	51                   	push   ecx
c001b889:	51                   	push   ecx
c001b88a:	68 43 97 02 c0       	push   0xc0029743
c001b88f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b893:	03 06                	add    eax,DWORD PTR [esi]
c001b895:	50                   	push   eax
c001b896:	e8 d0 4e fe ff       	call   c000076b <strcmp>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	85 c0                	test   eax,eax
c001b8a0:	74 63                	je     c001b905 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001b8a2:	50                   	push   eax
c001b8a3:	50                   	push   eax
c001b8a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8a8:	03 06                	add    eax,DWORD PTR [esi]
c001b8aa:	50                   	push   eax
c001b8ab:	68 4c 97 02 c0       	push   0xc002974c
c001b8b0:	e8 d8 6d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001b8b5:	58                   	pop    eax
c001b8b6:	5a                   	pop    edx
c001b8b7:	68 66 97 02 c0       	push   0xc0029766
c001b8bc:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b8c3:	53                   	push   ebx
c001b8c4:	e8 51 4e fe ff       	call   c000071a <strcpy>
c001b8c9:	59                   	pop    ecx
c001b8ca:	58                   	pop    eax
c001b8cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8cf:	03 06                	add    eax,DWORD PTR [esi]
c001b8d1:	50                   	push   eax
c001b8d2:	53                   	push   ebx
c001b8d3:	e8 f9 4e fe ff       	call   c00007d1 <strcat>
c001b8d8:	58                   	pop    eax
c001b8d9:	5a                   	pop    edx
c001b8da:	68 fc 97 02 c0       	push   0xc00297fc
c001b8df:	53                   	push   ebx
c001b8e0:	e8 ec 4e fe ff       	call   c00007d1 <strcat>
c001b8e5:	83 c4 10             	add    esp,0x10
c001b8e8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b8ed:	0f 84 4b 01 00 00    	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	53                   	push   ebx
c001b8f7:	e8 5b d8 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b903:	eb 0b                	jmp    c001b910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b905:	b8 8c 43 02 c0       	mov    eax,0xc002438c
c001b90a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b90e:	b3 01                	mov    bl,0x1
c001b910:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b915:	0f 85 80 00 00 00    	jne    c001b99b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001b91b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b922:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b926:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b92a:	01 ce                	add    esi,ecx
c001b92c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b934:	8b 06                	mov    eax,DWORD PTR [esi]
c001b936:	0f 94 c2             	sete   dl
c001b939:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b941:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b946:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b94a:	84 db                	test   bl,bl
c001b94c:	74 31                	je     c001b97f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001b94e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b952:	01 c3                	add    ebx,eax
c001b954:	84 d2                	test   dl,dl
c001b956:	75 0a                	jne    c001b962 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001b958:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b95c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b960:	76 32                	jbe    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b962:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b967:	0f 84 d1 00 00 00    	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b96d:	83 ec 0c             	sub    esp,0xc
c001b970:	68 7d 97 02 c0       	push   0xc002977d
c001b975:	e8 dd d7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b97a:	83 c4 10             	add    esp,0x10
c001b97d:	eb 15                	jmp    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b97f:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b982:	84 d2                	test   dl,dl
c001b984:	75 0e                	jne    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b986:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b98a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b98e:	77 04                	ja     c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b990:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b994:	89 1e                	mov    DWORD PTR [esi],ebx
c001b996:	e9 e0 00 00 00       	jmp    c001ba7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b99b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b9a0:	75 6e                	jne    c001ba10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001b9a2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b9a9:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b9ad:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b9b1:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b9b9:	74 17                	je     c001b9d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b9bb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b9c3:	74 0d                	je     c001b9d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b9c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b9c9:	83 e8 04             	sub    eax,0x4
c001b9cc:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b9d0:	76 17                	jbe    c001b9e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001b9d2:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b9d7:	74 65                	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b9d9:	83 ec 0c             	sub    esp,0xc
c001b9dc:	68 99 97 02 c0       	push   0xc0029799
c001b9e1:	e8 71 d7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b9e6:	83 c4 10             	add    esp,0x10
c001b9e9:	8b 16                	mov    edx,DWORD PTR [esi]
c001b9eb:	84 db                	test   bl,bl
c001b9ed:	74 13                	je     c001ba02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001b9ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b9f3:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b9fa:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b9fe:	01 d0                	add    eax,edx
c001ba00:	eb 06                	jmp    c001ba08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001ba02:	89 d0                	mov    eax,edx
c001ba04:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001ba08:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ba0c:	89 06                	mov    DWORD PTR [esi],eax
c001ba0e:	eb 6b                	jmp    c001ba7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001ba10:	50                   	push   eax
c001ba11:	50                   	push   eax
c001ba12:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001ba17:	50                   	push   eax
c001ba18:	68 b5 97 02 c0       	push   0xc00297b5
c001ba1d:	e8 6b 6c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ba22:	83 c4 10             	add    esp,0x10
c001ba25:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001ba2a:	74 12                	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001ba2c:	83 ec 0c             	sub    esp,0xc
c001ba2f:	68 c0 97 02 c0       	push   0xc00297c0
c001ba34:	e8 1e d7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	eb 3d                	jmp    c001ba7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	55                   	push   ebp
c001ba42:	e8 37 72 ff ff       	call   c0012c7e <File::close()>
c001ba47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ba4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ba4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba50:	59                   	pop    ecx
c001ba51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba55:	e8 76 3a ff ff       	call   c000f4d0 <free>
c001ba5a:	5b                   	pop    ebx
c001ba5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba5f:	e8 6c 3a ff ff       	call   c000f4d0 <free>
c001ba64:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba67:	e8 64 3a ff ff       	call   c000f4d0 <free>
c001ba6c:	5e                   	pop    esi
c001ba6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ba71:	e8 5a 3a ff ff       	call   c000f4d0 <free>
c001ba76:	83 c4 10             	add    esp,0x10
c001ba79:	eb 21                	jmp    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001ba7b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001ba7f:	e9 2b fd ff ff       	jmp    c001b7af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ba84:	83 ec 0c             	sub    esp,0xc
c001ba87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba8b:	e8 40 3a ff ff       	call   c000f4d0 <free>
c001ba90:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001ba94:	83 c4 10             	add    esp,0x10
c001ba97:	e9 a0 fc ff ff       	jmp    c001b73c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ba9c:	31 c0                	xor    eax,eax
c001ba9e:	eb 33                	jmp    c001bad3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001baa0:	83 ec 0c             	sub    esp,0xc
c001baa3:	55                   	push   ebp
c001baa4:	e8 d5 71 ff ff       	call   c0012c7e <File::close()>
c001baa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001baac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001baaf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bab2:	58                   	pop    eax
c001bab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bab7:	e8 14 3a ff ff       	call   c000f4d0 <free>
c001babc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001babf:	e8 0c 3a ff ff       	call   c000f4d0 <free>
c001bac4:	5a                   	pop    edx
c001bac5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bac9:	e8 02 3a ff ff       	call   c000f4d0 <free>
c001bace:	83 c4 10             	add    esp,0x10
c001bad1:	b0 01                	mov    al,0x1
c001bad3:	81 c4 5c 03 00 00    	add    esp,0x35c
c001bad9:	5b                   	pop    ebx
c001bada:	5e                   	pop    esi
c001badb:	5f                   	pop    edi
c001badc:	5d                   	pop    ebp
c001badd:	c3                   	ret    

c001bade <Thr::getDriverBaseFromAddress(unsigned long)>:
c001bade:	56                   	push   esi
c001badf:	31 d2                	xor    edx,edx
c001bae1:	53                   	push   ebx
c001bae2:	8b 1d 60 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c560
c001bae8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001baec:	39 d3                	cmp    ebx,edx
c001baee:	7e 1b                	jle    c001bb0b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001baf0:	8b 04 95 80 c7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3880]
c001baf7:	39 c8                	cmp    eax,ecx
c001baf9:	77 0d                	ja     c001bb08 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001bafb:	8b 34 95 80 c5 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3a80]
c001bb02:	01 c6                	add    esi,eax
c001bb04:	39 ce                	cmp    esi,ecx
c001bb06:	77 05                	ja     c001bb0d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001bb08:	42                   	inc    edx
c001bb09:	eb e1                	jmp    c001baec <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001bb0b:	31 c0                	xor    eax,eax
c001bb0d:	5b                   	pop    ebx
c001bb0e:	5e                   	pop    esi
c001bb0f:	c3                   	ret    

c001bb10 <Thr::getDriverNameFromAddress(unsigned long)>:
c001bb10:	53                   	push   ebx
c001bb11:	31 c0                	xor    eax,eax
c001bb13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb17:	8b 1d 60 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c560
c001bb1d:	39 c3                	cmp    ebx,eax
c001bb1f:	7e 22                	jle    c001bb43 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001bb21:	8b 14 85 80 c7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3880]
c001bb28:	39 ca                	cmp    edx,ecx
c001bb2a:	77 14                	ja     c001bb40 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bb2c:	03 14 85 80 c5 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3a80]
c001bb33:	39 ca                	cmp    edx,ecx
c001bb35:	76 09                	jbe    c001bb40 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bb37:	8b 04 85 80 c9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3680]
c001bb3e:	eb 05                	jmp    c001bb45 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001bb40:	40                   	inc    eax
c001bb41:	eb da                	jmp    c001bb1d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001bb43:	31 c0                	xor    eax,eax
c001bb45:	5b                   	pop    ebx
c001bb46:	c3                   	ret    

c001bb47 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001bb47:	53                   	push   ebx
c001bb48:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bb4c:	53                   	push   ebx
c001bb4d:	e8 8c ff ff ff       	call   c001bade <Thr::getDriverBaseFromAddress(unsigned long)>
c001bb52:	5a                   	pop    edx
c001bb53:	31 d2                	xor    edx,edx
c001bb55:	85 c0                	test   eax,eax
c001bb57:	74 04                	je     c001bb5d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001bb59:	89 da                	mov    edx,ebx
c001bb5b:	29 c2                	sub    edx,eax
c001bb5d:	89 d0                	mov    eax,edx
c001bb5f:	5b                   	pop    ebx
c001bb60:	c3                   	ret    

c001bb61 <Thr::loadDLL(char const*, bool)>:
c001bb61:	55                   	push   ebp
c001bb62:	57                   	push   edi
c001bb63:	56                   	push   esi
c001bb64:	53                   	push   ebx
c001bb65:	81 ec 34 01 00 00    	sub    esp,0x134
c001bb6b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001bb72:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001bb79:	56                   	push   esi
c001bb7a:	68 d8 97 02 c0       	push   0xc00297d8
c001bb7f:	e8 09 6b ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001bb84:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001bb8b:	e8 30 39 ff ff       	call   c000f4c0 <malloc>
c001bb90:	83 c4 0c             	add    esp,0xc
c001bb93:	89 c3                	mov    ebx,eax
c001bb95:	ff 35 54 cd 02 c0    	push   DWORD PTR ds:0xc002cd54
c001bb9b:	56                   	push   esi
c001bb9c:	50                   	push   eax
c001bb9d:	e8 1a 70 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	85 db                	test   ebx,ebx
c001bba7:	75 3c                	jne    c001bbe5 <Thr::loadDLL(char const*, bool)+0x84>
c001bba9:	89 e8                	mov    eax,ebp
c001bbab:	84 c0                	test   al,al
c001bbad:	0f 84 b0 01 00 00    	je     c001bd63 <Thr::loadDLL(char const*, bool)+0x202>
c001bbb3:	50                   	push   eax
c001bbb4:	50                   	push   eax
c001bbb5:	68 e9 97 02 c0       	push   0xc00297e9
c001bbba:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001bbbe:	57                   	push   edi
c001bbbf:	e8 56 4b fe ff       	call   c000071a <strcpy>
c001bbc4:	58                   	pop    eax
c001bbc5:	5a                   	pop    edx
c001bbc6:	56                   	push   esi
c001bbc7:	57                   	push   edi
c001bbc8:	e8 04 4c fe ff       	call   c00007d1 <strcat>
c001bbcd:	59                   	pop    ecx
c001bbce:	58                   	pop    eax
c001bbcf:	68 fc 97 02 c0       	push   0xc00297fc
c001bbd4:	57                   	push   edi
c001bbd5:	e8 f7 4b fe ff       	call   c00007d1 <strcat>
c001bbda:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbdd:	e8 75 d5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bbe2:	83 c4 10             	add    esp,0x10
c001bbe5:	50                   	push   eax
c001bbe6:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001bbea:	50                   	push   eax
c001bbeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bbef:	50                   	push   eax
c001bbf0:	53                   	push   ebx
c001bbf1:	e8 d6 72 ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001bbf6:	83 c4 10             	add    esp,0x10
c001bbf9:	85 db                	test   ebx,ebx
c001bbfb:	74 0c                	je     c001bc09 <Thr::loadDLL(char const*, bool)+0xa8>
c001bbfd:	83 ec 0c             	sub    esp,0xc
c001bc00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc02:	53                   	push   ebx
c001bc03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001bc0e:	75 0a                	jne    c001bc1a <Thr::loadDLL(char const*, bool)+0xb9>
c001bc10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc14:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001bc18:	75 3c                	jne    c001bc56 <Thr::loadDLL(char const*, bool)+0xf5>
c001bc1a:	89 e8                	mov    eax,ebp
c001bc1c:	84 c0                	test   al,al
c001bc1e:	0f 84 3d 01 00 00    	je     c001bd61 <Thr::loadDLL(char const*, bool)+0x200>
c001bc24:	50                   	push   eax
c001bc25:	50                   	push   eax
c001bc26:	68 e9 97 02 c0       	push   0xc00297e9
c001bc2b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001bc2f:	53                   	push   ebx
c001bc30:	e8 e5 4a fe ff       	call   c000071a <strcpy>
c001bc35:	58                   	pop    eax
c001bc36:	5a                   	pop    edx
c001bc37:	56                   	push   esi
c001bc38:	53                   	push   ebx
c001bc39:	e8 93 4b fe ff       	call   c00007d1 <strcat>
c001bc3e:	59                   	pop    ecx
c001bc3f:	5f                   	pop    edi
c001bc40:	68 fc 97 02 c0       	push   0xc00297fc
c001bc45:	53                   	push   ebx
c001bc46:	e8 86 4b fe ff       	call   c00007d1 <strcat>
c001bc4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc4e:	e8 04 d5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bc53:	83 c4 10             	add    esp,0x10
c001bc56:	e8 d2 5b ff ff       	call   c001182d <Virt::getAKernelVAS()>
c001bc5b:	51                   	push   ecx
c001bc5c:	6a 03                	push   0x3
c001bc5e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001bc62:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001bc66:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001bc6c:	83 d3 00             	adc    ebx,0x0
c001bc6f:	89 ca                	mov    edx,ecx
c001bc71:	89 d1                	mov    ecx,edx
c001bc73:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001bc77:	51                   	push   ecx
c001bc78:	50                   	push   eax
c001bc79:	e8 ea 61 ff ff       	call   c0011e68 <VAS::allocatePages(int, int)>
c001bc7e:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc81:	89 c3                	mov    ebx,eax
c001bc83:	e8 10 4a fe ff       	call   c0000698 <strlen>
c001bc88:	8b 3d 60 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c560
c001bc8e:	40                   	inc    eax
c001bc8f:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc92:	e8 29 38 ff ff       	call   c000f4c0 <malloc>
c001bc97:	89 04 bd 80 c9 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3680],eax
c001bc9e:	5f                   	pop    edi
c001bc9f:	58                   	pop    eax
c001bca0:	a1 60 c5 02 c0       	mov    eax,ds:0xc002c560
c001bca5:	56                   	push   esi
c001bca6:	ff 34 85 80 c9 02 c0 	push   DWORD PTR [eax*4-0x3ffd3680]
c001bcad:	e8 68 4a fe ff       	call   c000071a <strcpy>
c001bcb2:	a1 60 c5 02 c0       	mov    eax,ds:0xc002c560
c001bcb7:	8d 50 01             	lea    edx,[eax+0x1]
c001bcba:	89 1c 85 80 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3880],ebx
c001bcc1:	89 15 60 c5 02 c0    	mov    DWORD PTR ds:0xc002c560,edx
c001bcc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bccb:	83 c4 0c             	add    esp,0xc
c001bcce:	89 14 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],edx
c001bcd5:	6a 01                	push   0x1
c001bcd7:	53                   	push   ebx
c001bcd8:	56                   	push   esi
c001bcd9:	e8 7f f6 ff ff       	call   c001b35d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001bcde:	83 c4 10             	add    esp,0x10
c001bce1:	89 c7                	mov    edi,eax
c001bce3:	fe c8                	dec    al
c001bce5:	74 16                	je     c001bcfd <Thr::loadDLL(char const*, bool)+0x19c>
c001bce7:	89 e8                	mov    eax,ebp
c001bce9:	84 c0                	test   al,al
c001bceb:	74 10                	je     c001bcfd <Thr::loadDLL(char const*, bool)+0x19c>
c001bced:	83 ec 0c             	sub    esp,0xc
c001bcf0:	68 fe 97 02 c0       	push   0xc00297fe
c001bcf5:	e8 5d d4 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	31 f6                	xor    esi,esi
c001bcff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd07:	05 ff 0f 00 00       	add    eax,0xfff
c001bd0c:	83 d2 00             	adc    edx,0x0
c001bd0f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001bd13:	c1 ea 0c             	shr    edx,0xc
c001bd16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bd1e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001bd22:	ba 00 00 00 00       	mov    edx,0x0
c001bd27:	89 d0                	mov    eax,edx
c001bd29:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001bd2d:	73 2c                	jae    c001bd5b <Thr::loadDLL(char const*, bool)+0x1fa>
c001bd2f:	e8 f9 5a ff ff       	call   c001182d <Virt::getAKernelVAS()>
c001bd34:	89 f5                	mov    ebp,esi
c001bd36:	c1 e5 0c             	shl    ebp,0xc
c001bd39:	52                   	push   edx
c001bd3a:	01 dd                	add    ebp,ebx
c001bd3c:	52                   	push   edx
c001bd3d:	55                   	push   ebp
c001bd3e:	50                   	push   eax
c001bd3f:	e8 9e 5c ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c001bd44:	83 c4 10             	add    esp,0x10
c001bd47:	f6 00 60             	test   BYTE PTR [eax],0x60
c001bd4a:	75 0c                	jne    c001bd58 <Thr::loadDLL(char const*, bool)+0x1f7>
c001bd4c:	83 ec 0c             	sub    esp,0xc
c001bd4f:	55                   	push   ebp
c001bd50:	e8 8b 3c ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	46                   	inc    esi
c001bd59:	eb a4                	jmp    c001bcff <Thr::loadDLL(char const*, bool)+0x19e>
c001bd5b:	89 f8                	mov    eax,edi
c001bd5d:	84 c0                	test   al,al
c001bd5f:	75 02                	jne    c001bd63 <Thr::loadDLL(char const*, bool)+0x202>
c001bd61:	31 db                	xor    ebx,ebx
c001bd63:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bd69:	89 d8                	mov    eax,ebx
c001bd6b:	5b                   	pop    ebx
c001bd6c:	5e                   	pop    esi
c001bd6d:	5f                   	pop    edi
c001bd6e:	5d                   	pop    ebp
c001bd6f:	c3                   	ret    

c001bd70 <Thr::executeDLL(unsigned long, void*)>:
c001bd70:	56                   	push   esi
c001bd71:	53                   	push   ebx
c001bd72:	51                   	push   ecx
c001bd73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd7b:	85 db                	test   ebx,ebx
c001bd7d:	75 10                	jne    c001bd8f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001bd7f:	83 ec 0c             	sub    esp,0xc
c001bd82:	68 1d 98 02 c0       	push   0xc002981d
c001bd87:	e8 cb d3 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001bd93:	89 d8                	mov    eax,ebx
c001bd95:	5a                   	pop    edx
c001bd96:	5b                   	pop    ebx
c001bd97:	5e                   	pop    esi
c001bd98:	ff e0                	jmp    eax

c001bd9a <changeTSS>:
c001bd9a:	83 ec 14             	sub    esp,0x14
c001bd9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bda5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001bdaa:	c1 e2 15             	shl    edx,0x15
c001bdad:	29 d0                	sub    eax,edx
c001bdaf:	50                   	push   eax
c001bdb0:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001bdb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bdbb:	05 7c 11 00 00       	add    eax,0x117c
c001bdc0:	50                   	push   eax
c001bdc1:	e8 16 52 ff ff       	call   c0010fdc <TSS::setESP(unsigned long)>
c001bdc6:	83 c4 1c             	add    esp,0x1c
c001bdc9:	c3                   	ret    

c001bdca <Process::addArgs(char**)>:
c001bdca:	57                   	push   edi
c001bdcb:	56                   	push   esi
c001bdcc:	53                   	push   ebx
c001bdcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdd1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bdd5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001bddf:	85 ff                	test   edi,edi
c001bde1:	74 3d                	je     c001be20 <Process::addArgs(char**)+0x56>
c001bde3:	8b 07                	mov    eax,DWORD PTR [edi]
c001bde5:	85 c0                	test   eax,eax
c001bde7:	74 37                	je     c001be20 <Process::addArgs(char**)+0x56>
c001bde9:	31 db                	xor    ebx,ebx
c001bdeb:	83 ec 0c             	sub    esp,0xc
c001bdee:	50                   	push   eax
c001bdef:	e8 a4 48 fe ff       	call   c0000698 <strlen>
c001bdf4:	40                   	inc    eax
c001bdf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdf8:	e8 c3 36 ff ff       	call   c000f4c0 <malloc>
c001bdfd:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001be04:	5a                   	pop    edx
c001be05:	59                   	pop    ecx
c001be06:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001be09:	43                   	inc    ebx
c001be0a:	50                   	push   eax
c001be0b:	e8 0a 49 fe ff       	call   c000071a <strcpy>
c001be10:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001be1c:	85 c0                	test   eax,eax
c001be1e:	75 cb                	jne    c001bdeb <Process::addArgs(char**)+0x21>
c001be20:	5b                   	pop    ebx
c001be21:	5e                   	pop    esi
c001be22:	5f                   	pop    edi
c001be23:	c3                   	ret    

c001be24 <Process::Process(char const*, Process*, char**)>:
c001be24:	56                   	push   esi
c001be25:	53                   	push   ebx
c001be26:	83 ec 14             	sub    esp,0x14
c001be29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be2d:	05 0c 02 00 00       	add    eax,0x20c
c001be32:	bb 07 00 00 00       	mov    ebx,0x7
c001be37:	89 c6                	mov    esi,eax
c001be39:	85 db                	test   ebx,ebx
c001be3b:	78 12                	js     c001be4f <Process::Process(char const*, Process*, char**)+0x2b>
c001be3d:	83 ec 0c             	sub    esp,0xc
c001be40:	56                   	push   esi
c001be41:	e8 7c a9 00 00       	call   c00267c2 <ThreadControlBlock::ThreadControlBlock()>
c001be46:	83 c4 10             	add    esp,0x10
c001be49:	83 c6 63             	add    esi,0x63
c001be4c:	4b                   	dec    ebx
c001be4d:	eb ea                	jmp    c001be39 <Process::Process(char const*, Process*, char**)+0x15>
c001be4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be53:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001be5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be5e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001be67:	a1 e4 ad 02 c0       	mov    eax,ds:0xc002ade4
c001be6c:	8d 50 01             	lea    edx,[eax+0x1]
c001be6f:	89 15 e4 ad 02 c0    	mov    DWORD PTR ds:0xc002ade4,edx
c001be75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be79:	89 02                	mov    DWORD PTR [edx],eax
c001be7b:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001be83:	83 ec 0c             	sub    esp,0xc
c001be86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be8a:	e8 31 36 ff ff       	call   c000f4c0 <malloc>
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	89 c3                	mov    ebx,eax
c001be94:	83 ec 08             	sub    esp,0x8
c001be97:	6a 00                	push   0x0
c001be99:	53                   	push   ebx
c001be9a:	e8 71 63 ff ff       	call   c0012210 <VAS::VAS(bool)>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea6:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001beac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beb0:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001beba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bebe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bec2:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001becc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bed2:	85 c0                	test   eax,eax
c001bed4:	74 42                	je     c001bf18 <Process::Process(char const*, Process*, char**)+0xf4>
c001bed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beda:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bee0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beea:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001befa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bf00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf04:	05 0c 01 00 00       	add    eax,0x10c
c001bf09:	83 ec 08             	sub    esp,0x8
c001bf0c:	52                   	push   edx
c001bf0d:	50                   	push   eax
c001bf0e:	e8 07 48 fe ff       	call   c000071a <strcpy>
c001bf13:	83 c4 10             	add    esp,0x10
c001bf16:	eb 63                	jmp    c001bf7b <Process::Process(char const*, Process*, char**)+0x157>
c001bf18:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001bf20:	83 ec 0c             	sub    esp,0xc
c001bf23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bf27:	e8 94 35 ff ff       	call   c000f4c0 <malloc>
c001bf2c:	83 c4 10             	add    esp,0x10
c001bf2f:	89 c3                	mov    ebx,eax
c001bf31:	83 ec 08             	sub    esp,0x8
c001bf34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf38:	53                   	push   ebx
c001bf39:	e8 9c 4d ff ff       	call   c0010cda <VgaText::VgaText(char const*)>
c001bf3e:	83 c4 10             	add    esp,0x10
c001bf41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf45:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bf4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf4f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bf55:	83 ec 0c             	sub    esp,0xc
c001bf58:	50                   	push   eax
c001bf59:	e8 7d 41 ff ff       	call   c00100db <addToTerminalCycle(VgaText*)>
c001bf5e:	83 c4 10             	add    esp,0x10
c001bf61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf65:	05 0c 01 00 00       	add    eax,0x10c
c001bf6a:	83 ec 08             	sub    esp,0x8
c001bf6d:	68 47 98 02 c0       	push   0xc0029847
c001bf72:	50                   	push   eax
c001bf73:	e8 a2 47 fe ff       	call   c000071a <strcpy>
c001bf78:	83 c4 10             	add    esp,0x10
c001bf7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf7f:	83 c0 0c             	add    eax,0xc
c001bf82:	83 ec 08             	sub    esp,0x8
c001bf85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf89:	50                   	push   eax
c001bf8a:	e8 8b 47 fe ff       	call   c000071a <strcpy>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	83 ec 08             	sub    esp,0x8
c001bf95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf9d:	e8 28 fe ff ff       	call   c001bdca <Process::addArgs(char**)>
c001bfa2:	83 c4 10             	add    esp,0x10
c001bfa5:	83 ec 08             	sub    esp,0x8
c001bfa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfb0:	e8 74 ee ff ff       	call   c001ae29 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001bfb5:	83 c4 10             	add    esp,0x10
c001bfb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bfbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bfc0:	83 f0 01             	xor    eax,0x1
c001bfc3:	88 c2                	mov    dl,al
c001bfc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bfc9:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001bfcf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001bfd4:	83 ec 08             	sub    esp,0x8
c001bfd7:	50                   	push   eax
c001bfd8:	68 44 99 02 c0       	push   0xc0029944
c001bfdd:	e8 ab 66 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	90                   	nop
c001bfe6:	83 c4 14             	add    esp,0x14
c001bfe9:	5b                   	pop    ebx
c001bfea:	5e                   	pop    esi
c001bfeb:	c3                   	ret    

c001bfec <Process::Process(bool, char const*, Process*, char**)>:
c001bfec:	56                   	push   esi
c001bfed:	53                   	push   ebx
c001bfee:	83 ec 24             	sub    esp,0x24
c001bff1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bff5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bffd:	05 0c 02 00 00       	add    eax,0x20c
c001c002:	bb 07 00 00 00       	mov    ebx,0x7
c001c007:	89 c6                	mov    esi,eax
c001c009:	85 db                	test   ebx,ebx
c001c00b:	78 12                	js     c001c01f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001c00d:	83 ec 0c             	sub    esp,0xc
c001c010:	56                   	push   esi
c001c011:	e8 ac a7 00 00       	call   c00267c2 <ThreadControlBlock::ThreadControlBlock()>
c001c016:	83 c4 10             	add    esp,0x10
c001c019:	83 c6 63             	add    esi,0x63
c001c01c:	4b                   	dec    ebx
c001c01d:	eb ea                	jmp    c001c009 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001c01f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c023:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001c02a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c02e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c037:	a1 e4 ad 02 c0       	mov    eax,ds:0xc002ade4
c001c03c:	8d 50 01             	lea    edx,[eax+0x1]
c001c03f:	89 15 e4 ad 02 c0    	mov    DWORD PTR ds:0xc002ade4,edx
c001c045:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c049:	89 02                	mov    DWORD PTR [edx],eax
c001c04b:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001c053:	83 ec 0c             	sub    esp,0xc
c001c056:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c05a:	e8 61 34 ff ff       	call   c000f4c0 <malloc>
c001c05f:	83 c4 10             	add    esp,0x10
c001c062:	89 c3                	mov    ebx,eax
c001c064:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c069:	83 ec 08             	sub    esp,0x8
c001c06c:	50                   	push   eax
c001c06d:	53                   	push   ebx
c001c06e:	e8 9d 61 ff ff       	call   c0012210 <VAS::VAS(bool)>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c07a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c084:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c092:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c096:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0a0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0a6:	85 c0                	test   eax,eax
c001c0a8:	74 42                	je     c001c0ec <Process::Process(bool, char const*, Process*, char**)+0x100>
c001c0aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0b4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c0ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0be:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c0c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0c8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c0d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0d8:	05 0c 01 00 00       	add    eax,0x10c
c001c0dd:	83 ec 08             	sub    esp,0x8
c001c0e0:	52                   	push   edx
c001c0e1:	50                   	push   eax
c001c0e2:	e8 33 46 fe ff       	call   c000071a <strcpy>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	eb 63                	jmp    c001c14f <Process::Process(bool, char const*, Process*, char**)+0x163>
c001c0ec:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001c0f4:	83 ec 0c             	sub    esp,0xc
c001c0f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c0fb:	e8 c0 33 ff ff       	call   c000f4c0 <malloc>
c001c100:	83 c4 10             	add    esp,0x10
c001c103:	89 c3                	mov    ebx,eax
c001c105:	83 ec 08             	sub    esp,0x8
c001c108:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c10c:	53                   	push   ebx
c001c10d:	e8 c8 4b ff ff       	call   c0010cda <VgaText::VgaText(char const*)>
c001c112:	83 c4 10             	add    esp,0x10
c001c115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c119:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c11f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c123:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c129:	83 ec 0c             	sub    esp,0xc
c001c12c:	50                   	push   eax
c001c12d:	e8 a9 3f ff ff       	call   c00100db <addToTerminalCycle(VgaText*)>
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c139:	05 0c 01 00 00       	add    eax,0x10c
c001c13e:	83 ec 08             	sub    esp,0x8
c001c141:	68 47 98 02 c0       	push   0xc0029847
c001c146:	50                   	push   eax
c001c147:	e8 ce 45 fe ff       	call   c000071a <strcpy>
c001c14c:	83 c4 10             	add    esp,0x10
c001c14f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c153:	83 c0 0c             	add    eax,0xc
c001c156:	83 ec 08             	sub    esp,0x8
c001c159:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c15d:	50                   	push   eax
c001c15e:	e8 b7 45 fe ff       	call   c000071a <strcpy>
c001c163:	83 c4 10             	add    esp,0x10
c001c166:	83 ec 08             	sub    esp,0x8
c001c169:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c16d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c171:	e8 54 fc ff ff       	call   c001bdca <Process::addArgs(char**)>
c001c176:	83 c4 10             	add    esp,0x10
c001c179:	90                   	nop
c001c17a:	83 c4 24             	add    esp,0x24
c001c17d:	5b                   	pop    ebx
c001c17e:	5e                   	pop    esi
c001c17f:	c3                   	ret    

c001c180 <disableIRQs()>:
c001c180:	fa                   	cli    
c001c181:	ff 05 2c cd 02 c0    	inc    DWORD PTR ds:0xc002cd2c
c001c187:	c3                   	ret    

c001c188 <getIRQNestingLevel()>:
c001c188:	a1 2c cd 02 c0       	mov    eax,ds:0xc002cd2c
c001c18d:	c3                   	ret    

c001c18e <enableIRQs()>:
c001c18e:	a1 2c cd 02 c0       	mov    eax,ds:0xc002cd2c
c001c193:	48                   	dec    eax
c001c194:	a3 2c cd 02 c0       	mov    ds:0xc002cd2c,eax
c001c199:	75 01                	jne    c001c19c <enableIRQs()+0xe>
c001c19b:	fb                   	sti    
c001c19c:	c3                   	ret    

c001c19d <lockScheduler()>:
c001c19d:	eb e1                	jmp    c001c180 <disableIRQs()>

c001c19f <unlockScheduler()>:
c001c19f:	eb ed                	jmp    c001c18e <enableIRQs()>

c001c1a1 <userModeEntryPoint(void*)>:
c001c1a1:	83 ec 0c             	sub    esp,0xc
c001c1a4:	e8 f6 ff ff ff       	call   c001c19f <unlockScheduler()>
c001c1a9:	fb                   	sti    
c001c1aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b2:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001c1b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c1bc:	83 c4 0c             	add    esp,0xc
c001c1bf:	e9 1b 41 fe ff       	jmp    c00002df <goToUsermode>

c001c1c4 <lockStuff()>:
c001c1c4:	e8 b7 ff ff ff       	call   c001c180 <disableIRQs()>
c001c1c9:	ff 05 28 cd 02 c0    	inc    DWORD PTR ds:0xc002cd28
c001c1cf:	c3                   	ret    

c001c1d0 <taskStartupFunction>:
c001c1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d5:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001c1d8:	c3                   	ret    

c001c1d9 <updateTimeUsed()>:
c001c1d9:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c001c1de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c1e4:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001c1eb:	74 50                	je     c001c23d <updateTimeUsed()+0x64>
c001c1ed:	57                   	push   edi
c001c1ee:	56                   	push   esi
c001c1ef:	53                   	push   ebx
c001c1f0:	0f 31                	rdtsc  
c001c1f2:	89 c1                	mov    ecx,eax
c001c1f4:	a3 68 cd 02 c0       	mov    ds:0xc002cd68,eax
c001c1f9:	2b 0d 58 cd 02 c0    	sub    ecx,DWORD PTR ds:0xc002cd58
c001c1ff:	89 d3                	mov    ebx,edx
c001c201:	89 0d 60 cd 02 c0    	mov    DWORD PTR ds:0xc002cd60,ecx
c001c207:	1b 1d 5c cd 02 c0    	sbb    ebx,DWORD PTR ds:0xc002cd5c
c001c20d:	a3 58 cd 02 c0       	mov    ds:0xc002cd58,eax
c001c212:	89 1d 64 cd 02 c0    	mov    DWORD PTR ds:0xc002cd64,ebx
c001c218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21d:	89 15 6c cd 02 c0    	mov    DWORD PTR ds:0xc002cd6c,edx
c001c223:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001c226:	89 15 5c cd 02 c0    	mov    DWORD PTR ds:0xc002cd5c,edx
c001c22c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001c22f:	01 f1                	add    ecx,esi
c001c231:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001c234:	11 fb                	adc    ebx,edi
c001c236:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001c239:	5b                   	pop    ebx
c001c23a:	5e                   	pop    esi
c001c23b:	5f                   	pop    edi
c001c23c:	c3                   	ret    
c001c23d:	c3                   	ret    

c001c23e <switchToThread(ThreadControlBlock*)>:
c001c23e:	53                   	push   ebx
c001c23f:	83 ec 08             	sub    esp,0x8
c001c242:	a1 28 cd 02 c0       	mov    eax,ds:0xc002cd28
c001c247:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c24b:	85 c0                	test   eax,eax
c001c24d:	75 30                	jne    c001c27f <switchToThread(ThreadControlBlock*)+0x41>
c001c24f:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001c252:	3c ff                	cmp    al,0xff
c001c254:	74 25                	je     c001c27b <switchToThread(ThreadControlBlock*)+0x3d>
c001c256:	0f b6 d0             	movzx  edx,al
c001c259:	b8 84 03 00 00       	mov    eax,0x384
c001c25e:	29 d0                	sub    eax,edx
c001c260:	c1 e0 10             	shl    eax,0x10
c001c263:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001c266:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001c269:	e8 6b ff ff ff       	call   c001c1d9 <updateTimeUsed()>
c001c26e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c272:	83 c4 08             	add    esp,0x8
c001c275:	5b                   	pop    ebx
c001c276:	e9 9c 40 fe ff       	jmp    c0000317 <switchToThreadASM>
c001c27b:	31 c0                	xor    eax,eax
c001c27d:	eb e7                	jmp    c001c266 <switchToThread(ThreadControlBlock*)+0x28>
c001c27f:	c7 05 24 cd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cd24,0x1
c001c289:	83 c4 08             	add    esp,0x8
c001c28c:	5b                   	pop    ebx
c001c28d:	c3                   	ret    

c001c28e <Semaphore::Semaphore(int)>:
c001c28e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c296:	89 10                	mov    DWORD PTR [eax],edx
c001c298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c29c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c2a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c2b9:	90                   	nop
c001c2ba:	c3                   	ret    
c001c2bb:	90                   	nop

c001c2bc <Mutex::Mutex()>:
c001c2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2c0:	6a 01                	push   0x1
c001c2c2:	50                   	push   eax
c001c2c3:	e8 c6 ff ff ff       	call   c001c28e <Semaphore::Semaphore(int)>
c001c2c8:	83 c4 08             	add    esp,0x8
c001c2cb:	90                   	nop
c001c2cc:	c3                   	ret    
c001c2cd:	90                   	nop

c001c2ce <Process::createThread(void (*)(void*), void*, int)>:
c001c2ce:	55                   	push   ebp
c001c2cf:	31 c9                	xor    ecx,ecx
c001c2d1:	57                   	push   edi
c001c2d2:	56                   	push   esi
c001c2d3:	53                   	push   ebx
c001c2d4:	83 ec 1c             	sub    esp,0x1c
c001c2d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c2db:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001c2e2:	89 f2                	mov    edx,esi
c001c2e4:	0f b7 c2             	movzx  eax,dx
c001c2e7:	83 e2 01             	and    edx,0x1
c001c2ea:	74 14                	je     c001c300 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001c2ec:	d1 f8                	sar    eax,1
c001c2ee:	41                   	inc    ecx
c001c2ef:	89 c2                	mov    edx,eax
c001c2f1:	83 f9 10             	cmp    ecx,0x10
c001c2f4:	75 ee                	jne    c001c2e4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001c2f6:	83 c4 1c             	add    esp,0x1c
c001c2f9:	31 c0                	xor    eax,eax
c001c2fb:	5b                   	pop    ebx
c001c2fc:	5e                   	pop    esi
c001c2fd:	5f                   	pop    edi
c001c2fe:	5d                   	pop    ebp
c001c2ff:	c3                   	ret    
c001c300:	83 ec 08             	sub    esp,0x8
c001c303:	b8 01 00 00 00       	mov    eax,0x1
c001c308:	d3 e0                	shl    eax,cl
c001c30a:	09 c6                	or     esi,eax
c001c30c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c312:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001c319:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001c31c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c31f:	01 ce                	add    esi,ecx
c001c321:	89 f0                	mov    eax,esi
c001c323:	c1 e0 05             	shl    eax,0x5
c001c326:	01 c6                	add    esi,eax
c001c328:	8d 04 33             	lea    eax,[ebx+esi*1]
c001c32b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001c331:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001c337:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c33b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001c341:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001c347:	89 ca                	mov    edx,ecx
c001c349:	f7 da                	neg    edx
c001c34b:	c1 e2 15             	shl    edx,0x15
c001c34e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001c354:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001c35a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c35e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001c368:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001c36e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c372:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001c378:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001c382:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001c38c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c393:	50                   	push   eax
c001c394:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c398:	68 48 cd 02 c0       	push   0xc002cd48
c001c39d:	e8 ae a2 00 00       	call   c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c3a2:	83 c4 10             	add    esp,0x10
c001c3a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3a9:	83 c4 1c             	add    esp,0x1c
c001c3ac:	5b                   	pop    ebx
c001c3ad:	5e                   	pop    esi
c001c3ae:	5f                   	pop    edi
c001c3af:	5d                   	pop    ebp
c001c3b0:	c3                   	ret    
c001c3b1:	90                   	nop

c001c3b2 <Process::createUserThread()>:
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	68 80 00 00 00       	push   0x80
c001c3ba:	6a 00                	push   0x0
c001c3bc:	68 a1 c1 01 c0       	push   0xc001c1a1
c001c3c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c5:	e8 04 ff ff ff       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c001c3ca:	83 c4 1c             	add    esp,0x1c
c001c3cd:	c3                   	ret    

c001c3ce <setupMultitasking(void (*)())>:
c001c3ce:	56                   	push   esi
c001c3cf:	53                   	push   ebx
c001c3d0:	53                   	push   ebx
c001c3d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3d5:	eb 10                	jmp    c001c3e7 <setupMultitasking(void (*)())+0x19>
c001c3d7:	83 ec 0c             	sub    esp,0xc
c001c3da:	68 48 cd 02 c0       	push   0xc002cd48
c001c3df:	e8 be a1 00 00       	call   c00265a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c3e4:	83 c4 10             	add    esp,0x10
c001c3e7:	83 ec 0c             	sub    esp,0xc
c001c3ea:	68 48 cd 02 c0       	push   0xc002cd48
c001c3ef:	e8 92 a1 00 00       	call   c0026586 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	84 c0                	test   al,al
c001c3f9:	74 dc                	je     c001c3d7 <setupMultitasking(void (*)())+0x9>
c001c3fb:	83 ec 0c             	sub    esp,0xc
c001c3fe:	68 3b 07 00 00       	push   0x73b
c001c403:	e8 b8 30 ff ff       	call   c000f4c0 <malloc>
c001c408:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c40f:	89 c3                	mov    ebx,eax
c001c411:	6a 00                	push   0x0
c001c413:	68 4b 98 02 c0       	push   0xc002984b
c001c418:	6a 01                	push   0x1
c001c41a:	50                   	push   eax
c001c41b:	e8 cc fb ff ff       	call   c001bfec <Process::Process(bool, char const*, Process*, char**)>
c001c420:	83 c4 18             	add    esp,0x18
c001c423:	89 1d 54 cd 02 c0    	mov    DWORD PTR ds:0xc002cd54,ebx
c001c429:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c42f:	68 6c 99 02 c0       	push   0xc002996c
c001c434:	e8 54 62 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c439:	58                   	pop    eax
c001c43a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c440:	e8 0a 44 ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c001c445:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c44d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c453:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c456:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c460:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c466:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c46c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c476:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c480:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c48a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c490:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c496:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c4a0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c4a6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c4b0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c4b6:	5a                   	pop    edx
c001c4b7:	59                   	pop    ecx
c001c4b8:	68 47 98 02 c0       	push   0xc0029847
c001c4bd:	50                   	push   eax
c001c4be:	e8 57 42 fe ff       	call   c000071a <strcpy>
c001c4c3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c4ca:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c4ce:	83 c4 14             	add    esp,0x14
c001c4d1:	5b                   	pop    ebx
c001c4d2:	5e                   	pop    esi
c001c4d3:	e9 31 3e fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001c4d8 <schedule()>:
c001c4d8:	a1 28 cd 02 c0       	mov    eax,ds:0xc002cd28
c001c4dd:	85 c0                	test   eax,eax
c001c4df:	74 0b                	je     c001c4ec <schedule()+0x14>
c001c4e1:	c7 05 24 cd 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002cd24,0x1
c001c4eb:	c3                   	ret    
c001c4ec:	53                   	push   ebx
c001c4ed:	83 ec 14             	sub    esp,0x14
c001c4f0:	68 48 cd 02 c0       	push   0xc002cd48
c001c4f5:	e8 8c a0 00 00       	call   c0026586 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c4fa:	83 c4 10             	add    esp,0x10
c001c4fd:	84 c0                	test   al,al
c001c4ff:	75 38                	jne    c001c539 <schedule()+0x61>
c001c501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c506:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c509:	4a                   	dec    edx
c001c50a:	74 32                	je     c001c53e <schedule()+0x66>
c001c50c:	83 ec 0c             	sub    esp,0xc
c001c50f:	68 48 cd 02 c0       	push   0xc002cd48
c001c514:	e8 65 a0 00 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c519:	c7 04 24 48 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd48
c001c520:	89 c3                	mov    ebx,eax
c001c522:	e8 7b a0 00 00       	call   c00265a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c527:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c52e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c531:	e8 08 fd ff ff       	call   c001c23e <switchToThread(ThreadControlBlock*)>
c001c536:	83 c4 10             	add    esp,0x10
c001c539:	83 c4 08             	add    esp,0x8
c001c53c:	5b                   	pop    ebx
c001c53d:	c3                   	ret    
c001c53e:	83 ec 08             	sub    esp,0x8
c001c541:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c548:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c54e:	68 48 cd 02 c0       	push   0xc002cd48
c001c553:	e8 f8 a0 00 00       	call   c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c558:	83 c4 10             	add    esp,0x10
c001c55b:	eb af                	jmp    c001c50c <schedule()+0x34>

c001c55d <unlockStuff()>:
c001c55d:	a1 28 cd 02 c0       	mov    eax,ds:0xc002cd28
c001c562:	48                   	dec    eax
c001c563:	a3 28 cd 02 c0       	mov    ds:0xc002cd28,eax
c001c568:	75 09                	jne    c001c573 <unlockStuff()+0x16>
c001c56a:	a1 24 cd 02 c0       	mov    eax,ds:0xc002cd24
c001c56f:	85 c0                	test   eax,eax
c001c571:	75 05                	jne    c001c578 <unlockStuff()+0x1b>
c001c573:	e9 16 fc ff ff       	jmp    c001c18e <enableIRQs()>
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	c7 05 24 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cd24,0x0
c001c585:	e8 4e ff ff ff       	call   c001c4d8 <schedule()>
c001c58a:	83 c4 0c             	add    esp,0xc
c001c58d:	e9 fc fb ff ff       	jmp    c001c18e <enableIRQs()>

c001c592 <Semaphore::tryAcquire()>:
c001c592:	83 ec 0c             	sub    esp,0xc
c001c595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c599:	e8 26 fc ff ff       	call   c001c1c4 <lockStuff()>
c001c59e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c5a1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c5a3:	7c 0b                	jl     c001c5b0 <Semaphore::tryAcquire()+0x1e>
c001c5a5:	e8 b3 ff ff ff       	call   c001c55d <unlockStuff()>
c001c5aa:	31 c0                	xor    eax,eax
c001c5ac:	83 c4 0c             	add    esp,0xc
c001c5af:	c3                   	ret    
c001c5b0:	42                   	inc    edx
c001c5b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c5b4:	e8 a4 ff ff ff       	call   c001c55d <unlockStuff()>
c001c5b9:	b0 01                	mov    al,0x1
c001c5bb:	83 c4 0c             	add    esp,0xc
c001c5be:	c3                   	ret    
c001c5bf:	90                   	nop

c001c5c0 <Semaphore::assertLocked(char const*)>:
c001c5c0:	83 ec 0c             	sub    esp,0xc
c001c5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5cb:	e8 f4 fb ff ff       	call   c001c1c4 <lockStuff()>
c001c5d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c5d2:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001c5d5:	7c 05                	jl     c001c5dc <Semaphore::assertLocked(char const*)+0x1c>
c001c5d7:	83 c4 0c             	add    esp,0xc
c001c5da:	eb 81                	jmp    c001c55d <unlockStuff()>
c001c5dc:	83 ec 0c             	sub    esp,0xc
c001c5df:	52                   	push   edx
c001c5e0:	e8 72 cb ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001c5e5:	83 c4 10             	add    esp,0x10
c001c5e8:	83 c4 0c             	add    esp,0xc
c001c5eb:	e9 6d ff ff ff       	jmp    c001c55d <unlockStuff()>

c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001c5f0:	83 ec 0c             	sub    esp,0xc
c001c5f3:	e8 90 fb ff ff       	call   c001c188 <getIRQNestingLevel()>
c001c5f8:	83 ec 08             	sub    esp,0x8
c001c5fb:	50                   	push   eax
c001c5fc:	68 a0 99 02 c0       	push   0xc00299a0
c001c601:	e8 87 60 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c606:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c60a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c60f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c612:	e8 c1 fe ff ff       	call   c001c4d8 <schedule()>
c001c617:	e8 83 fb ff ff       	call   c001c19f <unlockScheduler()>
c001c61c:	e8 67 fb ff ff       	call   c001c188 <getIRQNestingLevel()>
c001c621:	5a                   	pop    edx
c001c622:	59                   	pop    ecx
c001c623:	50                   	push   eax
c001c624:	68 d4 99 02 c0       	push   0xc00299d4
c001c629:	e8 5f 60 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c62e:	83 c4 1c             	add    esp,0x1c
c001c631:	c3                   	ret    

c001c632 <blockTask(TaskState)>:
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c639:	e8 5f fb ff ff       	call   c001c19d <lockScheduler()>
c001c63e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c643:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c646:	e8 8d fe ff ff       	call   c001c4d8 <schedule()>
c001c64b:	83 c4 0c             	add    esp,0xc
c001c64e:	e9 4c fb ff ff       	jmp    c001c19f <unlockScheduler()>

c001c653 <waitTask(int, int*, int)>:
c001c653:	83 ec 18             	sub    esp,0x18
c001c656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c65b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c65f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001c662:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c666:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c66b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001c66e:	6a 07                	push   0x7
c001c670:	e8 bd ff ff ff       	call   c001c632 <blockTask(TaskState)>
c001c675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c67a:	83 c4 10             	add    esp,0x10
c001c67d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001c680:	85 d2                	test   edx,edx
c001c682:	74 0a                	je     c001c68e <waitTask(int, int*, int)+0x3b>
c001c684:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001c687:	89 02                	mov    DWORD PTR [edx],eax
c001c689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c68e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001c691:	83 c4 0c             	add    esp,0xc
c001c694:	c3                   	ret    

c001c695 <nanoSleepUntil(unsigned long long)>:
c001c695:	83 ec 0c             	sub    esp,0xc
c001c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6a0:	3b 05 b0 be 02 c0    	cmp    eax,DWORD PTR ds:0xc002beb0
c001c6a6:	89 d1                	mov    ecx,edx
c001c6a8:	1b 0d b4 be 02 c0    	sbb    ecx,DWORD PTR ds:0xc002beb4
c001c6ae:	73 04                	jae    c001c6b4 <nanoSleepUntil(unsigned long long)+0x1f>
c001c6b0:	83 c4 0c             	add    esp,0xc
c001c6b3:	c3                   	ret    
c001c6b4:	e8 0b fb ff ff       	call   c001c1c4 <lockStuff()>
c001c6b9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c6bf:	83 ec 08             	sub    esp,0x8
c001c6c2:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001c6c5:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001c6c8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c6ce:	68 3c cd 02 c0       	push   0xc002cd3c
c001c6d3:	e8 78 9f 00 00       	call   c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c6d8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001c6df:	e8 4e ff ff ff       	call   c001c632 <blockTask(TaskState)>
c001c6e4:	83 c4 1c             	add    esp,0x1c
c001c6e7:	e9 71 fe ff ff       	jmp    c001c55d <unlockStuff()>

c001c6ec <nanoSleep(unsigned long long)>:
c001c6ec:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c001c6f1:	8b 15 b4 be 02 c0    	mov    edx,DWORD PTR ds:0xc002beb4
c001c6f7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001c6fb:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001c6ff:	eb 94                	jmp    c001c695 <nanoSleepUntil(unsigned long long)>

c001c701 <sleep(unsigned long long)>:
c001c701:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001c709:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001c70e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001c712:	01 ca                	add    edx,ecx
c001c714:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c718:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c71c:	eb ce                	jmp    c001c6ec <nanoSleep(unsigned long long)>

c001c71e <Semaphore::acquire()>:
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c725:	e8 9a fa ff ff       	call   c001c1c4 <lockStuff()>
c001c72a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c72d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c72f:	7d 0c                	jge    c001c73d <Semaphore::acquire()+0x1f>
c001c731:	42                   	inc    edx
c001c732:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c735:	83 c4 0c             	add    esp,0xc
c001c738:	e9 20 fe ff ff       	jmp    c001c55d <unlockStuff()>
c001c73d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c743:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c74a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c74d:	85 d2                	test   edx,edx
c001c74f:	74 2a                	je     c001c77b <Semaphore::acquire()+0x5d>
c001c751:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c754:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c75a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c75d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c763:	83 ec 0c             	sub    esp,0xc
c001c766:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c769:	6a 05                	push   0x5
c001c76b:	e8 c2 fe ff ff       	call   c001c632 <blockTask(TaskState)>
c001c770:	83 c4 10             	add    esp,0x10
c001c773:	83 c4 0c             	add    esp,0xc
c001c776:	e9 e2 fd ff ff       	jmp    c001c55d <unlockStuff()>
c001c77b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c781:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c784:	eb d7                	jmp    c001c75d <Semaphore::acquire()+0x3f>

c001c786 <taskReturned>:
c001c786:	83 ec 18             	sub    esp,0x18
c001c789:	68 08 9a 02 c0       	push   0xc0029a08
c001c78e:	e8 c4 c9 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001c793:	83 c4 10             	add    esp,0x10
c001c796:	83 ec 0c             	sub    esp,0xc
c001c799:	6a 02                	push   0x2
c001c79b:	e8 92 fe ff ff       	call   c001c632 <blockTask(TaskState)>
c001c7a0:	e8 f8 f9 ff ff       	call   c001c19d <lockScheduler()>
c001c7a5:	e8 2e fd ff ff       	call   c001c4d8 <schedule()>
c001c7aa:	e8 f0 f9 ff ff       	call   c001c19f <unlockScheduler()>
c001c7af:	83 c4 10             	add    esp,0x10
c001c7b2:	eb e2                	jmp    c001c796 <taskReturned+0x10>

c001c7b4 <unblockTask(ThreadControlBlock*)>:
c001c7b4:	53                   	push   ebx
c001c7b5:	83 ec 08             	sub    esp,0x8
c001c7b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7bc:	e8 dc f9 ff ff       	call   c001c19d <lockScheduler()>
c001c7c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c7c4:	85 c0                	test   eax,eax
c001c7c6:	74 5c                	je     c001c824 <unblockTask(ThreadControlBlock*)+0x70>
c001c7c8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c7cb:	48                   	dec    eax
c001c7cc:	74 31                	je     c001c7ff <unblockTask(ThreadControlBlock*)+0x4b>
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	68 48 cd 02 c0       	push   0xc002cd48
c001c7d6:	e8 a3 9d 00 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c7db:	83 c4 10             	add    esp,0x10
c001c7de:	85 c0                	test   eax,eax
c001c7e0:	75 17                	jne    c001c7f9 <unblockTask(ThreadControlBlock*)+0x45>
c001c7e2:	eb 65                	jmp    c001c849 <unblockTask(ThreadControlBlock*)+0x95>
c001c7e4:	83 ec 08             	sub    esp,0x8
c001c7e7:	50                   	push   eax
c001c7e8:	68 48 cd 02 c0       	push   0xc002cd48
c001c7ed:	e8 66 a0 00 00       	call   c0026858 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	85 c0                	test   eax,eax
c001c7f7:	74 50                	je     c001c849 <unblockTask(ThreadControlBlock*)+0x95>
c001c7f9:	39 c3                	cmp    ebx,eax
c001c7fb:	75 e7                	jne    c001c7e4 <unblockTask(ThreadControlBlock*)+0x30>
c001c7fd:	eb 1c                	jmp    c001c81b <unblockTask(ThreadControlBlock*)+0x67>
c001c7ff:	83 ec 0c             	sub    esp,0xc
c001c802:	68 f8 9a 02 c0       	push   0xc0029af8
c001c807:	e8 81 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c80c:	c7 04 24 84 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a84
c001c813:	e8 75 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c818:	83 c4 10             	add    esp,0x10
c001c81b:	83 c4 08             	add    esp,0x8
c001c81e:	5b                   	pop    ebx
c001c81f:	e9 7b f9 ff ff       	jmp    c001c19f <unlockScheduler()>
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	68 3c 9a 02 c0       	push   0xc0029a3c
c001c82c:	e8 5c 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c831:	c7 04 24 84 9a 02 c0 	mov    DWORD PTR [esp],0xc0029a84
c001c838:	e8 50 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c83d:	83 c4 10             	add    esp,0x10
c001c840:	83 c4 08             	add    esp,0x8
c001c843:	5b                   	pop    ebx
c001c844:	e9 56 f9 ff ff       	jmp    c001c19f <unlockScheduler()>
c001c849:	83 ec 08             	sub    esp,0x8
c001c84c:	53                   	push   ebx
c001c84d:	68 48 cd 02 c0       	push   0xc002cd48
c001c852:	e8 f9 9d 00 00       	call   c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	83 c4 08             	add    esp,0x8
c001c85d:	5b                   	pop    ebx
c001c85e:	e9 3c f9 ff ff       	jmp    c001c19f <unlockScheduler()>

c001c863 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c863:	55                   	push   ebp
c001c864:	57                   	push   edi
c001c865:	56                   	push   esi
c001c866:	53                   	push   ebx
c001c867:	83 ec 1c             	sub    esp,0x1c
c001c86a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c86e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c871:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c877:	85 c9                	test   ecx,ecx
c001c879:	7e 20                	jle    c001c89b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c87b:	31 f6                	xor    esi,esi
c001c87d:	83 ec 0c             	sub    esp,0xc
c001c880:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c887:	46                   	inc    esi
c001c888:	e8 43 2c ff ff       	call   c000f4d0 <free>
c001c88d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c890:	83 c4 10             	add    esp,0x10
c001c893:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c899:	7f e2                	jg     c001c87d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c89b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c8a5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c8aa:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c8ad:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c8b0:	d3 c0                	rol    eax,cl
c001c8b2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c8b9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c8bc:	89 f7                	mov    edi,esi
c001c8be:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c8c6:	0f 85 4f 01 00 00    	jne    c001ca1b <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c8cc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c8d2:	85 c0                	test   eax,eax
c001c8d4:	0f 84 aa 00 00 00    	je     c001c984 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c8da:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c8dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c8e1:	31 c9                	xor    ecx,ecx
c001c8e3:	eb 10                	jmp    c001c8f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c8e5:	41                   	inc    ecx
c001c8e6:	83 f9 10             	cmp    ecx,0x10
c001c8e9:	0f 84 95 00 00 00    	je     c001c984 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c8ef:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c8f5:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c8fc:	d3 fa                	sar    edx,cl
c001c8fe:	83 e2 01             	and    edx,0x1
c001c901:	74 e2                	je     c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c903:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c906:	01 ca                	add    edx,ecx
c001c908:	89 d5                	mov    ebp,edx
c001c90a:	c1 e5 05             	shl    ebp,0x5
c001c90d:	01 ea                	add    edx,ebp
c001c90f:	01 d0                	add    eax,edx
c001c911:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c917:	83 fd 07             	cmp    ebp,0x7
c001c91a:	75 c9                	jne    c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c91c:	05 40 02 00 00       	add    eax,0x240
c001c921:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c924:	83 fd ff             	cmp    ebp,0xffffffff
c001c927:	0f 8c 08 01 00 00    	jl     c001ca35 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c92d:	0f 84 b9 01 00 00    	je     c001caec <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c933:	85 ed                	test   ebp,ebp
c001c935:	0f 84 a0 01 00 00    	je     c001cadb <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c93b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c93d:	75 a6                	jne    c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c93f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c945:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c949:	01 d0                	add    eax,edx
c001c94b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c94f:	83 ec 0c             	sub    esp,0xc
c001c952:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c958:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c95b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c961:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c968:	50                   	push   eax
c001c969:	e8 46 fe ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001c96e:	83 c4 10             	add    esp,0x10
c001c971:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c974:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c978:	89 f7                	mov    edi,esi
c001c97a:	41                   	inc    ecx
c001c97b:	83 f9 10             	cmp    ecx,0x10
c001c97e:	0f 85 6b ff ff ff    	jne    c001c8ef <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c984:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c98a:	85 c0                	test   eax,eax
c001c98c:	74 5d                	je     c001c9eb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c98e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c994:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c99a:	74 4f                	je     c001c9eb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c99c:	83 ec 0c             	sub    esp,0xc
c001c99f:	68 48 cd 02 c0       	push   0xc002cd48
c001c9a4:	e8 d5 9b 00 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c9a9:	c7 04 24 48 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd48
c001c9b0:	89 c7                	mov    edi,eax
c001c9b2:	e8 cf 9b 00 00       	call   c0026586 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c9b7:	83 c4 10             	add    esp,0x10
c001c9ba:	84 c0                	test   al,al
c001c9bc:	0f 84 e4 00 00 00    	je     c001caa6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c9c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c9c5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c9cb:	85 d2                	test   edx,edx
c001c9cd:	74 0f                	je     c001c9de <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c9cf:	83 ec 0c             	sub    esp,0xc
c001c9d2:	8b 02                	mov    eax,DWORD PTR [edx]
c001c9d4:	52                   	push   edx
c001c9d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c9d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c9e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c9eb:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c9f1:	85 db                	test   ebx,ebx
c001c9f3:	74 16                	je     c001ca0b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c9f5:	83 ec 0c             	sub    esp,0xc
c001c9f8:	53                   	push   ebx
c001c9f9:	e8 fe 51 ff ff       	call   c0011bfc <VAS::~VAS()>
c001c9fe:	58                   	pop    eax
c001c9ff:	5a                   	pop    edx
c001ca00:	6a 10                	push   0x10
c001ca02:	53                   	push   ebx
c001ca03:	e8 a5 5b ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	83 ec 0c             	sub    esp,0xc
c001ca0e:	68 52 98 02 c0       	push   0xc0029852
c001ca13:	e8 75 5c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	83 ec 08             	sub    esp,0x8
c001ca1e:	68 3b 07 00 00       	push   0x73b
c001ca23:	68 60 98 02 c0       	push   0xc0029860
c001ca28:	e8 60 5c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ca2d:	83 c4 2c             	add    esp,0x2c
c001ca30:	5b                   	pop    ebx
c001ca31:	5e                   	pop    esi
c001ca32:	5f                   	pop    edi
c001ca33:	5d                   	pop    ebp
c001ca34:	c3                   	ret    
c001ca35:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca39:	83 ec 0c             	sub    esp,0xc
c001ca3c:	68 3c 9b 02 c0       	push   0xc0029b3c
c001ca41:	e8 11 c7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001ca46:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ca49:	83 c4 10             	add    esp,0x10
c001ca4c:	89 f7                	mov    edi,esi
c001ca4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca52:	e9 8e fe ff ff       	jmp    c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001ca57:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ca5d:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ca63:	75 1c                	jne    c001ca81 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001ca65:	83 ec 0c             	sub    esp,0xc
c001ca68:	68 a4 9b 02 c0       	push   0xc0029ba4
c001ca6d:	e8 1b 5c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ca72:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ca79:	e8 b4 fb ff ff       	call   c001c632 <blockTask(TaskState)>
c001ca7e:	83 c4 10             	add    esp,0x10
c001ca81:	83 ec 08             	sub    esp,0x8
c001ca84:	56                   	push   esi
c001ca85:	68 48 cd 02 c0       	push   0xc002cd48
c001ca8a:	e8 c1 9b 00 00       	call   c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ca8f:	c7 04 24 48 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd48
c001ca96:	e8 e3 9a 00 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	39 f8                	cmp    eax,edi
c001caa0:	0f 84 1c ff ff ff    	je     c001c9c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001caa6:	83 ec 0c             	sub    esp,0xc
c001caa9:	68 48 cd 02 c0       	push   0xc002cd48
c001caae:	e8 cb 9a 00 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cab3:	c7 04 24 48 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd48
c001caba:	89 c6                	mov    esi,eax
c001cabc:	e8 e1 9a 00 00       	call   c00265a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cac1:	83 c4 10             	add    esp,0x10
c001cac4:	39 f3                	cmp    ebx,esi
c001cac6:	74 b9                	je     c001ca81 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cac8:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001cacb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cace:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001cad4:	75 ab                	jne    c001ca81 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cad6:	e9 7c ff ff ff       	jmp    c001ca57 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001cadb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cadf:	83 ec 0c             	sub    esp,0xc
c001cae2:	68 70 9b 02 c0       	push   0xc0029b70
c001cae7:	e9 55 ff ff ff       	jmp    c001ca41 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001caec:	8b 36                	mov    esi,DWORD PTR [esi]
c001caee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001caf2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001caf5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001caf8:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001cafe:	01 d7                	add    edi,edx
c001cb00:	89 f8                	mov    eax,edi
c001cb02:	e9 44 fe ff ff       	jmp    c001c94b <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001cb07 <cleanerTaskFunction(void*)>:
c001cb07:	53                   	push   ebx
c001cb08:	83 ec 08             	sub    esp,0x8
c001cb0b:	e8 8f f6 ff ff       	call   c001c19f <unlockScheduler()>
c001cb10:	e8 88 f6 ff ff       	call   c001c19d <lockScheduler()>
c001cb15:	80 3d 0c cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd0c,0x0
c001cb1c:	0f 85 8e 00 00 00    	jne    c001cbb0 <cleanerTaskFunction(void*)+0xa9>
c001cb22:	83 ec 0c             	sub    esp,0xc
c001cb25:	6a 02                	push   0x2
c001cb27:	e8 c4 fa ff ff       	call   c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cb2c:	83 c4 10             	add    esp,0x10
c001cb2f:	c6 05 0c cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd0c,0x0
c001cb36:	e8 89 f6 ff ff       	call   c001c1c4 <lockStuff()>
c001cb3b:	e8 5d f6 ff ff       	call   c001c19d <lockScheduler()>
c001cb40:	83 ec 0c             	sub    esp,0xc
c001cb43:	68 30 cd 02 c0       	push   0xc002cd30
c001cb48:	e8 39 9a 00 00       	call   c0026586 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cb4d:	83 c4 10             	add    esp,0x10
c001cb50:	84 c0                	test   al,al
c001cb52:	75 40                	jne    c001cb94 <cleanerTaskFunction(void*)+0x8d>
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	68 30 cd 02 c0       	push   0xc002cd30
c001cb5c:	e8 1d 9a 00 00       	call   c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cb61:	c7 04 24 30 cd 02 c0 	mov    DWORD PTR [esp],0xc002cd30
c001cb68:	89 c3                	mov    ebx,eax
c001cb6a:	e8 33 9a 00 00       	call   c00265a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cb6f:	c7 04 24 76 98 02 c0 	mov    DWORD PTR [esp],0xc0029876
c001cb76:	e8 12 5b ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cb7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb7e:	e8 e0 fc ff ff       	call   c001c863 <cleanupTerminatedTask(ThreadControlBlock*)>
c001cb83:	c7 04 24 8f 98 02 c0 	mov    DWORD PTR [esp],0xc002988f
c001cb8a:	e8 fe 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	eb ac                	jmp    c001cb40 <cleanerTaskFunction(void*)+0x39>
c001cb94:	e8 06 f6 ff ff       	call   c001c19f <unlockScheduler()>
c001cb99:	e8 bf f9 ff ff       	call   c001c55d <unlockStuff()>
c001cb9e:	e8 fa f5 ff ff       	call   c001c19d <lockScheduler()>
c001cba3:	80 3d 0c cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd0c,0x0
c001cbaa:	0f 84 72 ff ff ff    	je     c001cb22 <cleanerTaskFunction(void*)+0x1b>
c001cbb0:	e8 ea f5 ff ff       	call   c001c19f <unlockScheduler()>
c001cbb5:	e9 75 ff ff ff       	jmp    c001cb2f <cleanerTaskFunction(void*)+0x28>

c001cbba <terminateTask(int)>:
c001cbba:	83 ec 14             	sub    esp,0x14
c001cbbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cbc5:	83 c0 0c             	add    eax,0xc
c001cbc8:	50                   	push   eax
c001cbc9:	68 cc 9b 02 c0       	push   0xc0029bcc
c001cbce:	e8 ba 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cbd3:	e8 ec f5 ff ff       	call   c001c1c4 <lockStuff()>
c001cbd8:	e8 c0 f5 ff ff       	call   c001c19d <lockScheduler()>
c001cbdd:	c7 04 24 a2 98 02 c0 	mov    DWORD PTR [esp],0xc00298a2
c001cbe4:	e8 a4 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cbe9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cbed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbf2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001cbf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbfa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cbfd:	5a                   	pop    edx
c001cbfe:	59                   	pop    ecx
c001cbff:	50                   	push   eax
c001cc00:	68 30 cd 02 c0       	push   0xc002cd30
c001cc05:	e8 46 9a 00 00       	call   c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cc0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc0f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001cc16:	c7 04 24 bc 98 02 c0 	mov    DWORD PTR [esp],0xc00298bc
c001cc1d:	e8 6b 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	a1 08 cd 02 c0       	mov    eax,ds:0xc002cd08
c001cc2a:	85 c0                	test   eax,eax
c001cc2c:	74 5a                	je     c001cc88 <terminateTask(int)+0xce>
c001cc2e:	83 ec 0c             	sub    esp,0xc
c001cc31:	68 d6 98 02 c0       	push   0xc00298d6
c001cc36:	e8 52 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc3b:	58                   	pop    eax
c001cc3c:	c6 05 0c cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd0c,0x1
c001cc43:	ff 35 08 cd 02 c0    	push   DWORD PTR ds:0xc002cd08
c001cc49:	e8 66 fb ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001cc4e:	c7 04 24 f0 98 02 c0 	mov    DWORD PTR [esp],0xc00298f0
c001cc55:	e8 33 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc5a:	83 c4 10             	add    esp,0x10
c001cc5d:	e8 3d f5 ff ff       	call   c001c19f <unlockScheduler()>
c001cc62:	e8 f6 f8 ff ff       	call   c001c55d <unlockStuff()>
c001cc67:	83 ec 0c             	sub    esp,0xc
c001cc6a:	68 28 99 02 c0       	push   0xc0029928
c001cc6f:	e8 19 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc74:	83 c4 10             	add    esp,0x10
c001cc77:	e8 21 f5 ff ff       	call   c001c19d <lockScheduler()>
c001cc7c:	e8 57 f8 ff ff       	call   c001c4d8 <schedule()>
c001cc81:	e8 19 f5 ff ff       	call   c001c19f <unlockScheduler()>
c001cc86:	eb ef                	jmp    c001cc77 <terminateTask(int)+0xbd>
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	68 0a 99 02 c0       	push   0xc002990a
c001cc90:	e8 f8 59 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	eb c3                	jmp    c001cc5d <terminateTask(int)+0xa3>

c001cc9a <Thr::terminateFromIRQ(int)>:
c001cc9a:	83 ec 18             	sub    esp,0x18
c001cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca1:	e8 14 ff ff ff       	call   c001cbba <terminateTask(int)>

c001cca6 <Semaphore::release()>:
c001cca6:	83 ec 0c             	sub    esp,0xc
c001cca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccad:	e8 12 f5 ff ff       	call   c001c1c4 <lockStuff()>
c001ccb2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ccb5:	85 d2                	test   edx,edx
c001ccb7:	74 1a                	je     c001ccd3 <Semaphore::release()+0x2d>
c001ccb9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ccc2:	52                   	push   edx
c001ccc3:	e8 ec fa ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001ccc8:	83 c4 10             	add    esp,0x10
c001cccb:	83 c4 0c             	add    esp,0xc
c001ccce:	e9 8a f8 ff ff       	jmp    c001c55d <unlockStuff()>
c001ccd3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ccd6:	83 c4 0c             	add    esp,0xc
c001ccd9:	e9 7f f8 ff ff       	jmp    c001c55d <unlockStuff()>

c001ccde <__static_initialization_and_destruction_0(int, int)>:
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001cce6:	0f 85 88 00 00 00    	jne    c001cd74 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ccec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ccf4:	75 7e                	jne    c001cd74 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ccf6:	83 ec 0c             	sub    esp,0xc
c001ccf9:	68 48 cd 02 c0       	push   0xc002cd48
c001ccfe:	e8 fd 9a 00 00       	call   c0026800 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	83 ec 04             	sub    esp,0x4
c001cd09:	68 d8 a7 02 c0       	push   0xc002a7d8
c001cd0e:	68 48 cd 02 c0       	push   0xc002cd48
c001cd13:	68 c0 67 02 c0       	push   0xc00267c0
c001cd18:	e8 0a 58 ff ff       	call   c0012527 <__cxa_atexit>
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	83 ec 0c             	sub    esp,0xc
c001cd23:	68 3c cd 02 c0       	push   0xc002cd3c
c001cd28:	e8 d3 9a 00 00       	call   c0026800 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cd2d:	83 c4 10             	add    esp,0x10
c001cd30:	83 ec 04             	sub    esp,0x4
c001cd33:	68 d8 a7 02 c0       	push   0xc002a7d8
c001cd38:	68 3c cd 02 c0       	push   0xc002cd3c
c001cd3d:	68 c0 67 02 c0       	push   0xc00267c0
c001cd42:	e8 e0 57 ff ff       	call   c0012527 <__cxa_atexit>
c001cd47:	83 c4 10             	add    esp,0x10
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	68 30 cd 02 c0       	push   0xc002cd30
c001cd52:	e8 a9 9a 00 00       	call   c0026800 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cd57:	83 c4 10             	add    esp,0x10
c001cd5a:	83 ec 04             	sub    esp,0x4
c001cd5d:	68 d8 a7 02 c0       	push   0xc002a7d8
c001cd62:	68 30 cd 02 c0       	push   0xc002cd30
c001cd67:	68 c0 67 02 c0       	push   0xc00267c0
c001cd6c:	e8 b6 57 ff ff       	call   c0012527 <__cxa_atexit>
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	90                   	nop
c001cd75:	83 c4 0c             	add    esp,0xc
c001cd78:	c3                   	ret    

c001cd79 <_GLOBAL__sub_I_kernelProcess>:
c001cd79:	83 ec 0c             	sub    esp,0xc
c001cd7c:	83 ec 08             	sub    esp,0x8
c001cd7f:	68 ff ff 00 00       	push   0xffff
c001cd84:	6a 01                	push   0x1
c001cd86:	e8 53 ff ff ff       	call   c001ccde <__static_initialization_and_destruction_0(int, int)>
c001cd8b:	83 c4 10             	add    esp,0x10
c001cd8e:	83 c4 0c             	add    esp,0xc
c001cd91:	c3                   	ret    

c001cd92 <Vm::inbv(unsigned short)>:
c001cd92:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd96:	ec                   	in     al,dx
c001cd97:	c3                   	ret    

c001cd98 <Vm::outbv(unsigned short, unsigned char)>:
c001cd98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cda0:	ee                   	out    dx,al
c001cda1:	c3                   	ret    

c001cda2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001cda2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cda7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cdac:	c1 e0 04             	shl    eax,0x4
c001cdaf:	01 d0                	add    eax,edx
c001cdb1:	c3                   	ret    

c001cdb2 <Vm::getSegment(unsigned int)>:
c001cdb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdb6:	c1 e8 10             	shr    eax,0x10
c001cdb9:	c3                   	ret    

c001cdba <Vm::getOffset(unsigned int)>:
c001cdba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdbe:	c3                   	ret    

c001cdbf <Vm::mainloop2()>:
c001cdbf:	83 ec 0c             	sub    esp,0xc
c001cdc2:	e8 d6 f3 ff ff       	call   c001c19d <lockScheduler()>
c001cdc7:	83 ec 0c             	sub    esp,0xc
c001cdca:	c6 05 75 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd75,0x1
c001cdd1:	6a 02                	push   0x2
c001cdd3:	e8 18 f8 ff ff       	call   c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cdd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cddd:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001cde1:	52                   	push   edx
c001cde2:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001cde6:	52                   	push   edx
c001cde7:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001cdeb:	52                   	push   edx
c001cdec:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001cdf0:	50                   	push   eax
c001cdf1:	e8 b9 34 fe ff       	call   c00002af <goToVM86>
c001cdf6:	83 c4 2c             	add    esp,0x2c
c001cdf9:	c3                   	ret    

c001cdfa <Vm::mainVm8086Loop(void*)>:
c001cdfa:	83 ec 0c             	sub    esp,0xc
c001cdfd:	e8 9d f3 ff ff       	call   c001c19f <unlockScheduler()>
c001ce02:	83 c4 0c             	add    esp,0xc
c001ce05:	eb b8                	jmp    c001cdbf <Vm::mainloop2()>

c001ce07 <Vm::mainloop3(unsigned long)>:
c001ce07:	53                   	push   ebx
c001ce08:	83 ec 08             	sub    esp,0x8
c001ce0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce0f:	e8 89 f3 ff ff       	call   c001c19d <lockScheduler()>
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	89 1d 70 cd 02 c0    	mov    DWORD PTR ds:0xc002cd70,ebx
c001ce1d:	6a 02                	push   0x2
c001ce1f:	c6 05 74 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cd74,0x1
c001ce26:	e8 c5 f7 ff ff       	call   c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ce2b:	83 c4 18             	add    esp,0x18
c001ce2e:	5b                   	pop    ebx
c001ce2f:	eb 8e                	jmp    c001cdbf <Vm::mainloop2()>

c001ce31 <Vm::initialise8086()>:
c001ce31:	83 ec 0c             	sub    esp,0xc
c001ce34:	68 80 00 00 00       	push   0x80
c001ce39:	6a 00                	push   0x0
c001ce3b:	68 fa cd 01 c0       	push   0xc001cdfa
c001ce40:	ff 35 54 cd 02 c0    	push   DWORD PTR ds:0xc002cd54
c001ce46:	e8 83 f4 ff ff       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c001ce4b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ce52:	a3 78 cd 02 c0       	mov    ds:0xc002cd78,eax
c001ce57:	68 00 01 00 00       	push   0x100
c001ce5c:	a1 54 cd 02 c0       	mov    eax,ds:0xc002cd54
c001ce61:	6a 00                	push   0x0
c001ce63:	6a 00                	push   0x0
c001ce65:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce6b:	e8 ec 51 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ce70:	83 c4 2c             	add    esp,0x2c
c001ce73:	c3                   	ret    

c001ce74 <Vm::finish8086()>:
c001ce74:	53                   	push   ebx
c001ce75:	83 ec 08             	sub    esp,0x8
c001ce78:	e8 20 f3 ff ff       	call   c001c19d <lockScheduler()>
c001ce7d:	80 3d 74 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cd74,0x0
c001ce84:	75 0c                	jne    c001ce92 <Vm::finish8086()+0x1e>
c001ce86:	e8 4d f6 ff ff       	call   c001c4d8 <schedule()>
c001ce8b:	e8 0f f3 ff ff       	call   c001c19f <unlockScheduler()>
c001ce90:	eb e6                	jmp    c001ce78 <Vm::finish8086()+0x4>
c001ce92:	83 ec 0c             	sub    esp,0xc
c001ce95:	8b 1d 70 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd70
c001ce9b:	ff 35 78 cd 02 c0    	push   DWORD PTR ds:0xc002cd78
c001cea1:	c6 05 74 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd74,0x0
c001cea8:	e8 07 f9 ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001cead:	e8 ed f2 ff ff       	call   c001c19f <unlockScheduler()>
c001ceb2:	89 d8                	mov    eax,ebx
c001ceb4:	83 c4 18             	add    esp,0x18
c001ceb7:	5b                   	pop    ebx
c001ceb8:	c3                   	ret    

c001ceb9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ceb9:	55                   	push   ebp
c001ceba:	57                   	push   edi
c001cebb:	56                   	push   esi
c001cebc:	53                   	push   ebx
c001cebd:	83 ec 2c             	sub    esp,0x2c
c001cec0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cec4:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001cec8:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001cecc:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ced0:	e8 c8 f2 ff ff       	call   c001c19d <lockScheduler()>
c001ced5:	a0 75 cd 02 c0       	mov    al,ds:0xc002cd75
c001ceda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cede:	84 c0                	test   al,al
c001cee0:	75 0c                	jne    c001ceee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001cee2:	e8 f1 f5 ff ff       	call   c001c4d8 <schedule()>
c001cee7:	e8 b3 f2 ff ff       	call   c001c19f <unlockScheduler()>
c001ceec:	eb e2                	jmp    c001ced0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ceee:	a1 78 cd 02 c0       	mov    eax,ds:0xc002cd78
c001cef3:	83 ec 0c             	sub    esp,0xc
c001cef6:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001cefa:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001cefe:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001cf02:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001cf06:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001cf0a:	68 14 01 00 00       	push   0x114
c001cf0f:	e8 ac 25 ff ff       	call   c000f4c0 <malloc>
c001cf14:	83 c4 0c             	add    esp,0xc
c001cf17:	89 c7                	mov    edi,eax
c001cf19:	ff 35 54 cd 02 c0    	push   DWORD PTR ds:0xc002cd54
c001cf1f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cf23:	50                   	push   eax
c001cf24:	e8 93 5c ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001cf29:	83 c4 10             	add    esp,0x10
c001cf2c:	85 ff                	test   edi,edi
c001cf2e:	75 0a                	jne    c001cf3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001cf30:	83 ec 0c             	sub    esp,0xc
c001cf33:	68 eb 9b 02 c0       	push   0xc0029beb
c001cf38:	eb 27                	jmp    c001cf61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c001cf3a:	50                   	push   eax
c001cf3b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001cf3f:	50                   	push   eax
c001cf40:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cf44:	50                   	push   eax
c001cf45:	57                   	push   edi
c001cf46:	e8 81 5f ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001cf4b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001cf50:	83 c4 10             	add    esp,0x10
c001cf53:	89 e8                	mov    eax,ebp
c001cf55:	84 c0                	test   al,al
c001cf57:	74 19                	je     c001cf72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xb9>
c001cf59:	83 ec 0c             	sub    esp,0xc
c001cf5c:	68 ff 9b 02 c0       	push   0xc0029bff
c001cf61:	e8 f1 c1 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001cf66:	31 ed                	xor    ebp,ebp
c001cf68:	e8 32 f2 ff ff       	call   c001c19f <unlockScheduler()>
c001cf6d:	83 c4 10             	add    esp,0x10
c001cf70:	eb 75                	jmp    c001cfe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12e>
c001cf72:	50                   	push   eax
c001cf73:	50                   	push   eax
c001cf74:	6a 01                	push   0x1
c001cf76:	57                   	push   edi
c001cf77:	e8 a4 5c ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001cf7c:	83 c4 10             	add    esp,0x10
c001cf7f:	85 c0                	test   eax,eax
c001cf81:	74 17                	je     c001cf9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe1>
c001cf83:	83 ec 0c             	sub    esp,0xc
c001cf86:	68 18 9c 02 c0       	push   0xc0029c18
c001cf8b:	e8 c7 c1 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001cf90:	e8 0a f2 ff ff       	call   c001c19f <unlockScheduler()>
c001cf95:	83 c4 10             	add    esp,0x10
c001cf98:	eb 4d                	jmp    c001cfe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12e>
c001cf9a:	0f b7 f6             	movzx  esi,si
c001cf9d:	50                   	push   eax
c001cf9e:	0f b7 db             	movzx  ebx,bx
c001cfa1:	50                   	push   eax
c001cfa2:	56                   	push   esi
c001cfa3:	53                   	push   ebx
c001cfa4:	e8 f9 fd ff ff       	call   c001cda2 <Vm::realToLinear(unsigned short, unsigned short)>
c001cfa9:	5a                   	pop    edx
c001cfaa:	8b 17                	mov    edx,DWORD PTR [edi]
c001cfac:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001cfb0:	51                   	push   ecx
c001cfb1:	50                   	push   eax
c001cfb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cfb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001cfba:	57                   	push   edi
c001cfbb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cfbe:	83 c4 14             	add    esp,0x14
c001cfc1:	57                   	push   edi
c001cfc2:	e8 b7 5c ff ff       	call   c0012c7e <File::close()>
c001cfc7:	c6 05 75 cd 02 c0 00 	mov    BYTE PTR ds:0xc002cd75,0x0
c001cfce:	e8 cc f1 ff ff       	call   c001c19f <unlockScheduler()>
c001cfd3:	59                   	pop    ecx
c001cfd4:	ff 35 78 cd 02 c0    	push   DWORD PTR ds:0xc002cd78
c001cfda:	e8 d5 f7 ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001cfdf:	83 c4 10             	add    esp,0x10
c001cfe2:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cfe7:	83 c4 2c             	add    esp,0x2c
c001cfea:	89 e8                	mov    eax,ebp
c001cfec:	5b                   	pop    ebx
c001cfed:	5e                   	pop    esi
c001cfee:	5f                   	pop    edi
c001cfef:	5d                   	pop    ebp
c001cff0:	c3                   	ret    

c001cff1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001cff1:	57                   	push   edi
c001cff2:	56                   	push   esi
c001cff3:	53                   	push   ebx
c001cff4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cffc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d000:	83 e8 06             	sub    eax,0x6
c001d003:	0f b7 c0             	movzx  eax,ax
c001d006:	50                   	push   eax
c001d007:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001d00c:	50                   	push   eax
c001d00d:	e8 90 fd ff ff       	call   c001cda2 <Vm::realToLinear(unsigned short, unsigned short)>
c001d012:	5a                   	pop    edx
c001d013:	5e                   	pop    esi
c001d014:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001d017:	8d 56 fa             	lea    edx,[esi-0x6]
c001d01a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d020:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001d023:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001d026:	83 c2 02             	add    edx,0x2
c001d029:	66 89 10             	mov    WORD PTR [eax],dx
c001d02c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001d02f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001d033:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001d036:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001d03a:	89 d6                	mov    esi,edx
c001d03c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001d042:	66 81 e6 ff fd       	and    si,0xfdff
c001d047:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001d04b:	74 07                	je     c001d054 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001d04d:	89 d6                	mov    esi,edx
c001d04f:	66 81 ce 00 02       	or     si,0x200
c001d054:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001d058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d05d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d061:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001d069:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001d06c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001d074:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d077:	5b                   	pop    ebx
c001d078:	5e                   	pop    esi
c001d079:	5f                   	pop    edi
c001d07a:	c3                   	ret    

c001d07b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001d07b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d080:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d085:	c1 e0 04             	shl    eax,0x4
c001d088:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001d08b:	c3                   	ret    

c001d08c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001d08c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d091:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d096:	c1 e0 04             	shl    eax,0x4
c001d099:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001d09d:	c3                   	ret    

c001d09e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001d09e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d0a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d0a8:	c1 e0 04             	shl    eax,0x4
c001d0ab:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001d0ae:	c3                   	ret    

c001d0af <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001d0af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d0b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d0b9:	c1 e0 04             	shl    eax,0x4
c001d0bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0c0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001d0c3:	c3                   	ret    

c001d0c4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001d0c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d0c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d0ce:	c1 e0 04             	shl    eax,0x4
c001d0d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0d5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001d0d9:	c3                   	ret    

c001d0da <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001d0da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d0df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d0e4:	c1 e0 04             	shl    eax,0x4
c001d0e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0eb:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001d0ee:	c3                   	ret    

c001d0ef <Vm::faultHandler(regs*)>:
c001d0ef:	55                   	push   ebp
c001d0f0:	57                   	push   edi
c001d0f1:	56                   	push   esi
c001d0f2:	53                   	push   ebx
c001d0f3:	83 ec 1c             	sub    esp,0x1c
c001d0f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d0fa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001d0fd:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001d101:	0f b7 f0             	movzx  esi,ax
c001d104:	52                   	push   edx
c001d105:	0f b7 c0             	movzx  eax,ax
c001d108:	50                   	push   eax
c001d109:	e8 94 fc ff ff       	call   c001cda2 <Vm::realToLinear(unsigned short, unsigned short)>
c001d10e:	5a                   	pop    edx
c001d10f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001d112:	59                   	pop    ecx
c001d113:	89 c7                	mov    edi,eax
c001d115:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d118:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d11c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d121:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d125:	0f b7 c5             	movzx  eax,bp
c001d128:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d12c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001d130:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d134:	e8 69 fc ff ff       	call   c001cda2 <Vm::realToLinear(unsigned short, unsigned short)>
c001d139:	5a                   	pop    edx
c001d13a:	59                   	pop    ecx
c001d13b:	b1 06                	mov    cl,0x6
c001d13d:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001d142:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001d147:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001d14a:	80 fa 9d             	cmp    dl,0x9d
c001d14d:	0f 84 1d 02 00 00    	je     c001d370 <Vm::faultHandler(regs*)+0x281>
c001d153:	0f 87 8e 00 00 00    	ja     c001d1e7 <Vm::faultHandler(regs*)+0xf8>
c001d159:	80 fa 66             	cmp    dl,0x66
c001d15c:	0f 84 89 01 00 00    	je     c001d2eb <Vm::faultHandler(regs*)+0x1fc>
c001d162:	77 44                	ja     c001d1a8 <Vm::faultHandler(regs*)+0xb9>
c001d164:	80 fa 36             	cmp    dl,0x36
c001d167:	0f 84 74 01 00 00    	je     c001d2e1 <Vm::faultHandler(regs*)+0x1f2>
c001d16d:	77 1a                	ja     c001d189 <Vm::faultHandler(regs*)+0x9a>
c001d16f:	80 fa 26             	cmp    dl,0x26
c001d172:	0f 84 4b 01 00 00    	je     c001d2c3 <Vm::faultHandler(regs*)+0x1d4>
c001d178:	80 fa 2e             	cmp    dl,0x2e
c001d17b:	0f 85 4a 05 00 00    	jne    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d181:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d184:	31 c9                	xor    ecx,ecx
c001d186:	47                   	inc    edi
c001d187:	eb be                	jmp    c001d147 <Vm::faultHandler(regs*)+0x58>
c001d189:	80 fa 64             	cmp    dl,0x64
c001d18c:	0f 84 3b 01 00 00    	je     c001d2cd <Vm::faultHandler(regs*)+0x1de>
c001d192:	0f 87 3f 01 00 00    	ja     c001d2d7 <Vm::faultHandler(regs*)+0x1e8>
c001d198:	80 fa 3e             	cmp    dl,0x3e
c001d19b:	0f 85 2a 05 00 00    	jne    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d1a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d1a4:	b1 01                	mov    cl,0x1
c001d1a6:	eb de                	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d1a8:	80 fa 6d             	cmp    dl,0x6d
c001d1ab:	0f 84 bf 02 00 00    	je     c001d470 <Vm::faultHandler(regs*)+0x381>
c001d1b1:	77 17                	ja     c001d1ca <Vm::faultHandler(regs*)+0xdb>
c001d1b3:	80 fa 67             	cmp    dl,0x67
c001d1b6:	0f 84 3c 01 00 00    	je     c001d2f8 <Vm::faultHandler(regs*)+0x209>
c001d1bc:	80 fa 6c             	cmp    dl,0x6c
c001d1bf:	0f 84 5d 02 00 00    	je     c001d422 <Vm::faultHandler(regs*)+0x333>
c001d1c5:	e9 01 05 00 00       	jmp    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d1ca:	80 fa 6f             	cmp    dl,0x6f
c001d1cd:	0f 84 8b 03 00 00    	je     c001d55e <Vm::faultHandler(regs*)+0x46f>
c001d1d3:	0f 82 0f 03 00 00    	jb     c001d4e8 <Vm::faultHandler(regs*)+0x3f9>
c001d1d9:	80 fa 9c             	cmp    dl,0x9c
c001d1dc:	0f 84 23 01 00 00    	je     c001d305 <Vm::faultHandler(regs*)+0x216>
c001d1e2:	e9 e4 04 00 00       	jmp    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d1e7:	80 fa ec             	cmp    dl,0xec
c001d1ea:	0f 84 7f 04 00 00    	je     c001d66f <Vm::faultHandler(regs*)+0x580>
c001d1f0:	77 7b                	ja     c001d26d <Vm::faultHandler(regs*)+0x17e>
c001d1f2:	80 fa e4             	cmp    dl,0xe4
c001d1f5:	0f 84 fe 03 00 00    	je     c001d5f9 <Vm::faultHandler(regs*)+0x50a>
c001d1fb:	77 53                	ja     c001d250 <Vm::faultHandler(regs*)+0x161>
c001d1fd:	80 fa cd             	cmp    dl,0xcd
c001d200:	0f 84 cd 01 00 00    	je     c001d3d3 <Vm::faultHandler(regs*)+0x2e4>
c001d206:	80 fa cf             	cmp    dl,0xcf
c001d209:	0f 85 bc 04 00 00    	jne    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d20f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d212:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001d215:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001d219:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001d21c:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001d220:	81 ca 00 02 02 00    	or     edx,0x20200
c001d226:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d229:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001d22d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d233:	66 c1 e8 09          	shr    ax,0x9
c001d237:	83 e0 01             	and    eax,0x1
c001d23a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d23d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d240:	83 c0 06             	add    eax,0x6
c001d243:	25 ff ff 00 00       	and    eax,0xffff
c001d248:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d24b:	e9 77 04 00 00       	jmp    c001d6c7 <Vm::faultHandler(regs*)+0x5d8>
c001d250:	80 fa e6             	cmp    dl,0xe6
c001d253:	0f 84 ea 03 00 00    	je     c001d643 <Vm::faultHandler(regs*)+0x554>
c001d259:	0f 82 b6 03 00 00    	jb     c001d615 <Vm::faultHandler(regs*)+0x526>
c001d25f:	80 fa e7             	cmp    dl,0xe7
c001d262:	0f 84 f2 03 00 00    	je     c001d65a <Vm::faultHandler(regs*)+0x56b>
c001d268:	e9 5e 04 00 00       	jmp    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d26d:	80 fa ef             	cmp    dl,0xef
c001d270:	0f 84 3c 04 00 00    	je     c001d6b2 <Vm::faultHandler(regs*)+0x5c3>
c001d276:	77 28                	ja     c001d2a0 <Vm::faultHandler(regs*)+0x1b1>
c001d278:	80 fa ed             	cmp    dl,0xed
c001d27b:	0f 84 0a 04 00 00    	je     c001d68b <Vm::faultHandler(regs*)+0x59c>
c001d281:	80 fa ee             	cmp    dl,0xee
c001d284:	0f 85 41 04 00 00    	jne    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d28a:	50                   	push   eax
c001d28b:	50                   	push   eax
c001d28c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d290:	50                   	push   eax
c001d291:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d295:	50                   	push   eax
c001d296:	e8 fd fa ff ff       	call   c001cd98 <Vm::outbv(unsigned short, unsigned char)>
c001d29b:	e9 0a 04 00 00       	jmp    c001d6aa <Vm::faultHandler(regs*)+0x5bb>
c001d2a0:	80 fa fa             	cmp    dl,0xfa
c001d2a3:	0f 84 5d 01 00 00    	je     c001d406 <Vm::faultHandler(regs*)+0x317>
c001d2a9:	80 fa fb             	cmp    dl,0xfb
c001d2ac:	0f 84 62 01 00 00    	je     c001d414 <Vm::faultHandler(regs*)+0x325>
c001d2b2:	80 fa f3             	cmp    dl,0xf3
c001d2b5:	0f 85 10 04 00 00    	jne    c001d6cb <Vm::faultHandler(regs*)+0x5dc>
c001d2bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2be:	e9 c3 fe ff ff       	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d2c3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2c6:	b1 02                	mov    cl,0x2
c001d2c8:	e9 b9 fe ff ff       	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d2cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2d0:	b1 03                	mov    cl,0x3
c001d2d2:	e9 af fe ff ff       	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d2d7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2da:	b1 04                	mov    cl,0x4
c001d2dc:	e9 a5 fe ff ff       	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d2e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2e4:	b1 05                	mov    cl,0x5
c001d2e6:	e9 9b fe ff ff       	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d2eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2ee:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001d2f3:	e9 8e fe ff ff       	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d2f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d2fb:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001d300:	e9 81 fe ff ff       	jmp    c001d186 <Vm::faultHandler(regs*)+0x97>
c001d305:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d308:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d30c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d311:	74 30                	je     c001d343 <Vm::faultHandler(regs*)+0x254>
c001d313:	83 e9 04             	sub    ecx,0x4
c001d316:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d31c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d322:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d325:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d328:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d32e:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d332:	0f 84 8c 03 00 00    	je     c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d338:	80 ce 02             	or     dh,0x2
c001d33b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d33e:	e9 81 03 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d343:	83 e9 02             	sub    ecx,0x2
c001d346:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d34c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d34f:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d353:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d359:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d35d:	74 05                	je     c001d364 <Vm::faultHandler(regs*)+0x275>
c001d35f:	80 ce 02             	or     dh,0x2
c001d362:	eb 03                	jmp    c001d367 <Vm::faultHandler(regs*)+0x278>
c001d364:	80 e6 fd             	and    dh,0xfd
c001d367:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d36b:	e9 54 03 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d370:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d375:	74 2a                	je     c001d3a1 <Vm::faultHandler(regs*)+0x2b2>
c001d377:	8b 10                	mov    edx,DWORD PTR [eax]
c001d379:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d37f:	81 ca 00 02 02 00    	or     edx,0x20200
c001d385:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d388:	8b 00                	mov    eax,DWORD PTR [eax]
c001d38a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d390:	c1 e8 09             	shr    eax,0x9
c001d393:	83 e0 01             	and    eax,0x1
c001d396:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d399:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d39c:	83 c0 04             	add    eax,0x4
c001d39f:	eb 25                	jmp    c001d3c6 <Vm::faultHandler(regs*)+0x2d7>
c001d3a1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d3a4:	81 ca 00 02 02 00    	or     edx,0x20200
c001d3aa:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d3ad:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d3b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d3b6:	66 c1 e8 09          	shr    ax,0x9
c001d3ba:	83 e0 01             	and    eax,0x1
c001d3bd:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d3c0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d3c3:	83 c0 02             	add    eax,0x2
c001d3c6:	25 ff ff 00 00       	and    eax,0xffff
c001d3cb:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d3ce:	e9 f1 02 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d3d3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d3d7:	3c ee                	cmp    al,0xee
c001d3d9:	75 10                	jne    c001d3eb <Vm::faultHandler(regs*)+0x2fc>
c001d3db:	83 ec 0c             	sub    esp,0xc
c001d3de:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001d3e1:	e8 21 fa ff ff       	call   c001ce07 <Vm::mainloop3(unsigned long)>
c001d3e6:	e9 c2 02 00 00       	jmp    c001d6ad <Vm::faultHandler(regs*)+0x5be>
c001d3eb:	83 ec 0c             	sub    esp,0xc
c001d3ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3f6:	57                   	push   edi
c001d3f7:	50                   	push   eax
c001d3f8:	53                   	push   ebx
c001d3f9:	e8 f3 fb ff ff       	call   c001cff1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d3fe:	83 c4 20             	add    esp,0x20
c001d401:	e9 c1 02 00 00       	jmp    c001d6c7 <Vm::faultHandler(regs*)+0x5d8>
c001d406:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d40b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d40f:	e9 b0 02 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d419:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d41d:	e9 a2 02 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d422:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d427:	74 0d                	je     c001d436 <Vm::faultHandler(regs*)+0x347>
c001d429:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001d430:	0f 87 e9 02 00 00    	ja     c001d71f <Vm::faultHandler(regs*)+0x630>
c001d436:	83 ec 0c             	sub    esp,0xc
c001d439:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001d43c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d440:	50                   	push   eax
c001d441:	e8 4c f9 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d446:	83 c4 0c             	add    esp,0xc
c001d449:	0f b6 c0             	movzx  eax,al
c001d44c:	0f b7 c9             	movzx  ecx,cx
c001d44f:	50                   	push   eax
c001d450:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001d454:	50                   	push   eax
c001d455:	51                   	push   ecx
c001d456:	e8 54 fc ff ff       	call   c001d0af <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d45b:	83 c4 10             	add    esp,0x10
c001d45e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d461:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d465:	74 03                	je     c001d46a <Vm::faultHandler(regs*)+0x37b>
c001d467:	48                   	dec    eax
c001d468:	eb 01                	jmp    c001d46b <Vm::faultHandler(regs*)+0x37c>
c001d46a:	40                   	inc    eax
c001d46b:	0f b7 c0             	movzx  eax,ax
c001d46e:	eb 70                	jmp    c001d4e0 <Vm::faultHandler(regs*)+0x3f1>
c001d470:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d473:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001d476:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d47b:	74 0c                	je     c001d489 <Vm::faultHandler(regs*)+0x39a>
c001d47d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d483:	0f 87 96 02 00 00    	ja     c001d71f <Vm::faultHandler(regs*)+0x630>
c001d489:	0f b7 c9             	movzx  ecx,cx
c001d48c:	0f b7 f6             	movzx  esi,si
c001d48f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d492:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d497:	74 20                	je     c001d4b9 <Vm::faultHandler(regs*)+0x3ca>
c001d499:	ed                   	in     eax,dx
c001d49a:	55                   	push   ebp
c001d49b:	50                   	push   eax
c001d49c:	51                   	push   ecx
c001d49d:	56                   	push   esi
c001d49e:	e8 37 fc ff ff       	call   c001d0da <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d4a3:	83 c4 10             	add    esp,0x10
c001d4a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d4a9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d4ad:	74 05                	je     c001d4b4 <Vm::faultHandler(regs*)+0x3c5>
c001d4af:	83 e8 04             	sub    eax,0x4
c001d4b2:	eb 27                	jmp    c001d4db <Vm::faultHandler(regs*)+0x3ec>
c001d4b4:	83 c0 04             	add    eax,0x4
c001d4b7:	eb 22                	jmp    c001d4db <Vm::faultHandler(regs*)+0x3ec>
c001d4b9:	66 ed                	in     ax,dx
c001d4bb:	0f b7 c0             	movzx  eax,ax
c001d4be:	57                   	push   edi
c001d4bf:	50                   	push   eax
c001d4c0:	51                   	push   ecx
c001d4c1:	56                   	push   esi
c001d4c2:	e8 fd fb ff ff       	call   c001d0c4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d4c7:	83 c4 10             	add    esp,0x10
c001d4ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d4cd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d4d1:	74 05                	je     c001d4d8 <Vm::faultHandler(regs*)+0x3e9>
c001d4d3:	83 e8 02             	sub    eax,0x2
c001d4d6:	eb 03                	jmp    c001d4db <Vm::faultHandler(regs*)+0x3ec>
c001d4d8:	83 c0 02             	add    eax,0x2
c001d4db:	25 ff ff 00 00       	and    eax,0xffff
c001d4e0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001d4e3:	e9 dc 01 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d4e8:	49                   	dec    ecx
c001d4e9:	80 f9 05             	cmp    cl,0x5
c001d4ec:	77 24                	ja     c001d512 <Vm::faultHandler(regs*)+0x423>
c001d4ee:	0f b6 c9             	movzx  ecx,cl
c001d4f1:	ff 24 8d 60 9c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd63a0]
c001d4f8:	0f b7 f5             	movzx  esi,bp
c001d4fb:	eb 15                	jmp    c001d512 <Vm::faultHandler(regs*)+0x423>
c001d4fd:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001d501:	eb 0f                	jmp    c001d512 <Vm::faultHandler(regs*)+0x423>
c001d503:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001d507:	eb 09                	jmp    c001d512 <Vm::faultHandler(regs*)+0x423>
c001d509:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001d50d:	eb 03                	jmp    c001d512 <Vm::faultHandler(regs*)+0x423>
c001d50f:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001d512:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d515:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d51a:	74 0b                	je     c001d527 <Vm::faultHandler(regs*)+0x438>
c001d51c:	3d ff ff 00 00       	cmp    eax,0xffff
c001d521:	0f 87 f8 01 00 00    	ja     c001d71f <Vm::faultHandler(regs*)+0x630>
c001d527:	0f b7 c0             	movzx  eax,ax
c001d52a:	52                   	push   edx
c001d52b:	52                   	push   edx
c001d52c:	50                   	push   eax
c001d52d:	56                   	push   esi
c001d52e:	e8 48 fb ff ff       	call   c001d07b <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d533:	59                   	pop    ecx
c001d534:	0f b6 c0             	movzx  eax,al
c001d537:	5e                   	pop    esi
c001d538:	50                   	push   eax
c001d539:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d53d:	50                   	push   eax
c001d53e:	e8 55 f8 ff ff       	call   c001cd98 <Vm::outbv(unsigned short, unsigned char)>
c001d543:	83 c4 10             	add    esp,0x10
c001d546:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d549:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001d54d:	74 03                	je     c001d552 <Vm::faultHandler(regs*)+0x463>
c001d54f:	48                   	dec    eax
c001d550:	eb 01                	jmp    c001d553 <Vm::faultHandler(regs*)+0x464>
c001d552:	40                   	inc    eax
c001d553:	0f b7 c0             	movzx  eax,ax
c001d556:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d559:	e9 66 01 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d55e:	49                   	dec    ecx
c001d55f:	80 f9 05             	cmp    cl,0x5
c001d562:	77 1f                	ja     c001d583 <Vm::faultHandler(regs*)+0x494>
c001d564:	0f b6 c9             	movzx  ecx,cl
c001d567:	ff 24 8d 78 9c 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd6388]
c001d56e:	89 ee                	mov    esi,ebp
c001d570:	eb 11                	jmp    c001d583 <Vm::faultHandler(regs*)+0x494>
c001d572:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001d575:	eb 0c                	jmp    c001d583 <Vm::faultHandler(regs*)+0x494>
c001d577:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001d57a:	eb 07                	jmp    c001d583 <Vm::faultHandler(regs*)+0x494>
c001d57c:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001d57f:	eb 02                	jmp    c001d583 <Vm::faultHandler(regs*)+0x494>
c001d581:	8b 33                	mov    esi,DWORD PTR [ebx]
c001d583:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001d586:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001d58b:	74 0c                	je     c001d599 <Vm::faultHandler(regs*)+0x4aa>
c001d58d:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001d593:	0f 87 86 01 00 00    	ja     c001d71f <Vm::faultHandler(regs*)+0x630>
c001d599:	0f b7 d6             	movzx  edx,si
c001d59c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d59f:	0f b7 c1             	movzx  eax,cx
c001d5a2:	81 e7 00 04 00 00    	and    edi,0x400
c001d5a8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001d5ab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d5b0:	74 1d                	je     c001d5cf <Vm::faultHandler(regs*)+0x4e0>
c001d5b2:	55                   	push   ebp
c001d5b3:	55                   	push   ebp
c001d5b4:	50                   	push   eax
c001d5b5:	52                   	push   edx
c001d5b6:	e8 e3 fa ff ff       	call   c001d09e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d5bb:	83 c4 10             	add    esp,0x10
c001d5be:	89 f2                	mov    edx,esi
c001d5c0:	ef                   	out    dx,eax
c001d5c1:	85 ff                	test   edi,edi
c001d5c3:	74 05                	je     c001d5ca <Vm::faultHandler(regs*)+0x4db>
c001d5c5:	83 e9 04             	sub    ecx,0x4
c001d5c8:	eb 21                	jmp    c001d5eb <Vm::faultHandler(regs*)+0x4fc>
c001d5ca:	83 c1 04             	add    ecx,0x4
c001d5cd:	eb 1c                	jmp    c001d5eb <Vm::faultHandler(regs*)+0x4fc>
c001d5cf:	55                   	push   ebp
c001d5d0:	55                   	push   ebp
c001d5d1:	50                   	push   eax
c001d5d2:	52                   	push   edx
c001d5d3:	e8 b4 fa ff ff       	call   c001d08c <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d5d8:	83 c4 10             	add    esp,0x10
c001d5db:	89 f2                	mov    edx,esi
c001d5dd:	66 ef                	out    dx,ax
c001d5df:	85 ff                	test   edi,edi
c001d5e1:	74 05                	je     c001d5e8 <Vm::faultHandler(regs*)+0x4f9>
c001d5e3:	83 e9 02             	sub    ecx,0x2
c001d5e6:	eb 03                	jmp    c001d5eb <Vm::faultHandler(regs*)+0x4fc>
c001d5e8:	83 c1 02             	add    ecx,0x2
c001d5eb:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d5f1:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001d5f4:	e9 cb 00 00 00       	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d5f9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d600:	83 ec 0c             	sub    esp,0xc
c001d603:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d607:	50                   	push   eax
c001d608:	e8 85 f7 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d60d:	0f b6 c0             	movzx  eax,al
c001d610:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d613:	eb 3f                	jmp    c001d654 <Vm::faultHandler(regs*)+0x565>
c001d615:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d61a:	74 07                	je     c001d623 <Vm::faultHandler(regs*)+0x534>
c001d61c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d620:	ed                   	in     eax,dx
c001d621:	eb 14                	jmp    c001d637 <Vm::faultHandler(regs*)+0x548>
c001d623:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001d626:	66 31 c9             	xor    cx,cx
c001d629:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001d62c:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d630:	66 ed                	in     ax,dx
c001d632:	0f b7 c0             	movzx  eax,ax
c001d635:	09 c8                	or     eax,ecx
c001d637:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d63a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d63e:	e9 84 00 00 00       	jmp    c001d6c7 <Vm::faultHandler(regs*)+0x5d8>
c001d643:	52                   	push   edx
c001d644:	52                   	push   edx
c001d645:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d649:	50                   	push   eax
c001d64a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d64e:	50                   	push   eax
c001d64f:	e8 44 f7 ff ff       	call   c001cd98 <Vm::outbv(unsigned short, unsigned char)>
c001d654:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d658:	eb 53                	jmp    c001d6ad <Vm::faultHandler(regs*)+0x5be>
c001d65a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d65d:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001d661:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d666:	74 03                	je     c001d66b <Vm::faultHandler(regs*)+0x57c>
c001d668:	ef                   	out    dx,eax
c001d669:	eb cf                	jmp    c001d63a <Vm::faultHandler(regs*)+0x54b>
c001d66b:	66 ef                	out    dx,ax
c001d66d:	eb cb                	jmp    c001d63a <Vm::faultHandler(regs*)+0x54b>
c001d66f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001d676:	83 ec 0c             	sub    esp,0xc
c001d679:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d67d:	50                   	push   eax
c001d67e:	e8 0f f7 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d683:	0f b6 c0             	movzx  eax,al
c001d686:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001d689:	eb 1f                	jmp    c001d6aa <Vm::faultHandler(regs*)+0x5bb>
c001d68b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d68e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d693:	74 03                	je     c001d698 <Vm::faultHandler(regs*)+0x5a9>
c001d695:	ed                   	in     eax,dx
c001d696:	eb 0d                	jmp    c001d6a5 <Vm::faultHandler(regs*)+0x5b6>
c001d698:	66 ed                	in     ax,dx
c001d69a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001d69d:	0f b7 c0             	movzx  eax,ax
c001d6a0:	66 31 d2             	xor    dx,dx
c001d6a3:	09 d0                	or     eax,edx
c001d6a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001d6a8:	eb 1a                	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d6aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	eb 15                	jmp    c001d6c7 <Vm::faultHandler(regs*)+0x5d8>
c001d6b2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001d6b5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001d6b8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d6bd:	74 03                	je     c001d6c2 <Vm::faultHandler(regs*)+0x5d3>
c001d6bf:	ef                   	out    dx,eax
c001d6c0:	eb 02                	jmp    c001d6c4 <Vm::faultHandler(regs*)+0x5d5>
c001d6c2:	66 ef                	out    dx,ax
c001d6c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d6c7:	b0 01                	mov    al,0x1
c001d6c9:	eb 56                	jmp    c001d721 <Vm::faultHandler(regs*)+0x632>
c001d6cb:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001d6cf:	50                   	push   eax
c001d6d0:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001d6d4:	50                   	push   eax
c001d6d5:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001d6d9:	50                   	push   eax
c001d6da:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001d6de:	50                   	push   eax
c001d6df:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d6e3:	50                   	push   eax
c001d6e4:	52                   	push   edx
c001d6e5:	52                   	push   edx
c001d6e6:	68 31 9c 02 c0       	push   0xc0029c31
c001d6eb:	e8 9d 4f ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d6f0:	83 c4 20             	add    esp,0x20
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	6a 60                	push   0x60
c001d6f8:	e8 95 f6 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d6fd:	83 c4 10             	add    esp,0x10
c001d700:	3c 1c                	cmp    al,0x1c
c001d702:	74 04                	je     c001d708 <Vm::faultHandler(regs*)+0x619>
c001d704:	3c 5a                	cmp    al,0x5a
c001d706:	75 eb                	jne    c001d6f3 <Vm::faultHandler(regs*)+0x604>
c001d708:	3c 5a                	cmp    al,0x5a
c001d70a:	74 04                	je     c001d710 <Vm::faultHandler(regs*)+0x621>
c001d70c:	3c 1c                	cmp    al,0x1c
c001d70e:	75 0f                	jne    c001d71f <Vm::faultHandler(regs*)+0x630>
c001d710:	83 ec 0c             	sub    esp,0xc
c001d713:	6a 60                	push   0x60
c001d715:	e8 78 f6 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d71a:	83 c4 10             	add    esp,0x10
c001d71d:	eb e9                	jmp    c001d708 <Vm::faultHandler(regs*)+0x619>
c001d71f:	31 c0                	xor    eax,eax
c001d721:	83 c4 1c             	add    esp,0x1c
c001d724:	5b                   	pop    ebx
c001d725:	5e                   	pop    esi
c001d726:	5f                   	pop    edi
c001d727:	5d                   	pop    ebp
c001d728:	c3                   	ret    

c001d729 <Vm::fpuInternalTo32(unsigned long long)>:
c001d729:	57                   	push   edi
c001d72a:	56                   	push   esi
c001d72b:	53                   	push   ebx
c001d72c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d734:	89 d6                	mov    esi,edx
c001d736:	89 d7                	mov    edi,edx
c001d738:	89 c1                	mov    ecx,eax
c001d73a:	c1 ef 14             	shr    edi,0x14
c001d73d:	89 d3                	mov    ebx,edx
c001d73f:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001d745:	31 d2                	xor    edx,edx
c001d747:	89 f8                	mov    eax,edi
c001d749:	81 e6 00 00 00 80    	and    esi,0x80000000
c001d74f:	bf ff 00 00 00       	mov    edi,0xff
c001d754:	05 80 fc ff ff       	add    eax,0xfffffc80
c001d759:	83 d2 ff             	adc    edx,0xffffffff
c001d75c:	39 c7                	cmp    edi,eax
c001d75e:	bf 00 00 00 00       	mov    edi,0x0
c001d763:	19 d7                	sbb    edi,edx
c001d765:	72 15                	jb     c001d77c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001d767:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001d76b:	c1 e0 17             	shl    eax,0x17
c001d76e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001d774:	09 f1                	or     ecx,esi
c001d776:	09 c1                	or     ecx,eax
c001d778:	89 cf                	mov    edi,ecx
c001d77a:	eb 02                	jmp    c001d77e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001d77c:	31 ff                	xor    edi,edi
c001d77e:	89 f8                	mov    eax,edi
c001d780:	5b                   	pop    ebx
c001d781:	5e                   	pop    esi
c001d782:	5f                   	pop    edi
c001d783:	c3                   	ret    

c001d784 <Vm::fpuInternalTo64(unsigned long long)>:
c001d784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d78c:	c3                   	ret    

c001d78d <Vm::fpu32ToInternal(unsigned int)>:
c001d78d:	57                   	push   edi
c001d78e:	31 ff                	xor    edi,edi
c001d790:	56                   	push   esi
c001d791:	53                   	push   ebx
c001d792:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d796:	89 cb                	mov    ebx,ecx
c001d798:	89 ce                	mov    esi,ecx
c001d79a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001d7a0:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001d7a6:	c1 e9 17             	shr    ecx,0x17
c001d7a9:	89 f0                	mov    eax,esi
c001d7ab:	0f b6 d1             	movzx  edx,cl
c001d7ae:	81 c2 80 03 00 00    	add    edx,0x380
c001d7b4:	89 d1                	mov    ecx,edx
c001d7b6:	89 fa                	mov    edx,edi
c001d7b8:	c1 e1 14             	shl    ecx,0x14
c001d7bb:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001d7bf:	c1 e0 1d             	shl    eax,0x1d
c001d7c2:	89 d7                	mov    edi,edx
c001d7c4:	89 c6                	mov    esi,eax
c001d7c6:	89 ca                	mov    edx,ecx
c001d7c8:	89 f0                	mov    eax,esi
c001d7ca:	09 fa                	or     edx,edi
c001d7cc:	09 da                	or     edx,ebx
c001d7ce:	5b                   	pop    ebx
c001d7cf:	5e                   	pop    esi
c001d7d0:	5f                   	pop    edi
c001d7d1:	c3                   	ret    

c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>:
c001d7d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7da:	c3                   	ret    

c001d7db <Vm::fpuFloatToLong(unsigned long long)>:
c001d7db:	57                   	push   edi
c001d7dc:	31 c0                	xor    eax,eax
c001d7de:	56                   	push   esi
c001d7df:	31 d2                	xor    edx,edx
c001d7e1:	53                   	push   ebx
c001d7e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d7e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7ea:	89 d9                	mov    ecx,ebx
c001d7ec:	c1 e9 14             	shr    ecx,0x14
c001d7ef:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001d7f5:	89 cf                	mov    edi,ecx
c001d7f7:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001d7fd:	78 33                	js     c001d832 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d7ff:	89 d9                	mov    ecx,ebx
c001d801:	89 f0                	mov    eax,esi
c001d803:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d809:	81 c9 00 00 10 00    	or     ecx,0x100000
c001d80f:	89 ca                	mov    edx,ecx
c001d811:	b9 34 00 00 00       	mov    ecx,0x34
c001d816:	29 f9                	sub    ecx,edi
c001d818:	0f ad d0             	shrd   eax,edx,cl
c001d81b:	d3 fa                	sar    edx,cl
c001d81d:	f6 c1 20             	test   cl,0x20
c001d820:	74 05                	je     c001d827 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001d822:	89 d0                	mov    eax,edx
c001d824:	c1 fa 1f             	sar    edx,0x1f
c001d827:	85 db                	test   ebx,ebx
c001d829:	79 07                	jns    c001d832 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001d82b:	f7 d8                	neg    eax
c001d82d:	83 d2 00             	adc    edx,0x0
c001d830:	f7 da                	neg    edx
c001d832:	5b                   	pop    ebx
c001d833:	5e                   	pop    esi
c001d834:	5f                   	pop    edi
c001d835:	c3                   	ret    

c001d836 <Vm::fpuULongToFloat(unsigned long long)>:
c001d836:	57                   	push   edi
c001d837:	31 c9                	xor    ecx,ecx
c001d839:	56                   	push   esi
c001d83a:	53                   	push   ebx
c001d83b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d83f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d843:	0f ba e7 14          	bt     edi,0x14
c001d847:	72 07                	jb     c001d850 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001d849:	01 f6                	add    esi,esi
c001d84b:	11 ff                	adc    edi,edi
c001d84d:	41                   	inc    ecx
c001d84e:	eb f3                	jmp    c001d843 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001d850:	89 fa                	mov    edx,edi
c001d852:	89 f0                	mov    eax,esi
c001d854:	bb 33 04 00 00       	mov    ebx,0x433
c001d859:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001d85f:	29 cb                	sub    ebx,ecx
c001d861:	89 d9                	mov    ecx,ebx
c001d863:	5b                   	pop    ebx
c001d864:	c1 e1 14             	shl    ecx,0x14
c001d867:	5e                   	pop    esi
c001d868:	09 ca                	or     edx,ecx
c001d86a:	5f                   	pop    edi
c001d86b:	c3                   	ret    

c001d86c <Vm::fpuLongToFloat(long long)>:
c001d86c:	56                   	push   esi
c001d86d:	31 c0                	xor    eax,eax
c001d86f:	53                   	push   ebx
c001d870:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d878:	39 c8                	cmp    eax,ecx
c001d87a:	19 d8                	sbb    eax,ebx
c001d87c:	7d 04                	jge    c001d882 <Vm::fpuLongToFloat(long long)+0x16>
c001d87e:	31 f6                	xor    esi,esi
c001d880:	eb 0c                	jmp    c001d88e <Vm::fpuLongToFloat(long long)+0x22>
c001d882:	f7 d9                	neg    ecx
c001d884:	be 01 00 00 00       	mov    esi,0x1
c001d889:	83 d3 00             	adc    ebx,0x0
c001d88c:	f7 db                	neg    ebx
c001d88e:	31 c0                	xor    eax,eax
c001d890:	0f ba e3 14          	bt     ebx,0x14
c001d894:	72 07                	jb     c001d89d <Vm::fpuLongToFloat(long long)+0x31>
c001d896:	01 c9                	add    ecx,ecx
c001d898:	11 db                	adc    ebx,ebx
c001d89a:	40                   	inc    eax
c001d89b:	eb f3                	jmp    c001d890 <Vm::fpuLongToFloat(long long)+0x24>
c001d89d:	ba 33 04 00 00       	mov    edx,0x433
c001d8a2:	29 c2                	sub    edx,eax
c001d8a4:	89 c8                	mov    eax,ecx
c001d8a6:	c1 e2 14             	shl    edx,0x14
c001d8a9:	89 d9                	mov    ecx,ebx
c001d8ab:	89 f3                	mov    ebx,esi
c001d8ad:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001d8b3:	09 ca                	or     edx,ecx
c001d8b5:	84 db                	test   bl,bl
c001d8b7:	74 06                	je     c001d8bf <Vm::fpuLongToFloat(long long)+0x53>
c001d8b9:	81 ca 00 00 00 80    	or     edx,0x80000000
c001d8bf:	5b                   	pop    ebx
c001d8c0:	5e                   	pop    esi
c001d8c1:	c3                   	ret    

c001d8c2 <Vm::fpuGet0()>:
c001d8c2:	31 c0                	xor    eax,eax
c001d8c4:	31 d2                	xor    edx,edx
c001d8c6:	c3                   	ret    

c001d8c7 <Vm::fpuGet1()>:
c001d8c7:	b8 01 00 00 00       	mov    eax,0x1
c001d8cc:	31 d2                	xor    edx,edx
c001d8ce:	c3                   	ret    

c001d8cf <Vm::fpuGetPi()>:
c001d8cf:	b8 03 00 00 00       	mov    eax,0x3
c001d8d4:	31 d2                	xor    edx,edx
c001d8d6:	c3                   	ret    

c001d8d7 <Vm::fpuGetLog2E()>:
c001d8d7:	83 ec 18             	sub    esp,0x18
c001d8da:	68 90 9c 02 c0       	push   0xc0029c90
c001d8df:	e8 73 b8 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001d8e4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d8e9:	31 d2                	xor    edx,edx
c001d8eb:	83 c4 1c             	add    esp,0x1c
c001d8ee:	c3                   	ret    

c001d8ef <Vm::fpuGetLogE2()>:
c001d8ef:	83 ec 18             	sub    esp,0x18
c001d8f2:	68 9c 9c 02 c0       	push   0xc0029c9c
c001d8f7:	e8 5b b8 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001d8fc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d901:	31 d2                	xor    edx,edx
c001d903:	83 c4 1c             	add    esp,0x1c
c001d906:	c3                   	ret    

c001d907 <Vm::fpuGetLog210()>:
c001d907:	83 ec 18             	sub    esp,0x18
c001d90a:	68 a8 9c 02 c0       	push   0xc0029ca8
c001d90f:	e8 43 b8 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001d914:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d919:	31 d2                	xor    edx,edx
c001d91b:	83 c4 1c             	add    esp,0x1c
c001d91e:	c3                   	ret    

c001d91f <Vm::fpuGetLog102()>:
c001d91f:	83 ec 18             	sub    esp,0x18
c001d922:	68 b5 9c 02 c0       	push   0xc0029cb5
c001d927:	e8 2b b8 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001d92c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001d931:	31 d2                	xor    edx,edx
c001d933:	83 c4 1c             	add    esp,0x1c
c001d936:	c3                   	ret    

c001d937 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001d937:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d93b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d93f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d943:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d947:	0f 92 c0             	setb   al
c001d94a:	c3                   	ret    

c001d94b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d94b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d94f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d953:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d957:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d95b:	09 c2                	or     edx,eax
c001d95d:	0f 94 c0             	sete   al
c001d960:	c3                   	ret    

c001d961 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d961:	57                   	push   edi
c001d962:	56                   	push   esi
c001d963:	53                   	push   ebx
c001d964:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d968:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d96c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d970:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d974:	57                   	push   edi
c001d975:	56                   	push   esi
c001d976:	53                   	push   ebx
c001d977:	51                   	push   ecx
c001d978:	e8 ce ff ff ff       	call   c001d94b <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d97d:	83 c4 10             	add    esp,0x10
c001d980:	88 c2                	mov    dl,al
c001d982:	31 c0                	xor    eax,eax
c001d984:	84 d2                	test   dl,dl
c001d986:	75 0c                	jne    c001d994 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d988:	57                   	push   edi
c001d989:	56                   	push   esi
c001d98a:	53                   	push   ebx
c001d98b:	51                   	push   ecx
c001d98c:	e8 a6 ff ff ff       	call   c001d937 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d991:	83 c4 10             	add    esp,0x10
c001d994:	83 e0 01             	and    eax,0x1
c001d997:	5b                   	pop    ebx
c001d998:	88 c1                	mov    cl,al
c001d99a:	83 e2 01             	and    edx,0x1
c001d99d:	a0 81 cd 02 c0       	mov    al,ds:0xc002cd81
c001d9a2:	c1 e2 06             	shl    edx,0x6
c001d9a5:	83 e0 ba             	and    eax,0xffffffba
c001d9a8:	5e                   	pop    esi
c001d9a9:	09 c8                	or     eax,ecx
c001d9ab:	5f                   	pop    edi
c001d9ac:	09 d0                	or     eax,edx
c001d9ae:	a2 81 cd 02 c0       	mov    ds:0xc002cd81,al
c001d9b3:	c3                   	ret    

c001d9b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d9b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9bc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d9c0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d9c4:	c3                   	ret    

c001d9c5 <Vm::fpuAbs(unsigned long long)>:
c001d9c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d9cd:	c3                   	ret    

c001d9ce <Vm::fpuChs(unsigned long long)>:
c001d9ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d9d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d9d6:	f7 d8                	neg    eax
c001d9d8:	83 d2 00             	adc    edx,0x0
c001d9db:	f7 da                	neg    edx
c001d9dd:	c3                   	ret    

c001d9de <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d9de:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d9e2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d9e7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d9eb:	eb c7                	jmp    c001d9b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d9ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d9ed:	53                   	push   ebx
c001d9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d9f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d9fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d9fe:	0f af ca             	imul   ecx,edx
c001da01:	0f af d8             	imul   ebx,eax
c001da04:	f7 e2                	mul    edx
c001da06:	01 d9                	add    ecx,ebx
c001da08:	5b                   	pop    ebx
c001da09:	01 ca                	add    edx,ecx
c001da0b:	c3                   	ret    

c001da0c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da1f:	e8 e8 6a 00 00       	call   c002450c <__udivdi3>
c001da24:	83 c4 1c             	add    esp,0x1c
c001da27:	c3                   	ret    

c001da28 <Vm::fpuSquare(unsigned long long)>:
c001da28:	50                   	push   eax
c001da29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001da2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001da31:	52                   	push   edx
c001da32:	50                   	push   eax
c001da33:	52                   	push   edx
c001da34:	50                   	push   eax
c001da35:	e8 b3 ff ff ff       	call   c001d9ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001da3a:	83 c4 14             	add    esp,0x14
c001da3d:	c3                   	ret    

c001da3e <Vm::fpuGetReg(int)>:
c001da3e:	83 ec 0c             	sub    esp,0xc
c001da41:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001da46:	76 10                	jbe    c001da58 <Vm::fpuGetReg(int)+0x1a>
c001da48:	83 ec 0c             	sub    esp,0xc
c001da4b:	68 c2 9c 02 c0       	push   0xc0029cc2
c001da50:	e8 02 b7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001da55:	83 c4 10             	add    esp,0x10
c001da58:	a0 81 cd 02 c0       	mov    al,ds:0xc002cd81
c001da5d:	b9 08 00 00 00       	mov    ecx,0x8
c001da62:	c0 e8 03             	shr    al,0x3
c001da65:	83 e0 07             	and    eax,0x7
c001da68:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001da6c:	99                   	cdq    
c001da6d:	f7 f9                	idiv   ecx
c001da6f:	8b 04 d5 84 cd 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd327c]
c001da76:	8b 14 d5 88 cd 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd3278]
c001da7d:	83 c4 0c             	add    esp,0xc
c001da80:	c3                   	ret    

c001da81 <Vm::fpuSetReg(int, unsigned long long)>:
c001da81:	57                   	push   edi
c001da82:	56                   	push   esi
c001da83:	52                   	push   edx
c001da84:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da88:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001da8c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001da91:	76 10                	jbe    c001daa3 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001da93:	83 ec 0c             	sub    esp,0xc
c001da96:	68 d5 9c 02 c0       	push   0xc0029cd5
c001da9b:	e8 b7 b6 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001daa0:	83 c4 10             	add    esp,0x10
c001daa3:	a0 81 cd 02 c0       	mov    al,ds:0xc002cd81
c001daa8:	b9 08 00 00 00       	mov    ecx,0x8
c001daad:	c0 e8 03             	shr    al,0x3
c001dab0:	83 e0 07             	and    eax,0x7
c001dab3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dab7:	99                   	cdq    
c001dab8:	f7 f9                	idiv   ecx
c001daba:	89 34 d5 84 cd 02 c0 	mov    DWORD PTR [edx*8-0x3ffd327c],esi
c001dac1:	89 3c d5 88 cd 02 c0 	mov    DWORD PTR [edx*8-0x3ffd3278],edi
c001dac8:	58                   	pop    eax
c001dac9:	5e                   	pop    esi
c001daca:	5f                   	pop    edi
c001dacb:	c3                   	ret    

c001dacc <Vm::fpuPush(unsigned long long)>:
c001dacc:	a0 81 cd 02 c0       	mov    al,ds:0xc002cd81
c001dad1:	c0 e8 03             	shr    al,0x3
c001dad4:	83 e0 07             	and    eax,0x7
c001dad7:	83 c0 07             	add    eax,0x7
c001dada:	88 c2                	mov    dl,al
c001dadc:	83 e0 07             	and    eax,0x7
c001dadf:	83 e2 07             	and    edx,0x7
c001dae2:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001dae9:	8a 15 81 cd 02 c0    	mov    dl,BYTE PTR ds:0xc002cd81
c001daef:	83 e2 c7             	and    edx,0xffffffc7
c001daf2:	09 ca                	or     edx,ecx
c001daf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001daf8:	88 15 81 cd 02 c0    	mov    BYTE PTR ds:0xc002cd81,dl
c001dafe:	89 0c c5 88 cd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3278],ecx
c001db05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db09:	89 14 c5 84 cd 02 c0 	mov    DWORD PTR [eax*8-0x3ffd327c],edx
c001db10:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c001db15:	83 f8 08             	cmp    eax,0x8
c001db18:	75 08                	jne    c001db22 <Vm::fpuPush(unsigned long long)+0x56>
c001db1a:	80 0d 80 cd 02 c0 40 	or     BYTE PTR ds:0xc002cd80,0x40
c001db21:	c3                   	ret    
c001db22:	40                   	inc    eax
c001db23:	a3 c4 cd 02 c0       	mov    ds:0xc002cdc4,eax
c001db28:	c3                   	ret    

c001db29 <Vm::fpuPop()>:
c001db29:	8a 0d 81 cd 02 c0    	mov    cl,BYTE PTR ds:0xc002cd81
c001db2f:	53                   	push   ebx
c001db30:	c0 e9 03             	shr    cl,0x3
c001db33:	8a 1d 81 cd 02 c0    	mov    bl,BYTE PTR ds:0xc002cd81
c001db39:	83 e1 07             	and    ecx,0x7
c001db3c:	83 e3 c7             	and    ebx,0xffffffc7
c001db3f:	8b 04 cd 84 cd 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd327c]
c001db46:	8b 14 cd 88 cd 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd3278]
c001db4d:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001db54:	83 e1 38             	and    ecx,0x38
c001db57:	09 d9                	or     ecx,ebx
c001db59:	88 0d 81 cd 02 c0    	mov    BYTE PTR ds:0xc002cd81,cl
c001db5f:	8b 0d c4 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cdc4
c001db65:	85 c9                	test   ecx,ecx
c001db67:	74 09                	je     c001db72 <Vm::fpuPop()+0x49>
c001db69:	49                   	dec    ecx
c001db6a:	89 0d c4 cd 02 c0    	mov    DWORD PTR ds:0xc002cdc4,ecx
c001db70:	eb 07                	jmp    c001db79 <Vm::fpuPop()+0x50>
c001db72:	80 0d 80 cd 02 c0 40 	or     BYTE PTR ds:0xc002cd80,0x40
c001db79:	5b                   	pop    ebx
c001db7a:	c3                   	ret    

c001db7b <Vm::x87Handler(regs*)>:
c001db7b:	55                   	push   ebp
c001db7c:	57                   	push   edi
c001db7d:	56                   	push   esi
c001db7e:	53                   	push   ebx
c001db7f:	83 ec 1c             	sub    esp,0x1c
c001db82:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db86:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001db8b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001db8e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001db96:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001db9a:	50                   	push   eax
c001db9b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001db9f:	50                   	push   eax
c001dba0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001dba4:	50                   	push   eax
c001dba5:	53                   	push   ebx
c001dba6:	e8 b1 b3 ff ff       	call   c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001dbab:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	89 c6                	mov    esi,eax
c001dbb3:	80 fa d9             	cmp    dl,0xd9
c001dbb6:	0f 85 52 01 00 00    	jne    c001dd0e <Vm::x87Handler(regs*)+0x193>
c001dbbc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dbc0:	8d 50 20             	lea    edx,[eax+0x20]
c001dbc3:	80 fa 0e             	cmp    dl,0xe
c001dbc6:	0f 87 86 00 00 00    	ja     c001dc52 <Vm::x87Handler(regs*)+0xd7>
c001dbcc:	0f b6 d2             	movzx  edx,dl
c001dbcf:	ff 24 95 e8 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6318]
c001dbd6:	e8 e7 fc ff ff       	call   c001d8c2 <Vm::fpuGet0()>
c001dbdb:	eb 05                	jmp    c001dbe2 <Vm::x87Handler(regs*)+0x67>
c001dbdd:	e8 e5 fc ff ff       	call   c001d8c7 <Vm::fpuGet1()>
c001dbe2:	57                   	push   edi
c001dbe3:	57                   	push   edi
c001dbe4:	52                   	push   edx
c001dbe5:	50                   	push   eax
c001dbe6:	e8 e1 fe ff ff       	call   c001dacc <Vm::fpuPush(unsigned long long)>
c001dbeb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001dbef:	83 c4 10             	add    esp,0x10
c001dbf2:	b0 01                	mov    al,0x1
c001dbf4:	e9 e3 09 00 00       	jmp    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001dbf9:	83 ec 0c             	sub    esp,0xc
c001dbfc:	6a 00                	push   0x0
c001dbfe:	e8 3b fe ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dc03:	59                   	pop    ecx
c001dc04:	5e                   	pop    esi
c001dc05:	52                   	push   edx
c001dc06:	50                   	push   eax
c001dc07:	e8 c2 fd ff ff       	call   c001d9ce <Vm::fpuChs(unsigned long long)>
c001dc0c:	eb 13                	jmp    c001dc21 <Vm::x87Handler(regs*)+0xa6>
c001dc0e:	83 ec 0c             	sub    esp,0xc
c001dc11:	6a 00                	push   0x0
c001dc13:	e8 26 fe ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dc18:	5f                   	pop    edi
c001dc19:	5d                   	pop    ebp
c001dc1a:	52                   	push   edx
c001dc1b:	50                   	push   eax
c001dc1c:	e8 a4 fd ff ff       	call   c001d9c5 <Vm::fpuAbs(unsigned long long)>
c001dc21:	83 c4 0c             	add    esp,0xc
c001dc24:	52                   	push   edx
c001dc25:	50                   	push   eax
c001dc26:	6a 00                	push   0x0
c001dc28:	e8 54 fe ff ff       	call   c001da81 <Vm::fpuSetReg(int, unsigned long long)>
c001dc2d:	eb bc                	jmp    c001dbeb <Vm::x87Handler(regs*)+0x70>
c001dc2f:	e8 d3 fc ff ff       	call   c001d907 <Vm::fpuGetLog210()>
c001dc34:	eb ac                	jmp    c001dbe2 <Vm::x87Handler(regs*)+0x67>
c001dc36:	e8 9c fc ff ff       	call   c001d8d7 <Vm::fpuGetLog2E()>
c001dc3b:	eb a5                	jmp    c001dbe2 <Vm::x87Handler(regs*)+0x67>
c001dc3d:	e8 8d fc ff ff       	call   c001d8cf <Vm::fpuGetPi()>
c001dc42:	eb 9e                	jmp    c001dbe2 <Vm::x87Handler(regs*)+0x67>
c001dc44:	e8 d6 fc ff ff       	call   c001d91f <Vm::fpuGetLog102()>
c001dc49:	eb 97                	jmp    c001dbe2 <Vm::x87Handler(regs*)+0x67>
c001dc4b:	e8 9f fc ff ff       	call   c001d8ef <Vm::fpuGetLogE2()>
c001dc50:	eb 90                	jmp    c001dbe2 <Vm::x87Handler(regs*)+0x67>
c001dc52:	8d 50 40             	lea    edx,[eax+0x40]
c001dc55:	80 fa 07             	cmp    dl,0x7
c001dc58:	77 15                	ja     c001dc6f <Vm::x87Handler(regs*)+0xf4>
c001dc5a:	83 ec 0c             	sub    esp,0xc
c001dc5d:	2d c0 00 00 00       	sub    eax,0xc0
c001dc62:	50                   	push   eax
c001dc63:	e8 d6 fd ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dc68:	59                   	pop    ecx
c001dc69:	5e                   	pop    esi
c001dc6a:	e9 75 ff ff ff       	jmp    c001dbe4 <Vm::x87Handler(regs*)+0x69>
c001dc6f:	8d 50 38             	lea    edx,[eax+0x38]
c001dc72:	80 fa 07             	cmp    dl,0x7
c001dc75:	77 3c                	ja     c001dcb3 <Vm::x87Handler(regs*)+0x138>
c001dc77:	83 ec 0c             	sub    esp,0xc
c001dc7a:	2d c8 00 00 00       	sub    eax,0xc8
c001dc7f:	50                   	push   eax
c001dc80:	e8 b9 fd ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dc85:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc8c:	89 c6                	mov    esi,eax
c001dc8e:	89 d7                	mov    edi,edx
c001dc90:	e8 a9 fd ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dc95:	83 c4 0c             	add    esp,0xc
c001dc98:	52                   	push   edx
c001dc99:	50                   	push   eax
c001dc9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dc9e:	2d c8 00 00 00       	sub    eax,0xc8
c001dca3:	50                   	push   eax
c001dca4:	e8 d8 fd ff ff       	call   c001da81 <Vm::fpuSetReg(int, unsigned long long)>
c001dca9:	83 c4 0c             	add    esp,0xc
c001dcac:	57                   	push   edi
c001dcad:	56                   	push   esi
c001dcae:	e9 73 ff ff ff       	jmp    c001dc26 <Vm::x87Handler(regs*)+0xab>
c001dcb3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dcb7:	84 d2                	test   dl,dl
c001dcb9:	75 0f                	jne    c001dcca <Vm::x87Handler(regs*)+0x14f>
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	ff 36                	push   DWORD PTR [esi]
c001dcc0:	e8 c8 fa ff ff       	call   c001d78d <Vm::fpu32ToInternal(unsigned int)>
c001dcc5:	e9 bf 00 00 00       	jmp    c001dd89 <Vm::x87Handler(regs*)+0x20e>
c001dcca:	80 fa 03             	cmp    dl,0x3
c001dccd:	75 13                	jne    c001dce2 <Vm::x87Handler(regs*)+0x167>
c001dccf:	e8 55 fe ff ff       	call   c001db29 <Vm::fpuPop()>
c001dcd4:	55                   	push   ebp
c001dcd5:	55                   	push   ebp
c001dcd6:	52                   	push   edx
c001dcd7:	50                   	push   eax
c001dcd8:	e8 4c fa ff ff       	call   c001d729 <Vm::fpuInternalTo32(unsigned long long)>
c001dcdd:	e9 88 00 00 00       	jmp    c001dd6a <Vm::x87Handler(regs*)+0x1ef>
c001dce2:	80 fa 05             	cmp    dl,0x5
c001dce5:	75 0e                	jne    c001dcf5 <Vm::x87Handler(regs*)+0x17a>
c001dce7:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dcea:	66 a3 82 cd 02 c0    	mov    ds:0xc002cd82,ax
c001dcf0:	e9 df 00 00 00       	jmp    c001ddd4 <Vm::x87Handler(regs*)+0x259>
c001dcf5:	31 c0                	xor    eax,eax
c001dcf7:	80 fa 07             	cmp    dl,0x7
c001dcfa:	0f 85 dc 08 00 00    	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001dd00:	66 a1 82 cd 02 c0    	mov    ax,ds:0xc002cd82
c001dd06:	66 89 06             	mov    WORD PTR [esi],ax
c001dd09:	e9 c6 00 00 00       	jmp    c001ddd4 <Vm::x87Handler(regs*)+0x259>
c001dd0e:	80 fa d8             	cmp    dl,0xd8
c001dd11:	0f 84 c9 00 00 00    	je     c001dde0 <Vm::x87Handler(regs*)+0x265>
c001dd17:	80 fa dc             	cmp    dl,0xdc
c001dd1a:	0f 84 0d 02 00 00    	je     c001df2d <Vm::x87Handler(regs*)+0x3b2>
c001dd20:	80 fa de             	cmp    dl,0xde
c001dd23:	0f 84 cd 02 00 00    	je     c001dff6 <Vm::x87Handler(regs*)+0x47b>
c001dd29:	80 fa dd             	cmp    dl,0xdd
c001dd2c:	0f 84 5f 04 00 00    	je     c001e191 <Vm::x87Handler(regs*)+0x616>
c001dd32:	80 fa da             	cmp    dl,0xda
c001dd35:	0f 84 24 05 00 00    	je     c001e25f <Vm::x87Handler(regs*)+0x6e4>
c001dd3b:	80 fa df             	cmp    dl,0xdf
c001dd3e:	0f 84 68 05 00 00    	je     c001e2ac <Vm::x87Handler(regs*)+0x731>
c001dd44:	31 c0                	xor    eax,eax
c001dd46:	80 fa db             	cmp    dl,0xdb
c001dd49:	0f 85 8d 08 00 00    	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001dd4f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dd53:	80 fa 03             	cmp    dl,0x3
c001dd56:	0f 85 70 06 00 00    	jne    c001e3cc <Vm::x87Handler(regs*)+0x851>
c001dd5c:	e8 c8 fd ff ff       	call   c001db29 <Vm::fpuPop()>
c001dd61:	55                   	push   ebp
c001dd62:	55                   	push   ebp
c001dd63:	52                   	push   edx
c001dd64:	50                   	push   eax
c001dd65:	e8 71 fa ff ff       	call   c001d7db <Vm::fpuFloatToLong(unsigned long long)>
c001dd6a:	83 c4 10             	add    esp,0x10
c001dd6d:	89 06                	mov    DWORD PTR [esi],eax
c001dd6f:	eb 63                	jmp    c001ddd4 <Vm::x87Handler(regs*)+0x259>
c001dd71:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dd75:	84 d2                	test   dl,dl
c001dd77:	0f 85 e6 05 00 00    	jne    c001e363 <Vm::x87Handler(regs*)+0x7e8>
c001dd7d:	57                   	push   edi
c001dd7e:	57                   	push   edi
c001dd7f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dd82:	ff 36                	push   DWORD PTR [esi]
c001dd84:	e8 49 fa ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001dd89:	5e                   	pop    esi
c001dd8a:	5f                   	pop    edi
c001dd8b:	52                   	push   edx
c001dd8c:	50                   	push   eax
c001dd8d:	e8 3a fd ff ff       	call   c001dacc <Vm::fpuPush(unsigned long long)>
c001dd92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd96:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dd99:	e9 51 fe ff ff       	jmp    c001dbef <Vm::x87Handler(regs*)+0x74>
c001dd9e:	80 fa 03             	cmp    dl,0x3
c001dda1:	0f 85 d7 06 00 00    	jne    c001e47e <Vm::x87Handler(regs*)+0x903>
c001dda7:	57                   	push   edi
c001dda8:	57                   	push   edi
c001dda9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ddac:	ff 36                	push   DWORD PTR [esi]
c001ddae:	e8 1f fa ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001ddb3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ddba:	89 c6                	mov    esi,eax
c001ddbc:	89 d7                	mov    edi,edx
c001ddbe:	e8 7b fc ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001ddc3:	57                   	push   edi
c001ddc4:	56                   	push   esi
c001ddc5:	52                   	push   edx
c001ddc6:	50                   	push   eax
c001ddc7:	e8 95 fb ff ff       	call   c001d961 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ddcc:	83 c4 20             	add    esp,0x20
c001ddcf:	e8 55 fd ff ff       	call   c001db29 <Vm::fpuPop()>
c001ddd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ddd8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001dddb:	e9 12 fe ff ff       	jmp    c001dbf2 <Vm::x87Handler(regs*)+0x77>
c001dde0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dde4:	8d 50 40             	lea    edx,[eax+0x40]
c001dde7:	80 fa 07             	cmp    dl,0x7
c001ddea:	77 29                	ja     c001de15 <Vm::x87Handler(regs*)+0x29a>
c001ddec:	83 ec 0c             	sub    esp,0xc
c001ddef:	2d c0 00 00 00       	sub    eax,0xc0
c001ddf4:	50                   	push   eax
c001ddf5:	e8 44 fc ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001ddfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de01:	89 c6                	mov    esi,eax
c001de03:	89 d7                	mov    edi,edx
c001de05:	e8 34 fc ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001de0a:	57                   	push   edi
c001de0b:	56                   	push   esi
c001de0c:	52                   	push   edx
c001de0d:	50                   	push   eax
c001de0e:	e8 a1 fb ff ff       	call   c001d9b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001de13:	eb 2f                	jmp    c001de44 <Vm::x87Handler(regs*)+0x2c9>
c001de15:	8d 50 38             	lea    edx,[eax+0x38]
c001de18:	80 fa 07             	cmp    dl,0x7
c001de1b:	77 2f                	ja     c001de4c <Vm::x87Handler(regs*)+0x2d1>
c001de1d:	83 ec 0c             	sub    esp,0xc
c001de20:	2d c8 00 00 00       	sub    eax,0xc8
c001de25:	50                   	push   eax
c001de26:	e8 13 fc ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001de2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de32:	89 c6                	mov    esi,eax
c001de34:	89 d7                	mov    edi,edx
c001de36:	e8 03 fc ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001de3b:	57                   	push   edi
c001de3c:	56                   	push   esi
c001de3d:	52                   	push   edx
c001de3e:	50                   	push   eax
c001de3f:	e8 a9 fb ff ff       	call   c001d9ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001de44:	83 c4 1c             	add    esp,0x1c
c001de47:	e9 d8 fd ff ff       	jmp    c001dc24 <Vm::x87Handler(regs*)+0xa9>
c001de4c:	8d 50 30             	lea    edx,[eax+0x30]
c001de4f:	80 fa 07             	cmp    dl,0x7
c001de52:	77 0d                	ja     c001de61 <Vm::x87Handler(regs*)+0x2e6>
c001de54:	83 ec 0c             	sub    esp,0xc
c001de57:	2d d0 00 00 00       	sub    eax,0xd0
c001de5c:	e9 99 03 00 00       	jmp    c001e1fa <Vm::x87Handler(regs*)+0x67f>
c001de61:	8d 50 28             	lea    edx,[eax+0x28]
c001de64:	80 fa 07             	cmp    dl,0x7
c001de67:	77 0d                	ja     c001de76 <Vm::x87Handler(regs*)+0x2fb>
c001de69:	83 ec 0c             	sub    esp,0xc
c001de6c:	2d d8 00 00 00       	sub    eax,0xd8
c001de71:	e9 c0 03 00 00       	jmp    c001e236 <Vm::x87Handler(regs*)+0x6bb>
c001de76:	8d 50 20             	lea    edx,[eax+0x20]
c001de79:	80 fa 07             	cmp    dl,0x7
c001de7c:	77 1b                	ja     c001de99 <Vm::x87Handler(regs*)+0x31e>
c001de7e:	83 ec 0c             	sub    esp,0xc
c001de81:	2d e0 00 00 00       	sub    eax,0xe0
c001de86:	50                   	push   eax
c001de87:	e8 b2 fb ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001de8c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001de93:	89 c6                	mov    esi,eax
c001de95:	89 d7                	mov    edi,edx
c001de97:	eb 22                	jmp    c001debb <Vm::x87Handler(regs*)+0x340>
c001de99:	8d 50 18             	lea    edx,[eax+0x18]
c001de9c:	80 fa 07             	cmp    dl,0x7
c001de9f:	77 2d                	ja     c001dece <Vm::x87Handler(regs*)+0x353>
c001dea1:	83 ec 0c             	sub    esp,0xc
c001dea4:	6a 00                	push   0x0
c001dea6:	e8 93 fb ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001deab:	89 c6                	mov    esi,eax
c001dead:	89 d7                	mov    edi,edx
c001deaf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001deb3:	2d e8 00 00 00       	sub    eax,0xe8
c001deb8:	89 04 24             	mov    DWORD PTR [esp],eax
c001debb:	e8 7e fb ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dec0:	57                   	push   edi
c001dec1:	56                   	push   esi
c001dec2:	52                   	push   edx
c001dec3:	50                   	push   eax
c001dec4:	e8 15 fb ff ff       	call   c001d9de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dec9:	e9 76 ff ff ff       	jmp    c001de44 <Vm::x87Handler(regs*)+0x2c9>
c001dece:	8d 50 10             	lea    edx,[eax+0x10]
c001ded1:	80 fa 07             	cmp    dl,0x7
c001ded4:	77 1b                	ja     c001def1 <Vm::x87Handler(regs*)+0x376>
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	2d f0 00 00 00       	sub    eax,0xf0
c001dede:	50                   	push   eax
c001dedf:	e8 5a fb ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dee4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001deeb:	89 c6                	mov    esi,eax
c001deed:	89 d7                	mov    edi,edx
c001deef:	eb 22                	jmp    c001df13 <Vm::x87Handler(regs*)+0x398>
c001def1:	3c f7                	cmp    al,0xf7
c001def3:	0f 86 d1 03 00 00    	jbe    c001e2ca <Vm::x87Handler(regs*)+0x74f>
c001def9:	83 ec 0c             	sub    esp,0xc
c001defc:	6a 00                	push   0x0
c001defe:	e8 3b fb ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001df03:	89 c6                	mov    esi,eax
c001df05:	89 d7                	mov    edi,edx
c001df07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df0b:	2d f8 00 00 00       	sub    eax,0xf8
c001df10:	89 04 24             	mov    DWORD PTR [esp],eax
c001df13:	e8 26 fb ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001df18:	57                   	push   edi
c001df19:	56                   	push   esi
c001df1a:	52                   	push   edx
c001df1b:	50                   	push   eax
c001df1c:	e8 eb fa ff ff       	call   c001da0c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001df21:	83 c4 1c             	add    esp,0x1c
c001df24:	52                   	push   edx
c001df25:	50                   	push   eax
c001df26:	6a 00                	push   0x0
c001df28:	e9 51 02 00 00       	jmp    c001e17e <Vm::x87Handler(regs*)+0x603>
c001df2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df31:	8d 50 40             	lea    edx,[eax+0x40]
c001df34:	80 fa 07             	cmp    dl,0x7
c001df37:	77 37                	ja     c001df70 <Vm::x87Handler(regs*)+0x3f5>
c001df39:	83 ec 0c             	sub    esp,0xc
c001df3c:	2d c0 00 00 00       	sub    eax,0xc0
c001df41:	50                   	push   eax
c001df42:	e8 f7 fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001df47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df4e:	89 c6                	mov    esi,eax
c001df50:	89 d7                	mov    edi,edx
c001df52:	e8 e7 fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001df57:	57                   	push   edi
c001df58:	56                   	push   esi
c001df59:	52                   	push   edx
c001df5a:	50                   	push   eax
c001df5b:	e8 54 fa ff ff       	call   c001d9b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001df60:	83 c4 1c             	add    esp,0x1c
c001df63:	52                   	push   edx
c001df64:	50                   	push   eax
c001df65:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df69:	2d c0 00 00 00       	sub    eax,0xc0
c001df6e:	eb 3d                	jmp    c001dfad <Vm::x87Handler(regs*)+0x432>
c001df70:	8d 50 38             	lea    edx,[eax+0x38]
c001df73:	80 fa 07             	cmp    dl,0x7
c001df76:	77 3b                	ja     c001dfb3 <Vm::x87Handler(regs*)+0x438>
c001df78:	83 ec 0c             	sub    esp,0xc
c001df7b:	2d c8 00 00 00       	sub    eax,0xc8
c001df80:	50                   	push   eax
c001df81:	e8 b8 fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001df86:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df8d:	89 c6                	mov    esi,eax
c001df8f:	89 d7                	mov    edi,edx
c001df91:	e8 a8 fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001df96:	57                   	push   edi
c001df97:	56                   	push   esi
c001df98:	52                   	push   edx
c001df99:	50                   	push   eax
c001df9a:	e8 4e fa ff ff       	call   c001d9ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001df9f:	83 c4 1c             	add    esp,0x1c
c001dfa2:	52                   	push   edx
c001dfa3:	50                   	push   eax
c001dfa4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dfa8:	2d c8 00 00 00       	sub    eax,0xc8
c001dfad:	50                   	push   eax
c001dfae:	e9 75 fc ff ff       	jmp    c001dc28 <Vm::x87Handler(regs*)+0xad>
c001dfb3:	83 c0 18             	add    eax,0x18
c001dfb6:	3c 07                	cmp    al,0x7
c001dfb8:	0f 87 3b 04 00 00    	ja     c001e3f9 <Vm::x87Handler(regs*)+0x87e>
c001dfbe:	83 ec 0c             	sub    esp,0xc
c001dfc1:	6a 00                	push   0x0
c001dfc3:	e8 76 fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dfc8:	89 c6                	mov    esi,eax
c001dfca:	89 d7                	mov    edi,edx
c001dfcc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dfd0:	2d e8 00 00 00       	sub    eax,0xe8
c001dfd5:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfd8:	e8 61 fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001dfdd:	57                   	push   edi
c001dfde:	56                   	push   esi
c001dfdf:	52                   	push   edx
c001dfe0:	50                   	push   eax
c001dfe1:	e8 f8 f9 ff ff       	call   c001d9de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001dfe6:	83 c4 1c             	add    esp,0x1c
c001dfe9:	52                   	push   edx
c001dfea:	50                   	push   eax
c001dfeb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dfef:	2d e8 00 00 00       	sub    eax,0xe8
c001dff4:	eb b7                	jmp    c001dfad <Vm::x87Handler(regs*)+0x432>
c001dff6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001dffa:	8d 50 40             	lea    edx,[eax+0x40]
c001dffd:	80 fa 07             	cmp    dl,0x7
c001e000:	77 3a                	ja     c001e03c <Vm::x87Handler(regs*)+0x4c1>
c001e002:	83 ec 0c             	sub    esp,0xc
c001e005:	2d c0 00 00 00       	sub    eax,0xc0
c001e00a:	50                   	push   eax
c001e00b:	e8 2e fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e010:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e017:	89 c6                	mov    esi,eax
c001e019:	89 d7                	mov    edi,edx
c001e01b:	e8 1e fa ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e020:	57                   	push   edi
c001e021:	56                   	push   esi
c001e022:	52                   	push   edx
c001e023:	50                   	push   eax
c001e024:	e8 8b f9 ff ff       	call   c001d9b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e029:	83 c4 1c             	add    esp,0x1c
c001e02c:	52                   	push   edx
c001e02d:	50                   	push   eax
c001e02e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e032:	2d c0 00 00 00       	sub    eax,0xc0
c001e037:	e9 9e 01 00 00       	jmp    c001e1da <Vm::x87Handler(regs*)+0x65f>
c001e03c:	8d 50 20             	lea    edx,[eax+0x20]
c001e03f:	80 fa 07             	cmp    dl,0x7
c001e042:	77 3a                	ja     c001e07e <Vm::x87Handler(regs*)+0x503>
c001e044:	83 ec 0c             	sub    esp,0xc
c001e047:	2d e0 00 00 00       	sub    eax,0xe0
c001e04c:	50                   	push   eax
c001e04d:	e8 ec f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e052:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e059:	89 c6                	mov    esi,eax
c001e05b:	89 d7                	mov    edi,edx
c001e05d:	e8 dc f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e062:	57                   	push   edi
c001e063:	56                   	push   esi
c001e064:	52                   	push   edx
c001e065:	50                   	push   eax
c001e066:	e8 73 f9 ff ff       	call   c001d9de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e06b:	83 c4 1c             	add    esp,0x1c
c001e06e:	52                   	push   edx
c001e06f:	50                   	push   eax
c001e070:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e074:	2d e0 00 00 00       	sub    eax,0xe0
c001e079:	e9 5c 01 00 00       	jmp    c001e1da <Vm::x87Handler(regs*)+0x65f>
c001e07e:	8d 50 18             	lea    edx,[eax+0x18]
c001e081:	80 fa 07             	cmp    dl,0x7
c001e084:	77 3b                	ja     c001e0c1 <Vm::x87Handler(regs*)+0x546>
c001e086:	83 ec 0c             	sub    esp,0xc
c001e089:	6a 00                	push   0x0
c001e08b:	e8 ae f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e090:	89 c6                	mov    esi,eax
c001e092:	89 d7                	mov    edi,edx
c001e094:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e098:	2d e8 00 00 00       	sub    eax,0xe8
c001e09d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0a0:	e8 99 f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e0a5:	57                   	push   edi
c001e0a6:	56                   	push   esi
c001e0a7:	52                   	push   edx
c001e0a8:	50                   	push   eax
c001e0a9:	e8 30 f9 ff ff       	call   c001d9de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e0ae:	83 c4 1c             	add    esp,0x1c
c001e0b1:	52                   	push   edx
c001e0b2:	50                   	push   eax
c001e0b3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0b7:	2d e8 00 00 00       	sub    eax,0xe8
c001e0bc:	e9 19 01 00 00       	jmp    c001e1da <Vm::x87Handler(regs*)+0x65f>
c001e0c1:	8d 50 38             	lea    edx,[eax+0x38]
c001e0c4:	80 fa 07             	cmp    dl,0x7
c001e0c7:	77 37                	ja     c001e100 <Vm::x87Handler(regs*)+0x585>
c001e0c9:	83 ec 0c             	sub    esp,0xc
c001e0cc:	2d c8 00 00 00       	sub    eax,0xc8
c001e0d1:	50                   	push   eax
c001e0d2:	e8 67 f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e0d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0de:	89 c6                	mov    esi,eax
c001e0e0:	89 d7                	mov    edi,edx
c001e0e2:	e8 57 f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e0e7:	57                   	push   edi
c001e0e8:	56                   	push   esi
c001e0e9:	52                   	push   edx
c001e0ea:	50                   	push   eax
c001e0eb:	e8 fd f8 ff ff       	call   c001d9ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e0f0:	83 c4 1c             	add    esp,0x1c
c001e0f3:	52                   	push   edx
c001e0f4:	50                   	push   eax
c001e0f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0f9:	2d c8 00 00 00       	sub    eax,0xc8
c001e0fe:	eb 7d                	jmp    c001e17d <Vm::x87Handler(regs*)+0x602>
c001e100:	3c f7                	cmp    al,0xf7
c001e102:	76 38                	jbe    c001e13c <Vm::x87Handler(regs*)+0x5c1>
c001e104:	83 ec 0c             	sub    esp,0xc
c001e107:	6a 00                	push   0x0
c001e109:	e8 30 f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e10e:	89 c6                	mov    esi,eax
c001e110:	89 d7                	mov    edi,edx
c001e112:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e116:	2d f8 00 00 00       	sub    eax,0xf8
c001e11b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e11e:	e8 1b f9 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e123:	57                   	push   edi
c001e124:	56                   	push   esi
c001e125:	52                   	push   edx
c001e126:	50                   	push   eax
c001e127:	e8 e0 f8 ff ff       	call   c001da0c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e12c:	83 c4 1c             	add    esp,0x1c
c001e12f:	52                   	push   edx
c001e130:	50                   	push   eax
c001e131:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e135:	2d f8 00 00 00       	sub    eax,0xf8
c001e13a:	eb 41                	jmp    c001e17d <Vm::x87Handler(regs*)+0x602>
c001e13c:	8d 50 10             	lea    edx,[eax+0x10]
c001e13f:	80 fa 07             	cmp    dl,0x7
c001e142:	0f 87 5a 01 00 00    	ja     c001e2a2 <Vm::x87Handler(regs*)+0x727>
c001e148:	83 ec 0c             	sub    esp,0xc
c001e14b:	2d f0 00 00 00       	sub    eax,0xf0
c001e150:	50                   	push   eax
c001e151:	e8 e8 f8 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e156:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e15d:	89 c6                	mov    esi,eax
c001e15f:	89 d7                	mov    edi,edx
c001e161:	e8 d8 f8 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e166:	57                   	push   edi
c001e167:	56                   	push   esi
c001e168:	52                   	push   edx
c001e169:	50                   	push   eax
c001e16a:	e8 9d f8 ff ff       	call   c001da0c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e16f:	83 c4 1c             	add    esp,0x1c
c001e172:	52                   	push   edx
c001e173:	50                   	push   eax
c001e174:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e178:	2d f0 00 00 00       	sub    eax,0xf0
c001e17d:	50                   	push   eax
c001e17e:	e8 fe f8 ff ff       	call   c001da81 <Vm::fpuSetReg(int, unsigned long long)>
c001e183:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e187:	e8 9d f9 ff ff       	call   c001db29 <Vm::fpuPop()>
c001e18c:	e9 5e fa ff ff       	jmp    c001dbef <Vm::x87Handler(regs*)+0x74>
c001e191:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e195:	8d 50 30             	lea    edx,[eax+0x30]
c001e198:	80 fa 07             	cmp    dl,0x7
c001e19b:	77 1d                	ja     c001e1ba <Vm::x87Handler(regs*)+0x63f>
c001e19d:	83 ec 0c             	sub    esp,0xc
c001e1a0:	6a 00                	push   0x0
c001e1a2:	e8 97 f8 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e1a7:	83 c4 0c             	add    esp,0xc
c001e1aa:	52                   	push   edx
c001e1ab:	50                   	push   eax
c001e1ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1b0:	2d d0 00 00 00       	sub    eax,0xd0
c001e1b5:	e9 f3 fd ff ff       	jmp    c001dfad <Vm::x87Handler(regs*)+0x432>
c001e1ba:	8d 50 28             	lea    edx,[eax+0x28]
c001e1bd:	80 fa 07             	cmp    dl,0x7
c001e1c0:	77 28                	ja     c001e1ea <Vm::x87Handler(regs*)+0x66f>
c001e1c2:	83 ec 0c             	sub    esp,0xc
c001e1c5:	6a 00                	push   0x0
c001e1c7:	e8 72 f8 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e1cc:	83 c4 0c             	add    esp,0xc
c001e1cf:	52                   	push   edx
c001e1d0:	50                   	push   eax
c001e1d1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1d5:	2d d8 00 00 00       	sub    eax,0xd8
c001e1da:	50                   	push   eax
c001e1db:	e8 a1 f8 ff ff       	call   c001da81 <Vm::fpuSetReg(int, unsigned long long)>
c001e1e0:	e8 44 f9 ff ff       	call   c001db29 <Vm::fpuPop()>
c001e1e5:	e9 01 fa ff ff       	jmp    c001dbeb <Vm::x87Handler(regs*)+0x70>
c001e1ea:	8d 50 20             	lea    edx,[eax+0x20]
c001e1ed:	80 fa 07             	cmp    dl,0x7
c001e1f0:	77 30                	ja     c001e222 <Vm::x87Handler(regs*)+0x6a7>
c001e1f2:	83 ec 0c             	sub    esp,0xc
c001e1f5:	2d e0 00 00 00       	sub    eax,0xe0
c001e1fa:	50                   	push   eax
c001e1fb:	e8 3e f8 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e200:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e207:	89 c6                	mov    esi,eax
c001e209:	89 d7                	mov    edi,edx
c001e20b:	e8 2e f8 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e210:	57                   	push   edi
c001e211:	56                   	push   esi
c001e212:	52                   	push   edx
c001e213:	50                   	push   eax
c001e214:	e8 48 f7 ff ff       	call   c001d961 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e219:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e21d:	e9 54 02 00 00       	jmp    c001e476 <Vm::x87Handler(regs*)+0x8fb>
c001e222:	8d 50 18             	lea    edx,[eax+0x18]
c001e225:	80 fa 07             	cmp    dl,0x7
c001e228:	0f 87 43 fb ff ff    	ja     c001dd71 <Vm::x87Handler(regs*)+0x1f6>
c001e22e:	83 ec 0c             	sub    esp,0xc
c001e231:	2d e8 00 00 00       	sub    eax,0xe8
c001e236:	50                   	push   eax
c001e237:	e8 02 f8 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e23c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e243:	89 c6                	mov    esi,eax
c001e245:	89 d7                	mov    edi,edx
c001e247:	e8 f2 f7 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e24c:	57                   	push   edi
c001e24d:	56                   	push   esi
c001e24e:	52                   	push   edx
c001e24f:	50                   	push   eax
c001e250:	e8 0c f7 ff ff       	call   c001d961 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e255:	83 c4 20             	add    esp,0x20
c001e258:	e8 cc f8 ff ff       	call   c001db29 <Vm::fpuPop()>
c001e25d:	eb 62                	jmp    c001e2c1 <Vm::x87Handler(regs*)+0x746>
c001e25f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001e263:	0f 85 0f 01 00 00    	jne    c001e378 <Vm::x87Handler(regs*)+0x7fd>
c001e269:	83 ec 0c             	sub    esp,0xc
c001e26c:	6a 01                	push   0x1
c001e26e:	e8 cb f7 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e273:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e27a:	89 c6                	mov    esi,eax
c001e27c:	89 d7                	mov    edi,edx
c001e27e:	e8 bb f7 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e283:	57                   	push   edi
c001e284:	56                   	push   esi
c001e285:	52                   	push   edx
c001e286:	50                   	push   eax
c001e287:	e8 d5 f6 ff ff       	call   c001d961 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e28c:	83 c4 20             	add    esp,0x20
c001e28f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e293:	e8 91 f8 ff ff       	call   c001db29 <Vm::fpuPop()>
c001e298:	e8 8c f8 ff ff       	call   c001db29 <Vm::fpuPop()>
c001e29d:	e9 50 f9 ff ff       	jmp    c001dbf2 <Vm::x87Handler(regs*)+0x77>
c001e2a2:	3c d9                	cmp    al,0xd9
c001e2a4:	0f 85 b5 02 00 00    	jne    c001e55f <Vm::x87Handler(regs*)+0x9e4>
c001e2aa:	eb bd                	jmp    c001e269 <Vm::x87Handler(regs*)+0x6ee>
c001e2ac:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001e2b0:	0f 85 ea 02 00 00    	jne    c001e5a0 <Vm::x87Handler(regs*)+0xa25>
c001e2b6:	0f b7 05 80 cd 02 c0 	movzx  eax,WORD PTR ds:0xc002cd80
c001e2bd:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001e2c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e2c5:	e9 28 f9 ff ff       	jmp    c001dbf2 <Vm::x87Handler(regs*)+0x77>
c001e2ca:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e2ce:	84 d2                	test   dl,dl
c001e2d0:	75 0f                	jne    c001e2e1 <Vm::x87Handler(regs*)+0x766>
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	ff 36                	push   DWORD PTR [esi]
c001e2d7:	e8 b1 f4 ff ff       	call   c001d78d <Vm::fpu32ToInternal(unsigned int)>
c001e2dc:	e9 2c 01 00 00       	jmp    c001e40d <Vm::x87Handler(regs*)+0x892>
c001e2e1:	80 fa 01             	cmp    dl,0x1
c001e2e4:	75 0f                	jne    c001e2f5 <Vm::x87Handler(regs*)+0x77a>
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	ff 36                	push   DWORD PTR [esi]
c001e2eb:	e8 9d f4 ff ff       	call   c001d78d <Vm::fpu32ToInternal(unsigned int)>
c001e2f0:	e9 81 02 00 00       	jmp    c001e576 <Vm::x87Handler(regs*)+0x9fb>
c001e2f5:	80 fa 04             	cmp    dl,0x4
c001e2f8:	75 0f                	jne    c001e309 <Vm::x87Handler(regs*)+0x78e>
c001e2fa:	83 ec 0c             	sub    esp,0xc
c001e2fd:	ff 36                	push   DWORD PTR [esi]
c001e2ff:	e8 89 f4 ff ff       	call   c001d78d <Vm::fpu32ToInternal(unsigned int)>
c001e304:	e9 86 01 00 00       	jmp    c001e48f <Vm::x87Handler(regs*)+0x914>
c001e309:	80 fa 05             	cmp    dl,0x5
c001e30c:	75 1b                	jne    c001e329 <Vm::x87Handler(regs*)+0x7ae>
c001e30e:	83 ec 0c             	sub    esp,0xc
c001e311:	6a 00                	push   0x0
c001e313:	e8 26 f7 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e318:	89 c7                	mov    edi,eax
c001e31a:	89 d5                	mov    ebp,edx
c001e31c:	58                   	pop    eax
c001e31d:	ff 36                	push   DWORD PTR [esi]
c001e31f:	e8 69 f4 ff ff       	call   c001d78d <Vm::fpu32ToInternal(unsigned int)>
c001e324:	e9 a3 01 00 00       	jmp    c001e4cc <Vm::x87Handler(regs*)+0x951>
c001e329:	80 fa 06             	cmp    dl,0x6
c001e32c:	75 0f                	jne    c001e33d <Vm::x87Handler(regs*)+0x7c2>
c001e32e:	83 ec 0c             	sub    esp,0xc
c001e331:	ff 36                	push   DWORD PTR [esi]
c001e333:	e8 55 f4 ff ff       	call   c001d78d <Vm::fpu32ToInternal(unsigned int)>
c001e338:	e9 ae 01 00 00       	jmp    c001e4eb <Vm::x87Handler(regs*)+0x970>
c001e33d:	31 c0                	xor    eax,eax
c001e33f:	80 fa 07             	cmp    dl,0x7
c001e342:	0f 85 94 02 00 00    	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001e348:	83 ec 0c             	sub    esp,0xc
c001e34b:	6a 00                	push   0x0
c001e34d:	e8 ec f6 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e352:	89 c7                	mov    edi,eax
c001e354:	89 d5                	mov    ebp,edx
c001e356:	58                   	pop    eax
c001e357:	ff 36                	push   DWORD PTR [esi]
c001e359:	e8 2f f4 ff ff       	call   c001d78d <Vm::fpu32ToInternal(unsigned int)>
c001e35e:	e9 cb 01 00 00       	jmp    c001e52e <Vm::x87Handler(regs*)+0x9b3>
c001e363:	80 fa 03             	cmp    dl,0x3
c001e366:	0f 85 d3 01 00 00    	jne    c001e53f <Vm::x87Handler(regs*)+0x9c4>
c001e36c:	e8 b8 f7 ff ff       	call   c001db29 <Vm::fpuPop()>
c001e371:	51                   	push   ecx
c001e372:	51                   	push   ecx
c001e373:	e9 de 01 00 00       	jmp    c001e556 <Vm::x87Handler(regs*)+0x9db>
c001e378:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e37c:	80 fa 01             	cmp    dl,0x1
c001e37f:	75 09                	jne    c001e38a <Vm::x87Handler(regs*)+0x80f>
c001e381:	57                   	push   edi
c001e382:	57                   	push   edi
c001e383:	8b 06                	mov    eax,DWORD PTR [esi]
c001e385:	e9 e3 01 00 00       	jmp    c001e56d <Vm::x87Handler(regs*)+0x9f2>
c001e38a:	80 fa 04             	cmp    dl,0x4
c001e38d:	75 12                	jne    c001e3a1 <Vm::x87Handler(regs*)+0x826>
c001e38f:	31 d2                	xor    edx,edx
c001e391:	51                   	push   ecx
c001e392:	51                   	push   ecx
c001e393:	8b 06                	mov    eax,DWORD PTR [esi]
c001e395:	52                   	push   edx
c001e396:	50                   	push   eax
c001e397:	e8 d0 f4 ff ff       	call   c001d86c <Vm::fpuLongToFloat(long long)>
c001e39c:	e9 ee 00 00 00       	jmp    c001e48f <Vm::x87Handler(regs*)+0x914>
c001e3a1:	31 c0                	xor    eax,eax
c001e3a3:	80 fa 07             	cmp    dl,0x7
c001e3a6:	0f 85 30 02 00 00    	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001e3ac:	83 ec 0c             	sub    esp,0xc
c001e3af:	6a 00                	push   0x0
c001e3b1:	e8 88 f6 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e3b6:	89 c7                	mov    edi,eax
c001e3b8:	89 d5                	mov    ebp,edx
c001e3ba:	58                   	pop    eax
c001e3bb:	8b 06                	mov    eax,DWORD PTR [esi]
c001e3bd:	5a                   	pop    edx
c001e3be:	31 d2                	xor    edx,edx
c001e3c0:	52                   	push   edx
c001e3c1:	50                   	push   eax
c001e3c2:	e8 a5 f4 ff ff       	call   c001d86c <Vm::fpuLongToFloat(long long)>
c001e3c7:	e9 62 01 00 00       	jmp    c001e52e <Vm::x87Handler(regs*)+0x9b3>
c001e3cc:	84 d2                	test   dl,dl
c001e3ce:	75 0d                	jne    c001e3dd <Vm::x87Handler(regs*)+0x862>
c001e3d0:	31 d2                	xor    edx,edx
c001e3d2:	55                   	push   ebp
c001e3d3:	55                   	push   ebp
c001e3d4:	8b 06                	mov    eax,DWORD PTR [esi]
c001e3d6:	52                   	push   edx
c001e3d7:	50                   	push   eax
c001e3d8:	e9 d3 01 00 00       	jmp    c001e5b0 <Vm::x87Handler(regs*)+0xa35>
c001e3dd:	31 c0                	xor    eax,eax
c001e3df:	80 fa 02             	cmp    dl,0x2
c001e3e2:	0f 85 f4 01 00 00    	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001e3e8:	83 ec 0c             	sub    esp,0xc
c001e3eb:	6a 00                	push   0x0
c001e3ed:	e8 4c f6 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e3f2:	59                   	pop    ecx
c001e3f3:	5f                   	pop    edi
c001e3f4:	e9 6a f9 ff ff       	jmp    c001dd63 <Vm::x87Handler(regs*)+0x1e8>
c001e3f9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e3fd:	84 d2                	test   dl,dl
c001e3ff:	75 2a                	jne    c001e42b <Vm::x87Handler(regs*)+0x8b0>
c001e401:	50                   	push   eax
c001e402:	50                   	push   eax
c001e403:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e406:	ff 36                	push   DWORD PTR [esi]
c001e408:	e8 c5 f3 ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001e40d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e414:	89 c6                	mov    esi,eax
c001e416:	89 d7                	mov    edi,edx
c001e418:	e8 21 f6 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e41d:	57                   	push   edi
c001e41e:	56                   	push   esi
c001e41f:	52                   	push   edx
c001e420:	50                   	push   eax
c001e421:	e8 8e f5 ff ff       	call   c001d9b4 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e426:	e9 64 01 00 00       	jmp    c001e58f <Vm::x87Handler(regs*)+0xa14>
c001e42b:	80 fa 01             	cmp    dl,0x1
c001e42e:	75 11                	jne    c001e441 <Vm::x87Handler(regs*)+0x8c6>
c001e430:	50                   	push   eax
c001e431:	50                   	push   eax
c001e432:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e435:	ff 36                	push   DWORD PTR [esi]
c001e437:	e8 96 f3 ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001e43c:	e9 35 01 00 00       	jmp    c001e576 <Vm::x87Handler(regs*)+0x9fb>
c001e441:	80 fa 02             	cmp    dl,0x2
c001e444:	0f 85 54 f9 ff ff    	jne    c001dd9e <Vm::x87Handler(regs*)+0x223>
c001e44a:	55                   	push   ebp
c001e44b:	55                   	push   ebp
c001e44c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e44f:	ff 36                	push   DWORD PTR [esi]
c001e451:	e8 7c f3 ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001e456:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e45d:	89 c6                	mov    esi,eax
c001e45f:	89 d7                	mov    edi,edx
c001e461:	e8 d8 f5 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e466:	57                   	push   edi
c001e467:	56                   	push   esi
c001e468:	52                   	push   edx
c001e469:	50                   	push   eax
c001e46a:	e8 f2 f4 ff ff       	call   c001d961 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e46f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e473:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e476:	83 c4 20             	add    esp,0x20
c001e479:	e9 74 f7 ff ff       	jmp    c001dbf2 <Vm::x87Handler(regs*)+0x77>
c001e47e:	80 fa 04             	cmp    dl,0x4
c001e481:	75 2a                	jne    c001e4ad <Vm::x87Handler(regs*)+0x932>
c001e483:	51                   	push   ecx
c001e484:	51                   	push   ecx
c001e485:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e488:	ff 36                	push   DWORD PTR [esi]
c001e48a:	e8 43 f3 ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001e48f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e496:	89 c6                	mov    esi,eax
c001e498:	89 d7                	mov    edi,edx
c001e49a:	e8 9f f5 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e49f:	57                   	push   edi
c001e4a0:	56                   	push   esi
c001e4a1:	52                   	push   edx
c001e4a2:	50                   	push   eax
c001e4a3:	e8 36 f5 ff ff       	call   c001d9de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e4a8:	e9 e2 00 00 00       	jmp    c001e58f <Vm::x87Handler(regs*)+0xa14>
c001e4ad:	80 fa 05             	cmp    dl,0x5
c001e4b0:	75 28                	jne    c001e4da <Vm::x87Handler(regs*)+0x95f>
c001e4b2:	83 ec 0c             	sub    esp,0xc
c001e4b5:	6a 00                	push   0x0
c001e4b7:	e8 82 f5 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e4bc:	89 c7                	mov    edi,eax
c001e4be:	89 d5                	mov    ebp,edx
c001e4c0:	58                   	pop    eax
c001e4c1:	5a                   	pop    edx
c001e4c2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e4c5:	ff 36                	push   DWORD PTR [esi]
c001e4c7:	e8 06 f3 ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001e4cc:	83 c4 10             	add    esp,0x10
c001e4cf:	55                   	push   ebp
c001e4d0:	57                   	push   edi
c001e4d1:	52                   	push   edx
c001e4d2:	50                   	push   eax
c001e4d3:	e8 06 f5 ff ff       	call   c001d9de <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e4d8:	eb 60                	jmp    c001e53a <Vm::x87Handler(regs*)+0x9bf>
c001e4da:	80 fa 06             	cmp    dl,0x6
c001e4dd:	75 2a                	jne    c001e509 <Vm::x87Handler(regs*)+0x98e>
c001e4df:	51                   	push   ecx
c001e4e0:	51                   	push   ecx
c001e4e1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e4e4:	ff 36                	push   DWORD PTR [esi]
c001e4e6:	e8 e7 f2 ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001e4eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e4f2:	89 c6                	mov    esi,eax
c001e4f4:	89 d7                	mov    edi,edx
c001e4f6:	e8 43 f5 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e4fb:	57                   	push   edi
c001e4fc:	56                   	push   esi
c001e4fd:	52                   	push   edx
c001e4fe:	50                   	push   eax
c001e4ff:	e8 08 f5 ff ff       	call   c001da0c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e504:	e9 86 00 00 00       	jmp    c001e58f <Vm::x87Handler(regs*)+0xa14>
c001e509:	31 c0                	xor    eax,eax
c001e50b:	80 fa 07             	cmp    dl,0x7
c001e50e:	0f 85 c8 00 00 00    	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001e514:	83 ec 0c             	sub    esp,0xc
c001e517:	6a 00                	push   0x0
c001e519:	e8 20 f5 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e51e:	89 c7                	mov    edi,eax
c001e520:	89 d5                	mov    ebp,edx
c001e522:	58                   	pop    eax
c001e523:	5a                   	pop    edx
c001e524:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e527:	ff 36                	push   DWORD PTR [esi]
c001e529:	e8 a4 f2 ff ff       	call   c001d7d2 <Vm::fpu64ToInternal(unsigned long long)>
c001e52e:	83 c4 10             	add    esp,0x10
c001e531:	55                   	push   ebp
c001e532:	57                   	push   edi
c001e533:	52                   	push   edx
c001e534:	50                   	push   eax
c001e535:	e8 d2 f4 ff ff       	call   c001da0c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e53a:	83 c4 0c             	add    esp,0xc
c001e53d:	eb 53                	jmp    c001e592 <Vm::x87Handler(regs*)+0xa17>
c001e53f:	31 c0                	xor    eax,eax
c001e541:	80 fa 02             	cmp    dl,0x2
c001e544:	0f 85 92 00 00 00    	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001e54a:	83 ec 0c             	sub    esp,0xc
c001e54d:	6a 00                	push   0x0
c001e54f:	e8 ea f4 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e554:	59                   	pop    ecx
c001e555:	5f                   	pop    edi
c001e556:	52                   	push   edx
c001e557:	50                   	push   eax
c001e558:	e8 27 f2 ff ff       	call   c001d784 <Vm::fpuInternalTo64(unsigned long long)>
c001e55d:	eb 70                	jmp    c001e5cf <Vm::x87Handler(regs*)+0xa54>
c001e55f:	31 c0                	xor    eax,eax
c001e561:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001e566:	75 74                	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001e568:	50                   	push   eax
c001e569:	50                   	push   eax
c001e56a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e56d:	31 d2                	xor    edx,edx
c001e56f:	52                   	push   edx
c001e570:	50                   	push   eax
c001e571:	e8 f6 f2 ff ff       	call   c001d86c <Vm::fpuLongToFloat(long long)>
c001e576:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e57d:	89 c6                	mov    esi,eax
c001e57f:	89 d7                	mov    edi,edx
c001e581:	e8 b8 f4 ff ff       	call   c001da3e <Vm::fpuGetReg(int)>
c001e586:	57                   	push   edi
c001e587:	56                   	push   esi
c001e588:	52                   	push   edx
c001e589:	50                   	push   eax
c001e58a:	e8 5e f4 ff ff       	call   c001d9ed <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e58f:	83 c4 1c             	add    esp,0x1c
c001e592:	52                   	push   edx
c001e593:	50                   	push   eax
c001e594:	6a 00                	push   0x0
c001e596:	e8 e6 f4 ff ff       	call   c001da81 <Vm::fpuSetReg(int, unsigned long long)>
c001e59b:	e9 f2 f7 ff ff       	jmp    c001dd92 <Vm::x87Handler(regs*)+0x217>
c001e5a0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e5a4:	80 fa 05             	cmp    dl,0x5
c001e5a7:	75 11                	jne    c001e5ba <Vm::x87Handler(regs*)+0xa3f>
c001e5a9:	55                   	push   ebp
c001e5aa:	55                   	push   ebp
c001e5ab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e5ae:	ff 36                	push   DWORD PTR [esi]
c001e5b0:	e8 81 f2 ff ff       	call   c001d836 <Vm::fpuULongToFloat(unsigned long long)>
c001e5b5:	e9 cf f7 ff ff       	jmp    c001dd89 <Vm::x87Handler(regs*)+0x20e>
c001e5ba:	31 c0                	xor    eax,eax
c001e5bc:	80 fa 07             	cmp    dl,0x7
c001e5bf:	75 1b                	jne    c001e5dc <Vm::x87Handler(regs*)+0xa61>
c001e5c1:	e8 63 f5 ff ff       	call   c001db29 <Vm::fpuPop()>
c001e5c6:	51                   	push   ecx
c001e5c7:	51                   	push   ecx
c001e5c8:	52                   	push   edx
c001e5c9:	50                   	push   eax
c001e5ca:	e8 0c f2 ff ff       	call   c001d7db <Vm::fpuFloatToLong(unsigned long long)>
c001e5cf:	83 c4 10             	add    esp,0x10
c001e5d2:	89 06                	mov    DWORD PTR [esi],eax
c001e5d4:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001e5d7:	e9 f8 f7 ff ff       	jmp    c001ddd4 <Vm::x87Handler(regs*)+0x259>
c001e5dc:	83 c4 1c             	add    esp,0x1c
c001e5df:	5b                   	pop    ebx
c001e5e0:	5e                   	pop    esi
c001e5e1:	5f                   	pop    edi
c001e5e2:	5d                   	pop    ebp
c001e5e3:	c3                   	ret    

c001e5e4 <__static_initialization_and_destruction_0(int, int)>:
c001e5e4:	83 ec 0c             	sub    esp,0xc
c001e5e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e5ec:	75 1a                	jne    c001e608 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e5ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e5f6:	75 10                	jne    c001e608 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	68 80 cd 02 c0       	push   0xc002cd80
c001e600:	e8 5b 82 00 00       	call   c0026860 <Vm::_FPUState::_FPUState()>
c001e605:	83 c4 10             	add    esp,0x10
c001e608:	90                   	nop
c001e609:	83 c4 0c             	add    esp,0xc
c001e60c:	c3                   	ret    

c001e60d <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	83 ec 08             	sub    esp,0x8
c001e613:	68 ff ff 00 00       	push   0xffff
c001e618:	6a 01                	push   0x1
c001e61a:	e8 c5 ff ff ff       	call   c001e5e4 <__static_initialization_and_destruction_0(int, int)>
c001e61f:	83 c4 10             	add    esp,0x10
c001e622:	83 c4 0c             	add    esp,0xc
c001e625:	c3                   	ret    

c001e626 <FAT::getName()>:
c001e626:	b8 24 9d 02 c0       	mov    eax,0xc0029d24
c001e62b:	c3                   	ret    

c001e62c <FAT::tell(void*, unsigned long long*)>:
c001e62c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e631:	75 06                	jne    c001e639 <FAT::tell(void*, unsigned long long*)+0xd>
c001e633:	b8 04 00 00 00       	mov    eax,0x4
c001e638:	c3                   	ret    
c001e639:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e63e:	75 06                	jne    c001e646 <FAT::tell(void*, unsigned long long*)+0x1a>
c001e640:	b8 04 00 00 00       	mov    eax,0x4
c001e645:	c3                   	ret    
c001e646:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e64a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001e64d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001e650:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e654:	89 01                	mov    DWORD PTR [ecx],eax
c001e656:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e659:	b8 00 00 00 00       	mov    eax,0x0
c001e65e:	c3                   	ret    
c001e65f:	90                   	nop

c001e660 <FAT::stat(void*, unsigned long long*)>:
c001e660:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e665:	75 06                	jne    c001e66d <FAT::stat(void*, unsigned long long*)+0xd>
c001e667:	b8 04 00 00 00       	mov    eax,0x4
c001e66c:	c3                   	ret    
c001e66d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e672:	75 06                	jne    c001e67a <FAT::stat(void*, unsigned long long*)+0x1a>
c001e674:	b8 04 00 00 00       	mov    eax,0x4
c001e679:	c3                   	ret    
c001e67a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e67e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e681:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e684:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e688:	89 01                	mov    DWORD PTR [ecx],eax
c001e68a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e68d:	b8 00 00 00 00       	mov    eax,0x0
c001e692:	c3                   	ret    
c001e693:	90                   	nop

c001e694 <FAT::~FAT()>:
c001e694:	83 ec 0c             	sub    esp,0xc
c001e697:	ba a8 9d 02 c0       	mov    edx,0xc0029da8
c001e69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a0:	89 10                	mov    DWORD PTR [eax],edx
c001e6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a6:	83 ec 0c             	sub    esp,0xc
c001e6a9:	50                   	push   eax
c001e6aa:	e8 07 43 ff ff       	call   c00129b6 <Filesystem::~Filesystem()>
c001e6af:	83 c4 10             	add    esp,0x10
c001e6b2:	90                   	nop
c001e6b3:	83 c4 0c             	add    esp,0xc
c001e6b6:	c3                   	ret    
c001e6b7:	90                   	nop

c001e6b8 <FAT::~FAT()>:
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	83 ec 0c             	sub    esp,0xc
c001e6be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6c2:	e8 cd ff ff ff       	call   c001e694 <FAT::~FAT()>
c001e6c7:	83 c4 10             	add    esp,0x10
c001e6ca:	83 ec 08             	sub    esp,0x8
c001e6cd:	6a 08                	push   0x8
c001e6cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6d3:	e8 d5 3e ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001e6d8:	83 c4 10             	add    esp,0x10
c001e6db:	83 c4 0c             	add    esp,0xc
c001e6de:	c3                   	ret    
c001e6df:	90                   	nop

c001e6e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e6e0:	83 ec 1c             	sub    esp,0x1c
c001e6e3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e6ea:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e6ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6f3:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001e6fa:	83 f8 ff             	cmp    eax,0xffffffff
c001e6fd:	75 34                	jne    c001e733 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001e6ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e703:	88 c2                	mov    dl,al
c001e705:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001e70a:	01 d0                	add    eax,edx
c001e70c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e710:	8b 15 e0 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cde0
c001e716:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e71a:	89 14 85 00 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3200],edx
c001e721:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001e726:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e72a:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c001e731:	eb 17                	jmp    c001e74a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001e733:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e737:	88 c2                	mov    dl,al
c001e739:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e73d:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001e744:	01 d0                	add    eax,edx
c001e746:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e74a:	83 ec 04             	sub    esp,0x4
c001e74d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e751:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e755:	8d 44 24 15          	lea    eax,[esp+0x15]
c001e759:	50                   	push   eax
c001e75a:	e8 79 83 fe ff       	call   c0006ad8 <f_getlabel>
c001e75f:	83 c4 10             	add    esp,0x10
c001e762:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e766:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e76b:	75 07                	jne    c001e774 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001e76d:	b8 00 00 00 00       	mov    eax,0x0
c001e772:	eb 05                	jmp    c001e779 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001e774:	b8 01 00 00 00       	mov    eax,0x1
c001e779:	83 c4 1c             	add    esp,0x1c
c001e77c:	c3                   	ret    
c001e77d:	90                   	nop

c001e77e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001e77e:	57                   	push   edi
c001e77f:	83 ec 58             	sub    esp,0x58
c001e782:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001e78a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e78e:	b9 0f 00 00 00       	mov    ecx,0xf
c001e793:	b8 00 00 00 00       	mov    eax,0x0
c001e798:	fc                   	cld    
c001e799:	89 d7                	mov    edi,edx
c001e79b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e79d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e7a1:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001e7a8:	83 f8 ff             	cmp    eax,0xffffffff
c001e7ab:	75 34                	jne    c001e7e1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001e7ad:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e7b1:	88 c2                	mov    dl,al
c001e7b3:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001e7b8:	01 d0                	add    eax,edx
c001e7ba:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e7be:	8b 15 e0 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cde0
c001e7c4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e7c8:	89 14 85 00 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3200],edx
c001e7cf:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001e7d4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001e7d8:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c001e7df:	eb 17                	jmp    c001e7f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001e7e1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e7e5:	88 c2                	mov    dl,al
c001e7e7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e7eb:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001e7f2:	01 d0                	add    eax,edx
c001e7f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e7f8:	83 ec 08             	sub    esp,0x8
c001e7fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001e7ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e803:	50                   	push   eax
c001e804:	e8 c8 1f fe ff       	call   c00007d1 <strcat>
c001e809:	83 c4 10             	add    esp,0x10
c001e80c:	83 ec 0c             	sub    esp,0xc
c001e80f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e813:	50                   	push   eax
c001e814:	e8 ad 84 fe ff       	call   c0006cc6 <f_setlabel>
c001e819:	83 c4 10             	add    esp,0x10
c001e81c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e820:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001e825:	75 07                	jne    c001e82e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001e827:	b8 00 00 00 00       	mov    eax,0x0
c001e82c:	eb 05                	jmp    c001e833 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001e82e:	b8 01 00 00 00       	mov    eax,0x1
c001e833:	83 c4 58             	add    esp,0x58
c001e836:	5f                   	pop    edi
c001e837:	c3                   	ret    

c001e838 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001e838:	83 ec 2c             	sub    esp,0x2c
c001e83b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001e843:	83 ec 08             	sub    esp,0x8
c001e846:	68 48 9d 02 c0       	push   0xc0029d48
c001e84b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e84f:	e8 17 1f fe ff       	call   c000076b <strcmp>
c001e854:	83 c4 10             	add    esp,0x10
c001e857:	85 c0                	test   eax,eax
c001e859:	0f 94 c0             	sete   al
c001e85c:	84 c0                	test   al,al
c001e85e:	74 0d                	je     c001e86d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001e860:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e868:	e9 a6 00 00 00       	jmp    c001e913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e86d:	83 ec 08             	sub    esp,0x8
c001e870:	68 3a 9d 02 c0       	push   0xc0029d3a
c001e875:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e879:	e8 ed 1e fe ff       	call   c000076b <strcmp>
c001e87e:	83 c4 10             	add    esp,0x10
c001e881:	85 c0                	test   eax,eax
c001e883:	0f 94 c0             	sete   al
c001e886:	84 c0                	test   al,al
c001e888:	74 0a                	je     c001e894 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001e88a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e892:	eb 7f                	jmp    c001e913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e894:	83 ec 08             	sub    esp,0x8
c001e897:	68 40 9d 02 c0       	push   0xc0029d40
c001e89c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e8a0:	e8 c6 1e fe ff       	call   c000076b <strcmp>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	85 c0                	test   eax,eax
c001e8aa:	0f 94 c0             	sete   al
c001e8ad:	84 c0                	test   al,al
c001e8af:	74 0a                	je     c001e8bb <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001e8b1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001e8b9:	eb 58                	jmp    c001e913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e8bb:	83 ec 08             	sub    esp,0x8
c001e8be:	68 6c 6f 02 c0       	push   0xc0026f6c
c001e8c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e8c7:	e8 9f 1e fe ff       	call   c000076b <strcmp>
c001e8cc:	83 c4 10             	add    esp,0x10
c001e8cf:	85 c0                	test   eax,eax
c001e8d1:	0f 94 c0             	sete   al
c001e8d4:	84 c0                	test   al,al
c001e8d6:	74 0a                	je     c001e8e2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001e8d8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001e8e0:	eb 31                	jmp    c001e913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e8e2:	83 ec 08             	sub    esp,0x8
c001e8e5:	68 46 9d 02 c0       	push   0xc0029d46
c001e8ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e8ee:	e8 78 1e fe ff       	call   c000076b <strcmp>
c001e8f3:	83 c4 10             	add    esp,0x10
c001e8f6:	85 c0                	test   eax,eax
c001e8f8:	0f 94 c0             	sete   al
c001e8fb:	84 c0                	test   al,al
c001e8fd:	74 0a                	je     c001e909 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001e8ff:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001e907:	eb 0a                	jmp    c001e913 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001e909:	b8 08 00 00 00       	mov    eax,0x8
c001e90e:	e9 04 01 00 00       	jmp    c001ea17 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e913:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001e91a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001e91f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e923:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001e92a:	83 f8 ff             	cmp    eax,0xffffffff
c001e92d:	75 34                	jne    c001e963 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e92f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e933:	88 c2                	mov    dl,al
c001e935:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001e93a:	01 d0                	add    eax,edx
c001e93c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e940:	8b 15 e0 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cde0
c001e946:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e94a:	89 14 85 00 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3200],edx
c001e951:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001e956:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e95a:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c001e961:	eb 17                	jmp    c001e97a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e963:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e967:	88 c2                	mov    dl,al
c001e969:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e96d:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001e974:	01 d0                	add    eax,edx
c001e976:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e97a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e97e:	88 04 24             	mov    BYTE PTR [esp],al
c001e981:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e985:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e989:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e991:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e996:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e99e:	83 ec 0c             	sub    esp,0xc
c001e9a1:	68 00 20 00 00       	push   0x2000
c001e9a6:	e8 15 0b ff ff       	call   c000f4c0 <malloc>
c001e9ab:	83 c4 10             	add    esp,0x10
c001e9ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e9b2:	68 00 20 00 00       	push   0x2000
c001e9b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9bb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9bf:	50                   	push   eax
c001e9c0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e9c4:	50                   	push   eax
c001e9c5:	e8 47 87 fe ff       	call   c0007111 <f_mkfs>
c001e9ca:	83 c4 10             	add    esp,0x10
c001e9cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e9d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e9d6:	75 07                	jne    c001e9df <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e9d8:	b8 00 00 00 00       	mov    eax,0x0
c001e9dd:	eb 38                	jmp    c001ea17 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e9df:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e9e4:	75 17                	jne    c001e9fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e9e6:	83 ec 0c             	sub    esp,0xc
c001e9e9:	68 78 9d 02 c0       	push   0xc0029d78
c001e9ee:	e8 9a 3c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001e9f3:	83 c4 10             	add    esp,0x10
c001e9f6:	b8 09 00 00 00       	mov    eax,0x9
c001e9fb:	eb 1a                	jmp    c001ea17 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ea01:	83 ec 08             	sub    esp,0x8
c001ea04:	50                   	push   eax
c001ea05:	68 4c 9d 02 c0       	push   0xc0029d4c
c001ea0a:	e8 7e 3c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ea0f:	83 c4 10             	add    esp,0x10
c001ea12:	b8 01 00 00 00       	mov    eax,0x1
c001ea17:	83 c4 2c             	add    esp,0x2c
c001ea1a:	c3                   	ret    
c001ea1b:	90                   	nop

c001ea1c <FAT::tryMount(LogicalDisk*, int)>:
c001ea1c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ea22:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001ea27:	83 f8 14             	cmp    eax,0x14
c001ea2a:	75 17                	jne    c001ea43 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001ea2c:	83 ec 0c             	sub    esp,0xc
c001ea2f:	68 5e 9d 02 c0       	push   0xc0029d5e
c001ea34:	e8 1e a7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	b0 00                	mov    al,0x0
c001ea3e:	e9 d7 01 00 00       	jmp    c001ec1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ea43:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ea4a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ea50:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ea56:	3d 00 02 00 00       	cmp    eax,0x200
c001ea5b:	74 07                	je     c001ea64 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001ea5d:	b0 00                	mov    al,0x0
c001ea5f:	e9 b6 01 00 00       	jmp    c001ec1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ea64:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ea6c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ea73:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001ea7a:	83 f8 ff             	cmp    eax,0xffffffff
c001ea7d:	74 07                	je     c001ea86 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001ea7f:	b0 01                	mov    al,0x1
c001ea81:	e9 94 01 00 00       	jmp    c001ec1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ea86:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ea90:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ea98:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ea9f:	88 c2                	mov    dl,al
c001eaa1:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001eaa6:	01 d0                	add    eax,edx
c001eaa8:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001eaaf:	8b 15 e0 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cde0
c001eab5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001eabc:	89 14 85 00 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3200],edx
c001eac3:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001eac8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001eacf:	89 14 85 80 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3180],edx
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	68 54 02 00 00       	push   0x254
c001eade:	e8 dd 09 ff ff       	call   c000f4c0 <malloc>
c001eae3:	83 c4 10             	add    esp,0x10
c001eae6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001eaed:	83 ec 04             	sub    esp,0x4
c001eaf0:	6a 00                	push   0x0
c001eaf2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001eaf9:	50                   	push   eax
c001eafa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001eb01:	e8 c9 61 fe ff       	call   c0004ccf <f_mount>
c001eb06:	83 c4 10             	add    esp,0x10
c001eb09:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001eb10:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001eb18:	74 19                	je     c001eb33 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001eb1a:	83 ec 0c             	sub    esp,0xc
c001eb1d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001eb24:	e8 b7 09 ff ff       	call   c000f4e0 <rfree>
c001eb29:	83 c4 10             	add    esp,0x10
c001eb2c:	b0 00                	mov    al,0x0
c001eb2e:	e9 e7 00 00 00       	jmp    c001ec1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001eb33:	83 ec 04             	sub    esp,0x4
c001eb36:	68 00 01 00 00       	push   0x100
c001eb3b:	6a 00                	push   0x0
c001eb3d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001eb44:	50                   	push   eax
c001eb45:	e8 31 1b fe ff       	call   c000067b <memset>
c001eb4a:	83 c4 10             	add    esp,0x10
c001eb4d:	83 ec 08             	sub    esp,0x8
c001eb50:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001eb57:	50                   	push   eax
c001eb58:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001eb5f:	50                   	push   eax
c001eb60:	e8 6c 1c fe ff       	call   c00007d1 <strcat>
c001eb65:	83 c4 10             	add    esp,0x10
c001eb68:	83 ec 08             	sub    esp,0x8
c001eb6b:	68 6c 9d 02 c0       	push   0xc0029d6c
c001eb70:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001eb77:	50                   	push   eax
c001eb78:	e8 54 1c fe ff       	call   c00007d1 <strcat>
c001eb7d:	83 c4 10             	add    esp,0x10
c001eb80:	83 ec 04             	sub    esp,0x4
c001eb83:	6a 01                	push   0x1
c001eb85:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001eb8c:	50                   	push   eax
c001eb8d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eb91:	50                   	push   eax
c001eb92:	e8 9a 61 fe ff       	call   c0004d31 <f_open>
c001eb97:	83 c4 10             	add    esp,0x10
c001eb9a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001eba1:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001eba8:	85 c0                	test   eax,eax
c001ebaa:	74 0a                	je     c001ebb6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001ebac:	78 2d                	js     c001ebdb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ebae:	83 e8 04             	sub    eax,0x4
c001ebb1:	83 f8 01             	cmp    eax,0x1
c001ebb4:	77 25                	ja     c001ebdb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ebb6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ebbe:	83 ec 0c             	sub    esp,0xc
c001ebc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ebc5:	50                   	push   eax
c001ebc6:	e8 b8 6c fe ff       	call   c0005883 <f_close>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	90                   	nop
c001ebcf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ebd7:	74 3a                	je     c001ec13 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001ebd9:	eb 2d                	jmp    c001ec08 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001ebdb:	83 ec 0c             	sub    esp,0xc
c001ebde:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ebe5:	e8 f6 08 ff ff       	call   c000f4e0 <rfree>
c001ebea:	83 c4 10             	add    esp,0x10
c001ebed:	83 ec 04             	sub    esp,0x4
c001ebf0:	6a 00                	push   0x0
c001ebf2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ebf9:	50                   	push   eax
c001ebfa:	6a 00                	push   0x0
c001ebfc:	e8 ce 60 fe ff       	call   c0004ccf <f_mount>
c001ec01:	83 c4 10             	add    esp,0x10
c001ec04:	b0 00                	mov    al,0x0
c001ec06:	eb 12                	jmp    c001ec1a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ec08:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c001ec0d:	40                   	inc    eax
c001ec0e:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c001ec13:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ec1a:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ec20:	c3                   	ret    
c001ec21:	90                   	nop

c001ec22 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ec22:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001ec28:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001ec30:	74 0a                	je     c001ec3c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001ec32:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001ec3a:	75 0a                	jne    c001ec46 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001ec3c:	b8 04 00 00 00       	mov    eax,0x4
c001ec41:	e9 db 00 00 00       	jmp    c001ed21 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ec46:	83 ec 08             	sub    esp,0x8
c001ec49:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec50:	50                   	push   eax
c001ec51:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001ec58:	e8 30 72 fe ff       	call   c0005e8d <f_readdir>
c001ec5d:	83 c4 10             	add    esp,0x10
c001ec60:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001ec67:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ec6d:	83 ec 0c             	sub    esp,0xc
c001ec70:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ec77:	83 c0 1a             	add    eax,0x1a
c001ec7a:	50                   	push   eax
c001ec7b:	e8 18 1a fe ff       	call   c0000698 <strlen>
c001ec80:	83 c4 10             	add    esp,0x10
c001ec83:	ba 00 00 00 00       	mov    edx,0x0
c001ec88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ec8c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ec90:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ec97:	0f b6 c0             	movzx  eax,al
c001ec9a:	83 e0 10             	and    eax,0x10
c001ec9d:	74 07                	je     c001eca6 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ec9f:	b8 02 00 00 00       	mov    eax,0x2
c001eca4:	eb 05                	jmp    c001ecab <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001eca6:	b8 01 00 00 00       	mov    eax,0x1
c001ecab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ecaf:	83 ec 08             	sub    esp,0x8
c001ecb2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ecb9:	83 c0 1a             	add    eax,0x1a
c001ecbc:	50                   	push   eax
c001ecbd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ecc1:	83 c0 10             	add    eax,0x10
c001ecc4:	50                   	push   eax
c001ecc5:	e8 50 1a fe ff       	call   c000071a <strcpy>
c001ecca:	83 c4 10             	add    esp,0x10
c001eccd:	83 ec 04             	sub    esp,0x4
c001ecd0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001ecd7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ecdb:	50                   	push   eax
c001ecdc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001ece3:	e8 5d 19 fe ff       	call   c0000645 <memcpy>
c001ece8:	83 c4 10             	add    esp,0x10
c001eceb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001ecf2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ecf8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001ecff:	84 c0                	test   al,al
c001ed01:	75 07                	jne    c001ed0a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001ed03:	b8 07 00 00 00       	mov    eax,0x7
c001ed08:	eb 17                	jmp    c001ed21 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ed0a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001ed11:	85 c0                	test   eax,eax
c001ed13:	75 07                	jne    c001ed1c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001ed15:	b8 00 00 00 00       	mov    eax,0x0
c001ed1a:	eb 05                	jmp    c001ed21 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ed1c:	b8 01 00 00 00       	mov    eax,0x1
c001ed21:	81 c4 3c 02 00 00    	add    esp,0x23c
c001ed27:	c3                   	ret    

c001ed28 <FAT::read(void*, unsigned long, void*, int*)>:
c001ed28:	83 ec 1c             	sub    esp,0x1c
c001ed2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed30:	74 07                	je     c001ed39 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001ed32:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ed37:	75 07                	jne    c001ed40 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001ed39:	b8 04 00 00 00       	mov    eax,0x4
c001ed3e:	eb 3d                	jmp    c001ed7d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ed40:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed44:	50                   	push   eax
c001ed45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ed49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ed4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed51:	e8 17 64 fe ff       	call   c000516d <f_read>
c001ed56:	83 c4 10             	add    esp,0x10
c001ed59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed61:	89 c2                	mov    edx,eax
c001ed63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed67:	89 10                	mov    DWORD PTR [eax],edx
c001ed69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed6d:	85 c0                	test   eax,eax
c001ed6f:	75 07                	jne    c001ed78 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001ed71:	b8 00 00 00 00       	mov    eax,0x0
c001ed76:	eb 05                	jmp    c001ed7d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ed78:	b8 01 00 00 00       	mov    eax,0x1
c001ed7d:	83 c4 1c             	add    esp,0x1c
c001ed80:	c3                   	ret    
c001ed81:	90                   	nop

c001ed82 <FAT::write(void*, unsigned long, void*, int*)>:
c001ed82:	83 ec 1c             	sub    esp,0x1c
c001ed85:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ed8a:	74 07                	je     c001ed93 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001ed8c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ed91:	75 07                	jne    c001ed9a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001ed93:	b8 04 00 00 00       	mov    eax,0x4
c001ed98:	eb 3d                	jmp    c001edd7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001ed9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed9e:	50                   	push   eax
c001ed9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eda3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001eda7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edab:	e8 3d 66 fe ff       	call   c00053ed <f_write>
c001edb0:	83 c4 10             	add    esp,0x10
c001edb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001edbb:	89 c2                	mov    edx,eax
c001edbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001edc1:	89 10                	mov    DWORD PTR [eax],edx
c001edc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edc7:	85 c0                	test   eax,eax
c001edc9:	75 07                	jne    c001edd2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001edcb:	b8 00 00 00 00       	mov    eax,0x0
c001edd0:	eb 05                	jmp    c001edd7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001edd2:	b8 01 00 00 00       	mov    eax,0x1
c001edd7:	83 c4 1c             	add    esp,0x1c
c001edda:	c3                   	ret    
c001eddb:	90                   	nop

c001eddc <FAT::close(void*)>:
c001eddc:	83 ec 1c             	sub    esp,0x1c
c001eddf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ede4:	75 07                	jne    c001eded <FAT::close(void*)+0x11>
c001ede6:	b8 04 00 00 00       	mov    eax,0x4
c001edeb:	eb 36                	jmp    c001ee23 <FAT::close(void*)+0x47>
c001eded:	83 ec 0c             	sub    esp,0xc
c001edf0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001edf4:	e8 8a 6a fe ff       	call   c0005883 <f_close>
c001edf9:	83 c4 10             	add    esp,0x10
c001edfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee00:	83 ec 0c             	sub    esp,0xc
c001ee03:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee07:	e8 c4 06 ff ff       	call   c000f4d0 <free>
c001ee0c:	83 c4 10             	add    esp,0x10
c001ee0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee13:	85 c0                	test   eax,eax
c001ee15:	75 07                	jne    c001ee1e <FAT::close(void*)+0x42>
c001ee17:	b8 00 00 00 00       	mov    eax,0x0
c001ee1c:	eb 05                	jmp    c001ee23 <FAT::close(void*)+0x47>
c001ee1e:	b8 01 00 00 00       	mov    eax,0x1
c001ee23:	83 c4 1c             	add    esp,0x1c
c001ee26:	c3                   	ret    
c001ee27:	90                   	nop

c001ee28 <FAT::closeDir(void*)>:
c001ee28:	83 ec 1c             	sub    esp,0x1c
c001ee2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ee30:	75 07                	jne    c001ee39 <FAT::closeDir(void*)+0x11>
c001ee32:	b8 04 00 00 00       	mov    eax,0x4
c001ee37:	eb 36                	jmp    c001ee6f <FAT::closeDir(void*)+0x47>
c001ee39:	83 ec 0c             	sub    esp,0xc
c001ee3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee40:	e8 26 70 fe ff       	call   c0005e6b <f_closedir>
c001ee45:	83 c4 10             	add    esp,0x10
c001ee48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ee53:	e8 78 06 ff ff       	call   c000f4d0 <free>
c001ee58:	83 c4 10             	add    esp,0x10
c001ee5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee5f:	85 c0                	test   eax,eax
c001ee61:	75 07                	jne    c001ee6a <FAT::closeDir(void*)+0x42>
c001ee63:	b8 00 00 00 00       	mov    eax,0x0
c001ee68:	eb 05                	jmp    c001ee6f <FAT::closeDir(void*)+0x47>
c001ee6a:	b8 01 00 00 00       	mov    eax,0x1
c001ee6f:	83 c4 1c             	add    esp,0x1c
c001ee72:	c3                   	ret    
c001ee73:	90                   	nop

c001ee74 <FAT::seek(void*, unsigned long long)>:
c001ee74:	83 ec 2c             	sub    esp,0x2c
c001ee77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ee83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee87:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ee8c:	75 07                	jne    c001ee95 <FAT::seek(void*, unsigned long long)+0x21>
c001ee8e:	b8 04 00 00 00       	mov    eax,0x4
c001ee93:	eb 2f                	jmp    c001eec4 <FAT::seek(void*, unsigned long long)+0x50>
c001ee95:	83 ec 04             	sub    esp,0x4
c001ee98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ee9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eea0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001eea4:	e8 09 6a fe ff       	call   c00058b2 <f_lseek>
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001eeb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eeb4:	85 c0                	test   eax,eax
c001eeb6:	75 07                	jne    c001eebf <FAT::seek(void*, unsigned long long)+0x4b>
c001eeb8:	b8 00 00 00 00       	mov    eax,0x0
c001eebd:	eb 05                	jmp    c001eec4 <FAT::seek(void*, unsigned long long)+0x50>
c001eebf:	b8 01 00 00 00       	mov    eax,0x1
c001eec4:	83 c4 2c             	add    esp,0x2c
c001eec7:	c3                   	ret    

c001eec8 <fatWrapperReadDisk>:
c001eec8:	83 ec 1c             	sub    esp,0x1c
c001eecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eecf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001eed3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eed7:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001eede:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001eee2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eee7:	8b 04 85 40 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd41c0]
c001eeee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001eef2:	83 ec 0c             	sub    esp,0xc
c001eef5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eef9:	52                   	push   edx
c001eefa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001eefe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef02:	50                   	push   eax
c001ef03:	e8 98 6d ff ff       	call   c0015ca0 <LogicalDisk::read(unsigned long long, int, void*)>
c001ef08:	83 c4 20             	add    esp,0x20
c001ef0b:	83 c4 1c             	add    esp,0x1c
c001ef0e:	c3                   	ret    

c001ef0f <fatWrapperWriteDisk>:
c001ef0f:	83 ec 1c             	sub    esp,0x1c
c001ef12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef16:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ef1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef1e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ef25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ef29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ef2e:	8b 04 85 40 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd41c0]
c001ef35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ef39:	83 ec 0c             	sub    esp,0xc
c001ef3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef40:	52                   	push   edx
c001ef41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ef49:	50                   	push   eax
c001ef4a:	e8 bd 6d ff ff       	call   c0015d0c <LogicalDisk::write(unsigned long long, int, void*)>
c001ef4f:	83 c4 20             	add    esp,0x20
c001ef52:	83 c4 1c             	add    esp,0x1c
c001ef55:	c3                   	ret    

c001ef56 <fatWrapperIoctl>:
c001ef56:	53                   	push   ebx
c001ef57:	83 ec 28             	sub    esp,0x28
c001ef5a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ef5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ef62:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ef66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ef6a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001ef6f:	75 31                	jne    c001efa2 <fatWrapperIoctl+0x4c>
c001ef71:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ef79:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ef7e:	8b 04 85 40 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd41c0]
c001ef85:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ef8b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ef91:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ef95:	66 89 02             	mov    WORD PTR [edx],ax
c001ef98:	b8 00 00 00 00       	mov    eax,0x0
c001ef9d:	e9 b2 00 00 00       	jmp    c001f054 <fatWrapperIoctl+0xfe>
c001efa2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001efa7:	75 6a                	jne    c001f013 <fatWrapperIoctl+0xbd>
c001efa9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001efad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001efb1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001efb6:	8b 04 85 40 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd41c0]
c001efbd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001efc3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001efc9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001efcf:	89 c8                	mov    eax,ecx
c001efd1:	89 da                	mov    edx,ebx
c001efd3:	0f a4 c2 0a          	shld   edx,eax,0xa
c001efd7:	c1 e0 0a             	shl    eax,0xa
c001efda:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001efdf:	8b 0c 8d 40 be 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd41c0]
c001efe6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001efec:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001eff2:	89 cb                	mov    ebx,ecx
c001eff4:	c1 fb 1f             	sar    ebx,0x1f
c001eff7:	53                   	push   ebx
c001eff8:	51                   	push   ecx
c001eff9:	52                   	push   edx
c001effa:	50                   	push   eax
c001effb:	e8 0c 55 00 00       	call   c002450c <__udivdi3>
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f007:	89 01                	mov    DWORD PTR [ecx],eax
c001f009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f00c:	b8 00 00 00 00       	mov    eax,0x0
c001f011:	eb 41                	jmp    c001f054 <fatWrapperIoctl+0xfe>
c001f013:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f018:	75 07                	jne    c001f021 <fatWrapperIoctl+0xcb>
c001f01a:	b8 00 00 00 00       	mov    eax,0x0
c001f01f:	eb 33                	jmp    c001f054 <fatWrapperIoctl+0xfe>
c001f021:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001f026:	75 19                	jne    c001f041 <fatWrapperIoctl+0xeb>
c001f028:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f02c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f030:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f034:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001f03a:	b8 00 00 00 00       	mov    eax,0x0
c001f03f:	eb 13                	jmp    c001f054 <fatWrapperIoctl+0xfe>
c001f041:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001f046:	75 07                	jne    c001f04f <fatWrapperIoctl+0xf9>
c001f048:	b8 00 00 00 00       	mov    eax,0x0
c001f04d:	eb 05                	jmp    c001f054 <fatWrapperIoctl+0xfe>
c001f04f:	b8 04 00 00 00       	mov    eax,0x4
c001f054:	83 c4 28             	add    esp,0x28
c001f057:	5b                   	pop    ebx
c001f058:	c3                   	ret    
c001f059:	90                   	nop

c001f05a <FAT::FAT()>:
c001f05a:	83 ec 1c             	sub    esp,0x1c
c001f05d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f061:	83 ec 0c             	sub    esp,0xc
c001f064:	50                   	push   eax
c001f065:	e8 28 39 ff ff       	call   c0012992 <Filesystem::Filesystem()>
c001f06a:	83 c4 10             	add    esp,0x10
c001f06d:	ba a8 9d 02 c0       	mov    edx,0xc0029da8
c001f072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f076:	89 10                	mov    DWORD PTR [eax],edx
c001f078:	c7 05 e0 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cde0,0x0
c001f082:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f08a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001f08f:	7f 15                	jg     c001f0a6 <FAT::FAT()+0x4c>
c001f091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f095:	c7 04 85 00 ce 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3200],0xffffffff
c001f0a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001f0a4:	eb e4                	jmp    c001f08a <FAT::FAT()+0x30>
c001f0a6:	90                   	nop
c001f0a7:	83 c4 1c             	add    esp,0x1c
c001f0aa:	c3                   	ret    
c001f0ab:	90                   	nop

c001f0ac <FAT::fixFilepath(char*)>:
c001f0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0b0:	8a 00                	mov    al,BYTE PTR [eax]
c001f0b2:	3c 40                	cmp    al,0x40
c001f0b4:	7e 2c                	jle    c001f0e2 <FAT::fixFilepath(char*)+0x36>
c001f0b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0ba:	8a 00                	mov    al,BYTE PTR [eax]
c001f0bc:	83 e8 41             	sub    eax,0x41
c001f0bf:	88 c2                	mov    dl,al
c001f0c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0c5:	88 10                	mov    BYTE PTR [eax],dl
c001f0c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0cb:	8a 00                	mov    al,BYTE PTR [eax]
c001f0cd:	0f be c0             	movsx  eax,al
c001f0d0:	8b 04 85 00 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3200]
c001f0d7:	83 c0 30             	add    eax,0x30
c001f0da:	88 c2                	mov    dl,al
c001f0dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0e0:	88 10                	mov    BYTE PTR [eax],dl
c001f0e2:	90                   	nop
c001f0e3:	c3                   	ret    

c001f0e4 <FAT::open(char const*, void**, FileOpenMode)>:
c001f0e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f0ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f0f2:	74 0a                	je     c001f0fe <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001f0f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f0fc:	75 0a                	jne    c001f108 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001f0fe:	b8 04 00 00 00       	mov    eax,0x4
c001f103:	e9 fd 00 00 00       	jmp    c001f205 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f108:	83 ec 08             	sub    esp,0x8
c001f10b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f112:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f116:	50                   	push   eax
c001f117:	e8 fe 15 fe ff       	call   c000071a <strcpy>
c001f11c:	83 c4 10             	add    esp,0x10
c001f11f:	83 ec 08             	sub    esp,0x8
c001f122:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f126:	50                   	push   eax
c001f127:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f12e:	e8 79 ff ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f13e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f145:	83 e0 01             	and    eax,0x1
c001f148:	74 08                	je     c001f152 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001f14a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001f152:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f159:	83 e0 04             	and    eax,0x4
c001f15c:	74 10                	je     c001f16e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001f15e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001f166:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f16e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f175:	83 e0 02             	and    eax,0x2
c001f178:	74 08                	je     c001f182 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001f17a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f182:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f189:	83 e0 08             	and    eax,0x8
c001f18c:	74 08                	je     c001f196 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001f18e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001f196:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f19d:	83 e0 10             	and    eax,0x10
c001f1a0:	74 08                	je     c001f1aa <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001f1a2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	68 50 02 00 00       	push   0x250
c001f1b2:	e8 09 03 ff ff       	call   c000f4c0 <malloc>
c001f1b7:	83 c4 10             	add    esp,0x10
c001f1ba:	89 c2                	mov    edx,eax
c001f1bc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f1c3:	89 10                	mov    DWORD PTR [eax],edx
c001f1c5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f1cd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f1d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1d6:	83 ec 04             	sub    esp,0x4
c001f1d9:	52                   	push   edx
c001f1da:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f1de:	52                   	push   edx
c001f1df:	50                   	push   eax
c001f1e0:	e8 4c 5b fe ff       	call   c0004d31 <f_open>
c001f1e5:	83 c4 10             	add    esp,0x10
c001f1e8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f1ef:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f1f7:	74 07                	je     c001f200 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001f1f9:	b8 01 00 00 00       	mov    eax,0x1
c001f1fe:	eb 05                	jmp    c001f205 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f200:	b8 00 00 00 00       	mov    eax,0x0
c001f205:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f20b:	c3                   	ret    

c001f20c <FAT::openDir(char const*, void**)>:
c001f20c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f212:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f21a:	74 0a                	je     c001f226 <FAT::openDir(char const*, void**)+0x1a>
c001f21c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f224:	75 07                	jne    c001f22d <FAT::openDir(char const*, void**)+0x21>
c001f226:	b8 04 00 00 00       	mov    eax,0x4
c001f22b:	eb 7d                	jmp    c001f2aa <FAT::openDir(char const*, void**)+0x9e>
c001f22d:	83 ec 08             	sub    esp,0x8
c001f230:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f237:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f23b:	50                   	push   eax
c001f23c:	e8 d9 14 fe ff       	call   c000071a <strcpy>
c001f241:	83 c4 10             	add    esp,0x10
c001f244:	83 ec 08             	sub    esp,0x8
c001f247:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f24b:	50                   	push   eax
c001f24c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f253:	e8 54 fe ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f258:	83 c4 10             	add    esp,0x10
c001f25b:	83 ec 0c             	sub    esp,0xc
c001f25e:	6a 4c                	push   0x4c
c001f260:	e8 5b 02 ff ff       	call   c000f4c0 <malloc>
c001f265:	83 c4 10             	add    esp,0x10
c001f268:	89 c2                	mov    edx,eax
c001f26a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f271:	89 10                	mov    DWORD PTR [eax],edx
c001f273:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f27a:	8b 00                	mov    eax,DWORD PTR [eax]
c001f27c:	83 ec 08             	sub    esp,0x8
c001f27f:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f283:	52                   	push   edx
c001f284:	50                   	push   eax
c001f285:	e8 df 6a fe ff       	call   c0005d69 <f_opendir>
c001f28a:	83 c4 10             	add    esp,0x10
c001f28d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f294:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f29c:	74 07                	je     c001f2a5 <FAT::openDir(char const*, void**)+0x99>
c001f29e:	b8 01 00 00 00       	mov    eax,0x1
c001f2a3:	eb 05                	jmp    c001f2aa <FAT::openDir(char const*, void**)+0x9e>
c001f2a5:	b8 00 00 00 00       	mov    eax,0x0
c001f2aa:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f2b0:	c3                   	ret    
c001f2b1:	90                   	nop

c001f2b2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f2b2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f2b8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f2c0:	75 0a                	jne    c001f2cc <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001f2c2:	b8 04 00 00 00       	mov    eax,0x4
c001f2c7:	e9 c9 00 00 00       	jmp    c001f395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f2cc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f2d4:	75 0a                	jne    c001f2e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001f2d6:	b8 04 00 00 00       	mov    eax,0x4
c001f2db:	e9 b5 00 00 00       	jmp    c001f395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f2e0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f2e8:	75 0a                	jne    c001f2f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001f2ea:	b8 04 00 00 00       	mov    eax,0x4
c001f2ef:	e9 a1 00 00 00       	jmp    c001f395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f2f4:	83 ec 08             	sub    esp,0x8
c001f2f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f2fe:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f305:	50                   	push   eax
c001f306:	e8 0f 14 fe ff       	call   c000071a <strcpy>
c001f30b:	83 c4 10             	add    esp,0x10
c001f30e:	83 ec 08             	sub    esp,0x8
c001f311:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f318:	50                   	push   eax
c001f319:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f320:	e8 87 fd ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f325:	83 c4 10             	add    esp,0x10
c001f328:	83 ec 08             	sub    esp,0x8
c001f32b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f32f:	50                   	push   eax
c001f330:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f337:	50                   	push   eax
c001f338:	e8 eb 6b fe ff       	call   c0005f28 <f_stat>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f347:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f34e:	85 c0                	test   eax,eax
c001f350:	74 07                	je     c001f359 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001f352:	83 f8 04             	cmp    eax,0x4
c001f355:	74 32                	je     c001f389 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001f357:	eb 37                	jmp    c001f390 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001f359:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f35d:	0f b6 c0             	movzx  eax,al
c001f360:	83 e0 10             	and    eax,0x10
c001f363:	0f 95 c2             	setne  dl
c001f366:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f36d:	88 10                	mov    BYTE PTR [eax],dl
c001f36f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f372:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f376:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f37d:	89 01                	mov    DWORD PTR [ecx],eax
c001f37f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f382:	b8 00 00 00 00       	mov    eax,0x0
c001f387:	eb 0c                	jmp    c001f395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f389:	b8 02 00 00 00       	mov    eax,0x2
c001f38e:	eb 05                	jmp    c001f395 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f390:	b8 01 00 00 00       	mov    eax,0x1
c001f395:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f39b:	c3                   	ret    

c001f39c <FAT::unlink(char const*)>:
c001f39c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f3a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f3aa:	75 07                	jne    c001f3b3 <FAT::unlink(char const*)+0x17>
c001f3ac:	b8 04 00 00 00       	mov    eax,0x4
c001f3b1:	eb 5c                	jmp    c001f40f <FAT::unlink(char const*)+0x73>
c001f3b3:	83 ec 08             	sub    esp,0x8
c001f3b6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f3bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f3c1:	50                   	push   eax
c001f3c2:	e8 53 13 fe ff       	call   c000071a <strcpy>
c001f3c7:	83 c4 10             	add    esp,0x10
c001f3ca:	83 ec 08             	sub    esp,0x8
c001f3cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3d1:	50                   	push   eax
c001f3d2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f3d9:	e8 ce fc ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f3de:	83 c4 10             	add    esp,0x10
c001f3e1:	83 ec 0c             	sub    esp,0xc
c001f3e4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f3e8:	50                   	push   eax
c001f3e9:	e8 8c 6e fe ff       	call   c000627a <f_unlink>
c001f3ee:	83 c4 10             	add    esp,0x10
c001f3f1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f3f8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f3ff:	85 c0                	test   eax,eax
c001f401:	75 07                	jne    c001f40a <FAT::unlink(char const*)+0x6e>
c001f403:	b8 00 00 00 00       	mov    eax,0x0
c001f408:	eb 05                	jmp    c001f40f <FAT::unlink(char const*)+0x73>
c001f40a:	b8 01 00 00 00       	mov    eax,0x1
c001f40f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f415:	c3                   	ret    

c001f416 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f416:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f41c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001f423:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001f42a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f42e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f432:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f43a:	75 0a                	jne    c001f446 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001f43c:	b8 04 00 00 00       	mov    eax,0x4
c001f441:	e9 1c 01 00 00       	jmp    c001f562 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f446:	83 ec 08             	sub    esp,0x8
c001f449:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f450:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f454:	50                   	push   eax
c001f455:	e8 c0 12 fe ff       	call   c000071a <strcpy>
c001f45a:	83 c4 10             	add    esp,0x10
c001f45d:	83 ec 08             	sub    esp,0x8
c001f460:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f464:	50                   	push   eax
c001f465:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f46c:	e8 3b fc ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f471:	83 c4 10             	add    esp,0x10
c001f474:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f47c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f484:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f489:	83 e0 01             	and    eax,0x1
c001f48c:	74 08                	je     c001f496 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001f48e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001f496:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f49b:	83 e0 02             	and    eax,0x2
c001f49e:	74 08                	je     c001f4a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001f4a0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001f4a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f4ad:	83 e0 04             	and    eax,0x4
c001f4b0:	74 08                	je     c001f4ba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001f4b2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001f4ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f4bf:	83 e0 08             	and    eax,0x8
c001f4c2:	74 08                	je     c001f4cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001f4c4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001f4cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f4d1:	83 e0 01             	and    eax,0x1
c001f4d4:	74 08                	je     c001f4de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f4d6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001f4de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f4e3:	83 e0 02             	and    eax,0x2
c001f4e6:	74 08                	je     c001f4f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001f4e8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001f4f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f4f5:	83 e0 04             	and    eax,0x4
c001f4f8:	74 08                	je     c001f502 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001f4fa:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001f502:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f507:	83 e0 08             	and    eax,0x8
c001f50a:	74 08                	je     c001f514 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001f50c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001f514:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f51b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001f522:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f52a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f532:	83 ec 04             	sub    esp,0x4
c001f535:	52                   	push   edx
c001f536:	50                   	push   eax
c001f537:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f53b:	50                   	push   eax
c001f53c:	e8 db 73 fe ff       	call   c000691c <f_chmod>
c001f541:	83 c4 10             	add    esp,0x10
c001f544:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f54b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f552:	85 c0                	test   eax,eax
c001f554:	75 07                	jne    c001f55d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001f556:	b8 00 00 00 00       	mov    eax,0x0
c001f55b:	eb 05                	jmp    c001f562 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f55d:	b8 01 00 00 00       	mov    eax,0x1
c001f562:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f568:	c3                   	ret    
c001f569:	90                   	nop

c001f56a <FAT::rename(char const*, char const*)>:
c001f56a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f570:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f578:	74 0a                	je     c001f584 <FAT::rename(char const*, char const*)+0x1a>
c001f57a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f582:	75 0a                	jne    c001f58e <FAT::rename(char const*, char const*)+0x24>
c001f584:	b8 04 00 00 00       	mov    eax,0x4
c001f589:	e9 98 00 00 00       	jmp    c001f626 <FAT::rename(char const*, char const*)+0xbc>
c001f58e:	83 ec 08             	sub    esp,0x8
c001f591:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f598:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f59f:	50                   	push   eax
c001f5a0:	e8 75 11 fe ff       	call   c000071a <strcpy>
c001f5a5:	83 c4 10             	add    esp,0x10
c001f5a8:	83 ec 08             	sub    esp,0x8
c001f5ab:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f5b2:	50                   	push   eax
c001f5b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f5ba:	e8 ed fa ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f5bf:	83 c4 10             	add    esp,0x10
c001f5c2:	83 ec 08             	sub    esp,0x8
c001f5c5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f5cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f5d0:	50                   	push   eax
c001f5d1:	e8 44 11 fe ff       	call   c000071a <strcpy>
c001f5d6:	83 c4 10             	add    esp,0x10
c001f5d9:	83 ec 08             	sub    esp,0x8
c001f5dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f5e0:	50                   	push   eax
c001f5e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f5e8:	e8 bf fa ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f5ed:	83 c4 10             	add    esp,0x10
c001f5f0:	83 ec 08             	sub    esp,0x8
c001f5f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f5f7:	50                   	push   eax
c001f5f8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f5ff:	50                   	push   eax
c001f600:	e8 24 70 fe ff       	call   c0006629 <f_rename>
c001f605:	83 c4 10             	add    esp,0x10
c001f608:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f60f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f616:	85 c0                	test   eax,eax
c001f618:	75 07                	jne    c001f621 <FAT::rename(char const*, char const*)+0xb7>
c001f61a:	b8 00 00 00 00       	mov    eax,0x0
c001f61f:	eb 05                	jmp    c001f626 <FAT::rename(char const*, char const*)+0xbc>
c001f621:	b8 01 00 00 00       	mov    eax,0x1
c001f626:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f62c:	c3                   	ret    
c001f62d:	90                   	nop

c001f62e <FAT::mkdir(char const*)>:
c001f62e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f634:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f63c:	75 07                	jne    c001f645 <FAT::mkdir(char const*)+0x17>
c001f63e:	b8 04 00 00 00       	mov    eax,0x4
c001f643:	eb 5c                	jmp    c001f6a1 <FAT::mkdir(char const*)+0x73>
c001f645:	83 ec 08             	sub    esp,0x8
c001f648:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f64f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f653:	50                   	push   eax
c001f654:	e8 c1 10 fe ff       	call   c000071a <strcpy>
c001f659:	83 c4 10             	add    esp,0x10
c001f65c:	83 ec 08             	sub    esp,0x8
c001f65f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f663:	50                   	push   eax
c001f664:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f66b:	e8 3c fa ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f670:	83 c4 10             	add    esp,0x10
c001f673:	83 ec 0c             	sub    esp,0xc
c001f676:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f67a:	50                   	push   eax
c001f67b:	e8 7d 6d fe ff       	call   c00063fd <f_mkdir>
c001f680:	83 c4 10             	add    esp,0x10
c001f683:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f68a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f691:	85 c0                	test   eax,eax
c001f693:	75 07                	jne    c001f69c <FAT::mkdir(char const*)+0x6e>
c001f695:	b8 00 00 00 00       	mov    eax,0x0
c001f69a:	eb 05                	jmp    c001f6a1 <FAT::mkdir(char const*)+0x73>
c001f69c:	b8 01 00 00 00       	mov    eax,0x1
c001f6a1:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6a7:	c3                   	ret    

c001f6a8 <FAT::exists(char const*)>:
c001f6a8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f6ae:	83 ec 08             	sub    esp,0x8
c001f6b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f6b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f6bc:	50                   	push   eax
c001f6bd:	e8 58 10 fe ff       	call   c000071a <strcpy>
c001f6c2:	83 c4 10             	add    esp,0x10
c001f6c5:	83 ec 08             	sub    esp,0x8
c001f6c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f6cc:	50                   	push   eax
c001f6cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f6d4:	e8 d3 f9 ff ff       	call   c001f0ac <FAT::fixFilepath(char*)>
c001f6d9:	83 c4 10             	add    esp,0x10
c001f6dc:	83 ec 08             	sub    esp,0x8
c001f6df:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001f6e6:	50                   	push   eax
c001f6e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f6eb:	50                   	push   eax
c001f6ec:	e8 37 68 fe ff       	call   c0005f28 <f_stat>
c001f6f1:	83 c4 10             	add    esp,0x10
c001f6f4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f6fb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f702:	85 c0                	test   eax,eax
c001f704:	75 04                	jne    c001f70a <FAT::exists(char const*)+0x62>
c001f706:	b0 01                	mov    al,0x1
c001f708:	eb 02                	jmp    c001f70c <FAT::exists(char const*)+0x64>
c001f70a:	b0 00                	mov    al,0x0
c001f70c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f712:	c3                   	ret    
c001f713:	90                   	nop

c001f714 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f714:	b8 08 00 00 00       	mov    eax,0x8
c001f719:	c3                   	ret    

c001f71a <ISO9660::seek(void*, unsigned long long)>:
c001f71a:	53                   	push   ebx
c001f71b:	b8 04 00 00 00       	mov    eax,0x4
c001f720:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f724:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f728:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f72c:	85 d2                	test   edx,edx
c001f72e:	74 17                	je     c001f747 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f730:	89 c8                	mov    eax,ecx
c001f732:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001f735:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001f738:	b8 01 00 00 00       	mov    eax,0x1
c001f73d:	73 08                	jae    c001f747 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001f73f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001f742:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001f745:	31 c0                	xor    eax,eax
c001f747:	5b                   	pop    ebx
c001f748:	c3                   	ret    
c001f749:	90                   	nop

c001f74a <ISO9660::tell(void*, unsigned long long*)>:
c001f74a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f74e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f752:	85 d2                	test   edx,edx
c001f754:	74 12                	je     c001f768 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f756:	85 c0                	test   eax,eax
c001f758:	74 0e                	je     c001f768 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001f75a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001f75d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001f760:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f763:	89 10                	mov    DWORD PTR [eax],edx
c001f765:	31 c0                	xor    eax,eax
c001f767:	c3                   	ret    
c001f768:	b8 04 00 00 00       	mov    eax,0x4
c001f76d:	c3                   	ret    

c001f76e <ISO9660::getName()>:
c001f76e:	b8 04 9e 02 c0       	mov    eax,0xc0029e04
c001f773:	c3                   	ret    

c001f774 <ISO9660::stat(void*, unsigned long long*)>:
c001f774:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f778:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f77c:	85 d2                	test   edx,edx
c001f77e:	74 12                	je     c001f792 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f780:	85 c0                	test   eax,eax
c001f782:	74 0e                	je     c001f792 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001f784:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001f787:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001f78a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001f78d:	89 10                	mov    DWORD PTR [eax],edx
c001f78f:	31 c0                	xor    eax,eax
c001f791:	c3                   	ret    
c001f792:	b8 04 00 00 00       	mov    eax,0x4
c001f797:	c3                   	ret    

c001f798 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001f798:	b8 01 00 00 00       	mov    eax,0x1
c001f79d:	c3                   	ret    

c001f79e <ISO9660::unlink(char const*)>:
c001f79e:	b8 01 00 00 00       	mov    eax,0x1
c001f7a3:	c3                   	ret    

c001f7a4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001f7a4:	b8 01 00 00 00       	mov    eax,0x1
c001f7a9:	c3                   	ret    

c001f7aa <ISO9660::rename(char const*, char const*)>:
c001f7aa:	b8 01 00 00 00       	mov    eax,0x1
c001f7af:	c3                   	ret    

c001f7b0 <ISO9660::mkdir(char const*)>:
c001f7b0:	b8 01 00 00 00       	mov    eax,0x1
c001f7b5:	c3                   	ret    

c001f7b6 <ISO9660::close(void*)>:
c001f7b6:	83 ec 0c             	sub    esp,0xc
c001f7b9:	b8 04 00 00 00       	mov    eax,0x4
c001f7be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7c2:	85 d2                	test   edx,edx
c001f7c4:	74 0e                	je     c001f7d4 <ISO9660::close(void*)+0x1e>
c001f7c6:	83 ec 0c             	sub    esp,0xc
c001f7c9:	52                   	push   edx
c001f7ca:	e8 01 fd fe ff       	call   c000f4d0 <free>
c001f7cf:	83 c4 10             	add    esp,0x10
c001f7d2:	31 c0                	xor    eax,eax
c001f7d4:	83 c4 0c             	add    esp,0xc
c001f7d7:	c3                   	ret    

c001f7d8 <ISO9660::closeDir(void*)>:
c001f7d8:	83 ec 0c             	sub    esp,0xc
c001f7db:	b8 04 00 00 00       	mov    eax,0x4
c001f7e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7e4:	85 d2                	test   edx,edx
c001f7e6:	74 0e                	je     c001f7f6 <ISO9660::closeDir(void*)+0x1e>
c001f7e8:	83 ec 0c             	sub    esp,0xc
c001f7eb:	52                   	push   edx
c001f7ec:	e8 df fc fe ff       	call   c000f4d0 <free>
c001f7f1:	83 c4 10             	add    esp,0x10
c001f7f4:	31 c0                	xor    eax,eax
c001f7f6:	83 c4 0c             	add    esp,0xc
c001f7f9:	c3                   	ret    

c001f7fa <ISO9660::~ISO9660()>:
c001f7fa:	83 ec 0c             	sub    esp,0xc
c001f7fd:	ba 58 9e 02 c0       	mov    edx,0xc0029e58
c001f802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f806:	89 10                	mov    DWORD PTR [eax],edx
c001f808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80c:	83 ec 0c             	sub    esp,0xc
c001f80f:	50                   	push   eax
c001f810:	e8 a1 31 ff ff       	call   c00129b6 <Filesystem::~Filesystem()>
c001f815:	83 c4 10             	add    esp,0x10
c001f818:	90                   	nop
c001f819:	83 c4 0c             	add    esp,0xc
c001f81c:	c3                   	ret    
c001f81d:	90                   	nop

c001f81e <ISO9660::~ISO9660()>:
c001f81e:	83 ec 0c             	sub    esp,0xc
c001f821:	83 ec 0c             	sub    esp,0xc
c001f824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f828:	e8 cd ff ff ff       	call   c001f7fa <ISO9660::~ISO9660()>
c001f82d:	83 c4 10             	add    esp,0x10
c001f830:	83 ec 08             	sub    esp,0x8
c001f833:	6a 08                	push   0x8
c001f835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f839:	e8 6f 2d ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001f83e:	83 c4 10             	add    esp,0x10
c001f841:	83 c4 0c             	add    esp,0xc
c001f844:	c3                   	ret    

c001f845 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001f845:	55                   	push   ebp
c001f846:	31 c9                	xor    ecx,ecx
c001f848:	57                   	push   edi
c001f849:	56                   	push   esi
c001f84a:	53                   	push   ebx
c001f84b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001f84f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f853:	89 eb                	mov    ebx,ebp
c001f855:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001f859:	39 ce                	cmp    esi,ecx
c001f85b:	7e 17                	jle    c001f874 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001f85d:	31 d2                	xor    edx,edx
c001f85f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001f863:	7d 13                	jge    c001f878 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001f865:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f869:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f86c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001f86f:	75 0d                	jne    c001f87e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001f871:	42                   	inc    edx
c001f872:	eb eb                	jmp    c001f85f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001f874:	31 c0                	xor    eax,eax
c001f876:	eb 0a                	jmp    c001f882 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f878:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001f87c:	eb 04                	jmp    c001f882 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001f87e:	41                   	inc    ecx
c001f87f:	43                   	inc    ebx
c001f880:	eb d7                	jmp    c001f859 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001f882:	5b                   	pop    ebx
c001f883:	5e                   	pop    esi
c001f884:	5f                   	pop    edi
c001f885:	5d                   	pop    ebp
c001f886:	c3                   	ret    

c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001f887:	56                   	push   esi
c001f888:	53                   	push   ebx
c001f889:	52                   	push   edx
c001f88a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f88e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f892:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f896:	39 0d e0 ce 02 c0    	cmp    DWORD PTR ds:0xc002cee0,ecx
c001f89c:	75 08                	jne    c001f8a6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001f89e:	38 05 e8 ad 02 c0    	cmp    BYTE PTR ds:0xc002ade8,al
c001f8a4:	74 2b                	je     c001f8d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001f8a6:	83 ec 0c             	sub    esp,0xc
c001f8a9:	a2 e8 ad 02 c0       	mov    ds:0xc002ade8,al
c001f8ae:	68 00 cf 02 c0       	push   0xc002cf00
c001f8b3:	0f be c0             	movsx  eax,al
c001f8b6:	6a 01                	push   0x1
c001f8b8:	89 0d e0 ce 02 c0    	mov    DWORD PTR ds:0xc002cee0,ecx
c001f8be:	31 db                	xor    ebx,ebx
c001f8c0:	53                   	push   ebx
c001f8c1:	51                   	push   ecx
c001f8c2:	ff 34 85 3c bd 02 c0 	push   DWORD PTR [eax*4-0x3ffd42c4]
c001f8c9:	e8 d2 63 ff ff       	call   c0015ca0 <LogicalDisk::read(unsigned long long, int, void*)>
c001f8ce:	83 c4 20             	add    esp,0x20
c001f8d1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001f8d9:	c7 44 24 14 00 cf 02 c0 	mov    DWORD PTR [esp+0x14],0xc002cf00
c001f8e1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001f8e5:	58                   	pop    eax
c001f8e6:	5b                   	pop    ebx
c001f8e7:	5e                   	pop    esi
c001f8e8:	e9 58 0d fe ff       	jmp    c0000645 <memcpy>
c001f8ed:	90                   	nop

c001f8ee <ISO9660::tryMount(LogicalDisk*, int)>:
c001f8ee:	81 ec 10 08 00 00    	sub    esp,0x810
c001f8f4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001f8fb:	83 c0 41             	add    eax,0x41
c001f8fe:	0f be c0             	movsx  eax,al
c001f901:	50                   	push   eax
c001f902:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f906:	50                   	push   eax
c001f907:	6a 10                	push   0x10
c001f909:	e8 79 ff ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f90e:	83 c4 10             	add    esp,0x10
c001f911:	31 c0                	xor    eax,eax
c001f913:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001f918:	75 1d                	jne    c001f937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f91a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001f91f:	75 16                	jne    c001f937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f921:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f926:	75 0f                	jne    c001f937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f928:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f92d:	75 08                	jne    c001f937 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f92f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f934:	0f 94 c0             	sete   al
c001f937:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f93d:	c3                   	ret    

c001f93e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f93e:	55                   	push   ebp
c001f93f:	57                   	push   edi
c001f940:	56                   	push   esi
c001f941:	53                   	push   ebx
c001f942:	81 ec 34 08 00 00    	sub    esp,0x834
c001f948:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f94f:	55                   	push   ebp
c001f950:	68 1f 9e 02 c0       	push   0xc0029e1f
c001f955:	e8 33 2d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001f95a:	83 c4 10             	add    esp,0x10
c001f95d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f965:	0f 84 06 02 00 00    	je     c001fb71 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f96b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f973:	0f 84 f8 01 00 00    	je     c001fb71 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f979:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f980:	b8 01 00 00 00       	mov    eax,0x1
c001f985:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f989:	0f 85 e7 01 00 00    	jne    c001fb76 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f98f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f992:	31 d2                	xor    edx,edx
c001f994:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f997:	89 e9                	mov    ecx,ebp
c001f999:	89 d3                	mov    ebx,edx
c001f99b:	01 f1                	add    ecx,esi
c001f99d:	11 fb                	adc    ebx,edi
c001f99f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f9a3:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f9a7:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f9ae:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f9b1:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f9b4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f9b8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f9bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f9c4:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f9c8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f9cc:	72 19                	jb     c001f9e7 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f9ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f9dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f9e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f9e5:	eb 13                	jmp    c001f9fa <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f9e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9ef:	29 f0                	sub    eax,esi
c001f9f1:	19 fa                	sbb    edx,edi
c001f9f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f9fa:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001fa01:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001fa04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa06:	53                   	push   ebx
c001fa07:	0f a4 c2 0b          	shld   edx,eax,0xb
c001fa0b:	c1 e0 0b             	shl    eax,0xb
c001fa0e:	01 c6                	add    esi,eax
c001fa10:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fa17:	11 d7                	adc    edi,edx
c001fa19:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fa1d:	89 fa                	mov    edx,edi
c001fa1f:	50                   	push   eax
c001fa20:	8d 44 24 28          	lea    eax,[esp+0x28]
c001fa24:	50                   	push   eax
c001fa25:	89 f0                	mov    eax,esi
c001fa27:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fa2b:	50                   	push   eax
c001fa2c:	e8 56 fe ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fa31:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001fa38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa3c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fa3f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001fa43:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001fa49:	83 c4 10             	add    esp,0x10
c001fa4c:	b8 00 08 00 00       	mov    eax,0x800
c001fa51:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001fa55:	29 d0                	sub    eax,edx
c001fa57:	39 c1                	cmp    ecx,eax
c001fa59:	83 db 00             	sbb    ebx,0x0
c001fa5c:	7d 19                	jge    c001fa77 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001fa5e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001fa63:	75 16                	jne    c001fa7b <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001fa65:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fa6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa72:	e9 f6 00 00 00       	jmp    c001fb6d <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001fa77:	89 c5                	mov    ebp,eax
c001fa79:	eb 03                	jmp    c001fa7e <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001fa7b:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001fa7e:	51                   	push   ecx
c001fa7f:	55                   	push   ebp
c001fa80:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001fa84:	50                   	push   eax
c001fa85:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001fa8c:	e8 b4 0b fe ff       	call   c0000645 <memcpy>
c001fa91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa95:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa99:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001faa0:	01 e8                	add    eax,ebp
c001faa2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001faa6:	89 e8                	mov    eax,ebp
c001faa8:	99                   	cdq    
c001faa9:	01 ee                	add    esi,ebp
c001faab:	11 d7                	adc    edi,edx
c001faad:	29 e9                	sub    ecx,ebp
c001faaf:	19 d3                	sbb    ebx,edx
c001fab1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001fab5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001fab9:	83 c4 10             	add    esp,0x10
c001fabc:	b8 ff 07 00 00       	mov    eax,0x7ff
c001fac1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001fac4:	b8 00 00 00 00       	mov    eax,0x0
c001fac9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001facd:	7d 3f                	jge    c001fb0e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001facf:	52                   	push   edx
c001fad0:	89 fa                	mov    edx,edi
c001fad2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fad9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fadd:	50                   	push   eax
c001fade:	89 f0                	mov    eax,esi
c001fae0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fae4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fae8:	50                   	push   eax
c001fae9:	e8 99 fd ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001faee:	81 c6 00 08 00 00    	add    esi,0x800
c001faf4:	83 d7 00             	adc    edi,0x0
c001faf7:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001faff:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001fb07:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001fb0c:	eb ab                	jmp    c001fab9 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb12:	0b 04 24             	or     eax,DWORD PTR [esp]
c001fb15:	74 34                	je     c001fb4b <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001fb17:	89 fa                	mov    edx,edi
c001fb19:	50                   	push   eax
c001fb1a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fb21:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fb25:	50                   	push   eax
c001fb26:	89 f0                	mov    eax,esi
c001fb28:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001fb2c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fb30:	55                   	push   ebp
c001fb31:	50                   	push   eax
c001fb32:	e8 50 fd ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fb37:	83 c4 0c             	add    esp,0xc
c001fb3a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001fb3e:	55                   	push   ebp
c001fb3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb43:	e8 fd 0a fe ff       	call   c0000645 <memcpy>
c001fb48:	83 c4 10             	add    esp,0x10
c001fb4b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fb52:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fb56:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fb5a:	89 38                	mov    DWORD PTR [eax],edi
c001fb5c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001fb63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb67:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001fb6a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fb6d:	31 c0                	xor    eax,eax
c001fb6f:	eb 05                	jmp    c001fb76 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001fb71:	b8 04 00 00 00       	mov    eax,0x4
c001fb76:	81 c4 2c 08 00 00    	add    esp,0x82c
c001fb7c:	5b                   	pop    ebx
c001fb7d:	5e                   	pop    esi
c001fb7e:	5f                   	pop    edi
c001fb7f:	5d                   	pop    ebp
c001fb80:	c3                   	ret    
c001fb81:	90                   	nop

c001fb82 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001fb82:	55                   	push   ebp
c001fb83:	57                   	push   edi
c001fb84:	56                   	push   esi
c001fb85:	53                   	push   ebx
c001fb86:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001fb8c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001fb93:	85 f6                	test   esi,esi
c001fb95:	0f 84 64 02 00 00    	je     c001fdff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fb9b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001fba3:	0f 84 56 02 00 00    	je     c001fdff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fba9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001fbac:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001fbaf:	75 0a                	jne    c001fbbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001fbb1:	b8 07 00 00 00       	mov    eax,0x7
c001fbb6:	e9 49 02 00 00       	jmp    c001fe04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fbbb:	50                   	push   eax
c001fbbc:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001fbc0:	50                   	push   eax
c001fbc1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001fbc8:	53                   	push   ebx
c001fbc9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbcb:	c1 e0 0b             	shl    eax,0xb
c001fbce:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001fbd1:	c1 e8 0b             	shr    eax,0xb
c001fbd4:	50                   	push   eax
c001fbd5:	e8 ad fc ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fbda:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fbdd:	83 c4 10             	add    esp,0x10
c001fbe0:	89 c1                	mov    ecx,eax
c001fbe2:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001fbe5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fbeb:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001fbee:	84 db                	test   bl,bl
c001fbf0:	0f 85 90 00 00 00    	jne    c001fc86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001fbf6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001fbfc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fc02:	29 c7                	sub    edi,eax
c001fc04:	89 fb                	mov    ebx,edi
c001fc06:	c1 fb 1f             	sar    ebx,0x1f
c001fc09:	01 f8                	add    eax,edi
c001fc0b:	11 da                	adc    edx,ebx
c001fc0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fc15:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001fc18:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001fc1b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001fc1e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001fc21:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc24:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fc28:	89 d8                	mov    eax,ebx
c001fc2a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001fc2d:	ba 00 00 00 00       	mov    edx,0x0
c001fc32:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001fc36:	b8 00 00 00 00       	mov    eax,0x0
c001fc3b:	73 0b                	jae    c001fc48 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001fc3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001fc40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc44:	29 f8                	sub    eax,edi
c001fc46:	19 da                	sbb    edx,ebx
c001fc48:	89 d3                	mov    ebx,edx
c001fc4a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001fc4d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001fc50:	09 c3                	or     ebx,eax
c001fc52:	0f 84 59 ff ff ff    	je     c001fbb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001fc58:	55                   	push   ebp
c001fc59:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001fc5d:	50                   	push   eax
c001fc5e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001fc65:	53                   	push   ebx
c001fc66:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc68:	c1 e0 0b             	shl    eax,0xb
c001fc6b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001fc6f:	c1 e8 0b             	shr    eax,0xb
c001fc72:	50                   	push   eax
c001fc73:	e8 0f fc ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fc78:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fc7b:	83 c4 10             	add    esp,0x10
c001fc7e:	25 ff 07 00 00       	and    eax,0x7ff
c001fc83:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001fc86:	57                   	push   edi
c001fc87:	6a 28                	push   0x28
c001fc89:	6a 00                	push   0x0
c001fc8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001fc8f:	50                   	push   eax
c001fc90:	e8 e6 09 fe ff       	call   c000067b <memset>
c001fc95:	31 d2                	xor    edx,edx
c001fc97:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001fc9a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fca0:	89 f8                	mov    eax,edi
c001fca2:	83 c0 21             	add    eax,0x21
c001fca5:	83 d2 00             	adc    edx,0x0
c001fca8:	89 c7                	mov    edi,eax
c001fcaa:	89 d5                	mov    ebp,edx
c001fcac:	83 c4 10             	add    esp,0x10
c001fcaf:	31 c9                	xor    ecx,ecx
c001fcb1:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001fcb8:	83 f9 28             	cmp    ecx,0x28
c001fcbb:	88 04 24             	mov    BYTE PTR [esp],al
c001fcbe:	0f 94 c2             	sete   dl
c001fcc1:	88 d0                	mov    al,dl
c001fcc3:	ba ff 07 00 00       	mov    edx,0x7ff
c001fcc8:	39 fa                	cmp    edx,edi
c001fcca:	ba 00 00 00 00       	mov    edx,0x0
c001fccf:	19 ea                	sbb    edx,ebp
c001fcd1:	0f 92 c2             	setb   dl
c001fcd4:	09 c2                	or     edx,eax
c001fcd6:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001fcda:	0f 94 c0             	sete   al
c001fcdd:	08 d0                	or     al,dl
c001fcdf:	75 16                	jne    c001fcf7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001fce1:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001fce5:	74 10                	je     c001fcf7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001fce7:	8a 04 24             	mov    al,BYTE PTR [esp]
c001fcea:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001fcee:	41                   	inc    ecx
c001fcef:	83 c7 01             	add    edi,0x1
c001fcf2:	83 d5 00             	adc    ebp,0x0
c001fcf5:	eb ba                	jmp    c001fcb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001fcf7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001fcfe:	83 ec 0c             	sub    esp,0xc
c001fd01:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001fd05:	57                   	push   edi
c001fd06:	e8 8d 09 fe ff       	call   c0000698 <strlen>
c001fd0b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001fd13:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fd17:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001fd1e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001fd21:	5a                   	pop    edx
c001fd22:	25 ff 07 00 00       	and    eax,0x7ff
c001fd27:	01 c8                	add    eax,ecx
c001fd29:	59                   	pop    ecx
c001fd2a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001fd30:	83 e0 02             	and    eax,0x2
c001fd33:	3c 01                	cmp    al,0x1
c001fd35:	19 c0                	sbb    eax,eax
c001fd37:	83 c0 02             	add    eax,0x2
c001fd3a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fd3e:	57                   	push   edi
c001fd3f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001fd43:	50                   	push   eax
c001fd44:	e8 d1 09 fe ff       	call   c000071a <strcpy>
c001fd49:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001fd4d:	83 c4 10             	add    esp,0x10
c001fd50:	84 c0                	test   al,al
c001fd52:	75 21                	jne    c001fd75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001fd54:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001fd5c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001fd64:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fd6c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001fd73:	eb 28                	jmp    c001fd9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fd75:	fe c8                	dec    al
c001fd77:	75 24                	jne    c001fd9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001fd79:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001fd81:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001fd89:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001fd91:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001fd98:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001fd9d:	0f b6 fb             	movzx  edi,bl
c001fda0:	31 db                	xor    ebx,ebx
c001fda2:	50                   	push   eax
c001fda3:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001fdaa:	8d 44 24 48          	lea    eax,[esp+0x48]
c001fdae:	50                   	push   eax
c001fdaf:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001fdb6:	e8 8a 08 fe ff       	call   c0000645 <memcpy>
c001fdbb:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001fdc2:	89 f9                	mov    ecx,edi
c001fdc4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fdca:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001fdcd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001fdd0:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001fdd3:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001fdd6:	83 c4 10             	add    esp,0x10
c001fdd9:	39 c7                	cmp    edi,eax
c001fddb:	89 df                	mov    edi,ebx
c001fddd:	19 d7                	sbb    edi,edx
c001fddf:	72 10                	jb     c001fdf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001fde1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001fde8:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001fdef:	eb 0a                	jmp    c001fdfb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001fdf1:	29 c8                	sub    eax,ecx
c001fdf3:	19 da                	sbb    edx,ebx
c001fdf5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001fdf8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001fdfb:	31 c0                	xor    eax,eax
c001fdfd:	eb 05                	jmp    c001fe04 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fdff:	b8 04 00 00 00       	mov    eax,0x4
c001fe04:	81 c4 5c 09 00 00    	add    esp,0x95c
c001fe0a:	5b                   	pop    ebx
c001fe0b:	5e                   	pop    esi
c001fe0c:	5f                   	pop    edi
c001fe0d:	5d                   	pop    ebp
c001fe0e:	c3                   	ret    

c001fe0f <readRoot(unsigned int*, unsigned int*, char)>:
c001fe0f:	81 ec 40 08 00 00    	sub    esp,0x840
c001fe15:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001fe1d:	50                   	push   eax
c001fe1e:	8d 44 24 38          	lea    eax,[esp+0x38]
c001fe22:	50                   	push   eax
c001fe23:	6a 10                	push   0x10
c001fe25:	e8 5d fa ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fe2a:	83 c4 0c             	add    esp,0xc
c001fe2d:	6a 22                	push   0x22
c001fe2f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001fe36:	50                   	push   eax
c001fe37:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fe3b:	50                   	push   eax
c001fe3c:	e8 04 08 fe ff       	call   c0000645 <memcpy>
c001fe41:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fe48:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001fe4c:	89 10                	mov    DWORD PTR [eax],edx
c001fe4e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001fe55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fe59:	89 10                	mov    DWORD PTR [eax],edx
c001fe5b:	b0 01                	mov    al,0x1
c001fe5d:	81 c4 4c 08 00 00    	add    esp,0x84c
c001fe63:	c3                   	ret    

c001fe64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001fe64:	55                   	push   ebp
c001fe65:	57                   	push   edi
c001fe66:	56                   	push   esi
c001fe67:	53                   	push   ebx
c001fe68:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001fe6e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001fe75:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001fe7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fe80:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001fe84:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fe88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe8c:	75 03                	jne    c001fe91 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fe8e:	83 c3 02             	add    ebx,0x2
c001fe91:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001fe94:	75 03                	jne    c001fe99 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001fe96:	43                   	inc    ebx
c001fe97:	eb f8                	jmp    c001fe91 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001fe99:	51                   	push   ecx
c001fe9a:	68 00 01 00 00       	push   0x100
c001fe9f:	6a 00                	push   0x0
c001fea1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fea5:	50                   	push   eax
c001fea6:	e8 d0 07 fe ff       	call   c000067b <memset>
c001feab:	83 c4 10             	add    esp,0x10
c001feae:	31 d2                	xor    edx,edx
c001feb0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001feb3:	84 c0                	test   al,al
c001feb5:	74 21                	je     c001fed8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001feb7:	3c 2f                	cmp    al,0x2f
c001feb9:	75 0b                	jne    c001fec6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001febb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001febf:	bd 01 00 00 00       	mov    ebp,0x1
c001fec4:	eb 14                	jmp    c001feda <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001fec6:	8d 48 9f             	lea    ecx,[eax-0x61]
c001fec9:	80 f9 19             	cmp    cl,0x19
c001fecc:	77 03                	ja     c001fed1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001fece:	83 e8 20             	sub    eax,0x20
c001fed1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001fed5:	42                   	inc    edx
c001fed6:	eb d8                	jmp    c001feb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001fed8:	31 ed                	xor    ebp,ebp
c001feda:	83 ec 0c             	sub    esp,0xc
c001fedd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001fee4:	e8 d7 f5 fe ff       	call   c000f4c0 <malloc>
c001fee9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001fef0:	89 c6                	mov    esi,eax
c001fef2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001fef8:	c1 ef 0b             	shr    edi,0xb
c001fefb:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001ff02:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001ff06:	83 c4 10             	add    esp,0x10
c001ff09:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001ff0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ff12:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001ff19:	74 28                	je     c001ff43 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001ff1b:	52                   	push   edx
c001ff1c:	57                   	push   edi
c001ff1d:	50                   	push   eax
c001ff1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ff22:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ff29:	e8 59 f9 ff ff       	call   c001f887 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ff2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff32:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001ff39:	05 00 08 00 00       	add    eax,0x800
c001ff3e:	83 c4 10             	add    esp,0x10
c001ff41:	eb cb                	jmp    c001ff0e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001ff43:	83 ec 0c             	sub    esp,0xc
c001ff46:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ff4a:	57                   	push   edi
c001ff4b:	e8 48 07 fe ff       	call   c0000698 <strlen>
c001ff50:	50                   	push   eax
c001ff51:	57                   	push   edi
c001ff52:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ff59:	56                   	push   esi
c001ff5a:	e8 e6 f8 ff ff       	call   c001f845 <__memmem(unsigned char*, int, unsigned char*, int)>
c001ff5f:	83 c4 20             	add    esp,0x20
c001ff62:	85 c0                	test   eax,eax
c001ff64:	75 13                	jne    c001ff79 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001ff66:	83 ec 0c             	sub    esp,0xc
c001ff69:	56                   	push   esi
c001ff6a:	e8 61 f5 fe ff       	call   c000f4d0 <free>
c001ff6f:	83 c4 10             	add    esp,0x10
c001ff72:	31 c0                	xor    eax,eax
c001ff74:	e9 b3 00 00 00       	jmp    c002002c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001ff79:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001ff7d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001ff81:	c1 e7 08             	shl    edi,0x8
c001ff84:	c1 e2 10             	shl    edx,0x10
c001ff87:	09 d7                	or     edi,edx
c001ff89:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001ff8d:	09 d7                	or     edi,edx
c001ff8f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001ff93:	c1 e2 18             	shl    edx,0x18
c001ff96:	09 d7                	or     edi,edx
c001ff98:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001ff9c:	89 d1                	mov    ecx,edx
c001ff9e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ffa2:	c1 e1 08             	shl    ecx,0x8
c001ffa5:	c1 e2 10             	shl    edx,0x10
c001ffa8:	09 ca                	or     edx,ecx
c001ffaa:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001ffae:	09 ca                	or     edx,ecx
c001ffb0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ffb4:	c1 e1 18             	shl    ecx,0x18
c001ffb7:	09 ca                	or     edx,ecx
c001ffb9:	89 e9                	mov    ecx,ebp
c001ffbb:	84 c9                	test   cl,cl
c001ffbd:	74 3c                	je     c001fffb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001ffbf:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ffc3:	83 ec 0c             	sub    esp,0xc
c001ffc6:	56                   	push   esi
c001ffc7:	e8 04 f5 fe ff       	call   c000f4d0 <free>
c001ffcc:	83 c4 0c             	add    esp,0xc
c001ffcf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ffd6:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ffdb:	50                   	push   eax
c001ffdc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ffe3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ffea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffee:	52                   	push   edx
c001ffef:	57                   	push   edi
c001fff0:	53                   	push   ebx
c001fff1:	e8 6e fe ff ff       	call   c001fe64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001fff6:	83 c4 20             	add    esp,0x20
c001fff9:	eb 31                	jmp    c002002c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001fffb:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001fffe:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020005:	d0 e8                	shr    al,1
c0020007:	89 3b                	mov    DWORD PTR [ebx],edi
c0020009:	83 e0 01             	and    eax,0x1
c002000c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020013:	83 ec 0c             	sub    esp,0xc
c0020016:	89 13                	mov    DWORD PTR [ebx],edx
c0020018:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002001f:	89 03                	mov    DWORD PTR [ebx],eax
c0020021:	56                   	push   esi
c0020022:	e8 a9 f4 fe ff       	call   c000f4d0 <free>
c0020027:	83 c4 10             	add    esp,0x10
c002002a:	b0 01                	mov    al,0x1
c002002c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020032:	5b                   	pop    ebx
c0020033:	5e                   	pop    esi
c0020034:	5f                   	pop    edi
c0020035:	5d                   	pop    ebp
c0020036:	c3                   	ret    

c0020037 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020037:	55                   	push   ebp
c0020038:	57                   	push   edi
c0020039:	56                   	push   esi
c002003a:	53                   	push   ebx
c002003b:	83 ec 20             	sub    esp,0x20
c002003e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020042:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020046:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002004a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020052:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002005a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002005f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020065:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002006b:	57                   	push   edi
c002006c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020070:	50                   	push   eax
c0020071:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020075:	50                   	push   eax
c0020076:	e8 94 fd ff ff       	call   c001fe0f <readRoot(unsigned int*, unsigned int*, char)>
c002007b:	5a                   	pop    edx
c002007c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020080:	e8 13 06 fe ff       	call   c0000698 <strlen>
c0020085:	83 c4 10             	add    esp,0x10
c0020088:	83 f8 03             	cmp    eax,0x3
c002008b:	77 17                	ja     c00200a4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002008d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020091:	89 03                	mov    DWORD PTR [ebx],eax
c0020093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020097:	89 06                	mov    DWORD PTR [esi],eax
c0020099:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00200a0:	b0 01                	mov    al,0x1
c00200a2:	eb 19                	jmp    c00200bd <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00200a4:	50                   	push   eax
c00200a5:	55                   	push   ebp
c00200a6:	57                   	push   edi
c00200a7:	56                   	push   esi
c00200a8:	53                   	push   ebx
c00200a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00200ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00200b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00200b5:	e8 aa fd ff ff       	call   c001fe64 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00200ba:	83 c4 20             	add    esp,0x20
c00200bd:	83 c4 1c             	add    esp,0x1c
c00200c0:	5b                   	pop    ebx
c00200c1:	5e                   	pop    esi
c00200c2:	5f                   	pop    edi
c00200c3:	5d                   	pop    ebp
c00200c4:	c3                   	ret    
c00200c5:	90                   	nop

c00200c6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00200c6:	57                   	push   edi
c00200c7:	56                   	push   esi
c00200c8:	53                   	push   ebx
c00200c9:	83 ec 10             	sub    esp,0x10
c00200cc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00200d0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00200d4:	85 ff                	test   edi,edi
c00200d6:	74 7b                	je     c0020153 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c00200d8:	85 f6                	test   esi,esi
c00200da:	74 77                	je     c0020153 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c00200dc:	83 ec 0c             	sub    esp,0xc
c00200df:	6a 1c                	push   0x1c
c00200e1:	e8 da f3 fe ff       	call   c000f4c0 <malloc>
c00200e6:	89 07                	mov    DWORD PTR [edi],eax
c00200e8:	89 c3                	mov    ebx,eax
c00200ea:	58                   	pop    eax
c00200eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200ef:	50                   	push   eax
c00200f0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00200f3:	50                   	push   eax
c00200f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00200f8:	50                   	push   eax
c00200f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00200fd:	50                   	push   eax
c00200fe:	56                   	push   esi
c00200ff:	e8 33 ff ff ff       	call   c0020037 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020104:	83 c4 20             	add    esp,0x20
c0020107:	84 c0                	test   al,al
c0020109:	74 07                	je     c0020112 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c002010b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020110:	74 0b                	je     c002011d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020112:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020116:	b8 01 00 00 00       	mov    eax,0x1
c002011b:	eb 3b                	jmp    c0020158 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c002011d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020121:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020125:	89 03                	mov    DWORD PTR [ebx],eax
c0020127:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002012e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020132:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020139:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020140:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020143:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002014a:	8a 06                	mov    al,BYTE PTR [esi]
c002014c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002014f:	31 c0                	xor    eax,eax
c0020151:	eb 05                	jmp    c0020158 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020153:	b8 04 00 00 00       	mov    eax,0x4
c0020158:	83 c4 10             	add    esp,0x10
c002015b:	5b                   	pop    ebx
c002015c:	5e                   	pop    esi
c002015d:	5f                   	pop    edi
c002015e:	c3                   	ret    
c002015f:	90                   	nop

c0020160 <ISO9660::exists(char const*)>:
c0020160:	83 ec 28             	sub    esp,0x28
c0020163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020167:	8d 54 24 18          	lea    edx,[esp+0x18]
c002016b:	52                   	push   edx
c002016c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002016f:	52                   	push   edx
c0020170:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020174:	52                   	push   edx
c0020175:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020179:	52                   	push   edx
c002017a:	50                   	push   eax
c002017b:	e8 b7 fe ff ff       	call   c0020037 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020180:	83 c4 3c             	add    esp,0x3c
c0020183:	c3                   	ret    

c0020184 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020184:	56                   	push   esi
c0020185:	53                   	push   ebx
c0020186:	83 ec 14             	sub    esp,0x14
c0020189:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002018d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0020191:	85 db                	test   ebx,ebx
c0020193:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020197:	0f 94 c2             	sete   dl
c002019a:	85 f6                	test   esi,esi
c002019c:	0f 94 c0             	sete   al
c002019f:	08 c2                	or     dl,al
c00201a1:	75 68                	jne    c002020b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00201a3:	85 c9                	test   ecx,ecx
c00201a5:	74 64                	je     c002020b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00201a7:	83 ec 0c             	sub    esp,0xc
c00201aa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00201ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00201b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00201b7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00201be:	50                   	push   eax
c00201bf:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00201c2:	50                   	push   eax
c00201c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00201c7:	50                   	push   eax
c00201c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00201cc:	50                   	push   eax
c00201cd:	51                   	push   ecx
c00201ce:	e8 64 fe ff ff       	call   c0020037 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00201d3:	83 c4 20             	add    esp,0x20
c00201d6:	ba 01 00 00 00       	mov    edx,0x1
c00201db:	84 c0                	test   al,al
c00201dd:	74 31                	je     c0020210 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00201df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00201ea:	89 03                	mov    DWORD PTR [ebx],eax
c00201ec:	ba 00 00 00 00       	mov    edx,0x0
c00201f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00201f5:	85 c0                	test   eax,eax
c00201f7:	0f 95 06             	setne  BYTE PTR [esi]
c00201fa:	74 14                	je     c0020210 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00201fc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020202:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020209:	eb 05                	jmp    c0020210 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002020b:	ba 04 00 00 00       	mov    edx,0x4
c0020210:	83 c4 14             	add    esp,0x14
c0020213:	89 d0                	mov    eax,edx
c0020215:	5b                   	pop    ebx
c0020216:	5e                   	pop    esi
c0020217:	c3                   	ret    

c0020218 <ISO9660::openDir(char const*, void**)>:
c0020218:	57                   	push   edi
c0020219:	56                   	push   esi
c002021a:	53                   	push   ebx
c002021b:	83 ec 10             	sub    esp,0x10
c002021e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020222:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020226:	85 ff                	test   edi,edi
c0020228:	0f 84 95 00 00 00    	je     c00202c3 <ISO9660::openDir(char const*, void**)+0xab>
c002022e:	85 f6                	test   esi,esi
c0020230:	0f 84 8d 00 00 00    	je     c00202c3 <ISO9660::openDir(char const*, void**)+0xab>
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	6a 1c                	push   0x1c
c002023b:	e8 80 f2 fe ff       	call   c000f4c0 <malloc>
c0020240:	89 07                	mov    DWORD PTR [edi],eax
c0020242:	89 c3                	mov    ebx,eax
c0020244:	59                   	pop    ecx
c0020245:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020249:	50                   	push   eax
c002024a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002024d:	50                   	push   eax
c002024e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020252:	50                   	push   eax
c0020253:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020257:	50                   	push   eax
c0020258:	56                   	push   esi
c0020259:	e8 d9 fd ff ff       	call   c0020037 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002025e:	83 c4 20             	add    esp,0x20
c0020261:	84 c0                	test   al,al
c0020263:	74 07                	je     c002026c <ISO9660::openDir(char const*, void**)+0x54>
c0020265:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002026a:	75 21                	jne    c002028d <ISO9660::openDir(char const*, void**)+0x75>
c002026c:	0f b6 c0             	movzx  eax,al
c002026f:	52                   	push   edx
c0020270:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020274:	50                   	push   eax
c0020275:	68 32 9e 02 c0       	push   0xc0029e32
c002027a:	e8 0e 24 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c002027f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020283:	83 c4 10             	add    esp,0x10
c0020286:	b8 01 00 00 00       	mov    eax,0x1
c002028b:	eb 3b                	jmp    c00202c8 <ISO9660::openDir(char const*, void**)+0xb0>
c002028d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020291:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020295:	89 03                	mov    DWORD PTR [ebx],eax
c0020297:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002029e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00202a2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00202a9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00202b0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00202b3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00202ba:	8a 06                	mov    al,BYTE PTR [esi]
c00202bc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00202bf:	31 c0                	xor    eax,eax
c00202c1:	eb 05                	jmp    c00202c8 <ISO9660::openDir(char const*, void**)+0xb0>
c00202c3:	b8 04 00 00 00       	mov    eax,0x4
c00202c8:	83 c4 10             	add    esp,0x10
c00202cb:	5b                   	pop    ebx
c00202cc:	5e                   	pop    esi
c00202cd:	5f                   	pop    edi
c00202ce:	c3                   	ret    
c00202cf:	90                   	nop

c00202d0 <ISO9660::ISO9660()>:
c00202d0:	83 ec 0c             	sub    esp,0xc
c00202d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d7:	83 ec 0c             	sub    esp,0xc
c00202da:	50                   	push   eax
c00202db:	e8 b2 26 ff ff       	call   c0012992 <Filesystem::Filesystem()>
c00202e0:	83 c4 10             	add    esp,0x10
c00202e3:	ba 58 9e 02 c0       	mov    edx,0xc0029e58
c00202e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ec:	89 10                	mov    DWORD PTR [eax],edx
c00202ee:	90                   	nop
c00202ef:	83 c4 0c             	add    esp,0xc
c00202f2:	c3                   	ret    
c00202f3:	90                   	nop

c00202f4 <SoundChannel::~SoundChannel()>:
c00202f4:	83 ec 0c             	sub    esp,0xc
c00202f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202fb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	50                   	push   eax
c0020302:	e8 c9 f1 fe ff       	call   c000f4d0 <free>
c0020307:	83 c4 10             	add    esp,0x10
c002030a:	90                   	nop
c002030b:	83 c4 0c             	add    esp,0xc
c002030e:	c3                   	ret    
c002030f:	90                   	nop

c0020310 <SoundChannel::setSpeed(float)>:
c0020310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020318:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002031b:	c3                   	ret    

c002031c <SoundChannel::getSpeed()>:
c002031c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020320:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0020323:	c3                   	ret    

c0020324 <SoundChannel::setVolume(int)>:
c0020324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020328:	83 f8 64             	cmp    eax,0x64
c002032b:	7e 05                	jle    c0020332 <SoundChannel::setVolume(int)+0xe>
c002032d:	b8 64 00 00 00       	mov    eax,0x64
c0020332:	85 c0                	test   eax,eax
c0020334:	79 02                	jns    c0020338 <SoundChannel::setVolume(int)+0x14>
c0020336:	31 c0                	xor    eax,eax
c0020338:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002033c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002033f:	c3                   	ret    

c0020340 <SoundChannel::getVolume()>:
c0020340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020344:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020347:	c3                   	ret    

c0020348 <SoundChannel::pause()>:
c0020348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002034c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0020350:	c3                   	ret    
c0020351:	90                   	nop

c0020352 <SoundChannel::SoundChannel(int, int, int, int)>:
c0020352:	83 ec 1c             	sub    esp,0x1c
c0020355:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020359:	e8 ea ff ff ff       	call   c0020348 <SoundChannel::pause()>
c002035e:	83 c4 04             	add    esp,0x4
c0020361:	6a 50                	push   0x50
c0020363:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020367:	e8 b8 ff ff ff       	call   c0020324 <SoundChannel::setVolume(int)>
c002036c:	83 c4 08             	add    esp,0x8
c002036f:	a1 d0 9e 02 c0       	mov    eax,ds:0xc0029ed0
c0020374:	50                   	push   eax
c0020375:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020379:	e8 92 ff ff ff       	call   c0020310 <SoundChannel::setSpeed(float)>
c002037e:	83 c4 08             	add    esp,0x8
c0020381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020389:	89 10                	mov    DWORD PTR [eax],edx
c002038b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002038f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020393:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002039a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002039e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00203a1:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00203a6:	75 23                	jne    c00203cb <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00203a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00203ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00203b5:	0f af c2             	imul   eax,edx
c00203b8:	85 c0                	test   eax,eax
c00203ba:	79 03                	jns    c00203bf <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00203bc:	83 c0 03             	add    eax,0x3
c00203bf:	c1 f8 02             	sar    eax,0x2
c00203c2:	05 a0 0f 00 00       	add    eax,0xfa0
c00203c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00203cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00203d3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00203d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203da:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00203e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203e5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00203ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203f0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00203f3:	c1 e0 02             	shl    eax,0x2
c00203f6:	83 ec 0c             	sub    esp,0xc
c00203f9:	50                   	push   eax
c00203fa:	e8 c1 f0 fe ff       	call   c000f4c0 <malloc>
c00203ff:	83 c4 10             	add    esp,0x10
c0020402:	89 c2                	mov    edx,eax
c0020404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020408:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002040b:	83 ec 04             	sub    esp,0x4
c002040e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020412:	50                   	push   eax
c0020413:	6a 01                	push   0x1
c0020415:	6a 04                	push   0x4
c0020417:	e8 23 85 fe ff       	call   c000893f <src_new>
c002041c:	83 c4 10             	add    esp,0x10
c002041f:	89 c2                	mov    edx,eax
c0020421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020425:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002042c:	85 c0                	test   eax,eax
c002042e:	74 10                	je     c0020440 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0020430:	83 ec 0c             	sub    esp,0xc
c0020433:	68 b4 9e 02 c0       	push   0xc0029eb4
c0020438:	e8 1a 8d ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002043d:	83 c4 10             	add    esp,0x10
c0020440:	a0 00 db 02 c0       	mov    al,ds:0xc002db00
c0020445:	83 f0 01             	xor    eax,0x1
c0020448:	84 c0                	test   al,al
c002044a:	74 57                	je     c00204a3 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002044c:	a1 d4 9e 02 c0       	mov    eax,ds:0xc0029ed4
c0020451:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020455:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002045d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0020465:	7f 35                	jg     c002049c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0020467:	83 ec 0c             	sub    esp,0xc
c002046a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002046e:	e8 c4 49 00 00       	call   c0024e37 <__floatsisf>
c0020473:	83 c4 10             	add    esp,0x10
c0020476:	8b 15 d4 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029ed4
c002047c:	83 ec 08             	sub    esp,0x8
c002047f:	52                   	push   edx
c0020480:	50                   	push   eax
c0020481:	e8 c3 45 00 00       	call   c0024a49 <__mulsf3>
c0020486:	83 c4 10             	add    esp,0x10
c0020489:	89 c2                	mov    edx,eax
c002048b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002048f:	89 14 85 00 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2900],edx
c0020496:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002049a:	eb c1                	jmp    c002045d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002049c:	c6 05 00 db 02 c0 01 	mov    BYTE PTR ds:0xc002db00,0x1
c00204a3:	90                   	nop
c00204a4:	83 c4 1c             	add    esp,0x1c
c00204a7:	c3                   	ret    

c00204a8 <SoundChannel::play()>:
c00204a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204ac:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00204b0:	c3                   	ret    
c00204b1:	90                   	nop

c00204b2 <SoundChannel::paused()>:
c00204b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204b6:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00204b9:	c3                   	ret    

c00204ba <SoundChannel::getSampleRate()>:
c00204ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204be:	8b 00                	mov    eax,DWORD PTR [eax]
c00204c0:	c3                   	ret    
c00204c1:	90                   	nop

c00204c2 <SoundChannel::getBits()>:
c00204c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00204c9:	c3                   	ret    

c00204ca <SoundChannel::getBufferUsed()>:
c00204ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204ce:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00204d1:	c3                   	ret    

c00204d2 <SoundChannel::getBufferSize()>:
c00204d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00204d6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00204d9:	c3                   	ret    

c00204da <SoundChannel::unbuffer(float*, int, int)>:
c00204da:	56                   	push   esi
c00204db:	53                   	push   ebx
c00204dc:	83 ec 40             	sub    esp,0x40
c00204df:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00204e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00204e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00204ea:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00204ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00204f1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00204f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00204f9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00204fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020501:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0020505:	e8 2d 49 00 00       	call   c0024e37 <__floatsisf>
c002050a:	5a                   	pop    edx
c002050b:	89 c6                	mov    esi,eax
c002050d:	ff 33                	push   DWORD PTR [ebx]
c002050f:	e8 23 49 00 00       	call   c0024e37 <__floatsisf>
c0020514:	59                   	pop    ecx
c0020515:	5a                   	pop    edx
c0020516:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0020519:	50                   	push   eax
c002051a:	e8 2a 45 00 00       	call   c0024a49 <__mulsf3>
c002051f:	59                   	pop    ecx
c0020520:	5a                   	pop    edx
c0020521:	50                   	push   eax
c0020522:	56                   	push   esi
c0020523:	e8 e4 46 00 00       	call   c0024c0c <__divsf3>
c0020528:	89 04 24             	mov    DWORD PTR [esp],eax
c002052b:	e8 d7 5b 00 00       	call   c0026107 <__extendsfdf2>
c0020530:	59                   	pop    ecx
c0020531:	5e                   	pop    esi
c0020532:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020536:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002053a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0020542:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020546:	50                   	push   eax
c0020547:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002054a:	e8 e5 7f fe ff       	call   c0008534 <src_process>
c002054f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020553:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0020556:	83 c4 0c             	add    esp,0xc
c0020559:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002055c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002055f:	29 d0                	sub    eax,edx
c0020561:	c1 e0 02             	shl    eax,0x2
c0020564:	50                   	push   eax
c0020565:	8d 04 91             	lea    eax,[ecx+edx*4]
c0020568:	50                   	push   eax
c0020569:	51                   	push   ecx
c002056a:	e8 9e 00 fe ff       	call   c000060d <memmove>
c002056f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020573:	83 c4 44             	add    esp,0x44
c0020576:	5b                   	pop    ebx
c0020577:	5e                   	pop    esi
c0020578:	c3                   	ret    
c0020579:	90                   	nop

c002057a <SoundChannel::buffer8(unsigned char*, int)>:
c002057a:	55                   	push   ebp
c002057b:	57                   	push   edi
c002057c:	56                   	push   esi
c002057d:	53                   	push   ebx
c002057e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020582:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0020586:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020589:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002058d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020590:	74 7a                	je     c002060c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020592:	85 ff                	test   edi,edi
c0020594:	7e 76                	jle    c002060c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020596:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002059a:	8d 70 01             	lea    esi,[eax+0x1]
c002059d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00205a0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00205a3:	8b 1c 9d 00 d7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2900]
c00205aa:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00205ad:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00205b0:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00205b3:	74 5e                	je     c0020613 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00205b5:	83 ff 01             	cmp    edi,0x1
c00205b8:	74 4b                	je     c0020605 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00205ba:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00205be:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00205c1:	8d 70 01             	lea    esi,[eax+0x1]
c00205c4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00205c7:	8b 1c 9d 00 d7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2900]
c00205ce:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00205d1:	b8 02 00 00 00       	mov    eax,0x2
c00205d6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00205d9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00205dc:	75 23                	jne    c0020601 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00205de:	eb 27                	jmp    c0020607 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00205e0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00205e5:	8d 71 01             	lea    esi,[ecx+0x1]
c00205e8:	40                   	inc    eax
c00205e9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00205ec:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00205ef:	8b 1c 9d 00 d7 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2900]
c00205f6:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00205f9:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00205fc:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00205ff:	74 06                	je     c0020607 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0020601:	39 c7                	cmp    edi,eax
c0020603:	75 db                	jne    c00205e0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0020605:	89 f8                	mov    eax,edi
c0020607:	5b                   	pop    ebx
c0020608:	5e                   	pop    esi
c0020609:	5f                   	pop    edi
c002060a:	5d                   	pop    ebp
c002060b:	c3                   	ret    
c002060c:	5b                   	pop    ebx
c002060d:	31 c0                	xor    eax,eax
c002060f:	5e                   	pop    esi
c0020610:	5f                   	pop    edi
c0020611:	5d                   	pop    ebp
c0020612:	c3                   	ret    
c0020613:	b8 01 00 00 00       	mov    eax,0x1
c0020618:	eb ed                	jmp    c0020607 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002061a <SoundDevice::SoundDevice(char const*)>:
c002061a:	83 ec 1c             	sub    esp,0x1c
c002061d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020621:	83 ec 08             	sub    esp,0x8
c0020624:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020628:	50                   	push   eax
c0020629:	e8 3e 36 ff ff       	call   c0013c6c <Device::Device(char const*)>
c002062e:	83 c4 10             	add    esp,0x10
c0020631:	ba e0 9e 02 c0       	mov    edx,0xc0029ee0
c0020636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002063a:	89 10                	mov    DWORD PTR [eax],edx
c002063c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020640:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c002064a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002064e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0020658:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020660:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020665:	7f 19                	jg     c0020680 <SoundDevice::SoundDevice(char const*)+0x66>
c0020667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002066b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002066f:	83 c2 54             	add    edx,0x54
c0020672:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002067a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002067e:	eb e0                	jmp    c0020660 <SoundDevice::SoundDevice(char const*)+0x46>
c0020680:	90                   	nop
c0020681:	83 c4 1c             	add    esp,0x1c
c0020684:	c3                   	ret    
c0020685:	90                   	nop

c0020686 <SoundDevice::~SoundDevice()>:
c0020686:	53                   	push   ebx
c0020687:	83 ec 18             	sub    esp,0x18
c002068a:	ba e0 9e 02 c0       	mov    edx,0xc0029ee0
c002068f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020693:	89 10                	mov    DWORD PTR [eax],edx
c0020695:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002069d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00206a2:	7f 46                	jg     c00206ea <SoundDevice::~SoundDevice()+0x64>
c00206a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00206ac:	83 c2 54             	add    edx,0x54
c00206af:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00206b3:	85 c0                	test   eax,eax
c00206b5:	74 2d                	je     c00206e4 <SoundDevice::~SoundDevice()+0x5e>
c00206b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00206bf:	83 c2 54             	add    edx,0x54
c00206c2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00206c6:	85 db                	test   ebx,ebx
c00206c8:	74 1a                	je     c00206e4 <SoundDevice::~SoundDevice()+0x5e>
c00206ca:	83 ec 0c             	sub    esp,0xc
c00206cd:	53                   	push   ebx
c00206ce:	e8 21 fc ff ff       	call   c00202f4 <SoundChannel::~SoundChannel()>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	83 ec 08             	sub    esp,0x8
c00206d9:	6a 2c                	push   0x2c
c00206db:	53                   	push   ebx
c00206dc:	e8 cc 1e ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00206e1:	83 c4 10             	add    esp,0x10
c00206e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00206e8:	eb b3                	jmp    c002069d <SoundDevice::~SoundDevice()+0x17>
c00206ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206ee:	83 ec 0c             	sub    esp,0xc
c00206f1:	50                   	push   eax
c00206f2:	e8 57 32 ff ff       	call   c001394e <Device::~Device()>
c00206f7:	83 c4 10             	add    esp,0x10
c00206fa:	90                   	nop
c00206fb:	83 c4 18             	add    esp,0x18
c00206fe:	5b                   	pop    ebx
c00206ff:	c3                   	ret    

c0020700 <SoundDevice::~SoundDevice()>:
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	83 ec 0c             	sub    esp,0xc
c0020706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002070a:	e8 77 ff ff ff       	call   c0020686 <SoundDevice::~SoundDevice()>
c002070f:	83 c4 10             	add    esp,0x10
c0020712:	83 ec 08             	sub    esp,0x8
c0020715:	68 e4 01 00 00       	push   0x1e4
c002071a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002071e:	e8 8a 1e ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0020723:	83 c4 10             	add    esp,0x10
c0020726:	83 c4 0c             	add    esp,0xc
c0020729:	c3                   	ret    

c002072a <SoundDevice::getFreeChannelNum()>:
c002072a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002072e:	31 c0                	xor    eax,eax
c0020730:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0020738:	74 09                	je     c0020743 <SoundDevice::getFreeChannelNum()+0x19>
c002073a:	40                   	inc    eax
c002073b:	83 f8 20             	cmp    eax,0x20
c002073e:	75 f0                	jne    c0020730 <SoundDevice::getFreeChannelNum()+0x6>
c0020740:	83 c8 ff             	or     eax,0xffffffff
c0020743:	c3                   	ret    

c0020744 <SoundDevice::addChannel(SoundChannel*)>:
c0020744:	56                   	push   esi
c0020745:	53                   	push   ebx
c0020746:	51                   	push   ecx
c0020747:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002074b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002074f:	53                   	push   ebx
c0020750:	e8 d5 ff ff ff       	call   c002072a <SoundDevice::getFreeChannelNum()>
c0020755:	5a                   	pop    edx
c0020756:	83 f8 ff             	cmp    eax,0xffffffff
c0020759:	74 51                	je     c00207ac <SoundDevice::addChannel(SoundChannel*)+0x68>
c002075b:	85 f6                	test   esi,esi
c002075d:	74 4d                	je     c00207ac <SoundDevice::addChannel(SoundChannel*)+0x68>
c002075f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0020766:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002076d:	75 30                	jne    c002079f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002076f:	83 ec 0c             	sub    esp,0xc
c0020772:	56                   	push   esi
c0020773:	e8 42 fd ff ff       	call   c00204ba <SoundChannel::getSampleRate()>
c0020778:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002077e:	89 34 24             	mov    DWORD PTR [esp],esi
c0020781:	e8 3c fd ff ff       	call   c00204c2 <SoundChannel::getBits()>
c0020786:	83 c4 0c             	add    esp,0xc
c0020789:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002078f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020791:	50                   	push   eax
c0020792:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0020798:	53                   	push   ebx
c0020799:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002079c:	83 c4 10             	add    esp,0x10
c002079f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00207a5:	b8 01 00 00 00       	mov    eax,0x1
c00207aa:	eb 03                	jmp    c00207af <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00207ac:	83 c8 ff             	or     eax,0xffffffff
c00207af:	5a                   	pop    edx
c00207b0:	5b                   	pop    ebx
c00207b1:	5e                   	pop    esi
c00207b2:	c3                   	ret    
c00207b3:	90                   	nop

c00207b4 <SoundDevice::removeChannel(int)>:
c00207b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00207b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207bc:	83 fa 1f             	cmp    edx,0x1f
c00207bf:	77 23                	ja     c00207e4 <SoundDevice::removeChannel(int)+0x30>
c00207c1:	8d 14 90             	lea    edx,[eax+edx*4]
c00207c4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00207cb:	74 17                	je     c00207e4 <SoundDevice::removeChannel(int)+0x30>
c00207cd:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00207d7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00207dd:	75 05                	jne    c00207e4 <SoundDevice::removeChannel(int)+0x30>
c00207df:	8b 00                	mov    eax,DWORD PTR [eax]
c00207e1:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00207e4:	c3                   	ret    
c00207e5:	90                   	nop

c00207e6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00207e6:	57                   	push   edi
c00207e7:	56                   	push   esi
c00207e8:	53                   	push   ebx
c00207e9:	31 db                	xor    ebx,ebx
c00207eb:	83 ec 10             	sub    esp,0x10
c00207ee:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00207f2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00207f6:	0f 8d cb 00 00 00    	jge    c00208c7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00207fc:	83 ec 0c             	sub    esp,0xc
c00207ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020803:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0020806:	e8 fc 58 00 00       	call   c0026107 <__extendsfdf2>
c002080b:	83 c4 10             	add    esp,0x10
c002080e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020812:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020816:	68 00 00 f0 3f       	push   0x3ff00000
c002081b:	6a 00                	push   0x0
c002081d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020825:	e8 69 48 00 00       	call   c0025093 <__adddf3>
c002082a:	83 c4 10             	add    esp,0x10
c002082d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020831:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020835:	68 00 00 e0 3f       	push   0x3fe00000
c002083a:	6a 00                	push   0x0
c002083c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020844:	e8 c7 4e 00 00       	call   c0025710 <__muldf3>
c0020849:	83 c4 10             	add    esp,0x10
c002084c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020850:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020854:	68 00 00 60 40       	push   0x40600000
c0020859:	6a 00                	push   0x0
c002085b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002085f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020863:	e8 a8 4e 00 00       	call   c0025710 <__muldf3>
c0020868:	59                   	pop    ecx
c0020869:	5f                   	pop    edi
c002086a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002086e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002087a:	e8 64 57 00 00       	call   c0025fe3 <__truncdfsf2>
c002087f:	5a                   	pop    edx
c0020880:	89 c7                	mov    edi,eax
c0020882:	59                   	pop    ecx
c0020883:	68 00 00 fe 42       	push   0x42fe0000
c0020888:	50                   	push   eax
c0020889:	e8 ff 47 00 00       	call   c002508d <__gesf2>
c002088e:	83 c4 10             	add    esp,0x10
c0020891:	85 c0                	test   eax,eax
c0020893:	78 06                	js     c002089b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020895:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020899:	eb 26                	jmp    c00208c1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002089b:	50                   	push   eax
c002089c:	50                   	push   eax
c002089d:	6a 00                	push   0x0
c002089f:	57                   	push   edi
c00208a0:	e8 ec 47 00 00       	call   c0025091 <__lesf2>
c00208a5:	83 c4 10             	add    esp,0x10
c00208a8:	85 c0                	test   eax,eax
c00208aa:	7f 06                	jg     c00208b2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00208ac:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00208b0:	eb 0f                	jmp    c00208c1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00208b2:	83 ec 0c             	sub    esp,0xc
c00208b5:	57                   	push   edi
c00208b6:	e8 e1 58 00 00       	call   c002619c <lrintf>
c00208bb:	83 c4 10             	add    esp,0x10
c00208be:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00208c1:	43                   	inc    ebx
c00208c2:	e9 2b ff ff ff       	jmp    c00207f2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00208c7:	83 c4 10             	add    esp,0x10
c00208ca:	5b                   	pop    ebx
c00208cb:	5e                   	pop    esi
c00208cc:	5f                   	pop    edi
c00208cd:	c3                   	ret    

c00208ce <SoundDevice::getAudio(int, float*, float*)>:
c00208ce:	55                   	push   ebp
c00208cf:	57                   	push   edi
c00208d0:	56                   	push   esi
c00208d1:	53                   	push   ebx
c00208d2:	31 db                	xor    ebx,ebx
c00208d4:	83 ec 20             	sub    esp,0x20
c00208d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00208df:	c1 e0 02             	shl    eax,0x2
c00208e2:	50                   	push   eax
c00208e3:	6a 00                	push   0x0
c00208e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208e9:	e8 8d fd fd ff       	call   c000067b <memset>
c00208ee:	83 c4 10             	add    esp,0x10
c00208f1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00208f5:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00208fc:	85 c0                	test   eax,eax
c00208fe:	0f 84 d7 00 00 00    	je     c00209db <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020904:	83 ec 0c             	sub    esp,0xc
c0020907:	50                   	push   eax
c0020908:	e8 a5 fb ff ff       	call   c00204b2 <SoundChannel::paused()>
c002090d:	83 c4 10             	add    esp,0x10
c0020910:	84 c0                	test   al,al
c0020912:	0f 85 c3 00 00 00    	jne    c00209db <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020918:	83 ec 0c             	sub    esp,0xc
c002091b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020922:	e8 19 fa ff ff       	call   c0020340 <SoundChannel::getVolume()>
c0020927:	83 c4 10             	add    esp,0x10
c002092a:	85 c0                	test   eax,eax
c002092c:	0f 84 a9 00 00 00    	je     c00209db <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020932:	83 ec 0c             	sub    esp,0xc
c0020935:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002093c:	e8 ff f9 ff ff       	call   c0020340 <SoundChannel::getVolume()>
c0020941:	83 ec 0c             	sub    esp,0xc
c0020944:	50                   	push   eax
c0020945:	e8 ed 44 00 00       	call   c0024e37 <__floatsisf>
c002094a:	59                   	pop    ecx
c002094b:	5d                   	pop    ebp
c002094c:	31 ed                	xor    ebp,ebp
c002094e:	68 00 00 c8 42       	push   0x42c80000
c0020953:	50                   	push   eax
c0020954:	e8 b3 42 00 00       	call   c0024c0c <__divsf3>
c0020959:	83 c4 10             	add    esp,0x10
c002095c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020960:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020964:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002096a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002096e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020975:	e8 60 fb ff ff       	call   c00204da <SoundChannel::unbuffer(float*, int, int)>
c002097a:	83 c4 20             	add    esp,0x20
c002097d:	89 c1                	mov    ecx,eax
c002097f:	39 cd                	cmp    ebp,ecx
c0020981:	7d 52                	jge    c00209d5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020983:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020987:	50                   	push   eax
c0020988:	50                   	push   eax
c0020989:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002098d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020990:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020994:	e8 b0 40 00 00       	call   c0024a49 <__mulsf3>
c0020999:	5a                   	pop    edx
c002099a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002099e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00209a4:	e8 8e 44 00 00       	call   c0024e37 <__floatsisf>
c00209a9:	59                   	pop    ecx
c00209aa:	5a                   	pop    edx
c00209ab:	50                   	push   eax
c00209ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00209b0:	e8 57 42 00 00       	call   c0024c0c <__divsf3>
c00209b5:	59                   	pop    ecx
c00209b6:	5a                   	pop    edx
c00209b7:	50                   	push   eax
c00209b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00209bc:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00209bf:	e8 62 3d 00 00       	call   c0024726 <__addsf3>
c00209c4:	83 c4 10             	add    esp,0x10
c00209c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00209cb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00209cf:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00209d2:	45                   	inc    ebp
c00209d3:	eb aa                	jmp    c002097f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00209d5:	39 cf                	cmp    edi,ecx
c00209d7:	7e 02                	jle    c00209db <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00209d9:	89 cf                	mov    edi,ecx
c00209db:	43                   	inc    ebx
c00209dc:	83 fb 20             	cmp    ebx,0x20
c00209df:	0f 85 10 ff ff ff    	jne    c00208f5 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00209e5:	83 c4 1c             	add    esp,0x1c
c00209e8:	89 f8                	mov    eax,edi
c00209ea:	5b                   	pop    ebx
c00209eb:	5e                   	pop    esi
c00209ec:	5f                   	pop    edi
c00209ed:	5d                   	pop    ebp
c00209ee:	c3                   	ret    
c00209ef:	90                   	nop

c00209f0 <PCI::open(int, int, void*)>:
c00209f0:	83 ec 18             	sub    esp,0x18
c00209f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00209f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00209f9:	50                   	push   eax
c00209fa:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00209fd:	31 c0                	xor    eax,eax
c00209ff:	83 c4 1c             	add    esp,0x1c
c0020a02:	c3                   	ret    
c0020a03:	90                   	nop

c0020a04 <PCI::close(int, int, void*)>:
c0020a04:	31 c0                	xor    eax,eax
c0020a06:	c3                   	ret    
c0020a07:	90                   	nop

c0020a08 <PCI::PCI()>:
c0020a08:	83 ec 0c             	sub    esp,0xc
c0020a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a0f:	83 ec 08             	sub    esp,0x8
c0020a12:	68 10 9f 02 c0       	push   0xc0029f10
c0020a17:	50                   	push   eax
c0020a18:	e8 0b 29 ff ff       	call   c0013328 <Bus::Bus(char const*)>
c0020a1d:	83 c4 10             	add    esp,0x10
c0020a20:	ba 7c 9f 02 c0       	mov    edx,0xc0029f7c
c0020a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a29:	89 10                	mov    DWORD PTR [eax],edx
c0020a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020a35:	0f b6 d0             	movzx  edx,al
c0020a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a47:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020a4d:	0f b6 d0             	movzx  edx,al
c0020a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a54:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020a63:	8d 50 01             	lea    edx,[eax+0x1]
c0020a66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a6a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020a70:	0f b6 d0             	movzx  edx,al
c0020a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a77:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020a7b:	83 c9 c0             	or     ecx,0xffffffc0
c0020a7e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020a82:	90                   	nop
c0020a83:	83 c4 0c             	add    esp,0xc
c0020a86:	c3                   	ret    
c0020a87:	90                   	nop

c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020a88:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020a8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020a91:	89 ca                	mov    edx,ecx
c0020a93:	c1 e0 10             	shl    eax,0x10
c0020a96:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020a9c:	09 d0                	or     eax,edx
c0020a9e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020aa3:	c1 e2 08             	shl    edx,0x8
c0020aa6:	09 d0                	or     eax,edx
c0020aa8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020aad:	c1 e2 0b             	shl    edx,0xb
c0020ab0:	09 d0                	or     eax,edx
c0020ab2:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020ab7:	0d 00 00 00 80       	or     eax,0x80000000
c0020abc:	ef                   	out    dx,eax
c0020abd:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020ac2:	ed                   	in     eax,dx
c0020ac3:	83 e1 02             	and    ecx,0x2
c0020ac6:	0f b6 c9             	movzx  ecx,cl
c0020ac9:	c1 e1 03             	shl    ecx,0x3
c0020acc:	d3 e8                	shr    eax,cl
c0020ace:	c3                   	ret    
c0020acf:	90                   	nop

c0020ad0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020ad0:	6a 00                	push   0x0
c0020ad2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ad7:	50                   	push   eax
c0020ad8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020add:	50                   	push   eax
c0020ade:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ae3:	50                   	push   eax
c0020ae4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020ae8:	e8 9b ff ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020aed:	83 c4 14             	add    esp,0x14
c0020af0:	c3                   	ret    
c0020af1:	90                   	nop

c0020af2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020af2:	6a 0e                	push   0xe
c0020af4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020af9:	50                   	push   eax
c0020afa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020aff:	50                   	push   eax
c0020b00:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b05:	50                   	push   eax
c0020b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b0a:	e8 79 ff ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b0f:	83 c4 14             	add    esp,0x14
c0020b12:	0f b6 c0             	movzx  eax,al
c0020b15:	c3                   	ret    

c0020b16 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020b16:	55                   	push   ebp
c0020b17:	57                   	push   edi
c0020b18:	56                   	push   esi
c0020b19:	53                   	push   ebx
c0020b1a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0020b1f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0020b24:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0020b29:	6a 0a                	push   0xa
c0020b2b:	56                   	push   esi
c0020b2c:	55                   	push   ebp
c0020b2d:	57                   	push   edi
c0020b2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020b32:	e8 51 ff ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b37:	6a 0a                	push   0xa
c0020b39:	89 c3                	mov    ebx,eax
c0020b3b:	56                   	push   esi
c0020b3c:	0f b6 db             	movzx  ebx,bl
c0020b3f:	55                   	push   ebp
c0020b40:	57                   	push   edi
c0020b41:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020b45:	e8 3e ff ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b4a:	83 c4 28             	add    esp,0x28
c0020b4d:	25 00 ff 00 00       	and    eax,0xff00
c0020b52:	09 d8                	or     eax,ebx
c0020b54:	5b                   	pop    ebx
c0020b55:	5e                   	pop    esi
c0020b56:	5f                   	pop    edi
c0020b57:	5d                   	pop    ebp
c0020b58:	c3                   	ret    
c0020b59:	90                   	nop

c0020b5a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020b5a:	6a 08                	push   0x8
c0020b5c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b61:	50                   	push   eax
c0020b62:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b67:	50                   	push   eax
c0020b68:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b6d:	50                   	push   eax
c0020b6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b72:	e8 11 ff ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b77:	83 c4 14             	add    esp,0x14
c0020b7a:	0f b6 c4             	movzx  eax,ah
c0020b7d:	c3                   	ret    

c0020b7e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020b7e:	6a 08                	push   0x8
c0020b80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b85:	50                   	push   eax
c0020b86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b8b:	50                   	push   eax
c0020b8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020b91:	50                   	push   eax
c0020b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b96:	e8 ed fe ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020b9b:	83 c4 14             	add    esp,0x14
c0020b9e:	c3                   	ret    
c0020b9f:	90                   	nop

c0020ba0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020ba0:	6a 3c                	push   0x3c
c0020ba2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ba7:	50                   	push   eax
c0020ba8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020bad:	50                   	push   eax
c0020bae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020bb3:	50                   	push   eax
c0020bb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020bb8:	e8 cb fe ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020bbd:	83 c4 14             	add    esp,0x14
c0020bc0:	c3                   	ret    
c0020bc1:	90                   	nop

c0020bc2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020bc2:	6a 18                	push   0x18
c0020bc4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020bc9:	50                   	push   eax
c0020bca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020bcf:	50                   	push   eax
c0020bd0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020bd5:	50                   	push   eax
c0020bd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020bda:	e8 a9 fe ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020bdf:	83 c4 14             	add    esp,0x14
c0020be2:	0f b6 c4             	movzx  eax,ah
c0020be5:	c3                   	ret    

c0020be6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020be6:	55                   	push   ebp
c0020be7:	57                   	push   edi
c0020be8:	56                   	push   esi
c0020be9:	53                   	push   ebx
c0020bea:	50                   	push   eax
c0020beb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020bef:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0020bf4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020bf9:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0020bfe:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0020c05:	8d 43 12             	lea    eax,[ebx+0x12]
c0020c08:	83 c3 10             	add    ebx,0x10
c0020c0b:	0f b6 c0             	movzx  eax,al
c0020c0e:	0f b6 db             	movzx  ebx,bl
c0020c11:	50                   	push   eax
c0020c12:	51                   	push   ecx
c0020c13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020c17:	57                   	push   edi
c0020c18:	55                   	push   ebp
c0020c19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c1d:	e8 66 fe ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020c22:	53                   	push   ebx
c0020c23:	89 c6                	mov    esi,eax
c0020c25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020c29:	c1 e6 10             	shl    esi,0x10
c0020c2c:	51                   	push   ecx
c0020c2d:	57                   	push   edi
c0020c2e:	55                   	push   ebp
c0020c2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c33:	e8 50 fe ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020c38:	83 c4 2c             	add    esp,0x2c
c0020c3b:	0f b7 c0             	movzx  eax,ax
c0020c3e:	5b                   	pop    ebx
c0020c3f:	09 f0                	or     eax,esi
c0020c41:	5e                   	pop    esi
c0020c42:	5f                   	pop    edi
c0020c43:	5d                   	pop    ebp
c0020c44:	c3                   	ret    
c0020c45:	90                   	nop

c0020c46 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020c46:	53                   	push   ebx
c0020c47:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020c4c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020c51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c55:	c1 e1 10             	shl    ecx,0x10
c0020c58:	25 fc 00 00 00       	and    eax,0xfc
c0020c5d:	09 c1                	or     ecx,eax
c0020c5f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020c64:	c1 e0 08             	shl    eax,0x8
c0020c67:	09 c1                	or     ecx,eax
c0020c69:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020c6e:	c1 e0 0b             	shl    eax,0xb
c0020c71:	09 c1                	or     ecx,eax
c0020c73:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020c79:	89 c8                	mov    eax,ecx
c0020c7b:	ef                   	out    dx,eax
c0020c7c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020c81:	ed                   	in     eax,dx
c0020c82:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020c87:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020c8c:	74 0a                	je     c0020c98 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020c8e:	0f b7 d8             	movzx  ebx,ax
c0020c91:	89 d0                	mov    eax,edx
c0020c93:	c1 e0 10             	shl    eax,0x10
c0020c96:	eb 05                	jmp    c0020c9d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020c98:	66 31 c0             	xor    ax,ax
c0020c9b:	89 d3                	mov    ebx,edx
c0020c9d:	09 c3                	or     ebx,eax
c0020c9f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020ca4:	89 c8                	mov    eax,ecx
c0020ca6:	ef                   	out    dx,eax
c0020ca7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020cac:	89 d8                	mov    eax,ebx
c0020cae:	ef                   	out    dx,eax
c0020caf:	5b                   	pop    ebx
c0020cb0:	c3                   	ret    
c0020cb1:	90                   	nop

c0020cb2 <PCI::checkBus(unsigned char)>:
c0020cb2:	56                   	push   esi
c0020cb3:	53                   	push   ebx
c0020cb4:	31 db                	xor    ebx,ebx
c0020cb6:	51                   	push   ecx
c0020cb7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020cbc:	52                   	push   edx
c0020cbd:	53                   	push   ebx
c0020cbe:	43                   	inc    ebx
c0020cbf:	56                   	push   esi
c0020cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cc4:	e8 2b 03 00 00       	call   c0020ff4 <PCI::checkDevice(unsigned char, unsigned char)>
c0020cc9:	83 c4 10             	add    esp,0x10
c0020ccc:	83 fb 20             	cmp    ebx,0x20
c0020ccf:	75 eb                	jne    c0020cbc <PCI::checkBus(unsigned char)+0xa>
c0020cd1:	58                   	pop    eax
c0020cd2:	5b                   	pop    ebx
c0020cd3:	5e                   	pop    esi
c0020cd4:	c3                   	ret    
c0020cd5:	90                   	nop

c0020cd6 <PCI::foundDevice(PCIDeviceInfo)>:
c0020cd6:	55                   	push   ebp
c0020cd7:	57                   	push   edi
c0020cd8:	56                   	push   esi
c0020cd9:	53                   	push   ebx
c0020cda:	83 ec 1c             	sub    esp,0x1c
c0020cdd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020ce1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020ce7:	0f 84 52 01 00 00    	je     c0020e3f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0020ced:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0020cf1:	66 81 f9 06 04       	cmp    cx,0x406
c0020cf6:	75 2c                	jne    c0020d24 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0020cf8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0020cfd:	50                   	push   eax
c0020cfe:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0020d03:	50                   	push   eax
c0020d04:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0020d09:	50                   	push   eax
c0020d0a:	56                   	push   esi
c0020d0b:	e8 b2 fe ff ff       	call   c0020bc2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0020d10:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020d14:	0f b6 c0             	movzx  eax,al
c0020d17:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0020d1b:	83 c4 2c             	add    esp,0x2c
c0020d1e:	5b                   	pop    ebx
c0020d1f:	5e                   	pop    esi
c0020d20:	5f                   	pop    edi
c0020d21:	5d                   	pop    ebp
c0020d22:	eb 8e                	jmp    c0020cb2 <PCI::checkBus(unsigned char)>
c0020d24:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020d28:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0020d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d32:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020d36:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0020d3a:	88 d3                	mov    bl,dl
c0020d3c:	85 c0                	test   eax,eax
c0020d3e:	74 33                	je     c0020d73 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0020d40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020d43:	85 d2                	test   edx,edx
c0020d45:	74 28                	je     c0020d6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020d47:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020d4d:	31 ef                	xor    edi,ebp
c0020d4f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020d55:	75 18                	jne    c0020d6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020d57:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020d5b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020d61:	75 0c                	jne    c0020d6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020d63:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020d69:	0f 84 d0 00 00 00    	je     c0020e3f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0020d6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d71:	eb c9                	jmp    c0020d3c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020d73:	66 81 f9 01 06       	cmp    cx,0x601
c0020d78:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020d7c:	75 19                	jne    c0020d97 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0020d7e:	83 ec 0c             	sub    esp,0xc
c0020d81:	68 64 01 00 00       	push   0x164
c0020d86:	e8 35 e7 fe ff       	call   c000f4c0 <malloc>
c0020d8b:	89 c5                	mov    ebp,eax
c0020d8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d90:	e8 95 0f 00 00       	call   c0021d2a <SATABus::SATABus()>
c0020d95:	eb 1e                	jmp    c0020db5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0020d97:	66 81 f9 01 01       	cmp    cx,0x101
c0020d9c:	75 60                	jne    c0020dfe <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0020d9e:	83 ec 0c             	sub    esp,0xc
c0020da1:	68 70 02 00 00       	push   0x270
c0020da6:	e8 15 e7 fe ff       	call   c000f4c0 <malloc>
c0020dab:	89 c5                	mov    ebp,eax
c0020dad:	89 04 24             	mov    DWORD PTR [esp],eax
c0020db0:	e8 03 03 00 00       	call   c00210b8 <IDE::IDE()>
c0020db5:	58                   	pop    eax
c0020db6:	5a                   	pop    edx
c0020db7:	55                   	push   ebp
c0020db8:	56                   	push   esi
c0020db9:	e8 be 2c ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0020dbe:	83 ec 1c             	sub    esp,0x1c
c0020dc1:	b9 09 00 00 00       	mov    ecx,0x9
c0020dc6:	fc                   	cld    
c0020dc7:	89 e7                	mov    edi,esp
c0020dc9:	89 de                	mov    esi,ebx
c0020dcb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020dcd:	55                   	push   ebp
c0020dce:	e8 b3 2b ff ff       	call   c0013986 <Device::preOpenPCI(PCIDeviceInfo)>
c0020dd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020dd6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0020dda:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0020de2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0020dea:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0020df2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020df5:	83 c4 4c             	add    esp,0x4c
c0020df8:	5b                   	pop    ebx
c0020df9:	5e                   	pop    esi
c0020dfa:	5f                   	pop    edi
c0020dfb:	5d                   	pop    ebp
c0020dfc:	ff e0                	jmp    eax
c0020dfe:	83 ec 0c             	sub    esp,0xc
c0020e01:	68 58 01 00 00       	push   0x158
c0020e06:	e8 b5 e6 fe ff       	call   c000f4c0 <malloc>
c0020e0b:	89 c5                	mov    ebp,eax
c0020e0d:	58                   	pop    eax
c0020e0e:	5a                   	pop    edx
c0020e0f:	68 18 9f 02 c0       	push   0xc0029f18
c0020e14:	55                   	push   ebp
c0020e15:	e8 58 2f ff ff       	call   c0013d72 <DriverlessDevice::DriverlessDevice(char const*)>
c0020e1a:	59                   	pop    ecx
c0020e1b:	5f                   	pop    edi
c0020e1c:	55                   	push   ebp
c0020e1d:	56                   	push   esi
c0020e1e:	e8 59 2c ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0020e23:	b9 09 00 00 00       	mov    ecx,0x9
c0020e28:	fc                   	cld    
c0020e29:	89 df                	mov    edi,ebx
c0020e2b:	89 de                	mov    esi,ebx
c0020e2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020e2f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0020e33:	83 c4 2c             	add    esp,0x2c
c0020e36:	5b                   	pop    ebx
c0020e37:	5e                   	pop    esi
c0020e38:	5f                   	pop    edi
c0020e39:	5d                   	pop    ebp
c0020e3a:	e9 47 2b ff ff       	jmp    c0013986 <Device::preOpenPCI(PCIDeviceInfo)>
c0020e3f:	83 c4 1c             	add    esp,0x1c
c0020e42:	5b                   	pop    ebx
c0020e43:	5e                   	pop    esi
c0020e44:	5f                   	pop    edi
c0020e45:	5d                   	pop    ebp
c0020e46:	c3                   	ret    
c0020e47:	90                   	nop

c0020e48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020e48:	55                   	push   ebp
c0020e49:	57                   	push   edi
c0020e4a:	56                   	push   esi
c0020e4b:	53                   	push   ebx
c0020e4c:	83 ec 5c             	sub    esp,0x5c
c0020e4f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0020e53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020e57:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020e5b:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020e60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e64:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020e68:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0020e6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020e71:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020e76:	6a 0c                	push   0xc
c0020e78:	55                   	push   ebp
c0020e79:	53                   	push   ebx
c0020e7a:	57                   	push   edi
c0020e7b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020e82:	e8 01 fc ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e87:	55                   	push   ebp
c0020e88:	53                   	push   ebx
c0020e89:	57                   	push   edi
c0020e8a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020e91:	e8 80 fc ff ff       	call   c0020b16 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020e96:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020e9b:	83 c4 24             	add    esp,0x24
c0020e9e:	55                   	push   ebp
c0020e9f:	53                   	push   ebx
c0020ea0:	57                   	push   edi
c0020ea1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020ea5:	e8 f6 fc ff ff       	call   c0020ba0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020eaa:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020eae:	6a 3c                	push   0x3c
c0020eb0:	55                   	push   ebp
c0020eb1:	53                   	push   ebx
c0020eb2:	57                   	push   edi
c0020eb3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020eba:	e8 c9 fb ff ff       	call   c0020a88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ebf:	0f b6 c4             	movzx  eax,ah
c0020ec2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020ec6:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0020eca:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020ece:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0020ed3:	83 c4 24             	add    esp,0x24
c0020ed6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0020edc:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0020ee3:	74 6c                	je     c0020f51 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020ee5:	31 f6                	xor    esi,esi
c0020ee7:	8b 15 48 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b848
c0020eed:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020ef3:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0020ef9:	7e 56                	jle    c0020f51 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0020efb:	8d 14 f2             	lea    edx,[edx+esi*8]
c0020efe:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0020f05:	39 cb                	cmp    ebx,ecx
c0020f07:	75 45                	jne    c0020f4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020f09:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0020f10:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0020f14:	75 38                	jne    c0020f4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0020f16:	83 ec 0c             	sub    esp,0xc
c0020f19:	68 32 9f 02 c0       	push   0xc0029f32
c0020f1e:	e8 6a 17 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0020f23:	8b 15 48 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b848
c0020f29:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0020f2f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0020f37:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020f3b:	52                   	push   edx
c0020f3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f40:	53                   	push   ebx
c0020f41:	68 57 9f 02 c0       	push   0xc0029f57
c0020f46:	e8 42 17 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0020f4b:	83 c4 20             	add    esp,0x20
c0020f4e:	46                   	inc    esi
c0020f4f:	eb 96                	jmp    c0020ee7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020f51:	31 d2                	xor    edx,edx
c0020f53:	83 ec 0c             	sub    esp,0xc
c0020f56:	55                   	push   ebp
c0020f57:	53                   	push   ebx
c0020f58:	57                   	push   edi
c0020f59:	52                   	push   edx
c0020f5a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020f5e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020f65:	e8 7c fc ff ff       	call   c0020be6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f6a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020f6e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020f72:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020f76:	42                   	inc    edx
c0020f77:	83 c4 20             	add    esp,0x20
c0020f7a:	83 fa 06             	cmp    edx,0x6
c0020f7d:	75 d4                	jne    c0020f53 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020f7f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020f83:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020f87:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020f8b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020f8f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020f93:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020f97:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0020f9c:	86 e0                	xchg   al,ah
c0020f9e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020fa3:	55                   	push   ebp
c0020fa4:	53                   	push   ebx
c0020fa5:	57                   	push   edi
c0020fa6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020faa:	e8 ab fb ff ff       	call   c0020b5a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020faf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020fb3:	55                   	push   ebp
c0020fb4:	53                   	push   ebx
c0020fb5:	57                   	push   edi
c0020fb6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020fbd:	e8 0e fb ff ff       	call   c0020ad0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020fc2:	83 ec 0c             	sub    esp,0xc
c0020fc5:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0020fca:	b9 09 00 00 00       	mov    ecx,0x9
c0020fcf:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020fd3:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020fd7:	fc                   	cld    
c0020fd8:	89 e7                	mov    edi,esp
c0020fda:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020fdc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0020fe3:	e8 ee fc ff ff       	call   c0020cd6 <PCI::foundDevice(PCIDeviceInfo)>
c0020fe8:	81 c4 8c 00 00 00    	add    esp,0x8c
c0020fee:	5b                   	pop    ebx
c0020fef:	5e                   	pop    esi
c0020ff0:	5f                   	pop    edi
c0020ff1:	5d                   	pop    ebp
c0020ff2:	c3                   	ret    
c0020ff3:	90                   	nop

c0020ff4 <PCI::checkDevice(unsigned char, unsigned char)>:
c0020ff4:	55                   	push   ebp
c0020ff5:	57                   	push   edi
c0020ff6:	56                   	push   esi
c0020ff7:	53                   	push   ebx
c0020ff8:	83 ec 0c             	sub    esp,0xc
c0020ffb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0020fff:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021004:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021009:	6a 00                	push   0x0
c002100b:	56                   	push   esi
c002100c:	57                   	push   edi
c002100d:	55                   	push   ebp
c002100e:	e8 bd fa ff ff       	call   c0020ad0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021013:	6a 00                	push   0x0
c0021015:	56                   	push   esi
c0021016:	57                   	push   edi
c0021017:	55                   	push   ebp
c0021018:	e8 2b fe ff ff       	call   c0020e48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002101d:	83 c4 20             	add    esp,0x20
c0021020:	6a 00                	push   0x0
c0021022:	56                   	push   esi
c0021023:	57                   	push   edi
c0021024:	55                   	push   ebp
c0021025:	e8 c8 fa ff ff       	call   c0020af2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002102a:	83 c4 10             	add    esp,0x10
c002102d:	84 c0                	test   al,al
c002102f:	79 27                	jns    c0021058 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021031:	bb 01 00 00 00       	mov    ebx,0x1
c0021036:	53                   	push   ebx
c0021037:	56                   	push   esi
c0021038:	57                   	push   edi
c0021039:	55                   	push   ebp
c002103a:	e8 91 fa ff ff       	call   c0020ad0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002103f:	83 c4 10             	add    esp,0x10
c0021042:	66 40                	inc    ax
c0021044:	74 0c                	je     c0021052 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021046:	53                   	push   ebx
c0021047:	56                   	push   esi
c0021048:	57                   	push   edi
c0021049:	55                   	push   ebp
c002104a:	e8 f9 fd ff ff       	call   c0020e48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002104f:	83 c4 10             	add    esp,0x10
c0021052:	43                   	inc    ebx
c0021053:	83 fb 08             	cmp    ebx,0x8
c0021056:	75 de                	jne    c0021036 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021058:	83 c4 0c             	add    esp,0xc
c002105b:	5b                   	pop    ebx
c002105c:	5e                   	pop    esi
c002105d:	5f                   	pop    edi
c002105e:	5d                   	pop    ebp
c002105f:	c3                   	ret    

c0021060 <PCI::detect()>:
c0021060:	56                   	push   esi
c0021061:	53                   	push   ebx
c0021062:	53                   	push   ebx
c0021063:	31 db                	xor    ebx,ebx
c0021065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021069:	6a 00                	push   0x0
c002106b:	6a 00                	push   0x0
c002106d:	6a 00                	push   0x0
c002106f:	56                   	push   esi
c0021070:	e8 7d fa ff ff       	call   c0020af2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021075:	83 c4 10             	add    esp,0x10
c0021078:	a8 80                	test   al,0x80
c002107a:	75 21                	jne    c002109d <PCI::detect()+0x3d>
c002107c:	51                   	push   ecx
c002107d:	51                   	push   ecx
c002107e:	6a 00                	push   0x0
c0021080:	56                   	push   esi
c0021081:	e8 2c fc ff ff       	call   c0020cb2 <PCI::checkBus(unsigned char)>
c0021086:	83 c4 10             	add    esp,0x10
c0021089:	eb 24                	jmp    c00210af <PCI::detect()+0x4f>
c002108b:	52                   	push   edx
c002108c:	52                   	push   edx
c002108d:	53                   	push   ebx
c002108e:	43                   	inc    ebx
c002108f:	56                   	push   esi
c0021090:	e8 1d fc ff ff       	call   c0020cb2 <PCI::checkBus(unsigned char)>
c0021095:	83 c4 10             	add    esp,0x10
c0021098:	83 fb 08             	cmp    ebx,0x8
c002109b:	74 12                	je     c00210af <PCI::detect()+0x4f>
c002109d:	53                   	push   ebx
c002109e:	6a 00                	push   0x0
c00210a0:	6a 00                	push   0x0
c00210a2:	56                   	push   esi
c00210a3:	e8 28 fa ff ff       	call   c0020ad0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00210a8:	83 c4 10             	add    esp,0x10
c00210ab:	66 40                	inc    ax
c00210ad:	74 dc                	je     c002108b <PCI::detect()+0x2b>
c00210af:	58                   	pop    eax
c00210b0:	5b                   	pop    ebx
c00210b1:	5e                   	pop    esi
c00210b2:	c3                   	ret    
c00210b3:	90                   	nop

c00210b4 <IDE::close(int, int, void*)>:
c00210b4:	83 c8 ff             	or     eax,0xffffffff
c00210b7:	c3                   	ret    

c00210b8 <IDE::IDE()>:
c00210b8:	83 ec 0c             	sub    esp,0xc
c00210bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210bf:	83 ec 08             	sub    esp,0x8
c00210c2:	68 a0 9f 02 c0       	push   0xc0029fa0
c00210c7:	50                   	push   eax
c00210c8:	e8 3b 2d ff ff       	call   c0013e08 <HardDiskController::HardDiskController(char const*)>
c00210cd:	83 c4 10             	add    esp,0x10
c00210d0:	ba e0 a1 02 c0       	mov    edx,0xc002a1e0
c00210d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210d9:	89 10                	mov    DWORD PTR [eax],edx
c00210db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210df:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00210e6:	90                   	nop
c00210e7:	83 c4 0c             	add    esp,0xc
c00210ea:	c3                   	ret    
c00210eb:	90                   	nop

c00210ec <IDE::prepareInterrupt(unsigned char)>:
c00210ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00210f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00210f5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00210fd:	c3                   	ret    

c00210fe <selectDrive(unsigned char, unsigned char)>:
c00210fe:	c3                   	ret    
c00210ff:	90                   	nop

c0021100 <IDE::getBase(unsigned char)>:
c0021100:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021109:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021111:	c3                   	ret    

c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021112:	55                   	push   ebp
c0021113:	57                   	push   edi
c0021114:	56                   	push   esi
c0021115:	53                   	push   ebx
c0021116:	83 ec 1c             	sub    esp,0x1c
c0021119:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002111d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021121:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021124:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021128:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002112c:	80 f9 03             	cmp    cl,0x3
c002112f:	77 51                	ja     c0021182 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021135:	0f b6 f2             	movzx  esi,dl
c0021138:	0f b6 db             	movzx  ebx,bl
c002113b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002113e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021142:	83 ca 80             	or     edx,0xffffff80
c0021145:	0f b6 d2             	movzx  edx,dl
c0021148:	52                   	push   edx
c0021149:	6a 0c                	push   0xc
c002114b:	56                   	push   esi
c002114c:	57                   	push   edi
c002114d:	e8 c0 ff ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021152:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002115b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002115f:	ee                   	out    dx,al
c0021160:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021165:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021169:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002116d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021171:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021179:	83 c4 2c             	add    esp,0x2c
c002117c:	5b                   	pop    ebx
c002117d:	5e                   	pop    esi
c002117e:	5f                   	pop    edi
c002117f:	5d                   	pop    ebp
c0021180:	eb 90                	jmp    c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021182:	80 fb 07             	cmp    bl,0x7
c0021185:	77 12                	ja     c0021199 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021187:	0f b6 d2             	movzx  edx,dl
c002118a:	0f b6 db             	movzx  ebx,bl
c002118d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021195:	89 da                	mov    edx,ebx
c0021197:	eb 2f                	jmp    c00211c8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021199:	80 fb 0d             	cmp    bl,0xd
c002119c:	77 13                	ja     c00211b1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002119e:	0f b6 d2             	movzx  edx,dl
c00211a1:	0f b6 db             	movzx  ebx,bl
c00211a4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00211ab:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00211af:	eb 17                	jmp    c00211c8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00211b1:	80 fb 15             	cmp    bl,0x15
c00211b4:	77 13                	ja     c00211c9 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00211b6:	0f b6 d2             	movzx  edx,dl
c00211b9:	0f b6 db             	movzx  ebx,bl
c00211bc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00211c4:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00211c8:	ee                   	out    dx,al
c00211c9:	83 c4 1c             	add    esp,0x1c
c00211cc:	5b                   	pop    ebx
c00211cd:	5e                   	pop    esi
c00211ce:	5f                   	pop    edi
c00211cf:	5d                   	pop    ebp
c00211d0:	c3                   	ret    
c00211d1:	90                   	nop

c00211d2 <IDE::read(unsigned char, unsigned char)>:
c00211d2:	55                   	push   ebp
c00211d3:	57                   	push   edi
c00211d4:	56                   	push   esi
c00211d5:	53                   	push   ebx
c00211d6:	83 ec 1c             	sub    esp,0x1c
c00211d9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00211dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00211e1:	8d 43 f8             	lea    eax,[ebx-0x8]
c00211e4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00211e8:	3c 03                	cmp    al,0x3
c00211ea:	77 43                	ja     c002122f <IDE::read(unsigned char, unsigned char)+0x5d>
c00211ec:	0f b6 f2             	movzx  esi,dl
c00211ef:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00211f2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00211f6:	83 c8 80             	or     eax,0xffffff80
c00211f9:	0f b6 c0             	movzx  eax,al
c00211fc:	50                   	push   eax
c00211fd:	6a 0c                	push   0xc
c00211ff:	56                   	push   esi
c0021200:	57                   	push   edi
c0021201:	e8 0c ff ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021206:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002120b:	0f b6 c3             	movzx  eax,bl
c002120e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0021212:	ec                   	in     al,dx
c0021213:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021217:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002121c:	52                   	push   edx
c002121d:	6a 0c                	push   0xc
c002121f:	56                   	push   esi
c0021220:	57                   	push   edi
c0021221:	e8 ec fe ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021226:	83 c4 20             	add    esp,0x20
c0021229:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002122d:	eb 49                	jmp    c0021278 <IDE::read(unsigned char, unsigned char)+0xa6>
c002122f:	80 fb 07             	cmp    bl,0x7
c0021232:	77 12                	ja     c0021246 <IDE::read(unsigned char, unsigned char)+0x74>
c0021234:	0f b6 d2             	movzx  edx,dl
c0021237:	0f b6 c3             	movzx  eax,bl
c002123a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0021242:	89 c2                	mov    edx,eax
c0021244:	eb 31                	jmp    c0021277 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021246:	80 fb 0d             	cmp    bl,0xd
c0021249:	77 13                	ja     c002125e <IDE::read(unsigned char, unsigned char)+0x8c>
c002124b:	0f b6 d2             	movzx  edx,dl
c002124e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021255:	0f b6 d3             	movzx  edx,bl
c0021258:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002125c:	eb 19                	jmp    c0021277 <IDE::read(unsigned char, unsigned char)+0xa5>
c002125e:	31 c0                	xor    eax,eax
c0021260:	80 fb 15             	cmp    bl,0x15
c0021263:	77 13                	ja     c0021278 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021265:	0f b6 d2             	movzx  edx,dl
c0021268:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0021270:	0f b6 d3             	movzx  edx,bl
c0021273:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021277:	ec                   	in     al,dx
c0021278:	83 c4 1c             	add    esp,0x1c
c002127b:	5b                   	pop    ebx
c002127c:	5e                   	pop    esi
c002127d:	5f                   	pop    edi
c002127e:	5d                   	pop    ebp
c002127f:	c3                   	ret    

c0021280 <IDE::waitInterrupt(unsigned char)>:
c0021280:	55                   	push   ebp
c0021281:	57                   	push   edi
c0021282:	56                   	push   esi
c0021283:	53                   	push   ebx
c0021284:	31 db                	xor    ebx,ebx
c0021286:	83 ec 0c             	sub    esp,0xc
c0021289:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002128d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0021292:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002129a:	89 e8                	mov    eax,ebp
c002129c:	84 c0                	test   al,al
c002129e:	75 34                	jne    c00212d4 <IDE::waitInterrupt(unsigned char)+0x54>
c00212a0:	52                   	push   edx
c00212a1:	6a 0c                	push   0xc
c00212a3:	56                   	push   esi
c00212a4:	57                   	push   edi
c00212a5:	e8 28 ff ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00212aa:	83 c4 10             	add    esp,0x10
c00212ad:	a8 01                	test   al,0x1
c00212af:	75 2b                	jne    c00212dc <IDE::waitInterrupt(unsigned char)+0x5c>
c00212b1:	f6 c3 04             	test   bl,0x4
c00212b4:	75 16                	jne    c00212cc <IDE::waitInterrupt(unsigned char)+0x4c>
c00212b6:	83 fb 32             	cmp    ebx,0x32
c00212b9:	7e 11                	jle    c00212cc <IDE::waitInterrupt(unsigned char)+0x4c>
c00212bb:	50                   	push   eax
c00212bc:	50                   	push   eax
c00212bd:	6a 00                	push   0x0
c00212bf:	68 80 96 98 00       	push   0x989680
c00212c4:	e8 23 b4 ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c00212c9:	83 c4 10             	add    esp,0x10
c00212cc:	83 fb 3c             	cmp    ebx,0x3c
c00212cf:	74 0b                	je     c00212dc <IDE::waitInterrupt(unsigned char)+0x5c>
c00212d1:	43                   	inc    ebx
c00212d2:	eb be                	jmp    c0021292 <IDE::waitInterrupt(unsigned char)+0x12>
c00212d4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00212dc:	83 c4 0c             	add    esp,0xc
c00212df:	89 e8                	mov    eax,ebp
c00212e1:	5b                   	pop    ebx
c00212e2:	5e                   	pop    esi
c00212e3:	5f                   	pop    edi
c00212e4:	5d                   	pop    ebp
c00212e5:	c3                   	ret    

c00212e6 <ideChannel0IRQHandler(regs*, void*)>:
c00212e6:	83 ec 10             	sub    esp,0x10
c00212e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00212ed:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00212f4:	6a 07                	push   0x7
c00212f6:	6a 00                	push   0x0
c00212f8:	50                   	push   eax
c00212f9:	e8 d4 fe ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00212fe:	83 c4 1c             	add    esp,0x1c
c0021301:	c3                   	ret    

c0021302 <ideChannel1IRQHandler(regs*, void*)>:
c0021302:	83 ec 10             	sub    esp,0x10
c0021305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021309:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0021310:	6a 07                	push   0x7
c0021312:	6a 01                	push   0x1
c0021314:	50                   	push   eax
c0021315:	e8 b8 fe ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c002131a:	83 c4 1c             	add    esp,0x1c
c002131d:	c3                   	ret    

c002131e <IDE::enableIRQs(unsigned char, bool)>:
c002131e:	57                   	push   edi
c002131f:	56                   	push   esi
c0021320:	be 04 00 00 00       	mov    esi,0x4
c0021325:	53                   	push   ebx
c0021326:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002132b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002132f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0021334:	0f 94 c0             	sete   al
c0021337:	d1 e0                	shl    eax,1
c0021339:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0021340:	0f b6 c0             	movzx  eax,al
c0021343:	50                   	push   eax
c0021344:	6a 0c                	push   0xc
c0021346:	57                   	push   edi
c0021347:	53                   	push   ebx
c0021348:	e8 c5 fd ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002134d:	83 c4 10             	add    esp,0x10
c0021350:	50                   	push   eax
c0021351:	6a 0c                	push   0xc
c0021353:	57                   	push   edi
c0021354:	53                   	push   ebx
c0021355:	e8 78 fe ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c002135a:	83 c4 10             	add    esp,0x10
c002135d:	4e                   	dec    esi
c002135e:	75 f0                	jne    c0021350 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0021360:	5b                   	pop    ebx
c0021361:	5e                   	pop    esi
c0021362:	5f                   	pop    edi
c0021363:	c3                   	ret    

c0021364 <IDE::open(int, int, void*)>:
c0021364:	55                   	push   ebp
c0021365:	57                   	push   edi
c0021366:	56                   	push   esi
c0021367:	53                   	push   ebx
c0021368:	83 ec 1c             	sub    esp,0x1c
c002136b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002136f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0021378:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0021381:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0021388:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002138f:	0f 85 b0 02 00 00    	jne    c0021645 <IDE::open(int, int, void*)+0x2e1>
c0021395:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002139b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002139f:	83 e0 7f             	and    eax,0x7f
c00213a2:	3c 05                	cmp    al,0x5
c00213a4:	74 04                	je     c00213aa <IDE::open(int, int, void*)+0x46>
c00213a6:	3c 0f                	cmp    al,0xf
c00213a8:	75 32                	jne    c00213dc <IDE::open(int, int, void*)+0x78>
c00213aa:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00213b0:	83 e0 fc             	and    eax,0xfffffffc
c00213b3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00213ba:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00213c0:	83 e0 fc             	and    eax,0xfffffffc
c00213c3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00213ca:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00213d0:	83 e0 fc             	and    eax,0xfffffffc
c00213d3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00213da:	eb 14                	jmp    c00213f0 <IDE::open(int, int, void*)+0x8c>
c00213dc:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00213e6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00213f0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00213f7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00213fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021402:	89 c6                	mov    esi,eax
c0021404:	bf f8 0c 00 00       	mov    edi,0xcf8
c0021409:	c1 e6 10             	shl    esi,0x10
c002140c:	89 e8                	mov    eax,ebp
c002140e:	89 fa                	mov    edx,edi
c0021410:	c1 e0 0b             	shl    eax,0xb
c0021413:	09 f0                	or     eax,esi
c0021415:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002141c:	c1 e6 08             	shl    esi,0x8
c002141f:	09 c6                	or     esi,eax
c0021421:	89 f0                	mov    eax,esi
c0021423:	0d 08 00 00 80       	or     eax,0x80000008
c0021428:	ef                   	out    dx,eax
c0021429:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002142e:	89 ca                	mov    edx,ecx
c0021430:	ed                   	in     eax,dx
c0021431:	c1 e8 10             	shr    eax,0x10
c0021434:	3d ff ff 00 00       	cmp    eax,0xffff
c0021439:	0f 84 f5 00 00 00    	je     c0021534 <IDE::open(int, int, void*)+0x1d0>
c002143f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0021445:	89 fa                	mov    edx,edi
c0021447:	89 f0                	mov    eax,esi
c0021449:	ef                   	out    dx,eax
c002144a:	b0 fe                	mov    al,0xfe
c002144c:	89 ca                	mov    edx,ecx
c002144e:	ee                   	out    dx,al
c002144f:	89 f0                	mov    eax,esi
c0021451:	89 fa                	mov    edx,edi
c0021453:	ef                   	out    dx,eax
c0021454:	89 ca                	mov    edx,ecx
c0021456:	ed                   	in     eax,dx
c0021457:	3c fe                	cmp    al,0xfe
c0021459:	0f 85 a9 00 00 00    	jne    c0021508 <IDE::open(int, int, void*)+0x1a4>
c002145f:	8b 15 48 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b848
c0021465:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002146c:	74 33                	je     c00214a1 <IDE::open(int, int, void*)+0x13d>
c002146e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0021474:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0021478:	40                   	inc    eax
c0021479:	83 ec 0c             	sub    esp,0xc
c002147c:	0f b6 c0             	movzx  eax,al
c002147f:	50                   	push   eax
c0021480:	55                   	push   ebp
c0021481:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021485:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002148b:	51                   	push   ecx
c002148c:	e8 8f 61 ff ff       	call   c0017620 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0021491:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0021496:	83 c4 1c             	add    esp,0x1c
c0021499:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002149f:	eb 0a                	jmp    c00214ab <IDE::open(int, int, void*)+0x147>
c00214a1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00214ab:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00214b2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00214b9:	c1 e1 10             	shl    ecx,0x10
c00214bc:	c1 e0 08             	shl    eax,0x8
c00214bf:	bf f8 0c 00 00       	mov    edi,0xcf8
c00214c4:	09 c1                	or     ecx,eax
c00214c6:	89 fa                	mov    edx,edi
c00214c8:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00214cf:	c1 e0 0b             	shl    eax,0xb
c00214d2:	09 c1                	or     ecx,eax
c00214d4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00214da:	89 c8                	mov    eax,ecx
c00214dc:	ef                   	out    dx,eax
c00214dd:	be fc 0c 00 00       	mov    esi,0xcfc
c00214e2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00214e8:	89 f2                	mov    edx,esi
c00214ea:	ee                   	out    dx,al
c00214eb:	89 c8                	mov    eax,ecx
c00214ed:	89 fa                	mov    edx,edi
c00214ef:	ef                   	out    dx,eax
c00214f0:	89 f2                	mov    edx,esi
c00214f2:	ed                   	in     eax,dx
c00214f3:	0f b6 c0             	movzx  eax,al
c00214f6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00214fc:	74 46                	je     c0021544 <IDE::open(int, int, void*)+0x1e0>
c00214fe:	83 ec 0c             	sub    esp,0xc
c0021501:	68 b8 9f 02 c0       	push   0xc0029fb8
c0021506:	eb 34                	jmp    c002153c <IDE::open(int, int, void*)+0x1d8>
c0021508:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0021511:	75 17                	jne    c002152a <IDE::open(int, int, void*)+0x1c6>
c0021513:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0021518:	74 07                	je     c0021521 <IDE::open(int, int, void*)+0x1bd>
c002151a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002151f:	75 09                	jne    c002152a <IDE::open(int, int, void*)+0x1c6>
c0021521:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021528:	eb 1a                	jmp    c0021544 <IDE::open(int, int, void*)+0x1e0>
c002152a:	83 ec 0c             	sub    esp,0xc
c002152d:	68 c0 9f 02 c0       	push   0xc0029fc0
c0021532:	eb 08                	jmp    c002153c <IDE::open(int, int, void*)+0x1d8>
c0021534:	83 ec 0c             	sub    esp,0xc
c0021537:	68 f1 9f 02 c0       	push   0xc0029ff1
c002153c:	e8 16 7c ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0021541:	83 c4 10             	add    esp,0x10
c0021544:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002154b:	79 1a                	jns    c0021567 <IDE::open(int, int, void*)+0x203>
c002154d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0021553:	83 e0 fc             	and    eax,0xfffffffc
c0021556:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002155d:	83 c0 08             	add    eax,0x8
c0021560:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0021567:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002156d:	89 c2                	mov    edx,eax
c002156f:	83 e2 0f             	and    edx,0xf
c0021572:	66 83 fa 08          	cmp    dx,0x8
c0021576:	75 0a                	jne    c0021582 <IDE::open(int, int, void*)+0x21e>
c0021578:	83 e8 02             	sub    eax,0x2
c002157b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021582:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021588:	89 c2                	mov    edx,eax
c002158a:	83 e2 0f             	and    edx,0xf
c002158d:	66 83 fa 08          	cmp    dx,0x8
c0021591:	75 0a                	jne    c002159d <IDE::open(int, int, void*)+0x239>
c0021593:	83 e8 02             	sub    eax,0x2
c0021596:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002159d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00215a4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00215ab:	89 d0                	mov    eax,edx
c00215ad:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00215b0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00215b4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00215b8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00215bb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00215c0:	0f b6 c9             	movzx  ecx,cl
c00215c3:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00215ca:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00215cd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00215d1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00215d5:	8d 50 02             	lea    edx,[eax+0x2]
c00215d8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00215dd:	0f b6 d2             	movzx  edx,dl
c00215e0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00215e6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00215e9:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00215ed:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00215f1:	8d 48 03             	lea    ecx,[eax+0x3]
c00215f4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00215f9:	0f b6 c9             	movzx  ecx,cl
c00215fc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0021602:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0021605:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0021609:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002160d:	8d 50 04             	lea    edx,[eax+0x4]
c0021610:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0021616:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002161b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0021622:	66 85 f6             	test   si,si
c0021625:	74 3e                	je     c0021665 <IDE::open(int, int, void*)+0x301>
c0021627:	0f b6 d2             	movzx  edx,dl
c002162a:	83 c0 05             	add    eax,0x5
c002162d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0021630:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021634:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021638:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002163e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021643:	eb 20                	jmp    c0021665 <IDE::open(int, int, void*)+0x301>
c0021645:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002164f:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021659:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021660:	e9 02 ff ff ff       	jmp    c0021567 <IDE::open(int, int, void*)+0x203>
c0021665:	52                   	push   edx
c0021666:	52                   	push   edx
c0021667:	6a 00                	push   0x0
c0021669:	53                   	push   ebx
c002166a:	e8 7d fa ff ff       	call   c00210ec <IDE::prepareInterrupt(unsigned char)>
c002166f:	59                   	pop    ecx
c0021670:	5e                   	pop    esi
c0021671:	6a 01                	push   0x1
c0021673:	53                   	push   ebx
c0021674:	e8 73 fa ff ff       	call   c00210ec <IDE::prepareInterrupt(unsigned char)>
c0021679:	83 c4 0c             	add    esp,0xc
c002167c:	6a 00                	push   0x0
c002167e:	6a 00                	push   0x0
c0021680:	53                   	push   ebx
c0021681:	e8 98 fc ff ff       	call   c002131e <IDE::enableIRQs(unsigned char, bool)>
c0021686:	83 c4 0c             	add    esp,0xc
c0021689:	6a 00                	push   0x0
c002168b:	6a 01                	push   0x1
c002168d:	53                   	push   ebx
c002168e:	e8 8b fc ff ff       	call   c002131e <IDE::enableIRQs(unsigned char, bool)>
c0021693:	83 c4 10             	add    esp,0x10
c0021696:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002169d:	74 40                	je     c00216df <IDE::open(int, int, void*)+0x37b>
c002169f:	83 ec 0c             	sub    esp,0xc
c00216a2:	68 1b a0 02 c0       	push   0xc002a01b
c00216a7:	e8 e1 0f ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00216ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216af:	6a 01                	push   0x1
c00216b1:	68 e6 12 02 c0       	push   0xc00212e6
c00216b6:	6a 0e                	push   0xe
c00216b8:	53                   	push   ebx
c00216b9:	e8 42 23 ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00216be:	83 c4 14             	add    esp,0x14
c00216c1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00216c7:	53                   	push   ebx
c00216c8:	6a 01                	push   0x1
c00216ca:	68 02 13 02 c0       	push   0xc0021302
c00216cf:	6a 0f                	push   0xf
c00216d1:	53                   	push   ebx
c00216d2:	e8 29 23 ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00216d7:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00216dd:	eb 4a                	jmp    c0021729 <IDE::open(int, int, void*)+0x3c5>
c00216df:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00216e9:	50                   	push   eax
c00216ea:	6a 0f                	push   0xf
c00216ec:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00216f2:	68 37 a0 02 c0       	push   0xc002a037
c00216f7:	e8 91 0f ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00216fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216ff:	6a 00                	push   0x0
c0021701:	68 e6 12 02 c0       	push   0xc00212e6
c0021706:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002170c:	53                   	push   ebx
c002170d:	e8 ee 22 ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021712:	83 c4 14             	add    esp,0x14
c0021715:	53                   	push   ebx
c0021716:	6a 00                	push   0x0
c0021718:	68 02 13 02 c0       	push   0xc0021302
c002171d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0021723:	53                   	push   ebx
c0021724:	e8 d7 22 ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021729:	8b 03                	mov    eax,DWORD PTR [ebx]
c002172b:	83 c4 20             	add    esp,0x20
c002172e:	83 ec 0c             	sub    esp,0xc
c0021731:	53                   	push   ebx
c0021732:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0021735:	83 c4 0c             	add    esp,0xc
c0021738:	6a 07                	push   0x7
c002173a:	6a 00                	push   0x0
c002173c:	53                   	push   ebx
c002173d:	e8 90 fa ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021742:	83 c4 0c             	add    esp,0xc
c0021745:	6a 07                	push   0x7
c0021747:	6a 01                	push   0x1
c0021749:	53                   	push   ebx
c002174a:	e8 83 fa ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c002174f:	83 c4 0c             	add    esp,0xc
c0021752:	6a 01                	push   0x1
c0021754:	6a 00                	push   0x0
c0021756:	53                   	push   ebx
c0021757:	e8 c2 fb ff ff       	call   c002131e <IDE::enableIRQs(unsigned char, bool)>
c002175c:	83 c4 0c             	add    esp,0xc
c002175f:	6a 01                	push   0x1
c0021761:	6a 01                	push   0x1
c0021763:	53                   	push   ebx
c0021764:	e8 b5 fb ff ff       	call   c002131e <IDE::enableIRQs(unsigned char, bool)>
c0021769:	83 c4 2c             	add    esp,0x2c
c002176c:	31 c0                	xor    eax,eax
c002176e:	5b                   	pop    ebx
c002176f:	5e                   	pop    esi
c0021770:	5f                   	pop    edi
c0021771:	5d                   	pop    ebp
c0021772:	c3                   	ret    
c0021773:	90                   	nop

c0021774 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0021774:	55                   	push   ebp
c0021775:	57                   	push   edi
c0021776:	56                   	push   esi
c0021777:	53                   	push   ebx
c0021778:	83 ec 1c             	sub    esp,0x1c
c002177b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002177f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021783:	8d 50 f8             	lea    edx,[eax-0x8]
c0021786:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002178a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002178e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021792:	80 fa 03             	cmp    dl,0x3
c0021795:	77 5d                	ja     c00217f4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0021797:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002179b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002179f:	0f b6 db             	movzx  ebx,bl
c00217a2:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00217a5:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00217a9:	83 ca 80             	or     edx,0xffffff80
c00217ac:	0f b6 d2             	movzx  edx,dl
c00217af:	52                   	push   edx
c00217b0:	6a 0c                	push   0xc
c00217b2:	53                   	push   ebx
c00217b3:	56                   	push   esi
c00217b4:	e8 59 f9 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217b9:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00217be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00217c2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00217c6:	0f b6 c0             	movzx  eax,al
c00217c9:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00217cd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00217cf:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00217d4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00217d8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00217dc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00217e0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00217e8:	83 c4 2c             	add    esp,0x2c
c00217eb:	5b                   	pop    ebx
c00217ec:	5e                   	pop    esi
c00217ed:	5f                   	pop    edi
c00217ee:	5d                   	pop    ebp
c00217ef:	e9 1e f9 ff ff       	jmp    c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00217f4:	3c 07                	cmp    al,0x7
c00217f6:	77 10                	ja     c0021808 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00217f8:	0f b6 db             	movzx  ebx,bl
c00217fb:	0f b6 d0             	movzx  edx,al
c00217fe:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0021806:	eb 2d                	jmp    c0021835 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0021808:	3c 0d                	cmp    al,0xd
c002180a:	77 13                	ja     c002181f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002180c:	0f b6 db             	movzx  ebx,bl
c002180f:	0f b6 c0             	movzx  eax,al
c0021812:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0021819:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002181d:	eb 16                	jmp    c0021835 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002181f:	3c 15                	cmp    al,0x15
c0021821:	77 14                	ja     c0021837 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0021823:	0f b6 db             	movzx  ebx,bl
c0021826:	0f b6 c0             	movzx  eax,al
c0021829:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0021831:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0021835:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021837:	83 c4 1c             	add    esp,0x1c
c002183a:	5b                   	pop    ebx
c002183b:	5e                   	pop    esi
c002183c:	5f                   	pop    edi
c002183d:	5d                   	pop    ebp
c002183e:	c3                   	ret    
c002183f:	90                   	nop

c0021840 <IDE::detect()>:
c0021840:	55                   	push   ebp
c0021841:	57                   	push   edi
c0021842:	56                   	push   esi
c0021843:	53                   	push   ebx
c0021844:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002184a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0021851:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021858:	0f 85 be 02 00 00    	jne    c0021b1c <IDE::detect()+0x2dc>
c002185e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021865:	31 f6                	xor    esi,esi
c0021867:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002186f:	31 ed                	xor    ebp,ebp
c0021871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021875:	c1 e0 06             	shl    eax,0x6
c0021878:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021880:	89 e8                	mov    eax,ebp
c0021882:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021886:	c1 e0 04             	shl    eax,0x4
c0021889:	83 c8 a0             	or     eax,0xffffffa0
c002188c:	0f b6 c0             	movzx  eax,al
c002188f:	50                   	push   eax
c0021890:	6a 06                	push   0x6
c0021892:	56                   	push   esi
c0021893:	53                   	push   ebx
c0021894:	e8 79 f8 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021899:	83 c4 0c             	add    esp,0xc
c002189c:	6a 0c                	push   0xc
c002189e:	56                   	push   esi
c002189f:	53                   	push   ebx
c00218a0:	e8 2d f9 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00218a5:	83 c4 0c             	add    esp,0xc
c00218a8:	6a 0c                	push   0xc
c00218aa:	56                   	push   esi
c00218ab:	53                   	push   ebx
c00218ac:	e8 21 f9 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00218b1:	83 c4 0c             	add    esp,0xc
c00218b4:	6a 0c                	push   0xc
c00218b6:	56                   	push   esi
c00218b7:	53                   	push   ebx
c00218b8:	e8 15 f9 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00218bd:	83 c4 0c             	add    esp,0xc
c00218c0:	6a 0c                	push   0xc
c00218c2:	56                   	push   esi
c00218c3:	53                   	push   ebx
c00218c4:	e8 09 f9 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00218c9:	68 ec 00 00 00       	push   0xec
c00218ce:	6a 07                	push   0x7
c00218d0:	56                   	push   esi
c00218d1:	53                   	push   ebx
c00218d2:	e8 3b f8 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00218d7:	83 c4 1c             	add    esp,0x1c
c00218da:	6a 0c                	push   0xc
c00218dc:	56                   	push   esi
c00218dd:	53                   	push   ebx
c00218de:	e8 ef f8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00218e3:	83 c4 0c             	add    esp,0xc
c00218e6:	6a 0c                	push   0xc
c00218e8:	56                   	push   esi
c00218e9:	53                   	push   ebx
c00218ea:	e8 e3 f8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00218ef:	83 c4 0c             	add    esp,0xc
c00218f2:	6a 0c                	push   0xc
c00218f4:	56                   	push   esi
c00218f5:	53                   	push   ebx
c00218f6:	e8 d7 f8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c00218fb:	83 c4 0c             	add    esp,0xc
c00218fe:	6a 0c                	push   0xc
c0021900:	56                   	push   esi
c0021901:	53                   	push   ebx
c0021902:	e8 cb f8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021907:	83 c4 0c             	add    esp,0xc
c002190a:	6a 0c                	push   0xc
c002190c:	56                   	push   esi
c002190d:	53                   	push   ebx
c002190e:	e8 bf f8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021913:	83 c4 10             	add    esp,0x10
c0021916:	84 c0                	test   al,al
c0021918:	0f 84 8b 01 00 00    	je     c0021aa9 <IDE::detect()+0x269>
c002191e:	31 ff                	xor    edi,edi
c0021920:	50                   	push   eax
c0021921:	6a 0c                	push   0xc
c0021923:	56                   	push   esi
c0021924:	53                   	push   ebx
c0021925:	e8 a8 f8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c002192a:	83 c4 10             	add    esp,0x10
c002192d:	a8 01                	test   al,0x1
c002192f:	0f 85 8e 01 00 00    	jne    c0021ac3 <IDE::detect()+0x283>
c0021935:	84 c0                	test   al,al
c0021937:	78 04                	js     c002193d <IDE::detect()+0xfd>
c0021939:	a8 08                	test   al,0x8
c002193b:	75 27                	jne    c0021964 <IDE::detect()+0x124>
c002193d:	47                   	inc    edi
c002193e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021944:	7e da                	jle    c0021920 <IDE::detect()+0xe0>
c0021946:	50                   	push   eax
c0021947:	50                   	push   eax
c0021948:	6a 00                	push   0x0
c002194a:	68 40 4b 4c 00       	push   0x4c4b40
c002194f:	e8 98 ad ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c0021954:	83 c4 10             	add    esp,0x10
c0021957:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002195d:	75 c1                	jne    c0021920 <IDE::detect()+0xe0>
c002195f:	e9 5f 01 00 00       	jmp    c0021ac3 <IDE::detect()+0x283>
c0021964:	31 c9                	xor    ecx,ecx
c0021966:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002196a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002196e:	83 ec 0c             	sub    esp,0xc
c0021971:	68 80 00 00 00       	push   0x80
c0021976:	57                   	push   edi
c0021977:	6a 00                	push   0x0
c0021979:	56                   	push   esi
c002197a:	53                   	push   ebx
c002197b:	e8 f4 fd ff ff       	call   c0021774 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021980:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021985:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021989:	89 d1                	mov    ecx,edx
c002198b:	c1 e0 06             	shl    eax,0x6
c002198e:	01 d8                	add    eax,ebx
c0021990:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021997:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002199e:	89 f2                	mov    edx,esi
c00219a0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00219a6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00219aa:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00219b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00219b4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00219bb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00219c3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00219ca:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00219d2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00219d8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00219df:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00219e5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00219e9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00219ed:	83 c4 20             	add    esp,0x20
c00219f0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00219f3:	83 c0 02             	add    eax,0x2
c00219f6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00219fc:	83 c7 02             	add    edi,0x2
c00219ff:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0021a02:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0021a08:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0021a0c:	75 e2                	jne    c00219f0 <IDE::detect()+0x1b0>
c0021a0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a12:	c1 e0 06             	shl    eax,0x6
c0021a15:	01 d8                	add    eax,ebx
c0021a17:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0021a1d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021a24:	66 c1 ea 09          	shr    dx,0x9
c0021a28:	83 e2 01             	and    edx,0x1
c0021a2b:	84 c9                	test   cl,cl
c0021a2d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021a33:	75 2f                	jne    c0021a64 <IDE::detect()+0x224>
c0021a35:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0021a3b:	85 c0                	test   eax,eax
c0021a3d:	74 66                	je     c0021aa5 <IDE::detect()+0x265>
c0021a3f:	50                   	push   eax
c0021a40:	55                   	push   ebp
c0021a41:	56                   	push   esi
c0021a42:	68 53 a0 02 c0       	push   0xc002a053
c0021a47:	e8 41 0c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021a4c:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021a53:	e8 68 da fe ff       	call   c000f4c0 <malloc>
c0021a58:	89 c7                	mov    edi,eax
c0021a5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a5d:	e8 62 06 00 00       	call   c00220c4 <ATA::ATA()>
c0021a62:	eb 28                	jmp    c0021a8c <IDE::detect()+0x24c>
c0021a64:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021a6a:	55                   	push   ebp
c0021a6b:	56                   	push   esi
c0021a6c:	68 82 a0 02 c0       	push   0xc002a082
c0021a71:	e8 17 0c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021a76:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021a7d:	e8 3e da fe ff       	call   c000f4c0 <malloc>
c0021a82:	89 c7                	mov    edi,eax
c0021a84:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a87:	e8 68 0c 00 00       	call   c00226f4 <ATAPI::ATAPI()>
c0021a8c:	5a                   	pop    edx
c0021a8d:	59                   	pop    ecx
c0021a8e:	57                   	push   edi
c0021a8f:	53                   	push   ebx
c0021a90:	e8 e7 1f ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0021a95:	8b 07                	mov    eax,DWORD PTR [edi]
c0021a97:	53                   	push   ebx
c0021a98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021a9c:	6a 00                	push   0x0
c0021a9e:	57                   	push   edi
c0021a9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021aa2:	83 c4 20             	add    esp,0x20
c0021aa5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021aa9:	4d                   	dec    ebp
c0021aaa:	74 0a                	je     c0021ab6 <IDE::detect()+0x276>
c0021aac:	bd 01 00 00 00       	mov    ebp,0x1
c0021ab1:	e9 bb fd ff ff       	jmp    c0021871 <IDE::detect()+0x31>
c0021ab6:	4e                   	dec    esi
c0021ab7:	74 63                	je     c0021b1c <IDE::detect()+0x2dc>
c0021ab9:	be 01 00 00 00       	mov    esi,0x1
c0021abe:	e9 ac fd ff ff       	jmp    c002186f <IDE::detect()+0x2f>
c0021ac3:	50                   	push   eax
c0021ac4:	6a 04                	push   0x4
c0021ac6:	56                   	push   esi
c0021ac7:	53                   	push   ebx
c0021ac8:	e8 05 f7 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021acd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021ad1:	83 c4 0c             	add    esp,0xc
c0021ad4:	6a 05                	push   0x5
c0021ad6:	56                   	push   esi
c0021ad7:	53                   	push   ebx
c0021ad8:	e8 f5 f6 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021add:	83 c4 10             	add    esp,0x10
c0021ae0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021ae4:	80 fa 14             	cmp    dl,0x14
c0021ae7:	75 04                	jne    c0021aed <IDE::detect()+0x2ad>
c0021ae9:	3c eb                	cmp    al,0xeb
c0021aeb:	eb 07                	jmp    c0021af4 <IDE::detect()+0x2b4>
c0021aed:	3c 96                	cmp    al,0x96
c0021aef:	75 b8                	jne    c0021aa9 <IDE::detect()+0x269>
c0021af1:	80 fa 69             	cmp    dl,0x69
c0021af4:	75 b3                	jne    c0021aa9 <IDE::detect()+0x269>
c0021af6:	68 a1 00 00 00       	push   0xa1
c0021afb:	6a 07                	push   0x7
c0021afd:	56                   	push   esi
c0021afe:	53                   	push   ebx
c0021aff:	e8 0e f6 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b04:	5f                   	pop    edi
c0021b05:	58                   	pop    eax
c0021b06:	6a 00                	push   0x0
c0021b08:	68 40 42 0f 00       	push   0xf4240
c0021b0d:	e8 da ab ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c0021b12:	83 c4 10             	add    esp,0x10
c0021b15:	b1 01                	mov    cl,0x1
c0021b17:	e9 4a fe ff ff       	jmp    c0021966 <IDE::detect()+0x126>
c0021b1c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021b22:	5b                   	pop    ebx
c0021b23:	5e                   	pop    esi
c0021b24:	5f                   	pop    edi
c0021b25:	5d                   	pop    ebp
c0021b26:	c3                   	ret    
c0021b27:	90                   	nop

c0021b28 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021b28:	55                   	push   ebp
c0021b29:	57                   	push   edi
c0021b2a:	56                   	push   esi
c0021b2b:	53                   	push   ebx
c0021b2c:	83 ec 1c             	sub    esp,0x1c
c0021b2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021b33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021b37:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021b3b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021b3f:	88 c3                	mov    bl,al
c0021b41:	84 c0                	test   al,al
c0021b43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b47:	0f 84 67 01 00 00    	je     c0021cb4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021b4d:	83 ec 0c             	sub    esp,0xc
c0021b50:	68 b3 a0 02 c0       	push   0xc002a0b3
c0021b55:	e8 33 0b ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021b5a:	83 c4 10             	add    esp,0x10
c0021b5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b61:	3c 01                	cmp    al,0x1
c0021b63:	75 17                	jne    c0021b7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021b65:	83 ec 0c             	sub    esp,0xc
c0021b68:	b3 13                	mov    bl,0x13
c0021b6a:	68 bf a0 02 c0       	push   0xc002a0bf
c0021b6f:	e8 19 0b ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021b74:	83 c4 10             	add    esp,0x10
c0021b77:	e9 25 01 00 00       	jmp    c0021ca1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021b7c:	3c 02                	cmp    al,0x2
c0021b7e:	0f 85 ef 00 00 00    	jne    c0021c73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021b84:	d1 e6                	shl    esi,1
c0021b86:	09 ee                	or     esi,ebp
c0021b88:	52                   	push   edx
c0021b89:	89 f0                	mov    eax,esi
c0021b8b:	6a 01                	push   0x1
c0021b8d:	0f b6 f0             	movzx  esi,al
c0021b90:	c1 e6 06             	shl    esi,0x6
c0021b93:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021b9b:	50                   	push   eax
c0021b9c:	57                   	push   edi
c0021b9d:	e8 30 f6 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021ba2:	83 c4 10             	add    esp,0x10
c0021ba5:	89 c6                	mov    esi,eax
c0021ba7:	a8 01                	test   al,0x1
c0021ba9:	74 12                	je     c0021bbd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021bab:	83 ec 0c             	sub    esp,0xc
c0021bae:	b3 07                	mov    bl,0x7
c0021bb0:	68 d4 a0 02 c0       	push   0xc002a0d4
c0021bb5:	e8 d3 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021bba:	83 c4 10             	add    esp,0x10
c0021bbd:	f7 c6 02 00 00 00    	test   esi,0x2
c0021bc3:	74 12                	je     c0021bd7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021bc5:	83 ec 0c             	sub    esp,0xc
c0021bc8:	b3 03                	mov    bl,0x3
c0021bca:	68 f2 a0 02 c0       	push   0xc002a0f2
c0021bcf:	e8 b9 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021bd4:	83 c4 10             	add    esp,0x10
c0021bd7:	f7 c6 04 00 00 00    	test   esi,0x4
c0021bdd:	74 12                	je     c0021bf1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021bdf:	83 ec 0c             	sub    esp,0xc
c0021be2:	b3 14                	mov    bl,0x14
c0021be4:	68 12 a1 02 c0       	push   0xc002a112
c0021be9:	e8 9f 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021bee:	83 c4 10             	add    esp,0x10
c0021bf1:	f7 c6 08 00 00 00    	test   esi,0x8
c0021bf7:	74 12                	je     c0021c0b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0021bf9:	83 ec 0c             	sub    esp,0xc
c0021bfc:	b3 03                	mov    bl,0x3
c0021bfe:	68 f2 a0 02 c0       	push   0xc002a0f2
c0021c03:	e8 85 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021c08:	83 c4 10             	add    esp,0x10
c0021c0b:	f7 c6 10 00 00 00    	test   esi,0x10
c0021c11:	74 12                	je     c0021c25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0021c13:	83 ec 0c             	sub    esp,0xc
c0021c16:	b3 15                	mov    bl,0x15
c0021c18:	68 2a a1 02 c0       	push   0xc002a12a
c0021c1d:	e8 6b 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021c22:	83 c4 10             	add    esp,0x10
c0021c25:	f7 c6 20 00 00 00    	test   esi,0x20
c0021c2b:	74 12                	je     c0021c3f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0021c2d:	83 ec 0c             	sub    esp,0xc
c0021c30:	b3 03                	mov    bl,0x3
c0021c32:	68 f2 a0 02 c0       	push   0xc002a0f2
c0021c37:	e8 51 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021c3c:	83 c4 10             	add    esp,0x10
c0021c3f:	f7 c6 40 00 00 00    	test   esi,0x40
c0021c45:	74 12                	je     c0021c59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021c47:	83 ec 0c             	sub    esp,0xc
c0021c4a:	b3 16                	mov    bl,0x16
c0021c4c:	68 44 a1 02 c0       	push   0xc002a144
c0021c51:	e8 37 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021c56:	83 c4 10             	add    esp,0x10
c0021c59:	89 f0                	mov    eax,esi
c0021c5b:	84 c0                	test   al,al
c0021c5d:	79 42                	jns    c0021ca1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021c5f:	83 ec 0c             	sub    esp,0xc
c0021c62:	b3 0d                	mov    bl,0xd
c0021c64:	68 65 a1 02 c0       	push   0xc002a165
c0021c69:	e8 1f 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021c6e:	83 c4 10             	add    esp,0x10
c0021c71:	eb 2e                	jmp    c0021ca1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021c73:	3c 03                	cmp    al,0x3
c0021c75:	75 14                	jne    c0021c8b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021c77:	83 ec 0c             	sub    esp,0xc
c0021c7a:	b3 17                	mov    bl,0x17
c0021c7c:	68 79 a1 02 c0       	push   0xc002a179
c0021c81:	e8 07 0a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021c86:	83 c4 10             	add    esp,0x10
c0021c89:	eb 16                	jmp    c0021ca1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021c8b:	3c 04                	cmp    al,0x4
c0021c8d:	75 12                	jne    c0021ca1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021c8f:	83 ec 0c             	sub    esp,0xc
c0021c92:	b3 08                	mov    bl,0x8
c0021c94:	68 8f a1 02 c0       	push   0xc002a18f
c0021c99:	e8 ef 09 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021c9e:	83 c4 10             	add    esp,0x10
c0021ca1:	50                   	push   eax
c0021ca2:	50                   	push   eax
c0021ca3:	0f b6 c3             	movzx  eax,bl
c0021ca6:	50                   	push   eax
c0021ca7:	68 a7 a1 02 c0       	push   0xc002a1a7
c0021cac:	e8 dc 09 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021cb1:	83 c4 10             	add    esp,0x10
c0021cb4:	83 c4 1c             	add    esp,0x1c
c0021cb7:	88 d8                	mov    al,bl
c0021cb9:	5b                   	pop    ebx
c0021cba:	5e                   	pop    esi
c0021cbb:	5f                   	pop    edi
c0021cbc:	5d                   	pop    ebp
c0021cbd:	c3                   	ret    

c0021cbe <IDE::polling(unsigned char, unsigned int)>:
c0021cbe:	57                   	push   edi
c0021cbf:	56                   	push   esi
c0021cc0:	53                   	push   ebx
c0021cc1:	bb 04 00 00 00       	mov    ebx,0x4
c0021cc6:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021cca:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021ccf:	52                   	push   edx
c0021cd0:	6a 0c                	push   0xc
c0021cd2:	56                   	push   esi
c0021cd3:	57                   	push   edi
c0021cd4:	e8 f9 f4 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	4b                   	dec    ebx
c0021cdd:	75 f0                	jne    c0021ccf <IDE::polling(unsigned char, unsigned int)+0x11>
c0021cdf:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021ce4:	50                   	push   eax
c0021ce5:	6a 0c                	push   0xc
c0021ce7:	56                   	push   esi
c0021ce8:	57                   	push   edi
c0021ce9:	e8 e4 f4 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0021cee:	83 c4 10             	add    esp,0x10
c0021cf1:	a8 01                	test   al,0x1
c0021cf3:	74 12                	je     c0021d07 <IDE::polling(unsigned char, unsigned int)+0x49>
c0021cf5:	83 ec 0c             	sub    esp,0xc
c0021cf8:	68 c1 a1 02 c0       	push   0xc002a1c1
c0021cfd:	e8 8b 09 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021d02:	83 c4 10             	add    esp,0x10
c0021d05:	eb 17                	jmp    c0021d1e <IDE::polling(unsigned char, unsigned int)+0x60>
c0021d07:	a8 20                	test   al,0x20
c0021d09:	75 0f                	jne    c0021d1a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0021d0b:	4b                   	dec    ebx
c0021d0c:	74 10                	je     c0021d1e <IDE::polling(unsigned char, unsigned int)+0x60>
c0021d0e:	84 c0                	test   al,al
c0021d10:	78 d2                	js     c0021ce4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021d12:	a8 08                	test   al,0x8
c0021d14:	74 ce                	je     c0021ce4 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021d16:	31 c0                	xor    eax,eax
c0021d18:	eb 06                	jmp    c0021d20 <IDE::polling(unsigned char, unsigned int)+0x62>
c0021d1a:	b0 01                	mov    al,0x1
c0021d1c:	eb 02                	jmp    c0021d20 <IDE::polling(unsigned char, unsigned int)+0x62>
c0021d1e:	b0 02                	mov    al,0x2
c0021d20:	5b                   	pop    ebx
c0021d21:	5e                   	pop    esi
c0021d22:	5f                   	pop    edi
c0021d23:	c3                   	ret    

c0021d24 <SATABus::close(int, int, void*)>:
c0021d24:	31 c0                	xor    eax,eax
c0021d26:	c3                   	ret    
c0021d27:	90                   	nop

c0021d28 <SATABus::detect()>:
c0021d28:	c3                   	ret    
c0021d29:	90                   	nop

c0021d2a <SATABus::SATABus()>:
c0021d2a:	83 ec 0c             	sub    esp,0xc
c0021d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d31:	83 ec 08             	sub    esp,0x8
c0021d34:	68 04 a2 02 c0       	push   0xc002a204
c0021d39:	50                   	push   eax
c0021d3a:	e8 c9 20 ff ff       	call   c0013e08 <HardDiskController::HardDiskController(char const*)>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c0021d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4b:	89 10                	mov    DWORD PTR [eax],edx
c0021d4d:	83 ec 0c             	sub    esp,0xc
c0021d50:	6a 50                	push   0x50
c0021d52:	e8 db dd fe ff       	call   c000fb32 <Phys::allocateContiguousPages(int)>
c0021d57:	83 c4 10             	add    esp,0x10
c0021d5a:	89 c2                	mov    edx,eax
c0021d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d60:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021d66:	83 ec 0c             	sub    esp,0xc
c0021d69:	6a 50                	push   0x50
c0021d6b:	e8 2d f9 fe ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0021d70:	83 c4 10             	add    esp,0x10
c0021d73:	89 c2                	mov    edx,eax
c0021d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d79:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021d7f:	e8 a9 fa fe ff       	call   c001182d <Virt::getAKernelVAS()>
c0021d84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021d88:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0021d8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021d92:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021d98:	83 ec 0c             	sub    esp,0xc
c0021d9b:	6a 03                	push   0x3
c0021d9d:	6a 50                	push   0x50
c0021d9f:	51                   	push   ecx
c0021da0:	52                   	push   edx
c0021da1:	50                   	push   eax
c0021da2:	e8 b5 02 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0021da7:	83 c4 20             	add    esp,0x20
c0021daa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dae:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0021db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021db8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021dbe:	83 ec 04             	sub    esp,0x4
c0021dc1:	52                   	push   edx
c0021dc2:	50                   	push   eax
c0021dc3:	68 28 a2 02 c0       	push   0xc002a228
c0021dc8:	e8 c0 08 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021dcd:	83 c4 10             	add    esp,0x10
c0021dd0:	90                   	nop
c0021dd1:	83 c4 0c             	add    esp,0xc
c0021dd4:	c3                   	ret    
c0021dd5:	90                   	nop

c0021dd6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0021dd6:	83 ec 0c             	sub    esp,0xc
c0021dd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021ddd:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0021de0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021de3:	09 c2                	or     edx,eax
c0021de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021def:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021df1:	31 c0                	xor    eax,eax
c0021df3:	c1 e9 08             	shr    ecx,0x8
c0021df6:	83 e1 0f             	and    ecx,0xf
c0021df9:	39 c8                	cmp    eax,ecx
c0021dfb:	74 0a                	je     c0021e07 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0021dfd:	f6 c2 01             	test   dl,0x1
c0021e00:	74 18                	je     c0021e1a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0021e02:	d1 ea                	shr    edx,1
c0021e04:	40                   	inc    eax
c0021e05:	eb f2                	jmp    c0021df9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0021e07:	83 ec 0c             	sub    esp,0xc
c0021e0a:	68 4c a2 02 c0       	push   0xc002a24c
c0021e0f:	e8 43 73 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0021e14:	83 c4 10             	add    esp,0x10
c0021e17:	83 c8 ff             	or     eax,0xffffffff
c0021e1a:	83 c4 0c             	add    esp,0xc
c0021e1d:	c3                   	ret    

c0021e1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0021e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e22:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0021e25:	89 c2                	mov    edx,eax
c0021e27:	c1 ea 08             	shr    edx,0x8
c0021e2a:	83 e2 0f             	and    edx,0xf
c0021e2d:	fe ca                	dec    dl
c0021e2f:	75 31                	jne    c0021e62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021e31:	83 e0 0f             	and    eax,0xf
c0021e34:	3c 03                	cmp    al,0x3
c0021e36:	75 2a                	jne    c0021e62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0021e38:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0021e3b:	b8 02 00 00 00       	mov    eax,0x2
c0021e40:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0021e46:	74 1c                	je     c0021e64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0021e48:	b8 04 00 00 00       	mov    eax,0x4
c0021e4d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0021e53:	74 0f                	je     c0021e64 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0021e55:	31 c0                	xor    eax,eax
c0021e57:	83 fa 03             	cmp    edx,0x3
c0021e5a:	0f 94 c0             	sete   al
c0021e5d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0021e61:	c3                   	ret    
c0021e62:	31 c0                	xor    eax,eax
c0021e64:	c3                   	ret    
c0021e65:	90                   	nop

c0021e66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0021e66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021e6d:	0f ba e2 0f          	bt     edx,0xf
c0021e71:	72 f7                	jb     c0021e6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0021e73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021e76:	83 ca 10             	or     edx,0x10
c0021e79:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021e7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021e7f:	83 ca 01             	or     edx,0x1
c0021e82:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021e85:	c3                   	ret    

c0021e86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0021e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e8a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021e8d:	83 e2 fe             	and    edx,0xfffffffe
c0021e90:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021e93:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021e96:	83 e2 ef             	and    edx,0xffffffef
c0021e99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021e9c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021e9f:	0f ba e2 0e          	bt     edx,0xe
c0021ea3:	72 f7                	jb     c0021e9c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0021ea5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021ea8:	0f ba e2 0f          	bt     edx,0xf
c0021eac:	72 ee                	jb     c0021e9c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0021eae:	c3                   	ret    
c0021eaf:	90                   	nop

c0021eb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0021eb0:	55                   	push   ebp
c0021eb1:	57                   	push   edi
c0021eb2:	56                   	push   esi
c0021eb3:	53                   	push   ebx
c0021eb4:	83 ec 1c             	sub    esp,0x1c
c0021eb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021ebb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021ebf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021ec3:	53                   	push   ebx
c0021ec4:	89 fd                	mov    ebp,edi
c0021ec6:	56                   	push   esi
c0021ec7:	c1 e5 0a             	shl    ebp,0xa
c0021eca:	e8 b7 ff ff ff       	call   c0021e86 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0021ecf:	83 ec 0c             	sub    esp,0xc
c0021ed2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0021ed8:	01 e8                	add    eax,ebp
c0021eda:	89 03                	mov    DWORD PTR [ebx],eax
c0021edc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021ede:	68 00 04 00 00       	push   0x400
c0021ee3:	6a 00                	push   0x0
c0021ee5:	50                   	push   eax
c0021ee6:	e8 90 e7 fd ff       	call   c000067b <memset>
c0021eeb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0021ef1:	89 fa                	mov    edx,edi
c0021ef3:	01 e8                	add    eax,ebp
c0021ef5:	c1 e7 0d             	shl    edi,0xd
c0021ef8:	89 03                	mov    DWORD PTR [ebx],eax
c0021efa:	c1 e2 08             	shl    edx,0x8
c0021efd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f04:	81 c2 00 80 00 00    	add    edx,0x8000
c0021f0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0021f0e:	89 d0                	mov    eax,edx
c0021f10:	83 c4 1c             	add    esp,0x1c
c0021f13:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0021f19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021f1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0021f1f:	68 00 01 00 00       	push   0x100
c0021f24:	6a 00                	push   0x0
c0021f26:	50                   	push   eax
c0021f27:	e8 4f e7 fd ff       	call   c000067b <memset>
c0021f2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f30:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0021f36:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0021f3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021f40:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0021f43:	83 c4 10             	add    esp,0x10
c0021f46:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021f4d:	31 ff                	xor    edi,edi
c0021f4f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0021f55:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0021f5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f5f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0021f65:	83 c5 20             	add    ebp,0x20
c0021f68:	01 f8                	add    eax,edi
c0021f6a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021f6d:	52                   	push   edx
c0021f6e:	68 00 01 00 00       	push   0x100
c0021f73:	6a 00                	push   0x0
c0021f75:	50                   	push   eax
c0021f76:	e8 00 e7 fd ff       	call   c000067b <memset>
c0021f7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f7f:	83 c4 10             	add    esp,0x10
c0021f82:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0021f88:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0021f8f:	01 f8                	add    eax,edi
c0021f91:	81 c7 00 01 00 00    	add    edi,0x100
c0021f97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021f9a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0021fa0:	75 b3                	jne    c0021f55 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0021fa2:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0021fa6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0021faa:	83 c4 1c             	add    esp,0x1c
c0021fad:	5b                   	pop    ebx
c0021fae:	5e                   	pop    esi
c0021faf:	5f                   	pop    edi
c0021fb0:	5d                   	pop    ebp
c0021fb1:	e9 b0 fe ff ff       	jmp    c0021e66 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0021fb6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0021fb6:	55                   	push   ebp
c0021fb7:	57                   	push   edi
c0021fb8:	56                   	push   esi
c0021fb9:	53                   	push   ebx
c0021fba:	31 db                	xor    ebx,ebx
c0021fbc:	83 ec 0c             	sub    esp,0xc
c0021fbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021fc3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0021fc7:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0021fca:	f7 c7 01 00 00 00    	test   edi,0x1
c0021fd0:	0f 84 94 00 00 00    	je     c002206a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0021fd6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021fda:	89 d8                	mov    eax,ebx
c0021fdc:	c1 e0 07             	shl    eax,0x7
c0021fdf:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0021fe6:	55                   	push   ebp
c0021fe7:	56                   	push   esi
c0021fe8:	e8 31 fe ff ff       	call   c0021e1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0021fed:	59                   	pop    ecx
c0021fee:	83 f8 01             	cmp    eax,0x1
c0021ff1:	5a                   	pop    edx
c0021ff2:	75 47                	jne    c002203b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0021ff4:	51                   	push   ecx
c0021ff5:	51                   	push   ecx
c0021ff6:	53                   	push   ebx
c0021ff7:	68 71 a2 02 c0       	push   0xc002a271
c0021ffc:	e8 8c 06 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022001:	83 c4 0c             	add    esp,0xc
c0022004:	53                   	push   ebx
c0022005:	55                   	push   ebp
c0022006:	56                   	push   esi
c0022007:	e8 a4 fe ff ff       	call   c0021eb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002200c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022013:	e8 a8 d4 fe ff       	call   c000f4c0 <malloc>
c0022018:	89 04 24             	mov    DWORD PTR [esp],eax
c002201b:	89 c5                	mov    ebp,eax
c002201d:	e8 de 0c 00 00       	call   c0022d00 <SATA::SATA()>
c0022022:	58                   	pop    eax
c0022023:	5a                   	pop    edx
c0022024:	55                   	push   ebp
c0022025:	56                   	push   esi
c0022026:	e8 51 1a ff ff       	call   c0013a7c <Device::addChild(Device*)>
c002202b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002202e:	56                   	push   esi
c002202f:	6a 00                	push   0x0
c0022031:	53                   	push   ebx
c0022032:	55                   	push   ebp
c0022033:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022036:	83 c4 20             	add    esp,0x20
c0022039:	eb 2f                	jmp    c002206a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c002203b:	83 f8 04             	cmp    eax,0x4
c002203e:	75 1a                	jne    c002205a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022040:	52                   	push   edx
c0022041:	52                   	push   edx
c0022042:	53                   	push   ebx
c0022043:	68 88 a2 02 c0       	push   0xc002a288
c0022048:	e8 40 06 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c002204d:	83 c4 0c             	add    esp,0xc
c0022050:	53                   	push   ebx
c0022051:	55                   	push   ebp
c0022052:	56                   	push   esi
c0022053:	e8 58 fe ff ff       	call   c0021eb0 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022058:	eb 0d                	jmp    c0022067 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c002205a:	50                   	push   eax
c002205b:	50                   	push   eax
c002205c:	53                   	push   ebx
c002205d:	68 a1 a2 02 c0       	push   0xc002a2a1
c0022062:	e8 26 06 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022067:	83 c4 10             	add    esp,0x10
c002206a:	d1 ef                	shr    edi,1
c002206c:	43                   	inc    ebx
c002206d:	83 fb 20             	cmp    ebx,0x20
c0022070:	0f 85 54 ff ff ff    	jne    c0021fca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022076:	83 c4 0c             	add    esp,0xc
c0022079:	5b                   	pop    ebx
c002207a:	5e                   	pop    esi
c002207b:	5f                   	pop    edi
c002207c:	5d                   	pop    ebp
c002207d:	c3                   	ret    

c002207e <SATABus::open(int, int, void*)>:
c002207e:	83 ec 14             	sub    esp,0x14
c0022081:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022085:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002208b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022091:	52                   	push   edx
c0022092:	50                   	push   eax
c0022093:	e8 1e ff ff ff       	call   c0021fb6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022098:	31 c0                	xor    eax,eax
c002209a:	83 c4 1c             	add    esp,0x1c
c002209d:	c3                   	ret    

c002209e <ATA::close(int, int, void*)>:
c002209e:	83 ec 0c             	sub    esp,0xc
c00220a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00220ab:	85 c0                	test   eax,eax
c00220ad:	74 0c                	je     c00220bb <ATA::close(int, int, void*)+0x1d>
c00220af:	83 ec 0c             	sub    esp,0xc
c00220b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00220b4:	50                   	push   eax
c00220b5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00220b8:	83 c4 10             	add    esp,0x10
c00220bb:	31 c0                	xor    eax,eax
c00220bd:	83 c4 0c             	add    esp,0xc
c00220c0:	c3                   	ret    
c00220c1:	90                   	nop

c00220c2 <ATA::powerSaving(PowerSavingLevel)>:
c00220c2:	c3                   	ret    
c00220c3:	90                   	nop

c00220c4 <ATA::ATA()>:
c00220c4:	83 ec 0c             	sub    esp,0xc
c00220c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220cb:	83 ec 04             	sub    esp,0x4
c00220ce:	68 00 02 00 00       	push   0x200
c00220d3:	68 b4 a3 02 c0       	push   0xc002a3b4
c00220d8:	50                   	push   eax
c00220d9:	e8 ae 1d ff ff       	call   c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00220de:	83 c4 10             	add    esp,0x10
c00220e1:	ba 00 a3 02 c0       	mov    edx,0xc002a300
c00220e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ea:	89 10                	mov    DWORD PTR [eax],edx
c00220ec:	90                   	nop
c00220ed:	83 c4 0c             	add    esp,0xc
c00220f0:	c3                   	ret    
c00220f1:	90                   	nop

c00220f2 <ATA::flush(bool)>:
c00220f2:	53                   	push   ebx
c00220f3:	83 ec 08             	sub    esp,0x8
c00220f6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00220fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00220ff:	19 c0                	sbb    eax,eax
c0022101:	83 e0 fd             	and    eax,0xfffffffd
c0022104:	05 ea 00 00 00       	add    eax,0xea
c0022109:	50                   	push   eax
c002210a:	6a 07                	push   0x7
c002210c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022113:	50                   	push   eax
c0022114:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002211a:	e8 f3 ef ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002211f:	83 c4 0c             	add    esp,0xc
c0022122:	6a 00                	push   0x0
c0022124:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002212b:	50                   	push   eax
c002212c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022132:	e8 87 fb ff ff       	call   c0021cbe <IDE::polling(unsigned char, unsigned int)>
c0022137:	83 c4 18             	add    esp,0x18
c002213a:	5b                   	pop    ebx
c002213b:	c3                   	ret    

c002213c <ATA::readyForCommand()>:
c002213c:	56                   	push   esi
c002213d:	53                   	push   ebx
c002213e:	31 db                	xor    ebx,ebx
c0022140:	50                   	push   eax
c0022141:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022145:	50                   	push   eax
c0022146:	6a 0c                	push   0xc
c0022148:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002214f:	50                   	push   eax
c0022150:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022156:	e8 77 f0 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c002215b:	83 c4 10             	add    esp,0x10
c002215e:	a8 88                	test   al,0x88
c0022160:	74 23                	je     c0022185 <ATA::readyForCommand()+0x49>
c0022162:	43                   	inc    ebx
c0022163:	83 fb 63             	cmp    ebx,0x63
c0022166:	7e dd                	jle    c0022145 <ATA::readyForCommand()+0x9>
c0022168:	51                   	push   ecx
c0022169:	51                   	push   ecx
c002216a:	6a 00                	push   0x0
c002216c:	68 40 42 0f 00       	push   0xf4240
c0022171:	e8 76 a5 ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c0022176:	83 c4 10             	add    esp,0x10
c0022179:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002217f:	75 c4                	jne    c0022145 <ATA::readyForCommand()+0x9>
c0022181:	31 c0                	xor    eax,eax
c0022183:	eb 02                	jmp    c0022187 <ATA::readyForCommand()+0x4b>
c0022185:	b0 01                	mov    al,0x1
c0022187:	5a                   	pop    edx
c0022188:	5b                   	pop    ebx
c0022189:	5e                   	pop    esi
c002218a:	c3                   	ret    
c002218b:	90                   	nop

c002218c <ATA::access(unsigned long long, int, void*, bool)>:
c002218c:	55                   	push   ebp
c002218d:	57                   	push   edi
c002218e:	56                   	push   esi
c002218f:	53                   	push   ebx
c0022190:	83 ec 2c             	sub    esp,0x2c
c0022193:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022197:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002219b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002219f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00221a3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00221a7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00221ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00221af:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00221b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221b9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00221bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00221c3:	c1 e0 06             	shl    eax,0x6
c00221c6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00221ce:	74 5d                	je     c002222d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00221d0:	89 fa                	mov    edx,edi
c00221d2:	89 f0                	mov    eax,esi
c00221d4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00221d8:	c1 ea 1c             	shr    edx,0x1c
c00221db:	89 d1                	mov    ecx,edx
c00221dd:	09 c1                	or     ecx,eax
c00221df:	74 25                	je     c0022206 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00221e1:	31 ed                	xor    ebp,ebp
c00221e3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00221ea:	89 fa                	mov    edx,edi
c00221ec:	89 f0                	mov    eax,esi
c00221ee:	0f ad d0             	shrd   eax,edx,cl
c00221f1:	d3 ea                	shr    edx,cl
c00221f3:	f6 c1 20             	test   cl,0x20
c00221f6:	74 02                	je     c00221fa <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00221f8:	89 d0                	mov    eax,edx
c00221fa:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00221fe:	45                   	inc    ebp
c00221ff:	83 fd 06             	cmp    ebp,0x6
c0022202:	75 df                	jne    c00221e3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0022204:	eb 76                	jmp    c002227c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0022206:	89 f0                	mov    eax,esi
c0022208:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002220d:	89 fa                	mov    edx,edi
c002220f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0022216:	0f ac d0 10          	shrd   eax,edx,0x10
c002221a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002221f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022223:	c1 ee 18             	shr    esi,0x18
c0022226:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002222b:	eb 56                	jmp    c0022283 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002222d:	6a 00                	push   0x0
c002222f:	6a 3f                	push   0x3f
c0022231:	57                   	push   edi
c0022232:	56                   	push   esi
c0022233:	e8 d4 23 00 00       	call   c002460c <__umoddi3>
c0022238:	83 c4 10             	add    esp,0x10
c002223b:	40                   	inc    eax
c002223c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0022240:	6a 00                	push   0x0
c0022242:	68 f0 03 00 00       	push   0x3f0
c0022247:	57                   	push   edi
c0022248:	56                   	push   esi
c0022249:	e8 be 22 00 00       	call   c002450c <__udivdi3>
c002224e:	83 c4 10             	add    esp,0x10
c0022251:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022256:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002225d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022262:	6a 00                	push   0x0
c0022264:	6a 3f                	push   0x3f
c0022266:	57                   	push   edi
c0022267:	56                   	push   esi
c0022268:	e8 9f 22 00 00       	call   c002450c <__udivdi3>
c002226d:	83 c4 10             	add    esp,0x10
c0022270:	89 c6                	mov    esi,eax
c0022272:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022277:	83 e6 0f             	and    esi,0xf
c002227a:	eb 07                	jmp    c0022283 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002227c:	31 f6                	xor    esi,esi
c002227e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0022283:	bf 01 00 00 00       	mov    edi,0x1
c0022288:	50                   	push   eax
c0022289:	6a 00                	push   0x0
c002228b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022292:	50                   	push   eax
c0022293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022297:	e8 82 f0 ff ff       	call   c002131e <IDE::enableIRQs(unsigned char, bool)>
c002229c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002229f:	e8 98 fe ff ff       	call   c002213c <ATA::readyForCommand()>
c00222a4:	83 c4 10             	add    esp,0x10
c00222a7:	84 c0                	test   al,al
c00222a9:	0f 84 50 02 00 00    	je     c00224ff <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00222af:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00222b5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00222bb:	c1 e0 04             	shl    eax,0x4
c00222be:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00222c5:	09 c6                	or     esi,eax
c00222c7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00222cc:	75 05                	jne    c00222d3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00222ce:	83 ce a0             	or     esi,0xffffffa0
c00222d1:	eb 03                	jmp    c00222d6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00222d3:	83 ce e0             	or     esi,0xffffffe0
c00222d6:	89 f0                	mov    eax,esi
c00222d8:	0f b6 f0             	movzx  esi,al
c00222db:	56                   	push   esi
c00222dc:	6a 06                	push   0x6
c00222de:	51                   	push   ecx
c00222df:	52                   	push   edx
c00222e0:	e8 2d ee ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222e5:	83 c4 10             	add    esp,0x10
c00222e8:	6a 00                	push   0x0
c00222ea:	6a 01                	push   0x1
c00222ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00222f3:	50                   	push   eax
c00222f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00222fa:	e8 13 ee ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00222ff:	83 c4 10             	add    esp,0x10
c0022302:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0022307:	75 6e                	jne    c0022377 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0022309:	6a 00                	push   0x0
c002230b:	6a 08                	push   0x8
c002230d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022314:	50                   	push   eax
c0022315:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002231b:	e8 f2 ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022320:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022325:	50                   	push   eax
c0022326:	6a 09                	push   0x9
c0022328:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002232f:	50                   	push   eax
c0022330:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022336:	e8 d7 ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002233b:	83 c4 20             	add    esp,0x20
c002233e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0022343:	50                   	push   eax
c0022344:	6a 0a                	push   0xa
c0022346:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002234d:	50                   	push   eax
c002234e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022354:	e8 b9 ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022359:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002235e:	50                   	push   eax
c002235f:	6a 0b                	push   0xb
c0022361:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022368:	50                   	push   eax
c0022369:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002236f:	e8 9e ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022374:	83 c4 20             	add    esp,0x20
c0022377:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002237c:	50                   	push   eax
c002237d:	6a 02                	push   0x2
c002237f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022386:	50                   	push   eax
c0022387:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002238d:	e8 80 ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022392:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022397:	50                   	push   eax
c0022398:	6a 03                	push   0x3
c002239a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223a1:	50                   	push   eax
c00223a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223a8:	e8 65 ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223ad:	83 c4 20             	add    esp,0x20
c00223b0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00223b5:	50                   	push   eax
c00223b6:	6a 04                	push   0x4
c00223b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223bf:	50                   	push   eax
c00223c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223c6:	e8 47 ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00223d0:	50                   	push   eax
c00223d1:	6a 05                	push   0x5
c00223d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223da:	50                   	push   eax
c00223db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223e1:	e8 2c ed ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223e6:	83 c4 20             	add    esp,0x20
c00223e9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00223ee:	0f 94 c0             	sete   al
c00223f1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00223f6:	74 09                	je     c0022401 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00223f8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00223ff:	eb 07                	jmp    c0022408 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0022401:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0022408:	0f b6 c0             	movzx  eax,al
c002240b:	50                   	push   eax
c002240c:	6a 07                	push   0x7
c002240e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022415:	50                   	push   eax
c0022416:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002241c:	e8 f1 ec ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022421:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0022425:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0022429:	83 c4 10             	add    esp,0x10
c002242c:	85 f6                	test   esi,esi
c002242e:	0f 84 ac 00 00 00    	je     c00224e0 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0022434:	50                   	push   eax
c0022435:	6a 01                	push   0x1
c0022437:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002243e:	50                   	push   eax
c002243f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022445:	e8 74 f8 ff ff       	call   c0021cbe <IDE::polling(unsigned char, unsigned int)>
c002244a:	83 c4 10             	add    esp,0x10
c002244d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022453:	84 c0                	test   al,al
c0022455:	74 20                	je     c0022477 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0022457:	0f b6 f8             	movzx  edi,al
c002245a:	0f b6 d2             	movzx  edx,dl
c002245d:	57                   	push   edi
c002245e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022465:	50                   	push   eax
c0022466:	52                   	push   edx
c0022467:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002246d:	e8 b6 f6 ff ff       	call   c0021b28 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022472:	e9 85 00 00 00       	jmp    c00224fc <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0022477:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002247c:	74 41                	je     c00224bf <ATA::access(unsigned long long, int, void*, bool)+0x333>
c002247e:	31 c9                	xor    ecx,ecx
c0022480:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0022484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022488:	50                   	push   eax
c0022489:	50                   	push   eax
c002248a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022491:	50                   	push   eax
c0022492:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022498:	e8 63 ec ff ff       	call   c0021100 <IDE::getBase(unsigned char)>
c002249d:	89 c2                	mov    edx,eax
c002249f:	89 e8                	mov    eax,ebp
c00224a1:	66 ef                	out    dx,ax
c00224a3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00224a7:	83 c4 10             	add    esp,0x10
c00224aa:	41                   	inc    ecx
c00224ab:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00224b1:	75 cd                	jne    c0022480 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00224b3:	4e                   	dec    esi
c00224b4:	81 c7 00 02 00 00    	add    edi,0x200
c00224ba:	e9 6d ff ff ff       	jmp    c002242c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00224bf:	0f b6 d2             	movzx  edx,dl
c00224c2:	51                   	push   ecx
c00224c3:	51                   	push   ecx
c00224c4:	52                   	push   edx
c00224c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00224cb:	e8 30 ec ff ff       	call   c0021100 <IDE::getBase(unsigned char)>
c00224d0:	b9 00 01 00 00       	mov    ecx,0x100
c00224d5:	89 c2                	mov    edx,eax
c00224d7:	fc                   	cld    
c00224d8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00224db:	83 c4 10             	add    esp,0x10
c00224de:	eb d3                	jmp    c00224b3 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00224e0:	31 ff                	xor    edi,edi
c00224e2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00224e7:	74 16                	je     c00224ff <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00224e9:	50                   	push   eax
c00224ea:	50                   	push   eax
c00224eb:	31 c0                	xor    eax,eax
c00224ed:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00224f2:	0f 94 c0             	sete   al
c00224f5:	50                   	push   eax
c00224f6:	53                   	push   ebx
c00224f7:	e8 f6 fb ff ff       	call   c00220f2 <ATA::flush(bool)>
c00224fc:	83 c4 10             	add    esp,0x10
c00224ff:	83 c4 2c             	add    esp,0x2c
c0022502:	89 f8                	mov    eax,edi
c0022504:	5b                   	pop    ebx
c0022505:	5e                   	pop    esi
c0022506:	5f                   	pop    edi
c0022507:	5d                   	pop    ebp
c0022508:	c3                   	ret    
c0022509:	90                   	nop

c002250a <ATA::read(unsigned long long, int, void*)>:
c002250a:	57                   	push   edi
c002250b:	b8 04 00 00 00       	mov    eax,0x4
c0022510:	56                   	push   esi
c0022511:	53                   	push   ebx
c0022512:	83 ec 10             	sub    esp,0x10
c0022515:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022519:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002251d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022520:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022524:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022528:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002252e:	77 3b                	ja     c002256b <ATA::read(unsigned long long, int, void*)+0x61>
c0022530:	b8 06 00 00 00       	mov    eax,0x6
c0022535:	85 d2                	test   edx,edx
c0022537:	74 32                	je     c002256b <ATA::read(unsigned long long, int, void*)+0x61>
c0022539:	50                   	push   eax
c002253a:	50                   	push   eax
c002253b:	6a 00                	push   0x0
c002253d:	52                   	push   edx
c002253e:	53                   	push   ebx
c002253f:	57                   	push   edi
c0022540:	56                   	push   esi
c0022541:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022545:	e8 42 fc ff ff       	call   c002218c <ATA::access(unsigned long long, int, void*, bool)>
c002254a:	83 c4 20             	add    esp,0x20
c002254d:	85 c0                	test   eax,eax
c002254f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022553:	75 11                	jne    c0022566 <ATA::read(unsigned long long, int, void*)+0x5c>
c0022555:	01 1d 08 db 02 c0    	add    DWORD PTR ds:0xc002db08,ebx
c002255b:	e8 96 df fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c0022560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022564:	eb 05                	jmp    c002256b <ATA::read(unsigned long long, int, void*)+0x61>
c0022566:	b8 01 00 00 00       	mov    eax,0x1
c002256b:	83 c4 10             	add    esp,0x10
c002256e:	5b                   	pop    ebx
c002256f:	5e                   	pop    esi
c0022570:	5f                   	pop    edi
c0022571:	c3                   	ret    

c0022572 <ATA::write(unsigned long long, int, void*)>:
c0022572:	57                   	push   edi
c0022573:	b8 04 00 00 00       	mov    eax,0x4
c0022578:	56                   	push   esi
c0022579:	53                   	push   ebx
c002257a:	83 ec 10             	sub    esp,0x10
c002257d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022581:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022585:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022588:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002258c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022590:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022596:	77 3b                	ja     c00225d3 <ATA::write(unsigned long long, int, void*)+0x61>
c0022598:	b8 06 00 00 00       	mov    eax,0x6
c002259d:	85 d2                	test   edx,edx
c002259f:	74 32                	je     c00225d3 <ATA::write(unsigned long long, int, void*)+0x61>
c00225a1:	50                   	push   eax
c00225a2:	50                   	push   eax
c00225a3:	6a 01                	push   0x1
c00225a5:	52                   	push   edx
c00225a6:	53                   	push   ebx
c00225a7:	57                   	push   edi
c00225a8:	56                   	push   esi
c00225a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00225ad:	e8 da fb ff ff       	call   c002218c <ATA::access(unsigned long long, int, void*, bool)>
c00225b2:	83 c4 20             	add    esp,0x20
c00225b5:	85 c0                	test   eax,eax
c00225b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00225bb:	75 11                	jne    c00225ce <ATA::write(unsigned long long, int, void*)+0x5c>
c00225bd:	01 1d 04 db 02 c0    	add    DWORD PTR ds:0xc002db04,ebx
c00225c3:	e8 2e df fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c00225c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225cc:	eb 05                	jmp    c00225d3 <ATA::write(unsigned long long, int, void*)+0x61>
c00225ce:	b8 01 00 00 00       	mov    eax,0x1
c00225d3:	83 c4 10             	add    esp,0x10
c00225d6:	5b                   	pop    ebx
c00225d7:	5e                   	pop    esi
c00225d8:	5f                   	pop    edi
c00225d9:	c3                   	ret    

c00225da <ATA::detectCHS()>:
c00225da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00225de:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00225e4:	c1 e0 06             	shl    eax,0x6
c00225e7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00225ed:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00225f7:	c7 44 24 04 e4 a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a2e4
c00225ff:	e9 53 6b ff ff       	jmp    c0019157 <Krnl::panic(char const*)>

c0022604 <ATA::open(int, int, void*)>:
c0022604:	53                   	push   ebx
c0022605:	83 ec 08             	sub    esp,0x8
c0022608:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002260c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022610:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022614:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002261a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022620:	c1 e0 06             	shl    eax,0x6
c0022623:	01 d0                	add    eax,edx
c0022625:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002262c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0022632:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0022639:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022643:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0022649:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0022650:	75 0c                	jne    c002265e <ATA::open(int, int, void*)+0x5a>
c0022652:	83 ec 0c             	sub    esp,0xc
c0022655:	53                   	push   ebx
c0022656:	e8 7f ff ff ff       	call   c00225da <ATA::detectCHS()>
c002265b:	83 c4 10             	add    esp,0x10
c002265e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022664:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002266a:	c1 e0 06             	shl    eax,0x6
c002266d:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0022674:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002267e:	d1 e8                	shr    eax,1
c0022680:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022686:	6a 04                	push   0x4
c0022688:	6a 0c                	push   0xc
c002268a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022691:	50                   	push   eax
c0022692:	52                   	push   edx
c0022693:	e8 7a ea ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022698:	90                   	nop
c0022699:	90                   	nop
c002269a:	6a 00                	push   0x0
c002269c:	6a 0c                	push   0xc
c002269e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00226a5:	50                   	push   eax
c00226a6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00226ac:	e8 61 ea ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226b1:	83 c4 14             	add    esp,0x14
c00226b4:	53                   	push   ebx
c00226b5:	e8 3a 18 ff ff       	call   c0013ef4 <PhysicalDisk::startCache()>
c00226ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00226bd:	e8 e2 37 ff ff       	call   c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>
c00226c2:	31 c0                	xor    eax,eax
c00226c4:	83 c4 18             	add    esp,0x18
c00226c7:	5b                   	pop    ebx
c00226c8:	c3                   	ret    
c00226c9:	90                   	nop

c00226ca <ATAPI::write(unsigned long long, int, void*)>:
c00226ca:	b8 03 00 00 00       	mov    eax,0x3
c00226cf:	c3                   	ret    

c00226d0 <ATAPI::close(int, int, void*)>:
c00226d0:	83 ec 0c             	sub    esp,0xc
c00226d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226d7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00226dd:	85 c0                	test   eax,eax
c00226df:	74 0c                	je     c00226ed <ATAPI::close(int, int, void*)+0x1d>
c00226e1:	83 ec 0c             	sub    esp,0xc
c00226e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00226e6:	50                   	push   eax
c00226e7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00226ea:	83 c4 10             	add    esp,0x10
c00226ed:	31 c0                	xor    eax,eax
c00226ef:	83 c4 0c             	add    esp,0xc
c00226f2:	c3                   	ret    
c00226f3:	90                   	nop

c00226f4 <ATAPI::ATAPI()>:
c00226f4:	83 ec 0c             	sub    esp,0xc
c00226f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00226fb:	83 ec 04             	sub    esp,0x4
c00226fe:	68 00 08 00 00       	push   0x800
c0022703:	68 2c a3 02 c0       	push   0xc002a32c
c0022708:	50                   	push   eax
c0022709:	e8 7e 17 ff ff       	call   c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002270e:	83 c4 10             	add    esp,0x10
c0022711:	ba 6c a3 02 c0       	mov    edx,0xc002a36c
c0022716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002271a:	89 10                	mov    DWORD PTR [eax],edx
c002271c:	90                   	nop
c002271d:	83 c4 0c             	add    esp,0xc
c0022720:	c3                   	ret    
c0022721:	90                   	nop

c0022722 <ATAPI::readyForCommand()>:
c0022722:	56                   	push   esi
c0022723:	53                   	push   ebx
c0022724:	31 db                	xor    ebx,ebx
c0022726:	50                   	push   eax
c0022727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002272b:	50                   	push   eax
c002272c:	6a 0c                	push   0xc
c002272e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022735:	50                   	push   eax
c0022736:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002273c:	e8 91 ea ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0022741:	83 c4 10             	add    esp,0x10
c0022744:	a8 88                	test   al,0x88
c0022746:	74 23                	je     c002276b <ATAPI::readyForCommand()+0x49>
c0022748:	43                   	inc    ebx
c0022749:	83 fb 63             	cmp    ebx,0x63
c002274c:	7e dd                	jle    c002272b <ATAPI::readyForCommand()+0x9>
c002274e:	51                   	push   ecx
c002274f:	51                   	push   ecx
c0022750:	6a 00                	push   0x0
c0022752:	68 40 42 0f 00       	push   0xf4240
c0022757:	e8 90 9f ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c002275c:	83 c4 10             	add    esp,0x10
c002275f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022765:	75 c4                	jne    c002272b <ATAPI::readyForCommand()+0x9>
c0022767:	31 c0                	xor    eax,eax
c0022769:	eb 02                	jmp    c002276d <ATAPI::readyForCommand()+0x4b>
c002276b:	b0 01                	mov    al,0x1
c002276d:	5a                   	pop    edx
c002276e:	5b                   	pop    ebx
c002276f:	5e                   	pop    esi
c0022770:	c3                   	ret    
c0022771:	90                   	nop

c0022772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0022772:	55                   	push   ebp
c0022773:	57                   	push   edi
c0022774:	56                   	push   esi
c0022775:	53                   	push   ebx
c0022776:	83 ec 20             	sub    esp,0x20
c0022779:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002277d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022781:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022785:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022789:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002278d:	6a 01                	push   0x1
c002278f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022796:	50                   	push   eax
c0022797:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002279d:	e8 7c eb ff ff       	call   c002131e <IDE::enableIRQs(unsigned char, bool)>
c00227a2:	5e                   	pop    esi
c00227a3:	58                   	pop    eax
c00227a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00227ab:	50                   	push   eax
c00227ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00227b2:	e8 35 e9 ff ff       	call   c00210ec <IDE::prepareInterrupt(unsigned char)>
c00227b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00227ba:	e8 63 ff ff ff       	call   c0022722 <ATAPI::readyForCommand()>
c00227bf:	83 c4 10             	add    esp,0x10
c00227c2:	84 c0                	test   al,al
c00227c4:	75 0a                	jne    c00227d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00227c6:	bb 01 00 00 00       	mov    ebx,0x1
c00227cb:	e9 57 02 00 00       	jmp    c0022a27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00227d0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00227d6:	c1 e0 04             	shl    eax,0x4
c00227d9:	0f b6 c0             	movzx  eax,al
c00227dc:	50                   	push   eax
c00227dd:	6a 06                	push   0x6
c00227df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00227e6:	50                   	push   eax
c00227e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00227ed:	e8 20 e9 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00227f2:	6a 00                	push   0x0
c00227f4:	6a 01                	push   0x1
c00227f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00227fd:	50                   	push   eax
c00227fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022804:	e8 09 e9 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022809:	83 c4 20             	add    esp,0x20
c002280c:	0f b6 c3             	movzx  eax,bl
c002280f:	0f b6 df             	movzx  ebx,bh
c0022812:	50                   	push   eax
c0022813:	6a 04                	push   0x4
c0022815:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002281c:	50                   	push   eax
c002281d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022823:	e8 ea e8 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022828:	53                   	push   ebx
c0022829:	6a 05                	push   0x5
c002282b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022832:	50                   	push   eax
c0022833:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022839:	e8 d4 e8 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002283e:	83 c4 20             	add    esp,0x20
c0022841:	68 a0 00 00 00       	push   0xa0
c0022846:	6a 07                	push   0x7
c0022848:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002284f:	50                   	push   eax
c0022850:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022856:	e8 b7 e8 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002285b:	83 c4 0c             	add    esp,0xc
c002285e:	6a 01                	push   0x1
c0022860:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022867:	50                   	push   eax
c0022868:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002286e:	e8 4b f4 ff ff       	call   c0021cbe <IDE::polling(unsigned char, unsigned int)>
c0022873:	83 c4 10             	add    esp,0x10
c0022876:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002287c:	84 c0                	test   al,al
c002287e:	74 23                	je     c00228a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0022880:	0f b6 d8             	movzx  ebx,al
c0022883:	0f b6 d2             	movzx  edx,dl
c0022886:	53                   	push   ebx
c0022887:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002288e:	50                   	push   eax
c002288f:	52                   	push   edx
c0022890:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022896:	e8 8d f2 ff ff       	call   c0021b28 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002289b:	83 c4 10             	add    esp,0x10
c002289e:	e9 84 01 00 00       	jmp    c0022a27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00228a3:	0f b6 d2             	movzx  edx,dl
c00228a6:	53                   	push   ebx
c00228a7:	53                   	push   ebx
c00228a8:	52                   	push   edx
c00228a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00228af:	e8 4c e8 ff ff       	call   c0021100 <IDE::getBase(unsigned char)>
c00228b4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00228b8:	b9 06 00 00 00       	mov    ecx,0x6
c00228bd:	89 c2                	mov    edx,eax
c00228bf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00228c2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00228c6:	83 c4 10             	add    esp,0x10
c00228c9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00228cf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00228d6:	85 db                	test   ebx,ebx
c00228d8:	0f 84 ec 00 00 00    	je     c00229ca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00228de:	51                   	push   ecx
c00228df:	51                   	push   ecx
c00228e0:	52                   	push   edx
c00228e1:	50                   	push   eax
c00228e2:	e8 99 e9 ff ff       	call   c0021280 <IDE::waitInterrupt(unsigned char)>
c00228e7:	83 c4 10             	add    esp,0x10
c00228ea:	84 c0                	test   al,al
c00228ec:	0f 84 d4 fe ff ff    	je     c00227c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00228f2:	56                   	push   esi
c00228f3:	56                   	push   esi
c00228f4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00228fb:	50                   	push   eax
c00228fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022902:	e8 e5 e7 ff ff       	call   c00210ec <IDE::prepareInterrupt(unsigned char)>
c0022907:	83 c4 0c             	add    esp,0xc
c002290a:	6a 04                	push   0x4
c002290c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022913:	50                   	push   eax
c0022914:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002291a:	e8 b3 e8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c002291f:	83 c4 0c             	add    esp,0xc
c0022922:	89 c6                	mov    esi,eax
c0022924:	6a 05                	push   0x5
c0022926:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002292d:	50                   	push   eax
c002292e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022934:	e8 99 e8 ff ff       	call   c00211d2 <IDE::read(unsigned char, unsigned char)>
c0022939:	89 f1                	mov    ecx,esi
c002293b:	0f b6 c0             	movzx  eax,al
c002293e:	0f b6 f1             	movzx  esi,cl
c0022941:	c1 e0 08             	shl    eax,0x8
c0022944:	09 c6                	or     esi,eax
c0022946:	d1 fe                	sar    esi,1
c0022948:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002294c:	83 c4 10             	add    esp,0x10
c002294f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022954:	74 41                	je     c0022997 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0022956:	31 c9                	xor    ecx,ecx
c0022958:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002295e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022965:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0022969:	75 0a                	jne    c0022975 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002296b:	01 c9                	add    ecx,ecx
c002296d:	01 cd                	add    ebp,ecx
c002296f:	4b                   	dec    ebx
c0022970:	e9 54 ff ff ff       	jmp    c00228c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0022975:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002297a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002297e:	51                   	push   ecx
c002297f:	51                   	push   ecx
c0022980:	52                   	push   edx
c0022981:	50                   	push   eax
c0022982:	e8 79 e7 ff ff       	call   c0021100 <IDE::getBase(unsigned char)>
c0022987:	89 c2                	mov    edx,eax
c0022989:	89 f0                	mov    eax,esi
c002298b:	66 ef                	out    dx,ax
c002298d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022991:	83 c4 10             	add    esp,0x10
c0022994:	41                   	inc    ecx
c0022995:	eb c1                	jmp    c0022958 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0022997:	31 f6                	xor    esi,esi
c0022999:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002299f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00229a6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00229aa:	75 06                	jne    c00229b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00229ac:	01 f6                	add    esi,esi
c00229ae:	01 f5                	add    ebp,esi
c00229b0:	eb bd                	jmp    c002296f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00229b2:	51                   	push   ecx
c00229b3:	51                   	push   ecx
c00229b4:	52                   	push   edx
c00229b5:	50                   	push   eax
c00229b6:	e8 45 e7 ff ff       	call   c0021100 <IDE::getBase(unsigned char)>
c00229bb:	89 c2                	mov    edx,eax
c00229bd:	66 ed                	in     ax,dx
c00229bf:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00229c4:	83 c4 10             	add    esp,0x10
c00229c7:	46                   	inc    esi
c00229c8:	eb cf                	jmp    c0022999 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00229ca:	51                   	push   ecx
c00229cb:	51                   	push   ecx
c00229cc:	52                   	push   edx
c00229cd:	50                   	push   eax
c00229ce:	e8 ad e8 ff ff       	call   c0021280 <IDE::waitInterrupt(unsigned char)>
c00229d3:	83 c4 10             	add    esp,0x10
c00229d6:	84 c0                	test   al,al
c00229d8:	0f 84 e8 fd ff ff    	je     c00227c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00229de:	bb a0 86 01 00       	mov    ebx,0x186a0
c00229e3:	52                   	push   edx
c00229e4:	52                   	push   edx
c00229e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00229ec:	50                   	push   eax
c00229ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00229f3:	e8 f4 e6 ff ff       	call   c00210ec <IDE::prepareInterrupt(unsigned char)>
c00229f8:	83 c4 10             	add    esp,0x10
c00229fb:	50                   	push   eax
c00229fc:	50                   	push   eax
c00229fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a04:	50                   	push   eax
c0022a05:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a0b:	e8 f0 e6 ff ff       	call   c0021100 <IDE::getBase(unsigned char)>
c0022a10:	8d 50 07             	lea    edx,[eax+0x7]
c0022a13:	ec                   	in     al,dx
c0022a14:	83 c4 10             	add    esp,0x10
c0022a17:	a8 88                	test   al,0x88
c0022a19:	74 0a                	je     c0022a25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0022a1b:	4b                   	dec    ebx
c0022a1c:	75 dd                	jne    c00229fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0022a1e:	bb 02 00 00 00       	mov    ebx,0x2
c0022a23:	eb 02                	jmp    c0022a27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022a25:	31 db                	xor    ebx,ebx
c0022a27:	83 c4 1c             	add    esp,0x1c
c0022a2a:	89 d8                	mov    eax,ebx
c0022a2c:	5b                   	pop    ebx
c0022a2d:	5e                   	pop    esi
c0022a2e:	5f                   	pop    edi
c0022a2f:	5d                   	pop    ebp
c0022a30:	c3                   	ret    
c0022a31:	90                   	nop

c0022a32 <ATAPI::diskRemoved()>:
c0022a32:	83 ec 18             	sub    esp,0x18
c0022a35:	68 37 a3 02 c0       	push   0xc002a337
c0022a3a:	e8 4e fc fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022a3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a43:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0022a4a:	83 c4 1c             	add    esp,0x1c
c0022a4d:	c3                   	ret    

c0022a4e <ATAPI::eject()>:
c0022a4e:	57                   	push   edi
c0022a4f:	b9 03 00 00 00       	mov    ecx,0x3
c0022a54:	53                   	push   ebx
c0022a55:	83 ec 14             	sub    esp,0x14
c0022a58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022a5c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022a60:	fc                   	cld    
c0022a61:	31 c0                	xor    eax,eax
c0022a63:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022a65:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022a6a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0022a6f:	50                   	push   eax
c0022a70:	50                   	push   eax
c0022a71:	6a 00                	push   0x0
c0022a73:	6a 00                	push   0x0
c0022a75:	6a 00                	push   0x0
c0022a77:	6a 02                	push   0x2
c0022a79:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a7d:	50                   	push   eax
c0022a7e:	53                   	push   ebx
c0022a7f:	e8 ee fc ff ff       	call   c0022772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022a84:	83 c4 14             	add    esp,0x14
c0022a87:	53                   	push   ebx
c0022a88:	e8 a5 ff ff ff       	call   c0022a32 <ATAPI::diskRemoved()>
c0022a8d:	83 c4 24             	add    esp,0x24
c0022a90:	5b                   	pop    ebx
c0022a91:	5f                   	pop    edi
c0022a92:	c3                   	ret    
c0022a93:	90                   	nop

c0022a94 <ATAPI::diskInserted()>:
c0022a94:	53                   	push   ebx
c0022a95:	83 ec 14             	sub    esp,0x14
c0022a98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022a9c:	68 4d a3 02 c0       	push   0xc002a34d
c0022aa1:	e8 e7 fb fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022aa6:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0022aad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ab0:	e8 3f 14 ff ff       	call   c0013ef4 <PhysicalDisk::startCache()>
c0022ab5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0022ab9:	83 c4 18             	add    esp,0x18
c0022abc:	5b                   	pop    ebx
c0022abd:	e9 e2 33 ff ff       	jmp    c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>

c0022ac2 <ATAPI::detectMedia()>:
c0022ac2:	56                   	push   esi
c0022ac3:	53                   	push   ebx
c0022ac4:	83 ec 28             	sub    esp,0x28
c0022ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022acb:	6a 0c                	push   0xc
c0022acd:	6a 00                	push   0x0
c0022acf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0022ad3:	56                   	push   esi
c0022ad4:	e8 a2 db fd ff       	call   c000067b <memset>
c0022ad9:	58                   	pop    eax
c0022ada:	5a                   	pop    edx
c0022adb:	6a 00                	push   0x0
c0022add:	6a 00                	push   0x0
c0022adf:	6a 00                	push   0x0
c0022ae1:	6a 00                	push   0x0
c0022ae3:	56                   	push   esi
c0022ae4:	53                   	push   ebx
c0022ae5:	e8 88 fc ff ff       	call   c0022772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022aea:	83 c4 1c             	add    esp,0x1c
c0022aed:	6a 0c                	push   0xc
c0022aef:	6a 00                	push   0x0
c0022af1:	56                   	push   esi
c0022af2:	e8 84 db fd ff       	call   c000067b <memset>
c0022af7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0022afc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0022b01:	59                   	pop    ecx
c0022b02:	58                   	pop    eax
c0022b03:	6a 01                	push   0x1
c0022b05:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022b09:	50                   	push   eax
c0022b0a:	6a 00                	push   0x0
c0022b0c:	6a 12                	push   0x12
c0022b0e:	56                   	push   esi
c0022b0f:	53                   	push   ebx
c0022b10:	e8 5d fc ff ff       	call   c0022772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022b15:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022b19:	83 c4 20             	add    esp,0x20
c0022b1c:	83 e0 7f             	and    eax,0x7f
c0022b1f:	3c 70                	cmp    al,0x70
c0022b21:	74 15                	je     c0022b38 <ATAPI::detectMedia()+0x76>
c0022b23:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022b2a:	75 0c                	jne    c0022b38 <ATAPI::detectMedia()+0x76>
c0022b2c:	83 ec 0c             	sub    esp,0xc
c0022b2f:	53                   	push   ebx
c0022b30:	e8 5f ff ff ff       	call   c0022a94 <ATAPI::diskInserted()>
c0022b35:	83 c4 10             	add    esp,0x10
c0022b38:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022b3c:	83 e0 0f             	and    eax,0xf
c0022b3f:	3c 02                	cmp    al,0x2
c0022b41:	75 1b                	jne    c0022b5e <ATAPI::detectMedia()+0x9c>
c0022b43:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022b48:	75 2d                	jne    c0022b77 <ATAPI::detectMedia()+0xb5>
c0022b4a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022b51:	74 24                	je     c0022b77 <ATAPI::detectMedia()+0xb5>
c0022b53:	83 ec 0c             	sub    esp,0xc
c0022b56:	53                   	push   ebx
c0022b57:	e8 d6 fe ff ff       	call   c0022a32 <ATAPI::diskRemoved()>
c0022b5c:	eb 16                	jmp    c0022b74 <ATAPI::detectMedia()+0xb2>
c0022b5e:	84 c0                	test   al,al
c0022b60:	75 15                	jne    c0022b77 <ATAPI::detectMedia()+0xb5>
c0022b62:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022b69:	75 0c                	jne    c0022b77 <ATAPI::detectMedia()+0xb5>
c0022b6b:	83 ec 0c             	sub    esp,0xc
c0022b6e:	53                   	push   ebx
c0022b6f:	e8 20 ff ff ff       	call   c0022a94 <ATAPI::diskInserted()>
c0022b74:	83 c4 10             	add    esp,0x10
c0022b77:	83 c4 24             	add    esp,0x24
c0022b7a:	5b                   	pop    ebx
c0022b7b:	5e                   	pop    esi
c0022b7c:	c3                   	ret    
c0022b7d:	90                   	nop

c0022b7e <ATAPI::open(int, int, void*)>:
c0022b7e:	53                   	push   ebx
c0022b7f:	83 ec 08             	sub    esp,0x8
c0022b82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022b86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022b8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022b8e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022b94:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022b9a:	c1 e0 06             	shl    eax,0x6
c0022b9d:	01 d0                	add    eax,edx
c0022b9f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022ba6:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0022bac:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0022bb3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022bbd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022bc3:	6a 04                	push   0x4
c0022bc5:	6a 0c                	push   0xc
c0022bc7:	51                   	push   ecx
c0022bc8:	52                   	push   edx
c0022bc9:	e8 44 e5 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022bce:	90                   	nop
c0022bcf:	90                   	nop
c0022bd0:	6a 00                	push   0x0
c0022bd2:	6a 0c                	push   0xc
c0022bd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022bdb:	50                   	push   eax
c0022bdc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022be2:	e8 2b e5 ff ff       	call   c0021112 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022be7:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022bee:	83 c4 14             	add    esp,0x14
c0022bf1:	53                   	push   ebx
c0022bf2:	e8 cb fe ff ff       	call   c0022ac2 <ATAPI::detectMedia()>
c0022bf7:	31 c0                	xor    eax,eax
c0022bf9:	83 c4 18             	add    esp,0x18
c0022bfc:	5b                   	pop    ebx
c0022bfd:	c3                   	ret    

c0022bfe <ATAPI::read(unsigned long long, int, void*)>:
c0022bfe:	55                   	push   ebp
c0022bff:	57                   	push   edi
c0022c00:	56                   	push   esi
c0022c01:	53                   	push   ebx
c0022c02:	83 ec 1c             	sub    esp,0x1c
c0022c05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c09:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022c0d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022c11:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022c18:	74 41                	je     c0022c5b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0022c1a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022c1e:	b9 03 00 00 00       	mov    ecx,0x3
c0022c23:	fc                   	cld    
c0022c24:	31 c0                	xor    eax,eax
c0022c26:	86 fb                	xchg   bl,bh
c0022c28:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022c2a:	c1 c3 10             	rol    ebx,0x10
c0022c2d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022c32:	89 e8                	mov    eax,ebp
c0022c34:	86 fb                	xchg   bl,bh
c0022c36:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022c3a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022c3e:	50                   	push   eax
c0022c3f:	50                   	push   eax
c0022c40:	55                   	push   ebp
c0022c41:	c1 e5 0b             	shl    ebp,0xb
c0022c44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022c48:	6a 00                	push   0x0
c0022c4a:	55                   	push   ebp
c0022c4b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022c4f:	50                   	push   eax
c0022c50:	56                   	push   esi
c0022c51:	e8 1c fb ff ff       	call   c0022772 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022c56:	83 c4 20             	add    esp,0x20
c0022c59:	eb 1a                	jmp    c0022c75 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0022c5b:	83 ec 0c             	sub    esp,0xc
c0022c5e:	56                   	push   esi
c0022c5f:	e8 5e fe ff ff       	call   c0022ac2 <ATAPI::detectMedia()>
c0022c64:	83 c4 10             	add    esp,0x10
c0022c67:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022c6e:	75 aa                	jne    c0022c1a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0022c70:	b8 02 00 00 00       	mov    eax,0x2
c0022c75:	83 c4 1c             	add    esp,0x1c
c0022c78:	5b                   	pop    ebx
c0022c79:	5e                   	pop    esi
c0022c7a:	5f                   	pop    edi
c0022c7b:	5d                   	pop    ebp
c0022c7c:	c3                   	ret    
c0022c7d:	90                   	nop

c0022c7e <SATA::close(int, int, void*)>:
c0022c7e:	83 ec 0c             	sub    esp,0xc
c0022c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c85:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022c8b:	85 c0                	test   eax,eax
c0022c8d:	74 0c                	je     c0022c9b <SATA::close(int, int, void*)+0x1d>
c0022c8f:	83 ec 0c             	sub    esp,0xc
c0022c92:	8b 10                	mov    edx,DWORD PTR [eax]
c0022c94:	50                   	push   eax
c0022c95:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022c98:	83 c4 10             	add    esp,0x10
c0022c9b:	31 c0                	xor    eax,eax
c0022c9d:	83 c4 0c             	add    esp,0xc
c0022ca0:	c3                   	ret    
c0022ca1:	90                   	nop

c0022ca2 <SATA::powerSaving(PowerSavingLevel)>:
c0022ca2:	c3                   	ret    
c0022ca3:	90                   	nop

c0022ca4 <SATA::open(int, int, void*)>:
c0022ca4:	53                   	push   ebx
c0022ca5:	83 ec 14             	sub    esp,0x14
c0022ca8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022cac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022cb0:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022cba:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0022cc0:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0022cca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cce:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022cd8:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0022cde:	68 98 a3 02 c0       	push   0xc002a398
c0022ce3:	e8 a5 f9 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022ce8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ceb:	e8 04 12 ff ff       	call   c0013ef4 <PhysicalDisk::startCache()>
c0022cf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022cf3:	e8 ac 31 ff ff       	call   c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>
c0022cf8:	31 c0                	xor    eax,eax
c0022cfa:	83 c4 18             	add    esp,0x18
c0022cfd:	5b                   	pop    ebx
c0022cfe:	c3                   	ret    
c0022cff:	90                   	nop

c0022d00 <SATA::SATA()>:
c0022d00:	83 ec 0c             	sub    esp,0xc
c0022d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d07:	83 ec 04             	sub    esp,0x4
c0022d0a:	68 00 02 00 00       	push   0x200
c0022d0f:	68 b3 a3 02 c0       	push   0xc002a3b3
c0022d14:	50                   	push   eax
c0022d15:	e8 72 11 ff ff       	call   c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022d1a:	83 c4 10             	add    esp,0x10
c0022d1d:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c0022d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d26:	89 10                	mov    DWORD PTR [eax],edx
c0022d28:	90                   	nop
c0022d29:	83 c4 0c             	add    esp,0xc
c0022d2c:	c3                   	ret    
c0022d2d:	90                   	nop

c0022d2e <SATA::access(unsigned long long, int, void*, bool)>:
c0022d2e:	55                   	push   ebp
c0022d2f:	57                   	push   edi
c0022d30:	56                   	push   esi
c0022d31:	53                   	push   ebx
c0022d32:	83 ec 1c             	sub    esp,0x1c
c0022d35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022d39:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022d3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022d41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022d45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022d49:	83 fd 08             	cmp    ebp,0x8
c0022d4c:	7e 10                	jle    c0022d5e <SATA::access(unsigned long long, int, void*, bool)+0x30>
c0022d4e:	83 ec 0c             	sub    esp,0xc
c0022d51:	68 c3 a3 02 c0       	push   0xc002a3c3
c0022d56:	e8 fc 63 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0022d5b:	83 c4 10             	add    esp,0x10
c0022d5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022d62:	55                   	push   ebp
c0022d63:	57                   	push   edi
c0022d64:	68 f5 a3 02 c0       	push   0xc002a3f5
c0022d69:	e8 1f f9 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022d6e:	8b b3 6c 01 00 00    	mov    esi,DWORD PTR [ebx+0x16c]
c0022d74:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0022d7a:	8d 56 02             	lea    edx,[esi+0x2]
c0022d7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022d83:	c1 e2 07             	shl    edx,0x7
c0022d86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022d8a:	89 f0                	mov    eax,esi
c0022d8c:	c1 e0 07             	shl    eax,0x7
c0022d8f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0022d93:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0022d9d:	59                   	pop    ecx
c0022d9e:	58                   	pop    eax
c0022d9f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0022da3:	52                   	push   edx
c0022da4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022da8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0022dae:	e8 23 f0 ff ff       	call   c0021dd6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0022db3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022db7:	58                   	pop    eax
c0022db8:	5a                   	pop    edx
c0022db9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0022dbd:	68 2a a4 02 c0       	push   0xc002a42a
c0022dc2:	e8 c6 f8 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022dc7:	83 c4 10             	add    esp,0x10
c0022dca:	b8 01 00 00 00       	mov    eax,0x1
c0022dcf:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0022dd4:	0f 84 84 01 00 00    	je     c0022f5e <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0022dda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022dde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022de2:	8b 12                	mov    edx,DWORD PTR [edx]
c0022de4:	c1 e0 05             	shl    eax,0x5
c0022de7:	01 c2                	add    edx,eax
c0022de9:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0022dec:	8a 02                	mov    al,BYTE PTR [edx]
c0022dee:	83 e0 a0             	and    eax,0xffffffa0
c0022df1:	83 c8 05             	or     eax,0x5
c0022df4:	88 02                	mov    BYTE PTR [edx],al
c0022df6:	8d 45 ff             	lea    eax,[ebp-0x1]
c0022df9:	c1 f8 04             	sar    eax,0x4
c0022dfc:	40                   	inc    eax
c0022dfd:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0022e01:	0f b7 c0             	movzx  eax,ax
c0022e04:	52                   	push   edx
c0022e05:	83 c0 08             	add    eax,0x8
c0022e08:	c1 e0 04             	shl    eax,0x4
c0022e0b:	50                   	push   eax
c0022e0c:	6a 00                	push   0x0
c0022e0e:	53                   	push   ebx
c0022e0f:	e8 67 d8 fd ff       	call   c000067b <memset>
c0022e14:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022e18:	89 ea                	mov    edx,ebp
c0022e1a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0022e20:	c1 e2 09             	shl    edx,0x9
c0022e23:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0022e29:	4a                   	dec    edx
c0022e2a:	25 00 00 c0 ff       	and    eax,0xffc00000
c0022e2f:	81 e2 ff ff 3f 00    	and    edx,0x3fffff
c0022e35:	83 c4 10             	add    esp,0x10
c0022e38:	09 d0                	or     eax,edx
c0022e3a:	ba 01 00 00 00       	mov    edx,0x1
c0022e3f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0022e45:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0022e4c:	89 d0                	mov    eax,edx
c0022e4e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022e52:	c1 e0 04             	shl    eax,0x4
c0022e55:	89 8c 03 80 00 00 00 	mov    DWORD PTR [ebx+eax*1+0x80],ecx
c0022e5c:	8d 42 08             	lea    eax,[edx+0x8]
c0022e5f:	42                   	inc    edx
c0022e60:	c1 e0 04             	shl    eax,0x4
c0022e63:	01 d8                	add    eax,ebx
c0022e65:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0022e68:	81 e1 00 00 c0 7f    	and    ecx,0x7fc00000
c0022e6e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022e74:	83 fa 10             	cmp    edx,0x10
c0022e77:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0022e7a:	75 d0                	jne    c0022e4c <SATA::access(unsigned long long, int, void*, bool)+0x11e>
c0022e7c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0022e7f:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0022e83:	66 25 00 7f          	and    ax,0x7f00
c0022e87:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0022e8b:	66 0d 27 80          	or     ax,0x8027
c0022e8f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0022e93:	66 89 03             	mov    WORD PTR [ebx],ax
c0022e96:	66 89 6b 0c          	mov    WORD PTR [ebx+0xc],bp
c0022e9a:	89 f8                	mov    eax,edi
c0022e9c:	31 d2                	xor    edx,edx
c0022e9e:	c1 e8 10             	shr    eax,0x10
c0022ea1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0022ea4:	89 f8                	mov    eax,edi
c0022ea6:	c1 e8 18             	shr    eax,0x18
c0022ea9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0022eac:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0022eb0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0022eb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022eb7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0022eba:	89 f0                	mov    eax,esi
c0022ebc:	c1 e0 07             	shl    eax,0x7
c0022ebf:	03 04 24             	add    eax,DWORD PTR [esp]
c0022ec2:	8b 88 20 01 00 00    	mov    ecx,DWORD PTR [eax+0x120]
c0022ec8:	80 e1 88             	and    cl,0x88
c0022ecb:	74 0b                	je     c0022ed8 <SATA::access(unsigned long long, int, void*, bool)+0x1aa>
c0022ecd:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0022ed3:	74 0b                	je     c0022ee0 <SATA::access(unsigned long long, int, void*, bool)+0x1b2>
c0022ed5:	42                   	inc    edx
c0022ed6:	eb ea                	jmp    c0022ec2 <SATA::access(unsigned long long, int, void*, bool)+0x194>
c0022ed8:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0022ede:	75 0a                	jne    c0022eea <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c0022ee0:	83 ec 0c             	sub    esp,0xc
c0022ee3:	68 33 a4 02 c0       	push   0xc002a433
c0022ee8:	eb 67                	jmp    c0022f51 <SATA::access(unsigned long long, int, void*, bool)+0x223>
c0022eea:	bb 01 00 00 00       	mov    ebx,0x1
c0022eef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022ef3:	c1 e6 07             	shl    esi,0x7
c0022ef6:	d3 e3                	shl    ebx,cl
c0022ef8:	03 34 24             	add    esi,DWORD PTR [esp]
c0022efb:	89 98 38 01 00 00    	mov    DWORD PTR [eax+0x138],ebx
c0022f01:	83 ec 0c             	sub    esp,0xc
c0022f04:	68 41 a4 02 c0       	push   0xc002a441
c0022f09:	e8 7f f7 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022f0e:	8b 86 38 01 00 00    	mov    eax,DWORD PTR [esi+0x138]
c0022f14:	83 c4 10             	add    esp,0x10
c0022f17:	85 c3                	test   ebx,eax
c0022f19:	74 20                	je     c0022f3b <SATA::access(unsigned long long, int, void*, bool)+0x20d>
c0022f1b:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0022f21:	0f ba e0 1e          	bt     eax,0x1e
c0022f25:	73 da                	jae    c0022f01 <SATA::access(unsigned long long, int, void*, bool)+0x1d3>
c0022f27:	83 ec 0c             	sub    esp,0xc
c0022f2a:	68 4e a4 02 c0       	push   0xc002a44e
c0022f2f:	e8 23 62 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0022f34:	83 c4 10             	add    esp,0x10
c0022f37:	31 c0                	xor    eax,eax
c0022f39:	eb 23                	jmp    c0022f5e <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0022f3b:	8b 96 10 01 00 00    	mov    edx,DWORD PTR [esi+0x110]
c0022f41:	31 c0                	xor    eax,eax
c0022f43:	0f ba e2 1e          	bt     edx,0x1e
c0022f47:	73 15                	jae    c0022f5e <SATA::access(unsigned long long, int, void*, bool)+0x230>
c0022f49:	83 ec 0c             	sub    esp,0xc
c0022f4c:	68 4e a4 02 c0       	push   0xc002a44e
c0022f51:	e8 01 62 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0022f56:	83 c4 10             	add    esp,0x10
c0022f59:	b8 01 00 00 00       	mov    eax,0x1
c0022f5e:	83 c4 1c             	add    esp,0x1c
c0022f61:	5b                   	pop    ebx
c0022f62:	5e                   	pop    esi
c0022f63:	5f                   	pop    edi
c0022f64:	5d                   	pop    ebp
c0022f65:	c3                   	ret    

c0022f66 <SATA::read(unsigned long long, int, void*)>:
c0022f66:	57                   	push   edi
c0022f67:	b8 04 00 00 00       	mov    eax,0x4
c0022f6c:	56                   	push   esi
c0022f6d:	53                   	push   ebx
c0022f6e:	83 ec 10             	sub    esp,0x10
c0022f71:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022f75:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022f79:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022f7c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022f80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022f84:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022f8a:	77 3b                	ja     c0022fc7 <SATA::read(unsigned long long, int, void*)+0x61>
c0022f8c:	b8 06 00 00 00       	mov    eax,0x6
c0022f91:	85 d2                	test   edx,edx
c0022f93:	74 32                	je     c0022fc7 <SATA::read(unsigned long long, int, void*)+0x61>
c0022f95:	50                   	push   eax
c0022f96:	50                   	push   eax
c0022f97:	6a 00                	push   0x0
c0022f99:	52                   	push   edx
c0022f9a:	53                   	push   ebx
c0022f9b:	57                   	push   edi
c0022f9c:	56                   	push   esi
c0022f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fa1:	e8 88 fd ff ff       	call   c0022d2e <SATA::access(unsigned long long, int, void*, bool)>
c0022fa6:	83 c4 20             	add    esp,0x20
c0022fa9:	85 c0                	test   eax,eax
c0022fab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022faf:	75 11                	jne    c0022fc2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0022fb1:	01 1d 08 db 02 c0    	add    DWORD PTR ds:0xc002db08,ebx
c0022fb7:	e8 3a d5 fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c0022fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022fc0:	eb 05                	jmp    c0022fc7 <SATA::read(unsigned long long, int, void*)+0x61>
c0022fc2:	b8 01 00 00 00       	mov    eax,0x1
c0022fc7:	83 c4 10             	add    esp,0x10
c0022fca:	5b                   	pop    ebx
c0022fcb:	5e                   	pop    esi
c0022fcc:	5f                   	pop    edi
c0022fcd:	c3                   	ret    

c0022fce <SATA::write(unsigned long long, int, void*)>:
c0022fce:	57                   	push   edi
c0022fcf:	b8 04 00 00 00       	mov    eax,0x4
c0022fd4:	56                   	push   esi
c0022fd5:	53                   	push   ebx
c0022fd6:	83 ec 10             	sub    esp,0x10
c0022fd9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fdd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022fe1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022fe4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022fe8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022fec:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022ff2:	77 3b                	ja     c002302f <SATA::write(unsigned long long, int, void*)+0x61>
c0022ff4:	b8 06 00 00 00       	mov    eax,0x6
c0022ff9:	85 d2                	test   edx,edx
c0022ffb:	74 32                	je     c002302f <SATA::write(unsigned long long, int, void*)+0x61>
c0022ffd:	50                   	push   eax
c0022ffe:	50                   	push   eax
c0022fff:	6a 01                	push   0x1
c0023001:	52                   	push   edx
c0023002:	53                   	push   ebx
c0023003:	57                   	push   edi
c0023004:	56                   	push   esi
c0023005:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023009:	e8 20 fd ff ff       	call   c0022d2e <SATA::access(unsigned long long, int, void*, bool)>
c002300e:	83 c4 20             	add    esp,0x20
c0023011:	85 c0                	test   eax,eax
c0023013:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023017:	75 11                	jne    c002302a <SATA::write(unsigned long long, int, void*)+0x5c>
c0023019:	01 1d 04 db 02 c0    	add    DWORD PTR ds:0xc002db04,ebx
c002301f:	e8 d2 d4 fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c0023024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023028:	eb 05                	jmp    c002302f <SATA::write(unsigned long long, int, void*)+0x61>
c002302a:	b8 01 00 00 00       	mov    eax,0x1
c002302f:	83 c4 10             	add    esp,0x10
c0023032:	5b                   	pop    ebx
c0023033:	5e                   	pop    esi
c0023034:	5f                   	pop    edi
c0023035:	c3                   	ret    

c0023036 <AVX::open(int, int, void*)>:
c0023036:	83 ec 0c             	sub    esp,0xc
c0023039:	e8 3a 11 00 00       	call   c0024178 <avxInit>
c002303e:	b8 00 00 00 00       	mov    eax,0x0
c0023043:	83 c4 0c             	add    esp,0xc
c0023046:	c3                   	ret    
c0023047:	90                   	nop

c0023048 <AVX::close(int, int, void*)>:
c0023048:	83 ec 0c             	sub    esp,0xc
c002304b:	e8 29 11 00 00       	call   c0024179 <avxClose>
c0023050:	b8 00 00 00 00       	mov    eax,0x0
c0023055:	83 c4 0c             	add    esp,0xc
c0023058:	c3                   	ret    
c0023059:	90                   	nop

c002305a <AVX::available()>:
c002305a:	83 ec 0c             	sub    esp,0xc
c002305d:	e8 0e 11 00 00       	call   c0024170 <avxDetect>
c0023062:	85 c0                	test   eax,eax
c0023064:	0f 95 c0             	setne  al
c0023067:	83 c4 0c             	add    esp,0xc
c002306a:	c3                   	ret    
c002306b:	90                   	nop

c002306c <AVX::save(void*)>:
c002306c:	83 ec 0c             	sub    esp,0xc
c002306f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023073:	83 ec 0c             	sub    esp,0xc
c0023076:	50                   	push   eax
c0023077:	e8 fa 10 00 00       	call   c0024176 <avxSave>
c002307c:	83 c4 10             	add    esp,0x10
c002307f:	90                   	nop
c0023080:	83 c4 0c             	add    esp,0xc
c0023083:	c3                   	ret    

c0023084 <AVX::load(void*)>:
c0023084:	83 ec 0c             	sub    esp,0xc
c0023087:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002308b:	83 ec 0c             	sub    esp,0xc
c002308e:	50                   	push   eax
c002308f:	e8 e3 10 00 00       	call   c0024177 <avxLoad>
c0023094:	83 c4 10             	add    esp,0x10
c0023097:	90                   	nop
c0023098:	83 c4 0c             	add    esp,0xc
c002309b:	c3                   	ret    

c002309c <AVX::AVX()>:
c002309c:	83 ec 0c             	sub    esp,0xc
c002309f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a3:	83 ec 08             	sub    esp,0x8
c00230a6:	68 94 a4 02 c0       	push   0xc002a494
c00230ab:	50                   	push   eax
c00230ac:	e8 b9 0e ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c00230b1:	83 c4 10             	add    esp,0x10
c00230b4:	ba a4 a4 02 c0       	mov    edx,0xc002a4a4
c00230b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230bd:	89 10                	mov    DWORD PTR [eax],edx
c00230bf:	90                   	nop
c00230c0:	83 c4 0c             	add    esp,0xc
c00230c3:	c3                   	ret    

c00230c4 <MMX::available()>:
c00230c4:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00230c9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00230cf:	83 e0 20             	and    eax,0x20
c00230d2:	84 c0                	test   al,al
c00230d4:	0f 95 c0             	setne  al
c00230d7:	c3                   	ret    

c00230d8 <MMX::open(int, int, void*)>:
c00230d8:	83 ec 0c             	sub    esp,0xc
c00230db:	e8 1c 11 00 00       	call   c00241fc <x87Init>
c00230e0:	b8 00 00 00 00       	mov    eax,0x0
c00230e5:	83 c4 0c             	add    esp,0xc
c00230e8:	c3                   	ret    
c00230e9:	90                   	nop

c00230ea <MMX::close(int, int, void*)>:
c00230ea:	83 ec 0c             	sub    esp,0xc
c00230ed:	e8 24 11 00 00       	call   c0024216 <x87Close>
c00230f2:	b8 00 00 00 00       	mov    eax,0x0
c00230f7:	83 c4 0c             	add    esp,0xc
c00230fa:	c3                   	ret    
c00230fb:	90                   	nop

c00230fc <MMX::save(void*)>:
c00230fc:	83 ec 0c             	sub    esp,0xc
c00230ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023103:	83 ec 0c             	sub    esp,0xc
c0023106:	50                   	push   eax
c0023107:	e8 e5 10 00 00       	call   c00241f1 <x87Save>
c002310c:	83 c4 10             	add    esp,0x10
c002310f:	90                   	nop
c0023110:	83 c4 0c             	add    esp,0xc
c0023113:	c3                   	ret    

c0023114 <MMX::load(void*)>:
c0023114:	83 ec 0c             	sub    esp,0xc
c0023117:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002311b:	83 ec 0c             	sub    esp,0xc
c002311e:	50                   	push   eax
c002311f:	e8 d3 10 00 00       	call   c00241f7 <x87Load>
c0023124:	83 c4 10             	add    esp,0x10
c0023127:	90                   	nop
c0023128:	83 c4 0c             	add    esp,0xc
c002312b:	c3                   	ret    

c002312c <MMX::MMX()>:
c002312c:	83 ec 0c             	sub    esp,0xc
c002312f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023133:	83 ec 08             	sub    esp,0x8
c0023136:	68 d4 a4 02 c0       	push   0xc002a4d4
c002313b:	50                   	push   eax
c002313c:	e8 29 0e ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c0023141:	83 c4 10             	add    esp,0x10
c0023144:	ba e4 a4 02 c0       	mov    edx,0xc002a4e4
c0023149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002314d:	89 10                	mov    DWORD PTR [eax],edx
c002314f:	90                   	nop
c0023150:	83 c4 0c             	add    esp,0xc
c0023153:	c3                   	ret    

c0023154 <SSE::open(int, int, void*)>:
c0023154:	83 ec 0c             	sub    esp,0xc
c0023157:	e8 58 10 00 00       	call   c00241b4 <sseInit>
c002315c:	b8 00 00 00 00       	mov    eax,0x0
c0023161:	83 c4 0c             	add    esp,0xc
c0023164:	c3                   	ret    
c0023165:	90                   	nop

c0023166 <SSE::close(int, int, void*)>:
c0023166:	83 ec 0c             	sub    esp,0xc
c0023169:	e8 56 10 00 00       	call   c00241c4 <sseClose>
c002316e:	b8 00 00 00 00       	mov    eax,0x0
c0023173:	83 c4 0c             	add    esp,0xc
c0023176:	c3                   	ret    
c0023177:	90                   	nop

c0023178 <SSE::available()>:
c0023178:	83 ec 1c             	sub    esp,0x1c
c002317b:	e8 10 10 00 00       	call   c0024190 <absolutelyNoChanceInHell>
c0023180:	85 c0                	test   eax,eax
c0023182:	0f 95 c0             	setne  al
c0023185:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023189:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002318d:	83 c4 1c             	add    esp,0x1c
c0023190:	c3                   	ret    
c0023191:	90                   	nop

c0023192 <SSE::save(void*)>:
c0023192:	83 ec 0c             	sub    esp,0xc
c0023195:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023199:	83 ec 0c             	sub    esp,0xc
c002319c:	50                   	push   eax
c002319d:	e8 06 10 00 00       	call   c00241a8 <sseSave>
c00231a2:	83 c4 10             	add    esp,0x10
c00231a5:	90                   	nop
c00231a6:	83 c4 0c             	add    esp,0xc
c00231a9:	c3                   	ret    

c00231aa <SSE::load(void*)>:
c00231aa:	83 ec 0c             	sub    esp,0xc
c00231ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231b1:	83 ec 0c             	sub    esp,0xc
c00231b4:	50                   	push   eax
c00231b5:	e8 f4 0f 00 00       	call   c00241ae <sseLoad>
c00231ba:	83 c4 10             	add    esp,0x10
c00231bd:	90                   	nop
c00231be:	83 c4 0c             	add    esp,0xc
c00231c1:	c3                   	ret    

c00231c2 <SSE::SSE()>:
c00231c2:	83 ec 0c             	sub    esp,0xc
c00231c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231c9:	83 ec 08             	sub    esp,0x8
c00231cc:	68 14 a5 02 c0       	push   0xc002a514
c00231d1:	50                   	push   eax
c00231d2:	e8 93 0d ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c00231d7:	83 c4 10             	add    esp,0x10
c00231da:	ba 24 a5 02 c0       	mov    edx,0xc002a524
c00231df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e3:	89 10                	mov    DWORD PTR [eax],edx
c00231e5:	90                   	nop
c00231e6:	83 c4 0c             	add    esp,0xc
c00231e9:	c3                   	ret    

c00231ea <x87::open(int, int, void*)>:
c00231ea:	83 ec 0c             	sub    esp,0xc
c00231ed:	e8 0a 10 00 00       	call   c00241fc <x87Init>
c00231f2:	b8 00 00 00 00       	mov    eax,0x0
c00231f7:	83 c4 0c             	add    esp,0xc
c00231fa:	c3                   	ret    
c00231fb:	90                   	nop

c00231fc <x87::close(int, int, void*)>:
c00231fc:	83 ec 0c             	sub    esp,0xc
c00231ff:	e8 12 10 00 00       	call   c0024216 <x87Close>
c0023204:	b8 00 00 00 00       	mov    eax,0x0
c0023209:	83 c4 0c             	add    esp,0xc
c002320c:	c3                   	ret    
c002320d:	90                   	nop

c002320e <x87::available()>:
c002320e:	83 ec 0c             	sub    esp,0xc
c0023211:	e8 c0 0f 00 00       	call   c00241d6 <x87Detect>
c0023216:	85 c0                	test   eax,eax
c0023218:	0f 95 c0             	setne  al
c002321b:	83 c4 0c             	add    esp,0xc
c002321e:	c3                   	ret    
c002321f:	90                   	nop

c0023220 <x87::save(void*)>:
c0023220:	83 ec 0c             	sub    esp,0xc
c0023223:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023227:	83 ec 0c             	sub    esp,0xc
c002322a:	50                   	push   eax
c002322b:	e8 c1 0f 00 00       	call   c00241f1 <x87Save>
c0023230:	83 c4 10             	add    esp,0x10
c0023233:	90                   	nop
c0023234:	83 c4 0c             	add    esp,0xc
c0023237:	c3                   	ret    

c0023238 <x87::load(void*)>:
c0023238:	83 ec 0c             	sub    esp,0xc
c002323b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002323f:	83 ec 0c             	sub    esp,0xc
c0023242:	50                   	push   eax
c0023243:	e8 af 0f 00 00       	call   c00241f7 <x87Load>
c0023248:	83 c4 10             	add    esp,0x10
c002324b:	90                   	nop
c002324c:	83 c4 0c             	add    esp,0xc
c002324f:	c3                   	ret    

c0023250 <x87::x87()>:
c0023250:	83 ec 0c             	sub    esp,0xc
c0023253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023257:	83 ec 08             	sub    esp,0x8
c002325a:	68 54 a5 02 c0       	push   0xc002a554
c002325f:	50                   	push   eax
c0023260:	e8 05 0d ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c0023265:	83 c4 10             	add    esp,0x10
c0023268:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c002326d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023271:	89 10                	mov    DWORD PTR [eax],edx
c0023273:	90                   	nop
c0023274:	83 c4 0c             	add    esp,0xc
c0023277:	c3                   	ret    

c0023278 <APIC::disable()>:
c0023278:	90                   	nop
c0023279:	c3                   	ret    

c002327a <APIC::close(int, int, void*)>:
c002327a:	55                   	push   ebp
c002327b:	89 e5                	mov    ebp,esp
c002327d:	83 ec 08             	sub    esp,0x8
c0023280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023283:	8b 00                	mov    eax,DWORD PTR [eax]
c0023285:	83 c0 3c             	add    eax,0x3c
c0023288:	8b 00                	mov    eax,DWORD PTR [eax]
c002328a:	83 ec 0c             	sub    esp,0xc
c002328d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023290:	ff d0                	call   eax
c0023292:	83 c4 10             	add    esp,0x10
c0023295:	b8 00 00 00 00       	mov    eax,0x0
c002329a:	c9                   	leave  
c002329b:	c3                   	ret    

c002329c <IOAPIC::close(int, int, void*)>:
c002329c:	b8 00 00 00 00       	mov    eax,0x0
c00232a1:	c3                   	ret    

c00232a2 <APIC::io_wait()>:
c00232a2:	eb 00                	jmp    c00232a4 <APIC::io_wait()+0x2>
c00232a4:	eb 00                	jmp    c00232a6 <APIC::io_wait()+0x4>
c00232a6:	90                   	nop
c00232a7:	c3                   	ret    

c00232a8 <APIC::getBase()>:
c00232a8:	55                   	push   ebp
c00232a9:	89 e5                	mov    ebp,esp
c00232ab:	83 ec 18             	sub    esp,0x18
c00232ae:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00232b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00232b9:	83 e0 08             	and    eax,0x8
c00232bc:	84 c0                	test   al,al
c00232be:	75 07                	jne    c00232c7 <APIC::getBase()+0x1f>
c00232c0:	b8 00 00 00 00       	mov    eax,0x0
c00232c5:	eb 21                	jmp    c00232e8 <APIC::getBase()+0x40>
c00232c7:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c00232cc:	83 ec 08             	sub    esp,0x8
c00232cf:	6a 1b                	push   0x1b
c00232d1:	50                   	push   eax
c00232d2:	e8 91 b7 fe ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c00232d7:	83 c4 10             	add    esp,0x10
c00232da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00232dd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00232e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00232e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00232e8:	c9                   	leave  
c00232e9:	c3                   	ret    

c00232ea <APIC::eoi(unsigned char)>:
c00232ea:	55                   	push   ebp
c00232eb:	89 e5                	mov    ebp,esp
c00232ed:	83 ec 28             	sub    esp,0x28
c00232f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00232f3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00232f6:	83 ec 0c             	sub    esp,0xc
c00232f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00232fc:	e8 a7 ff ff ff       	call   c00232a8 <APIC::getBase()>
c0023301:	83 c4 10             	add    esp,0x10
c0023304:	05 b0 00 00 00       	add    eax,0xb0
c0023309:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002330c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002330f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0023315:	90                   	nop
c0023316:	c9                   	leave  
c0023317:	c3                   	ret    

c0023318 <APIC::open(int, int, void*)>:
c0023318:	55                   	push   ebp
c0023319:	89 e5                	mov    ebp,esp
c002331b:	57                   	push   edi
c002331c:	56                   	push   esi
c002331d:	53                   	push   ebx
c002331e:	83 ec 2c             	sub    esp,0x2c
c0023321:	83 ec 0c             	sub    esp,0xc
c0023324:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023327:	e8 7c ff ff ff       	call   c00232a8 <APIC::getBase()>
c002332c:	83 c4 10             	add    esp,0x10
c002332f:	89 c2                	mov    edx,eax
c0023331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023334:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002333a:	0f b6 f8             	movzx  edi,al
c002333d:	89 d0                	mov    eax,edx
c002333f:	ba 00 00 00 00       	mov    edx,0x0
c0023344:	89 c1                	mov    ecx,eax
c0023346:	80 e5 ff             	and    ch,0xff
c0023349:	89 cb                	mov    ebx,ecx
c002334b:	0f b6 f2             	movzx  esi,dl
c002334e:	89 d8                	mov    eax,ebx
c0023350:	89 f2                	mov    edx,esi
c0023352:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023355:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023358:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002335c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0023360:	83 e0 00             	and    eax,0x0
c0023363:	09 d0                	or     eax,edx
c0023365:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002336c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023372:	8d 50 01             	lea    edx,[eax+0x1]
c0023375:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023378:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002337e:	0f b6 d0             	movzx  edx,al
c0023381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023384:	83 c2 08             	add    edx,0x8
c0023387:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002338b:	0f b6 c9             	movzx  ecx,cl
c002338e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0023394:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0023398:	83 ec 0c             	sub    esp,0xc
c002339b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002339e:	e8 05 ff ff ff       	call   c00232a8 <APIC::getBase()>
c00233a3:	83 c4 10             	add    esp,0x10
c00233a6:	05 f0 00 00 00       	add    eax,0xf0
c00233ab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00233ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00233b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00233b3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00233b6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00233bd:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00233c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00233c7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00233ca:	89 10                	mov    DWORD PTR [eax],edx
c00233cc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00233d3:	a1 f0 c0 02 c0       	mov    eax,ds:0xc002c0f0
c00233d8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00233db:	7d 7c                	jge    c0023459 <APIC::open(int, int, void*)+0x141>
c00233dd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00233e0:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c00233e7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00233ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00233ed:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c00233f4:	c1 e8 08             	shr    eax,0x8
c00233f7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00233fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00233fe:	8b 04 85 00 c1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3f00]
c0023405:	c1 e8 18             	shr    eax,0x18
c0023408:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002340b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002340f:	75 40                	jne    c0023451 <APIC::open(int, int, void*)+0x139>
c0023411:	83 ec 0c             	sub    esp,0xc
c0023414:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023417:	e8 8c fe ff ff       	call   c00232a8 <APIC::getBase()>
c002341c:	83 c4 10             	add    esp,0x10
c002341f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0023423:	75 07                	jne    c002342c <APIC::open(int, int, void*)+0x114>
c0023425:	ba 60 03 00 00       	mov    edx,0x360
c002342a:	eb 05                	jmp    c0023431 <APIC::open(int, int, void*)+0x119>
c002342c:	ba 50 03 00 00       	mov    edx,0x350
c0023431:	01 d0                	add    eax,edx
c0023433:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0023436:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0023439:	8b 00                	mov    eax,DWORD PTR [eax]
c002343b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002343e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0023445:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0023449:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002344c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002344f:	89 10                	mov    DWORD PTR [eax],edx
c0023451:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0023454:	e9 7a ff ff ff       	jmp    c00233d3 <APIC::open(int, int, void*)+0xbb>
c0023459:	b8 00 00 00 00       	mov    eax,0x0
c002345e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023461:	5b                   	pop    ebx
c0023462:	5e                   	pop    esi
c0023463:	5f                   	pop    edi
c0023464:	5d                   	pop    ebp
c0023465:	c3                   	ret    

c0023466 <IOAPIC::IOAPIC()>:
c0023466:	83 ec 0c             	sub    esp,0xc
c0023469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346d:	83 ec 08             	sub    esp,0x8
c0023470:	68 94 a5 02 c0       	push   0xc002a594
c0023475:	50                   	push   eax
c0023476:	e8 f1 07 ff ff       	call   c0013c6c <Device::Device(char const*)>
c002347b:	83 c4 10             	add    esp,0x10
c002347e:	ba bc a6 02 c0       	mov    edx,0xc002a6bc
c0023483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023487:	89 10                	mov    DWORD PTR [eax],edx
c0023489:	90                   	nop
c002348a:	83 c4 0c             	add    esp,0xc
c002348d:	c3                   	ret    

c002348e <APIC::APIC()>:
c002348e:	53                   	push   ebx
c002348f:	83 ec 18             	sub    esp,0x18
c0023492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023496:	83 ec 08             	sub    esp,0x8
c0023499:	68 9c a5 02 c0       	push   0xc002a59c
c002349e:	50                   	push   eax
c002349f:	e8 20 0f ff ff       	call   c00143c4 <InterruptController::InterruptController(char const*)>
c00234a4:	83 c4 10             	add    esp,0x10
c00234a7:	ba 74 a6 02 c0       	mov    edx,0xc002a674
c00234ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00234b0:	89 10                	mov    DWORD PTR [eax],edx
c00234b2:	a0 60 db 02 c0       	mov    al,ds:0xc002db60
c00234b7:	83 f0 01             	xor    eax,0x1
c00234ba:	84 c0                	test   al,al
c00234bc:	0f 84 a1 00 00 00    	je     c0023563 <APIC::APIC()+0xd5>
c00234c2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00234c7:	a0 a0 c1 02 c0       	mov    al,ds:0xc002c1a0
c00234cc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00234d0:	0f 83 86 00 00 00    	jae    c002355c <APIC::APIC()+0xce>
c00234d6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00234de:	83 ec 0c             	sub    esp,0xc
c00234e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00234e5:	e8 d6 bf fe ff       	call   c000f4c0 <malloc>
c00234ea:	83 c4 10             	add    esp,0x10
c00234ed:	89 c3                	mov    ebx,eax
c00234ef:	83 ec 0c             	sub    esp,0xc
c00234f2:	53                   	push   ebx
c00234f3:	e8 6e ff ff ff       	call   c0023466 <IOAPIC::IOAPIC()>
c00234f8:	83 c4 10             	add    esp,0x10
c00234fb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00234ff:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0023504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023508:	89 14 85 40 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24c0],edx
c002350f:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c0023514:	40                   	inc    eax
c0023515:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c002351a:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c002351f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023525:	83 ec 08             	sub    esp,0x8
c0023528:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002352c:	50                   	push   eax
c002352d:	e8 4a 05 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0023532:	83 c4 10             	add    esp,0x10
c0023535:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023539:	8b 00                	mov    eax,DWORD PTR [eax]
c002353b:	83 c0 08             	add    eax,0x8
c002353e:	8b 00                	mov    eax,DWORD PTR [eax]
c0023540:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0023545:	6a 00                	push   0x0
c0023547:	6a 00                	push   0x0
c0023549:	52                   	push   edx
c002354a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002354e:	ff d0                	call   eax
c0023550:	83 c4 10             	add    esp,0x10
c0023553:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0023557:	e9 6b ff ff ff       	jmp    c00234c7 <APIC::APIC()+0x39>
c002355c:	c6 05 60 db 02 c0 01 	mov    BYTE PTR ds:0xc002db60,0x1
c0023563:	90                   	nop
c0023564:	83 c4 18             	add    esp,0x18
c0023567:	5b                   	pop    ebx
c0023568:	c3                   	ret    
c0023569:	90                   	nop

c002356a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002356a:	55                   	push   ebp
c002356b:	89 e5                	mov    ebp,esp
c002356d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023570:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023576:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0023579:	72 1d                	jb     c0023598 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002357b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002357e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0023584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023587:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002358d:	01 d0                	add    eax,edx
c002358f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0023592:	73 04                	jae    c0023598 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0023594:	b0 01                	mov    al,0x1
c0023596:	eb 02                	jmp    c002359a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0023598:	b0 00                	mov    al,0x0
c002359a:	5d                   	pop    ebp
c002359b:	c3                   	ret    

c002359c <IOAPIC::read(int)>:
c002359c:	55                   	push   ebp
c002359d:	89 e5                	mov    ebp,esp
c002359f:	83 ec 10             	sub    esp,0x10
c00235a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00235a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00235ab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00235ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00235b1:	0f b6 d0             	movzx  edx,al
c00235b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00235b7:	89 10                	mov    DWORD PTR [eax],edx
c00235b9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00235bc:	83 c0 10             	add    eax,0x10
c00235bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00235c1:	c9                   	leave  
c00235c2:	c3                   	ret    
c00235c3:	90                   	nop

c00235c4 <IOAPIC::open(int, int, void*)>:
c00235c4:	55                   	push   ebp
c00235c5:	89 e5                	mov    ebp,esp
c00235c7:	57                   	push   edi
c00235c8:	56                   	push   esi
c00235c9:	53                   	push   ebx
c00235ca:	83 ec 0c             	sub    esp,0xc
c00235cd:	83 ec 0c             	sub    esp,0xc
c00235d0:	68 c7 a5 02 c0       	push   0xc002a5c7
c00235d5:	e8 b3 f0 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00235da:	83 c4 10             	add    esp,0x10
c00235dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00235e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00235e3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00235e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00235ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00235f2:	8b 14 85 e0 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3e20]
c00235f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00235fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023605:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002360b:	8b 14 85 60 c2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3da0]
c0023612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023615:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002361b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002361e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0023624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023627:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002362d:	0f b6 f8             	movzx  edi,al
c0023630:	89 d0                	mov    eax,edx
c0023632:	ba 00 00 00 00       	mov    edx,0x0
c0023637:	89 c1                	mov    ecx,eax
c0023639:	80 e5 ff             	and    ch,0xff
c002363c:	89 cb                	mov    ebx,ecx
c002363e:	0f b6 f2             	movzx  esi,dl
c0023641:	89 d8                	mov    eax,ebx
c0023643:	89 f2                	mov    edx,esi
c0023645:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023648:	8d 5f 08             	lea    ebx,[edi+0x8]
c002364b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002364f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0023653:	83 e0 00             	and    eax,0x0
c0023656:	09 d0                	or     eax,edx
c0023658:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002365c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002365f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023665:	8d 50 01             	lea    edx,[eax+0x1]
c0023668:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002366b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023671:	0f b6 d0             	movzx  edx,al
c0023674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023677:	83 c2 08             	add    edx,0x8
c002367a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002367e:	0f b6 c9             	movzx  ecx,cl
c0023681:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0023687:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002368b:	83 ec 08             	sub    esp,0x8
c002368e:	6a 01                	push   0x1
c0023690:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023693:	e8 04 ff ff ff       	call   c002359c <IOAPIC::read(int)>
c0023698:	83 c4 10             	add    esp,0x10
c002369b:	c1 f8 10             	sar    eax,0x10
c002369e:	0f b6 c0             	movzx  eax,al
c00236a1:	8d 50 01             	lea    edx,[eax+0x1]
c00236a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00236a7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00236ad:	b8 00 00 00 00       	mov    eax,0x0
c00236b2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00236b5:	5b                   	pop    ebx
c00236b6:	5e                   	pop    esi
c00236b7:	5f                   	pop    edi
c00236b8:	5d                   	pop    ebp
c00236b9:	c3                   	ret    

c00236ba <IOAPIC::write(int, int)>:
c00236ba:	55                   	push   ebp
c00236bb:	89 e5                	mov    ebp,esp
c00236bd:	83 ec 10             	sub    esp,0x10
c00236c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00236c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00236c9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00236cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00236cf:	0f b6 d0             	movzx  edx,al
c00236d2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00236d5:	89 10                	mov    DWORD PTR [eax],edx
c00236d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00236da:	8d 50 10             	lea    edx,[eax+0x10]
c00236dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00236e0:	89 02                	mov    DWORD PTR [edx],eax
c00236e2:	90                   	nop
c00236e3:	c9                   	leave  
c00236e4:	c3                   	ret    
c00236e5:	90                   	nop

c00236e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00236e6:	55                   	push   ebp
c00236e7:	89 e5                	mov    ebp,esp
c00236e9:	53                   	push   ebx
c00236ea:	83 ec 2c             	sub    esp,0x2c
c00236ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00236f0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00236f3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00236f6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00236f9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00236fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00236ff:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023702:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023705:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023708:	88 d8                	mov    al,bl
c002370a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002370d:	88 c8                	mov    al,cl
c002370f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0023712:	88 d0                	mov    al,dl
c0023714:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0023717:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002371b:	83 c0 08             	add    eax,0x8
c002371e:	01 c0                	add    eax,eax
c0023720:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023723:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023727:	83 c0 08             	add    eax,0x8
c002372a:	01 c0                	add    eax,eax
c002372c:	40                   	inc    eax
c002372d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023730:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023733:	50                   	push   eax
c0023734:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023737:	e8 60 fe ff ff       	call   c002359c <IOAPIC::read(int)>
c002373c:	83 c4 08             	add    esp,0x8
c002373f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023742:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0023749:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002374c:	c1 e0 18             	shl    eax,0x18
c002374f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0023752:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023755:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023758:	52                   	push   edx
c0023759:	50                   	push   eax
c002375a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002375d:	e8 58 ff ff ff       	call   c00236ba <IOAPIC::write(int, int)>
c0023762:	83 c4 0c             	add    esp,0xc
c0023765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023768:	50                   	push   eax
c0023769:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002376c:	e8 2b fe ff ff       	call   c002359c <IOAPIC::read(int)>
c0023771:	83 c4 08             	add    esp,0x8
c0023774:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0023777:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002377e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0023785:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002378c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0023790:	74 09                	je     c002379b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0023792:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0023799:	eb 07                	jmp    c00237a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002379b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00237a2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00237a6:	74 09                	je     c00237b1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00237a8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00237af:	eb 07                	jmp    c00237b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00237b1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00237b8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00237bf:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00237c3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00237c6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00237c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237cc:	52                   	push   edx
c00237cd:	50                   	push   eax
c00237ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00237d1:	e8 e4 fe ff ff       	call   c00236ba <IOAPIC::write(int, int)>
c00237d6:	83 c4 0c             	add    esp,0xc
c00237d9:	90                   	nop
c00237da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00237dd:	c9                   	leave  
c00237de:	c3                   	ret    
c00237df:	90                   	nop

c00237e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00237e0:	55                   	push   ebp
c00237e1:	89 e5                	mov    ebp,esp
c00237e3:	57                   	push   edi
c00237e4:	56                   	push   esi
c00237e5:	53                   	push   ebx
c00237e6:	83 ec 2c             	sub    esp,0x2c
c00237e9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00237ec:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00237ef:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00237f3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00237f7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00237fb:	74 5a                	je     c0023857 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00237fd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0023801:	7f 44                	jg     c0023847 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0023803:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023806:	05 20 ab 02 c0       	add    eax,0xc002ab20
c002380b:	8a 00                	mov    al,BYTE PTR [eax]
c002380d:	0f b6 c0             	movzx  eax,al
c0023810:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023813:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023816:	66 8b 84 00 80 c1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd3e80]
c002381e:	0f b7 c0             	movzx  eax,ax
c0023821:	83 e0 02             	and    eax,0x2
c0023824:	85 c0                	test   eax,eax
c0023826:	74 04                	je     c002382c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0023828:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002382c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002382f:	66 8b 84 00 80 c1 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd3e80]
c0023837:	0f b7 c0             	movzx  eax,ax
c002383a:	83 e0 08             	and    eax,0x8
c002383d:	85 c0                	test   eax,eax
c002383f:	74 16                	je     c0023857 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023841:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0023845:	eb 10                	jmp    c0023857 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023847:	83 ec 0c             	sub    esp,0xc
c002384a:	68 d8 a5 02 c0       	push   0xc002a5d8
c002384f:	e8 03 59 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023854:	83 c4 10             	add    esp,0x10
c0023857:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002385b:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c0023860:	83 ec 08             	sub    esp,0x8
c0023863:	50                   	push   eax
c0023864:	68 10 a6 02 c0       	push   0xc002a610
c0023869:	e8 1f ee fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c002386e:	83 c4 10             	add    esp,0x10
c0023871:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0023878:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c002387d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0023880:	7d 67                	jge    c00238e9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0023882:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023885:	8b 04 85 40 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd24c0]
c002388c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002388f:	83 ec 08             	sub    esp,0x8
c0023892:	52                   	push   edx
c0023893:	50                   	push   eax
c0023894:	e8 d1 fc ff ff       	call   c002356a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0023899:	83 c4 10             	add    esp,0x10
c002389c:	84 c0                	test   al,al
c002389e:	74 44                	je     c00238e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00238a0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00238a3:	8b 1c 85 40 db 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd24c0]
c00238aa:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00238ae:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00238b1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00238b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238b8:	83 c0 20             	add    eax,0x20
c00238bb:	0f b6 f0             	movzx  esi,al
c00238be:	b8 00 00 00 00       	mov    eax,0x0
c00238c3:	99                   	cdq    
c00238c4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00238c7:	0f b6 c9             	movzx  ecx,cl
c00238ca:	83 ec 04             	sub    esp,0x4
c00238cd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00238d0:	57                   	push   edi
c00238d1:	56                   	push   esi
c00238d2:	52                   	push   edx
c00238d3:	50                   	push   eax
c00238d4:	51                   	push   ecx
c00238d5:	53                   	push   ebx
c00238d6:	e8 0b fe ff ff       	call   c00236e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00238db:	83 c4 20             	add    esp,0x20
c00238de:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00238e2:	eb 05                	jmp    c00238e9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00238e4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00238e7:	eb 8f                	jmp    c0023878 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00238e9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00238ec:	83 f0 01             	xor    eax,0x1
c00238ef:	84 c0                	test   al,al
c00238f1:	74 10                	je     c0023903 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00238f3:	83 ec 0c             	sub    esp,0xc
c00238f6:	68 27 a6 02 c0       	push   0xc002a627
c00238fb:	e8 57 58 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023900:	83 c4 10             	add    esp,0x10
c0023903:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0023907:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002390e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0023912:	7f 65                	jg     c0023979 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0023914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023917:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002391a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023921:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023924:	01 ca                	add    edx,ecx
c0023926:	83 c2 54             	add    edx,0x54
c0023929:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002392d:	85 c0                	test   eax,eax
c002392f:	75 43                	jne    c0023974 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0023931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023934:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023937:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002393e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023941:	01 ca                	add    edx,ecx
c0023943:	8d 4a 54             	lea    ecx,[edx+0x54]
c0023946:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0023949:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002394d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023950:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023953:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002395a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002395d:	01 ca                	add    edx,ecx
c002395f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0023965:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023968:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002396c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002396f:	83 e8 20             	sub    eax,0x20
c0023972:	eb 1a                	jmp    c002398e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0023974:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0023977:	eb 95                	jmp    c002390e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0023979:	83 ec 0c             	sub    esp,0xc
c002397c:	68 34 a6 02 c0       	push   0xc002a634
c0023981:	e8 d1 57 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023986:	83 c4 10             	add    esp,0x10
c0023989:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002398e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023991:	5b                   	pop    ebx
c0023992:	5e                   	pop    esi
c0023993:	5f                   	pop    edi
c0023994:	5d                   	pop    ebp
c0023995:	c3                   	ret    

c0023996 <PIC::disable()>:
c0023996:	55                   	push   ebp
c0023997:	89 e5                	mov    ebp,esp
c0023999:	83 ec 10             	sub    esp,0x10
c002399c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00239a2:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00239a6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00239a9:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00239ad:	ee                   	out    dx,al
c00239ae:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00239b4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00239b8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00239bb:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00239bf:	ee                   	out    dx,al
c00239c0:	90                   	nop
c00239c1:	c9                   	leave  
c00239c2:	c3                   	ret    
c00239c3:	90                   	nop

c00239c4 <PIC::close(int, int, void*)>:
c00239c4:	55                   	push   ebp
c00239c5:	89 e5                	mov    ebp,esp
c00239c7:	83 ec 08             	sub    esp,0x8
c00239ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00239cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00239cf:	83 c0 3c             	add    eax,0x3c
c00239d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00239d4:	83 ec 0c             	sub    esp,0xc
c00239d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00239da:	ff d0                	call   eax
c00239dc:	83 c4 10             	add    esp,0x10
c00239df:	b8 00 00 00 00       	mov    eax,0x0
c00239e4:	c9                   	leave  
c00239e5:	c3                   	ret    

c00239e6 <PIC::PIC()>:
c00239e6:	83 ec 0c             	sub    esp,0xc
c00239e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239ed:	83 ec 08             	sub    esp,0x8
c00239f0:	68 e0 a6 02 c0       	push   0xc002a6e0
c00239f5:	50                   	push   eax
c00239f6:	e8 c9 09 ff ff       	call   c00143c4 <InterruptController::InterruptController(char const*)>
c00239fb:	83 c4 10             	add    esp,0x10
c00239fe:	ba 0c a7 02 c0       	mov    edx,0xc002a70c
c0023a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a07:	89 10                	mov    DWORD PTR [eax],edx
c0023a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023a13:	0f b6 d0             	movzx  edx,al
c0023a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a1a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0023a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023a2b:	0f b6 d0             	movzx  edx,al
c0023a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a32:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0023a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023a41:	8d 50 01             	lea    edx,[eax+0x1]
c0023a44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023a48:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023a4e:	0f b6 d0             	movzx  edx,al
c0023a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a55:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023a59:	83 e1 3f             	and    ecx,0x3f
c0023a5c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a64:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023a6a:	0f b6 d0             	movzx  edx,al
c0023a6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a71:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0023a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023a82:	0f b6 d0             	movzx  edx,al
c0023a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a89:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0023a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a92:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023a98:	8d 50 01             	lea    edx,[eax+0x1]
c0023a9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023a9f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023aa5:	0f b6 d0             	movzx  edx,al
c0023aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aac:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023ab0:	83 e1 3f             	and    ecx,0x3f
c0023ab3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023ab7:	90                   	nop
c0023ab8:	83 c4 0c             	add    esp,0xc
c0023abb:	c3                   	ret    

c0023abc <PIC::ioWait()>:
c0023abc:	eb 00                	jmp    c0023abe <PIC::ioWait()+0x2>
c0023abe:	eb 00                	jmp    c0023ac0 <PIC::ioWait()+0x4>
c0023ac0:	90                   	nop
c0023ac1:	c3                   	ret    

c0023ac2 <PIC::getIRQReg(int)>:
c0023ac2:	55                   	push   ebp
c0023ac3:	89 e5                	mov    ebp,esp
c0023ac5:	83 ec 10             	sub    esp,0x10
c0023ac8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023acb:	0f b6 c0             	movzx  eax,al
c0023ace:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023ad4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0023ad7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023ada:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023ade:	ee                   	out    dx,al
c0023adf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023ae2:	0f b6 c0             	movzx  eax,al
c0023ae5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023aeb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0023aee:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023af1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023af5:	ee                   	out    dx,al
c0023af6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0023afc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0023b00:	89 c2                	mov    edx,eax
c0023b02:	ec                   	in     al,dx
c0023b03:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0023b06:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023b09:	0f b6 c0             	movzx  eax,al
c0023b0c:	c1 e0 08             	shl    eax,0x8
c0023b0f:	89 c1                	mov    ecx,eax
c0023b11:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0023b17:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0023b1b:	89 c2                	mov    edx,eax
c0023b1d:	ec                   	in     al,dx
c0023b1e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0023b21:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0023b24:	0f b6 c0             	movzx  eax,al
c0023b27:	09 c8                	or     eax,ecx
c0023b29:	c9                   	leave  
c0023b2a:	c3                   	ret    
c0023b2b:	90                   	nop

c0023b2c <PIC::eoi(unsigned char)>:
c0023b2c:	55                   	push   ebp
c0023b2d:	89 e5                	mov    ebp,esp
c0023b2f:	83 ec 14             	sub    esp,0x14
c0023b32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b35:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0023b38:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023b3c:	75 1e                	jne    c0023b5c <PIC::eoi(unsigned char)+0x30>
c0023b3e:	6a 0b                	push   0xb
c0023b40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023b43:	e8 7a ff ff ff       	call   c0023ac2 <PIC::getIRQReg(int)>
c0023b48:	83 c4 08             	add    esp,0x8
c0023b4b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0023b4f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0023b53:	25 80 00 00 00       	and    eax,0x80
c0023b58:	85 c0                	test   eax,eax
c0023b5a:	74 5f                	je     c0023bbb <PIC::eoi(unsigned char)+0x8f>
c0023b5c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0023b60:	75 2d                	jne    c0023b8f <PIC::eoi(unsigned char)+0x63>
c0023b62:	6a 0b                	push   0xb
c0023b64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023b67:	e8 56 ff ff ff       	call   c0023ac2 <PIC::getIRQReg(int)>
c0023b6c:	83 c4 08             	add    esp,0x8
c0023b6f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0023b73:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023b76:	66 85 c0             	test   ax,ax
c0023b79:	78 14                	js     c0023b8f <PIC::eoi(unsigned char)+0x63>
c0023b7b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0023b81:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0023b85:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023b88:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0023b8c:	ee                   	out    dx,al
c0023b8d:	eb 2d                	jmp    c0023bbc <PIC::eoi(unsigned char)+0x90>
c0023b8f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023b93:	76 12                	jbe    c0023ba7 <PIC::eoi(unsigned char)+0x7b>
c0023b95:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023b9b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0023b9f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023ba2:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023ba6:	ee                   	out    dx,al
c0023ba7:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023bad:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0023bb1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023bb4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023bb8:	ee                   	out    dx,al
c0023bb9:	eb 01                	jmp    c0023bbc <PIC::eoi(unsigned char)+0x90>
c0023bbb:	90                   	nop
c0023bbc:	c9                   	leave  
c0023bbd:	c3                   	ret    

c0023bbe <PIC::remap()>:
c0023bbe:	55                   	push   ebp
c0023bbf:	89 e5                	mov    ebp,esp
c0023bc1:	83 ec 48             	sub    esp,0x48
c0023bc4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0023bcb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0023bd2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0023bd8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0023bdb:	89 c2                	mov    edx,eax
c0023bdd:	ec                   	in     al,dx
c0023bde:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0023be1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0023be4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0023be7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0023bed:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0023bf0:	89 c2                	mov    edx,eax
c0023bf2:	ec                   	in     al,dx
c0023bf3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0023bf6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0023bf9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0023bfc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0023c02:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0023c06:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0023c09:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0023c0c:	ee                   	out    dx,al
c0023c0d:	83 ec 0c             	sub    esp,0xc
c0023c10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023c13:	e8 a4 fe ff ff       	call   c0023abc <PIC::ioWait()>
c0023c18:	83 c4 10             	add    esp,0x10
c0023c1b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0023c21:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0023c25:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0023c28:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0023c2b:	ee                   	out    dx,al
c0023c2c:	83 ec 0c             	sub    esp,0xc
c0023c2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023c32:	e8 85 fe ff ff       	call   c0023abc <PIC::ioWait()>
c0023c37:	83 c4 10             	add    esp,0x10
c0023c3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0023c3d:	0f b6 c0             	movzx  eax,al
c0023c40:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0023c46:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0023c49:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0023c4c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0023c4f:	ee                   	out    dx,al
c0023c50:	83 ec 0c             	sub    esp,0xc
c0023c53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023c56:	e8 61 fe ff ff       	call   c0023abc <PIC::ioWait()>
c0023c5b:	83 c4 10             	add    esp,0x10
c0023c5e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023c61:	0f b6 c0             	movzx  eax,al
c0023c64:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0023c6a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0023c6d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0023c70:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0023c73:	ee                   	out    dx,al
c0023c74:	83 ec 0c             	sub    esp,0xc
c0023c77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023c7a:	e8 3d fe ff ff       	call   c0023abc <PIC::ioWait()>
c0023c7f:	83 c4 10             	add    esp,0x10
c0023c82:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0023c88:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0023c8c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0023c8f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0023c92:	ee                   	out    dx,al
c0023c93:	83 ec 0c             	sub    esp,0xc
c0023c96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023c99:	e8 1e fe ff ff       	call   c0023abc <PIC::ioWait()>
c0023c9e:	83 c4 10             	add    esp,0x10
c0023ca1:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0023ca7:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0023cab:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0023cae:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023cb1:	ee                   	out    dx,al
c0023cb2:	83 ec 0c             	sub    esp,0xc
c0023cb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023cb8:	e8 ff fd ff ff       	call   c0023abc <PIC::ioWait()>
c0023cbd:	83 c4 10             	add    esp,0x10
c0023cc0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0023cc6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0023cca:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0023ccd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0023cd0:	ee                   	out    dx,al
c0023cd1:	83 ec 0c             	sub    esp,0xc
c0023cd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023cd7:	e8 e0 fd ff ff       	call   c0023abc <PIC::ioWait()>
c0023cdc:	83 c4 10             	add    esp,0x10
c0023cdf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0023ce5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0023ce9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0023cec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023cef:	ee                   	out    dx,al
c0023cf0:	83 ec 0c             	sub    esp,0xc
c0023cf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023cf6:	e8 c1 fd ff ff       	call   c0023abc <PIC::ioWait()>
c0023cfb:	83 c4 10             	add    esp,0x10
c0023cfe:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0023d02:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0023d08:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0023d0b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0023d0e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023d11:	ee                   	out    dx,al
c0023d12:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0023d16:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0023d1c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0023d1f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0023d22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0023d25:	ee                   	out    dx,al
c0023d26:	90                   	nop
c0023d27:	c9                   	leave  
c0023d28:	c3                   	ret    
c0023d29:	90                   	nop

c0023d2a <PIC::open(int, int, void*)>:
c0023d2a:	55                   	push   ebp
c0023d2b:	89 e5                	mov    ebp,esp
c0023d2d:	83 ec 18             	sub    esp,0x18
c0023d30:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0023d36:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0023d3a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023d3d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023d41:	ee                   	out    dx,al
c0023d42:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0023d48:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0023d4c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023d4f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023d53:	ee                   	out    dx,al
c0023d54:	83 ec 0c             	sub    esp,0xc
c0023d57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023d5a:	e8 5f fe ff ff       	call   c0023bbe <PIC::remap()>
c0023d5f:	83 c4 10             	add    esp,0x10
c0023d62:	b8 00 00 00 00       	mov    eax,0x0
c0023d67:	c9                   	leave  
c0023d68:	c3                   	ret    
c0023d69:	90                   	nop

c0023d6a <APICTimer::close(int, int, void*)>:
c0023d6a:	b8 00 00 00 00       	mov    eax,0x0
c0023d6f:	c3                   	ret    

c0023d70 <apicTimerHandler(regs*, void*)>:
c0023d70:	83 ec 0c             	sub    esp,0xc
c0023d73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0023d79:	99                   	cdq    
c0023d7a:	52                   	push   edx
c0023d7b:	50                   	push   eax
c0023d7c:	6a 00                	push   0x0
c0023d7e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0023d83:	e8 84 07 00 00       	call   c002450c <__udivdi3>
c0023d88:	83 c4 10             	add    esp,0x10
c0023d8b:	83 ec 08             	sub    esp,0x8
c0023d8e:	52                   	push   edx
c0023d8f:	50                   	push   eax
c0023d90:	e8 b4 24 ff ff       	call   c0016249 <timerHandler(unsigned long long)>
c0023d95:	83 c4 10             	add    esp,0x10
c0023d98:	90                   	nop
c0023d99:	83 c4 0c             	add    esp,0xc
c0023d9c:	c3                   	ret    
c0023d9d:	90                   	nop

c0023d9e <APICTimer::write(int)>:
c0023d9e:	53                   	push   ebx
c0023d9f:	83 ec 28             	sub    esp,0x28
c0023da2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023da6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023daa:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023db0:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0023db5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023dbb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023dc1:	83 ec 0c             	sub    esp,0xc
c0023dc4:	50                   	push   eax
c0023dc5:	e8 de f4 ff ff       	call   c00232a8 <APIC::getBase()>
c0023dca:	83 c4 10             	add    esp,0x10
c0023dcd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023dd1:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0023dd6:	8b 15 b4 be 02 c0    	mov    edx,DWORD PTR ds:0xc002beb4
c0023ddc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023de0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023de8:	05 e0 03 00 00       	add    eax,0x3e0
c0023ded:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0023df3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023df7:	05 80 03 00 00       	add    eax,0x380
c0023dfc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0023e02:	fb                   	sti    
c0023e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023e0b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0023e10:	83 d2 00             	adc    edx,0x0
c0023e13:	89 c1                	mov    ecx,eax
c0023e15:	89 d3                	mov    ebx,edx
c0023e17:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0023e1c:	8b 15 b4 be 02 c0    	mov    edx,DWORD PTR ds:0xc002beb4
c0023e22:	39 c8                	cmp    eax,ecx
c0023e24:	89 d0                	mov    eax,edx
c0023e26:	19 d8                	sbb    eax,ebx
c0023e28:	73 02                	jae    c0023e2c <APICTimer::write(int)+0x8e>
c0023e2a:	eb d7                	jmp    c0023e03 <APICTimer::write(int)+0x65>
c0023e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e30:	05 20 03 00 00       	add    eax,0x320
c0023e35:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0023e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e3f:	05 90 03 00 00       	add    eax,0x390
c0023e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0023e46:	f7 d0                	not    eax
c0023e48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e4c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023e54:	ba 00 00 00 00       	mov    edx,0x0
c0023e59:	f7 f3                	div    ebx
c0023e5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023e63:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023e69:	0d 00 00 02 00       	or     eax,0x20000
c0023e6e:	89 c2                	mov    edx,eax
c0023e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e74:	05 20 03 00 00       	add    eax,0x320
c0023e79:	89 10                	mov    DWORD PTR [eax],edx
c0023e7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e7f:	05 e0 03 00 00       	add    eax,0x3e0
c0023e84:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0023e8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023e8e:	05 80 03 00 00       	add    eax,0x380
c0023e93:	89 c2                	mov    edx,eax
c0023e95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e99:	89 02                	mov    DWORD PTR [edx],eax
c0023e9b:	90                   	nop
c0023e9c:	83 c4 28             	add    esp,0x28
c0023e9f:	5b                   	pop    ebx
c0023ea0:	c3                   	ret    
c0023ea1:	90                   	nop

c0023ea2 <APICTimer::open(int, int, void*)>:
c0023ea2:	57                   	push   edi
c0023ea3:	56                   	push   esi
c0023ea4:	53                   	push   ebx
c0023ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0023eab:	83 c0 24             	add    eax,0x24
c0023eae:	8b 00                	mov    eax,DWORD PTR [eax]
c0023eb0:	83 ec 08             	sub    esp,0x8
c0023eb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023eb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ebb:	ff d0                	call   eax
c0023ebd:	83 c4 10             	add    esp,0x10
c0023ec0:	a1 48 b8 02 c0       	mov    eax,ds:0xc002b848
c0023ec5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023ecb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0023ed1:	83 ec 0c             	sub    esp,0xc
c0023ed4:	50                   	push   eax
c0023ed5:	e8 ce f3 ff ff       	call   c00232a8 <APIC::getBase()>
c0023eda:	83 c4 10             	add    esp,0x10
c0023edd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0023ee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023eed:	0f b6 f8             	movzx  edi,al
c0023ef0:	89 d0                	mov    eax,edx
c0023ef2:	ba 00 00 00 00       	mov    edx,0x0
c0023ef7:	89 c1                	mov    ecx,eax
c0023ef9:	80 e5 ff             	and    ch,0xff
c0023efc:	89 cb                	mov    ebx,ecx
c0023efe:	0f b6 f2             	movzx  esi,dl
c0023f01:	89 d8                	mov    eax,ebx
c0023f03:	89 f2                	mov    edx,esi
c0023f05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023f09:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023f0c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023f10:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0023f14:	83 e0 00             	and    eax,0x0
c0023f17:	09 d0                	or     eax,edx
c0023f19:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f21:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023f27:	8d 50 01             	lea    edx,[eax+0x1]
c0023f2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023f2e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0023f34:	0f b6 d0             	movzx  edx,al
c0023f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f3b:	83 c2 08             	add    edx,0x8
c0023f3e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0023f42:	0f b6 c9             	movzx  ecx,cl
c0023f45:	81 c9 00 00 01 00    	or     ecx,0x10000
c0023f4b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0023f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023f57:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f65:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0023f6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023f6f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023f75:	83 ec 0c             	sub    esp,0xc
c0023f78:	51                   	push   ecx
c0023f79:	6a 01                	push   0x1
c0023f7b:	68 70 3d 02 c0       	push   0xc0023d70
c0023f80:	52                   	push   edx
c0023f81:	50                   	push   eax
c0023f82:	e8 79 fa fe ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f87:	83 c4 20             	add    esp,0x20
c0023f8a:	89 c2                	mov    edx,eax
c0023f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f90:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0023f96:	b8 00 00 00 00       	mov    eax,0x0
c0023f9b:	5b                   	pop    ebx
c0023f9c:	5e                   	pop    esi
c0023f9d:	5f                   	pop    edi
c0023f9e:	c3                   	ret    
c0023f9f:	90                   	nop

c0023fa0 <APICTimer::APICTimer()>:
c0023fa0:	83 ec 0c             	sub    esp,0xc
c0023fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fa7:	83 ec 08             	sub    esp,0x8
c0023faa:	68 4c a7 02 c0       	push   0xc002a74c
c0023faf:	50                   	push   eax
c0023fb0:	e8 05 22 ff ff       	call   c00161ba <Timer::Timer(char const*)>
c0023fb5:	83 c4 10             	add    esp,0x10
c0023fb8:	ba 60 a7 02 c0       	mov    edx,0xc002a760
c0023fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fc1:	89 10                	mov    DWORD PTR [eax],edx
c0023fc3:	90                   	nop
c0023fc4:	83 c4 0c             	add    esp,0xc
c0023fc7:	c3                   	ret    

c0023fc8 <PIT::write(int)>:
c0023fc8:	83 ec 10             	sub    esp,0x10
c0023fcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0023fd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023fd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023fdd:	a3 64 db 02 c0       	mov    ds:0xc002db64,eax
c0023fe2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0023fe7:	99                   	cdq    
c0023fe8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0023fec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ff0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0023ff7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0023ffc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024000:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024005:	ee                   	out    dx,al
c0024006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002400a:	0f b6 c0             	movzx  eax,al
c002400d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024014:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024018:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002401c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024021:	ee                   	out    dx,al
c0024022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024026:	c1 f8 08             	sar    eax,0x8
c0024029:	0f b6 c0             	movzx  eax,al
c002402c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024033:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024037:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002403b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024040:	ee                   	out    dx,al
c0024041:	90                   	nop
c0024042:	83 c4 10             	add    esp,0x10
c0024045:	c3                   	ret    

c0024046 <pitHandler(regs*, void*)>:
c0024046:	83 ec 0c             	sub    esp,0xc
c0024049:	a1 64 db 02 c0       	mov    eax,ds:0xc002db64
c002404e:	99                   	cdq    
c002404f:	52                   	push   edx
c0024050:	50                   	push   eax
c0024051:	6a 00                	push   0x0
c0024053:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024058:	e8 af 04 00 00       	call   c002450c <__udivdi3>
c002405d:	83 c4 10             	add    esp,0x10
c0024060:	83 ec 08             	sub    esp,0x8
c0024063:	52                   	push   edx
c0024064:	50                   	push   eax
c0024065:	e8 df 21 ff ff       	call   c0016249 <timerHandler(unsigned long long)>
c002406a:	83 c4 10             	add    esp,0x10
c002406d:	90                   	nop
c002406e:	83 c4 0c             	add    esp,0xc
c0024071:	c3                   	ret    

c0024072 <PIT::open(int, int, void*)>:
c0024072:	83 ec 0c             	sub    esp,0xc
c0024075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024079:	8b 00                	mov    eax,DWORD PTR [eax]
c002407b:	83 c0 24             	add    eax,0x24
c002407e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024080:	83 ec 08             	sub    esp,0x8
c0024083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024087:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002408b:	ff d0                	call   eax
c002408d:	83 c4 10             	add    esp,0x10
c0024090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024094:	83 ec 0c             	sub    esp,0xc
c0024097:	6a 00                	push   0x0
c0024099:	6a 01                	push   0x1
c002409b:	68 46 40 02 c0       	push   0xc0024046
c00240a0:	6a 00                	push   0x0
c00240a2:	50                   	push   eax
c00240a3:	e8 58 f9 fe ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00240a8:	83 c4 20             	add    esp,0x20
c00240ab:	89 c2                	mov    edx,eax
c00240ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240b1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00240b7:	b8 00 00 00 00       	mov    eax,0x0
c00240bc:	83 c4 0c             	add    esp,0xc
c00240bf:	c3                   	ret    

c00240c0 <PIT::close(int, int, void*)>:
c00240c0:	83 ec 0c             	sub    esp,0xc
c00240c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240c7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00240d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240d5:	6a 01                	push   0x1
c00240d7:	68 46 40 02 c0       	push   0xc0024046
c00240dc:	6a 00                	push   0x0
c00240de:	50                   	push   eax
c00240df:	e8 5a f9 fe ff       	call   c0013a3e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00240e4:	83 c4 10             	add    esp,0x10
c00240e7:	b8 00 00 00 00       	mov    eax,0x0
c00240ec:	83 c4 0c             	add    esp,0xc
c00240ef:	c3                   	ret    

c00240f0 <PIT::PIT()>:
c00240f0:	83 ec 0c             	sub    esp,0xc
c00240f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240f7:	83 ec 08             	sub    esp,0x8
c00240fa:	68 88 a7 02 c0       	push   0xc002a788
c00240ff:	50                   	push   eax
c0024100:	e8 b5 20 ff ff       	call   c00161ba <Timer::Timer(char const*)>
c0024105:	83 c4 10             	add    esp,0x10
c0024108:	ba b0 a7 02 c0       	mov    edx,0xc002a7b0
c002410d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024111:	89 10                	mov    DWORD PTR [eax],edx
c0024113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024117:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002411d:	0f b6 d0             	movzx  edx,al
c0024120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024124:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002412b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002412f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024135:	0f b6 d0             	movzx  edx,al
c0024138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002413c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0024141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024145:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002414b:	8d 50 01             	lea    edx,[eax+0x1]
c002414e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024152:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024158:	0f b6 d0             	movzx  edx,al
c002415b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002415f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024163:	83 e1 3f             	and    ecx,0x3f
c0024166:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002416a:	90                   	nop
c002416b:	83 c4 0c             	add    esp,0xc
c002416e:	c3                   	ret    
c002416f:	90                   	nop

c0024170 <avxDetect>:
c0024170:	b8 00 00 00 00       	mov    eax,0x0
c0024175:	c3                   	ret    

c0024176 <avxSave>:
c0024176:	c3                   	ret    

c0024177 <avxLoad>:
c0024177:	c3                   	ret    

c0024178 <avxInit>:
c0024178:	c3                   	ret    

c0024179 <avxClose>:
c0024179:	c3                   	ret    

c002417a <wouldSheSayYes>:
c002417a:	c3                   	ret    
c002417b:	49                   	dec    ecx
c002417c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0024180:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0024184:	75 20                	jne    c00241a6 <sseDetect.noSSE+0x1>
c0024186:	4e                   	dec    esi
c0024187:	79 61                	jns    c00241ea <x87Detect+0x14>
c0024189:	68 2e 2e 2e 00       	push   0x2e2e2e
c002418e:	66 90                	xchg   ax,ax

c0024190 <absolutelyNoChanceInHell>:
c0024190:	b8 01 00 00 00       	mov    eax,0x1
c0024195:	0f a2                	cpuid  
c0024197:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002419d:	74 06                	je     c00241a5 <sseDetect.noSSE>
c002419f:	b8 01 00 00 00       	mov    eax,0x1
c00241a4:	c3                   	ret    

c00241a5 <sseDetect.noSSE>:
c00241a5:	31 c0                	xor    eax,eax
c00241a7:	c3                   	ret    

c00241a8 <sseSave>:
c00241a8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00241ad:	c3                   	ret    

c00241ae <sseLoad>:
c00241ae:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00241b3:	c3                   	ret    

c00241b4 <sseInit>:
c00241b4:	e8 43 00 00 00       	call   c00241fc <x87Init>
c00241b9:	0f 20 e0             	mov    eax,cr4
c00241bc:	66 0d 00 06          	or     ax,0x600
c00241c0:	0f 22 e0             	mov    cr4,eax
c00241c3:	c3                   	ret    

c00241c4 <sseClose>:
c00241c4:	c3                   	ret    
c00241c5:	66 90                	xchg   ax,ax
c00241c7:	66 90                	xchg   ax,ax
c00241c9:	66 90                	xchg   ax,ax
c00241cb:	66 90                	xchg   ax,ax
c00241cd:	66 90                	xchg   ax,ax
c00241cf:	90                   	nop

c00241d0 <value_37F>:
c00241d0:	7f 03                	jg     c00241d5 <value_37A+0x1>

c00241d2 <value_37E>:
c00241d2:	7e 03                	jle    c00241d7 <x87Detect+0x1>

c00241d4 <value_37A>:
c00241d4:	7a 03                	jp     c00241d9 <x87Detect+0x3>

c00241d6 <x87Detect>:
c00241d6:	b8 01 00 00 00       	mov    eax,0x1
c00241db:	0f a2                	cpuid  
c00241dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00241e3:	74 06                	je     c00241eb <x87Detect.nox87>
c00241e5:	b8 01 00 00 00       	mov    eax,0x1
c00241ea:	c3                   	ret    

c00241eb <x87Detect.nox87>:
c00241eb:	b8 00 00 00 00       	mov    eax,0x0
c00241f0:	c3                   	ret    

c00241f1 <x87Save>:
c00241f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00241f6:	c3                   	ret    

c00241f7 <x87Load>:
c00241f7:	dd 64 24 08          	frstor [esp+0x8]
c00241fb:	c3                   	ret    

c00241fc <x87Init>:
c00241fc:	9b db e3             	finit  
c00241ff:	0f 20 c0             	mov    eax,cr0
c0024202:	66 25 fb ff          	and    ax,0xfffb
c0024206:	66 0d 22 00          	or     ax,0x22
c002420a:	0f 22 c0             	mov    cr0,eax
c002420d:	0f 06                	clts   
c002420f:	d9 2d d4 41 02 c0    	fldcw  WORD PTR ds:0xc00241d4
c0024215:	c3                   	ret    

c0024216 <x87Close>:
c0024216:	c3                   	ret    
c0024217:	90                   	nop

c0024218 <__do_global_ctors_aux>:
c0024218:	a1 0c 6d 02 c0       	mov    eax,ds:0xc0026d0c
c002421d:	83 f8 ff             	cmp    eax,0xffffffff
c0024220:	74 1a                	je     c002423c <__do_global_ctors_aux+0x24>
c0024222:	55                   	push   ebp
c0024223:	89 e5                	mov    ebp,esp
c0024225:	53                   	push   ebx
c0024226:	52                   	push   edx
c0024227:	bb 0c 6d 02 c0       	mov    ebx,0xc0026d0c
c002422c:	ff d0                	call   eax
c002422e:	83 eb 04             	sub    ebx,0x4
c0024231:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024233:	83 f8 ff             	cmp    eax,0xffffffff
c0024236:	75 f4                	jne    c002422c <__do_global_ctors_aux+0x14>
c0024238:	58                   	pop    eax
c0024239:	5b                   	pop    ebx
c002423a:	5d                   	pop    ebp
c002423b:	c3                   	ret    
c002423c:	c3                   	ret    
c002423d:	66 90                	xchg   ax,ax
c002423f:	90                   	nop

c0024240 <__divdi3>:
c0024240:	55                   	push   ebp
c0024241:	57                   	push   edi
c0024242:	56                   	push   esi
c0024243:	53                   	push   ebx
c0024244:	83 ec 1c             	sub    esp,0x1c
c0024247:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002424b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002424f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024252:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024256:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002425a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002425e:	85 db                	test   ebx,ebx
c0024260:	0f 88 8e 00 00 00    	js     c00242f4 <__divdi3+0xb4>
c0024266:	89 dd                	mov    ebp,ebx
c0024268:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0024270:	89 d3                	mov    ebx,edx
c0024272:	85 d2                	test   edx,edx
c0024274:	79 0d                	jns    c0024283 <__divdi3+0x43>
c0024276:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002427a:	f7 d8                	neg    eax
c002427c:	83 d2 00             	adc    edx,0x0
c002427f:	f7 da                	neg    edx
c0024281:	89 d3                	mov    ebx,edx
c0024283:	89 c7                	mov    edi,eax
c0024285:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024288:	85 db                	test   ebx,ebx
c002428a:	75 48                	jne    c00242d4 <__divdi3+0x94>
c002428c:	39 ef                	cmp    edi,ebp
c002428e:	76 24                	jbe    c00242b4 <__divdi3+0x74>
c0024290:	89 ea                	mov    edx,ebp
c0024292:	f7 f7                	div    edi
c0024294:	89 c1                	mov    ecx,eax
c0024296:	31 f6                	xor    esi,esi
c0024298:	89 c8                	mov    eax,ecx
c002429a:	89 f2                	mov    edx,esi
c002429c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00242a0:	85 c9                	test   ecx,ecx
c00242a2:	74 07                	je     c00242ab <__divdi3+0x6b>
c00242a4:	f7 d8                	neg    eax
c00242a6:	83 d2 00             	adc    edx,0x0
c00242a9:	f7 da                	neg    edx
c00242ab:	83 c4 1c             	add    esp,0x1c
c00242ae:	5b                   	pop    ebx
c00242af:	5e                   	pop    esi
c00242b0:	5f                   	pop    edi
c00242b1:	5d                   	pop    ebp
c00242b2:	c3                   	ret    
c00242b3:	90                   	nop
c00242b4:	85 ff                	test   edi,edi
c00242b6:	75 0b                	jne    c00242c3 <__divdi3+0x83>
c00242b8:	b8 01 00 00 00       	mov    eax,0x1
c00242bd:	31 d2                	xor    edx,edx
c00242bf:	f7 f3                	div    ebx
c00242c1:	89 c7                	mov    edi,eax
c00242c3:	31 d2                	xor    edx,edx
c00242c5:	89 e8                	mov    eax,ebp
c00242c7:	f7 f7                	div    edi
c00242c9:	89 c6                	mov    esi,eax
c00242cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00242ce:	f7 f7                	div    edi
c00242d0:	89 c1                	mov    ecx,eax
c00242d2:	eb c4                	jmp    c0024298 <__divdi3+0x58>
c00242d4:	39 eb                	cmp    ebx,ebp
c00242d6:	77 3c                	ja     c0024314 <__divdi3+0xd4>
c00242d8:	0f bd f3             	bsr    esi,ebx
c00242db:	83 f6 1f             	xor    esi,0x1f
c00242de:	75 40                	jne    c0024320 <__divdi3+0xe0>
c00242e0:	39 eb                	cmp    ebx,ebp
c00242e2:	72 09                	jb     c00242ed <__divdi3+0xad>
c00242e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00242e7:	0f 87 97 00 00 00    	ja     c0024384 <__divdi3+0x144>
c00242ed:	b9 01 00 00 00       	mov    ecx,0x1
c00242f2:	eb a4                	jmp    c0024298 <__divdi3+0x58>
c00242f4:	f7 d9                	neg    ecx
c00242f6:	83 d3 00             	adc    ebx,0x0
c00242f9:	f7 db                	neg    ebx
c00242fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00242fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024302:	89 dd                	mov    ebp,ebx
c0024304:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002430c:	e9 5f ff ff ff       	jmp    c0024270 <__divdi3+0x30>
c0024311:	8d 76 00             	lea    esi,[esi+0x0]
c0024314:	31 f6                	xor    esi,esi
c0024316:	31 c9                	xor    ecx,ecx
c0024318:	e9 7b ff ff ff       	jmp    c0024298 <__divdi3+0x58>
c002431d:	8d 76 00             	lea    esi,[esi+0x0]
c0024320:	b8 20 00 00 00       	mov    eax,0x20
c0024325:	29 f0                	sub    eax,esi
c0024327:	89 f1                	mov    ecx,esi
c0024329:	d3 e3                	shl    ebx,cl
c002432b:	89 fa                	mov    edx,edi
c002432d:	88 c1                	mov    cl,al
c002432f:	d3 ea                	shr    edx,cl
c0024331:	09 da                	or     edx,ebx
c0024333:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024337:	89 f1                	mov    ecx,esi
c0024339:	d3 e7                	shl    edi,cl
c002433b:	89 eb                	mov    ebx,ebp
c002433d:	88 c1                	mov    cl,al
c002433f:	d3 eb                	shr    ebx,cl
c0024341:	89 f1                	mov    ecx,esi
c0024343:	d3 e5                	shl    ebp,cl
c0024345:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024348:	88 c1                	mov    cl,al
c002434a:	d3 ea                	shr    edx,cl
c002434c:	09 d5                	or     ebp,edx
c002434e:	89 e8                	mov    eax,ebp
c0024350:	89 da                	mov    edx,ebx
c0024352:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0024356:	89 d3                	mov    ebx,edx
c0024358:	89 c5                	mov    ebp,eax
c002435a:	f7 e7                	mul    edi
c002435c:	39 d3                	cmp    ebx,edx
c002435e:	72 18                	jb     c0024378 <__divdi3+0x138>
c0024360:	74 0a                	je     c002436c <__divdi3+0x12c>
c0024362:	89 e9                	mov    ecx,ebp
c0024364:	31 f6                	xor    esi,esi
c0024366:	e9 2d ff ff ff       	jmp    c0024298 <__divdi3+0x58>
c002436b:	90                   	nop
c002436c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002436f:	89 f1                	mov    ecx,esi
c0024371:	d3 e7                	shl    edi,cl
c0024373:	39 c7                	cmp    edi,eax
c0024375:	73 eb                	jae    c0024362 <__divdi3+0x122>
c0024377:	90                   	nop
c0024378:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002437b:	31 f6                	xor    esi,esi
c002437d:	e9 16 ff ff ff       	jmp    c0024298 <__divdi3+0x58>
c0024382:	66 90                	xchg   ax,ax
c0024384:	31 c9                	xor    ecx,ecx
c0024386:	e9 0d ff ff ff       	jmp    c0024298 <__divdi3+0x58>
c002438b:	90                   	nop

c002438c <__moddi3>:
c002438c:	55                   	push   ebp
c002438d:	57                   	push   edi
c002438e:	56                   	push   esi
c002438f:	53                   	push   ebx
c0024390:	83 ec 2c             	sub    esp,0x2c
c0024393:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024397:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002439b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002439f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00243a3:	85 db                	test   ebx,ebx
c00243a5:	0f 88 85 00 00 00    	js     c0024430 <__moddi3+0xa4>
c00243ab:	89 de                	mov    esi,ebx
c00243ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00243b5:	89 d7                	mov    edi,edx
c00243b7:	85 d2                	test   edx,edx
c00243b9:	79 09                	jns    c00243c4 <__moddi3+0x38>
c00243bb:	f7 d8                	neg    eax
c00243bd:	83 d2 00             	adc    edx,0x0
c00243c0:	f7 da                	neg    edx
c00243c2:	89 d7                	mov    edi,edx
c00243c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243c8:	89 cd                	mov    ebp,ecx
c00243ca:	85 ff                	test   edi,edi
c00243cc:	75 52                	jne    c0024420 <__moddi3+0x94>
c00243ce:	89 c3                	mov    ebx,eax
c00243d0:	39 f0                	cmp    eax,esi
c00243d2:	76 24                	jbe    c00243f8 <__moddi3+0x6c>
c00243d4:	89 c8                	mov    eax,ecx
c00243d6:	89 f2                	mov    edx,esi
c00243d8:	f7 f3                	div    ebx
c00243da:	89 d6                	mov    esi,edx
c00243dc:	89 f0                	mov    eax,esi
c00243de:	31 d2                	xor    edx,edx
c00243e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00243e4:	85 c9                	test   ecx,ecx
c00243e6:	74 07                	je     c00243ef <__moddi3+0x63>
c00243e8:	f7 d8                	neg    eax
c00243ea:	83 d2 00             	adc    edx,0x0
c00243ed:	f7 da                	neg    edx
c00243ef:	83 c4 2c             	add    esp,0x2c
c00243f2:	5b                   	pop    ebx
c00243f3:	5e                   	pop    esi
c00243f4:	5f                   	pop    edi
c00243f5:	5d                   	pop    ebp
c00243f6:	c3                   	ret    
c00243f7:	90                   	nop
c00243f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00243fc:	85 db                	test   ebx,ebx
c00243fe:	75 0d                	jne    c002440d <__moddi3+0x81>
c0024400:	b8 01 00 00 00       	mov    eax,0x1
c0024405:	31 d2                	xor    edx,edx
c0024407:	f7 f7                	div    edi
c0024409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002440d:	89 f0                	mov    eax,esi
c002440f:	31 d2                	xor    edx,edx
c0024411:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024415:	f7 f7                	div    edi
c0024417:	89 e8                	mov    eax,ebp
c0024419:	f7 f7                	div    edi
c002441b:	89 d6                	mov    esi,edx
c002441d:	eb bd                	jmp    c00243dc <__moddi3+0x50>
c002441f:	90                   	nop
c0024420:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024424:	39 f7                	cmp    edi,esi
c0024426:	76 20                	jbe    c0024448 <__moddi3+0xbc>
c0024428:	89 c8                	mov    eax,ecx
c002442a:	89 f2                	mov    edx,esi
c002442c:	eb b2                	jmp    c00243e0 <__moddi3+0x54>
c002442e:	66 90                	xchg   ax,ax
c0024430:	f7 d9                	neg    ecx
c0024432:	83 d3 00             	adc    ebx,0x0
c0024435:	f7 db                	neg    ebx
c0024437:	89 de                	mov    esi,ebx
c0024439:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0024441:	e9 6f ff ff ff       	jmp    c00243b5 <__moddi3+0x29>
c0024446:	66 90                	xchg   ax,ax
c0024448:	0f bd c7             	bsr    eax,edi
c002444b:	83 f0 1f             	xor    eax,0x1f
c002444e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024452:	75 24                	jne    c0024478 <__moddi3+0xec>
c0024454:	39 f7                	cmp    edi,esi
c0024456:	72 06                	jb     c002445e <__moddi3+0xd2>
c0024458:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002445c:	77 0c                	ja     c002446a <__moddi3+0xde>
c002445e:	89 e9                	mov    ecx,ebp
c0024460:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0024464:	19 fe                	sbb    esi,edi
c0024466:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002446a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002446e:	89 f2                	mov    edx,esi
c0024470:	e9 6b ff ff ff       	jmp    c00243e0 <__moddi3+0x54>
c0024475:	8d 76 00             	lea    esi,[esi+0x0]
c0024478:	b8 20 00 00 00       	mov    eax,0x20
c002447d:	89 c2                	mov    edx,eax
c002447f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024483:	29 da                	sub    edx,ebx
c0024485:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024489:	88 d9                	mov    cl,bl
c002448b:	d3 e7                	shl    edi,cl
c002448d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024491:	88 d1                	mov    cl,dl
c0024493:	d3 e8                	shr    eax,cl
c0024495:	09 c7                	or     edi,eax
c0024497:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002449b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002449f:	89 d8                	mov    eax,ebx
c00244a1:	88 d9                	mov    cl,bl
c00244a3:	d3 e7                	shl    edi,cl
c00244a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00244a9:	89 f3                	mov    ebx,esi
c00244ab:	88 d1                	mov    cl,dl
c00244ad:	d3 eb                	shr    ebx,cl
c00244af:	89 c7                	mov    edi,eax
c00244b1:	88 c1                	mov    cl,al
c00244b3:	d3 e6                	shl    esi,cl
c00244b5:	89 e8                	mov    eax,ebp
c00244b7:	88 d1                	mov    cl,dl
c00244b9:	d3 e8                	shr    eax,cl
c00244bb:	09 f0                	or     eax,esi
c00244bd:	89 f9                	mov    ecx,edi
c00244bf:	d3 e5                	shl    ebp,cl
c00244c1:	89 da                	mov    edx,ebx
c00244c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00244c7:	89 d3                	mov    ebx,edx
c00244c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00244cd:	89 c6                	mov    esi,eax
c00244cf:	89 d1                	mov    ecx,edx
c00244d1:	39 d3                	cmp    ebx,edx
c00244d3:	72 27                	jb     c00244fc <__moddi3+0x170>
c00244d5:	74 21                	je     c00244f8 <__moddi3+0x16c>
c00244d7:	29 f5                	sub    ebp,esi
c00244d9:	19 cb                	sbb    ebx,ecx
c00244db:	89 de                	mov    esi,ebx
c00244dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00244e1:	d3 e6                	shl    esi,cl
c00244e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00244e7:	89 f9                	mov    ecx,edi
c00244e9:	d3 ed                	shr    ebp,cl
c00244eb:	09 ee                	or     esi,ebp
c00244ed:	89 f0                	mov    eax,esi
c00244ef:	d3 eb                	shr    ebx,cl
c00244f1:	89 da                	mov    edx,ebx
c00244f3:	e9 e8 fe ff ff       	jmp    c00243e0 <__moddi3+0x54>
c00244f8:	39 c5                	cmp    ebp,eax
c00244fa:	73 db                	jae    c00244d7 <__moddi3+0x14b>
c00244fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024500:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0024504:	89 d1                	mov    ecx,edx
c0024506:	89 c6                	mov    esi,eax
c0024508:	eb cd                	jmp    c00244d7 <__moddi3+0x14b>
c002450a:	66 90                	xchg   ax,ax

c002450c <__udivdi3>:
c002450c:	55                   	push   ebp
c002450d:	57                   	push   edi
c002450e:	56                   	push   esi
c002450f:	53                   	push   ebx
c0024510:	83 ec 1c             	sub    esp,0x1c
c0024513:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024517:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002451b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002451f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024523:	85 d2                	test   edx,edx
c0024525:	75 41                	jne    c0024568 <__udivdi3+0x5c>
c0024527:	39 f7                	cmp    edi,esi
c0024529:	76 15                	jbe    c0024540 <__udivdi3+0x34>
c002452b:	89 e8                	mov    eax,ebp
c002452d:	89 f2                	mov    edx,esi
c002452f:	f7 f7                	div    edi
c0024531:	31 db                	xor    ebx,ebx
c0024533:	89 da                	mov    edx,ebx
c0024535:	83 c4 1c             	add    esp,0x1c
c0024538:	5b                   	pop    ebx
c0024539:	5e                   	pop    esi
c002453a:	5f                   	pop    edi
c002453b:	5d                   	pop    ebp
c002453c:	c3                   	ret    
c002453d:	8d 76 00             	lea    esi,[esi+0x0]
c0024540:	89 f9                	mov    ecx,edi
c0024542:	85 ff                	test   edi,edi
c0024544:	75 0b                	jne    c0024551 <__udivdi3+0x45>
c0024546:	b8 01 00 00 00       	mov    eax,0x1
c002454b:	31 d2                	xor    edx,edx
c002454d:	f7 f7                	div    edi
c002454f:	89 c1                	mov    ecx,eax
c0024551:	31 d2                	xor    edx,edx
c0024553:	89 f0                	mov    eax,esi
c0024555:	f7 f1                	div    ecx
c0024557:	89 c3                	mov    ebx,eax
c0024559:	89 e8                	mov    eax,ebp
c002455b:	f7 f1                	div    ecx
c002455d:	89 da                	mov    edx,ebx
c002455f:	83 c4 1c             	add    esp,0x1c
c0024562:	5b                   	pop    ebx
c0024563:	5e                   	pop    esi
c0024564:	5f                   	pop    edi
c0024565:	5d                   	pop    ebp
c0024566:	c3                   	ret    
c0024567:	90                   	nop
c0024568:	39 f2                	cmp    edx,esi
c002456a:	77 1c                	ja     c0024588 <__udivdi3+0x7c>
c002456c:	0f bd da             	bsr    ebx,edx
c002456f:	83 f3 1f             	xor    ebx,0x1f
c0024572:	75 24                	jne    c0024598 <__udivdi3+0x8c>
c0024574:	39 f2                	cmp    edx,esi
c0024576:	72 08                	jb     c0024580 <__udivdi3+0x74>
c0024578:	39 ef                	cmp    edi,ebp
c002457a:	0f 87 84 00 00 00    	ja     c0024604 <__udivdi3+0xf8>
c0024580:	b8 01 00 00 00       	mov    eax,0x1
c0024585:	eb ac                	jmp    c0024533 <__udivdi3+0x27>
c0024587:	90                   	nop
c0024588:	31 db                	xor    ebx,ebx
c002458a:	31 c0                	xor    eax,eax
c002458c:	89 da                	mov    edx,ebx
c002458e:	83 c4 1c             	add    esp,0x1c
c0024591:	5b                   	pop    ebx
c0024592:	5e                   	pop    esi
c0024593:	5f                   	pop    edi
c0024594:	5d                   	pop    ebp
c0024595:	c3                   	ret    
c0024596:	66 90                	xchg   ax,ax
c0024598:	b8 20 00 00 00       	mov    eax,0x20
c002459d:	29 d8                	sub    eax,ebx
c002459f:	88 d9                	mov    cl,bl
c00245a1:	d3 e2                	shl    edx,cl
c00245a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00245a7:	89 fa                	mov    edx,edi
c00245a9:	88 c1                	mov    cl,al
c00245ab:	d3 ea                	shr    edx,cl
c00245ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245b1:	09 d1                	or     ecx,edx
c00245b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00245b7:	88 d9                	mov    cl,bl
c00245b9:	d3 e7                	shl    edi,cl
c00245bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00245bf:	89 f7                	mov    edi,esi
c00245c1:	88 c1                	mov    cl,al
c00245c3:	d3 ef                	shr    edi,cl
c00245c5:	88 d9                	mov    cl,bl
c00245c7:	d3 e6                	shl    esi,cl
c00245c9:	89 ea                	mov    edx,ebp
c00245cb:	88 c1                	mov    cl,al
c00245cd:	d3 ea                	shr    edx,cl
c00245cf:	09 d6                	or     esi,edx
c00245d1:	89 f0                	mov    eax,esi
c00245d3:	89 fa                	mov    edx,edi
c00245d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00245d9:	89 d7                	mov    edi,edx
c00245db:	89 c6                	mov    esi,eax
c00245dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00245e1:	39 d7                	cmp    edi,edx
c00245e3:	72 13                	jb     c00245f8 <__udivdi3+0xec>
c00245e5:	74 09                	je     c00245f0 <__udivdi3+0xe4>
c00245e7:	89 f0                	mov    eax,esi
c00245e9:	31 db                	xor    ebx,ebx
c00245eb:	e9 43 ff ff ff       	jmp    c0024533 <__udivdi3+0x27>
c00245f0:	88 d9                	mov    cl,bl
c00245f2:	d3 e5                	shl    ebp,cl
c00245f4:	39 c5                	cmp    ebp,eax
c00245f6:	73 ef                	jae    c00245e7 <__udivdi3+0xdb>
c00245f8:	8d 46 ff             	lea    eax,[esi-0x1]
c00245fb:	31 db                	xor    ebx,ebx
c00245fd:	e9 31 ff ff ff       	jmp    c0024533 <__udivdi3+0x27>
c0024602:	66 90                	xchg   ax,ax
c0024604:	31 c0                	xor    eax,eax
c0024606:	e9 28 ff ff ff       	jmp    c0024533 <__udivdi3+0x27>
c002460b:	90                   	nop

c002460c <__umoddi3>:
c002460c:	55                   	push   ebp
c002460d:	57                   	push   edi
c002460e:	56                   	push   esi
c002460f:	53                   	push   ebx
c0024610:	83 ec 1c             	sub    esp,0x1c
c0024613:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024617:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002461b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002461f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024623:	89 da                	mov    edx,ebx
c0024625:	85 c0                	test   eax,eax
c0024627:	75 37                	jne    c0024660 <__umoddi3+0x54>
c0024629:	39 df                	cmp    edi,ebx
c002462b:	76 13                	jbe    c0024640 <__umoddi3+0x34>
c002462d:	89 f0                	mov    eax,esi
c002462f:	f7 f7                	div    edi
c0024631:	89 d0                	mov    eax,edx
c0024633:	31 d2                	xor    edx,edx
c0024635:	83 c4 1c             	add    esp,0x1c
c0024638:	5b                   	pop    ebx
c0024639:	5e                   	pop    esi
c002463a:	5f                   	pop    edi
c002463b:	5d                   	pop    ebp
c002463c:	c3                   	ret    
c002463d:	8d 76 00             	lea    esi,[esi+0x0]
c0024640:	89 fd                	mov    ebp,edi
c0024642:	85 ff                	test   edi,edi
c0024644:	75 0b                	jne    c0024651 <__umoddi3+0x45>
c0024646:	b8 01 00 00 00       	mov    eax,0x1
c002464b:	31 d2                	xor    edx,edx
c002464d:	f7 f7                	div    edi
c002464f:	89 c5                	mov    ebp,eax
c0024651:	89 d8                	mov    eax,ebx
c0024653:	31 d2                	xor    edx,edx
c0024655:	f7 f5                	div    ebp
c0024657:	89 f0                	mov    eax,esi
c0024659:	f7 f5                	div    ebp
c002465b:	89 d0                	mov    eax,edx
c002465d:	eb d4                	jmp    c0024633 <__umoddi3+0x27>
c002465f:	90                   	nop
c0024660:	89 f1                	mov    ecx,esi
c0024662:	39 d8                	cmp    eax,ebx
c0024664:	76 0a                	jbe    c0024670 <__umoddi3+0x64>
c0024666:	89 f0                	mov    eax,esi
c0024668:	83 c4 1c             	add    esp,0x1c
c002466b:	5b                   	pop    ebx
c002466c:	5e                   	pop    esi
c002466d:	5f                   	pop    edi
c002466e:	5d                   	pop    ebp
c002466f:	c3                   	ret    
c0024670:	0f bd e8             	bsr    ebp,eax
c0024673:	83 f5 1f             	xor    ebp,0x1f
c0024676:	75 1c                	jne    c0024694 <__umoddi3+0x88>
c0024678:	39 d8                	cmp    eax,ebx
c002467a:	72 04                	jb     c0024680 <__umoddi3+0x74>
c002467c:	39 f7                	cmp    edi,esi
c002467e:	77 08                	ja     c0024688 <__umoddi3+0x7c>
c0024680:	89 da                	mov    edx,ebx
c0024682:	29 fe                	sub    esi,edi
c0024684:	19 c2                	sbb    edx,eax
c0024686:	89 f1                	mov    ecx,esi
c0024688:	89 c8                	mov    eax,ecx
c002468a:	83 c4 1c             	add    esp,0x1c
c002468d:	5b                   	pop    ebx
c002468e:	5e                   	pop    esi
c002468f:	5f                   	pop    edi
c0024690:	5d                   	pop    ebp
c0024691:	c3                   	ret    
c0024692:	66 90                	xchg   ax,ax
c0024694:	ba 20 00 00 00       	mov    edx,0x20
c0024699:	29 ea                	sub    edx,ebp
c002469b:	89 e9                	mov    ecx,ebp
c002469d:	d3 e0                	shl    eax,cl
c002469f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00246a3:	89 f8                	mov    eax,edi
c00246a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00246a9:	88 d1                	mov    cl,dl
c00246ab:	d3 e8                	shr    eax,cl
c00246ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00246b1:	09 c1                	or     ecx,eax
c00246b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00246b7:	89 e9                	mov    ecx,ebp
c00246b9:	d3 e7                	shl    edi,cl
c00246bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00246bf:	89 d8                	mov    eax,ebx
c00246c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00246c5:	88 d1                	mov    cl,dl
c00246c7:	d3 e8                	shr    eax,cl
c00246c9:	89 c7                	mov    edi,eax
c00246cb:	89 e9                	mov    ecx,ebp
c00246cd:	d3 e3                	shl    ebx,cl
c00246cf:	89 f0                	mov    eax,esi
c00246d1:	88 d1                	mov    cl,dl
c00246d3:	d3 e8                	shr    eax,cl
c00246d5:	09 d8                	or     eax,ebx
c00246d7:	89 e9                	mov    ecx,ebp
c00246d9:	d3 e6                	shl    esi,cl
c00246db:	89 f3                	mov    ebx,esi
c00246dd:	89 fa                	mov    edx,edi
c00246df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00246e3:	89 d1                	mov    ecx,edx
c00246e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00246e9:	89 c6                	mov    esi,eax
c00246eb:	89 d7                	mov    edi,edx
c00246ed:	39 d1                	cmp    ecx,edx
c00246ef:	72 27                	jb     c0024718 <__umoddi3+0x10c>
c00246f1:	74 21                	je     c0024714 <__umoddi3+0x108>
c00246f3:	89 ca                	mov    edx,ecx
c00246f5:	29 f3                	sub    ebx,esi
c00246f7:	19 fa                	sbb    edx,edi
c00246f9:	89 d0                	mov    eax,edx
c00246fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00246ff:	d3 e0                	shl    eax,cl
c0024701:	89 e9                	mov    ecx,ebp
c0024703:	d3 eb                	shr    ebx,cl
c0024705:	09 d8                	or     eax,ebx
c0024707:	d3 ea                	shr    edx,cl
c0024709:	83 c4 1c             	add    esp,0x1c
c002470c:	5b                   	pop    ebx
c002470d:	5e                   	pop    esi
c002470e:	5f                   	pop    edi
c002470f:	5d                   	pop    ebp
c0024710:	c3                   	ret    
c0024711:	8d 76 00             	lea    esi,[esi+0x0]
c0024714:	39 c3                	cmp    ebx,eax
c0024716:	73 db                	jae    c00246f3 <__umoddi3+0xe7>
c0024718:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002471c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0024720:	89 d7                	mov    edi,edx
c0024722:	89 c6                	mov    esi,eax
c0024724:	eb cd                	jmp    c00246f3 <__umoddi3+0xe7>

c0024726 <__addsf3>:
c0024726:	55                   	push   ebp
c0024727:	89 e5                	mov    ebp,esp
c0024729:	57                   	push   edi
c002472a:	56                   	push   esi
c002472b:	53                   	push   ebx
c002472c:	83 ec 08             	sub    esp,0x8
c002472f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024732:	89 fa                	mov    edx,edi
c0024734:	89 f8                	mov    eax,edi
c0024736:	c1 f8 17             	sar    eax,0x17
c0024739:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002473c:	c1 e2 08             	shl    edx,0x8
c002473f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024745:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024748:	89 de                	mov    esi,ebx
c002474a:	c1 fe 17             	sar    esi,0x17
c002474d:	c1 e3 08             	shl    ebx,0x8
c0024750:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024756:	31 f0                	xor    eax,esi
c0024758:	0f 88 3b 01 00 00    	js     c0024899 <__addsf3+0x173>
c002475e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0024761:	29 f1                	sub    ecx,esi
c0024763:	85 c9                	test   ecx,ecx
c0024765:	7e 54                	jle    c00247bb <__addsf3+0x95>
c0024767:	89 f0                	mov    eax,esi
c0024769:	84 c0                	test   al,al
c002476b:	75 10                	jne    c002477d <__addsf3+0x57>
c002476d:	85 db                	test   ebx,ebx
c002476f:	0f 84 aa 02 00 00    	je     c0024a1f <__addsf3+0x2f9>
c0024775:	49                   	dec    ecx
c0024776:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024779:	74 38                	je     c00247b3 <__addsf3+0x8d>
c002477b:	eb 13                	jmp    c0024790 <__addsf3+0x6a>
c002477d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024780:	f7 d0                	not    eax
c0024782:	84 c0                	test   al,al
c0024784:	0f 84 95 02 00 00    	je     c0024a1f <__addsf3+0x2f9>
c002478a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024790:	83 f9 1f             	cmp    ecx,0x1f
c0024793:	0f 8f 86 02 00 00    	jg     c0024a1f <__addsf3+0x2f9>
c0024799:	89 de                	mov    esi,ebx
c002479b:	d3 ee                	shr    esi,cl
c002479d:	b8 20 00 00 00       	mov    eax,0x20
c00247a2:	29 c8                	sub    eax,ecx
c00247a4:	89 c1                	mov    ecx,eax
c00247a6:	d3 e3                	shl    ebx,cl
c00247a8:	31 c0                	xor    eax,eax
c00247aa:	85 db                	test   ebx,ebx
c00247ac:	0f 95 c0             	setne  al
c00247af:	09 f0                	or     eax,esi
c00247b1:	01 d0                	add    eax,edx
c00247b3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00247b6:	e9 b6 00 00 00       	jmp    c0024871 <__addsf3+0x14b>
c00247bb:	74 5c                	je     c0024819 <__addsf3+0xf3>
c00247bd:	89 f1                	mov    ecx,esi
c00247bf:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00247c2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00247c5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00247c9:	75 14                	jne    c00247df <__addsf3+0xb9>
c00247cb:	85 d2                	test   edx,edx
c00247cd:	0f 84 4c 02 00 00    	je     c0024a1f <__addsf3+0x2f9>
c00247d3:	49                   	dec    ecx
c00247d4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00247d7:	0f 84 94 00 00 00    	je     c0024871 <__addsf3+0x14b>
c00247dd:	eb 12                	jmp    c00247f1 <__addsf3+0xcb>
c00247df:	89 f0                	mov    eax,esi
c00247e1:	f7 d0                	not    eax
c00247e3:	84 c0                	test   al,al
c00247e5:	0f 84 34 02 00 00    	je     c0024a1f <__addsf3+0x2f9>
c00247eb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00247f1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00247f4:	83 f9 1f             	cmp    ecx,0x1f
c00247f7:	0f 8f 22 02 00 00    	jg     c0024a1f <__addsf3+0x2f9>
c00247fd:	89 d7                	mov    edi,edx
c00247ff:	d3 ef                	shr    edi,cl
c0024801:	b8 20 00 00 00       	mov    eax,0x20
c0024806:	29 c8                	sub    eax,ecx
c0024808:	89 c1                	mov    ecx,eax
c002480a:	d3 e2                	shl    edx,cl
c002480c:	31 c0                	xor    eax,eax
c002480e:	85 d2                	test   edx,edx
c0024810:	0f 95 c0             	setne  al
c0024813:	09 f8                	or     eax,edi
c0024815:	01 d8                	add    eax,ebx
c0024817:	eb 58                	jmp    c0024871 <__addsf3+0x14b>
c0024819:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002481c:	8d 70 01             	lea    esi,[eax+0x1]
c002481f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0024825:	75 32                	jne    c0024859 <__addsf3+0x133>
c0024827:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002482b:	75 1f                	jne    c002484c <__addsf3+0x126>
c002482d:	85 d2                	test   edx,edx
c002482f:	0f 84 e0 01 00 00    	je     c0024a15 <__addsf3+0x2ef>
c0024835:	85 db                	test   ebx,ebx
c0024837:	0f 84 e2 01 00 00    	je     c0024a1f <__addsf3+0x2f9>
c002483d:	89 d0                	mov    eax,edx
c002483f:	01 d8                	add    eax,ebx
c0024841:	0f 89 a9 01 00 00    	jns    c00249f0 <__addsf3+0x2ca>
c0024847:	e9 9d 01 00 00       	jmp    c00249e9 <__addsf3+0x2c3>
c002484c:	85 d2                	test   edx,edx
c002484e:	0f 85 cb 01 00 00    	jne    c0024a1f <__addsf3+0x2f9>
c0024854:	e9 bc 01 00 00       	jmp    c0024a15 <__addsf3+0x2ef>
c0024859:	31 c0                	xor    eax,eax
c002485b:	89 f1                	mov    ecx,esi
c002485d:	f7 d1                	not    ecx
c002485f:	84 c9                	test   cl,cl
c0024861:	0f 84 90 01 00 00    	je     c00249f7 <__addsf3+0x2d1>
c0024867:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002486a:	d1 e8                	shr    eax,1
c002486c:	e9 86 01 00 00       	jmp    c00249f7 <__addsf3+0x2d1>
c0024871:	85 c0                	test   eax,eax
c0024873:	0f 89 7e 01 00 00    	jns    c00249f7 <__addsf3+0x2d1>
c0024879:	46                   	inc    esi
c002487a:	89 f2                	mov    edx,esi
c002487c:	f7 d2                	not    edx
c002487e:	84 d2                	test   dl,dl
c0024880:	0f 84 6f 01 00 00    	je     c00249f5 <__addsf3+0x2cf>
c0024886:	89 c2                	mov    edx,eax
c0024888:	83 e2 01             	and    edx,0x1
c002488b:	d1 e8                	shr    eax,1
c002488d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0024892:	09 d0                	or     eax,edx
c0024894:	e9 5e 01 00 00       	jmp    c00249f7 <__addsf3+0x2d1>
c0024899:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002489d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00248a0:	89 f0                	mov    eax,esi
c00248a2:	0f b6 c0             	movzx  eax,al
c00248a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00248a8:	29 c1                	sub    ecx,eax
c00248aa:	85 c9                	test   ecx,ecx
c00248ac:	7e 55                	jle    c0024903 <__addsf3+0x1dd>
c00248ae:	85 c0                	test   eax,eax
c00248b0:	75 11                	jne    c00248c3 <__addsf3+0x19d>
c00248b2:	85 db                	test   ebx,ebx
c00248b4:	0f 84 65 01 00 00    	je     c0024a1f <__addsf3+0x2f9>
c00248ba:	49                   	dec    ecx
c00248bb:	75 19                	jne    c00248d6 <__addsf3+0x1b0>
c00248bd:	89 d0                	mov    eax,edx
c00248bf:	29 d8                	sub    eax,ebx
c00248c1:	eb 38                	jmp    c00248fb <__addsf3+0x1d5>
c00248c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00248c6:	f7 d0                	not    eax
c00248c8:	84 c0                	test   al,al
c00248ca:	0f 84 4f 01 00 00    	je     c0024a1f <__addsf3+0x2f9>
c00248d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00248d6:	83 f9 1f             	cmp    ecx,0x1f
c00248d9:	0f 8f 40 01 00 00    	jg     c0024a1f <__addsf3+0x2f9>
c00248df:	89 de                	mov    esi,ebx
c00248e1:	d3 ee                	shr    esi,cl
c00248e3:	b8 20 00 00 00       	mov    eax,0x20
c00248e8:	29 c8                	sub    eax,ecx
c00248ea:	89 c1                	mov    ecx,eax
c00248ec:	d3 e3                	shl    ebx,cl
c00248ee:	31 c0                	xor    eax,eax
c00248f0:	85 db                	test   ebx,ebx
c00248f2:	0f 95 c0             	setne  al
c00248f5:	09 f0                	or     eax,esi
c00248f7:	29 c2                	sub    edx,eax
c00248f9:	89 d0                	mov    eax,edx
c00248fb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00248fe:	e9 af 00 00 00       	jmp    c00249b2 <__addsf3+0x28c>
c0024903:	74 5c                	je     c0024961 <__addsf3+0x23b>
c0024905:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0024908:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002490b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002490f:	75 14                	jne    c0024925 <__addsf3+0x1ff>
c0024911:	85 d2                	test   edx,edx
c0024913:	0f 84 06 01 00 00    	je     c0024a1f <__addsf3+0x2f9>
c0024919:	48                   	dec    eax
c002491a:	75 1b                	jne    c0024937 <__addsf3+0x211>
c002491c:	89 d8                	mov    eax,ebx
c002491e:	29 d0                	sub    eax,edx
c0024920:	e9 8d 00 00 00       	jmp    c00249b2 <__addsf3+0x28c>
c0024925:	89 f1                	mov    ecx,esi
c0024927:	f7 d1                	not    ecx
c0024929:	84 c9                	test   cl,cl
c002492b:	0f 84 ee 00 00 00    	je     c0024a1f <__addsf3+0x2f9>
c0024931:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024937:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002493a:	83 f8 1f             	cmp    eax,0x1f
c002493d:	0f 8f dc 00 00 00    	jg     c0024a1f <__addsf3+0x2f9>
c0024943:	89 d7                	mov    edi,edx
c0024945:	88 c1                	mov    cl,al
c0024947:	d3 ef                	shr    edi,cl
c0024949:	b9 20 00 00 00       	mov    ecx,0x20
c002494e:	29 c1                	sub    ecx,eax
c0024950:	d3 e2                	shl    edx,cl
c0024952:	31 c0                	xor    eax,eax
c0024954:	85 d2                	test   edx,edx
c0024956:	0f 95 c0             	setne  al
c0024959:	09 f8                	or     eax,edi
c002495b:	29 c3                	sub    ebx,eax
c002495d:	89 d8                	mov    eax,ebx
c002495f:	eb 51                	jmp    c00249b2 <__addsf3+0x28c>
c0024961:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024964:	40                   	inc    eax
c0024965:	a8 fe                	test   al,0xfe
c0024967:	75 3d                	jne    c00249a6 <__addsf3+0x280>
c0024969:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002496d:	0f 85 a7 00 00 00    	jne    c0024a1a <__addsf3+0x2f4>
c0024973:	85 d2                	test   edx,edx
c0024975:	75 12                	jne    c0024989 <__addsf3+0x263>
c0024977:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002497a:	85 db                	test   ebx,ebx
c002497c:	0f 85 9d 00 00 00    	jne    c0024a1f <__addsf3+0x2f9>
c0024982:	31 ff                	xor    edi,edi
c0024984:	e9 96 00 00 00       	jmp    c0024a1f <__addsf3+0x2f9>
c0024989:	85 db                	test   ebx,ebx
c002498b:	0f 84 8e 00 00 00    	je     c0024a1f <__addsf3+0x2f9>
c0024991:	89 d0                	mov    eax,edx
c0024993:	29 d8                	sub    eax,ebx
c0024995:	79 06                	jns    c002499d <__addsf3+0x277>
c0024997:	89 d8                	mov    eax,ebx
c0024999:	29 d0                	sub    eax,edx
c002499b:	eb 5a                	jmp    c00249f7 <__addsf3+0x2d1>
c002499d:	bf 00 00 00 00       	mov    edi,0x0
c00249a2:	74 7b                	je     c0024a1f <__addsf3+0x2f9>
c00249a4:	eb 4a                	jmp    c00249f0 <__addsf3+0x2ca>
c00249a6:	89 d0                	mov    eax,edx
c00249a8:	29 d8                	sub    eax,ebx
c00249aa:	79 12                	jns    c00249be <__addsf3+0x298>
c00249ac:	89 d8                	mov    eax,ebx
c00249ae:	29 d0                	sub    eax,edx
c00249b0:	eb 09                	jmp    c00249bb <__addsf3+0x295>
c00249b2:	85 c0                	test   eax,eax
c00249b4:	79 41                	jns    c00249f7 <__addsf3+0x2d1>
c00249b6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00249bb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00249be:	31 f6                	xor    esi,esi
c00249c0:	85 c0                	test   eax,eax
c00249c2:	74 33                	je     c00249f7 <__addsf3+0x2d1>
c00249c4:	0f bd c8             	bsr    ecx,eax
c00249c7:	83 f1 1f             	xor    ecx,0x1f
c00249ca:	d3 e0                	shl    eax,cl
c00249cc:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00249d0:	39 ca                	cmp    edx,ecx
c00249d2:	7f 10                	jg     c00249e4 <__addsf3+0x2be>
c00249d4:	29 d1                	sub    ecx,edx
c00249d6:	41                   	inc    ecx
c00249d7:	d3 e8                	shr    eax,cl
c00249d9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00249dc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00249e2:	eb 13                	jmp    c00249f7 <__addsf3+0x2d1>
c00249e4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00249e7:	29 ce                	sub    esi,ecx
c00249e9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00249ee:	eb 07                	jmp    c00249f7 <__addsf3+0x2d1>
c00249f0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00249f3:	eb 02                	jmp    c00249f7 <__addsf3+0x2d1>
c00249f5:	31 c0                	xor    eax,eax
c00249f7:	89 c2                	mov    edx,eax
c00249f9:	c1 ea 08             	shr    edx,0x8
c00249fc:	a8 7f                	test   al,0x7f
c00249fe:	0f 95 c1             	setne  cl
c0024a01:	09 d1                	or     ecx,edx
c0024a03:	83 e1 01             	and    ecx,0x1
c0024a06:	c1 e8 07             	shr    eax,0x7
c0024a09:	21 c8                	and    eax,ecx
c0024a0b:	c1 e6 17             	shl    esi,0x17
c0024a0e:	09 d6                	or     esi,edx
c0024a10:	8d 3c 30             	lea    edi,[eax+esi*1]
c0024a13:	eb 0a                	jmp    c0024a1f <__addsf3+0x2f9>
c0024a15:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024a18:	eb 05                	jmp    c0024a1f <__addsf3+0x2f9>
c0024a1a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0024a1f:	89 f8                	mov    eax,edi
c0024a21:	5a                   	pop    edx
c0024a22:	59                   	pop    ecx
c0024a23:	5b                   	pop    ebx
c0024a24:	5e                   	pop    esi
c0024a25:	5f                   	pop    edi
c0024a26:	5d                   	pop    ebp
c0024a27:	c3                   	ret    

c0024a28 <__subsf3>:
c0024a28:	55                   	push   ebp
c0024a29:	89 e5                	mov    ebp,esp
c0024a2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a2e:	05 00 00 00 80       	add    eax,0x80000000
c0024a33:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024a36:	5d                   	pop    ebp
c0024a37:	e9 ea fc ff ff       	jmp    c0024726 <__addsf3>

c0024a3c <__negsf2>:
c0024a3c:	55                   	push   ebp
c0024a3d:	89 e5                	mov    ebp,esp
c0024a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024a42:	05 00 00 00 80       	add    eax,0x80000000
c0024a47:	5d                   	pop    ebp
c0024a48:	c3                   	ret    

c0024a49 <__mulsf3>:
c0024a49:	55                   	push   ebp
c0024a4a:	89 e5                	mov    ebp,esp
c0024a4c:	57                   	push   edi
c0024a4d:	56                   	push   esi
c0024a4e:	53                   	push   ebx
c0024a4f:	83 ec 1c             	sub    esp,0x1c
c0024a52:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0024a55:	89 f0                	mov    eax,esi
c0024a57:	89 f1                	mov    ecx,esi
c0024a59:	c1 f9 17             	sar    ecx,0x17
c0024a5c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024a5f:	c1 e0 08             	shl    eax,0x8
c0024a62:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024a67:	89 c1                	mov    ecx,eax
c0024a69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a6c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024a6f:	89 c7                	mov    edi,eax
c0024a71:	c1 ff 17             	sar    edi,0x17
c0024a74:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024a78:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024a7b:	89 f8                	mov    eax,edi
c0024a7d:	0f b6 c0             	movzx  eax,al
c0024a80:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024a83:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0024a87:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024a8a:	42                   	inc    edx
c0024a8b:	80 e2 fe             	and    dl,0xfe
c0024a8e:	75 7b                	jne    c0024b0b <__mulsf3+0xc2>
c0024a90:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024a94:	74 54                	je     c0024aea <__mulsf3+0xa1>
c0024a96:	85 c9                	test   ecx,ecx
c0024a98:	0f 85 64 01 00 00    	jne    c0024c02 <__mulsf3+0x1b9>
c0024a9e:	8d 57 01             	lea    edx,[edi+0x1]
c0024aa1:	80 e2 fe             	and    dl,0xfe
c0024aa4:	75 1f                	jne    c0024ac5 <__mulsf3+0x7c>
c0024aa6:	85 c0                	test   eax,eax
c0024aa8:	b8 00 00 00 00       	mov    eax,0x0
c0024aad:	74 29                	je     c0024ad8 <__mulsf3+0x8f>
c0024aaf:	53                   	push   ebx
c0024ab0:	53                   	push   ebx
c0024ab1:	50                   	push   eax
c0024ab2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024ab5:	e8 96 05 00 00       	call   c0025050 <__nesf2>
c0024aba:	83 c4 10             	add    esp,0x10
c0024abd:	85 c0                	test   eax,eax
c0024abf:	0f 85 3a 01 00 00    	jne    c0024bff <__mulsf3+0x1b6>
c0024ac5:	85 ff                	test   edi,edi
c0024ac7:	0f 89 35 01 00 00    	jns    c0024c02 <__mulsf3+0x1b9>
c0024acd:	81 c6 00 00 00 80    	add    esi,0x80000000
c0024ad3:	e9 2a 01 00 00       	jmp    c0024c02 <__mulsf3+0x1b9>
c0024ad8:	51                   	push   ecx
c0024ad9:	51                   	push   ecx
c0024ada:	50                   	push   eax
c0024adb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024ade:	e8 6d 05 00 00       	call   c0025050 <__nesf2>
c0024ae3:	83 c4 10             	add    esp,0x10
c0024ae6:	85 c0                	test   eax,eax
c0024ae8:	eb 15                	jmp    c0024aff <__mulsf3+0xb6>
c0024aea:	85 c9                	test   ecx,ecx
c0024aec:	74 0b                	je     c0024af9 <__mulsf3+0xb0>
c0024aee:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024af1:	01 c9                	add    ecx,ecx
c0024af3:	78 16                	js     c0024b0b <__mulsf3+0xc2>
c0024af5:	89 d3                	mov    ebx,edx
c0024af7:	eb f5                	jmp    c0024aee <__mulsf3+0xa5>
c0024af9:	89 f8                	mov    eax,edi
c0024afb:	f7 d0                	not    eax
c0024afd:	84 c0                	test   al,al
c0024aff:	75 c4                	jne    c0024ac5 <__mulsf3+0x7c>
c0024b01:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0024b06:	e9 f7 00 00 00       	jmp    c0024c02 <__mulsf3+0x1b9>
c0024b0b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024b0e:	c1 e6 08             	shl    esi,0x8
c0024b11:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0024b17:	8d 57 01             	lea    edx,[edi+0x1]
c0024b1a:	80 e2 fe             	and    dl,0xfe
c0024b1d:	75 63                	jne    c0024b82 <__mulsf3+0x139>
c0024b1f:	85 c0                	test   eax,eax
c0024b21:	74 2f                	je     c0024b52 <__mulsf3+0x109>
c0024b23:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024b27:	0f 89 d2 00 00 00    	jns    c0024bff <__mulsf3+0x1b6>
c0024b2d:	52                   	push   edx
c0024b2e:	52                   	push   edx
c0024b2f:	6a 00                	push   0x0
c0024b31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024b34:	e8 dc 04 00 00       	call   c0025015 <__eqsf2>
c0024b39:	83 c4 10             	add    esp,0x10
c0024b3c:	85 c0                	test   eax,eax
c0024b3e:	0f 85 bb 00 00 00    	jne    c0024bff <__mulsf3+0x1b6>
c0024b44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b47:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0024b4d:	e9 b0 00 00 00       	jmp    c0024c02 <__mulsf3+0x1b9>
c0024b52:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024b55:	50                   	push   eax
c0024b56:	50                   	push   eax
c0024b57:	6a 00                	push   0x0
c0024b59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024b5c:	e8 b4 04 00 00       	call   c0025015 <__eqsf2>
c0024b61:	83 c4 10             	add    esp,0x10
c0024b64:	85 c0                	test   eax,eax
c0024b66:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024b69:	75 0c                	jne    c0024b77 <__mulsf3+0x12e>
c0024b6b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024b6f:	0f 89 8a 00 00 00    	jns    c0024bff <__mulsf3+0x1b6>
c0024b75:	eb cd                	jmp    c0024b44 <__mulsf3+0xfb>
c0024b77:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024b7a:	01 f6                	add    esi,esi
c0024b7c:	78 04                	js     c0024b82 <__mulsf3+0x139>
c0024b7e:	89 c3                	mov    ebx,eax
c0024b80:	eb f5                	jmp    c0024b77 <__mulsf3+0x12e>
c0024b82:	89 c8                	mov    eax,ecx
c0024b84:	0d 00 00 00 80       	or     eax,0x80000000
c0024b89:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024b8f:	f7 e6                	mul    esi
c0024b91:	85 c0                	test   eax,eax
c0024b93:	0f 95 c0             	setne  al
c0024b96:	0f b6 c0             	movzx  eax,al
c0024b99:	09 c2                	or     edx,eax
c0024b9b:	78 03                	js     c0024ba0 <__mulsf3+0x157>
c0024b9d:	01 d2                	add    edx,edx
c0024b9f:	4b                   	dec    ebx
c0024ba0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0024ba6:	7f 22                	jg     c0024bca <__mulsf3+0x181>
c0024ba8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024bae:	85 db                	test   ebx,ebx
c0024bb0:	7f 23                	jg     c0024bd5 <__mulsf3+0x18c>
c0024bb2:	83 fb e9             	cmp    ebx,0xffffffe9
c0024bb5:	7c 1a                	jl     c0024bd1 <__mulsf3+0x188>
c0024bb7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024bbd:	b9 01 00 00 00       	mov    ecx,0x1
c0024bc2:	29 d9                	sub    ecx,ebx
c0024bc4:	d3 ea                	shr    edx,cl
c0024bc6:	31 db                	xor    ebx,ebx
c0024bc8:	eb 0b                	jmp    c0024bd5 <__mulsf3+0x18c>
c0024bca:	bb ff 00 00 00       	mov    ebx,0xff
c0024bcf:	eb 02                	jmp    c0024bd3 <__mulsf3+0x18a>
c0024bd1:	31 db                	xor    ebx,ebx
c0024bd3:	31 d2                	xor    edx,edx
c0024bd5:	89 d0                	mov    eax,edx
c0024bd7:	c1 e8 08             	shr    eax,0x8
c0024bda:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0024bdd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024be3:	09 fb                	or     ebx,edi
c0024be5:	c1 e3 17             	shl    ebx,0x17
c0024be8:	09 c3                	or     ebx,eax
c0024bea:	f6 c2 7f             	test   dl,0x7f
c0024bed:	0f 95 c1             	setne  cl
c0024bf0:	09 c8                	or     eax,ecx
c0024bf2:	83 e0 01             	and    eax,0x1
c0024bf5:	c1 ea 07             	shr    edx,0x7
c0024bf8:	21 c2                	and    edx,eax
c0024bfa:	8d 34 13             	lea    esi,[ebx+edx*1]
c0024bfd:	eb 03                	jmp    c0024c02 <__mulsf3+0x1b9>
c0024bff:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0024c02:	89 f0                	mov    eax,esi
c0024c04:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024c07:	5b                   	pop    ebx
c0024c08:	5e                   	pop    esi
c0024c09:	5f                   	pop    edi
c0024c0a:	5d                   	pop    ebp
c0024c0b:	c3                   	ret    

c0024c0c <__divsf3>:
c0024c0c:	55                   	push   ebp
c0024c0d:	89 e5                	mov    ebp,esp
c0024c0f:	57                   	push   edi
c0024c10:	56                   	push   esi
c0024c11:	53                   	push   ebx
c0024c12:	83 ec 1c             	sub    esp,0x1c
c0024c15:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024c18:	89 d8                	mov    eax,ebx
c0024c1a:	89 d9                	mov    ecx,ebx
c0024c1c:	c1 f9 17             	sar    ecx,0x17
c0024c1f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024c22:	c1 e0 08             	shl    eax,0x8
c0024c25:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024c2a:	89 c1                	mov    ecx,eax
c0024c2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c2f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024c32:	89 c7                	mov    edi,eax
c0024c34:	c1 ff 17             	sar    edi,0x17
c0024c37:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024c3b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024c3e:	89 f8                	mov    eax,edi
c0024c40:	0f b6 c0             	movzx  eax,al
c0024c43:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024c46:	29 c6                	sub    esi,eax
c0024c48:	83 c6 7f             	add    esi,0x7f
c0024c4b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024c4e:	42                   	inc    edx
c0024c4f:	80 e2 fe             	and    dl,0xfe
c0024c52:	0f 85 9c 00 00 00    	jne    c0024cf4 <__divsf3+0xe8>
c0024c58:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024c5c:	74 33                	je     c0024c91 <__divsf3+0x85>
c0024c5e:	85 c9                	test   ecx,ecx
c0024c60:	0f 85 c7 01 00 00    	jne    c0024e2d <__divsf3+0x221>
c0024c66:	8d 57 01             	lea    edx,[edi+0x1]
c0024c69:	80 e2 fe             	and    dl,0xfe
c0024c6c:	75 2f                	jne    c0024c9d <__divsf3+0x91>
c0024c6e:	85 c0                	test   eax,eax
c0024c70:	74 2b                	je     c0024c9d <__divsf3+0x91>
c0024c72:	51                   	push   ecx
c0024c73:	51                   	push   ecx
c0024c74:	6a 00                	push   0x0
c0024c76:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024c79:	e8 d2 03 00 00       	call   c0025050 <__nesf2>
c0024c7e:	83 c4 10             	add    esp,0x10
c0024c81:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024c84:	85 c0                	test   eax,eax
c0024c86:	0f 85 a1 01 00 00    	jne    c0024e2d <__divsf3+0x221>
c0024c8c:	e9 92 01 00 00       	jmp    c0024e23 <__divsf3+0x217>
c0024c91:	85 c9                	test   ecx,ecx
c0024c93:	75 1b                	jne    c0024cb0 <__divsf3+0xa4>
c0024c95:	8d 57 01             	lea    edx,[edi+0x1]
c0024c98:	80 e2 fe             	and    dl,0xfe
c0024c9b:	74 1e                	je     c0024cbb <__divsf3+0xaf>
c0024c9d:	85 ff                	test   edi,edi
c0024c9f:	0f 89 88 01 00 00    	jns    c0024e2d <__divsf3+0x221>
c0024ca5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0024cab:	e9 7d 01 00 00       	jmp    c0024e2d <__divsf3+0x221>
c0024cb0:	8d 56 ff             	lea    edx,[esi-0x1]
c0024cb3:	01 c9                	add    ecx,ecx
c0024cb5:	78 3d                	js     c0024cf4 <__divsf3+0xe8>
c0024cb7:	89 d6                	mov    esi,edx
c0024cb9:	eb f5                	jmp    c0024cb0 <__divsf3+0xa4>
c0024cbb:	85 c0                	test   eax,eax
c0024cbd:	b8 00 00 00 00       	mov    eax,0x0
c0024cc2:	74 18                	je     c0024cdc <__divsf3+0xd0>
c0024cc4:	52                   	push   edx
c0024cc5:	52                   	push   edx
c0024cc6:	50                   	push   eax
c0024cc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024cca:	e8 81 03 00 00       	call   c0025050 <__nesf2>
c0024ccf:	83 c4 10             	add    esp,0x10
c0024cd2:	85 c0                	test   eax,eax
c0024cd4:	0f 85 50 01 00 00    	jne    c0024e2a <__divsf3+0x21e>
c0024cda:	eb c1                	jmp    c0024c9d <__divsf3+0x91>
c0024cdc:	56                   	push   esi
c0024cdd:	56                   	push   esi
c0024cde:	50                   	push   eax
c0024cdf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024ce2:	e8 69 03 00 00       	call   c0025050 <__nesf2>
c0024ce7:	83 c4 10             	add    esp,0x10
c0024cea:	85 c0                	test   eax,eax
c0024cec:	0f 84 31 01 00 00    	je     c0024e23 <__divsf3+0x217>
c0024cf2:	eb a9                	jmp    c0024c9d <__divsf3+0x91>
c0024cf4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0024cf7:	c1 e3 08             	shl    ebx,0x8
c0024cfa:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024d00:	8d 57 01             	lea    edx,[edi+0x1]
c0024d03:	80 e2 fe             	and    dl,0xfe
c0024d06:	75 71                	jne    c0024d79 <__divsf3+0x16d>
c0024d08:	85 c0                	test   eax,eax
c0024d0a:	ba 00 00 00 00       	mov    edx,0x0
c0024d0f:	74 2f                	je     c0024d40 <__divsf3+0x134>
c0024d11:	51                   	push   ecx
c0024d12:	51                   	push   ecx
c0024d13:	52                   	push   edx
c0024d14:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024d17:	e8 f9 02 00 00       	call   c0025015 <__eqsf2>
c0024d1c:	83 c4 10             	add    esp,0x10
c0024d1f:	85 c0                	test   eax,eax
c0024d21:	0f 85 03 01 00 00    	jne    c0024e2a <__divsf3+0x21e>
c0024d27:	31 d2                	xor    edx,edx
c0024d29:	89 d3                	mov    ebx,edx
c0024d2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024d2e:	31 f8                	xor    eax,edi
c0024d30:	0f 89 f7 00 00 00    	jns    c0024e2d <__divsf3+0x221>
c0024d36:	bb 00 00 00 80       	mov    ebx,0x80000000
c0024d3b:	e9 ed 00 00 00       	jmp    c0024e2d <__divsf3+0x221>
c0024d40:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024d43:	50                   	push   eax
c0024d44:	50                   	push   eax
c0024d45:	52                   	push   edx
c0024d46:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024d49:	e8 c7 02 00 00       	call   c0025015 <__eqsf2>
c0024d4e:	83 c4 10             	add    esp,0x10
c0024d51:	85 c0                	test   eax,eax
c0024d53:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024d56:	75 16                	jne    c0024d6e <__divsf3+0x162>
c0024d58:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024d5b:	31 fb                	xor    ebx,edi
c0024d5d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0024d63:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0024d69:	e9 bf 00 00 00       	jmp    c0024e2d <__divsf3+0x221>
c0024d6e:	8d 46 01             	lea    eax,[esi+0x1]
c0024d71:	01 db                	add    ebx,ebx
c0024d73:	78 04                	js     c0024d79 <__divsf3+0x16d>
c0024d75:	89 c6                	mov    esi,eax
c0024d77:	eb f5                	jmp    c0024d6e <__divsf3+0x162>
c0024d79:	89 c8                	mov    eax,ecx
c0024d7b:	0d 00 00 00 80       	or     eax,0x80000000
c0024d80:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024d86:	31 d2                	xor    edx,edx
c0024d88:	39 d8                	cmp    eax,ebx
c0024d8a:	72 07                	jb     c0024d93 <__divsf3+0x187>
c0024d8c:	29 d8                	sub    eax,ebx
c0024d8e:	ba 01 00 00 00       	mov    edx,0x1
c0024d93:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0024d9a:	01 d2                	add    edx,edx
c0024d9c:	89 c1                	mov    ecx,eax
c0024d9e:	01 c0                	add    eax,eax
c0024da0:	85 c9                	test   ecx,ecx
c0024da2:	78 04                	js     c0024da8 <__divsf3+0x19c>
c0024da4:	39 c3                	cmp    ebx,eax
c0024da6:	77 05                	ja     c0024dad <__divsf3+0x1a1>
c0024da8:	29 d8                	sub    eax,ebx
c0024daa:	83 ca 01             	or     edx,0x1
c0024dad:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0024db0:	75 e8                	jne    c0024d9a <__divsf3+0x18e>
c0024db2:	85 c0                	test   eax,eax
c0024db4:	0f 95 c0             	setne  al
c0024db7:	0f b6 c0             	movzx  eax,al
c0024dba:	c1 e2 06             	shl    edx,0x6
c0024dbd:	09 c2                	or     edx,eax
c0024dbf:	78 03                	js     c0024dc4 <__divsf3+0x1b8>
c0024dc1:	01 d2                	add    edx,edx
c0024dc3:	4e                   	dec    esi
c0024dc4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024dca:	7f 22                	jg     c0024dee <__divsf3+0x1e2>
c0024dcc:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024dd2:	85 f6                	test   esi,esi
c0024dd4:	7f 23                	jg     c0024df9 <__divsf3+0x1ed>
c0024dd6:	83 fe e9             	cmp    esi,0xffffffe9
c0024dd9:	7c 1a                	jl     c0024df5 <__divsf3+0x1e9>
c0024ddb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024de1:	b9 01 00 00 00       	mov    ecx,0x1
c0024de6:	29 f1                	sub    ecx,esi
c0024de8:	d3 ea                	shr    edx,cl
c0024dea:	31 f6                	xor    esi,esi
c0024dec:	eb 0b                	jmp    c0024df9 <__divsf3+0x1ed>
c0024dee:	be ff 00 00 00       	mov    esi,0xff
c0024df3:	eb 02                	jmp    c0024df7 <__divsf3+0x1eb>
c0024df5:	31 f6                	xor    esi,esi
c0024df7:	31 d2                	xor    edx,edx
c0024df9:	89 d0                	mov    eax,edx
c0024dfb:	c1 e8 08             	shr    eax,0x8
c0024dfe:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0024e01:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024e07:	09 fe                	or     esi,edi
c0024e09:	c1 e6 17             	shl    esi,0x17
c0024e0c:	09 c6                	or     esi,eax
c0024e0e:	f6 c2 7f             	test   dl,0x7f
c0024e11:	0f 95 c1             	setne  cl
c0024e14:	09 c8                	or     eax,ecx
c0024e16:	83 e0 01             	and    eax,0x1
c0024e19:	c1 ea 07             	shr    edx,0x7
c0024e1c:	21 c2                	and    edx,eax
c0024e1e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0024e21:	eb 0a                	jmp    c0024e2d <__divsf3+0x221>
c0024e23:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0024e28:	eb 03                	jmp    c0024e2d <__divsf3+0x221>
c0024e2a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024e2d:	89 d8                	mov    eax,ebx
c0024e2f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024e32:	5b                   	pop    ebx
c0024e33:	5e                   	pop    esi
c0024e34:	5f                   	pop    edi
c0024e35:	5d                   	pop    ebp
c0024e36:	c3                   	ret    

c0024e37 <__floatsisf>:
c0024e37:	55                   	push   ebp
c0024e38:	89 e5                	mov    ebp,esp
c0024e3a:	53                   	push   ebx
c0024e3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024e3e:	85 d2                	test   edx,edx
c0024e40:	7e 2b                	jle    c0024e6d <__floatsisf+0x36>
c0024e42:	0f bd ca             	bsr    ecx,edx
c0024e45:	83 f1 1f             	xor    ecx,0x1f
c0024e48:	d3 e2                	shl    edx,cl
c0024e4a:	89 d0                	mov    eax,edx
c0024e4c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024e51:	89 c3                	mov    ebx,eax
c0024e53:	c1 eb 08             	shr    ebx,0x8
c0024e56:	80 e2 7f             	and    dl,0x7f
c0024e59:	0f 95 c2             	setne  dl
c0024e5c:	09 da                	or     edx,ebx
c0024e5e:	83 e2 01             	and    edx,0x1
c0024e61:	c1 e8 07             	shr    eax,0x7
c0024e64:	21 c2                	and    edx,eax
c0024e66:	b8 9e 00 00 00       	mov    eax,0x9e
c0024e6b:	eb 32                	jmp    c0024e9f <__floatsisf+0x68>
c0024e6d:	b8 00 00 00 00       	mov    eax,0x0
c0024e72:	74 34                	je     c0024ea8 <__floatsisf+0x71>
c0024e74:	f7 da                	neg    edx
c0024e76:	0f bd ca             	bsr    ecx,edx
c0024e79:	83 f1 1f             	xor    ecx,0x1f
c0024e7c:	d3 e2                	shl    edx,cl
c0024e7e:	89 d0                	mov    eax,edx
c0024e80:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024e85:	89 c3                	mov    ebx,eax
c0024e87:	c1 eb 08             	shr    ebx,0x8
c0024e8a:	80 e2 7f             	and    dl,0x7f
c0024e8d:	0f 95 c2             	setne  dl
c0024e90:	09 da                	or     edx,ebx
c0024e92:	83 e2 01             	and    edx,0x1
c0024e95:	c1 e8 07             	shr    eax,0x7
c0024e98:	21 c2                	and    edx,eax
c0024e9a:	b8 9e 01 00 00       	mov    eax,0x19e
c0024e9f:	29 c8                	sub    eax,ecx
c0024ea1:	c1 e0 17             	shl    eax,0x17
c0024ea4:	09 d8                	or     eax,ebx
c0024ea6:	01 d0                	add    eax,edx
c0024ea8:	5b                   	pop    ebx
c0024ea9:	5d                   	pop    ebp
c0024eaa:	c3                   	ret    

c0024eab <__floatunsisf>:
c0024eab:	55                   	push   ebp
c0024eac:	89 e5                	mov    ebp,esp
c0024eae:	53                   	push   ebx
c0024eaf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024eb2:	31 c0                	xor    eax,eax
c0024eb4:	85 d2                	test   edx,edx
c0024eb6:	74 32                	je     c0024eea <__floatunsisf+0x3f>
c0024eb8:	0f bd ca             	bsr    ecx,edx
c0024ebb:	83 f1 1f             	xor    ecx,0x1f
c0024ebe:	d3 e2                	shl    edx,cl
c0024ec0:	89 d0                	mov    eax,edx
c0024ec2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024ec7:	89 c3                	mov    ebx,eax
c0024ec9:	c1 eb 08             	shr    ebx,0x8
c0024ecc:	80 e2 7f             	and    dl,0x7f
c0024ecf:	0f 95 c2             	setne  dl
c0024ed2:	09 da                	or     edx,ebx
c0024ed4:	83 e2 01             	and    edx,0x1
c0024ed7:	c1 e8 07             	shr    eax,0x7
c0024eda:	21 c2                	and    edx,eax
c0024edc:	b8 9e 00 00 00       	mov    eax,0x9e
c0024ee1:	29 c8                	sub    eax,ecx
c0024ee3:	c1 e0 17             	shl    eax,0x17
c0024ee6:	09 d8                	or     eax,ebx
c0024ee8:	01 d0                	add    eax,edx
c0024eea:	5b                   	pop    ebx
c0024eeb:	5d                   	pop    ebp
c0024eec:	c3                   	ret    

c0024eed <__fixsfsi>:
c0024eed:	55                   	push   ebp
c0024eee:	89 e5                	mov    ebp,esp
c0024ef0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024ef3:	89 d1                	mov    ecx,edx
c0024ef5:	c1 e1 08             	shl    ecx,0x8
c0024ef8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0024efe:	c1 fa 17             	sar    edx,0x17
c0024f01:	78 1c                	js     c0024f1f <__fixsfsi+0x32>
c0024f03:	83 ea 7f             	sub    edx,0x7f
c0024f06:	31 c0                	xor    eax,eax
c0024f08:	83 fa 1e             	cmp    edx,0x1e
c0024f0b:	77 40                	ja     c0024f4d <__fixsfsi+0x60>
c0024f0d:	89 c8                	mov    eax,ecx
c0024f0f:	0d 00 00 00 80       	or     eax,0x80000000
c0024f14:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024f19:	29 d1                	sub    ecx,edx
c0024f1b:	d3 e8                	shr    eax,cl
c0024f1d:	eb 2e                	jmp    c0024f4d <__fixsfsi+0x60>
c0024f1f:	31 c0                	xor    eax,eax
c0024f21:	81 c2 81 00 00 00    	add    edx,0x81
c0024f27:	78 24                	js     c0024f4d <__fixsfsi+0x60>
c0024f29:	83 fa 1e             	cmp    edx,0x1e
c0024f2c:	7e 09                	jle    c0024f37 <__fixsfsi+0x4a>
c0024f2e:	83 fa 1f             	cmp    edx,0x1f
c0024f31:	75 18                	jne    c0024f4b <__fixsfsi+0x5e>
c0024f33:	85 c9                	test   ecx,ecx
c0024f35:	75 14                	jne    c0024f4b <__fixsfsi+0x5e>
c0024f37:	89 c8                	mov    eax,ecx
c0024f39:	0d 00 00 00 80       	or     eax,0x80000000
c0024f3e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024f43:	29 d1                	sub    ecx,edx
c0024f45:	d3 e8                	shr    eax,cl
c0024f47:	f7 d8                	neg    eax
c0024f49:	eb 02                	jmp    c0024f4d <__fixsfsi+0x60>
c0024f4b:	31 c0                	xor    eax,eax
c0024f4d:	5d                   	pop    ebp
c0024f4e:	c3                   	ret    

c0024f4f <__fixunssfsi>:
c0024f4f:	55                   	push   ebp
c0024f50:	89 e5                	mov    ebp,esp
c0024f52:	53                   	push   ebx
c0024f53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024f56:	89 d3                	mov    ebx,edx
c0024f58:	c1 fb 17             	sar    ebx,0x17
c0024f5b:	83 eb 7f             	sub    ebx,0x7f
c0024f5e:	31 c0                	xor    eax,eax
c0024f60:	83 fb 1f             	cmp    ebx,0x1f
c0024f63:	77 18                	ja     c0024f7d <__fixunssfsi+0x2e>
c0024f65:	89 d0                	mov    eax,edx
c0024f67:	c1 e0 08             	shl    eax,0x8
c0024f6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024f6f:	0d 00 00 00 80       	or     eax,0x80000000
c0024f74:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024f79:	29 d9                	sub    ecx,ebx
c0024f7b:	d3 e8                	shr    eax,cl
c0024f7d:	5b                   	pop    ebx
c0024f7e:	5d                   	pop    ebp
c0024f7f:	c3                   	ret    

c0024f80 <__cmpsf2>:
c0024f80:	55                   	push   ebp
c0024f81:	89 e5                	mov    ebp,esp
c0024f83:	57                   	push   edi
c0024f84:	56                   	push   esi
c0024f85:	53                   	push   ebx
c0024f86:	83 ec 24             	sub    esp,0x24
c0024f89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024f8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f8f:	e8 4f 10 00 00       	call   c0025fe3 <__truncdfsf2>
c0024f94:	5a                   	pop    edx
c0024f95:	59                   	pop    ecx
c0024f96:	89 c3                	mov    ebx,eax
c0024f98:	c1 e8 17             	shr    eax,0x17
c0024f9b:	0f b6 f0             	movzx  esi,al
c0024f9e:	89 d8                	mov    eax,ebx
c0024fa0:	c1 e8 1f             	shr    eax,0x1f
c0024fa3:	31 c6                	xor    esi,eax
c0024fa5:	c1 e3 08             	shl    ebx,0x8
c0024fa8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024fab:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024fae:	e8 30 10 00 00       	call   c0025fe3 <__truncdfsf2>
c0024fb3:	83 c4 10             	add    esp,0x10
c0024fb6:	89 c1                	mov    ecx,eax
c0024fb8:	c1 e9 17             	shr    ecx,0x17
c0024fbb:	0f b6 c9             	movzx  ecx,cl
c0024fbe:	89 c7                	mov    edi,eax
c0024fc0:	c1 ef 1f             	shr    edi,0x1f
c0024fc3:	89 ca                	mov    edx,ecx
c0024fc5:	31 fa                	xor    edx,edi
c0024fc7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0024fca:	c1 e0 08             	shl    eax,0x8
c0024fcd:	89 c2                	mov    edx,eax
c0024fcf:	89 d8                	mov    eax,ebx
c0024fd1:	09 d0                	or     eax,edx
c0024fd3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024fd8:	09 f0                	or     eax,esi
c0024fda:	75 08                	jne    c0024fe4 <__cmpsf2+0x64>
c0024fdc:	31 c0                	xor    eax,eax
c0024fde:	39 f9                	cmp    ecx,edi
c0024fe0:	75 0c                	jne    c0024fee <__cmpsf2+0x6e>
c0024fe2:	eb 29                	jmp    c002500d <__cmpsf2+0x8d>
c0024fe4:	b8 01 00 00 00       	mov    eax,0x1
c0024fe9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024fec:	7f 1f                	jg     c002500d <__cmpsf2+0x8d>
c0024fee:	83 c8 ff             	or     eax,0xffffffff
c0024ff1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0024ff4:	7c 17                	jl     c002500d <__cmpsf2+0x8d>
c0024ff6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024ffc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025002:	b8 01 00 00 00       	mov    eax,0x1
c0025007:	39 d3                	cmp    ebx,edx
c0025009:	77 02                	ja     c002500d <__cmpsf2+0x8d>
c002500b:	19 c0                	sbb    eax,eax
c002500d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025010:	5b                   	pop    ebx
c0025011:	5e                   	pop    esi
c0025012:	5f                   	pop    edi
c0025013:	5d                   	pop    ebp
c0025014:	c3                   	ret    

c0025015 <__eqsf2>:
c0025015:	55                   	push   ebp
c0025016:	89 e5                	mov    ebp,esp
c0025018:	83 ec 24             	sub    esp,0x24
c002501b:	6a 01                	push   0x1
c002501d:	83 ec 0c             	sub    esp,0xc
c0025020:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025023:	e8 df 10 00 00       	call   c0026107 <__extendsfdf2>
c0025028:	83 c4 10             	add    esp,0x10
c002502b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002502e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025031:	52                   	push   edx
c0025032:	50                   	push   eax
c0025033:	50                   	push   eax
c0025034:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025037:	e8 cb 10 00 00       	call   c0026107 <__extendsfdf2>
c002503c:	59                   	pop    ecx
c002503d:	59                   	pop    ecx
c002503e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025041:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025044:	52                   	push   edx
c0025045:	50                   	push   eax
c0025046:	e8 35 ff ff ff       	call   c0024f80 <__cmpsf2>
c002504b:	83 c4 20             	add    esp,0x20
c002504e:	c9                   	leave  
c002504f:	c3                   	ret    

c0025050 <__nesf2>:
c0025050:	eb c3                	jmp    c0025015 <__eqsf2>

c0025052 <__gtsf2>:
c0025052:	55                   	push   ebp
c0025053:	89 e5                	mov    ebp,esp
c0025055:	83 ec 24             	sub    esp,0x24
c0025058:	6a ff                	push   0xffffffff
c002505a:	83 ec 0c             	sub    esp,0xc
c002505d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025060:	e8 a2 10 00 00       	call   c0026107 <__extendsfdf2>
c0025065:	83 c4 10             	add    esp,0x10
c0025068:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002506b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002506e:	52                   	push   edx
c002506f:	50                   	push   eax
c0025070:	50                   	push   eax
c0025071:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025074:	e8 8e 10 00 00       	call   c0026107 <__extendsfdf2>
c0025079:	59                   	pop    ecx
c002507a:	59                   	pop    ecx
c002507b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002507e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025081:	52                   	push   edx
c0025082:	50                   	push   eax
c0025083:	e8 f8 fe ff ff       	call   c0024f80 <__cmpsf2>
c0025088:	83 c4 20             	add    esp,0x20
c002508b:	c9                   	leave  
c002508c:	c3                   	ret    

c002508d <__gesf2>:
c002508d:	eb c3                	jmp    c0025052 <__gtsf2>

c002508f <__ltsf2>:
c002508f:	eb 84                	jmp    c0025015 <__eqsf2>

c0025091 <__lesf2>:
c0025091:	eb 82                	jmp    c0025015 <__eqsf2>

c0025093 <__adddf3>:
c0025093:	55                   	push   ebp
c0025094:	89 e5                	mov    ebp,esp
c0025096:	57                   	push   edi
c0025097:	56                   	push   esi
c0025098:	53                   	push   ebx
c0025099:	83 ec 24             	sub    esp,0x24
c002509c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002509f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00250a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00250a5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00250a8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00250ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00250ae:	89 c8                	mov    eax,ecx
c00250b0:	89 ce                	mov    esi,ecx
c00250b2:	c1 fe 14             	sar    esi,0x14
c00250b5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00250b8:	89 fb                	mov    ebx,edi
c00250ba:	89 fa                	mov    edx,edi
c00250bc:	c1 e2 0b             	shl    edx,0xb
c00250bf:	c1 e0 0b             	shl    eax,0xb
c00250c2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00250c7:	c1 eb 15             	shr    ebx,0x15
c00250ca:	09 d8                	or     eax,ebx
c00250cc:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00250cf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00250d2:	c1 fe 14             	sar    esi,0x14
c00250d5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00250d8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00250db:	89 f3                	mov    ebx,esi
c00250dd:	c1 e3 0b             	shl    ebx,0xb
c00250e0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00250e3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00250e6:	c1 e3 0b             	shl    ebx,0xb
c00250e9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00250ef:	c1 ee 15             	shr    esi,0x15
c00250f2:	09 f3                	or     ebx,esi
c00250f4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00250f7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00250fa:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00250fd:	0f 88 5f 02 00 00    	js     c0025362 <__adddf3+0x2cf>
c0025103:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025106:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025109:	85 db                	test   ebx,ebx
c002510b:	0f 8e c7 00 00 00    	jle    c00251d8 <__adddf3+0x145>
c0025111:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025118:	75 1a                	jne    c0025134 <__adddf3+0xa1>
c002511a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002511d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025120:	0f 84 b2 05 00 00    	je     c00256d8 <__adddf3+0x645>
c0025126:	4b                   	dec    ebx
c0025127:	75 23                	jne    c002514c <__adddf3+0xb9>
c0025129:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002512c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002512f:	e9 99 00 00 00       	jmp    c00251cd <__adddf3+0x13a>
c0025134:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025137:	f7 d6                	not    esi
c0025139:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002513f:	0f 84 93 05 00 00    	je     c00256d8 <__adddf3+0x645>
c0025145:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002514c:	83 fb 1f             	cmp    ebx,0x1f
c002514f:	7e 42                	jle    c0025193 <__adddf3+0x100>
c0025151:	83 fb 3f             	cmp    ebx,0x3f
c0025154:	0f 8f 7e 05 00 00    	jg     c00256d8 <__adddf3+0x645>
c002515a:	83 e3 1f             	and    ebx,0x1f
c002515d:	89 d9                	mov    ecx,ebx
c002515f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025162:	d3 ef                	shr    edi,cl
c0025164:	31 db                	xor    ebx,ebx
c0025166:	85 c9                	test   ecx,ecx
c0025168:	74 15                	je     c002517f <__adddf3+0xec>
c002516a:	be 20 00 00 00       	mov    esi,0x20
c002516f:	29 ce                	sub    esi,ecx
c0025171:	89 f1                	mov    ecx,esi
c0025173:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025176:	d3 e6                	shl    esi,cl
c0025178:	31 db                	xor    ebx,ebx
c002517a:	85 f6                	test   esi,esi
c002517c:	0f 95 c3             	setne  bl
c002517f:	31 c9                	xor    ecx,ecx
c0025181:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025185:	0f 95 c1             	setne  cl
c0025188:	09 cf                	or     edi,ecx
c002518a:	09 fb                	or     ebx,edi
c002518c:	01 da                	add    edx,ebx
c002518e:	83 d0 00             	adc    eax,0x0
c0025191:	eb 3a                	jmp    c00251cd <__adddf3+0x13a>
c0025193:	bf 20 00 00 00       	mov    edi,0x20
c0025198:	29 df                	sub    edi,ebx
c002519a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002519d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00251a0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00251a3:	d3 e6                	shl    esi,cl
c00251a5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00251a8:	88 d9                	mov    cl,bl
c00251aa:	d3 ef                	shr    edi,cl
c00251ac:	09 fe                	or     esi,edi
c00251ae:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00251b1:	88 d9                	mov    cl,bl
c00251b3:	d3 ef                	shr    edi,cl
c00251b5:	89 fb                	mov    ebx,edi
c00251b7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00251ba:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00251bd:	d3 e7                	shl    edi,cl
c00251bf:	85 ff                	test   edi,edi
c00251c1:	0f 95 c1             	setne  cl
c00251c4:	0f b6 c9             	movzx  ecx,cl
c00251c7:	09 ce                	or     esi,ecx
c00251c9:	01 f2                	add    edx,esi
c00251cb:	11 d8                	adc    eax,ebx
c00251cd:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00251d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00251d3:	e9 52 01 00 00       	jmp    c002532a <__adddf3+0x297>
c00251d8:	0f 84 d5 00 00 00    	je     c00252b3 <__adddf3+0x220>
c00251de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00251e1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00251e4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00251e7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00251ea:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00251f1:	75 20                	jne    c0025213 <__adddf3+0x180>
c00251f3:	89 d6                	mov    esi,edx
c00251f5:	09 c6                	or     esi,eax
c00251f7:	0f 84 db 04 00 00    	je     c00256d8 <__adddf3+0x645>
c00251fd:	4b                   	dec    ebx
c00251fe:	75 29                	jne    c0025229 <__adddf3+0x196>
c0025200:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025203:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025206:	01 d1                	add    ecx,edx
c0025208:	11 c6                	adc    esi,eax
c002520a:	89 f0                	mov    eax,esi
c002520c:	89 ca                	mov    edx,ecx
c002520e:	e9 17 01 00 00       	jmp    c002532a <__adddf3+0x297>
c0025213:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025216:	f7 d6                	not    esi
c0025218:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002521e:	0f 84 b4 04 00 00    	je     c00256d8 <__adddf3+0x645>
c0025224:	0d 00 00 00 80       	or     eax,0x80000000
c0025229:	83 fb 1f             	cmp    ebx,0x1f
c002522c:	7e 48                	jle    c0025276 <__adddf3+0x1e3>
c002522e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025231:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025234:	83 fb 3f             	cmp    ebx,0x3f
c0025237:	0f 8f 9b 04 00 00    	jg     c00256d8 <__adddf3+0x645>
c002523d:	83 e3 1f             	and    ebx,0x1f
c0025240:	89 d9                	mov    ecx,ebx
c0025242:	89 c7                	mov    edi,eax
c0025244:	d3 ef                	shr    edi,cl
c0025246:	31 db                	xor    ebx,ebx
c0025248:	85 c9                	test   ecx,ecx
c002524a:	74 12                	je     c002525e <__adddf3+0x1cb>
c002524c:	be 20 00 00 00       	mov    esi,0x20
c0025251:	29 ce                	sub    esi,ecx
c0025253:	89 f1                	mov    ecx,esi
c0025255:	d3 e0                	shl    eax,cl
c0025257:	31 db                	xor    ebx,ebx
c0025259:	85 c0                	test   eax,eax
c002525b:	0f 95 c3             	setne  bl
c002525e:	31 c0                	xor    eax,eax
c0025260:	85 d2                	test   edx,edx
c0025262:	0f 95 c0             	setne  al
c0025265:	09 c7                	or     edi,eax
c0025267:	09 fb                	or     ebx,edi
c0025269:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002526c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002526f:	01 da                	add    edx,ebx
c0025271:	83 d6 00             	adc    esi,0x0
c0025274:	eb 39                	jmp    c00252af <__adddf3+0x21c>
c0025276:	be 20 00 00 00       	mov    esi,0x20
c002527b:	29 de                	sub    esi,ebx
c002527d:	89 c7                	mov    edi,eax
c002527f:	89 f1                	mov    ecx,esi
c0025281:	d3 e7                	shl    edi,cl
c0025283:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0025286:	89 d7                	mov    edi,edx
c0025288:	88 d9                	mov    cl,bl
c002528a:	d3 ef                	shr    edi,cl
c002528c:	89 f9                	mov    ecx,edi
c002528e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025291:	09 cf                	or     edi,ecx
c0025293:	88 d9                	mov    cl,bl
c0025295:	d3 e8                	shr    eax,cl
c0025297:	89 f1                	mov    ecx,esi
c0025299:	d3 e2                	shl    edx,cl
c002529b:	85 d2                	test   edx,edx
c002529d:	0f 95 c2             	setne  dl
c00252a0:	0f b6 d2             	movzx  edx,dl
c00252a3:	09 d7                	or     edi,edx
c00252a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00252a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00252ab:	01 fa                	add    edx,edi
c00252ad:	11 c6                	adc    esi,eax
c00252af:	89 f0                	mov    eax,esi
c00252b1:	eb 77                	jmp    c002532a <__adddf3+0x297>
c00252b3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00252b6:	46                   	inc    esi
c00252b7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00252ba:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00252c0:	75 41                	jne    c0025303 <__adddf3+0x270>
c00252c2:	89 d3                	mov    ebx,edx
c00252c4:	09 c3                	or     ebx,eax
c00252c6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00252cd:	75 27                	jne    c00252f6 <__adddf3+0x263>
c00252cf:	85 db                	test   ebx,ebx
c00252d1:	0f 84 fb 03 00 00    	je     c00256d2 <__adddf3+0x63f>
c00252d7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00252da:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00252dd:	0f 84 f5 03 00 00    	je     c00256d8 <__adddf3+0x645>
c00252e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00252e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00252e9:	85 c0                	test   eax,eax
c00252eb:	0f 89 91 03 00 00    	jns    c0025682 <__adddf3+0x5ef>
c00252f1:	e9 85 03 00 00       	jmp    c002567b <__adddf3+0x5e8>
c00252f6:	85 db                	test   ebx,ebx
c00252f8:	0f 85 da 03 00 00    	jne    c00256d8 <__adddf3+0x645>
c00252fe:	e9 cf 03 00 00       	jmp    c00256d2 <__adddf3+0x63f>
c0025303:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025306:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025309:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002530c:	f7 d1                	not    ecx
c002530e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025314:	0f 84 70 03 00 00    	je     c002568a <__adddf3+0x5f7>
c002531a:	d1 ea                	shr    edx,1
c002531c:	89 c1                	mov    ecx,eax
c002531e:	c1 e1 1f             	shl    ecx,0x1f
c0025321:	09 ca                	or     edx,ecx
c0025323:	d1 e8                	shr    eax,1
c0025325:	e9 6f 03 00 00       	jmp    c0025699 <__adddf3+0x606>
c002532a:	85 c0                	test   eax,eax
c002532c:	0f 89 67 03 00 00    	jns    c0025699 <__adddf3+0x606>
c0025332:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0025335:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025338:	f7 d1                	not    ecx
c002533a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025340:	0f 84 44 03 00 00    	je     c002568a <__adddf3+0x5f7>
c0025346:	89 d1                	mov    ecx,edx
c0025348:	d1 e9                	shr    ecx,1
c002534a:	83 e2 01             	and    edx,0x1
c002534d:	09 ca                	or     edx,ecx
c002534f:	89 c1                	mov    ecx,eax
c0025351:	c1 e1 1f             	shl    ecx,0x1f
c0025354:	09 ca                	or     edx,ecx
c0025356:	d1 e8                	shr    eax,1
c0025358:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002535d:	e9 37 03 00 00       	jmp    c0025699 <__adddf3+0x606>
c0025362:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025365:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002536b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002536e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025371:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025377:	29 de                	sub    esi,ebx
c0025379:	85 f6                	test   esi,esi
c002537b:	0f 8e bd 00 00 00    	jle    c002543e <__adddf3+0x3ab>
c0025381:	85 db                	test   ebx,ebx
c0025383:	75 17                	jne    c002539c <__adddf3+0x309>
c0025385:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025388:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002538b:	0f 84 47 03 00 00    	je     c00256d8 <__adddf3+0x645>
c0025391:	4e                   	dec    esi
c0025392:	75 20                	jne    c00253b4 <__adddf3+0x321>
c0025394:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0025397:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002539a:	eb 5b                	jmp    c00253f7 <__adddf3+0x364>
c002539c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002539f:	f7 d3                	not    ebx
c00253a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00253a7:	0f 84 2b 03 00 00    	je     c00256d8 <__adddf3+0x645>
c00253ad:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00253b4:	83 fe 1f             	cmp    esi,0x1f
c00253b7:	7e 49                	jle    c0025402 <__adddf3+0x36f>
c00253b9:	83 fe 3f             	cmp    esi,0x3f
c00253bc:	0f 8f 16 03 00 00    	jg     c00256d8 <__adddf3+0x645>
c00253c2:	83 e6 1f             	and    esi,0x1f
c00253c5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00253c8:	89 f1                	mov    ecx,esi
c00253ca:	d3 ef                	shr    edi,cl
c00253cc:	31 db                	xor    ebx,ebx
c00253ce:	85 f6                	test   esi,esi
c00253d0:	74 13                	je     c00253e5 <__adddf3+0x352>
c00253d2:	b9 20 00 00 00       	mov    ecx,0x20
c00253d7:	29 f1                	sub    ecx,esi
c00253d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00253dc:	d3 e6                	shl    esi,cl
c00253de:	31 db                	xor    ebx,ebx
c00253e0:	85 f6                	test   esi,esi
c00253e2:	0f 95 c3             	setne  bl
c00253e5:	31 c9                	xor    ecx,ecx
c00253e7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00253eb:	0f 95 c1             	setne  cl
c00253ee:	09 cf                	or     edi,ecx
c00253f0:	09 fb                	or     ebx,edi
c00253f2:	29 da                	sub    edx,ebx
c00253f4:	83 d8 00             	sbb    eax,0x0
c00253f7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00253fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00253fd:	e9 aa 01 00 00       	jmp    c00255ac <__adddf3+0x519>
c0025402:	bf 20 00 00 00       	mov    edi,0x20
c0025407:	29 f7                	sub    edi,esi
c0025409:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002540c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002540f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025412:	d3 e3                	shl    ebx,cl
c0025414:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025417:	89 f1                	mov    ecx,esi
c0025419:	d3 ef                	shr    edi,cl
c002541b:	09 fb                	or     ebx,edi
c002541d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025420:	89 f1                	mov    ecx,esi
c0025422:	d3 ef                	shr    edi,cl
c0025424:	89 fe                	mov    esi,edi
c0025426:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025429:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002542c:	d3 e7                	shl    edi,cl
c002542e:	85 ff                	test   edi,edi
c0025430:	0f 95 c1             	setne  cl
c0025433:	0f b6 c9             	movzx  ecx,cl
c0025436:	09 cb                	or     ebx,ecx
c0025438:	29 da                	sub    edx,ebx
c002543a:	19 f0                	sbb    eax,esi
c002543c:	eb b9                	jmp    c00253f7 <__adddf3+0x364>
c002543e:	0f 84 cd 00 00 00    	je     c0025511 <__adddf3+0x47e>
c0025444:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0025447:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002544a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002544d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025451:	75 1b                	jne    c002546e <__adddf3+0x3db>
c0025453:	89 d6                	mov    esi,edx
c0025455:	09 c6                	or     esi,eax
c0025457:	0f 84 7b 02 00 00    	je     c00256d8 <__adddf3+0x645>
c002545d:	4b                   	dec    ebx
c002545e:	75 24                	jne    c0025484 <__adddf3+0x3f1>
c0025460:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025463:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025466:	29 d1                	sub    ecx,edx
c0025468:	19 c6                	sbb    esi,eax
c002546a:	89 ca                	mov    edx,ecx
c002546c:	eb 61                	jmp    c00254cf <__adddf3+0x43c>
c002546e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025471:	f7 d6                	not    esi
c0025473:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025479:	0f 84 59 02 00 00    	je     c00256d8 <__adddf3+0x645>
c002547f:	0d 00 00 00 80       	or     eax,0x80000000
c0025484:	83 fb 1f             	cmp    ebx,0x1f
c0025487:	7e 4d                	jle    c00254d6 <__adddf3+0x443>
c0025489:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002548c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002548f:	83 fb 3f             	cmp    ebx,0x3f
c0025492:	0f 8f 40 02 00 00    	jg     c00256d8 <__adddf3+0x645>
c0025498:	83 e3 1f             	and    ebx,0x1f
c002549b:	89 d9                	mov    ecx,ebx
c002549d:	89 c7                	mov    edi,eax
c002549f:	d3 ef                	shr    edi,cl
c00254a1:	31 db                	xor    ebx,ebx
c00254a3:	85 c9                	test   ecx,ecx
c00254a5:	74 12                	je     c00254b9 <__adddf3+0x426>
c00254a7:	be 20 00 00 00       	mov    esi,0x20
c00254ac:	29 ce                	sub    esi,ecx
c00254ae:	89 f1                	mov    ecx,esi
c00254b0:	d3 e0                	shl    eax,cl
c00254b2:	31 db                	xor    ebx,ebx
c00254b4:	85 c0                	test   eax,eax
c00254b6:	0f 95 c3             	setne  bl
c00254b9:	31 c0                	xor    eax,eax
c00254bb:	85 d2                	test   edx,edx
c00254bd:	0f 95 c0             	setne  al
c00254c0:	09 c7                	or     edi,eax
c00254c2:	09 fb                	or     ebx,edi
c00254c4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00254c7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00254ca:	29 da                	sub    edx,ebx
c00254cc:	83 de 00             	sbb    esi,0x0
c00254cf:	89 f0                	mov    eax,esi
c00254d1:	e9 d6 00 00 00       	jmp    c00255ac <__adddf3+0x519>
c00254d6:	be 20 00 00 00       	mov    esi,0x20
c00254db:	29 de                	sub    esi,ebx
c00254dd:	89 c7                	mov    edi,eax
c00254df:	89 f1                	mov    ecx,esi
c00254e1:	d3 e7                	shl    edi,cl
c00254e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00254e6:	89 d7                	mov    edi,edx
c00254e8:	88 d9                	mov    cl,bl
c00254ea:	d3 ef                	shr    edi,cl
c00254ec:	89 f9                	mov    ecx,edi
c00254ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00254f1:	09 cf                	or     edi,ecx
c00254f3:	88 d9                	mov    cl,bl
c00254f5:	d3 e8                	shr    eax,cl
c00254f7:	89 f1                	mov    ecx,esi
c00254f9:	d3 e2                	shl    edx,cl
c00254fb:	85 d2                	test   edx,edx
c00254fd:	0f 95 c2             	setne  dl
c0025500:	0f b6 d2             	movzx  edx,dl
c0025503:	09 d7                	or     edi,edx
c0025505:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025508:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002550b:	29 fa                	sub    edx,edi
c002550d:	19 c6                	sbb    esi,eax
c002550f:	eb be                	jmp    c00254cf <__adddf3+0x43c>
c0025511:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025514:	8d 5e 01             	lea    ebx,[esi+0x1]
c0025517:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002551d:	75 6a                	jne    c0025589 <__adddf3+0x4f6>
c002551f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025523:	75 58                	jne    c002557d <__adddf3+0x4ea>
c0025525:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025528:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002552b:	89 d6                	mov    esi,edx
c002552d:	09 c6                	or     esi,eax
c002552f:	75 17                	jne    c0025548 <__adddf3+0x4b5>
c0025531:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025534:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025537:	85 db                	test   ebx,ebx
c0025539:	0f 85 99 01 00 00    	jne    c00256d8 <__adddf3+0x645>
c002553f:	31 ff                	xor    edi,edi
c0025541:	31 c9                	xor    ecx,ecx
c0025543:	e9 90 01 00 00       	jmp    c00256d8 <__adddf3+0x645>
c0025548:	85 db                	test   ebx,ebx
c002554a:	0f 84 88 01 00 00    	je     c00256d8 <__adddf3+0x645>
c0025550:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0025553:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0025556:	85 c0                	test   eax,eax
c0025558:	79 10                	jns    c002556a <__adddf3+0x4d7>
c002555a:	31 c9                	xor    ecx,ecx
c002555c:	f7 da                	neg    edx
c002555e:	0f 95 c1             	setne  cl
c0025561:	01 c8                	add    eax,ecx
c0025563:	f7 d8                	neg    eax
c0025565:	e9 2f 01 00 00       	jmp    c0025699 <__adddf3+0x606>
c002556a:	31 ff                	xor    edi,edi
c002556c:	31 c9                	xor    ecx,ecx
c002556e:	89 c3                	mov    ebx,eax
c0025570:	09 d3                	or     ebx,edx
c0025572:	0f 84 60 01 00 00    	je     c00256d8 <__adddf3+0x645>
c0025578:	e9 05 01 00 00       	jmp    c0025682 <__adddf3+0x5ef>
c002557d:	31 ff                	xor    edi,edi
c002557f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0025584:	e9 4f 01 00 00       	jmp    c00256d8 <__adddf3+0x645>
c0025589:	89 c1                	mov    ecx,eax
c002558b:	89 d0                	mov    eax,edx
c002558d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0025590:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0025593:	89 ca                	mov    edx,ecx
c0025595:	85 c9                	test   ecx,ecx
c0025597:	79 2c                	jns    c00255c5 <__adddf3+0x532>
c0025599:	31 c9                	xor    ecx,ecx
c002559b:	f7 d8                	neg    eax
c002559d:	0f 95 c1             	setne  cl
c00255a0:	01 ca                	add    edx,ecx
c00255a2:	f7 da                	neg    edx
c00255a4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00255a7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00255aa:	eb 19                	jmp    c00255c5 <__adddf3+0x532>
c00255ac:	85 c0                	test   eax,eax
c00255ae:	0f 89 e5 00 00 00    	jns    c0025699 <__adddf3+0x606>
c00255b4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00255b9:	89 c1                	mov    ecx,eax
c00255bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00255be:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00255c1:	89 d0                	mov    eax,edx
c00255c3:	89 ca                	mov    edx,ecx
c00255c5:	85 d2                	test   edx,edx
c00255c7:	74 59                	je     c0025622 <__adddf3+0x58f>
c00255c9:	0f bd da             	bsr    ebx,edx
c00255cc:	83 f3 1f             	xor    ebx,0x1f
c00255cf:	88 d9                	mov    cl,bl
c00255d1:	d3 e2                	shl    edx,cl
c00255d3:	bf 20 00 00 00       	mov    edi,0x20
c00255d8:	89 f9                	mov    ecx,edi
c00255da:	29 d9                	sub    ecx,ebx
c00255dc:	89 c6                	mov    esi,eax
c00255de:	d3 ee                	shr    esi,cl
c00255e0:	09 d6                	or     esi,edx
c00255e2:	88 d9                	mov    cl,bl
c00255e4:	d3 e0                	shl    eax,cl
c00255e6:	89 c2                	mov    edx,eax
c00255e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255eb:	25 ff 07 00 00       	and    eax,0x7ff
c00255f0:	39 d8                	cmp    eax,ebx
c00255f2:	7f 22                	jg     c0025616 <__adddf3+0x583>
c00255f4:	29 c3                	sub    ebx,eax
c00255f6:	43                   	inc    ebx
c00255f7:	88 d9                	mov    cl,bl
c00255f9:	d3 ea                	shr    edx,cl
c00255fb:	29 df                	sub    edi,ebx
c00255fd:	89 f9                	mov    ecx,edi
c00255ff:	89 f0                	mov    eax,esi
c0025601:	d3 e0                	shl    eax,cl
c0025603:	09 c2                	or     edx,eax
c0025605:	89 f0                	mov    eax,esi
c0025607:	88 d9                	mov    cl,bl
c0025609:	d3 e8                	shr    eax,cl
c002560b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002560e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0025614:	eb 6f                	jmp    c0025685 <__adddf3+0x5f2>
c0025616:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025619:	29 d8                	sub    eax,ebx
c002561b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002561e:	89 f0                	mov    eax,esi
c0025620:	eb 59                	jmp    c002567b <__adddf3+0x5e8>
c0025622:	85 c0                	test   eax,eax
c0025624:	74 6a                	je     c0025690 <__adddf3+0x5fd>
c0025626:	0f bd c8             	bsr    ecx,eax
c0025629:	83 f1 1f             	xor    ecx,0x1f
c002562c:	d3 e0                	shl    eax,cl
c002562e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025631:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025637:	83 c1 20             	add    ecx,0x20
c002563a:	39 cb                	cmp    ebx,ecx
c002563c:	7f 35                	jg     c0025673 <__adddf3+0x5e0>
c002563e:	29 d9                	sub    ecx,ebx
c0025640:	8d 71 01             	lea    esi,[ecx+0x1]
c0025643:	83 fe 1f             	cmp    esi,0x1f
c0025646:	7e 09                	jle    c0025651 <__adddf3+0x5be>
c0025648:	83 e9 1f             	sub    ecx,0x1f
c002564b:	d3 e8                	shr    eax,cl
c002564d:	89 c3                	mov    ebx,eax
c002564f:	eb 11                	jmp    c0025662 <__adddf3+0x5cf>
c0025651:	b9 20 00 00 00       	mov    ecx,0x20
c0025656:	29 f1                	sub    ecx,esi
c0025658:	89 c3                	mov    ebx,eax
c002565a:	d3 e3                	shl    ebx,cl
c002565c:	89 f1                	mov    ecx,esi
c002565e:	d3 e8                	shr    eax,cl
c0025660:	89 c2                	mov    edx,eax
c0025662:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025665:	25 00 f8 ff ff       	and    eax,0xfffff800
c002566a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002566d:	89 d0                	mov    eax,edx
c002566f:	89 da                	mov    edx,ebx
c0025671:	eb 26                	jmp    c0025699 <__adddf3+0x606>
c0025673:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025676:	29 cf                	sub    edi,ecx
c0025678:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002567b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025680:	eb 17                	jmp    c0025699 <__adddf3+0x606>
c0025682:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025685:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025688:	eb 0f                	jmp    c0025699 <__adddf3+0x606>
c002568a:	31 d2                	xor    edx,edx
c002568c:	31 c0                	xor    eax,eax
c002568e:	eb 09                	jmp    c0025699 <__adddf3+0x606>
c0025690:	89 c2                	mov    edx,eax
c0025692:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0025699:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002569c:	c1 e1 14             	shl    ecx,0x14
c002569f:	89 c3                	mov    ebx,eax
c00256a1:	c1 eb 0b             	shr    ebx,0xb
c00256a4:	09 d9                	or     ecx,ebx
c00256a6:	89 d3                	mov    ebx,edx
c00256a8:	c1 eb 0b             	shr    ebx,0xb
c00256ab:	c1 e0 15             	shl    eax,0x15
c00256ae:	09 d8                	or     eax,ebx
c00256b0:	89 c7                	mov    edi,eax
c00256b2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00256b8:	0f 95 c0             	setne  al
c00256bb:	89 c6                	mov    esi,eax
c00256bd:	09 f3                	or     ebx,esi
c00256bf:	83 e3 01             	and    ebx,0x1
c00256c2:	c1 ea 0a             	shr    edx,0xa
c00256c5:	21 da                	and    edx,ebx
c00256c7:	89 f8                	mov    eax,edi
c00256c9:	01 d0                	add    eax,edx
c00256cb:	83 d1 00             	adc    ecx,0x0
c00256ce:	89 c7                	mov    edi,eax
c00256d0:	eb 06                	jmp    c00256d8 <__adddf3+0x645>
c00256d2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00256d5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00256d8:	89 f8                	mov    eax,edi
c00256da:	89 ca                	mov    edx,ecx
c00256dc:	83 c4 24             	add    esp,0x24
c00256df:	5b                   	pop    ebx
c00256e0:	5e                   	pop    esi
c00256e1:	5f                   	pop    edi
c00256e2:	5d                   	pop    ebp
c00256e3:	c3                   	ret    

c00256e4 <__subdf3>:
c00256e4:	55                   	push   ebp
c00256e5:	89 e5                	mov    ebp,esp
c00256e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00256ea:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00256ed:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00256f3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00256f6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00256f9:	5d                   	pop    ebp
c00256fa:	e9 94 f9 ff ff       	jmp    c0025093 <__adddf3>

c00256ff <__negdf2>:
c00256ff:	55                   	push   ebp
c0025700:	89 e5                	mov    ebp,esp
c0025702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025705:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025708:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002570e:	5d                   	pop    ebp
c002570f:	c3                   	ret    

c0025710 <__muldf3>:
c0025710:	55                   	push   ebp
c0025711:	89 e5                	mov    ebp,esp
c0025713:	57                   	push   edi
c0025714:	56                   	push   esi
c0025715:	53                   	push   ebx
c0025716:	83 ec 24             	sub    esp,0x24
c0025719:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002571c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002571f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025722:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025725:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025728:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002572b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002572e:	89 c8                	mov    eax,ecx
c0025730:	c1 f8 14             	sar    eax,0x14
c0025733:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025736:	89 f8                	mov    eax,edi
c0025738:	89 fb                	mov    ebx,edi
c002573a:	c1 e3 0b             	shl    ebx,0xb
c002573d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0025740:	c1 e1 0b             	shl    ecx,0xb
c0025743:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025749:	c1 e8 15             	shr    eax,0x15
c002574c:	09 c1                	or     ecx,eax
c002574e:	89 d6                	mov    esi,edx
c0025750:	89 d0                	mov    eax,edx
c0025752:	c1 f8 14             	sar    eax,0x14
c0025755:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025758:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002575b:	89 c3                	mov    ebx,eax
c002575d:	c1 e3 0b             	shl    ebx,0xb
c0025760:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025763:	c1 e6 0b             	shl    esi,0xb
c0025766:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002576c:	c1 e8 15             	shr    eax,0x15
c002576f:	09 c6                	or     esi,eax
c0025771:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025774:	25 ff 07 00 00       	and    eax,0x7ff
c0025779:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002577c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002577f:	25 ff 07 00 00       	and    eax,0x7ff
c0025784:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0025787:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002578a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002578d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0025794:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025797:	40                   	inc    eax
c0025798:	a9 fe 07 00 00       	test   eax,0x7fe
c002579d:	0f 85 8d 00 00 00    	jne    c0025830 <__muldf3+0x120>
c00257a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00257a6:	09 c8                	or     eax,ecx
c00257a8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00257ac:	74 44                	je     c00257f2 <__muldf3+0xe2>
c00257ae:	85 c0                	test   eax,eax
c00257b0:	0f 85 31 02 00 00    	jne    c00259e7 <__muldf3+0x2d7>
c00257b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00257b9:	40                   	inc    eax
c00257ba:	a9 fe 07 00 00       	test   eax,0x7fe
c00257bf:	75 13                	jne    c00257d4 <__muldf3+0xc4>
c00257c1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00257c4:	09 f1                	or     ecx,esi
c00257c6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00257ca:	74 22                	je     c00257ee <__muldf3+0xde>
c00257cc:	85 c9                	test   ecx,ecx
c00257ce:	0f 85 0d 02 00 00    	jne    c00259e1 <__muldf3+0x2d1>
c00257d4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00257d8:	0f 89 09 02 00 00    	jns    c00259e7 <__muldf3+0x2d7>
c00257de:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00257e1:	05 00 00 00 80       	add    eax,0x80000000
c00257e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00257e9:	e9 f9 01 00 00       	jmp    c00259e7 <__muldf3+0x2d7>
c00257ee:	85 c9                	test   ecx,ecx
c00257f0:	eb 2e                	jmp    c0025820 <__muldf3+0x110>
c00257f2:	85 c0                	test   eax,eax
c00257f4:	74 20                	je     c0025816 <__muldf3+0x106>
c00257f6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00257f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00257fc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00257ff:	c1 ef 1f             	shr    edi,0x1f
c0025802:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0025805:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0025808:	8d 43 ff             	lea    eax,[ebx-0x1]
c002580b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002580e:	09 f9                	or     ecx,edi
c0025810:	78 1e                	js     c0025830 <__muldf3+0x120>
c0025812:	89 c3                	mov    ebx,eax
c0025814:	eb e0                	jmp    c00257f6 <__muldf3+0xe6>
c0025816:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025819:	f7 d0                	not    eax
c002581b:	a9 ff 07 00 00       	test   eax,0x7ff
c0025820:	75 b2                	jne    c00257d4 <__muldf3+0xc4>
c0025822:	31 ff                	xor    edi,edi
c0025824:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002582b:	e9 b7 01 00 00       	jmp    c00259e7 <__muldf3+0x2d7>
c0025830:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025833:	40                   	inc    eax
c0025834:	a9 fe 07 00 00       	test   eax,0x7fe
c0025839:	75 57                	jne    c0025892 <__muldf3+0x182>
c002583b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002583e:	09 f0                	or     eax,esi
c0025840:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025844:	74 23                	je     c0025869 <__muldf3+0x159>
c0025846:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002584a:	0f 89 91 01 00 00    	jns    c00259e1 <__muldf3+0x2d1>
c0025850:	85 c0                	test   eax,eax
c0025852:	0f 85 89 01 00 00    	jne    c00259e1 <__muldf3+0x2d1>
c0025858:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002585b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0025861:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025864:	e9 7e 01 00 00       	jmp    c00259e7 <__muldf3+0x2d7>
c0025869:	85 c0                	test   eax,eax
c002586b:	75 0c                	jne    c0025879 <__muldf3+0x169>
c002586d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025871:	0f 89 6a 01 00 00    	jns    c00259e1 <__muldf3+0x2d1>
c0025877:	eb df                	jmp    c0025858 <__muldf3+0x148>
c0025879:	01 f6                	add    esi,esi
c002587b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002587e:	c1 ea 1f             	shr    edx,0x1f
c0025881:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025884:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0025887:	8d 43 ff             	lea    eax,[ebx-0x1]
c002588a:	09 d6                	or     esi,edx
c002588c:	78 04                	js     c0025892 <__muldf3+0x182>
c002588e:	89 c3                	mov    ebx,eax
c0025890:	eb e7                	jmp    c0025879 <__muldf3+0x169>
c0025892:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0025898:	81 ce 00 00 00 80    	or     esi,0x80000000
c002589e:	89 c8                	mov    eax,ecx
c00258a0:	f7 e6                	mul    esi
c00258a2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00258a5:	89 c7                	mov    edi,eax
c00258a7:	89 c8                	mov    eax,ecx
c00258a9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00258ac:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00258af:	89 c1                	mov    ecx,eax
c00258b1:	89 f0                	mov    eax,esi
c00258b3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00258b6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00258b9:	89 c6                	mov    esi,eax
c00258bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00258be:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00258c1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00258c4:	31 c0                	xor    eax,eax
c00258c6:	01 f1                	add    ecx,esi
c00258c8:	0f 92 c0             	setb   al
c00258cb:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00258ce:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00258d1:	83 d6 00             	adc    esi,0x0
c00258d4:	01 c7                	add    edi,eax
c00258d6:	83 d6 00             	adc    esi,0x0
c00258d9:	01 ca                	add    edx,ecx
c00258db:	0f 92 c1             	setb   cl
c00258de:	0f b6 c9             	movzx  ecx,cl
c00258e1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00258e4:	83 d6 00             	adc    esi,0x0
c00258e7:	01 cf                	add    edi,ecx
c00258e9:	83 d6 00             	adc    esi,0x0
c00258ec:	31 c9                	xor    ecx,ecx
c00258ee:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00258f1:	0f 95 c1             	setne  cl
c00258f4:	09 cf                	or     edi,ecx
c00258f6:	85 f6                	test   esi,esi
c00258f8:	78 0c                	js     c0025906 <__muldf3+0x1f6>
c00258fa:	01 f6                	add    esi,esi
c00258fc:	89 f8                	mov    eax,edi
c00258fe:	c1 e8 1f             	shr    eax,0x1f
c0025901:	09 c6                	or     esi,eax
c0025903:	01 ff                	add    edi,edi
c0025905:	4b                   	dec    ebx
c0025906:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002590c:	0f 8f 85 00 00 00    	jg     c0025997 <__muldf3+0x287>
c0025912:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0025918:	85 db                	test   ebx,ebx
c002591a:	0f 8f 84 00 00 00    	jg     c00259a4 <__muldf3+0x294>
c0025920:	83 fb cc             	cmp    ebx,0xffffffcc
c0025923:	7c 79                	jl     c002599e <__muldf3+0x28e>
c0025925:	ba 01 00 00 00       	mov    edx,0x1
c002592a:	29 da                	sub    edx,ebx
c002592c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025932:	83 fa 1f             	cmp    edx,0x1f
c0025935:	7e 30                	jle    c0025967 <__muldf3+0x257>
c0025937:	83 fa 20             	cmp    edx,0x20
c002593a:	75 0b                	jne    c0025947 <__muldf3+0x237>
c002593c:	31 c0                	xor    eax,eax
c002593e:	85 ff                	test   edi,edi
c0025940:	0f 95 c0             	setne  al
c0025943:	89 c7                	mov    edi,eax
c0025945:	eb 1a                	jmp    c0025961 <__muldf3+0x251>
c0025947:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002594a:	89 f0                	mov    eax,esi
c002594c:	d3 e0                	shl    eax,cl
c002594e:	09 f8                	or     eax,edi
c0025950:	0f 95 c0             	setne  al
c0025953:	0f b6 c0             	movzx  eax,al
c0025956:	89 c7                	mov    edi,eax
c0025958:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002595d:	29 d9                	sub    ecx,ebx
c002595f:	d3 ee                	shr    esi,cl
c0025961:	09 f7                	or     edi,esi
c0025963:	31 db                	xor    ebx,ebx
c0025965:	eb 3b                	jmp    c00259a2 <__muldf3+0x292>
c0025967:	83 c3 1f             	add    ebx,0x1f
c002596a:	89 f0                	mov    eax,esi
c002596c:	88 d9                	mov    cl,bl
c002596e:	d3 e0                	shl    eax,cl
c0025970:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025973:	89 f8                	mov    eax,edi
c0025975:	88 d1                	mov    cl,dl
c0025977:	d3 e8                	shr    eax,cl
c0025979:	89 c1                	mov    ecx,eax
c002597b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002597e:	09 c8                	or     eax,ecx
c0025980:	88 d9                	mov    cl,bl
c0025982:	d3 e7                	shl    edi,cl
c0025984:	31 db                	xor    ebx,ebx
c0025986:	85 ff                	test   edi,edi
c0025988:	0f 95 c3             	setne  bl
c002598b:	89 df                	mov    edi,ebx
c002598d:	09 c7                	or     edi,eax
c002598f:	88 d1                	mov    cl,dl
c0025991:	d3 ee                	shr    esi,cl
c0025993:	31 db                	xor    ebx,ebx
c0025995:	eb 0d                	jmp    c00259a4 <__muldf3+0x294>
c0025997:	bb ff 07 00 00       	mov    ebx,0x7ff
c002599c:	eb 02                	jmp    c00259a0 <__muldf3+0x290>
c002599e:	31 db                	xor    ebx,ebx
c00259a0:	31 ff                	xor    edi,edi
c00259a2:	31 f6                	xor    esi,esi
c00259a4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00259a7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00259aa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00259af:	09 c3                	or     ebx,eax
c00259b1:	c1 e3 14             	shl    ebx,0x14
c00259b4:	89 f0                	mov    eax,esi
c00259b6:	c1 e8 0b             	shr    eax,0xb
c00259b9:	09 c3                	or     ebx,eax
c00259bb:	89 f8                	mov    eax,edi
c00259bd:	c1 e8 0b             	shr    eax,0xb
c00259c0:	c1 e6 15             	shl    esi,0x15
c00259c3:	09 c6                	or     esi,eax
c00259c5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00259cb:	0f 95 c1             	setne  cl
c00259ce:	09 c8                	or     eax,ecx
c00259d0:	83 e0 01             	and    eax,0x1
c00259d3:	c1 ef 0a             	shr    edi,0xa
c00259d6:	21 c7                	and    edi,eax
c00259d8:	01 f7                	add    edi,esi
c00259da:	83 d3 00             	adc    ebx,0x0
c00259dd:	89 da                	mov    edx,ebx
c00259df:	eb 03                	jmp    c00259e4 <__muldf3+0x2d4>
c00259e1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00259e4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00259e7:	89 f8                	mov    eax,edi
c00259e9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00259ec:	83 c4 24             	add    esp,0x24
c00259ef:	5b                   	pop    ebx
c00259f0:	5e                   	pop    esi
c00259f1:	5f                   	pop    edi
c00259f2:	5d                   	pop    ebp
c00259f3:	c3                   	ret    

c00259f4 <__divdf3>:
c00259f4:	55                   	push   ebp
c00259f5:	89 e5                	mov    ebp,esp
c00259f7:	57                   	push   edi
c00259f8:	56                   	push   esi
c00259f9:	53                   	push   ebx
c00259fa:	83 ec 2c             	sub    esp,0x2c
c00259fd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025a00:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025a03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a06:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0025a09:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a0c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a0f:	89 ce                	mov    esi,ecx
c0025a11:	89 c8                	mov    eax,ecx
c0025a13:	c1 f8 14             	sar    eax,0x14
c0025a16:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a19:	89 f8                	mov    eax,edi
c0025a1b:	89 fb                	mov    ebx,edi
c0025a1d:	c1 e3 0b             	shl    ebx,0xb
c0025a20:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0025a23:	c1 e6 0b             	shl    esi,0xb
c0025a26:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0025a2c:	c1 e8 15             	shr    eax,0x15
c0025a2f:	09 c6                	or     esi,eax
c0025a31:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0025a34:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025a37:	89 c2                	mov    edx,eax
c0025a39:	c1 fa 14             	sar    edx,0x14
c0025a3c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025a3f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0025a42:	89 de                	mov    esi,ebx
c0025a44:	c1 e6 0b             	shl    esi,0xb
c0025a47:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025a4a:	c1 e0 0b             	shl    eax,0xb
c0025a4d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025a52:	c1 eb 15             	shr    ebx,0x15
c0025a55:	09 d8                	or     eax,ebx
c0025a57:	89 c2                	mov    edx,eax
c0025a59:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025a5c:	25 ff 07 00 00       	and    eax,0x7ff
c0025a61:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025a64:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025a67:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025a6d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0025a70:	29 d8                	sub    eax,ebx
c0025a72:	05 ff 03 00 00       	add    eax,0x3ff
c0025a77:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025a7a:	46                   	inc    esi
c0025a7b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0025a81:	0f 85 a5 00 00 00    	jne    c0025b2c <__divdf3+0x138>
c0025a87:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025a8a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0025a8d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0025a91:	74 2a                	je     c0025abd <__divdf3+0xc9>
c0025a93:	85 f6                	test   esi,esi
c0025a95:	0f 85 cc 02 00 00    	jne    c0025d67 <__divdf3+0x373>
c0025a9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025a9e:	40                   	inc    eax
c0025a9f:	a9 fe 07 00 00       	test   eax,0x7fe
c0025aa4:	75 26                	jne    c0025acc <__divdf3+0xd8>
c0025aa6:	85 db                	test   ebx,ebx
c0025aa8:	74 22                	je     c0025acc <__divdf3+0xd8>
c0025aaa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025aad:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025ab0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025ab3:	09 d0                	or     eax,edx
c0025ab5:	0f 85 ac 02 00 00    	jne    c0025d67 <__divdf3+0x373>
c0025abb:	eb 63                	jmp    c0025b20 <__divdf3+0x12c>
c0025abd:	85 f6                	test   esi,esi
c0025abf:	75 22                	jne    c0025ae3 <__divdf3+0xef>
c0025ac1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ac4:	40                   	inc    eax
c0025ac5:	a9 fe 07 00 00       	test   eax,0x7fe
c0025aca:	74 36                	je     c0025b02 <__divdf3+0x10e>
c0025acc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025ad0:	0f 89 91 02 00 00    	jns    c0025d67 <__divdf3+0x373>
c0025ad6:	89 f8                	mov    eax,edi
c0025ad8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025ade:	e9 80 02 00 00       	jmp    c0025d63 <__divdf3+0x36f>
c0025ae3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ae6:	01 f6                	add    esi,esi
c0025ae8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0025aeb:	c1 ef 1f             	shr    edi,0x1f
c0025aee:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025af1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0025af4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025af7:	09 f7                	or     edi,esi
c0025af9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0025afc:	78 2e                	js     c0025b2c <__divdf3+0x138>
c0025afe:	89 c8                	mov    eax,ecx
c0025b00:	eb e1                	jmp    c0025ae3 <__divdf3+0xef>
c0025b02:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025b05:	09 d0                	or     eax,edx
c0025b07:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025b0b:	74 0f                	je     c0025b1c <__divdf3+0x128>
c0025b0d:	85 c0                	test   eax,eax
c0025b0f:	74 bb                	je     c0025acc <__divdf3+0xd8>
c0025b11:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025b14:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025b17:	e9 4b 02 00 00       	jmp    c0025d67 <__divdf3+0x373>
c0025b1c:	85 c0                	test   eax,eax
c0025b1e:	75 ac                	jne    c0025acc <__divdf3+0xd8>
c0025b20:	31 ff                	xor    edi,edi
c0025b22:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0025b27:	e9 3b 02 00 00       	jmp    c0025d67 <__divdf3+0x373>
c0025b2c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025b2f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0025b32:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0025b38:	75 6b                	jne    c0025ba5 <__divdf3+0x1b1>
c0025b3a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025b3d:	09 d6                	or     esi,edx
c0025b3f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025b43:	74 28                	je     c0025b6d <__divdf3+0x179>
c0025b45:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025b48:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025b4b:	85 f6                	test   esi,esi
c0025b4d:	0f 85 14 02 00 00    	jne    c0025d67 <__divdf3+0x373>
c0025b53:	31 ff                	xor    edi,edi
c0025b55:	31 c9                	xor    ecx,ecx
c0025b57:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025b5a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025b5d:	0f 89 04 02 00 00    	jns    c0025d67 <__divdf3+0x373>
c0025b63:	b9 00 00 00 80       	mov    ecx,0x80000000
c0025b68:	e9 fa 01 00 00       	jmp    c0025d67 <__divdf3+0x373>
c0025b6d:	85 f6                	test   esi,esi
c0025b6f:	75 1b                	jne    c0025b8c <__divdf3+0x198>
c0025b71:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025b74:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025b77:	25 00 00 00 80       	and    eax,0x80000000
c0025b7c:	31 c9                	xor    ecx,ecx
c0025b7e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0025b83:	89 cf                	mov    edi,ecx
c0025b85:	89 c1                	mov    ecx,eax
c0025b87:	e9 db 01 00 00       	jmp    c0025d67 <__divdf3+0x373>
c0025b8c:	01 d2                	add    edx,edx
c0025b8e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025b91:	c1 eb 1f             	shr    ebx,0x1f
c0025b94:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025b97:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0025b9a:	8d 48 01             	lea    ecx,[eax+0x1]
c0025b9d:	09 da                	or     edx,ebx
c0025b9f:	78 04                	js     c0025ba5 <__divdf3+0x1b1>
c0025ba1:	89 c8                	mov    eax,ecx
c0025ba3:	eb e7                	jmp    c0025b8c <__divdf3+0x198>
c0025ba5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ba8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025bae:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025bb4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0025bb7:	39 d6                	cmp    esi,edx
c0025bb9:	77 0d                	ja     c0025bc8 <__divdf3+0x1d4>
c0025bbb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025bbe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0025bc1:	72 1b                	jb     c0025bde <__divdf3+0x1ea>
c0025bc3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0025bc6:	75 16                	jne    c0025bde <__divdf3+0x1ea>
c0025bc8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025bcb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025bce:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0025bd1:	83 de 00             	sbb    esi,0x0
c0025bd4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0025bd7:	ba 01 00 00 00       	mov    edx,0x1
c0025bdc:	eb 02                	jmp    c0025be0 <__divdf3+0x1ec>
c0025bde:	31 d2                	xor    edx,edx
c0025be0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0025be7:	31 ff                	xor    edi,edi
c0025be9:	01 ff                	add    edi,edi
c0025beb:	89 d1                	mov    ecx,edx
c0025bed:	c1 e9 1f             	shr    ecx,0x1f
c0025bf0:	09 cf                	or     edi,ecx
c0025bf2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0025bf5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0025bf8:	89 da                	mov    edx,ebx
c0025bfa:	89 f3                	mov    ebx,esi
c0025bfc:	8d 34 36             	lea    esi,[esi+esi*1]
c0025bff:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025c02:	c1 e9 1f             	shr    ecx,0x1f
c0025c05:	09 ce                	or     esi,ecx
c0025c07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025c0a:	01 c9                	add    ecx,ecx
c0025c0c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0025c0f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025c12:	85 db                	test   ebx,ebx
c0025c14:	78 29                	js     c0025c3f <__divdf3+0x24b>
c0025c16:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0025c19:	72 07                	jb     c0025c22 <__divdf3+0x22e>
c0025c1b:	75 3c                	jne    c0025c59 <__divdf3+0x265>
c0025c1d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025c20:	77 37                	ja     c0025c59 <__divdf3+0x265>
c0025c22:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025c25:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0025c28:	31 d2                	xor    edx,edx
c0025c2a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0025c2d:	0f 97 c2             	seta   dl
c0025c30:	29 d6                	sub    esi,edx
c0025c32:	89 d9                	mov    ecx,ebx
c0025c34:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0025c37:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025c3a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025c3d:	eb 17                	jmp    c0025c56 <__divdf3+0x262>
c0025c3f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025c42:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025c45:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025c48:	0f 97 c1             	seta   cl
c0025c4b:	0f b6 c9             	movzx  ecx,cl
c0025c4e:	29 ce                	sub    esi,ecx
c0025c50:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0025c53:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0025c56:	83 ca 01             	or     edx,0x1
c0025c59:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0025c5c:	75 8b                	jne    c0025be9 <__divdf3+0x1f5>
c0025c5e:	c1 e7 09             	shl    edi,0x9
c0025c61:	89 d1                	mov    ecx,edx
c0025c63:	c1 e9 17             	shr    ecx,0x17
c0025c66:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025c69:	09 f3                	or     ebx,esi
c0025c6b:	0f 95 c3             	setne  bl
c0025c6e:	0f b6 db             	movzx  ebx,bl
c0025c71:	c1 e2 09             	shl    edx,0x9
c0025c74:	09 d3                	or     ebx,edx
c0025c76:	89 ca                	mov    edx,ecx
c0025c78:	09 fa                	or     edx,edi
c0025c7a:	78 0c                	js     c0025c88 <__divdf3+0x294>
c0025c7c:	01 d2                	add    edx,edx
c0025c7e:	89 d9                	mov    ecx,ebx
c0025c80:	c1 e9 1f             	shr    ecx,0x1f
c0025c83:	09 ca                	or     edx,ecx
c0025c85:	01 db                	add    ebx,ebx
c0025c87:	48                   	dec    eax
c0025c88:	3d fe 07 00 00       	cmp    eax,0x7fe
c0025c8d:	0f 8f 83 00 00 00    	jg     c0025d16 <__divdf3+0x322>
c0025c93:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025c99:	85 c0                	test   eax,eax
c0025c9b:	0f 8f 82 00 00 00    	jg     c0025d23 <__divdf3+0x32f>
c0025ca1:	83 f8 cc             	cmp    eax,0xffffffcc
c0025ca4:	7c 77                	jl     c0025d1d <__divdf3+0x329>
c0025ca6:	be 01 00 00 00       	mov    esi,0x1
c0025cab:	29 c6                	sub    esi,eax
c0025cad:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025cb3:	83 fe 1f             	cmp    esi,0x1f
c0025cb6:	7e 2f                	jle    c0025ce7 <__divdf3+0x2f3>
c0025cb8:	83 fe 20             	cmp    esi,0x20
c0025cbb:	75 0a                	jne    c0025cc7 <__divdf3+0x2d3>
c0025cbd:	85 db                	test   ebx,ebx
c0025cbf:	0f 95 c3             	setne  bl
c0025cc2:	0f b6 db             	movzx  ebx,bl
c0025cc5:	eb 1a                	jmp    c0025ce1 <__divdf3+0x2ed>
c0025cc7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0025cca:	89 d7                	mov    edi,edx
c0025ccc:	d3 e7                	shl    edi,cl
c0025cce:	89 f9                	mov    ecx,edi
c0025cd0:	09 d9                	or     ecx,ebx
c0025cd2:	0f 95 c3             	setne  bl
c0025cd5:	0f b6 db             	movzx  ebx,bl
c0025cd8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0025cdd:	29 c1                	sub    ecx,eax
c0025cdf:	d3 ea                	shr    edx,cl
c0025ce1:	09 d3                	or     ebx,edx
c0025ce3:	31 c0                	xor    eax,eax
c0025ce5:	eb 3a                	jmp    c0025d21 <__divdf3+0x32d>
c0025ce7:	83 c0 1f             	add    eax,0x1f
c0025cea:	89 d7                	mov    edi,edx
c0025cec:	88 c1                	mov    cl,al
c0025cee:	d3 e7                	shl    edi,cl
c0025cf0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025cf3:	89 df                	mov    edi,ebx
c0025cf5:	89 f1                	mov    ecx,esi
c0025cf7:	d3 ef                	shr    edi,cl
c0025cf9:	89 f9                	mov    ecx,edi
c0025cfb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0025cfe:	09 cf                	or     edi,ecx
c0025d00:	88 c1                	mov    cl,al
c0025d02:	d3 e3                	shl    ebx,cl
c0025d04:	85 db                	test   ebx,ebx
c0025d06:	0f 95 c3             	setne  bl
c0025d09:	0f b6 db             	movzx  ebx,bl
c0025d0c:	09 fb                	or     ebx,edi
c0025d0e:	89 f1                	mov    ecx,esi
c0025d10:	d3 ea                	shr    edx,cl
c0025d12:	31 c0                	xor    eax,eax
c0025d14:	eb 0d                	jmp    c0025d23 <__divdf3+0x32f>
c0025d16:	b8 ff 07 00 00       	mov    eax,0x7ff
c0025d1b:	eb 02                	jmp    c0025d1f <__divdf3+0x32b>
c0025d1d:	31 c0                	xor    eax,eax
c0025d1f:	31 db                	xor    ebx,ebx
c0025d21:	31 d2                	xor    edx,edx
c0025d23:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0025d26:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0025d29:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0025d2f:	09 c8                	or     eax,ecx
c0025d31:	c1 e0 14             	shl    eax,0x14
c0025d34:	89 d1                	mov    ecx,edx
c0025d36:	c1 e9 0b             	shr    ecx,0xb
c0025d39:	09 c8                	or     eax,ecx
c0025d3b:	89 c6                	mov    esi,eax
c0025d3d:	89 d9                	mov    ecx,ebx
c0025d3f:	c1 e9 0b             	shr    ecx,0xb
c0025d42:	c1 e2 15             	shl    edx,0x15
c0025d45:	09 ca                	or     edx,ecx
c0025d47:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0025d4d:	0f 95 c0             	setne  al
c0025d50:	09 c1                	or     ecx,eax
c0025d52:	83 e1 01             	and    ecx,0x1
c0025d55:	c1 eb 0a             	shr    ebx,0xa
c0025d58:	21 cb                	and    ebx,ecx
c0025d5a:	01 d3                	add    ebx,edx
c0025d5c:	89 d8                	mov    eax,ebx
c0025d5e:	83 d6 00             	adc    esi,0x0
c0025d61:	89 f2                	mov    edx,esi
c0025d63:	89 c7                	mov    edi,eax
c0025d65:	89 d1                	mov    ecx,edx
c0025d67:	89 f8                	mov    eax,edi
c0025d69:	89 ca                	mov    edx,ecx
c0025d6b:	83 c4 2c             	add    esp,0x2c
c0025d6e:	5b                   	pop    ebx
c0025d6f:	5e                   	pop    esi
c0025d70:	5f                   	pop    edi
c0025d71:	5d                   	pop    ebp
c0025d72:	c3                   	ret    

c0025d73 <__floatsidf>:
c0025d73:	55                   	push   ebp
c0025d74:	89 e5                	mov    ebp,esp
c0025d76:	56                   	push   esi
c0025d77:	53                   	push   ebx
c0025d78:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025d7b:	85 db                	test   ebx,ebx
c0025d7d:	7e 15                	jle    c0025d94 <__floatsidf+0x21>
c0025d7f:	0f bd cb             	bsr    ecx,ebx
c0025d82:	83 f1 1f             	xor    ecx,0x1f
c0025d85:	d3 e3                	shl    ebx,cl
c0025d87:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025d8d:	b8 1e 04 00 00       	mov    eax,0x41e
c0025d92:	eb 21                	jmp    c0025db5 <__floatsidf+0x42>
c0025d94:	b8 00 00 00 00       	mov    eax,0x0
c0025d99:	ba 00 00 00 00       	mov    edx,0x0
c0025d9e:	74 2a                	je     c0025dca <__floatsidf+0x57>
c0025da0:	f7 db                	neg    ebx
c0025da2:	0f bd cb             	bsr    ecx,ebx
c0025da5:	83 f1 1f             	xor    ecx,0x1f
c0025da8:	d3 e3                	shl    ebx,cl
c0025daa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025db0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0025db5:	29 c8                	sub    eax,ecx
c0025db7:	c1 e0 14             	shl    eax,0x14
c0025dba:	89 c1                	mov    ecx,eax
c0025dbc:	89 de                	mov    esi,ebx
c0025dbe:	c1 ee 0b             	shr    esi,0xb
c0025dc1:	09 f1                	or     ecx,esi
c0025dc3:	89 ca                	mov    edx,ecx
c0025dc5:	c1 e3 15             	shl    ebx,0x15
c0025dc8:	89 d8                	mov    eax,ebx
c0025dca:	5b                   	pop    ebx
c0025dcb:	5e                   	pop    esi
c0025dcc:	5d                   	pop    ebp
c0025dcd:	c3                   	ret    

c0025dce <__floatunsidf>:
c0025dce:	55                   	push   ebp
c0025dcf:	89 e5                	mov    ebp,esp
c0025dd1:	56                   	push   esi
c0025dd2:	53                   	push   ebx
c0025dd3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025dd6:	85 db                	test   ebx,ebx
c0025dd8:	74 2a                	je     c0025e04 <__floatunsidf+0x36>
c0025dda:	0f bd cb             	bsr    ecx,ebx
c0025ddd:	83 f1 1f             	xor    ecx,0x1f
c0025de0:	d3 e3                	shl    ebx,cl
c0025de2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0025de8:	b8 1e 04 00 00       	mov    eax,0x41e
c0025ded:	29 c8                	sub    eax,ecx
c0025def:	c1 e0 14             	shl    eax,0x14
c0025df2:	89 c1                	mov    ecx,eax
c0025df4:	89 de                	mov    esi,ebx
c0025df6:	c1 ee 0b             	shr    esi,0xb
c0025df9:	09 f1                	or     ecx,esi
c0025dfb:	89 ca                	mov    edx,ecx
c0025dfd:	c1 e3 15             	shl    ebx,0x15
c0025e00:	89 d8                	mov    eax,ebx
c0025e02:	eb 04                	jmp    c0025e08 <__floatunsidf+0x3a>
c0025e04:	31 c0                	xor    eax,eax
c0025e06:	31 d2                	xor    edx,edx
c0025e08:	5b                   	pop    ebx
c0025e09:	5e                   	pop    esi
c0025e0a:	5d                   	pop    ebp
c0025e0b:	c3                   	ret    

c0025e0c <__fixdfsi>:
c0025e0c:	55                   	push   ebp
c0025e0d:	89 e5                	mov    ebp,esp
c0025e0f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e12:	89 d1                	mov    ecx,edx
c0025e14:	c1 e1 0b             	shl    ecx,0xb
c0025e17:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e20:	c1 e8 15             	shr    eax,0x15
c0025e23:	09 c1                	or     ecx,eax
c0025e25:	c1 fa 14             	sar    edx,0x14
c0025e28:	78 1f                	js     c0025e49 <__fixdfsi+0x3d>
c0025e2a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0025e30:	31 c0                	xor    eax,eax
c0025e32:	83 fa 1e             	cmp    edx,0x1e
c0025e35:	77 40                	ja     c0025e77 <__fixdfsi+0x6b>
c0025e37:	89 c8                	mov    eax,ecx
c0025e39:	0d 00 00 00 80       	or     eax,0x80000000
c0025e3e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e43:	29 d1                	sub    ecx,edx
c0025e45:	d3 e8                	shr    eax,cl
c0025e47:	eb 2e                	jmp    c0025e77 <__fixdfsi+0x6b>
c0025e49:	31 c0                	xor    eax,eax
c0025e4b:	81 c2 01 04 00 00    	add    edx,0x401
c0025e51:	78 24                	js     c0025e77 <__fixdfsi+0x6b>
c0025e53:	83 fa 1e             	cmp    edx,0x1e
c0025e56:	7e 09                	jle    c0025e61 <__fixdfsi+0x55>
c0025e58:	83 fa 1f             	cmp    edx,0x1f
c0025e5b:	75 18                	jne    c0025e75 <__fixdfsi+0x69>
c0025e5d:	85 c9                	test   ecx,ecx
c0025e5f:	75 14                	jne    c0025e75 <__fixdfsi+0x69>
c0025e61:	89 c8                	mov    eax,ecx
c0025e63:	0d 00 00 00 80       	or     eax,0x80000000
c0025e68:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e6d:	29 d1                	sub    ecx,edx
c0025e6f:	d3 e8                	shr    eax,cl
c0025e71:	f7 d8                	neg    eax
c0025e73:	eb 02                	jmp    c0025e77 <__fixdfsi+0x6b>
c0025e75:	31 c0                	xor    eax,eax
c0025e77:	5d                   	pop    ebp
c0025e78:	c3                   	ret    

c0025e79 <__fixunsdfsi>:
c0025e79:	55                   	push   ebp
c0025e7a:	89 e5                	mov    ebp,esp
c0025e7c:	53                   	push   ebx
c0025e7d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025e80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e83:	89 d3                	mov    ebx,edx
c0025e85:	c1 fb 14             	sar    ebx,0x14
c0025e88:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0025e8e:	31 c0                	xor    eax,eax
c0025e90:	83 fb 1f             	cmp    ebx,0x1f
c0025e93:	77 1d                	ja     c0025eb2 <__fixunsdfsi+0x39>
c0025e95:	89 d0                	mov    eax,edx
c0025e97:	c1 e0 0b             	shl    eax,0xb
c0025e9a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025e9f:	c1 e9 15             	shr    ecx,0x15
c0025ea2:	09 c8                	or     eax,ecx
c0025ea4:	0d 00 00 00 80       	or     eax,0x80000000
c0025ea9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025eae:	29 d9                	sub    ecx,ebx
c0025eb0:	d3 e8                	shr    eax,cl
c0025eb2:	5b                   	pop    ebx
c0025eb3:	5d                   	pop    ebp
c0025eb4:	c3                   	ret    

c0025eb5 <__cmpdf2>:
c0025eb5:	55                   	push   ebp
c0025eb6:	89 e5                	mov    ebp,esp
c0025eb8:	57                   	push   edi
c0025eb9:	56                   	push   esi
c0025eba:	53                   	push   ebx
c0025ebb:	83 ec 0c             	sub    esp,0xc
c0025ebe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0025ec1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025ec4:	89 ca                	mov    edx,ecx
c0025ec6:	c1 ea 14             	shr    edx,0x14
c0025ec9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0025ecf:	89 cb                	mov    ebx,ecx
c0025ed1:	c1 fb 1f             	sar    ebx,0x1f
c0025ed4:	31 da                	xor    edx,ebx
c0025ed6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ed9:	89 df                	mov    edi,ebx
c0025edb:	c1 e7 0b             	shl    edi,0xb
c0025ede:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025ee1:	c1 e1 0b             	shl    ecx,0xb
c0025ee4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025eea:	c1 eb 15             	shr    ebx,0x15
c0025eed:	09 d9                	or     ecx,ebx
c0025eef:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0025ef2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0025ef5:	89 ce                	mov    esi,ecx
c0025ef7:	c1 ee 14             	shr    esi,0x14
c0025efa:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0025f00:	89 cb                	mov    ebx,ecx
c0025f02:	c1 fb 1f             	sar    ebx,0x1f
c0025f05:	31 de                	xor    esi,ebx
c0025f07:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0025f0a:	89 df                	mov    edi,ebx
c0025f0c:	c1 e7 0b             	shl    edi,0xb
c0025f0f:	c1 e1 0b             	shl    ecx,0xb
c0025f12:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025f18:	c1 eb 15             	shr    ebx,0x15
c0025f1b:	09 d9                	or     ecx,ebx
c0025f1d:	89 d3                	mov    ebx,edx
c0025f1f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0025f25:	43                   	inc    ebx
c0025f26:	83 fb 01             	cmp    ebx,0x1
c0025f29:	77 08                	ja     c0025f33 <__cmpdf2+0x7e>
c0025f2b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025f2e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0025f31:	75 68                	jne    c0025f9b <__cmpdf2+0xe6>
c0025f33:	89 f3                	mov    ebx,esi
c0025f35:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0025f3b:	43                   	inc    ebx
c0025f3c:	83 fb 01             	cmp    ebx,0x1
c0025f3f:	77 06                	ja     c0025f47 <__cmpdf2+0x92>
c0025f41:	89 fb                	mov    ebx,edi
c0025f43:	09 cb                	or     ebx,ecx
c0025f45:	75 54                	jne    c0025f9b <__cmpdf2+0xe6>
c0025f47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025f4a:	09 f8                	or     eax,edi
c0025f4c:	09 c8                	or     eax,ecx
c0025f4e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0025f51:	75 12                	jne    c0025f65 <__cmpdf2+0xb0>
c0025f53:	8d 42 01             	lea    eax,[edx+0x1]
c0025f56:	83 f8 01             	cmp    eax,0x1
c0025f59:	77 0a                	ja     c0025f65 <__cmpdf2+0xb0>
c0025f5b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0025f5e:	31 c0                	xor    eax,eax
c0025f60:	83 fb 01             	cmp    ebx,0x1
c0025f63:	76 36                	jbe    c0025f9b <__cmpdf2+0xe6>
c0025f65:	b8 01 00 00 00       	mov    eax,0x1
c0025f6a:	39 f2                	cmp    edx,esi
c0025f6c:	7f 2d                	jg     c0025f9b <__cmpdf2+0xe6>
c0025f6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f73:	7c 26                	jl     c0025f9b <__cmpdf2+0xe6>
c0025f75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025f78:	77 07                	ja     c0025f81 <__cmpdf2+0xcc>
c0025f7a:	72 16                	jb     c0025f92 <__cmpdf2+0xdd>
c0025f7c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0025f7f:	76 0a                	jbe    c0025f8b <__cmpdf2+0xd6>
c0025f81:	89 d0                	mov    eax,edx
c0025f83:	c1 f8 1f             	sar    eax,0x1f
c0025f86:	83 c8 01             	or     eax,0x1
c0025f89:	eb 10                	jmp    c0025f9b <__cmpdf2+0xe6>
c0025f8b:	b8 00 00 00 00       	mov    eax,0x0
c0025f90:	73 09                	jae    c0025f9b <__cmpdf2+0xe6>
c0025f92:	89 d0                	mov    eax,edx
c0025f94:	c1 f8 1f             	sar    eax,0x1f
c0025f97:	83 e0 02             	and    eax,0x2
c0025f9a:	48                   	dec    eax
c0025f9b:	83 c4 0c             	add    esp,0xc
c0025f9e:	5b                   	pop    ebx
c0025f9f:	5e                   	pop    esi
c0025fa0:	5f                   	pop    edi
c0025fa1:	5d                   	pop    ebp
c0025fa2:	c3                   	ret    

c0025fa3 <__eqdf2>:
c0025fa3:	55                   	push   ebp
c0025fa4:	89 e5                	mov    ebp,esp
c0025fa6:	50                   	push   eax
c0025fa7:	6a 01                	push   0x1
c0025fa9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025fac:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025faf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb5:	e8 fb fe ff ff       	call   c0025eb5 <__cmpdf2>
c0025fba:	83 c4 18             	add    esp,0x18
c0025fbd:	c9                   	leave  
c0025fbe:	c3                   	ret    

c0025fbf <__nedf2>:
c0025fbf:	eb e2                	jmp    c0025fa3 <__eqdf2>

c0025fc1 <__gtdf2>:
c0025fc1:	55                   	push   ebp
c0025fc2:	89 e5                	mov    ebp,esp
c0025fc4:	50                   	push   eax
c0025fc5:	6a ff                	push   0xffffffff
c0025fc7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025fca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025fcd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd3:	e8 dd fe ff ff       	call   c0025eb5 <__cmpdf2>
c0025fd8:	83 c4 18             	add    esp,0x18
c0025fdb:	c9                   	leave  
c0025fdc:	c3                   	ret    

c0025fdd <__gedf2>:
c0025fdd:	eb e2                	jmp    c0025fc1 <__gtdf2>

c0025fdf <__ltdf2>:
c0025fdf:	eb c2                	jmp    c0025fa3 <__eqdf2>

c0025fe1 <__ledf2>:
c0025fe1:	eb c0                	jmp    c0025fa3 <__eqdf2>

c0025fe3 <__truncdfsf2>:
c0025fe3:	55                   	push   ebp
c0025fe4:	89 e5                	mov    ebp,esp
c0025fe6:	57                   	push   edi
c0025fe7:	56                   	push   esi
c0025fe8:	53                   	push   ebx
c0025fe9:	83 ec 0c             	sub    esp,0xc
c0025fec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025fef:	89 d1                	mov    ecx,edx
c0025ff1:	c1 f9 14             	sar    ecx,0x14
c0025ff4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ff7:	89 df                	mov    edi,ebx
c0025ff9:	c1 e7 0b             	shl    edi,0xb
c0025ffc:	89 d0                	mov    eax,edx
c0025ffe:	c1 e0 0b             	shl    eax,0xb
c0026001:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026006:	c1 eb 15             	shr    ebx,0x15
c0026009:	09 d8                	or     eax,ebx
c002600b:	89 cb                	mov    ebx,ecx
c002600d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026013:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026019:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002601f:	0f 86 9e 00 00 00    	jbe    c00260c3 <__truncdfsf2+0xe0>
c0026025:	85 db                	test   ebx,ebx
c0026027:	75 0a                	jne    c0026033 <__truncdfsf2+0x50>
c0026029:	c1 fa 17             	sar    edx,0x17
c002602c:	30 d2                	xor    dl,dl
c002602e:	e9 84 00 00 00       	jmp    c00260b7 <__truncdfsf2+0xd4>
c0026033:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026039:	83 fe 83             	cmp    esi,0xffffff83
c002603c:	7d 4b                	jge    c0026089 <__truncdfsf2+0xa6>
c002603e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026043:	29 f1                	sub    ecx,esi
c0026045:	83 f9 1f             	cmp    ecx,0x1f
c0026048:	7f 6b                	jg     c00260b5 <__truncdfsf2+0xd2>
c002604a:	0d 00 00 00 80       	or     eax,0x80000000
c002604f:	89 c3                	mov    ebx,eax
c0026051:	d3 eb                	shr    ebx,cl
c0026053:	be 01 00 00 00       	mov    esi,0x1
c0026058:	d3 e6                	shl    esi,cl
c002605a:	4e                   	dec    esi
c002605b:	21 f0                	and    eax,esi
c002605d:	09 f8                	or     eax,edi
c002605f:	0f 95 c0             	setne  al
c0026062:	0f b6 c0             	movzx  eax,al
c0026065:	09 c3                	or     ebx,eax
c0026067:	89 d9                	mov    ecx,ebx
c0026069:	c1 e9 08             	shr    ecx,0x8
c002606c:	f6 c3 7f             	test   bl,0x7f
c002606f:	0f 95 c0             	setne  al
c0026072:	09 c8                	or     eax,ecx
c0026074:	83 e0 01             	and    eax,0x1
c0026077:	c1 eb 07             	shr    ebx,0x7
c002607a:	21 c3                	and    ebx,eax
c002607c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026082:	09 d1                	or     ecx,edx
c0026084:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026087:	eb 76                	jmp    c00260ff <__truncdfsf2+0x11c>
c0026089:	83 c6 80             	add    esi,0xffffff80
c002608c:	7e 1d                	jle    c00260ab <__truncdfsf2+0xc8>
c002608e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026094:	75 0b                	jne    c00260a1 <__truncdfsf2+0xbe>
c0026096:	09 f8                	or     eax,edi
c0026098:	74 09                	je     c00260a3 <__truncdfsf2+0xc0>
c002609a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002609f:	eb 02                	jmp    c00260a3 <__truncdfsf2+0xc0>
c00260a1:	31 c0                	xor    eax,eax
c00260a3:	c1 fa 17             	sar    edx,0x17
c00260a6:	80 ca ff             	or     dl,0xff
c00260a9:	eb 0e                	jmp    c00260b9 <__truncdfsf2+0xd6>
c00260ab:	c1 fa 1f             	sar    edx,0x1f
c00260ae:	c1 e2 08             	shl    edx,0x8
c00260b1:	09 ca                	or     edx,ecx
c00260b3:	eb 04                	jmp    c00260b9 <__truncdfsf2+0xd6>
c00260b5:	31 d2                	xor    edx,edx
c00260b7:	31 c0                	xor    eax,eax
c00260b9:	c1 e2 17             	shl    edx,0x17
c00260bc:	c1 e8 08             	shr    eax,0x8
c00260bf:	09 d0                	or     eax,edx
c00260c1:	eb 3c                	jmp    c00260ff <__truncdfsf2+0x11c>
c00260c3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00260c9:	89 ca                	mov    edx,ecx
c00260cb:	c1 fa 0b             	sar    edx,0xb
c00260ce:	c1 e2 08             	shl    edx,0x8
c00260d1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00260d4:	31 db                	xor    ebx,ebx
c00260d6:	85 ff                	test   edi,edi
c00260d8:	0f 95 c3             	setne  bl
c00260db:	09 d8                	or     eax,ebx
c00260dd:	89 c3                	mov    ebx,eax
c00260df:	c1 eb 08             	shr    ebx,0x8
c00260e2:	a8 7f                	test   al,0x7f
c00260e4:	0f 95 c2             	setne  dl
c00260e7:	89 d6                	mov    esi,edx
c00260e9:	09 de                	or     esi,ebx
c00260eb:	83 e6 01             	and    esi,0x1
c00260ee:	c1 e8 07             	shr    eax,0x7
c00260f1:	21 f0                	and    eax,esi
c00260f3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00260f6:	09 ca                	or     edx,ecx
c00260f8:	c1 e2 17             	shl    edx,0x17
c00260fb:	09 da                	or     edx,ebx
c00260fd:	01 d0                	add    eax,edx
c00260ff:	83 c4 0c             	add    esp,0xc
c0026102:	5b                   	pop    ebx
c0026103:	5e                   	pop    esi
c0026104:	5f                   	pop    edi
c0026105:	5d                   	pop    ebp
c0026106:	c3                   	ret    

c0026107 <__extendsfdf2>:
c0026107:	55                   	push   ebp
c0026108:	89 e5                	mov    ebp,esp
c002610a:	57                   	push   edi
c002610b:	56                   	push   esi
c002610c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002610f:	89 d1                	mov    ecx,edx
c0026111:	c1 f9 17             	sar    ecx,0x17
c0026114:	c1 e2 08             	shl    edx,0x8
c0026117:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002611d:	89 c8                	mov    eax,ecx
c002611f:	80 e4 f8             	and    ah,0xf8
c0026122:	8d 71 01             	lea    esi,[ecx+0x1]
c0026125:	81 e6 fe 00 00 00    	and    esi,0xfe
c002612b:	75 27                	jne    c0026154 <__extendsfdf2+0x4d>
c002612d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026133:	75 18                	jne    c002614d <__extendsfdf2+0x46>
c0026135:	85 d2                	test   edx,edx
c0026137:	74 20                	je     c0026159 <__extendsfdf2+0x52>
c0026139:	41                   	inc    ecx
c002613a:	01 d2                	add    edx,edx
c002613c:	79 fb                	jns    c0026139 <__extendsfdf2+0x32>
c002613e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026144:	29 c8                	sub    eax,ecx
c0026146:	05 81 03 00 00       	add    eax,0x381
c002614b:	eb 0c                	jmp    c0026159 <__extendsfdf2+0x52>
c002614d:	05 00 07 00 00       	add    eax,0x700
c0026152:	eb 05                	jmp    c0026159 <__extendsfdf2+0x52>
c0026154:	05 80 03 00 00       	add    eax,0x380
c0026159:	c1 e0 14             	shl    eax,0x14
c002615c:	89 c1                	mov    ecx,eax
c002615e:	89 d0                	mov    eax,edx
c0026160:	c1 e8 0b             	shr    eax,0xb
c0026163:	09 c1                	or     ecx,eax
c0026165:	c1 e2 15             	shl    edx,0x15
c0026168:	89 d0                	mov    eax,edx
c002616a:	89 ca                	mov    edx,ecx
c002616c:	5e                   	pop    esi
c002616d:	5f                   	pop    edi
c002616e:	5d                   	pop    ebp
c002616f:	c3                   	ret    

c0026170 <fabs>:
c0026170:	83 ec 0c             	sub    esp,0xc
c0026173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026177:	89 04 24             	mov    DWORD PTR [esp],eax
c002617a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002617e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026183:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026187:	dd 04 24             	fld    QWORD PTR [esp]
c002618a:	83 c4 0c             	add    esp,0xc
c002618d:	c3                   	ret    
c002618e:	66 90                	xchg   ax,ax

c0026190 <lrint>:
c0026190:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0026194:	83 ec 04             	sub    esp,0x4
c0026197:	db 1c 24             	fistp  DWORD PTR [esp]
c002619a:	58                   	pop    eax
c002619b:	c3                   	ret    

c002619c <lrintf>:
c002619c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00261a0:	83 ec 04             	sub    esp,0x4
c00261a3:	db 1c 24             	fistp  DWORD PTR [esp]
c00261a6:	58                   	pop    eax
c00261a7:	c3                   	ret    

Disassembly of section .init:

c00261a8 <_init>:
c00261a8:	55                   	push   ebp
c00261a9:	89 e5                	mov    ebp,esp
c00261ab:	e8 68 9f fd ff       	call   c0000118 <frame_dummy>
c00261b0:	e8 63 e0 ff ff       	call   c0024218 <__do_global_ctors_aux>
c00261b5:	5d                   	pop    ebp
c00261b6:	c3                   	ret    

Disassembly of section .fini:

c00261b7 <_fini>:
c00261b7:	55                   	push   ebp
c00261b8:	89 e5                	mov    ebp,esp
c00261ba:	e8 e9 9e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00261bf:	5d                   	pop    ebp
c00261c0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00261c2 <Computer::~Computer()>:
c00261c2:	83 ec 0c             	sub    esp,0xc
c00261c5:	ba 50 7c 02 c0       	mov    edx,0xc0027c50
c00261ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ce:	89 10                	mov    DWORD PTR [eax],edx
c00261d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d4:	83 ec 0c             	sub    esp,0xc
c00261d7:	50                   	push   eax
c00261d8:	e8 71 d7 fe ff       	call   c001394e <Device::~Device()>
c00261dd:	83 c4 10             	add    esp,0x10
c00261e0:	90                   	nop
c00261e1:	83 c4 0c             	add    esp,0xc
c00261e4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00261e6 <Computer::~Computer()>:
c00261e6:	83 ec 0c             	sub    esp,0xc
c00261e9:	83 ec 0c             	sub    esp,0xc
c00261ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261f0:	e8 cd ff ff ff       	call   c00261c2 <Computer::~Computer()>
c00261f5:	83 c4 10             	add    esp,0x10
c00261f8:	83 ec 08             	sub    esp,0x8
c00261fb:	68 ec 01 00 00       	push   0x1ec
c0026200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026204:	e8 a4 c3 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026209:	83 c4 10             	add    esp,0x10
c002620c:	83 c4 0c             	add    esp,0xc
c002620f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026210 <idleCommon()>:
c0026210:	83 ec 0c             	sub    esp,0xc
c0026213:	e8 85 5f ff ff       	call   c001c19d <lockScheduler()>
c0026218:	e8 bb 62 ff ff       	call   c001c4d8 <schedule()>
c002621d:	83 c4 0c             	add    esp,0xc
c0026220:	e9 7a 5f ff ff       	jmp    c001c19f <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026226 <LinkedList<UnixFile>::~LinkedList()>:
c0026226:	90                   	nop
c0026227:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026228 <LinkedList<UnixFile>::LinkedList()>:
c0026228:	83 ec 0c             	sub    esp,0xc
c002622b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026239:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026244:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002624b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026259:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026264:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002626b:	83 ec 0c             	sub    esp,0xc
c002626e:	68 c6 7e 02 c0       	push   0xc0027ec6
c0026273:	e8 15 c4 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0026278:	83 c4 10             	add    esp,0x10
c002627b:	90                   	nop
c002627c:	83 c4 0c             	add    esp,0xc
c002627f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0026280 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0026280:	83 ec 0c             	sub    esp,0xc
c0026283:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026288:	75 10                	jne    c002629a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002628a:	83 ec 0c             	sub    esp,0xc
c002628d:	68 e0 7e 02 c0       	push   0xc0027ee0
c0026292:	e8 c0 2e ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026297:	83 c4 10             	add    esp,0x10
c002629a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629e:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a0:	85 c0                	test   eax,eax
c00262a2:	74 34                	je     c00262d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00262a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00262ab:	85 c0                	test   eax,eax
c00262ad:	74 29                	je     c00262d8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00262af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00262b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00262bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00262c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00262cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00262d6:	eb 65                	jmp    c002633d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00262d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00262de:	85 c0                	test   eax,eax
c00262e0:	75 4b                	jne    c002632d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00262e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00262e9:	85 c0                	test   eax,eax
c00262eb:	75 40                	jne    c002632d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00262ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262f5:	89 10                	mov    DWORD PTR [eax],edx
c00262f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00262ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026306:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026309:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026314:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026317:	85 c0                	test   eax,eax
c0026319:	74 22                	je     c002633d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002631b:	83 ec 0c             	sub    esp,0xc
c002631e:	68 02 7f 02 c0       	push   0xc0027f02
c0026323:	e8 2f 2e ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026328:	83 c4 10             	add    esp,0x10
c002632b:	eb 10                	jmp    c002633d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002632d:	83 ec 0c             	sub    esp,0xc
c0026330:	68 0c 7f 02 c0       	push   0xc0027f0c
c0026335:	e8 1d 2e ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002633a:	83 c4 10             	add    esp,0x10
c002633d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026341:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026344:	8d 50 01             	lea    edx,[eax+0x1]
c0026347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002634b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002634e:	90                   	nop
c002634f:	83 c4 0c             	add    esp,0xc
c0026352:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0026354 <LinkedList<UnixFile>::getFirstElement()>:
c0026354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026358:	8b 00                	mov    eax,DWORD PTR [eax]
c002635a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002635c <LinkedList<UnixFile>::removeFirst()>:
c002635c:	83 ec 0c             	sub    esp,0xc
c002635f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026363:	8b 00                	mov    eax,DWORD PTR [eax]
c0026365:	85 c0                	test   eax,eax
c0026367:	75 12                	jne    c002637b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0026369:	83 ec 0c             	sub    esp,0xc
c002636c:	68 18 7f 02 c0       	push   0xc0027f18
c0026371:	e8 e1 2d ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026376:	83 c4 10             	add    esp,0x10
c0026379:	eb 7e                	jmp    c00263f9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002637b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002637f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026382:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026385:	85 c0                	test   eax,eax
c0026387:	74 10                	je     c0026399 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0026389:	83 ec 0c             	sub    esp,0xc
c002638c:	68 63 7f 02 c0       	push   0xc0027f63
c0026391:	e8 c1 2d ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026396:	83 c4 10             	add    esp,0x10
c0026399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002639d:	8b 00                	mov    eax,DWORD PTR [eax]
c002639f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00263a2:	85 c0                	test   eax,eax
c00263a4:	75 33                	jne    c00263d9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00263a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00263b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00263bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00263c2:	83 f8 01             	cmp    eax,0x1
c00263c5:	74 21                	je     c00263e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00263c7:	83 ec 0c             	sub    esp,0xc
c00263ca:	68 3c 7f 02 c0       	push   0xc0027f3c
c00263cf:	e8 83 2d ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00263d4:	83 c4 10             	add    esp,0x10
c00263d7:	eb 0f                	jmp    c00263e8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00263d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00263df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00263e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e6:	89 10                	mov    DWORD PTR [eax],edx
c00263e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00263ef:	8d 50 ff             	lea    edx,[eax-0x1]
c00263f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00263f9:	83 c4 0c             	add    esp,0xc
c00263fc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00263fe <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00263fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026402:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026405:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0026406 <DriverlessDevice::~DriverlessDevice()>:
c0026406:	ba 24 86 02 c0       	mov    edx,0xc0028624
c002640b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002640f:	89 10                	mov    DWORD PTR [eax],edx
c0026411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026415:	50                   	push   eax
c0026416:	e8 33 d5 fe ff       	call   c001394e <Device::~Device()>
c002641b:	83 c4 04             	add    esp,0x4
c002641e:	90                   	nop
c002641f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0026420 <DriverlessDevice::~DriverlessDevice()>:
c0026420:	83 ec 0c             	sub    esp,0xc
c0026423:	83 ec 0c             	sub    esp,0xc
c0026426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002642a:	e8 d7 ff ff ff       	call   c0026406 <DriverlessDevice::~DriverlessDevice()>
c002642f:	83 c4 10             	add    esp,0x10
c0026432:	83 ec 08             	sub    esp,0x8
c0026435:	68 58 01 00 00       	push   0x158
c002643a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002643e:	e8 6a c1 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026443:	83 c4 10             	add    esp,0x10
c0026446:	83 c4 0c             	add    esp,0xc
c0026449:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002644a <LinkedList<Device>::addElement(Device*)>:
c002644a:	83 ec 0c             	sub    esp,0xc
c002644d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026452:	75 10                	jne    c0026464 <LinkedList<Device>::addElement(Device*)+0x1a>
c0026454:	83 ec 0c             	sub    esp,0xc
c0026457:	68 e0 7e 02 c0       	push   0xc0027ee0
c002645c:	e8 f6 2c ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026461:	83 c4 10             	add    esp,0x10
c0026464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026468:	8b 00                	mov    eax,DWORD PTR [eax]
c002646a:	85 c0                	test   eax,eax
c002646c:	74 3a                	je     c00264a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c002646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026472:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026475:	85 c0                	test   eax,eax
c0026477:	74 2f                	je     c00264a8 <LinkedList<Device>::addElement(Device*)+0x5e>
c0026479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026480:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026484:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002648e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026492:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026499:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002649c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00264a6:	eb 68                	jmp    c0026510 <LinkedList<Device>::addElement(Device*)+0xc6>
c00264a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00264ae:	85 c0                	test   eax,eax
c00264b0:	75 4e                	jne    c0026500 <LinkedList<Device>::addElement(Device*)+0xb6>
c00264b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00264b9:	85 c0                	test   eax,eax
c00264bb:	75 43                	jne    c0026500 <LinkedList<Device>::addElement(Device*)+0xb6>
c00264bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00264c5:	89 10                	mov    DWORD PTR [eax],edx
c00264c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00264cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00264d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00264d9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00264e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00264ea:	85 c0                	test   eax,eax
c00264ec:	74 22                	je     c0026510 <LinkedList<Device>::addElement(Device*)+0xc6>
c00264ee:	83 ec 0c             	sub    esp,0xc
c00264f1:	68 02 7f 02 c0       	push   0xc0027f02
c00264f6:	e8 5c 2c ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00264fb:	83 c4 10             	add    esp,0x10
c00264fe:	eb 10                	jmp    c0026510 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026500:	83 ec 0c             	sub    esp,0xc
c0026503:	68 0c 7f 02 c0       	push   0xc0027f0c
c0026508:	e8 4a 2c ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002650d:	83 c4 10             	add    esp,0x10
c0026510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026514:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026517:	8d 50 01             	lea    edx,[eax+0x1]
c002651a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026521:	90                   	nop
c0026522:	83 c4 0c             	add    esp,0xc
c0026525:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0026526 <LinkedList<Device>::LinkedList()>:
c0026526:	83 ec 0c             	sub    esp,0xc
c0026529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002652d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026537:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002653e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026542:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026557:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002655e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026562:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026569:	83 ec 0c             	sub    esp,0xc
c002656c:	68 c6 7e 02 c0       	push   0xc0027ec6
c0026571:	e8 17 c1 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0026576:	83 c4 10             	add    esp,0x10
c0026579:	90                   	nop
c002657a:	83 c4 0c             	add    esp,0xc
c002657d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002657e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002657e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026582:	8b 00                	mov    eax,DWORD PTR [eax]
c0026584:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0026586 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0026586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002658a:	8b 00                	mov    eax,DWORD PTR [eax]
c002658c:	85 c0                	test   eax,eax
c002658e:	75 0e                	jne    c002659e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0026590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026594:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026597:	85 c0                	test   eax,eax
c0026599:	75 03                	jne    c002659e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002659b:	b0 01                	mov    al,0x1
c002659d:	c3                   	ret    
c002659e:	b0 00                	mov    al,0x0
c00265a0:	90                   	nop
c00265a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00265a2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00265a2:	83 ec 0c             	sub    esp,0xc
c00265a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ab:	85 c0                	test   eax,eax
c00265ad:	75 15                	jne    c00265c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00265af:	83 ec 0c             	sub    esp,0xc
c00265b2:	68 18 7f 02 c0       	push   0xc0027f18
c00265b7:	e8 9b 2b ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00265bc:	83 c4 10             	add    esp,0x10
c00265bf:	e9 88 00 00 00       	jmp    c002664c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00265c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00265cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00265ce:	85 c0                	test   eax,eax
c00265d0:	0f 95 c0             	setne  al
c00265d3:	84 c0                	test   al,al
c00265d5:	74 10                	je     c00265e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00265d7:	83 ec 0c             	sub    esp,0xc
c00265da:	68 63 7f 02 c0       	push   0xc0027f63
c00265df:	e8 73 2b ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00265e4:	83 c4 10             	add    esp,0x10
c00265e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00265ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00265f0:	85 c0                	test   eax,eax
c00265f2:	0f 94 c0             	sete   al
c00265f5:	84 c0                	test   al,al
c00265f7:	74 33                	je     c002662c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00265f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026607:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002660e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026612:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026615:	83 f8 01             	cmp    eax,0x1
c0026618:	74 21                	je     c002663b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002661a:	83 ec 0c             	sub    esp,0xc
c002661d:	68 3c 7f 02 c0       	push   0xc0027f3c
c0026622:	e8 30 2b ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026627:	83 c4 10             	add    esp,0x10
c002662a:	eb 0f                	jmp    c002663b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002662c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026630:	8b 00                	mov    eax,DWORD PTR [eax]
c0026632:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0026635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026639:	89 10                	mov    DWORD PTR [eax],edx
c002663b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026642:	8d 50 ff             	lea    edx,[eax-0x1]
c0026645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026649:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002664c:	83 c4 0c             	add    esp,0xc
c002664f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0026650 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0026650:	83 ec 0c             	sub    esp,0xc
c0026653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026658:	75 10                	jne    c002666a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002665a:	83 ec 0c             	sub    esp,0xc
c002665d:	68 e0 7e 02 c0       	push   0xc0027ee0
c0026662:	e8 f0 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026667:	83 c4 10             	add    esp,0x10
c002666a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026670:	85 c0                	test   eax,eax
c0026672:	74 34                	je     c00266a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0026674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002667b:	85 c0                	test   eax,eax
c002667d:	74 29                	je     c00266a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002667f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026683:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026686:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002668a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002668d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026691:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026695:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002669f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00266a6:	eb 65                	jmp    c002670d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00266a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00266ae:	85 c0                	test   eax,eax
c00266b0:	75 4b                	jne    c00266fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00266b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266b9:	85 c0                	test   eax,eax
c00266bb:	75 40                	jne    c00266fd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00266bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266c5:	89 10                	mov    DWORD PTR [eax],edx
c00266c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00266cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00266d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00266e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00266e7:	85 c0                	test   eax,eax
c00266e9:	74 22                	je     c002670d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00266eb:	83 ec 0c             	sub    esp,0xc
c00266ee:	68 02 7f 02 c0       	push   0xc0027f02
c00266f3:	e8 5f 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00266f8:	83 c4 10             	add    esp,0x10
c00266fb:	eb 10                	jmp    c002670d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00266fd:	83 ec 0c             	sub    esp,0xc
c0026700:	68 0c 7f 02 c0       	push   0xc0027f0c
c0026705:	e8 4d 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002670a:	83 c4 10             	add    esp,0x10
c002670d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026711:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026714:	8d 50 01             	lea    edx,[eax+0x1]
c0026717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002671e:	90                   	nop
c002671f:	83 c4 0c             	add    esp,0xc
c0026722:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0026724 <ACPI::~ACPI()>:
c0026724:	83 ec 0c             	sub    esp,0xc
c0026727:	ba b8 8e 02 c0       	mov    edx,0xc0028eb8
c002672c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026730:	89 10                	mov    DWORD PTR [eax],edx
c0026732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026736:	83 ec 0c             	sub    esp,0xc
c0026739:	50                   	push   eax
c002673a:	e8 0f d2 fe ff       	call   c001394e <Device::~Device()>
c002673f:	83 c4 10             	add    esp,0x10
c0026742:	90                   	nop
c0026743:	83 c4 0c             	add    esp,0xc
c0026746:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0026748 <ACPI::~ACPI()>:
c0026748:	83 ec 0c             	sub    esp,0xc
c002674b:	83 ec 0c             	sub    esp,0xc
c002674e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026752:	e8 cd ff ff ff       	call   c0026724 <ACPI::~ACPI()>
c0026757:	83 c4 10             	add    esp,0x10
c002675a:	83 ec 08             	sub    esp,0x8
c002675d:	68 68 22 00 00       	push   0x2268
c0026762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026766:	e8 42 be fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c002676b:	83 c4 10             	add    esp,0x10
c002676e:	83 c4 0c             	add    esp,0xc
c0026771:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0026772 <CPU::~CPU()>:
c0026772:	83 ec 0c             	sub    esp,0xc
c0026775:	ba a8 92 02 c0       	mov    edx,0xc00292a8
c002677a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002677e:	89 10                	mov    DWORD PTR [eax],edx
c0026780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026784:	83 ec 0c             	sub    esp,0xc
c0026787:	50                   	push   eax
c0026788:	e8 c1 d1 fe ff       	call   c001394e <Device::~Device()>
c002678d:	83 c4 10             	add    esp,0x10
c0026790:	90                   	nop
c0026791:	83 c4 0c             	add    esp,0xc
c0026794:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0026796 <CPU::~CPU()>:
c0026796:	83 ec 0c             	sub    esp,0xc
c0026799:	83 ec 0c             	sub    esp,0xc
c002679c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00267a0:	e8 cd ff ff ff       	call   c0026772 <CPU::~CPU()>
c00267a5:	83 c4 10             	add    esp,0x10
c00267a8:	83 ec 08             	sub    esp,0x8
c00267ab:	68 98 11 00 00       	push   0x1198
c00267b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00267b4:	e8 f4 bd fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00267b9:	83 c4 10             	add    esp,0x10
c00267bc:	83 c4 0c             	add    esp,0xc
c00267bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00267c0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00267c0:	90                   	nop
c00267c1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00267c2 <ThreadControlBlock::ThreadControlBlock()>:
c00267c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267c6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00267cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00267d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267dc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00267e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267e7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00267ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267f2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00267f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00267fa:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00267fe:	90                   	nop
c00267ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0026800 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0026800:	83 ec 0c             	sub    esp,0xc
c0026803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026807:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002680d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026811:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002681c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026827:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002682d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026831:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002683c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026843:	83 ec 0c             	sub    esp,0xc
c0026846:	68 c6 7e 02 c0       	push   0xc0027ec6
c002684b:	e8 3d be fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0026850:	83 c4 10             	add    esp,0x10
c0026853:	90                   	nop
c0026854:	83 c4 0c             	add    esp,0xc
c0026857:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0026858 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0026858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002685c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002685f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0026860 <Vm::_FPUState::_FPUState()>:
c0026860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026864:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002686b:	90                   	nop
c002686c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002686e <PCI::~PCI()>:
c002686e:	83 ec 0c             	sub    esp,0xc
c0026871:	ba 7c 9f 02 c0       	mov    edx,0xc0029f7c
c0026876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002687a:	89 10                	mov    DWORD PTR [eax],edx
c002687c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026880:	83 ec 0c             	sub    esp,0xc
c0026883:	50                   	push   eax
c0026884:	e8 d5 ca fe ff       	call   c001335e <Bus::~Bus()>
c0026889:	83 c4 10             	add    esp,0x10
c002688c:	90                   	nop
c002688d:	83 c4 0c             	add    esp,0xc
c0026890:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0026892 <PCI::~PCI()>:
c0026892:	83 ec 0c             	sub    esp,0xc
c0026895:	83 ec 0c             	sub    esp,0xc
c0026898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002689c:	e8 cd ff ff ff       	call   c002686e <PCI::~PCI()>
c00268a1:	83 c4 10             	add    esp,0x10
c00268a4:	83 ec 08             	sub    esp,0x8
c00268a7:	68 58 01 00 00       	push   0x158
c00268ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268b0:	e8 f8 bc fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00268b5:	83 c4 10             	add    esp,0x10
c00268b8:	83 c4 0c             	add    esp,0xc
c00268bb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00268bc <IDE::~IDE()>:
c00268bc:	83 ec 0c             	sub    esp,0xc
c00268bf:	ba e0 a1 02 c0       	mov    edx,0xc002a1e0
c00268c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268c8:	89 10                	mov    DWORD PTR [eax],edx
c00268ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268ce:	83 ec 0c             	sub    esp,0xc
c00268d1:	50                   	push   eax
c00268d2:	e8 67 d5 fe ff       	call   c0013e3e <HardDiskController::~HardDiskController()>
c00268d7:	83 c4 10             	add    esp,0x10
c00268da:	90                   	nop
c00268db:	83 c4 0c             	add    esp,0xc
c00268de:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00268e0 <IDE::~IDE()>:
c00268e0:	83 ec 0c             	sub    esp,0xc
c00268e3:	83 ec 0c             	sub    esp,0xc
c00268e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268ea:	e8 cd ff ff ff       	call   c00268bc <IDE::~IDE()>
c00268ef:	83 c4 10             	add    esp,0x10
c00268f2:	83 ec 08             	sub    esp,0x8
c00268f5:	68 70 02 00 00       	push   0x270
c00268fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00268fe:	e8 aa bc fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026903:	83 c4 10             	add    esp,0x10
c0026906:	83 c4 0c             	add    esp,0xc
c0026909:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002690a <SATABus::~SATABus()>:
c002690a:	83 ec 0c             	sub    esp,0xc
c002690d:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c0026912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026916:	89 10                	mov    DWORD PTR [eax],edx
c0026918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002691c:	83 ec 0c             	sub    esp,0xc
c002691f:	50                   	push   eax
c0026920:	e8 19 d5 fe ff       	call   c0013e3e <HardDiskController::~HardDiskController()>
c0026925:	83 c4 10             	add    esp,0x10
c0026928:	90                   	nop
c0026929:	83 c4 0c             	add    esp,0xc
c002692c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002692e <SATABus::~SATABus()>:
c002692e:	83 ec 0c             	sub    esp,0xc
c0026931:	83 ec 0c             	sub    esp,0xc
c0026934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026938:	e8 cd ff ff ff       	call   c002690a <SATABus::~SATABus()>
c002693d:	83 c4 10             	add    esp,0x10
c0026940:	83 ec 08             	sub    esp,0x8
c0026943:	68 64 01 00 00       	push   0x164
c0026948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002694c:	e8 5c bc fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026951:	83 c4 10             	add    esp,0x10
c0026954:	83 c4 0c             	add    esp,0xc
c0026957:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0026958 <ATA::~ATA()>:
c0026958:	83 ec 0c             	sub    esp,0xc
c002695b:	ba 00 a3 02 c0       	mov    edx,0xc002a300
c0026960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026964:	89 10                	mov    DWORD PTR [eax],edx
c0026966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002696a:	83 ec 0c             	sub    esp,0xc
c002696d:	50                   	push   eax
c002696e:	e8 a9 d5 fe ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c0026973:	83 c4 10             	add    esp,0x10
c0026976:	90                   	nop
c0026977:	83 c4 0c             	add    esp,0xc
c002697a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002697c <ATA::~ATA()>:
c002697c:	83 ec 0c             	sub    esp,0xc
c002697f:	83 ec 0c             	sub    esp,0xc
c0026982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026986:	e8 cd ff ff ff       	call   c0026958 <ATA::~ATA()>
c002698b:	83 c4 10             	add    esp,0x10
c002698e:	83 ec 08             	sub    esp,0x8
c0026991:	68 7c 01 00 00       	push   0x17c
c0026996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002699a:	e8 0e bc fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c002699f:	83 c4 10             	add    esp,0x10
c00269a2:	83 c4 0c             	add    esp,0xc
c00269a5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00269a6 <ATAPI::~ATAPI()>:
c00269a6:	83 ec 0c             	sub    esp,0xc
c00269a9:	ba 6c a3 02 c0       	mov    edx,0xc002a36c
c00269ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269b2:	89 10                	mov    DWORD PTR [eax],edx
c00269b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269b8:	83 ec 0c             	sub    esp,0xc
c00269bb:	50                   	push   eax
c00269bc:	e8 5b d5 fe ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c00269c1:	83 c4 10             	add    esp,0x10
c00269c4:	90                   	nop
c00269c5:	83 c4 0c             	add    esp,0xc
c00269c8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00269ca <ATAPI::~ATAPI()>:
c00269ca:	83 ec 0c             	sub    esp,0xc
c00269cd:	83 ec 0c             	sub    esp,0xc
c00269d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00269d4:	e8 cd ff ff ff       	call   c00269a6 <ATAPI::~ATAPI()>
c00269d9:	83 c4 10             	add    esp,0x10
c00269dc:	83 ec 08             	sub    esp,0x8
c00269df:	68 80 01 00 00       	push   0x180
c00269e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00269e8:	e8 c0 bb fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00269ed:	83 c4 10             	add    esp,0x10
c00269f0:	83 c4 0c             	add    esp,0xc
c00269f3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00269f4 <SATA::~SATA()>:
c00269f4:	83 ec 0c             	sub    esp,0xc
c00269f7:	ba 68 a4 02 c0       	mov    edx,0xc002a468
c00269fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a00:	89 10                	mov    DWORD PTR [eax],edx
c0026a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a06:	83 ec 0c             	sub    esp,0xc
c0026a09:	50                   	push   eax
c0026a0a:	e8 0d d5 fe ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c0026a0f:	83 c4 10             	add    esp,0x10
c0026a12:	90                   	nop
c0026a13:	83 c4 0c             	add    esp,0xc
c0026a16:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0026a18 <SATA::~SATA()>:
c0026a18:	83 ec 0c             	sub    esp,0xc
c0026a1b:	83 ec 0c             	sub    esp,0xc
c0026a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a22:	e8 cd ff ff ff       	call   c00269f4 <SATA::~SATA()>
c0026a27:	83 c4 10             	add    esp,0x10
c0026a2a:	83 ec 08             	sub    esp,0x8
c0026a2d:	68 74 01 00 00       	push   0x174
c0026a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a36:	e8 72 bb fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026a3b:	83 c4 10             	add    esp,0x10
c0026a3e:	83 c4 0c             	add    esp,0xc
c0026a41:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0026a42 <AVX::~AVX()>:
c0026a42:	83 ec 0c             	sub    esp,0xc
c0026a45:	ba a4 a4 02 c0       	mov    edx,0xc002a4a4
c0026a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a4e:	89 10                	mov    DWORD PTR [eax],edx
c0026a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a54:	83 ec 0c             	sub    esp,0xc
c0026a57:	50                   	push   eax
c0026a58:	e8 43 d5 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026a5d:	83 c4 10             	add    esp,0x10
c0026a60:	90                   	nop
c0026a61:	83 c4 0c             	add    esp,0xc
c0026a64:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0026a66 <AVX::~AVX()>:
c0026a66:	83 ec 0c             	sub    esp,0xc
c0026a69:	83 ec 0c             	sub    esp,0xc
c0026a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a70:	e8 cd ff ff ff       	call   c0026a42 <AVX::~AVX()>
c0026a75:	83 c4 10             	add    esp,0x10
c0026a78:	83 ec 08             	sub    esp,0x8
c0026a7b:	68 58 01 00 00       	push   0x158
c0026a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a84:	e8 24 bb fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026a89:	83 c4 10             	add    esp,0x10
c0026a8c:	83 c4 0c             	add    esp,0xc
c0026a8f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0026a90 <MMX::~MMX()>:
c0026a90:	83 ec 0c             	sub    esp,0xc
c0026a93:	ba e4 a4 02 c0       	mov    edx,0xc002a4e4
c0026a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a9c:	89 10                	mov    DWORD PTR [eax],edx
c0026a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aa2:	83 ec 0c             	sub    esp,0xc
c0026aa5:	50                   	push   eax
c0026aa6:	e8 f5 d4 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026aab:	83 c4 10             	add    esp,0x10
c0026aae:	90                   	nop
c0026aaf:	83 c4 0c             	add    esp,0xc
c0026ab2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0026ab4 <MMX::~MMX()>:
c0026ab4:	83 ec 0c             	sub    esp,0xc
c0026ab7:	83 ec 0c             	sub    esp,0xc
c0026aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026abe:	e8 cd ff ff ff       	call   c0026a90 <MMX::~MMX()>
c0026ac3:	83 c4 10             	add    esp,0x10
c0026ac6:	83 ec 08             	sub    esp,0x8
c0026ac9:	68 58 01 00 00       	push   0x158
c0026ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ad2:	e8 d6 ba fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026ad7:	83 c4 10             	add    esp,0x10
c0026ada:	83 c4 0c             	add    esp,0xc
c0026add:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0026ade <SSE::~SSE()>:
c0026ade:	83 ec 0c             	sub    esp,0xc
c0026ae1:	ba 24 a5 02 c0       	mov    edx,0xc002a524
c0026ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026aea:	89 10                	mov    DWORD PTR [eax],edx
c0026aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026af0:	83 ec 0c             	sub    esp,0xc
c0026af3:	50                   	push   eax
c0026af4:	e8 a7 d4 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026af9:	83 c4 10             	add    esp,0x10
c0026afc:	90                   	nop
c0026afd:	83 c4 0c             	add    esp,0xc
c0026b00:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0026b02 <SSE::~SSE()>:
c0026b02:	83 ec 0c             	sub    esp,0xc
c0026b05:	83 ec 0c             	sub    esp,0xc
c0026b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b0c:	e8 cd ff ff ff       	call   c0026ade <SSE::~SSE()>
c0026b11:	83 c4 10             	add    esp,0x10
c0026b14:	83 ec 08             	sub    esp,0x8
c0026b17:	68 58 01 00 00       	push   0x158
c0026b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b20:	e8 88 ba fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026b25:	83 c4 10             	add    esp,0x10
c0026b28:	83 c4 0c             	add    esp,0xc
c0026b2b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0026b2c <x87::~x87()>:
c0026b2c:	83 ec 0c             	sub    esp,0xc
c0026b2f:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c0026b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b38:	89 10                	mov    DWORD PTR [eax],edx
c0026b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b3e:	83 ec 0c             	sub    esp,0xc
c0026b41:	50                   	push   eax
c0026b42:	e8 59 d4 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026b47:	83 c4 10             	add    esp,0x10
c0026b4a:	90                   	nop
c0026b4b:	83 c4 0c             	add    esp,0xc
c0026b4e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0026b50 <x87::~x87()>:
c0026b50:	83 ec 0c             	sub    esp,0xc
c0026b53:	83 ec 0c             	sub    esp,0xc
c0026b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b5a:	e8 cd ff ff ff       	call   c0026b2c <x87::~x87()>
c0026b5f:	83 c4 10             	add    esp,0x10
c0026b62:	83 ec 08             	sub    esp,0x8
c0026b65:	68 58 01 00 00       	push   0x158
c0026b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b6e:	e8 3a ba fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026b73:	83 c4 10             	add    esp,0x10
c0026b76:	83 c4 0c             	add    esp,0xc
c0026b79:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0026b7a <IOAPIC::~IOAPIC()>:
c0026b7a:	83 ec 0c             	sub    esp,0xc
c0026b7d:	ba bc a6 02 c0       	mov    edx,0xc002a6bc
c0026b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b86:	89 10                	mov    DWORD PTR [eax],edx
c0026b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b8c:	83 ec 0c             	sub    esp,0xc
c0026b8f:	50                   	push   eax
c0026b90:	e8 b9 cd fe ff       	call   c001394e <Device::~Device()>
c0026b95:	83 c4 10             	add    esp,0x10
c0026b98:	90                   	nop
c0026b99:	83 c4 0c             	add    esp,0xc
c0026b9c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0026b9e <IOAPIC::~IOAPIC()>:
c0026b9e:	83 ec 0c             	sub    esp,0xc
c0026ba1:	83 ec 0c             	sub    esp,0xc
c0026ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ba8:	e8 cd ff ff ff       	call   c0026b7a <IOAPIC::~IOAPIC()>
c0026bad:	83 c4 10             	add    esp,0x10
c0026bb0:	83 ec 08             	sub    esp,0x8
c0026bb3:	68 68 01 00 00       	push   0x168
c0026bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bbc:	e8 ec b9 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026bc1:	83 c4 10             	add    esp,0x10
c0026bc4:	83 c4 0c             	add    esp,0xc
c0026bc7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0026bc8 <APIC::~APIC()>:
c0026bc8:	83 ec 0c             	sub    esp,0xc
c0026bcb:	ba 74 a6 02 c0       	mov    edx,0xc002a674
c0026bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd4:	89 10                	mov    DWORD PTR [eax],edx
c0026bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bda:	83 ec 0c             	sub    esp,0xc
c0026bdd:	50                   	push   eax
c0026bde:	e8 87 d8 fe ff       	call   c001446a <InterruptController::~InterruptController()>
c0026be3:	83 c4 10             	add    esp,0x10
c0026be6:	90                   	nop
c0026be7:	83 c4 0c             	add    esp,0xc
c0026bea:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0026bec <APIC::~APIC()>:
c0026bec:	83 ec 0c             	sub    esp,0xc
c0026bef:	83 ec 0c             	sub    esp,0xc
c0026bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bf6:	e8 cd ff ff ff       	call   c0026bc8 <APIC::~APIC()>
c0026bfb:	83 c4 10             	add    esp,0x10
c0026bfe:	83 ec 08             	sub    esp,0x8
c0026c01:	68 58 21 00 00       	push   0x2158
c0026c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c0a:	e8 9e b9 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026c0f:	83 c4 10             	add    esp,0x10
c0026c12:	83 c4 0c             	add    esp,0xc
c0026c15:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0026c16 <PIC::~PIC()>:
c0026c16:	83 ec 0c             	sub    esp,0xc
c0026c19:	ba 0c a7 02 c0       	mov    edx,0xc002a70c
c0026c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c22:	89 10                	mov    DWORD PTR [eax],edx
c0026c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c28:	83 ec 0c             	sub    esp,0xc
c0026c2b:	50                   	push   eax
c0026c2c:	e8 39 d8 fe ff       	call   c001446a <InterruptController::~InterruptController()>
c0026c31:	83 c4 10             	add    esp,0x10
c0026c34:	90                   	nop
c0026c35:	83 c4 0c             	add    esp,0xc
c0026c38:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0026c3a <PIC::~PIC()>:
c0026c3a:	83 ec 0c             	sub    esp,0xc
c0026c3d:	83 ec 0c             	sub    esp,0xc
c0026c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c44:	e8 cd ff ff ff       	call   c0026c16 <PIC::~PIC()>
c0026c49:	83 c4 10             	add    esp,0x10
c0026c4c:	83 ec 08             	sub    esp,0x8
c0026c4f:	68 58 21 00 00       	push   0x2158
c0026c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c58:	e8 50 b9 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026c5d:	83 c4 10             	add    esp,0x10
c0026c60:	83 c4 0c             	add    esp,0xc
c0026c63:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026c64 <APICTimer::~APICTimer()>:
c0026c64:	83 ec 0c             	sub    esp,0xc
c0026c67:	ba 60 a7 02 c0       	mov    edx,0xc002a760
c0026c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c70:	89 10                	mov    DWORD PTR [eax],edx
c0026c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c76:	83 ec 0c             	sub    esp,0xc
c0026c79:	50                   	push   eax
c0026c7a:	e8 71 f5 fe ff       	call   c00161f0 <Timer::~Timer()>
c0026c7f:	83 c4 10             	add    esp,0x10
c0026c82:	90                   	nop
c0026c83:	83 c4 0c             	add    esp,0xc
c0026c86:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0026c88 <APICTimer::~APICTimer()>:
c0026c88:	83 ec 0c             	sub    esp,0xc
c0026c8b:	83 ec 0c             	sub    esp,0xc
c0026c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c92:	e8 cd ff ff ff       	call   c0026c64 <APICTimer::~APICTimer()>
c0026c97:	83 c4 10             	add    esp,0x10
c0026c9a:	83 ec 08             	sub    esp,0x8
c0026c9d:	68 60 01 00 00       	push   0x160
c0026ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ca6:	e8 02 b9 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026cab:	83 c4 10             	add    esp,0x10
c0026cae:	83 c4 0c             	add    esp,0xc
c0026cb1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0026cb2 <PIT::~PIT()>:
c0026cb2:	83 ec 0c             	sub    esp,0xc
c0026cb5:	ba b0 a7 02 c0       	mov    edx,0xc002a7b0
c0026cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cbe:	89 10                	mov    DWORD PTR [eax],edx
c0026cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc4:	83 ec 0c             	sub    esp,0xc
c0026cc7:	50                   	push   eax
c0026cc8:	e8 23 f5 fe ff       	call   c00161f0 <Timer::~Timer()>
c0026ccd:	83 c4 10             	add    esp,0x10
c0026cd0:	90                   	nop
c0026cd1:	83 c4 0c             	add    esp,0xc
c0026cd4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0026cd6 <PIT::~PIT()>:
c0026cd6:	83 ec 0c             	sub    esp,0xc
c0026cd9:	83 ec 0c             	sub    esp,0xc
c0026cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ce0:	e8 cd ff ff ff       	call   c0026cb2 <PIT::~PIT()>
c0026ce5:	83 c4 10             	add    esp,0x10
c0026ce8:	83 ec 08             	sub    esp,0x8
c0026ceb:	68 5c 01 00 00       	push   0x15c
c0026cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026cf4:	e8 b4 b8 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026cf9:	83 c4 10             	add    esp,0x10
c0026cfc:	83 c4 0c             	add    esp,0xc
c0026cff:	c3                   	ret    
