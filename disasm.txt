
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 35 f4 00 00       	call   c000f455 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 4f 02 00       	call   c0025018 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b0 5b 02 c0       	mov    ebx,0xc0025bb0
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb bc 5b 02 c0    	cmp    ebx,0xc0025bbc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000049:	3d ac 99 02 c0       	cmp    eax,0xc00299ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 99 02 c0       	push   0xc00299ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000075:	2d ac 99 02 c0       	sub    eax,0xc00299ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 99 02 c0       	push   0xc00299ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d dc 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fdc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c4 5b 02 c0       	mov    ebx,0xc0025bc4
c00000bb:	81 eb c0 5b 02 c0    	sub    ebx,0xc0025bc0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c0 5b 02 c0       	mov    esi,0xc0025bc0
c00000ca:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e0 9f 02 c0       	mov    ds:0xc0029fe0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 99 02 c0       	push   0xc00299ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 dc 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fdc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e4 9f 02 c0       	push   0xc0029fe4
c000012c:	68 ac 99 02 c0       	push   0xc00299ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <goToVM86>:
c0000299:	fa                   	cli    
c000029a:	55                   	push   ebp
c000029b:	89 e5                	mov    ebp,esp
c000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002a0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a9:	25 ff ff 00 00       	and    eax,0xffff
c00002ae:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002c0:	52                   	push   edx
c00002c1:	51                   	push   ecx
c00002c2:	68 02 02 02 00       	push   0x20202
c00002c7:	53                   	push   ebx
c00002c8:	50                   	push   eax
c00002c9:	cf                   	iret   

c00002ca <goToUsermode>:
c00002ca:	fa                   	cli    
c00002cb:	55                   	push   ebp
c00002cc:	89 e5                	mov    ebp,esp
c00002ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002d1:	66 b8 23 00          	mov    ax,0x23
c00002d5:	66 8e d8             	mov    ds,ax
c00002d8:	66 8e c0             	mov    es,ax
c00002db:	66 8e e0             	mov    fs,ax
c00002de:	66 8e e8             	mov    gs,ax
c00002e1:	89 e0                	mov    eax,esp
c00002e3:	68 23 00 00 00       	push   0x23
c00002e8:	50                   	push   eax
c00002e9:	68 02 02 00 00       	push   0x202
c00002ee:	68 1b 00 00 00       	push   0x1b
c00002f3:	53                   	push   ebx
c00002f4:	cf                   	iret   

c00002f5 <switchToThreadASMFirstTime>:
c00002f5:	9c                   	pushf  
c00002f6:	fa                   	cli    
c00002f7:	50                   	push   eax
c00002f8:	53                   	push   ebx
c00002f9:	51                   	push   ecx
c00002fa:	52                   	push   edx
c00002fb:	56                   	push   esi
c00002fc:	57                   	push   edi
c00002fd:	55                   	push   ebp
c00002fe:	e9 11 00 00 00       	jmp    c0000314 <commonThreadSwitch>

c0000303 <switchToThreadASM>:
c0000303:	9c                   	pushf  
c0000304:	50                   	push   eax
c0000305:	53                   	push   ebx
c0000306:	51                   	push   ecx
c0000307:	52                   	push   edx
c0000308:	56                   	push   esi
c0000309:	57                   	push   edi
c000030a:	55                   	push   ebp
c000030b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000311:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000314 <commonThreadSwitch>:
c0000314:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000318:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000031e:	8b 06                	mov    eax,DWORD PTR [esi]
c0000320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000323:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000326:	0f 20 d9             	mov    ecx,cr3
c0000329:	39 c8                	cmp    eax,ecx
c000032b:	74 03                	je     c0000330 <commonThreadSwitch.doneVAS>
c000032d:	0f 22 d8             	mov    cr3,eax

c0000330 <commonThreadSwitch.doneVAS>:
c0000330:	85 d2                	test   edx,edx
c0000332:	74 4e                	je     c0000382 <commonThreadSwitch.notFirstTime>
c0000334:	fa                   	cli    
c0000335:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000338:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000033d:	60                   	pusha  
c000033e:	e8 e9 1c 01 00       	call   c001202c <mapVASFirstTime>
c0000343:	61                   	popa   
c0000344:	89 c4                	mov    esp,eax
c0000346:	56                   	push   esi
c0000347:	52                   	push   edx
c0000348:	e8 2b c1 01 00       	call   c001c478 <changeTSS>
c000034d:	5a                   	pop    edx
c000034e:	5e                   	pop    esi
c000034f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000356:	81 fa 01 00 00 00    	cmp    edx,0x1
c000035c:	74 39                	je     c0000397 <commonThreadSwitch.cameOffAFork>
c000035e:	5d                   	pop    ebp
c000035f:	5f                   	pop    edi
c0000360:	5e                   	pop    esi
c0000361:	59                   	pop    ecx
c0000362:	59                   	pop    ecx
c0000363:	5b                   	pop    ebx
c0000364:	58                   	pop    eax
c0000365:	81 c4 04 00 00 00    	add    esp,0x4
c000036b:	6a 02                	push   0x2
c000036d:	9d                   	popf   
c000036e:	52                   	push   edx
c000036f:	e8 17 c5 01 00       	call   c001c88b <taskStartupFunction>
c0000374:	5a                   	pop    edx
c0000375:	50                   	push   eax
c0000376:	ff d2                	call   edx
c0000378:	e8 bd ca 01 00       	call   c001ce3a <taskReturned>
c000037d:	e9 fb ff ff ff       	jmp    c000037d <commonThreadSwitch.doneVAS+0x4d>

c0000382 <commonThreadSwitch.notFirstTime>:
c0000382:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000385:	56                   	push   esi
c0000386:	52                   	push   edx
c0000387:	e8 ec c0 01 00       	call   c001c478 <changeTSS>
c000038c:	5a                   	pop    edx
c000038d:	5e                   	pop    esi
c000038e:	5d                   	pop    ebp
c000038f:	5f                   	pop    edi
c0000390:	5e                   	pop    esi
c0000391:	5a                   	pop    edx
c0000392:	59                   	pop    ecx
c0000393:	5b                   	pop    ebx
c0000394:	58                   	pop    eax
c0000395:	9d                   	popf   
c0000396:	c3                   	ret    

c0000397 <commonThreadSwitch.cameOffAFork>:
c0000397:	31 c0                	xor    eax,eax
c0000399:	31 d2                	xor    edx,edx
c000039b:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000039e:	e9 a2 02 00 00       	jmp    c0000645 <offAForkJumpThingy>

c00003a3 <detectCPUID>:
c00003a3:	9c                   	pushf  
c00003a4:	9c                   	pushf  
c00003a5:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003ac:	9d                   	popf   
c00003ad:	9c                   	pushf  
c00003ae:	58                   	pop    eax
c00003af:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003b2:	9d                   	popf   
c00003b3:	25 00 00 20 00       	and    eax,0x200000
c00003b8:	c3                   	ret    

c00003b9 <asmQuickAcquireLock>:
c00003b9:	55                   	push   ebp
c00003ba:	89 e5                	mov    ebp,esp
c00003bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bf <asmQuickAcquireLock.retry>:
c00003bf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c4:	72 02                	jb     c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003c6:	fa                   	cli    
c00003c7:	c3                   	ret    

c00003c8 <asmQuickAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003d2:	e9 e8 ff ff ff       	jmp    c00003bf <asmQuickAcquireLock.retry>

c00003d7 <asmQuickReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003e1:	5d                   	pop    ebp
c00003e2:	c3                   	ret    

c00003e3 <asmAcquireLock>:
c00003e3:	55                   	push   ebp
c00003e4:	89 e5                	mov    ebp,esp
c00003e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e9 <asmAcquireLock.retry>:
c00003e9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ee:	72 05                	jb     c00003f5 <asmAcquireLock.spin_with_pause>
c00003f0:	9c                   	pushf  
c00003f1:	58                   	pop    eax
c00003f2:	fa                   	cli    
c00003f3:	5d                   	pop    ebp
c00003f4:	c3                   	ret    

c00003f5 <asmAcquireLock.spin_with_pause>:
c00003f5:	f3 90                	pause  
c00003f7:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003fd:	75 f6                	jne    c00003f5 <asmAcquireLock.spin_with_pause>
c00003ff:	e9 e5 ff ff ff       	jmp    c00003e9 <asmAcquireLock.retry>

c0000404 <asmReleaseLock>:
c0000404:	55                   	push   ebp
c0000405:	89 e5                	mov    ebp,esp
c0000407:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000040a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000040d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000413:	52                   	push   edx
c0000414:	9d                   	popf   
c0000415:	5d                   	pop    ebp
c0000416:	c3                   	ret    

c0000417 <loadGDT>:
c0000417:	0f 01 15 10 a4 02 c0 	lgdtd  ds:0xc002a410
c000041e:	66 b8 10 00          	mov    ax,0x10
c0000422:	66 8e d8             	mov    ds,ax
c0000425:	66 8e c0             	mov    es,ax
c0000428:	66 8e e0             	mov    fs,ax
c000042b:	66 8e e8             	mov    gs,ax
c000042e:	66 8e d0             	mov    ss,ax
c0000431:	e9 00 00 00 00       	jmp    c0000436 <flush2>

c0000436 <flush2>:
c0000436:	c3                   	ret    

c0000437 <isr0>:
c0000437:	fa                   	cli    
c0000438:	68 00 00 00 00       	push   0x0
c000043d:	68 00 00 00 00       	push   0x0
c0000442:	e9 a2 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000447 <isr1>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 01                	push   0x1
c000044c:	e9 98 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000451 <isr2>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 02                	push   0x2
c0000456:	e9 8e 01 00 00       	jmp    c00005e9 <int_common_stub>

c000045b <isr3>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 03                	push   0x3
c0000460:	e9 84 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000465 <isr4>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 04                	push   0x4
c000046a:	e9 7a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000046f <isr5>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 05                	push   0x5
c0000474:	e9 70 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000479 <isr6>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 06                	push   0x6
c000047e:	e9 66 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000483 <isr7>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 07                	push   0x7
c0000488:	e9 5c 01 00 00       	jmp    c00005e9 <int_common_stub>

c000048d <isr8>:
c000048d:	fa                   	cli    
c000048e:	6a 08                	push   0x8
c0000490:	e9 54 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000495 <isr9>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 09                	push   0x9
c000049a:	e9 4a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000049f <isr10>:
c000049f:	fa                   	cli    
c00004a0:	6a 0a                	push   0xa
c00004a2:	e9 42 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004a7 <isr11>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0b                	push   0xb
c00004aa:	e9 3a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004af <isr12>:
c00004af:	fa                   	cli    
c00004b0:	6a 0c                	push   0xc
c00004b2:	e9 32 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004b7 <isr13>:
c00004b7:	fa                   	cli    
c00004b8:	6a 0d                	push   0xd
c00004ba:	e9 2a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004bf <isr14>:
c00004bf:	fa                   	cli    
c00004c0:	6a 0e                	push   0xe
c00004c2:	e9 22 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004c7 <isr15>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 0f                	push   0xf
c00004cc:	e9 18 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004d1 <isr16>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 10                	push   0x10
c00004d6:	e9 0e 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004db <isr17>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 11                	push   0x11
c00004e0:	e9 04 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004e5 <isr18>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 12                	push   0x12
c00004ea:	e9 fa 00 00 00       	jmp    c00005e9 <int_common_stub>

c00004ef <isr96>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 60                	push   0x60
c00004f4:	e9 20 01 00 00       	jmp    c0000619 <syscall_common_stub>

c00004f9 <irq0>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 20                	push   0x20
c00004fe:	e9 e6 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000503 <irq1>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 21                	push   0x21
c0000508:	e9 dc 00 00 00       	jmp    c00005e9 <int_common_stub>

c000050d <irq2>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 22                	push   0x22
c0000512:	e9 d2 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000517 <irq3>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 23                	push   0x23
c000051c:	e9 c8 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000521 <irq4>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 24                	push   0x24
c0000526:	e9 be 00 00 00       	jmp    c00005e9 <int_common_stub>

c000052b <irq5>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 25                	push   0x25
c0000530:	e9 b4 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000535 <irq6>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 26                	push   0x26
c000053a:	e9 aa 00 00 00       	jmp    c00005e9 <int_common_stub>

c000053f <irq7>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 27                	push   0x27
c0000544:	e9 a0 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000549 <irq8>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 28                	push   0x28
c000054e:	e9 96 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000553 <irq9>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 29                	push   0x29
c0000558:	e9 8c 00 00 00       	jmp    c00005e9 <int_common_stub>

c000055d <irq10>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2a                	push   0x2a
c0000562:	e9 82 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000567 <irq11>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2b                	push   0x2b
c000056c:	e9 78 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000571 <irq12>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2c                	push   0x2c
c0000576:	e9 6e 00 00 00       	jmp    c00005e9 <int_common_stub>

c000057b <irq13>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2d                	push   0x2d
c0000580:	e9 64 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000585 <irq14>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 2e                	push   0x2e
c000058a:	e9 5a 00 00 00       	jmp    c00005e9 <int_common_stub>

c000058f <irq15>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 2f                	push   0x2f
c0000594:	e9 50 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000599 <irq16>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 30                	push   0x30
c000059e:	e9 46 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005a3 <irq17>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 31                	push   0x31
c00005a8:	e9 3c 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005ad <irq18>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 32                	push   0x32
c00005b2:	e9 32 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005b7 <irq19>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 33                	push   0x33
c00005bc:	e9 28 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005c1 <irq20>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 34                	push   0x34
c00005c6:	e9 1e 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005cb <irq21>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 35                	push   0x35
c00005d0:	e9 14 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005d5 <irq22>:
c00005d5:	fa                   	cli    
c00005d6:	6a 00                	push   0x0
c00005d8:	6a 36                	push   0x36
c00005da:	e9 0a 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005df <irq23>:
c00005df:	fa                   	cli    
c00005e0:	6a 00                	push   0x0
c00005e2:	6a 37                	push   0x37
c00005e4:	e9 00 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005e9 <int_common_stub>:
c00005e9:	60                   	pusha  
c00005ea:	1e                   	push   ds
c00005eb:	06                   	push   es
c00005ec:	0f a0                	push   fs
c00005ee:	0f a8                	push   gs
c00005f0:	66 b8 10 00          	mov    ax,0x10
c00005f4:	66 8e d8             	mov    ds,ax
c00005f7:	66 8e c0             	mov    es,ax
c00005fa:	66 8e e0             	mov    fs,ax
c00005fd:	66 8e e8             	mov    gs,ax
c0000600:	89 e1                	mov    ecx,esp
c0000602:	51                   	push   ecx
c0000603:	b9 0f 3f 01 c0       	mov    ecx,0xc0013f0f
c0000608:	ff d1                	call   ecx
c000060a:	59                   	pop    ecx
c000060b:	0f a9                	pop    gs
c000060d:	0f a1                	pop    fs
c000060f:	07                   	pop    es
c0000610:	1f                   	pop    ds
c0000611:	61                   	popa   
c0000612:	81 c4 08 00 00 00    	add    esp,0x8
c0000618:	cf                   	iret   

c0000619 <syscall_common_stub>:
c0000619:	60                   	pusha  
c000061a:	1e                   	push   ds
c000061b:	06                   	push   es
c000061c:	0f a0                	push   fs
c000061e:	0f a8                	push   gs
c0000620:	66 b8 10 00          	mov    ax,0x10
c0000624:	66 8e d8             	mov    ds,ax
c0000627:	66 8e c0             	mov    es,ax
c000062a:	66 8e e0             	mov    fs,ax
c000062d:	66 8e e8             	mov    gs,ax
c0000630:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000636:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000639:	89 e1                	mov    ecx,esp
c000063b:	51                   	push   ecx
c000063c:	fb                   	sti    
c000063d:	b9 0f 3f 01 c0       	mov    ecx,0xc0013f0f
c0000642:	ff d1                	call   ecx
c0000644:	59                   	pop    ecx

c0000645 <offAForkJumpThingy>:
c0000645:	0f a9                	pop    gs
c0000647:	0f a1                	pop    fs
c0000649:	07                   	pop    es
c000064a:	1f                   	pop    ds
c000064b:	61                   	popa   
c000064c:	81 c4 08 00 00 00    	add    esp,0x8
c0000652:	cf                   	iret   

c0000653 <memcmp>:
c0000653:	56                   	push   esi
c0000654:	53                   	push   ebx
c0000655:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000659:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000661:	01 d6                	add    esi,edx
c0000663:	39 f2                	cmp    edx,esi
c0000665:	74 0e                	je     c0000675 <memcmp+0x22>
c0000667:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000066a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000066d:	38 c8                	cmp    al,cl
c000066f:	75 08                	jne    c0000679 <memcmp+0x26>
c0000671:	42                   	inc    edx
c0000672:	43                   	inc    ebx
c0000673:	eb ee                	jmp    c0000663 <memcmp+0x10>
c0000675:	31 c0                	xor    eax,eax
c0000677:	eb 02                	jmp    c000067b <memcmp+0x28>
c0000679:	29 c8                	sub    eax,ecx
c000067b:	5b                   	pop    ebx
c000067c:	5e                   	pop    esi
c000067d:	c3                   	ret    

c000067e <memmove>:
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000684:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000068c:	39 c8                	cmp    eax,ecx
c000068e:	73 12                	jae    c00006a2 <memmove+0x24>
c0000690:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000693:	89 c3                	mov    ebx,eax
c0000695:	39 f1                	cmp    ecx,esi
c0000697:	74 1a                	je     c00006b3 <memmove+0x35>
c0000699:	8a 11                	mov    dl,BYTE PTR [ecx]
c000069b:	43                   	inc    ebx
c000069c:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000069f:	41                   	inc    ecx
c00006a0:	eb f3                	jmp    c0000695 <memmove+0x17>
c00006a2:	76 0f                	jbe    c00006b3 <memmove+0x35>
c00006a4:	85 d2                	test   edx,edx
c00006a6:	74 0b                	je     c00006b3 <memmove+0x35>
c00006a8:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00006ac:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00006b0:	4a                   	dec    edx
c00006b1:	eb f1                	jmp    c00006a4 <memmove+0x26>
c00006b3:	5b                   	pop    ebx
c00006b4:	5e                   	pop    esi
c00006b5:	c3                   	ret    

c00006b6 <memcpy>:
c00006b6:	57                   	push   edi
c00006b7:	56                   	push   esi
c00006b8:	53                   	push   ebx
c00006b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006c1:	89 da                	mov    edx,ebx
c00006c3:	89 d9                	mov    ecx,ebx
c00006c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006c9:	83 e2 fc             	and    edx,0xfffffffc
c00006cc:	c1 e9 02             	shr    ecx,0x2
c00006cf:	89 c7                	mov    edi,eax
c00006d1:	fc                   	cld    
c00006d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006d4:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006d7:	01 c2                	add    edx,eax
c00006d9:	01 de                	add    esi,ebx
c00006db:	39 f1                	cmp    ecx,esi
c00006dd:	74 09                	je     c00006e8 <memcpy+0x32>
c00006df:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006e1:	42                   	inc    edx
c00006e2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006e5:	41                   	inc    ecx
c00006e6:	eb f3                	jmp    c00006db <memcpy+0x25>
c00006e8:	5b                   	pop    ebx
c00006e9:	5e                   	pop    esi
c00006ea:	5f                   	pop    edi
c00006eb:	c3                   	ret    

c00006ec <memset>:
c00006ec:	53                   	push   ebx
c00006ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006f5:	89 c2                	mov    edx,eax
c00006f7:	01 c1                	add    ecx,eax
c00006f9:	39 ca                	cmp    edx,ecx
c00006fb:	74 0a                	je     c0000707 <memset+0x1b>
c00006fd:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000701:	42                   	inc    edx
c0000702:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000705:	eb f2                	jmp    c00006f9 <memset+0xd>
c0000707:	5b                   	pop    ebx
c0000708:	c3                   	ret    

c0000709 <strlen>:
c0000709:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000070d:	31 c0                	xor    eax,eax
c000070f:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000713:	74 03                	je     c0000718 <strlen+0xf>
c0000715:	40                   	inc    eax
c0000716:	eb f7                	jmp    c000070f <strlen+0x6>
c0000718:	c3                   	ret    

c0000719 <strpbrk>:
c0000719:	53                   	push   ebx
c000071a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000071e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000720:	84 c9                	test   cl,cl
c0000722:	74 14                	je     c0000738 <strpbrk+0x1f>
c0000724:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000728:	8a 1a                	mov    bl,BYTE PTR [edx]
c000072a:	84 db                	test   bl,bl
c000072c:	74 07                	je     c0000735 <strpbrk+0x1c>
c000072e:	38 cb                	cmp    bl,cl
c0000730:	74 08                	je     c000073a <strpbrk+0x21>
c0000732:	42                   	inc    edx
c0000733:	eb f3                	jmp    c0000728 <strpbrk+0xf>
c0000735:	40                   	inc    eax
c0000736:	eb e6                	jmp    c000071e <strpbrk+0x5>
c0000738:	31 c0                	xor    eax,eax
c000073a:	5b                   	pop    ebx
c000073b:	c3                   	ret    

c000073c <strtok>:
c000073c:	56                   	push   esi
c000073d:	53                   	push   ebx
c000073e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000742:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 0e                	jne    c0000758 <strtok+0x1c>
c000074a:	8b 1d fc 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ffc
c0000750:	85 db                	test   ebx,ebx
c0000752:	75 04                	jne    c0000758 <strtok+0x1c>
c0000754:	31 db                	xor    ebx,ebx
c0000756:	eb 2e                	jmp    c0000786 <strtok+0x4a>
c0000758:	56                   	push   esi
c0000759:	53                   	push   ebx
c000075a:	e8 ba ff ff ff       	call   c0000719 <strpbrk>
c000075f:	5a                   	pop    edx
c0000760:	a3 fc 9f 02 c0       	mov    ds:0xc0029ffc,eax
c0000765:	59                   	pop    ecx
c0000766:	a1 fc 9f 02 c0       	mov    eax,ds:0xc0029ffc
c000076b:	39 d8                	cmp    eax,ebx
c000076d:	75 07                	jne    c0000776 <strtok+0x3a>
c000076f:	43                   	inc    ebx
c0000770:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000774:	eb e2                	jmp    c0000758 <strtok+0x1c>
c0000776:	85 c0                	test   eax,eax
c0000778:	74 da                	je     c0000754 <strtok+0x18>
c000077a:	8d 50 01             	lea    edx,[eax+0x1]
c000077d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000780:	89 15 fc 9f 02 c0    	mov    DWORD PTR ds:0xc0029ffc,edx
c0000786:	89 d8                	mov    eax,ebx
c0000788:	5b                   	pop    ebx
c0000789:	5e                   	pop    esi
c000078a:	c3                   	ret    

c000078b <strcpy>:
c000078b:	53                   	push   ebx
c000078c:	31 d2                	xor    edx,edx
c000078e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000792:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000796:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000799:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000079c:	84 c9                	test   cl,cl
c000079e:	74 06                	je     c00007a6 <strcpy+0x1b>
c00007a0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00007a3:	42                   	inc    edx
c00007a4:	eb ec                	jmp    c0000792 <strcpy+0x7>
c00007a6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00007a9:	5b                   	pop    ebx
c00007aa:	c3                   	ret    

c00007ab <strncpy>:
c00007ab:	56                   	push   esi
c00007ac:	53                   	push   ebx
c00007ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00007b9:	89 c3                	mov    ebx,eax
c00007bb:	85 c9                	test   ecx,ecx
c00007bd:	74 1a                	je     c00007d9 <strncpy+0x2e>
c00007bf:	46                   	inc    esi
c00007c0:	43                   	inc    ebx
c00007c1:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007c4:	49                   	dec    ecx
c00007c5:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007c8:	84 d2                	test   dl,dl
c00007ca:	75 ef                	jne    c00007bb <strncpy+0x10>
c00007cc:	31 d2                	xor    edx,edx
c00007ce:	39 d1                	cmp    ecx,edx
c00007d0:	74 07                	je     c00007d9 <strncpy+0x2e>
c00007d2:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007d6:	42                   	inc    edx
c00007d7:	eb f5                	jmp    c00007ce <strncpy+0x23>
c00007d9:	5b                   	pop    ebx
c00007da:	5e                   	pop    esi
c00007db:	c3                   	ret    

c00007dc <strcmp>:
c00007dc:	31 c9                	xor    ecx,ecx
c00007de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007e6:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007ea:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007ee:	38 d0                	cmp    al,dl
c00007f0:	75 08                	jne    c00007fa <strcmp+0x1e>
c00007f2:	41                   	inc    ecx
c00007f3:	84 c0                	test   al,al
c00007f5:	75 e7                	jne    c00007de <strcmp+0x2>
c00007f7:	31 c0                	xor    eax,eax
c00007f9:	c3                   	ret    
c00007fa:	29 d0                	sub    eax,edx
c00007fc:	c3                   	ret    

c00007fd <strchr>:
c00007fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000801:	8a 10                	mov    dl,BYTE PTR [eax]
c0000803:	84 d2                	test   dl,dl
c0000805:	74 09                	je     c0000810 <strchr+0x13>
c0000807:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000080b:	74 05                	je     c0000812 <strchr+0x15>
c000080d:	40                   	inc    eax
c000080e:	eb f1                	jmp    c0000801 <strchr+0x4>
c0000810:	31 c0                	xor    eax,eax
c0000812:	c3                   	ret    

c0000813 <strncmp>:
c0000813:	56                   	push   esi
c0000814:	53                   	push   ebx
c0000815:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000819:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000081d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000821:	01 d6                	add    esi,edx
c0000823:	39 f2                	cmp    edx,esi
c0000825:	74 12                	je     c0000839 <strncmp+0x26>
c0000827:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000082a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000082d:	38 c8                	cmp    al,cl
c000082f:	75 0c                	jne    c000083d <strncmp+0x2a>
c0000831:	42                   	inc    edx
c0000832:	84 c0                	test   al,al
c0000834:	74 03                	je     c0000839 <strncmp+0x26>
c0000836:	43                   	inc    ebx
c0000837:	eb ea                	jmp    c0000823 <strncmp+0x10>
c0000839:	31 c0                	xor    eax,eax
c000083b:	eb 02                	jmp    c000083f <strncmp+0x2c>
c000083d:	29 c8                	sub    eax,ecx
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strcat>:
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000847:	89 c1                	mov    ecx,eax
c0000849:	8d 51 01             	lea    edx,[ecx+0x1]
c000084c:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000850:	74 04                	je     c0000856 <strcat+0x14>
c0000852:	89 d1                	mov    ecx,edx
c0000854:	eb f3                	jmp    c0000849 <strcat+0x7>
c0000856:	31 d2                	xor    edx,edx
c0000858:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000085c:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000085f:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000862:	42                   	inc    edx
c0000863:	84 db                	test   bl,bl
c0000865:	75 f1                	jne    c0000858 <strcat+0x16>
c0000867:	5b                   	pop    ebx
c0000868:	c3                   	ret    

c0000869 <strncat>:
c0000869:	56                   	push   esi
c000086a:	53                   	push   ebx
c000086b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000086f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000873:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000877:	89 c2                	mov    edx,eax
c0000879:	85 db                	test   ebx,ebx
c000087b:	74 23                	je     c00008a0 <strncat+0x37>
c000087d:	8d 72 01             	lea    esi,[edx+0x1]
c0000880:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000884:	74 04                	je     c000088a <strncat+0x21>
c0000886:	89 f2                	mov    edx,esi
c0000888:	eb f3                	jmp    c000087d <strncat+0x14>
c000088a:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000088d:	41                   	inc    ecx
c000088e:	42                   	inc    edx
c000088f:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000892:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000895:	84 db                	test   bl,bl
c0000897:	74 07                	je     c00008a0 <strncat+0x37>
c0000899:	39 f1                	cmp    ecx,esi
c000089b:	75 f0                	jne    c000088d <strncat+0x24>
c000089d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008a0:	5b                   	pop    ebx
c00008a1:	5e                   	pop    esi
c00008a2:	c3                   	ret    

c00008a3 <strstr>:
c00008a3:	57                   	push   edi
c00008a4:	56                   	push   esi
c00008a5:	53                   	push   ebx
c00008a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ae:	57                   	push   edi
c00008af:	e8 55 fe ff ff       	call   c0000709 <strlen>
c00008b4:	59                   	pop    ecx
c00008b5:	89 c6                	mov    esi,eax
c00008b7:	85 c0                	test   eax,eax
c00008b9:	74 1f                	je     c00008da <strstr+0x37>
c00008bb:	53                   	push   ebx
c00008bc:	e8 48 fe ff ff       	call   c0000709 <strlen>
c00008c1:	5a                   	pop    edx
c00008c2:	39 f0                	cmp    eax,esi
c00008c4:	72 12                	jb     c00008d8 <strstr+0x35>
c00008c6:	56                   	push   esi
c00008c7:	57                   	push   edi
c00008c8:	53                   	push   ebx
c00008c9:	e8 85 fd ff ff       	call   c0000653 <memcmp>
c00008ce:	83 c4 0c             	add    esp,0xc
c00008d1:	85 c0                	test   eax,eax
c00008d3:	74 05                	je     c00008da <strstr+0x37>
c00008d5:	43                   	inc    ebx
c00008d6:	eb e3                	jmp    c00008bb <strstr+0x18>
c00008d8:	31 db                	xor    ebx,ebx
c00008da:	89 d8                	mov    eax,ebx
c00008dc:	5b                   	pop    ebx
c00008dd:	5e                   	pop    esi
c00008de:	5f                   	pop    edi
c00008df:	c3                   	ret    

c00008e0 <toupper>:
c00008e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008e4:	0f b6 d0             	movzx  edx,al
c00008e7:	f6 82 e0 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda420],0x2
c00008ee:	74 03                	je     c00008f3 <toupper+0x13>
c00008f0:	83 e8 20             	sub    eax,0x20
c00008f3:	c3                   	ret    

c00008f4 <tolower>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	0f b6 d0             	movzx  edx,al
c00008fb:	f6 82 e0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda420],0x1
c0000902:	74 03                	je     c0000907 <tolower+0x13>
c0000904:	83 c0 20             	add    eax,0x20
c0000907:	c3                   	ret    

c0000908 <simple_strtoul>:
c0000908:	55                   	push   ebp
c0000909:	57                   	push   edi
c000090a:	56                   	push   esi
c000090b:	53                   	push   ebx
c000090c:	83 ec 08             	sub    esp,0x8
c000090f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000913:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000917:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000091a:	f6 82 e0 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda420],0x8
c0000921:	74 03                	je     c0000926 <simple_strtoul+0x1e>
c0000923:	41                   	inc    ecx
c0000924:	eb f1                	jmp    c0000917 <simple_strtoul+0xf>
c0000926:	80 fa 09             	cmp    dl,0x9
c0000929:	74 f8                	je     c0000923 <simple_strtoul+0x1b>
c000092b:	80 fa 2d             	cmp    dl,0x2d
c000092e:	75 0b                	jne    c000093b <simple_strtoul+0x33>
c0000930:	41                   	inc    ecx
c0000931:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000939:	eb 0e                	jmp    c0000949 <simple_strtoul+0x41>
c000093b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000943:	80 fa 2b             	cmp    dl,0x2b
c0000946:	75 01                	jne    c0000949 <simple_strtoul+0x41>
c0000948:	41                   	inc    ecx
c0000949:	85 f6                	test   esi,esi
c000094b:	75 22                	jne    c000096f <simple_strtoul+0x67>
c000094d:	be 0a 00 00 00       	mov    esi,0xa
c0000952:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000955:	75 5a                	jne    c00009b1 <simple_strtoul+0xa9>
c0000957:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000095b:	50                   	push   eax
c000095c:	e8 93 ff ff ff       	call   c00008f4 <tolower>
c0000961:	5a                   	pop    edx
c0000962:	83 f8 78             	cmp    eax,0x78
c0000965:	74 03                	je     c000096a <simple_strtoul+0x62>
c0000967:	41                   	inc    ecx
c0000968:	eb 16                	jmp    c0000980 <simple_strtoul+0x78>
c000096a:	83 c1 02             	add    ecx,0x2
c000096d:	eb 22                	jmp    c0000991 <simple_strtoul+0x89>
c000096f:	8d 46 fe             	lea    eax,[esi-0x2]
c0000972:	83 f8 22             	cmp    eax,0x22
c0000975:	0f 87 b7 00 00 00    	ja     c0000a32 <simple_strtoul+0x12a>
c000097b:	83 fe 08             	cmp    esi,0x8
c000097e:	75 0c                	jne    c000098c <simple_strtoul+0x84>
c0000980:	be 08 00 00 00       	mov    esi,0x8
c0000985:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000988:	75 27                	jne    c00009b1 <simple_strtoul+0xa9>
c000098a:	eb 1f                	jmp    c00009ab <simple_strtoul+0xa3>
c000098c:	83 fe 10             	cmp    esi,0x10
c000098f:	75 20                	jne    c00009b1 <simple_strtoul+0xa9>
c0000991:	be 10 00 00 00       	mov    esi,0x10
c0000996:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000999:	75 16                	jne    c00009b1 <simple_strtoul+0xa9>
c000099b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000099f:	50                   	push   eax
c00009a0:	e8 4f ff ff ff       	call   c00008f4 <tolower>
c00009a5:	5d                   	pop    ebp
c00009a6:	83 f8 78             	cmp    eax,0x78
c00009a9:	74 03                	je     c00009ae <simple_strtoul+0xa6>
c00009ab:	41                   	inc    ecx
c00009ac:	eb 03                	jmp    c00009b1 <simple_strtoul+0xa9>
c00009ae:	83 c1 02             	add    ecx,0x2
c00009b1:	31 ed                	xor    ebp,ebp
c00009b3:	31 db                	xor    ebx,ebx
c00009b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009be:	84 d2                	test   dl,dl
c00009c0:	74 27                	je     c00009e9 <simple_strtoul+0xe1>
c00009c2:	0f b6 fa             	movzx  edi,dl
c00009c5:	f6 87 e0 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda420],0x4
c00009cc:	74 05                	je     c00009d3 <simple_strtoul+0xcb>
c00009ce:	83 ef 30             	sub    edi,0x30
c00009d1:	eb 22                	jmp    c00009f5 <simple_strtoul+0xed>
c00009d3:	0f be d2             	movsx  edx,dl
c00009d6:	52                   	push   edx
c00009d7:	e8 04 ff ff ff       	call   c00008e0 <toupper>
c00009dc:	5f                   	pop    edi
c00009dd:	0f b6 d0             	movzx  edx,al
c00009e0:	f6 82 e0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda420],0x1
c00009e7:	75 09                	jne    c00009f2 <simple_strtoul+0xea>
c00009e9:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ee:	75 2d                	jne    c0000a1d <simple_strtoul+0x115>
c00009f0:	eb 57                	jmp    c0000a49 <simple_strtoul+0x141>
c00009f2:	8d 78 c9             	lea    edi,[eax-0x37]
c00009f5:	39 f7                	cmp    edi,esi
c00009f7:	73 f0                	jae    c00009e9 <simple_strtoul+0xe1>
c00009f9:	31 d2                	xor    edx,edx
c00009fb:	89 f8                	mov    eax,edi
c00009fd:	f7 d0                	not    eax
c00009ff:	f7 f6                	div    esi
c0000a01:	39 d8                	cmp    eax,ebx
c0000a03:	72 0e                	jb     c0000a13 <simple_strtoul+0x10b>
c0000a05:	0f af de             	imul   ebx,esi
c0000a08:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a0f:	01 fb                	add    ebx,edi
c0000a11:	eb 07                	jmp    c0000a1a <simple_strtoul+0x112>
c0000a13:	bd 01 00 00 00       	mov    ebp,0x1
c0000a18:	31 db                	xor    ebx,ebx
c0000a1a:	41                   	inc    ecx
c0000a1b:	eb 9f                	jmp    c00009bc <simple_strtoul+0xb4>
c0000a1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a20:	09 d8                	or     eax,ebx
c0000a22:	75 1f                	jne    c0000a43 <simple_strtoul+0x13b>
c0000a24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a28:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a2c:	31 db                	xor    ebx,ebx
c0000a2e:	89 38                	mov    DWORD PTR [eax],edi
c0000a30:	eb 17                	jmp    c0000a49 <simple_strtoul+0x141>
c0000a32:	31 db                	xor    ebx,ebx
c0000a34:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a39:	74 14                	je     c0000a4f <simple_strtoul+0x147>
c0000a3b:	31 ed                	xor    ebp,ebp
c0000a3d:	85 c9                	test   ecx,ecx
c0000a3f:	75 e3                	jne    c0000a24 <simple_strtoul+0x11c>
c0000a41:	31 db                	xor    ebx,ebx
c0000a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a47:	89 08                	mov    DWORD PTR [eax],ecx
c0000a49:	4d                   	dec    ebp
c0000a4a:	75 03                	jne    c0000a4f <simple_strtoul+0x147>
c0000a4c:	83 cb ff             	or     ebx,0xffffffff
c0000a4f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a54:	75 02                	jne    c0000a58 <simple_strtoul+0x150>
c0000a56:	f7 db                	neg    ebx
c0000a58:	83 c4 08             	add    esp,0x8
c0000a5b:	89 d8                	mov    eax,ebx
c0000a5d:	5b                   	pop    ebx
c0000a5e:	5e                   	pop    esi
c0000a5f:	5f                   	pop    edi
c0000a60:	5d                   	pop    ebp
c0000a61:	c3                   	ret    

c0000a62 <largebin_index>:
c0000a62:	89 c2                	mov    edx,eax
c0000a64:	c1 ea 08             	shr    edx,0x8
c0000a67:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a6d:	77 10                	ja     c0000a7f <largebin_index+0x1d>
c0000a6f:	0f bd d2             	bsr    edx,edx
c0000a72:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a75:	d3 e8                	shr    eax,cl
c0000a77:	83 e0 03             	and    eax,0x3
c0000a7a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a7e:	c3                   	ret    
c0000a7f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a84:	c3                   	ret    

c0000a85 <malloc_init_state>:
c0000a85:	53                   	push   ebx
c0000a86:	8d 50 34             	lea    edx,[eax+0x34]
c0000a89:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a8f:	89 d1                	mov    ecx,edx
c0000a91:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a94:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a97:	83 c2 08             	add    edx,0x8
c0000a9a:	39 da                	cmp    edx,ebx
c0000a9c:	75 f3                	jne    c0000a91 <malloc_init_state+0xc>
c0000a9e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000aa0:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000aaa:	83 e2 03             	and    edx,0x3
c0000aad:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ab7:	83 ca 48             	or     edx,0x48
c0000aba:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ac4:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ace:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ad5:	89 10                	mov    DWORD PTR [eax],edx
c0000ad7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ada:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ae4:	5b                   	pop    ebx
c0000ae5:	c3                   	ret    

c0000ae6 <malloc_consolidate>:
c0000ae6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ae8:	85 d2                	test   edx,edx
c0000aea:	0f 84 d8 00 00 00    	je     c0000bc8 <malloc_consolidate+0xe2>
c0000af0:	55                   	push   ebp
c0000af1:	83 e2 fd             	and    edx,0xfffffffd
c0000af4:	57                   	push   edi
c0000af5:	89 c5                	mov    ebp,eax
c0000af7:	56                   	push   esi
c0000af8:	8d 78 34             	lea    edi,[eax+0x34]
c0000afb:	53                   	push   ebx
c0000afc:	83 ec 10             	sub    esp,0x10
c0000aff:	89 10                	mov    DWORD PTR [eax],edx
c0000b01:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000b05:	c1 ea 03             	shr    edx,0x3
c0000b08:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000b0c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000b10:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000b13:	85 d2                	test   edx,edx
c0000b15:	0f 84 98 00 00 00    	je     c0000bb3 <malloc_consolidate+0xcd>
c0000b1b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b22:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b25:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b2c:	89 f9                	mov    ecx,edi
c0000b2e:	83 e1 fe             	and    ecx,0xfffffffe
c0000b31:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b34:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b37:	83 e3 fc             	and    ebx,0xfffffffc
c0000b3a:	83 e7 01             	and    edi,0x1
c0000b3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b40:	75 14                	jne    c0000b56 <malloc_consolidate+0x70>
c0000b42:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b44:	29 fa                	sub    edx,edi
c0000b46:	01 f9                	add    ecx,edi
c0000b48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b4b:	89 fb                	mov    ebx,edi
c0000b4d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b50:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b53:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b56:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b59:	74 40                	je     c0000b9b <malloc_consolidate+0xb5>
c0000b5b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b5e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b61:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b65:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b68:	83 e7 01             	and    edi,0x1
c0000b6b:	75 0e                	jne    c0000b7b <malloc_consolidate+0x95>
c0000b6d:	01 d9                	add    ecx,ebx
c0000b6f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b72:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b75:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b78:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b7b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b7e:	89 ce                	mov    esi,ecx
c0000b80:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b83:	83 ce 01             	or     esi,0x1
c0000b86:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b89:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b8c:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b8f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b93:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b96:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b99:	eb 0c                	jmp    c0000ba7 <malloc_consolidate+0xc1>
c0000b9b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b9e:	83 c9 01             	or     ecx,0x1
c0000ba1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000bab:	85 d2                	test   edx,edx
c0000bad:	0f 85 6f ff ff ff    	jne    c0000b22 <malloc_consolidate+0x3c>
c0000bb3:	83 c5 04             	add    ebp,0x4
c0000bb6:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000bba:	0f 85 50 ff ff ff    	jne    c0000b10 <malloc_consolidate+0x2a>
c0000bc0:	83 c4 10             	add    esp,0x10
c0000bc3:	5b                   	pop    ebx
c0000bc4:	5e                   	pop    esi
c0000bc5:	5f                   	pop    edi
c0000bc6:	5d                   	pop    ebp
c0000bc7:	c3                   	ret    
c0000bc8:	e9 b8 fe ff ff       	jmp    c0000a85 <malloc_init_state>

c0000bcd <dlfree>:
c0000bcd:	57                   	push   edi
c0000bce:	56                   	push   esi
c0000bcf:	53                   	push   ebx
c0000bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bd4:	85 db                	test   ebx,ebx
c0000bd6:	0f 84 e2 00 00 00    	je     c0000cbe <dlfree+0xf1>
c0000bdc:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bdf:	8b 0d 00 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a000
c0000be5:	89 f0                	mov    eax,esi
c0000be7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bea:	83 e0 fc             	and    eax,0xfffffffc
c0000bed:	39 c1                	cmp    ecx,eax
c0000bef:	72 24                	jb     c0000c15 <dlfree+0x48>
c0000bf1:	83 c9 03             	or     ecx,0x3
c0000bf4:	c1 e8 03             	shr    eax,0x3
c0000bf7:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000bfd:	83 e8 02             	sub    eax,0x2
c0000c00:	8b 0c 85 04 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5ffc]
c0000c07:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000c09:	89 14 85 04 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ffc],edx
c0000c10:	e9 a9 00 00 00       	jmp    c0000cbe <dlfree+0xf1>
c0000c15:	83 e6 02             	and    esi,0x2
c0000c18:	0f 85 a0 00 00 00    	jne    c0000cbe <dlfree+0xf1>
c0000c1e:	83 c9 01             	or     ecx,0x1
c0000c21:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c24:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000c2a:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c2d:	83 e1 fc             	and    ecx,0xfffffffc
c0000c30:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c34:	75 13                	jne    c0000c49 <dlfree+0x7c>
c0000c36:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c39:	29 da                	sub    edx,ebx
c0000c3b:	01 d8                	add    eax,ebx
c0000c3d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c40:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c43:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c46:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c49:	39 35 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,esi
c0000c4f:	74 40                	je     c0000c91 <dlfree+0xc4>
c0000c51:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c55:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c58:	80 e3 01             	and    bl,0x1
c0000c5b:	75 0e                	jne    c0000c6b <dlfree+0x9e>
c0000c5d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c60:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c63:	01 c8                	add    eax,ecx
c0000c65:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c68:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c6b:	8b 0d 3c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a03c
c0000c71:	c7 42 0c 34 a0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a034
c0000c78:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c7b:	89 15 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edx
c0000c81:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c84:	89 c1                	mov    ecx,eax
c0000c86:	83 c9 01             	or     ecx,0x1
c0000c89:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c8c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c8f:	eb 10                	jmp    c0000ca1 <dlfree+0xd4>
c0000c91:	01 c8                	add    eax,ecx
c0000c93:	89 c1                	mov    ecx,eax
c0000c95:	83 c9 01             	or     ecx,0x1
c0000c98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9b:	89 15 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,edx
c0000ca1:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ca6:	76 16                	jbe    c0000cbe <dlfree+0xf1>
c0000ca8:	f6 05 00 a0 02 c0 02 	test   BYTE PTR ds:0xc002a000,0x2
c0000caf:	74 0d                	je     c0000cbe <dlfree+0xf1>
c0000cb1:	5b                   	pop    ebx
c0000cb2:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	e9 28 fe ff ff       	jmp    c0000ae6 <malloc_consolidate>
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	c3                   	ret    

c0000cc2 <sYSMALLOc>:
c0000cc2:	55                   	push   ebp
c0000cc3:	57                   	push   edi
c0000cc4:	56                   	push   esi
c0000cc5:	53                   	push   ebx
c0000cc6:	89 d3                	mov    ebx,edx
c0000cc8:	83 ec 2c             	sub    esp,0x2c
c0000ccb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ccf:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cd5:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cd8:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cdb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cdf:	74 1f                	je     c0000d00 <sYSMALLOc+0x3e>
c0000ce1:	89 d8                	mov    eax,ebx
c0000ce3:	e8 fe fd ff ff       	call   c0000ae6 <malloc_consolidate>
c0000ce8:	83 ec 0c             	sub    esp,0xc
c0000ceb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cef:	83 e8 07             	sub    eax,0x7
c0000cf2:	50                   	push   eax
c0000cf3:	e8 30 02 00 00       	call   c0000f28 <dlmalloc>
c0000cf8:	83 c4 10             	add    esp,0x10
c0000cfb:	e9 20 02 00 00       	jmp    c0000f20 <sYSMALLOc+0x25e>
c0000d00:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000d03:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000d09:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000d0c:	83 e0 fc             	and    eax,0xfffffffc
c0000d0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000d13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000d17:	83 c0 10             	add    eax,0x10
c0000d1a:	01 c1                	add    ecx,eax
c0000d1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d20:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d27:	74 04                	je     c0000d2d <sYSMALLOc+0x6b>
c0000d29:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d2d:	f7 da                	neg    edx
c0000d2f:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d37:	21 d1                	and    ecx,edx
c0000d39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d3d:	7f 07                	jg     c0000d46 <sYSMALLOc+0x84>
c0000d3f:	31 c0                	xor    eax,eax
c0000d41:	e9 da 01 00 00       	jmp    c0000f20 <sYSMALLOc+0x25e>
c0000d46:	83 ec 0c             	sub    esp,0xc
c0000d49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d4d:	e8 61 e2 00 00       	call   c000efb3 <sbrk>
c0000d52:	83 c4 10             	add    esp,0x10
c0000d55:	89 c6                	mov    esi,eax
c0000d57:	83 f8 ff             	cmp    eax,0xffffffff
c0000d5a:	74 e3                	je     c0000d3f <sYSMALLOc+0x7d>
c0000d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d60:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d64:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d67:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d6d:	39 f1                	cmp    ecx,esi
c0000d6f:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d75:	75 13                	jne    c0000d8a <sYSMALLOc+0xc8>
c0000d77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d7b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7f:	83 c8 01             	or     eax,0x1
c0000d82:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d85:	e9 3e 01 00 00       	jmp    c0000ec8 <sYSMALLOc+0x206>
c0000d8a:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d90:	88 d0                	mov    al,dl
c0000d92:	83 e0 01             	and    eax,0x1
c0000d95:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d9a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d9e:	0f 95 c0             	setne  al
c0000da1:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000da5:	39 f1                	cmp    ecx,esi
c0000da7:	76 12                	jbe    c0000dbb <sYSMALLOc+0xf9>
c0000da9:	84 c0                	test   al,al
c0000dab:	74 0e                	je     c0000dbb <sYSMALLOc+0xf9>
c0000dad:	83 e2 fe             	and    edx,0xfffffffe
c0000db0:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000db6:	e9 83 00 00 00       	jmp    c0000e3e <sYSMALLOc+0x17c>
c0000dbb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000dc0:	74 7c                	je     c0000e3e <sYSMALLOc+0x17c>
c0000dc2:	84 c0                	test   al,al
c0000dc4:	74 0c                	je     c0000dd2 <sYSMALLOc+0x110>
c0000dc6:	89 f0                	mov    eax,esi
c0000dc8:	29 c8                	sub    eax,ecx
c0000dca:	01 e8                	add    eax,ebp
c0000dcc:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000dd2:	89 f2                	mov    edx,esi
c0000dd4:	83 e2 07             	and    edx,0x7
c0000dd7:	74 0c                	je     c0000de5 <sYSMALLOc+0x123>
c0000dd9:	b8 08 00 00 00       	mov    eax,0x8
c0000dde:	29 d0                	sub    eax,edx
c0000de0:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000de3:	eb 04                	jmp    c0000de9 <sYSMALLOc+0x127>
c0000de5:	89 f5                	mov    ebp,esi
c0000de7:	31 c0                	xor    eax,eax
c0000de9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ded:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df5:	01 c1                	add    ecx,eax
c0000df7:	83 ec 0c             	sub    esp,0xc
c0000dfa:	01 f1                	add    ecx,esi
c0000dfc:	01 ca                	add    edx,ecx
c0000dfe:	29 c8                	sub    eax,ecx
c0000e00:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000e04:	01 c2                	add    edx,eax
c0000e06:	52                   	push   edx
c0000e07:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000e0b:	e8 a3 e1 00 00       	call   c000efb3 <sbrk>
c0000e10:	83 c4 10             	add    esp,0x10
c0000e13:	83 f8 ff             	cmp    eax,0xffffffff
c0000e16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000e1a:	75 0f                	jne    c0000e2b <sYSMALLOc+0x169>
c0000e1c:	83 ec 0c             	sub    esp,0xc
c0000e1f:	6a 00                	push   0x0
c0000e21:	e8 8d e1 00 00       	call   c000efb3 <sbrk>
c0000e26:	83 c4 10             	add    esp,0x10
c0000e29:	eb 30                	jmp    c0000e5b <sYSMALLOc+0x199>
c0000e2b:	39 c6                	cmp    esi,eax
c0000e2d:	76 33                	jbe    c0000e62 <sYSMALLOc+0x1a0>
c0000e2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e33:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e3a:	01 f0                	add    eax,esi
c0000e3c:	eb 1d                	jmp    c0000e5b <sYSMALLOc+0x199>
c0000e3e:	83 ec 0c             	sub    esp,0xc
c0000e41:	89 f5                	mov    ebp,esi
c0000e43:	6a 00                	push   0x0
c0000e45:	e8 69 e1 00 00       	call   c000efb3 <sbrk>
c0000e4a:	89 c2                	mov    edx,eax
c0000e4c:	29 f2                	sub    edx,esi
c0000e4e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e52:	83 c4 10             	add    esp,0x10
c0000e55:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e5b:	31 d2                	xor    edx,edx
c0000e5d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e60:	74 66                	je     c0000ec8 <sYSMALLOc+0x206>
c0000e62:	29 e8                	sub    eax,ebp
c0000e64:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e67:	01 d0                	add    eax,edx
c0000e69:	83 c8 01             	or     eax,0x1
c0000e6c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e6f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e75:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e7a:	74 4c                	je     c0000ec8 <sYSMALLOc+0x206>
c0000e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e80:	83 e8 0c             	sub    eax,0xc
c0000e83:	83 e0 f8             	and    eax,0xfffffff8
c0000e86:	89 c2                	mov    edx,eax
c0000e88:	83 ca 01             	or     edx,0x1
c0000e8b:	83 f8 0f             	cmp    eax,0xf
c0000e8e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e91:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e99:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ea1:	76 25                	jbe    c0000ec8 <sYSMALLOc+0x206>
c0000ea3:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000ea9:	83 ec 0c             	sub    esp,0xc
c0000eac:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000eb6:	83 c7 08             	add    edi,0x8
c0000eb9:	57                   	push   edi
c0000eba:	e8 0e fd ff ff       	call   c0000bcd <dlfree>
c0000ebf:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ec5:	83 c4 10             	add    esp,0x10
c0000ec8:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ece:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ed4:	73 06                	jae    c0000edc <sYSMALLOc+0x21a>
c0000ed6:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000edc:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ee2:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ee8:	73 06                	jae    c0000ef0 <sYSMALLOc+0x22e>
c0000eea:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ef0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ef3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ef6:	83 e2 fc             	and    edx,0xfffffffc
c0000ef9:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000efd:	0f 82 3c fe ff ff    	jb     c0000d3f <sYSMALLOc+0x7d>
c0000f03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000f07:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f0a:	29 fa                	sub    edx,edi
c0000f0c:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f0f:	83 ca 01             	or     edx,0x1
c0000f12:	89 fb                	mov    ebx,edi
c0000f14:	83 c0 08             	add    eax,0x8
c0000f17:	83 cb 01             	or     ebx,0x1
c0000f1a:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f1d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f20:	83 c4 2c             	add    esp,0x2c
c0000f23:	5b                   	pop    ebx
c0000f24:	5e                   	pop    esi
c0000f25:	5f                   	pop    edi
c0000f26:	5d                   	pop    ebp
c0000f27:	c3                   	ret    

c0000f28 <dlmalloc>:
c0000f28:	55                   	push   ebp
c0000f29:	57                   	push   edi
c0000f2a:	56                   	push   esi
c0000f2b:	53                   	push   ebx
c0000f2c:	83 ec 1c             	sub    esp,0x1c
c0000f2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f33:	83 f8 df             	cmp    eax,0xffffffdf
c0000f36:	0f 87 70 03 00 00    	ja     c00012ac <dlmalloc+0x384>
c0000f3c:	83 c0 0b             	add    eax,0xb
c0000f3f:	be 10 00 00 00       	mov    esi,0x10
c0000f44:	83 f8 0f             	cmp    eax,0xf
c0000f47:	76 05                	jbe    c0000f4e <dlmalloc+0x26>
c0000f49:	83 e0 f8             	and    eax,0xfffffff8
c0000f4c:	89 c6                	mov    esi,eax
c0000f4e:	8b 3d 00 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a000
c0000f54:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f5a:	75 17                	jne    c0000f73 <dlmalloc+0x4b>
c0000f5c:	85 ff                	test   edi,edi
c0000f5e:	0f 85 05 03 00 00    	jne    c0001269 <dlmalloc+0x341>
c0000f64:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000f69:	e8 78 fb ff ff       	call   c0000ae6 <malloc_consolidate>
c0000f6e:	e9 f6 02 00 00       	jmp    c0001269 <dlmalloc+0x341>
c0000f73:	39 f7                	cmp    edi,esi
c0000f75:	72 1f                	jb     c0000f96 <dlmalloc+0x6e>
c0000f77:	89 f2                	mov    edx,esi
c0000f79:	c1 ea 03             	shr    edx,0x3
c0000f7c:	83 ea 02             	sub    edx,0x2
c0000f7f:	8b 04 95 04 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ffc]
c0000f86:	85 c0                	test   eax,eax
c0000f88:	74 0c                	je     c0000f96 <dlmalloc+0x6e>
c0000f8a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f8d:	89 0c 95 04 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5ffc],ecx
c0000f94:	eb 30                	jmp    c0000fc6 <dlmalloc+0x9e>
c0000f96:	89 f0                	mov    eax,esi
c0000f98:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9e:	77 2e                	ja     c0000fce <dlmalloc+0xa6>
c0000fa0:	c1 e8 03             	shr    eax,0x3
c0000fa3:	8d 14 c5 34 a0 02 c0 	lea    edx,[eax*8-0x3ffd5fcc]
c0000faa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fae:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000fb1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000fb4:	39 c3                	cmp    ebx,eax
c0000fb6:	74 2e                	je     c0000fe6 <dlmalloc+0xbe>
c0000fb8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000fbb:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fc0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fc6:	83 c0 08             	add    eax,0x8
c0000fc9:	e9 e0 02 00 00       	jmp    c00012ae <dlmalloc+0x386>
c0000fce:	e8 8f fa ff ff       	call   c0000a62 <largebin_index>
c0000fd3:	83 e7 02             	and    edi,0x2
c0000fd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fda:	74 0a                	je     c0000fe6 <dlmalloc+0xbe>
c0000fdc:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000fe1:	e8 00 fb ff ff       	call   c0000ae6 <malloc_consolidate>
c0000fe6:	8d 46 10             	lea    eax,[esi+0x10]
c0000fe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fed:	8b 1d 40 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a040
c0000ff3:	81 fb 34 a0 02 c0    	cmp    ebx,0xc002a034
c0000ff9:	0f 84 13 01 00 00    	je     c0001112 <dlmalloc+0x1ea>
c0000fff:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001002:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001005:	83 e7 fc             	and    edi,0xfffffffc
c0001008:	81 fe ff 00 00 00    	cmp    esi,0xff
c000100e:	77 4c                	ja     c000105c <dlmalloc+0x134>
c0001010:	3d 34 a0 02 c0       	cmp    eax,0xc002a034
c0001015:	75 45                	jne    c000105c <dlmalloc+0x134>
c0001017:	39 1d 30 a0 02 c0    	cmp    DWORD PTR ds:0xc002a030,ebx
c000101d:	75 3d                	jne    c000105c <dlmalloc+0x134>
c000101f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001023:	73 37                	jae    c000105c <dlmalloc+0x134>
c0001025:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001028:	89 fa                	mov    edx,edi
c000102a:	a3 3c a0 02 c0       	mov    ds:0xc002a03c,eax
c000102f:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001034:	a3 30 a0 02 c0       	mov    ds:0xc002a030,eax
c0001039:	29 f2                	sub    edx,esi
c000103b:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c0001042:	c7 40 0c 34 a0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a034
c0001049:	83 ce 01             	or     esi,0x1
c000104c:	89 d1                	mov    ecx,edx
c000104e:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001051:	83 c9 01             	or     ecx,0x1
c0001054:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001057:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000105a:	eb 15                	jmp    c0001071 <dlmalloc+0x149>
c000105c:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001061:	39 fe                	cmp    esi,edi
c0001063:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c000106a:	75 0d                	jne    c0001079 <dlmalloc+0x151>
c000106c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001071:	8d 43 08             	lea    eax,[ebx+0x8]
c0001074:	e9 35 02 00 00       	jmp    c00012ae <dlmalloc+0x386>
c0001079:	89 f8                	mov    eax,edi
c000107b:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001081:	77 19                	ja     c000109c <dlmalloc+0x174>
c0001083:	c1 e8 03             	shr    eax,0x3
c0001086:	8d 14 00             	lea    edx,[eax+eax*1]
c0001089:	83 c2 0d             	add    edx,0xd
c000108c:	8d 2c 95 f8 9f 02 c0 	lea    ebp,[edx*4-0x3ffd6008]
c0001093:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c000109a:	eb 46                	jmp    c00010e2 <dlmalloc+0x1ba>
c000109c:	e8 c1 f9 ff ff       	call   c0000a62 <largebin_index>
c00010a1:	8d 14 00             	lea    edx,[eax+eax*1]
c00010a4:	83 c2 0d             	add    edx,0xd
c00010a7:	8d 0c 95 00 a0 02 c0 	lea    ecx,[edx*4-0x3ffd6000]
c00010ae:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c00010b5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00010b8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00010bc:	89 d5                	mov    ebp,edx
c00010be:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010c2:	74 1e                	je     c00010e2 <dlmalloc+0x1ba>
c00010c4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010c7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010ca:	77 12                	ja     c00010de <dlmalloc+0x1b6>
c00010cc:	83 cf 01             	or     edi,0x1
c00010cf:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010d2:	76 05                	jbe    c00010d9 <dlmalloc+0x1b1>
c00010d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010d7:	eb f6                	jmp    c00010cf <dlmalloc+0x1a7>
c00010d9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010dc:	eb 04                	jmp    c00010e2 <dlmalloc+0x1ba>
c00010de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010e2:	89 c7                	mov    edi,eax
c00010e4:	88 c1                	mov    cl,al
c00010e6:	c1 ff 05             	sar    edi,0x5
c00010e9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010ed:	bf 01 00 00 00       	mov    edi,0x1
c00010f2:	d3 e7                	shl    edi,cl
c00010f4:	89 f8                	mov    eax,edi
c00010f6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010fa:	09 04 bd 34 a3 02 c0 	or     DWORD PTR [edi*4-0x3ffd5ccc],eax
c0001101:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001104:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001107:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000110a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000110d:	e9 db fe ff ff       	jmp    c0000fed <dlmalloc+0xc5>
c0001112:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001118:	76 78                	jbe    c0001192 <dlmalloc+0x26a>
c000111a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000111e:	8d 04 c5 34 a0 02 c0 	lea    eax,[eax*8-0x3ffd5fcc]
c0001125:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112b:	39 ca                	cmp    edx,ecx
c000112d:	74 63                	je     c0001192 <dlmalloc+0x26a>
c000112f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001132:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001135:	83 e3 fc             	and    ebx,0xfffffffc
c0001138:	39 de                	cmp    esi,ebx
c000113a:	77 52                	ja     c000118e <dlmalloc+0x266>
c000113c:	89 df                	mov    edi,ebx
c000113e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001141:	29 f7                	sub    edi,esi
c0001143:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001146:	01 d3                	add    ebx,edx
c0001148:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000114b:	83 ff 0f             	cmp    edi,0xf
c000114e:	8d 42 08             	lea    eax,[edx+0x8]
c0001151:	77 09                	ja     c000115c <dlmalloc+0x234>
c0001153:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001157:	e9 52 01 00 00       	jmp    c00012ae <dlmalloc+0x386>
c000115c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000115f:	83 ce 01             	or     esi,0x1
c0001162:	89 0d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,ecx
c0001168:	89 0d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,ecx
c000116e:	c7 41 08 34 a0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a034
c0001175:	c7 41 0c 34 a0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a034
c000117c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000117f:	89 fa                	mov    edx,edi
c0001181:	83 ca 01             	or     edx,0x1
c0001184:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001187:	89 3b                	mov    DWORD PTR [ebx],edi
c0001189:	e9 20 01 00 00       	jmp    c00012ae <dlmalloc+0x386>
c000118e:	89 c2                	mov    edx,eax
c0001190:	eb 99                	jmp    c000112b <dlmalloc+0x203>
c0001192:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001196:	b8 01 00 00 00       	mov    eax,0x1
c000119b:	41                   	inc    ecx
c000119c:	89 cb                	mov    ebx,ecx
c000119e:	8d 14 cd 2c a0 02 c0 	lea    edx,[ecx*8-0x3ffd5fd4]
c00011a5:	c1 eb 05             	shr    ebx,0x5
c00011a8:	d3 e0                	shl    eax,cl
c00011aa:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c00011b1:	39 f8                	cmp    eax,edi
c00011b3:	77 04                	ja     c00011b9 <dlmalloc+0x291>
c00011b5:	85 c0                	test   eax,eax
c00011b7:	75 26                	jne    c00011df <dlmalloc+0x2b7>
c00011b9:	43                   	inc    ebx
c00011ba:	83 fb 02             	cmp    ebx,0x2
c00011bd:	0f 87 a6 00 00 00    	ja     c0001269 <dlmalloc+0x341>
c00011c3:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c00011ca:	85 ff                	test   edi,edi
c00011cc:	74 eb                	je     c00011b9 <dlmalloc+0x291>
c00011ce:	89 d8                	mov    eax,ebx
c00011d0:	c1 e0 06             	shl    eax,0x6
c00011d3:	8d 14 85 2c a0 02 c0 	lea    edx,[eax*4-0x3ffd5fd4]
c00011da:	b8 01 00 00 00       	mov    eax,0x1
c00011df:	85 f8                	test   eax,edi
c00011e1:	75 07                	jne    c00011ea <dlmalloc+0x2c2>
c00011e3:	83 c2 08             	add    edx,0x8
c00011e6:	01 c0                	add    eax,eax
c00011e8:	eb f5                	jmp    c00011df <dlmalloc+0x2b7>
c00011ea:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011ed:	39 ca                	cmp    edx,ecx
c00011ef:	75 14                	jne    c0001205 <dlmalloc+0x2dd>
c00011f1:	89 c1                	mov    ecx,eax
c00011f3:	83 c2 08             	add    edx,0x8
c00011f6:	f7 d1                	not    ecx
c00011f8:	01 c0                	add    eax,eax
c00011fa:	21 cf                	and    edi,ecx
c00011fc:	89 3c 9d 34 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5ccc],edi
c0001203:	eb ac                	jmp    c00011b1 <dlmalloc+0x289>
c0001205:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001208:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000120b:	83 e0 fc             	and    eax,0xfffffffc
c000120e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001211:	89 c3                	mov    ebx,eax
c0001213:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001216:	29 f3                	sub    ebx,esi
c0001218:	8d 14 01             	lea    edx,[ecx+eax*1]
c000121b:	83 fb 0f             	cmp    ebx,0xf
c000121e:	8d 41 08             	lea    eax,[ecx+0x8]
c0001221:	77 09                	ja     c000122c <dlmalloc+0x304>
c0001223:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001227:	e9 82 00 00 00       	jmp    c00012ae <dlmalloc+0x386>
c000122c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000122f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001235:	89 3d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edi
c000123b:	89 3d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,edi
c0001241:	c7 47 08 34 a0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a034
c0001248:	c7 47 0c 34 a0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a034
c000124f:	77 06                	ja     c0001257 <dlmalloc+0x32f>
c0001251:	89 3d 30 a0 02 c0    	mov    DWORD PTR ds:0xc002a030,edi
c0001257:	83 ce 01             	or     esi,0x1
c000125a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000125d:	89 d9                	mov    ecx,ebx
c000125f:	83 c9 01             	or     ecx,0x1
c0001262:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001265:	89 1a                	mov    DWORD PTR [edx],ebx
c0001267:	eb 45                	jmp    c00012ae <dlmalloc+0x386>
c0001269:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c000126e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001271:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001274:	83 e2 fc             	and    edx,0xfffffffc
c0001277:	39 d1                	cmp    ecx,edx
c0001279:	77 1e                	ja     c0001299 <dlmalloc+0x371>
c000127b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000127e:	89 f3                	mov    ebx,esi
c0001280:	89 0d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ecx
c0001286:	83 cb 01             	or     ebx,0x1
c0001289:	29 f2                	sub    edx,esi
c000128b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000128e:	83 ca 01             	or     edx,0x1
c0001291:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001294:	e9 2d fd ff ff       	jmp    c0000fc6 <dlmalloc+0x9e>
c0001299:	83 c4 1c             	add    esp,0x1c
c000129c:	89 f0                	mov    eax,esi
c000129e:	5b                   	pop    ebx
c000129f:	ba 00 a0 02 c0       	mov    edx,0xc002a000
c00012a4:	5e                   	pop    esi
c00012a5:	5f                   	pop    edi
c00012a6:	5d                   	pop    ebp
c00012a7:	e9 16 fa ff ff       	jmp    c0000cc2 <sYSMALLOc>
c00012ac:	31 c0                	xor    eax,eax
c00012ae:	83 c4 1c             	add    esp,0x1c
c00012b1:	5b                   	pop    ebx
c00012b2:	5e                   	pop    esi
c00012b3:	5f                   	pop    edi
c00012b4:	5d                   	pop    ebp
c00012b5:	c3                   	ret    

c00012b6 <iALLOc>:
c00012b6:	55                   	push   ebp
c00012b7:	89 c5                	mov    ebp,eax
c00012b9:	57                   	push   edi
c00012ba:	56                   	push   esi
c00012bb:	53                   	push   ebx
c00012bc:	83 ec 2c             	sub    esp,0x2c
c00012bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012c3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012cb:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c00012d2:	75 12                	jne    c00012e6 <iALLOc+0x30>
c00012d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012d8:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00012dd:	e8 04 f8 ff ff       	call   c0000ae6 <malloc_consolidate>
c00012e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012eb:	74 12                	je     c00012ff <iALLOc+0x49>
c00012ed:	85 ed                	test   ebp,ebp
c00012ef:	0f 84 64 01 00 00    	je     c0001459 <iALLOc+0x1a3>
c00012f5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012fd:	eb 33                	jmp    c0001332 <iALLOc+0x7c>
c00012ff:	85 ed                	test   ebp,ebp
c0001301:	75 14                	jne    c0001317 <iALLOc+0x61>
c0001303:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000130b:	83 c4 2c             	add    esp,0x2c
c000130e:	5b                   	pop    ebx
c000130f:	5e                   	pop    esi
c0001310:	5f                   	pop    edi
c0001311:	5d                   	pop    ebp
c0001312:	e9 11 fc ff ff       	jmp    c0000f28 <dlmalloc>
c0001317:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000131e:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001326:	83 f8 0f             	cmp    eax,0xf
c0001329:	76 07                	jbe    c0001332 <iALLOc+0x7c>
c000132b:	83 e0 f8             	and    eax,0xfffffff8
c000132e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001332:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001337:	75 09                	jne    c0001342 <iALLOc+0x8c>
c0001339:	89 d0                	mov    eax,edx
c000133b:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000133e:	31 f6                	xor    esi,esi
c0001340:	eb 3b                	jmp    c000137d <iALLOc+0xc7>
c0001342:	8b 02                	mov    eax,DWORD PTR [edx]
c0001344:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000134c:	83 c0 0b             	add    eax,0xb
c000134f:	83 f8 0f             	cmp    eax,0xf
c0001352:	76 07                	jbe    c000135b <iALLOc+0xa5>
c0001354:	83 e0 f8             	and    eax,0xfffffff8
c0001357:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000135b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000135f:	0f af f5             	imul   esi,ebp
c0001362:	eb 25                	jmp    c0001389 <iALLOc+0xd3>
c0001364:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001366:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001369:	bb 10 00 00 00       	mov    ebx,0x10
c000136e:	83 f9 0f             	cmp    ecx,0xf
c0001371:	76 05                	jbe    c0001378 <iALLOc+0xc2>
c0001373:	83 e1 f8             	and    ecx,0xfffffff8
c0001376:	89 cb                	mov    ebx,ecx
c0001378:	01 de                	add    esi,ebx
c000137a:	83 c0 04             	add    eax,0x4
c000137d:	39 c7                	cmp    edi,eax
c000137f:	75 e3                	jne    c0001364 <iALLOc+0xae>
c0001381:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001389:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000138d:	8b 1d 54 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a354
c0001393:	83 ec 0c             	sub    esp,0xc
c0001396:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c00013a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00013a4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00013a8:	50                   	push   eax
c00013a9:	e8 7a fb ff ff       	call   c0000f28 <dlmalloc>
c00013ae:	83 c4 10             	add    esp,0x10
c00013b1:	89 1d 54 a3 02 c0    	mov    DWORD PTR ds:0xc002a354,ebx
c00013b7:	85 c0                	test   eax,eax
c00013b9:	0f 84 92 00 00 00    	je     c0001451 <iALLOc+0x19b>
c00013bf:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013c2:	8d 78 f8             	lea    edi,[eax-0x8]
c00013c5:	83 e3 fc             	and    ebx,0xfffffffc
c00013c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013cc:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013d1:	74 1e                	je     c00013f1 <iALLOc+0x13b>
c00013d3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013d7:	89 d9                	mov    ecx,ebx
c00013d9:	52                   	push   edx
c00013da:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013de:	83 e9 04             	sub    ecx,0x4
c00013e1:	51                   	push   ecx
c00013e2:	6a 00                	push   0x0
c00013e4:	50                   	push   eax
c00013e5:	e8 02 f3 ff ff       	call   c00006ec <memset>
c00013ea:	83 c4 10             	add    esp,0x10
c00013ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	75 14                	jne    c000140c <iALLOc+0x156>
c00013f8:	8d 04 37             	lea    eax,[edi+esi*1]
c00013fb:	29 f3                	sub    ebx,esi
c00013fd:	8d 48 08             	lea    ecx,[eax+0x8]
c0001400:	83 cb 01             	or     ebx,0x1
c0001403:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001407:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000140a:	89 f3                	mov    ebx,esi
c000140c:	31 c0                	xor    eax,eax
c000140e:	4d                   	dec    ebp
c000140f:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001412:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001416:	39 c5                	cmp    ebp,eax
c0001418:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000141b:	74 2c                	je     c0001449 <iALLOc+0x193>
c000141d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001421:	85 c9                	test   ecx,ecx
c0001423:	75 15                	jne    c000143a <iALLOc+0x184>
c0001425:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001428:	8d 71 0b             	lea    esi,[ecx+0xb]
c000142b:	b9 10 00 00 00       	mov    ecx,0x10
c0001430:	83 fe 0f             	cmp    esi,0xf
c0001433:	76 05                	jbe    c000143a <iALLOc+0x184>
c0001435:	83 e6 f8             	and    esi,0xfffffff8
c0001438:	89 f1                	mov    ecx,esi
c000143a:	89 ce                	mov    esi,ecx
c000143c:	29 cb                	sub    ebx,ecx
c000143e:	83 ce 01             	or     esi,0x1
c0001441:	40                   	inc    eax
c0001442:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001445:	01 cf                	add    edi,ecx
c0001447:	eb c6                	jmp    c000140f <iALLOc+0x159>
c0001449:	83 cb 01             	or     ebx,0x1
c000144c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000144f:	eb 08                	jmp    c0001459 <iALLOc+0x1a3>
c0001451:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001459:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000145d:	83 c4 2c             	add    esp,0x2c
c0001460:	5b                   	pop    ebx
c0001461:	5e                   	pop    esi
c0001462:	5f                   	pop    edi
c0001463:	5d                   	pop    ebp
c0001464:	c3                   	ret    

c0001465 <dlrealloc>:
c0001465:	55                   	push   ebp
c0001466:	57                   	push   edi
c0001467:	56                   	push   esi
c0001468:	53                   	push   ebx
c0001469:	83 ec 1c             	sub    esp,0x1c
c000146c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001470:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001474:	85 db                	test   ebx,ebx
c0001476:	75 10                	jne    c0001488 <dlrealloc+0x23>
c0001478:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	5b                   	pop    ebx
c0001480:	5e                   	pop    esi
c0001481:	5f                   	pop    edi
c0001482:	5d                   	pop    ebp
c0001483:	e9 a0 fa ff ff       	jmp    c0000f28 <dlmalloc>
c0001488:	83 f8 df             	cmp    eax,0xffffffdf
c000148b:	76 07                	jbe    c0001494 <dlrealloc+0x2f>
c000148d:	31 db                	xor    ebx,ebx
c000148f:	e9 7c 01 00 00       	jmp    c0001610 <dlrealloc+0x1ab>
c0001494:	83 c0 0b             	add    eax,0xb
c0001497:	bf 10 00 00 00       	mov    edi,0x10
c000149c:	83 f8 0f             	cmp    eax,0xf
c000149f:	76 05                	jbe    c00014a6 <dlrealloc+0x41>
c00014a1:	83 e0 f8             	and    eax,0xfffffff8
c00014a4:	89 c7                	mov    edi,eax
c00014a6:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00014a9:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00014ac:	89 c6                	mov    esi,eax
c00014ae:	83 e6 fc             	and    esi,0xfffffffc
c00014b1:	a8 02                	test   al,0x2
c00014b3:	75 d8                	jne    c000148d <dlrealloc+0x28>
c00014b5:	39 f7                	cmp    edi,esi
c00014b7:	0f 86 15 01 00 00    	jbe    c00015d2 <dlrealloc+0x16d>
c00014bd:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014c1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014c4:	39 15 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,edx
c00014ca:	75 33                	jne    c00014ff <dlrealloc+0x9a>
c00014cc:	83 e1 fc             	and    ecx,0xfffffffc
c00014cf:	01 f1                	add    ecx,esi
c00014d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d5:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014d8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014dc:	77 49                	ja     c0001527 <dlrealloc+0xc2>
c00014de:	01 fd                	add    ebp,edi
c00014e0:	83 e0 01             	and    eax,0x1
c00014e3:	09 f8                	or     eax,edi
c00014e5:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014e8:	89 2d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ebp
c00014ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014f2:	29 f8                	sub    eax,edi
c00014f4:	83 c8 01             	or     eax,0x1
c00014f7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014fa:	e9 11 01 00 00       	jmp    c0001610 <dlrealloc+0x1ab>
c00014ff:	89 c8                	mov    eax,ecx
c0001501:	83 e0 fe             	and    eax,0xfffffffe
c0001504:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001509:	75 1c                	jne    c0001527 <dlrealloc+0xc2>
c000150b:	83 e1 fc             	and    ecx,0xfffffffc
c000150e:	01 f1                	add    ecx,esi
c0001510:	39 cf                	cmp    edi,ecx
c0001512:	77 13                	ja     c0001527 <dlrealloc+0xc2>
c0001514:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001517:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000151a:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000151d:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001520:	89 ce                	mov    esi,ecx
c0001522:	e9 ab 00 00 00       	jmp    c00015d2 <dlrealloc+0x16d>
c0001527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000152b:	8d 47 f9             	lea    eax,[edi-0x7]
c000152e:	83 ec 0c             	sub    esp,0xc
c0001531:	50                   	push   eax
c0001532:	e8 f1 f9 ff ff       	call   c0000f28 <dlmalloc>
c0001537:	83 c4 10             	add    esp,0x10
c000153a:	89 c1                	mov    ecx,eax
c000153c:	85 c0                	test   eax,eax
c000153e:	0f 84 49 ff ff ff    	je     c000148d <dlrealloc+0x28>
c0001544:	8d 40 f8             	lea    eax,[eax-0x8]
c0001547:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000154b:	39 c2                	cmp    edx,eax
c000154d:	75 0a                	jne    c0001559 <dlrealloc+0xf4>
c000154f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001552:	83 e0 fc             	and    eax,0xfffffffc
c0001555:	01 c6                	add    esi,eax
c0001557:	eb 79                	jmp    c00015d2 <dlrealloc+0x16d>
c0001559:	83 ee 04             	sub    esi,0x4
c000155c:	83 fe 27             	cmp    esi,0x27
c000155f:	76 16                	jbe    c0001577 <dlrealloc+0x112>
c0001561:	50                   	push   eax
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	51                   	push   ecx
c0001565:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001569:	e8 48 f1 ff ff       	call   c00006b6 <memcpy>
c000156e:	83 c4 10             	add    esp,0x10
c0001571:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001575:	eb 43                	jmp    c00015ba <dlrealloc+0x155>
c0001577:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001579:	83 fe 13             	cmp    esi,0x13
c000157c:	89 01                	mov    DWORD PTR [ecx],eax
c000157e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001581:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001584:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001587:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000158a:	76 2e                	jbe    c00015ba <dlrealloc+0x155>
c000158c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000158f:	83 fe 1b             	cmp    esi,0x1b
c0001592:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001598:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000159b:	76 1d                	jbe    c00015ba <dlrealloc+0x155>
c000159d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00015a0:	83 fe 23             	cmp    esi,0x23
c00015a3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00015a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00015a9:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00015ac:	76 0c                	jbe    c00015ba <dlrealloc+0x155>
c00015ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00015b1:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00015b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00015b7:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00015ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015be:	83 ec 0c             	sub    esp,0xc
c00015c1:	53                   	push   ebx
c00015c2:	e8 06 f6 ff ff       	call   c0000bcd <dlfree>
c00015c7:	83 c4 10             	add    esp,0x10
c00015ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015ce:	89 cb                	mov    ebx,ecx
c00015d0:	eb 3e                	jmp    c0001610 <dlrealloc+0x1ab>
c00015d2:	89 f2                	mov    edx,esi
c00015d4:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015d7:	29 fa                	sub    edx,edi
c00015d9:	83 e1 01             	and    ecx,0x1
c00015dc:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015e0:	83 fa 0f             	cmp    edx,0xf
c00015e3:	77 0b                	ja     c00015f0 <dlrealloc+0x18b>
c00015e5:	09 ce                	or     esi,ecx
c00015e7:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015ea:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ee:	eb 20                	jmp    c0001610 <dlrealloc+0x1ab>
c00015f0:	01 fd                	add    ebp,edi
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	09 cf                	or     edi,ecx
c00015f7:	83 ca 01             	or     edx,0x1
c00015fa:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015fd:	83 c5 08             	add    ebp,0x8
c0001600:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001603:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001607:	55                   	push   ebp
c0001608:	e8 c0 f5 ff ff       	call   c0000bcd <dlfree>
c000160d:	83 c4 10             	add    esp,0x10
c0001610:	83 c4 1c             	add    esp,0x1c
c0001613:	89 d8                	mov    eax,ebx
c0001615:	5b                   	pop    ebx
c0001616:	5e                   	pop    esi
c0001617:	5f                   	pop    edi
c0001618:	5d                   	pop    ebp
c0001619:	c3                   	ret    

c000161a <dlmemalign>:
c000161a:	55                   	push   ebp
c000161b:	57                   	push   edi
c000161c:	56                   	push   esi
c000161d:	53                   	push   ebx
c000161e:	83 ec 0c             	sub    esp,0xc
c0001621:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001625:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001629:	83 fa 08             	cmp    edx,0x8
c000162c:	77 10                	ja     c000163e <dlmemalign+0x24>
c000162e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001632:	83 c4 0c             	add    esp,0xc
c0001635:	5b                   	pop    ebx
c0001636:	5e                   	pop    esi
c0001637:	5f                   	pop    edi
c0001638:	5d                   	pop    ebp
c0001639:	e9 ea f8 ff ff       	jmp    c0000f28 <dlmalloc>
c000163e:	bf 10 00 00 00       	mov    edi,0x10
c0001643:	83 fa 0f             	cmp    edx,0xf
c0001646:	76 13                	jbe    c000165b <dlmemalign+0x41>
c0001648:	8d 4a ff             	lea    ecx,[edx-0x1]
c000164b:	85 d1                	test   ecx,edx
c000164d:	75 04                	jne    c0001653 <dlmemalign+0x39>
c000164f:	89 d7                	mov    edi,edx
c0001651:	eb 08                	jmp    c000165b <dlmemalign+0x41>
c0001653:	39 d7                	cmp    edi,edx
c0001655:	73 04                	jae    c000165b <dlmemalign+0x41>
c0001657:	01 ff                	add    edi,edi
c0001659:	eb f8                	jmp    c0001653 <dlmemalign+0x39>
c000165b:	83 f8 df             	cmp    eax,0xffffffdf
c000165e:	76 07                	jbe    c0001667 <dlmemalign+0x4d>
c0001660:	31 c0                	xor    eax,eax
c0001662:	e9 ce 00 00 00       	jmp    c0001735 <dlmemalign+0x11b>
c0001667:	83 c0 0b             	add    eax,0xb
c000166a:	bd 10 00 00 00       	mov    ebp,0x10
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 05                	jbe    c0001679 <dlmemalign+0x5f>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 c5                	mov    ebp,eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001680:	50                   	push   eax
c0001681:	e8 a2 f8 ff ff       	call   c0000f28 <dlmalloc>
c0001686:	83 c4 10             	add    esp,0x10
c0001689:	89 c1                	mov    ecx,eax
c000168b:	85 c0                	test   eax,eax
c000168d:	74 d1                	je     c0001660 <dlmemalign+0x46>
c000168f:	31 d2                	xor    edx,edx
c0001691:	8d 70 f8             	lea    esi,[eax-0x8]
c0001694:	f7 f7                	div    edi
c0001696:	85 d2                	test   edx,edx
c0001698:	74 62                	je     c00016fc <dlmemalign+0xe2>
c000169a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000169e:	89 f8                	mov    eax,edi
c00016a0:	f7 d8                	neg    eax
c00016a2:	21 c3                	and    ebx,eax
c00016a4:	83 eb 08             	sub    ebx,0x8
c00016a7:	89 d8                	mov    eax,ebx
c00016a9:	29 f0                	sub    eax,esi
c00016ab:	83 f8 0f             	cmp    eax,0xf
c00016ae:	77 02                	ja     c00016b2 <dlmemalign+0x98>
c00016b0:	01 fb                	add    ebx,edi
c00016b2:	89 d8                	mov    eax,ebx
c00016b4:	29 f0                	sub    eax,esi
c00016b6:	89 c6                	mov    esi,eax
c00016b8:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016bb:	89 c2                	mov    edx,eax
c00016bd:	83 e2 fc             	and    edx,0xfffffffc
c00016c0:	29 f2                	sub    edx,esi
c00016c2:	a8 02                	test   al,0x2
c00016c4:	74 10                	je     c00016d6 <dlmemalign+0xbc>
c00016c6:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016c9:	83 ca 02             	or     edx,0x2
c00016cc:	8d 43 08             	lea    eax,[ebx+0x8]
c00016cf:	89 33                	mov    DWORD PTR [ebx],esi
c00016d1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016d4:	eb 5f                	jmp    c0001735 <dlmemalign+0x11b>
c00016d6:	83 ec 0c             	sub    esp,0xc
c00016d9:	89 d0                	mov    eax,edx
c00016db:	83 c8 01             	or     eax,0x1
c00016de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016e1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016e6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016e9:	83 e0 01             	and    eax,0x1
c00016ec:	09 f0                	or     eax,esi
c00016ee:	89 de                	mov    esi,ebx
c00016f0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016f3:	51                   	push   ecx
c00016f4:	e8 d4 f4 ff ff       	call   c0000bcd <dlfree>
c00016f9:	83 c4 10             	add    esp,0x10
c00016fc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016ff:	a8 02                	test   al,0x2
c0001701:	75 2f                	jne    c0001732 <dlmemalign+0x118>
c0001703:	83 e0 fc             	and    eax,0xfffffffc
c0001706:	8d 55 10             	lea    edx,[ebp+0x10]
c0001709:	39 c2                	cmp    edx,eax
c000170b:	73 25                	jae    c0001732 <dlmemalign+0x118>
c000170d:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001710:	83 ec 0c             	sub    esp,0xc
c0001713:	29 e8                	sub    eax,ebp
c0001715:	83 c2 08             	add    edx,0x8
c0001718:	83 c8 01             	or     eax,0x1
c000171b:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000171e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001721:	83 e0 01             	and    eax,0x1
c0001724:	09 c5                	or     ebp,eax
c0001726:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001729:	52                   	push   edx
c000172a:	e8 9e f4 ff ff       	call   c0000bcd <dlfree>
c000172f:	83 c4 10             	add    esp,0x10
c0001732:	8d 46 08             	lea    eax,[esi+0x8]
c0001735:	83 c4 0c             	add    esp,0xc
c0001738:	5b                   	pop    ebx
c0001739:	5e                   	pop    esi
c000173a:	5f                   	pop    edi
c000173b:	5d                   	pop    ebp
c000173c:	c3                   	ret    

c000173d <dlcalloc>:
c000173d:	53                   	push   ebx
c000173e:	83 ec 14             	sub    esp,0x14
c0001741:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001745:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000174a:	50                   	push   eax
c000174b:	e8 d8 f7 ff ff       	call   c0000f28 <dlmalloc>
c0001750:	83 c4 10             	add    esp,0x10
c0001753:	89 c3                	mov    ebx,eax
c0001755:	85 c0                	test   eax,eax
c0001757:	74 77                	je     c00017d0 <dlcalloc+0x93>
c0001759:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000175c:	89 d0                	mov    eax,edx
c000175e:	83 e0 fc             	and    eax,0xfffffffc
c0001761:	80 e2 02             	and    dl,0x2
c0001764:	75 5a                	jne    c00017c0 <dlcalloc+0x83>
c0001766:	83 e8 04             	sub    eax,0x4
c0001769:	83 f8 27             	cmp    eax,0x27
c000176c:	76 03                	jbe    c0001771 <dlcalloc+0x34>
c000176e:	51                   	push   ecx
c000176f:	eb 53                	jmp    c00017c4 <dlcalloc+0x87>
c0001771:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001777:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000177e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001785:	83 f8 13             	cmp    eax,0x13
c0001788:	76 46                	jbe    c00017d0 <dlcalloc+0x93>
c000178a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001791:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001798:	83 f8 1b             	cmp    eax,0x1b
c000179b:	76 33                	jbe    c00017d0 <dlcalloc+0x93>
c000179d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00017a4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00017ab:	83 f8 23             	cmp    eax,0x23
c00017ae:	76 20                	jbe    c00017d0 <dlcalloc+0x93>
c00017b0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00017b7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00017be:	eb 10                	jmp    c00017d0 <dlcalloc+0x93>
c00017c0:	83 e8 08             	sub    eax,0x8
c00017c3:	52                   	push   edx
c00017c4:	50                   	push   eax
c00017c5:	6a 00                	push   0x0
c00017c7:	53                   	push   ebx
c00017c8:	e8 1f ef ff ff       	call   c00006ec <memset>
c00017cd:	83 c4 10             	add    esp,0x10
c00017d0:	89 d8                	mov    eax,ebx
c00017d2:	83 c4 08             	add    esp,0x8
c00017d5:	5b                   	pop    ebx
c00017d6:	c3                   	ret    

c00017d7 <dlcfree>:
c00017d7:	e9 f1 f3 ff ff       	jmp    c0000bcd <dlfree>

c00017dc <dlindependent_calloc>:
c00017dc:	83 ec 28             	sub    esp,0x28
c00017df:	b9 03 00 00 00       	mov    ecx,0x3
c00017e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017f0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017f8:	e8 b9 fa ff ff       	call   c00012b6 <iALLOc>
c00017fd:	83 c4 2c             	add    esp,0x2c
c0001800:	c3                   	ret    

c0001801 <dlindependent_comalloc>:
c0001801:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001809:	31 c9                	xor    ecx,ecx
c000180b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000180f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001813:	e9 9e fa ff ff       	jmp    c00012b6 <iALLOc>

c0001818 <dlvalloc>:
c0001818:	83 ec 0c             	sub    esp,0xc
c000181b:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c0001822:	75 0a                	jne    c000182e <dlvalloc+0x16>
c0001824:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001829:	e8 b8 f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c000182e:	50                   	push   eax
c000182f:	50                   	push   eax
c0001830:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001834:	ff 35 5c a3 02 c0    	push   DWORD PTR ds:0xc002a35c
c000183a:	e8 db fd ff ff       	call   c000161a <dlmemalign>
c000183f:	83 c4 1c             	add    esp,0x1c
c0001842:	c3                   	ret    

c0001843 <dlpvalloc>:
c0001843:	83 ec 0c             	sub    esp,0xc
c0001846:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c000184d:	75 0a                	jne    c0001859 <dlpvalloc+0x16>
c000184f:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001854:	e8 8d f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c0001859:	a1 5c a3 02 c0       	mov    eax,ds:0xc002a35c
c000185e:	89 c1                	mov    ecx,eax
c0001860:	52                   	push   edx
c0001861:	f7 d9                	neg    ecx
c0001863:	52                   	push   edx
c0001864:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001868:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000186c:	21 ca                	and    edx,ecx
c000186e:	52                   	push   edx
c000186f:	50                   	push   eax
c0001870:	e8 a5 fd ff ff       	call   c000161a <dlmemalign>
c0001875:	83 c4 1c             	add    esp,0x1c
c0001878:	c3                   	ret    

c0001879 <dlmalloc_trim>:
c0001879:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000187e:	e8 63 f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c0001883:	31 c0                	xor    eax,eax
c0001885:	c3                   	ret    

c0001886 <dlmalloc_usable_size>:
c0001886:	53                   	push   ebx
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000188d:	85 c9                	test   ecx,ecx
c000188f:	74 24                	je     c00018b5 <dlmalloc_usable_size+0x2f>
c0001891:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001894:	f6 c2 02             	test   dl,0x2
c0001897:	74 08                	je     c00018a1 <dlmalloc_usable_size+0x1b>
c0001899:	83 e2 fc             	and    edx,0xfffffffc
c000189c:	8d 42 f8             	lea    eax,[edx-0x8]
c000189f:	eb 14                	jmp    c00018b5 <dlmalloc_usable_size+0x2f>
c00018a1:	89 d3                	mov    ebx,edx
c00018a3:	31 c0                	xor    eax,eax
c00018a5:	83 e3 fe             	and    ebx,0xfffffffe
c00018a8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00018ad:	74 06                	je     c00018b5 <dlmalloc_usable_size+0x2f>
c00018af:	83 e2 fc             	and    edx,0xfffffffc
c00018b2:	8d 42 fc             	lea    eax,[edx-0x4]
c00018b5:	5b                   	pop    ebx
c00018b6:	c3                   	ret    

c00018b7 <dlmallinfo>:
c00018b7:	55                   	push   ebp
c00018b8:	57                   	push   edi
c00018b9:	56                   	push   esi
c00018ba:	53                   	push   ebx
c00018bb:	83 ec 08             	sub    esp,0x8
c00018be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018c2:	83 3d 2c a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a02c,0x0
c00018c9:	75 0a                	jne    c00018d5 <dlmallinfo+0x1e>
c00018cb:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00018d0:	e8 11 f2 ff ff       	call   c0000ae6 <malloc_consolidate>
c00018d5:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c00018da:	31 ed                	xor    ebp,ebp
c00018dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018df:	31 c9                	xor    ecx,ecx
c00018e1:	83 e0 fc             	and    eax,0xfffffffc
c00018e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018e8:	31 c0                	xor    eax,eax
c00018ea:	8b 14 85 04 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5ffc]
c00018f1:	85 d2                	test   edx,edx
c00018f3:	74 0e                	je     c0001903 <dlmallinfo+0x4c>
c00018f5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018f8:	45                   	inc    ebp
c00018f9:	83 e6 fc             	and    esi,0xfffffffc
c00018fc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018ff:	01 f1                	add    ecx,esi
c0001901:	eb ee                	jmp    c00018f1 <dlmallinfo+0x3a>
c0001903:	40                   	inc    eax
c0001904:	83 f8 0a             	cmp    eax,0xa
c0001907:	75 e1                	jne    c00018ea <dlmallinfo+0x33>
c0001909:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001914:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001917:	b8 34 a0 02 c0       	mov    eax,0xc002a034
c000191c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000191f:	39 f0                	cmp    eax,esi
c0001921:	74 10                	je     c0001933 <dlmallinfo+0x7c>
c0001923:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001926:	ff 04 24             	inc    DWORD PTR [esp]
c0001929:	83 e7 fc             	and    edi,0xfffffffc
c000192c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000192f:	01 fa                	add    edx,edi
c0001931:	eb ec                	jmp    c000191f <dlmallinfo+0x68>
c0001933:	83 c0 08             	add    eax,0x8
c0001936:	3d 2c a3 02 c0       	cmp    eax,0xc002a32c
c000193b:	75 df                	jne    c000191c <dlmallinfo+0x65>
c000193d:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001940:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001943:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001946:	a1 68 a3 02 c0       	mov    eax,ds:0xc002a368
c000194b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000194e:	89 03                	mov    DWORD PTR [ebx],eax
c0001950:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001953:	8b 35 50 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a350
c0001959:	29 d0                	sub    eax,edx
c000195b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000195e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001961:	8b 35 64 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a364
c0001967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000196b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000196e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001971:	8b 35 74 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a374
c0001977:	89 d8                	mov    eax,ebx
c0001979:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000197c:	83 c4 08             	add    esp,0x8
c000197f:	5b                   	pop    ebx
c0001980:	5e                   	pop    esi
c0001981:	5f                   	pop    edi
c0001982:	5d                   	pop    ebp
c0001983:	c2 04 00             	ret    0x4

c0001986 <dlmalloc_stats>:
c0001986:	83 ec 30             	sub    esp,0x30
c0001989:	8d 44 24 08          	lea    eax,[esp+0x8]
c000198d:	50                   	push   eax
c000198e:	e8 24 ff ff ff       	call   c00018b7 <dlmallinfo>
c0001993:	83 c4 30             	add    esp,0x30
c0001996:	c3                   	ret    

c0001997 <dlmallopt>:
c0001997:	56                   	push   esi
c0001998:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000199d:	53                   	push   ebx
c000199e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00019a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00019a6:	e8 3b f1 ff ff       	call   c0000ae6 <malloc_consolidate>
c00019ab:	8d 46 04             	lea    eax,[esi+0x4]
c00019ae:	83 f8 05             	cmp    eax,0x5
c00019b1:	77 67                	ja     c0001a1a <dlmallopt+0x83>
c00019b3:	ff 24 85 e4 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda31c]
c00019ba:	83 fb 50             	cmp    ebx,0x50
c00019bd:	77 5b                	ja     c0001a1a <dlmallopt+0x83>
c00019bf:	ba 08 00 00 00       	mov    edx,0x8
c00019c4:	85 db                	test   ebx,ebx
c00019c6:	74 12                	je     c00019da <dlmallopt+0x43>
c00019c8:	83 c3 0b             	add    ebx,0xb
c00019cb:	ba 10 00 00 00       	mov    edx,0x10
c00019d0:	83 fb 0f             	cmp    ebx,0xf
c00019d3:	76 05                	jbe    c00019da <dlmallopt+0x43>
c00019d5:	89 da                	mov    edx,ebx
c00019d7:	83 e2 f8             	and    edx,0xfffffff8
c00019da:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c00019df:	83 e0 03             	and    eax,0x3
c00019e2:	09 d0                	or     eax,edx
c00019e4:	a3 00 a0 02 c0       	mov    ds:0xc002a000,eax
c00019e9:	eb 31                	jmp    c0001a1c <dlmallopt+0x85>
c00019eb:	89 1d 44 a3 02 c0    	mov    DWORD PTR ds:0xc002a344,ebx
c00019f1:	eb 06                	jmp    c00019f9 <dlmallopt+0x62>
c00019f3:	89 1d 48 a3 02 c0    	mov    DWORD PTR ds:0xc002a348,ebx
c00019f9:	be 01 00 00 00       	mov    esi,0x1
c00019fe:	eb 1c                	jmp    c0001a1c <dlmallopt+0x85>
c0001a00:	89 1d 4c a3 02 c0    	mov    DWORD PTR ds:0xc002a34c,ebx
c0001a06:	eb f1                	jmp    c00019f9 <dlmallopt+0x62>
c0001a08:	31 f6                	xor    esi,esi
c0001a0a:	85 db                	test   ebx,ebx
c0001a0c:	75 0e                	jne    c0001a1c <dlmallopt+0x85>
c0001a0e:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c0001a18:	eb df                	jmp    c00019f9 <dlmallopt+0x62>
c0001a1a:	31 f6                	xor    esi,esi
c0001a1c:	89 f0                	mov    eax,esi
c0001a1e:	5b                   	pop    ebx
c0001a1f:	5e                   	pop    esi
c0001a20:	c3                   	ret    

c0001a21 <disk_status>:
c0001a21:	31 c0                	xor    eax,eax
c0001a23:	c3                   	ret    

c0001a24 <disk_initialize>:
c0001a24:	31 c0                	xor    eax,eax
c0001a26:	c3                   	ret    

c0001a27 <disk_read>:
c0001a27:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a2c:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a38:	e9 6b cb 01 00       	jmp    c001e5a8 <fatWrapperReadDisk>

c0001a3d <disk_write>:
c0001a3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a42:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a4e:	e9 9c cb 01 00       	jmp    c001e5ef <fatWrapperWriteDisk>

c0001a53 <disk_ioctl>:
c0001a53:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a5c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a61:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a6d:	e9 c4 cb 01 00       	jmp    c001e636 <fatWrapperIoctl>

c0001a72 <ld_word>:
c0001a72:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a76:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a79:	c1 e2 08             	shl    edx,0x8
c0001a7c:	09 d0                	or     eax,edx
c0001a7e:	c3                   	ret    

c0001a7f <ld_dword>:
c0001a7f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a83:	89 d1                	mov    ecx,edx
c0001a85:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a89:	c1 e1 08             	shl    ecx,0x8
c0001a8c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a8f:	09 ca                	or     edx,ecx
c0001a91:	c1 e2 08             	shl    edx,0x8
c0001a94:	09 d0                	or     eax,edx
c0001a96:	c3                   	ret    

c0001a97 <ld_qword>:
c0001a97:	57                   	push   edi
c0001a98:	56                   	push   esi
c0001a99:	53                   	push   ebx
c0001a9a:	31 db                	xor    ebx,ebx
c0001a9c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a9f:	89 df                	mov    edi,ebx
c0001aa1:	89 ce                	mov    esi,ecx
c0001aa3:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001aa7:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aab:	c1 e6 08             	shl    esi,0x8
c0001aae:	09 f2                	or     edx,esi
c0001ab0:	89 d6                	mov    esi,edx
c0001ab2:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ab6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aba:	c1 e6 08             	shl    esi,0x8
c0001abd:	09 f2                	or     edx,esi
c0001abf:	89 d6                	mov    esi,edx
c0001ac1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ac5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ac9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001acc:	c1 e6 08             	shl    esi,0x8
c0001acf:	89 fb                	mov    ebx,edi
c0001ad1:	09 f2                	or     edx,esi
c0001ad3:	89 d1                	mov    ecx,edx
c0001ad5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ad9:	c1 e1 08             	shl    ecx,0x8
c0001adc:	89 da                	mov    edx,ebx
c0001ade:	09 c8                	or     eax,ecx
c0001ae0:	5b                   	pop    ebx
c0001ae1:	5e                   	pop    esi
c0001ae2:	5f                   	pop    edi
c0001ae3:	c3                   	ret    

c0001ae4 <st_word>:
c0001ae4:	66 89 10             	mov    WORD PTR [eax],dx
c0001ae7:	c3                   	ret    

c0001ae8 <st_dword>:
c0001ae8:	89 10                	mov    DWORD PTR [eax],edx
c0001aea:	c3                   	ret    

c0001aeb <st_qword>:
c0001aeb:	89 10                	mov    DWORD PTR [eax],edx
c0001aed:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001af0:	c3                   	ret    

c0001af1 <mem_cpy>:
c0001af1:	85 c9                	test   ecx,ecx
c0001af3:	74 10                	je     c0001b05 <mem_cpy+0x14>
c0001af5:	57                   	push   edi
c0001af6:	01 c1                	add    ecx,eax
c0001af8:	56                   	push   esi
c0001af9:	89 c7                	mov    edi,eax
c0001afb:	89 d6                	mov    esi,edx
c0001afd:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001afe:	39 f9                	cmp    ecx,edi
c0001b00:	75 fb                	jne    c0001afd <mem_cpy+0xc>
c0001b02:	5e                   	pop    esi
c0001b03:	5f                   	pop    edi
c0001b04:	c3                   	ret    
c0001b05:	c3                   	ret    

c0001b06 <mem_set>:
c0001b06:	01 c1                	add    ecx,eax
c0001b08:	40                   	inc    eax
c0001b09:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001b0c:	39 c8                	cmp    eax,ecx
c0001b0e:	75 f8                	jne    c0001b08 <mem_set+0x2>
c0001b10:	c3                   	ret    

c0001b11 <mem_cmp>:
c0001b11:	57                   	push   edi
c0001b12:	56                   	push   esi
c0001b13:	89 c6                	mov    esi,eax
c0001b15:	53                   	push   ebx
c0001b16:	46                   	inc    esi
c0001b17:	42                   	inc    edx
c0001b18:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001b1c:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b20:	29 fb                	sub    ebx,edi
c0001b22:	89 cf                	mov    edi,ecx
c0001b24:	29 f7                	sub    edi,esi
c0001b26:	01 c7                	add    edi,eax
c0001b28:	74 04                	je     c0001b2e <mem_cmp+0x1d>
c0001b2a:	85 db                	test   ebx,ebx
c0001b2c:	74 e8                	je     c0001b16 <mem_cmp+0x5>
c0001b2e:	89 d8                	mov    eax,ebx
c0001b30:	5b                   	pop    ebx
c0001b31:	5e                   	pop    esi
c0001b32:	5f                   	pop    edi
c0001b33:	c3                   	ret    

c0001b34 <chk_chr>:
c0001b34:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b37:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b3a:	74 07                	je     c0001b43 <chk_chr+0xf>
c0001b3c:	39 d1                	cmp    ecx,edx
c0001b3e:	74 03                	je     c0001b43 <chk_chr+0xf>
c0001b40:	40                   	inc    eax
c0001b41:	eb f1                	jmp    c0001b34 <chk_chr>
c0001b43:	89 c8                	mov    eax,ecx
c0001b45:	c3                   	ret    

c0001b46 <dbc_1st>:
c0001b46:	31 c0                	xor    eax,eax
c0001b48:	c3                   	ret    

c0001b49 <dbc_2nd>:
c0001b49:	31 c0                	xor    eax,eax
c0001b4b:	c3                   	ret    

c0001b4c <tchar2uni>:
c0001b4c:	57                   	push   edi
c0001b4d:	89 c7                	mov    edi,eax
c0001b4f:	56                   	push   esi
c0001b50:	53                   	push   ebx
c0001b51:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b53:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b55:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b58:	84 c9                	test   cl,cl
c0001b5a:	78 0a                	js     c0001b66 <tchar2uni+0x1a>
c0001b5c:	0f b6 d1             	movzx  edx,cl
c0001b5f:	89 f3                	mov    ebx,esi
c0001b61:	e9 9f 00 00 00       	jmp    c0001c05 <tchar2uni+0xb9>
c0001b66:	88 ca                	mov    dl,cl
c0001b68:	83 e2 e0             	and    edx,0xffffffe0
c0001b6b:	80 fa c0             	cmp    dl,0xc0
c0001b6e:	75 0c                	jne    c0001b7c <tchar2uni+0x30>
c0001b70:	89 ca                	mov    edx,ecx
c0001b72:	b9 01 00 00 00       	mov    ecx,0x1
c0001b77:	83 e2 1f             	and    edx,0x1f
c0001b7a:	eb 2e                	jmp    c0001baa <tchar2uni+0x5e>
c0001b7c:	88 ca                	mov    dl,cl
c0001b7e:	83 e2 f0             	and    edx,0xfffffff0
c0001b81:	80 fa e0             	cmp    dl,0xe0
c0001b84:	75 0c                	jne    c0001b92 <tchar2uni+0x46>
c0001b86:	89 ca                	mov    edx,ecx
c0001b88:	b9 02 00 00 00       	mov    ecx,0x2
c0001b8d:	83 e2 0f             	and    edx,0xf
c0001b90:	eb 18                	jmp    c0001baa <tchar2uni+0x5e>
c0001b92:	88 ca                	mov    dl,cl
c0001b94:	83 e2 f8             	and    edx,0xfffffff8
c0001b97:	88 d0                	mov    al,dl
c0001b99:	83 ca ff             	or     edx,0xffffffff
c0001b9c:	3c f0                	cmp    al,0xf0
c0001b9e:	75 6c                	jne    c0001c0c <tchar2uni+0xc0>
c0001ba0:	89 ca                	mov    edx,ecx
c0001ba2:	b9 03 00 00 00       	mov    ecx,0x3
c0001ba7:	83 e2 07             	and    edx,0x7
c0001baa:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001bae:	46                   	inc    esi
c0001baf:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001bb2:	88 c8                	mov    al,cl
c0001bb4:	83 e0 c0             	and    eax,0xffffffc0
c0001bb7:	3c 80                	cmp    al,0x80
c0001bb9:	75 4e                	jne    c0001c09 <tchar2uni+0xbd>
c0001bbb:	c1 e2 06             	shl    edx,0x6
c0001bbe:	83 e1 3f             	and    ecx,0x3f
c0001bc1:	09 ca                	or     edx,ecx
c0001bc3:	39 de                	cmp    esi,ebx
c0001bc5:	75 e7                	jne    c0001bae <tchar2uni+0x62>
c0001bc7:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bca:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bd0:	77 37                	ja     c0001c09 <tchar2uni+0xbd>
c0001bd2:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bd8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bde:	76 29                	jbe    c0001c09 <tchar2uni+0xbd>
c0001be0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001be6:	76 1d                	jbe    c0001c05 <tchar2uni+0xb9>
c0001be8:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bee:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bf4:	c1 e1 06             	shl    ecx,0x6
c0001bf7:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bfd:	09 ca                	or     edx,ecx
c0001bff:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001c05:	89 1f                	mov    DWORD PTR [edi],ebx
c0001c07:	eb 03                	jmp    c0001c0c <tchar2uni+0xc0>
c0001c09:	83 ca ff             	or     edx,0xffffffff
c0001c0c:	5b                   	pop    ebx
c0001c0d:	89 d0                	mov    eax,edx
c0001c0f:	5e                   	pop    esi
c0001c10:	5f                   	pop    edi
c0001c11:	c3                   	ret    

c0001c12 <put_utf>:
c0001c12:	53                   	push   ebx
c0001c13:	83 f8 7f             	cmp    eax,0x7f
c0001c16:	89 c3                	mov    ebx,eax
c0001c18:	b0 00                	mov    al,0x0
c0001c1a:	77 11                	ja     c0001c2d <put_utf+0x1b>
c0001c1c:	85 c9                	test   ecx,ecx
c0001c1e:	0f 84 e5 00 00 00    	je     c0001d09 <put_utf+0xf7>
c0001c24:	88 1a                	mov    BYTE PTR [edx],bl
c0001c26:	b0 01                	mov    al,0x1
c0001c28:	e9 dc 00 00 00       	jmp    c0001d09 <put_utf+0xf7>
c0001c2d:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c33:	77 23                	ja     c0001c58 <put_utf+0x46>
c0001c35:	83 f9 01             	cmp    ecx,0x1
c0001c38:	0f 86 cb 00 00 00    	jbe    c0001d09 <put_utf+0xf7>
c0001c3e:	89 d8                	mov    eax,ebx
c0001c40:	83 e3 3f             	and    ebx,0x3f
c0001c43:	c1 e8 06             	shr    eax,0x6
c0001c46:	83 cb 80             	or     ebx,0xffffff80
c0001c49:	83 c8 c0             	or     eax,0xffffffc0
c0001c4c:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c4f:	88 02                	mov    BYTE PTR [edx],al
c0001c51:	b0 02                	mov    al,0x2
c0001c53:	e9 b1 00 00 00       	jmp    c0001d09 <put_utf+0xf7>
c0001c58:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c5e:	77 40                	ja     c0001ca0 <put_utf+0x8e>
c0001c60:	83 f9 02             	cmp    ecx,0x2
c0001c63:	0f 86 a0 00 00 00    	jbe    c0001d09 <put_utf+0xf7>
c0001c69:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c6f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c75:	0f 86 8e 00 00 00    	jbe    c0001d09 <put_utf+0xf7>
c0001c7b:	89 d8                	mov    eax,ebx
c0001c7d:	c1 e8 0c             	shr    eax,0xc
c0001c80:	83 c8 e0             	or     eax,0xffffffe0
c0001c83:	88 02                	mov    BYTE PTR [edx],al
c0001c85:	89 d8                	mov    eax,ebx
c0001c87:	83 e3 3f             	and    ebx,0x3f
c0001c8a:	c1 e8 06             	shr    eax,0x6
c0001c8d:	83 cb 80             	or     ebx,0xffffff80
c0001c90:	83 e0 3f             	and    eax,0x3f
c0001c93:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c96:	83 c8 80             	or     eax,0xffffff80
c0001c99:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c9c:	b0 03                	mov    al,0x3
c0001c9e:	eb 69                	jmp    c0001d09 <put_utf+0xf7>
c0001ca0:	83 f9 03             	cmp    ecx,0x3
c0001ca3:	76 64                	jbe    c0001d09 <put_utf+0xf7>
c0001ca5:	89 d9                	mov    ecx,ebx
c0001ca7:	0f b7 c3             	movzx  eax,bx
c0001caa:	66 31 c9             	xor    cx,cx
c0001cad:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001cb3:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001cb9:	c1 e9 06             	shr    ecx,0x6
c0001cbc:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001cc2:	77 43                	ja     c0001d07 <put_utf+0xf5>
c0001cc4:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001cca:	77 3b                	ja     c0001d07 <put_utf+0xf5>
c0001ccc:	09 cb                	or     ebx,ecx
c0001cce:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cd4:	89 d8                	mov    eax,ebx
c0001cd6:	c1 e8 12             	shr    eax,0x12
c0001cd9:	83 c8 f0             	or     eax,0xfffffff0
c0001cdc:	88 02                	mov    BYTE PTR [edx],al
c0001cde:	89 d8                	mov    eax,ebx
c0001ce0:	c1 e8 0c             	shr    eax,0xc
c0001ce3:	83 e0 3f             	and    eax,0x3f
c0001ce6:	83 c8 80             	or     eax,0xffffff80
c0001ce9:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cec:	89 d8                	mov    eax,ebx
c0001cee:	83 e3 3f             	and    ebx,0x3f
c0001cf1:	c1 e8 06             	shr    eax,0x6
c0001cf4:	83 cb 80             	or     ebx,0xffffff80
c0001cf7:	83 e0 3f             	and    eax,0x3f
c0001cfa:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cfd:	83 c8 80             	or     eax,0xffffff80
c0001d00:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001d03:	b0 04                	mov    al,0x4
c0001d05:	eb 02                	jmp    c0001d09 <put_utf+0xf7>
c0001d07:	31 c0                	xor    eax,eax
c0001d09:	5b                   	pop    ebx
c0001d0a:	c3                   	ret    

c0001d0b <clst2sect>:
c0001d0b:	89 c1                	mov    ecx,eax
c0001d0d:	83 ea 02             	sub    edx,0x2
c0001d10:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001d13:	83 e8 02             	sub    eax,0x2
c0001d16:	39 d0                	cmp    eax,edx
c0001d18:	76 0d                	jbe    c0001d27 <clst2sect+0x1c>
c0001d1a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001d1e:	f7 e2                	mul    edx
c0001d20:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d23:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d26:	c3                   	ret    
c0001d27:	31 c0                	xor    eax,eax
c0001d29:	31 d2                	xor    edx,edx
c0001d2b:	c3                   	ret    

c0001d2c <clmt_clust>:
c0001d2c:	57                   	push   edi
c0001d2d:	89 cf                	mov    edi,ecx
c0001d2f:	56                   	push   esi
c0001d30:	89 d6                	mov    esi,edx
c0001d32:	53                   	push   ebx
c0001d33:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d37:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d3a:	89 f2                	mov    edx,esi
c0001d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d3e:	c1 ef 09             	shr    edi,0x9
c0001d41:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d45:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d48:	89 f9                	mov    ecx,edi
c0001d4a:	31 ff                	xor    edi,edi
c0001d4c:	57                   	push   edi
c0001d4d:	56                   	push   esi
c0001d4e:	51                   	push   ecx
c0001d4f:	52                   	push   edx
c0001d50:	e8 27 16 02 00       	call   c002337c <__udivdi3>
c0001d55:	83 c4 10             	add    esp,0x10
c0001d58:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d5a:	85 d2                	test   edx,edx
c0001d5c:	74 10                	je     c0001d6e <clmt_clust+0x42>
c0001d5e:	39 d0                	cmp    eax,edx
c0001d60:	72 07                	jb     c0001d69 <clmt_clust+0x3d>
c0001d62:	29 d0                	sub    eax,edx
c0001d64:	83 c3 08             	add    ebx,0x8
c0001d67:	eb ef                	jmp    c0001d58 <clmt_clust+0x2c>
c0001d69:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d6c:	89 c2                	mov    edx,eax
c0001d6e:	5b                   	pop    ebx
c0001d6f:	89 d0                	mov    eax,edx
c0001d71:	5e                   	pop    esi
c0001d72:	5f                   	pop    edi
c0001d73:	c3                   	ret    

c0001d74 <pick_lfn>:
c0001d74:	55                   	push   ebp
c0001d75:	57                   	push   edi
c0001d76:	56                   	push   esi
c0001d77:	89 d6                	mov    esi,edx
c0001d79:	53                   	push   ebx
c0001d7a:	89 c3                	mov    ebx,eax
c0001d7c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d7f:	e8 ee fc ff ff       	call   c0001a72 <ld_word>
c0001d84:	66 85 c0             	test   ax,ax
c0001d87:	74 04                	je     c0001d8d <pick_lfn+0x19>
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	eb 5c                	jmp    c0001de9 <pick_lfn+0x75>
c0001d8d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d90:	bd 01 00 00 00       	mov    ebp,0x1
c0001d95:	83 e1 bf             	and    ecx,0xffffffbf
c0001d98:	31 ff                	xor    edi,edi
c0001d9a:	49                   	dec    ecx
c0001d9b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d9e:	0f b6 87 00 5e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda200]
c0001da5:	01 f0                	add    eax,esi
c0001da7:	e8 c6 fc ff ff       	call   c0001a72 <ld_word>
c0001dac:	66 85 ed             	test   bp,bp
c0001daf:	74 11                	je     c0001dc2 <pick_lfn+0x4e>
c0001db1:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db7:	77 d0                	ja     c0001d89 <pick_lfn+0x15>
c0001db9:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001dbd:	89 c5                	mov    ebp,eax
c0001dbf:	41                   	inc    ecx
c0001dc0:	eb 04                	jmp    c0001dc6 <pick_lfn+0x52>
c0001dc2:	66 40                	inc    ax
c0001dc4:	75 c3                	jne    c0001d89 <pick_lfn+0x15>
c0001dc6:	47                   	inc    edi
c0001dc7:	83 ff 0d             	cmp    edi,0xd
c0001dca:	75 d2                	jne    c0001d9e <pick_lfn+0x2a>
c0001dcc:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001dcf:	74 13                	je     c0001de4 <pick_lfn+0x70>
c0001dd1:	66 85 ed             	test   bp,bp
c0001dd4:	74 0e                	je     c0001de4 <pick_lfn+0x70>
c0001dd6:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ddc:	77 ab                	ja     c0001d89 <pick_lfn+0x15>
c0001dde:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001de4:	b8 01 00 00 00       	mov    eax,0x1
c0001de9:	5b                   	pop    ebx
c0001dea:	5e                   	pop    esi
c0001deb:	5f                   	pop    edi
c0001dec:	5d                   	pop    ebp
c0001ded:	c3                   	ret    

c0001dee <put_lfn>:
c0001dee:	55                   	push   ebp
c0001def:	31 ed                	xor    ebp,ebp
c0001df1:	57                   	push   edi
c0001df2:	89 d7                	mov    edi,edx
c0001df4:	56                   	push   esi
c0001df5:	31 f6                	xor    esi,esi
c0001df7:	53                   	push   ebx
c0001df8:	83 ec 08             	sub    esp,0x8
c0001dfb:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dfe:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001e02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001e06:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001e0c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001e0f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	e8 cb fc ff ff       	call   c0001ae4 <st_word>
c0001e19:	0f b6 d9             	movzx  ebx,cl
c0001e1c:	4b                   	dec    ebx
c0001e1d:	6b db 0d             	imul   ebx,ebx,0xd
c0001e20:	66 83 fe ff          	cmp    si,0xffff
c0001e24:	74 08                	je     c0001e2e <put_lfn+0x40>
c0001e26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e29:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e2d:	43                   	inc    ebx
c0001e2e:	0f b6 85 00 5e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda200]
c0001e35:	0f b7 d6             	movzx  edx,si
c0001e38:	01 f8                	add    eax,edi
c0001e3a:	e8 a5 fc ff ff       	call   c0001ae4 <st_word>
c0001e3f:	66 85 f6             	test   si,si
c0001e42:	75 03                	jne    c0001e47 <put_lfn+0x59>
c0001e44:	83 ce ff             	or     esi,0xffffffff
c0001e47:	45                   	inc    ebp
c0001e48:	83 fd 0d             	cmp    ebp,0xd
c0001e4b:	75 d3                	jne    c0001e20 <put_lfn+0x32>
c0001e4d:	66 46                	inc    si
c0001e4f:	74 0a                	je     c0001e5b <put_lfn+0x6d>
c0001e51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e54:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e59:	75 09                	jne    c0001e64 <put_lfn+0x76>
c0001e5b:	88 c8                	mov    al,cl
c0001e5d:	83 c8 40             	or     eax,0x40
c0001e60:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e64:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e68:	88 07                	mov    BYTE PTR [edi],al
c0001e6a:	83 c4 08             	add    esp,0x8
c0001e6d:	5b                   	pop    ebx
c0001e6e:	5e                   	pop    esi
c0001e6f:	5f                   	pop    edi
c0001e70:	5d                   	pop    ebp
c0001e71:	c3                   	ret    

c0001e72 <gen_numname>:
c0001e72:	57                   	push   edi
c0001e73:	89 cf                	mov    edi,ecx
c0001e75:	56                   	push   esi
c0001e76:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e7b:	53                   	push   ebx
c0001e7c:	89 c6                	mov    esi,eax
c0001e7e:	83 ec 10             	sub    esp,0x10
c0001e81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e85:	e8 67 fc ff ff       	call   c0001af1 <mem_cpy>
c0001e8a:	83 fb 05             	cmp    ebx,0x5
c0001e8d:	76 2d                	jbe    c0001ebc <gen_numname+0x4a>
c0001e8f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e92:	66 85 c0             	test   ax,ax
c0001e95:	74 25                	je     c0001ebc <gen_numname+0x4a>
c0001e97:	83 c7 02             	add    edi,0x2
c0001e9a:	ba 10 00 00 00       	mov    edx,0x10
c0001e9f:	01 db                	add    ebx,ebx
c0001ea1:	89 c1                	mov    ecx,eax
c0001ea3:	66 d1 e8             	shr    ax,1
c0001ea6:	83 e1 01             	and    ecx,0x1
c0001ea9:	01 cb                	add    ebx,ecx
c0001eab:	0f ba e3 10          	bt     ebx,0x10
c0001eaf:	73 06                	jae    c0001eb7 <gen_numname+0x45>
c0001eb1:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001eb7:	4a                   	dec    edx
c0001eb8:	75 e5                	jne    c0001e9f <gen_numname+0x2d>
c0001eba:	eb d3                	jmp    c0001e8f <gen_numname+0x1d>
c0001ebc:	b8 07 00 00 00       	mov    eax,0x7
c0001ec1:	88 d9                	mov    cl,bl
c0001ec3:	83 e1 0f             	and    ecx,0xf
c0001ec6:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ec9:	80 fa 39             	cmp    dl,0x39
c0001ecc:	76 03                	jbe    c0001ed1 <gen_numname+0x5f>
c0001ece:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ed1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001ed4:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001ed8:	89 da                	mov    edx,ebx
c0001eda:	c1 ea 04             	shr    edx,0x4
c0001edd:	83 fb 0f             	cmp    ebx,0xf
c0001ee0:	76 06                	jbe    c0001ee8 <gen_numname+0x76>
c0001ee2:	89 c8                	mov    eax,ecx
c0001ee4:	89 d3                	mov    ebx,edx
c0001ee6:	eb d9                	jmp    c0001ec1 <gen_numname+0x4f>
c0001ee8:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001eed:	31 d2                	xor    edx,edx
c0001eef:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ef2:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ef5:	39 ca                	cmp    edx,ecx
c0001ef7:	73 18                	jae    c0001f11 <gen_numname+0x9f>
c0001ef9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001efc:	3c 20                	cmp    al,0x20
c0001efe:	74 11                	je     c0001f11 <gen_numname+0x9f>
c0001f00:	e8 41 fc ff ff       	call   c0001b46 <dbc_1st>
c0001f05:	85 c0                	test   eax,eax
c0001f07:	74 05                	je     c0001f0e <gen_numname+0x9c>
c0001f09:	39 d3                	cmp    ebx,edx
c0001f0b:	74 04                	je     c0001f11 <gen_numname+0x9f>
c0001f0d:	42                   	inc    edx
c0001f0e:	42                   	inc    edx
c0001f0f:	eb e1                	jmp    c0001ef2 <gen_numname+0x80>
c0001f11:	b0 20                	mov    al,0x20
c0001f13:	83 f9 07             	cmp    ecx,0x7
c0001f16:	77 05                	ja     c0001f1d <gen_numname+0xab>
c0001f18:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001f1c:	41                   	inc    ecx
c0001f1d:	42                   	inc    edx
c0001f1e:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f22:	83 fa 07             	cmp    edx,0x7
c0001f25:	76 ea                	jbe    c0001f11 <gen_numname+0x9f>
c0001f27:	83 c4 10             	add    esp,0x10
c0001f2a:	5b                   	pop    ebx
c0001f2b:	5e                   	pop    esi
c0001f2c:	5f                   	pop    edi
c0001f2d:	c3                   	ret    

c0001f2e <sum_sfn>:
c0001f2e:	31 c9                	xor    ecx,ecx
c0001f30:	31 d2                	xor    edx,edx
c0001f32:	d0 ca                	ror    dl,1
c0001f34:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f37:	41                   	inc    ecx
c0001f38:	83 f9 0b             	cmp    ecx,0xb
c0001f3b:	75 f5                	jne    c0001f32 <sum_sfn+0x4>
c0001f3d:	88 d0                	mov    al,dl
c0001f3f:	c3                   	ret    

c0001f40 <xdir_sum>:
c0001f40:	56                   	push   esi
c0001f41:	31 c9                	xor    ecx,ecx
c0001f43:	53                   	push   ebx
c0001f44:	31 d2                	xor    edx,edx
c0001f46:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f4a:	43                   	inc    ebx
c0001f4b:	c1 e3 05             	shl    ebx,0x5
c0001f4e:	83 fa 02             	cmp    edx,0x2
c0001f51:	74 0b                	je     c0001f5e <xdir_sum+0x1e>
c0001f53:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f57:	66 d1 c9             	ror    cx,1
c0001f5a:	01 f1                	add    ecx,esi
c0001f5c:	eb 05                	jmp    c0001f63 <xdir_sum+0x23>
c0001f5e:	ba 03 00 00 00       	mov    edx,0x3
c0001f63:	42                   	inc    edx
c0001f64:	39 d3                	cmp    ebx,edx
c0001f66:	77 e6                	ja     c0001f4e <xdir_sum+0xe>
c0001f68:	89 c8                	mov    eax,ecx
c0001f6a:	5b                   	pop    ebx
c0001f6b:	5e                   	pop    esi
c0001f6c:	c3                   	ret    

c0001f6d <xsum32>:
c0001f6d:	d1 ca                	ror    edx,1
c0001f6f:	0f b6 c0             	movzx  eax,al
c0001f72:	01 d0                	add    eax,edx
c0001f74:	c3                   	ret    

c0001f75 <get_xfileinfo>:
c0001f75:	55                   	push   ebp
c0001f76:	31 c9                	xor    ecx,ecx
c0001f78:	57                   	push   edi
c0001f79:	bd 40 00 00 00       	mov    ebp,0x40
c0001f7e:	56                   	push   esi
c0001f7f:	31 ff                	xor    edi,edi
c0001f81:	53                   	push   ebx
c0001f82:	89 c6                	mov    esi,eax
c0001f84:	83 ec 0c             	sub    esp,0xc
c0001f87:	89 d3                	mov    ebx,edx
c0001f89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f90:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f94:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f97:	76 6d                	jbe    c0002006 <get_xfileinfo+0x91>
c0001f99:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f9f:	76 0b                	jbe    c0001fac <get_xfileinfo+0x37>
c0001fa1:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001fa5:	bf 01 00 00 00       	mov    edi,0x1
c0001faa:	eb 63                	jmp    c000200f <get_xfileinfo+0x9a>
c0001fac:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001fb2:	75 03                	jne    c0001fb7 <get_xfileinfo+0x42>
c0001fb4:	83 c5 02             	add    ebp,0x2
c0001fb7:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001fba:	83 c5 02             	add    ebp,0x2
c0001fbd:	e8 b0 fa ff ff       	call   c0001a72 <ld_word>
c0001fc2:	ff 04 24             	inc    DWORD PTR [esp]
c0001fc5:	66 85 c9             	test   cx,cx
c0001fc8:	75 0d                	jne    c0001fd7 <get_xfileinfo+0x62>
c0001fca:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fd0:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fd5:	76 2b                	jbe    c0002002 <get_xfileinfo+0x8d>
c0001fd7:	c1 e1 10             	shl    ecx,0x10
c0001fda:	ba ff 00 00 00       	mov    edx,0xff
c0001fdf:	0f b7 c0             	movzx  eax,ax
c0001fe2:	29 fa                	sub    edx,edi
c0001fe4:	09 c8                	or     eax,ecx
c0001fe6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fea:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001ff2:	e8 1b fc ff ff       	call   c0001c12 <put_utf>
c0001ff7:	84 c0                	test   al,al
c0001ff9:	74 a6                	je     c0001fa1 <get_xfileinfo+0x2c>
c0001ffb:	0f b6 c0             	movzx  eax,al
c0001ffe:	01 c7                	add    edi,eax
c0002000:	31 c0                	xor    eax,eax
c0002002:	89 c1                	mov    ecx,eax
c0002004:	eb 8a                	jmp    c0001f90 <get_xfileinfo+0x1b>
c0002006:	85 ff                	test   edi,edi
c0002008:	74 97                	je     c0001fa1 <get_xfileinfo+0x2c>
c000200a:	66 85 c9             	test   cx,cx
c000200d:	75 92                	jne    c0001fa1 <get_xfileinfo+0x2c>
c000200f:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002014:	31 c0                	xor    eax,eax
c0002016:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c000201a:	31 d2                	xor    edx,edx
c000201c:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000201f:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002022:	80 e1 10             	and    cl,0x10
c0002025:	75 08                	jne    c000202f <get_xfileinfo+0xba>
c0002027:	8d 46 38             	lea    eax,[esi+0x38]
c000202a:	e8 68 fa ff ff       	call   c0001a97 <ld_qword>
c000202f:	89 03                	mov    DWORD PTR [ebx],eax
c0002031:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002034:	8d 46 0c             	lea    eax,[esi+0xc]
c0002037:	e8 36 fa ff ff       	call   c0001a72 <ld_word>
c000203c:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002040:	8d 46 0e             	lea    eax,[esi+0xe]
c0002043:	e8 2a fa ff ff       	call   c0001a72 <ld_word>
c0002048:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000204c:	83 c4 0c             	add    esp,0xc
c000204f:	5b                   	pop    ebx
c0002050:	5e                   	pop    esi
c0002051:	5f                   	pop    edi
c0002052:	5d                   	pop    ebp
c0002053:	c3                   	ret    

c0002054 <get_ldnumber>:
c0002054:	8b 10                	mov    edx,DWORD PTR [eax]
c0002056:	85 d2                	test   edx,edx
c0002058:	74 14                	je     c000206e <get_ldnumber+0x1a>
c000205a:	56                   	push   esi
c000205b:	53                   	push   ebx
c000205c:	89 d3                	mov    ebx,edx
c000205e:	43                   	inc    ebx
c000205f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002062:	80 f9 1f             	cmp    cl,0x1f
c0002065:	76 0d                	jbe    c0002074 <get_ldnumber+0x20>
c0002067:	80 f9 3a             	cmp    cl,0x3a
c000206a:	75 f2                	jne    c000205e <get_ldnumber+0xa>
c000206c:	eb 0a                	jmp    c0002078 <get_ldnumber+0x24>
c000206e:	83 c9 ff             	or     ecx,0xffffffff
c0002071:	89 c8                	mov    eax,ecx
c0002073:	c3                   	ret    
c0002074:	31 c9                	xor    ecx,ecx
c0002076:	eb 24                	jmp    c000209c <get_ldnumber+0x48>
c0002078:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000207b:	8d 4e d0             	lea    ecx,[esi-0x30]
c000207e:	80 f9 09             	cmp    cl,0x9
c0002081:	77 16                	ja     c0002099 <get_ldnumber+0x45>
c0002083:	83 c2 02             	add    edx,0x2
c0002086:	83 c9 ff             	or     ecx,0xffffffff
c0002089:	39 d3                	cmp    ebx,edx
c000208b:	75 0f                	jne    c000209c <get_ldnumber+0x48>
c000208d:	89 f2                	mov    edx,esi
c000208f:	89 18                	mov    DWORD PTR [eax],ebx
c0002091:	0f be ca             	movsx  ecx,dl
c0002094:	83 e9 30             	sub    ecx,0x30
c0002097:	eb 03                	jmp    c000209c <get_ldnumber+0x48>
c0002099:	83 c9 ff             	or     ecx,0xffffffff
c000209c:	89 c8                	mov    eax,ecx
c000209e:	5b                   	pop    ebx
c000209f:	5e                   	pop    esi
c00020a0:	c3                   	ret    

c00020a1 <crc32>:
c00020a1:	56                   	push   esi
c00020a2:	89 d6                	mov    esi,edx
c00020a4:	53                   	push   ebx
c00020a5:	b2 01                	mov    dl,0x1
c00020a7:	bb 08 00 00 00       	mov    ebx,0x8
c00020ac:	89 f1                	mov    ecx,esi
c00020ae:	84 d1                	test   cl,dl
c00020b0:	0f 95 c1             	setne  cl
c00020b3:	0f b6 c9             	movzx  ecx,cl
c00020b6:	31 c1                	xor    ecx,eax
c00020b8:	89 c8                	mov    eax,ecx
c00020ba:	d1 e8                	shr    eax,1
c00020bc:	80 e1 01             	and    cl,0x1
c00020bf:	74 05                	je     c00020c6 <crc32+0x25>
c00020c1:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020c6:	d1 e2                	shl    edx,1
c00020c8:	4b                   	dec    ebx
c00020c9:	75 e1                	jne    c00020ac <crc32+0xb>
c00020cb:	5b                   	pop    ebx
c00020cc:	5e                   	pop    esi
c00020cd:	c3                   	ret    

c00020ce <test_gpt_header>:
c00020ce:	55                   	push   ebp
c00020cf:	b9 10 00 00 00       	mov    ecx,0x10
c00020d4:	57                   	push   edi
c00020d5:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c00020da:	56                   	push   esi
c00020db:	31 ff                	xor    edi,edi
c00020dd:	53                   	push   ebx
c00020de:	89 c3                	mov    ebx,eax
c00020e0:	e8 2c fa ff ff       	call   c0001b11 <mem_cmp>
c00020e5:	85 c0                	test   eax,eax
c00020e7:	75 55                	jne    c000213e <test_gpt_header+0x70>
c00020e9:	89 c7                	mov    edi,eax
c00020eb:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020f0:	83 ce ff             	or     esi,0xffffffff
c00020f3:	31 d2                	xor    edx,edx
c00020f5:	83 fd 03             	cmp    ebp,0x3
c00020f8:	76 05                	jbe    c00020ff <test_gpt_header+0x31>
c00020fa:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020ff:	89 f0                	mov    eax,esi
c0002101:	45                   	inc    ebp
c0002102:	e8 9a ff ff ff       	call   c00020a1 <crc32>
c0002107:	83 fd 4c             	cmp    ebp,0x4c
c000210a:	89 c6                	mov    esi,eax
c000210c:	75 e5                	jne    c00020f3 <test_gpt_header+0x25>
c000210e:	8d 43 10             	lea    eax,[ebx+0x10]
c0002111:	f7 d6                	not    esi
c0002113:	e8 67 f9 ff ff       	call   c0001a7f <ld_dword>
c0002118:	39 c6                	cmp    esi,eax
c000211a:	75 22                	jne    c000213e <test_gpt_header+0x70>
c000211c:	8d 43 54             	lea    eax,[ebx+0x54]
c000211f:	e8 5b f9 ff ff       	call   c0001a7f <ld_dword>
c0002124:	83 c0 80             	add    eax,0xffffff80
c0002127:	75 15                	jne    c000213e <test_gpt_header+0x70>
c0002129:	8d 43 50             	lea    eax,[ebx+0x50]
c000212c:	e8 4e f9 ff ff       	call   c0001a7f <ld_dword>
c0002131:	3d 80 00 00 00       	cmp    eax,0x80
c0002136:	0f 96 c0             	setbe  al
c0002139:	0f b6 c0             	movzx  eax,al
c000213c:	89 c7                	mov    edi,eax
c000213e:	5b                   	pop    ebx
c000213f:	89 f8                	mov    eax,edi
c0002141:	5e                   	pop    esi
c0002142:	5f                   	pop    edi
c0002143:	5d                   	pop    ebp
c0002144:	c3                   	ret    

c0002145 <make_rand>:
c0002145:	56                   	push   esi
c0002146:	85 c0                	test   eax,eax
c0002148:	53                   	push   ebx
c0002149:	75 05                	jne    c0002150 <make_rand+0xb>
c000214b:	b8 01 00 00 00       	mov    eax,0x1
c0002150:	01 d1                	add    ecx,edx
c0002152:	bb 08 00 00 00       	mov    ebx,0x8
c0002157:	89 c6                	mov    esi,eax
c0002159:	d1 e8                	shr    eax,1
c000215b:	83 e6 01             	and    esi,0x1
c000215e:	85 f6                	test   esi,esi
c0002160:	74 05                	je     c0002167 <make_rand+0x22>
c0002162:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002167:	4b                   	dec    ebx
c0002168:	75 ed                	jne    c0002157 <make_rand+0x12>
c000216a:	42                   	inc    edx
c000216b:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000216e:	39 ca                	cmp    edx,ecx
c0002170:	75 e0                	jne    c0002152 <make_rand+0xd>
c0002172:	5b                   	pop    ebx
c0002173:	5e                   	pop    esi
c0002174:	c3                   	ret    

c0002175 <validate>:
c0002175:	56                   	push   esi
c0002176:	53                   	push   ebx
c0002177:	89 d6                	mov    esi,edx
c0002179:	51                   	push   ecx
c000217a:	85 c0                	test   eax,eax
c000217c:	75 09                	jne    c0002187 <validate+0x12>
c000217e:	b8 09 00 00 00       	mov    eax,0x9
c0002183:	31 c9                	xor    ecx,ecx
c0002185:	eb 2f                	jmp    c00021b6 <validate+0x41>
c0002187:	89 c3                	mov    ebx,eax
c0002189:	8b 00                	mov    eax,DWORD PTR [eax]
c000218b:	85 c0                	test   eax,eax
c000218d:	74 ef                	je     c000217e <validate+0x9>
c000218f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002192:	74 ea                	je     c000217e <validate+0x9>
c0002194:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002198:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000219c:	75 e0                	jne    c000217e <validate+0x9>
c000219e:	83 ec 0c             	sub    esp,0xc
c00021a1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021a5:	50                   	push   eax
c00021a6:	e8 76 f8 ff ff       	call   c0001a21 <disk_status>
c00021ab:	83 c4 10             	add    esp,0x10
c00021ae:	a8 01                	test   al,0x1
c00021b0:	75 cc                	jne    c000217e <validate+0x9>
c00021b2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021b4:	31 c0                	xor    eax,eax
c00021b6:	89 0e                	mov    DWORD PTR [esi],ecx
c00021b8:	5a                   	pop    edx
c00021b9:	5b                   	pop    ebx
c00021ba:	5e                   	pop    esi
c00021bb:	c3                   	ret    

c00021bc <sync_window>:
c00021bc:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021c0:	0f 84 85 00 00 00    	je     c000224b <sync_window+0x8f>
c00021c6:	55                   	push   ebp
c00021c7:	8d 68 54             	lea    ebp,[eax+0x54]
c00021ca:	57                   	push   edi
c00021cb:	56                   	push   esi
c00021cc:	53                   	push   ebx
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	83 ec 28             	sub    esp,0x28
c00021d2:	6a 01                	push   0x1
c00021d4:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021d7:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021da:	55                   	push   ebp
c00021db:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021df:	50                   	push   eax
c00021e0:	e8 58 f8 ff ff       	call   c0001a3d <disk_write>
c00021e5:	83 c4 20             	add    esp,0x20
c00021e8:	ba 01 00 00 00       	mov    edx,0x1
c00021ed:	85 c0                	test   eax,eax
c00021ef:	75 50                	jne    c0002241 <sync_window+0x85>
c00021f1:	31 ff                	xor    edi,edi
c00021f3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021f6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021fa:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021fe:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002201:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002204:	89 c6                	mov    esi,eax
c0002206:	89 d7                	mov    edi,edx
c0002208:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000220b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000220f:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002212:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002216:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c000221a:	73 23                	jae    c000223f <sync_window+0x83>
c000221c:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002220:	75 1d                	jne    c000223f <sync_window+0x83>
c0002222:	83 ec 0c             	sub    esp,0xc
c0002225:	6a 01                	push   0x1
c0002227:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000222b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000222f:	52                   	push   edx
c0002230:	50                   	push   eax
c0002231:	55                   	push   ebp
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 01 f8 ff ff       	call   c0001a3d <disk_write>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	31 d2                	xor    edx,edx
c0002241:	83 c4 1c             	add    esp,0x1c
c0002244:	89 d0                	mov    eax,edx
c0002246:	5b                   	pop    ebx
c0002247:	5e                   	pop    esi
c0002248:	5f                   	pop    edi
c0002249:	5d                   	pop    ebp
c000224a:	c3                   	ret    
c000224b:	31 d2                	xor    edx,edx
c000224d:	89 d0                	mov    eax,edx
c000224f:	c3                   	ret    

c0002250 <move_window>:
c0002250:	56                   	push   esi
c0002251:	53                   	push   ebx
c0002252:	89 c3                	mov    ebx,eax
c0002254:	83 ec 14             	sub    esp,0x14
c0002257:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000225a:	75 07                	jne    c0002263 <move_window+0x13>
c000225c:	31 f6                	xor    esi,esi
c000225e:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002261:	74 59                	je     c00022bc <move_window+0x6c>
c0002263:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002267:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000226b:	89 d8                	mov    eax,ebx
c000226d:	e8 4a ff ff ff       	call   c00021bc <sync_window>
c0002272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002276:	89 c6                	mov    esi,eax
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000227e:	75 3c                	jne    c00022bc <move_window+0x6c>
c0002280:	83 ec 0c             	sub    esp,0xc
c0002283:	8d 43 54             	lea    eax,[ebx+0x54]
c0002286:	6a 01                	push   0x1
c0002288:	51                   	push   ecx
c0002289:	52                   	push   edx
c000228a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000228e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002292:	50                   	push   eax
c0002293:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002297:	50                   	push   eax
c0002298:	e8 8a f7 ff ff       	call   c0001a27 <disk_read>
c000229d:	83 c4 20             	add    esp,0x20
c00022a0:	85 c0                	test   eax,eax
c00022a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00022a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00022aa:	74 0a                	je     c00022b6 <move_window+0x66>
c00022ac:	83 ca ff             	or     edx,0xffffffff
c00022af:	be 01 00 00 00       	mov    esi,0x1
c00022b4:	89 d1                	mov    ecx,edx
c00022b6:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00022b9:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00022bc:	89 f0                	mov    eax,esi
c00022be:	83 c4 14             	add    esp,0x14
c00022c1:	5b                   	pop    ebx
c00022c2:	5e                   	pop    esi
c00022c3:	c3                   	ret    

c00022c4 <check_fs>:
c00022c4:	53                   	push   ebx
c00022c5:	89 c3                	mov    ebx,eax
c00022c7:	83 ec 08             	sub    esp,0x8
c00022ca:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022ce:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022d5:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022dc:	e8 6f ff ff ff       	call   c0002250 <move_window>
c00022e1:	ba 04 00 00 00       	mov    edx,0x4
c00022e6:	85 c0                	test   eax,eax
c00022e8:	0f 85 89 00 00 00    	jne    c0002377 <check_fs+0xb3>
c00022ee:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022f4:	e8 79 f7 ff ff       	call   c0001a72 <ld_word>
c00022f9:	ba 03 00 00 00       	mov    edx,0x3
c00022fe:	66 3d 55 aa          	cmp    ax,0xaa55
c0002302:	75 73                	jne    c0002377 <check_fs+0xb3>
c0002304:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c0002309:	8d 43 54             	lea    eax,[ebx+0x54]
c000230c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002311:	e8 fb f7 ff ff       	call   c0001b11 <mem_cmp>
c0002316:	ba 01 00 00 00       	mov    edx,0x1
c000231b:	85 c0                	test   eax,eax
c000231d:	74 58                	je     c0002377 <check_fs+0xb3>
c000231f:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002322:	8d 50 18             	lea    edx,[eax+0x18]
c0002325:	80 fa 01             	cmp    dl,0x1
c0002328:	76 09                	jbe    c0002333 <check_fs+0x6f>
c000232a:	ba 02 00 00 00       	mov    edx,0x2
c000232f:	3c eb                	cmp    al,0xeb
c0002331:	75 44                	jne    c0002377 <check_fs+0xb3>
c0002333:	ba c4 8a 02 c0       	mov    edx,0xc0028ac4
c0002338:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000233e:	b9 03 00 00 00       	mov    ecx,0x3
c0002343:	e8 c9 f7 ff ff       	call   c0001b11 <mem_cmp>
c0002348:	31 d2                	xor    edx,edx
c000234a:	85 c0                	test   eax,eax
c000234c:	74 29                	je     c0002377 <check_fs+0xb3>
c000234e:	ba 2c 5e 02 c0       	mov    edx,0xc0025e2c
c0002353:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002359:	b9 05 00 00 00       	mov    ecx,0x5
c000235e:	e8 ae f7 ff ff       	call   c0001b11 <mem_cmp>
c0002363:	31 d2                	xor    edx,edx
c0002365:	85 c0                	test   eax,eax
c0002367:	74 0e                	je     c0002377 <check_fs+0xb3>
c0002369:	31 d2                	xor    edx,edx
c000236b:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002372:	0f 95 c2             	setne  dl
c0002375:	01 d2                	add    edx,edx
c0002377:	89 d0                	mov    eax,edx
c0002379:	83 c4 08             	add    esp,0x8
c000237c:	5b                   	pop    ebx
c000237d:	c3                   	ret    

c000237e <find_volume>:
c000237e:	55                   	push   ebp
c000237f:	31 c9                	xor    ecx,ecx
c0002381:	57                   	push   edi
c0002382:	56                   	push   esi
c0002383:	89 d6                	mov    esi,edx
c0002385:	53                   	push   ebx
c0002386:	31 d2                	xor    edx,edx
c0002388:	83 ec 3c             	sub    esp,0x3c
c000238b:	89 c3                	mov    ebx,eax
c000238d:	e8 32 ff ff ff       	call   c00022c4 <check_fs>
c0002392:	83 f8 02             	cmp    eax,0x2
c0002395:	74 0e                	je     c00023a5 <find_volume+0x27>
c0002397:	0f 87 5d 01 00 00    	ja     c00024fa <find_volume+0x17c>
c000239d:	85 f6                	test   esi,esi
c000239f:	0f 84 55 01 00 00    	je     c00024fa <find_volume+0x17c>
c00023a5:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00023ac:	0f 85 dd 00 00 00    	jne    c000248f <find_volume+0x111>
c00023b2:	31 c9                	xor    ecx,ecx
c00023b4:	ba 01 00 00 00       	mov    edx,0x1
c00023b9:	89 d8                	mov    eax,ebx
c00023bb:	e8 90 fe ff ff       	call   c0002250 <move_window>
c00023c0:	85 c0                	test   eax,eax
c00023c2:	74 0a                	je     c00023ce <find_volume+0x50>
c00023c4:	b8 04 00 00 00       	mov    eax,0x4
c00023c9:	e9 2c 01 00 00       	jmp    c00024fa <find_volume+0x17c>
c00023ce:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023d1:	89 e8                	mov    eax,ebp
c00023d3:	e8 f6 fc ff ff       	call   c00020ce <test_gpt_header>
c00023d8:	85 c0                	test   eax,eax
c00023da:	75 0a                	jne    c00023e6 <find_volume+0x68>
c00023dc:	b8 03 00 00 00       	mov    eax,0x3
c00023e1:	e9 14 01 00 00       	jmp    c00024fa <find_volume+0x17c>
c00023e6:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023ec:	e8 8e f6 ff ff       	call   c0001a7f <ld_dword>
c00023f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023f5:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023fb:	e8 97 f6 ff ff       	call   c0001a97 <ld_qword>
c0002400:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002408:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000240c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002410:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002418:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000241c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002420:	74 ba                	je     c00023dc <find_volume+0x5e>
c0002422:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002426:	31 c9                	xor    ecx,ecx
c0002428:	c1 e7 07             	shl    edi,0x7
c000242b:	89 d8                	mov    eax,ebx
c000242d:	89 fa                	mov    edx,edi
c000242f:	c1 ea 09             	shr    edx,0x9
c0002432:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002436:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000243a:	e8 11 fe ff ff       	call   c0002250 <move_window>
c000243f:	85 c0                	test   eax,eax
c0002441:	75 81                	jne    c00023c4 <find_volume+0x46>
c0002443:	81 e7 80 01 00 00    	and    edi,0x180
c0002449:	b9 10 00 00 00       	mov    ecx,0x10
c000244e:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002452:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c0002457:	e8 b5 f6 ff ff       	call   c0001b11 <mem_cmp>
c000245c:	85 c0                	test   eax,eax
c000245e:	75 29                	jne    c0002489 <find_volume+0x10b>
c0002460:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002464:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002468:	e8 2a f6 ff ff       	call   c0001a97 <ld_qword>
c000246d:	89 d1                	mov    ecx,edx
c000246f:	89 c2                	mov    edx,eax
c0002471:	89 d8                	mov    eax,ebx
c0002473:	e8 4c fe ff ff       	call   c00022c4 <check_fs>
c0002478:	85 f6                	test   esi,esi
c000247a:	75 07                	jne    c0002483 <find_volume+0x105>
c000247c:	83 f8 01             	cmp    eax,0x1
c000247f:	77 08                	ja     c0002489 <find_volume+0x10b>
c0002481:	eb 77                	jmp    c00024fa <find_volume+0x17c>
c0002483:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002487:	74 71                	je     c00024fa <find_volume+0x17c>
c0002489:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000248d:	eb 89                	jmp    c0002418 <find_volume+0x9a>
c000248f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002493:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002499:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000249f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a3:	89 cd                	mov    ebp,ecx
c00024a5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00024a9:	89 f8                	mov    eax,edi
c00024ab:	83 c7 10             	add    edi,0x10
c00024ae:	e8 cc f5 ff ff       	call   c0001a7f <ld_dword>
c00024b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00024b7:	89 01                	mov    DWORD PTR [ecx],eax
c00024b9:	83 c1 04             	add    ecx,0x4
c00024bc:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024c0:	75 e3                	jne    c00024a5 <find_volume+0x127>
c00024c2:	31 ff                	xor    edi,edi
c00024c4:	85 f6                	test   esi,esi
c00024c6:	74 03                	je     c00024cb <find_volume+0x14d>
c00024c8:	8d 7e ff             	lea    edi,[esi-0x1]
c00024cb:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024cf:	85 d2                	test   edx,edx
c00024d1:	74 14                	je     c00024e7 <find_volume+0x169>
c00024d3:	31 c9                	xor    ecx,ecx
c00024d5:	89 d8                	mov    eax,ebx
c00024d7:	e8 e8 fd ff ff       	call   c00022c4 <check_fs>
c00024dc:	83 f8 01             	cmp    eax,0x1
c00024df:	76 19                	jbe    c00024fa <find_volume+0x17c>
c00024e1:	85 f6                	test   esi,esi
c00024e3:	74 0f                	je     c00024f4 <find_volume+0x176>
c00024e5:	eb 13                	jmp    c00024fa <find_volume+0x17c>
c00024e7:	85 f6                	test   esi,esi
c00024e9:	0f 85 ed fe ff ff    	jne    c00023dc <find_volume+0x5e>
c00024ef:	b8 03 00 00 00       	mov    eax,0x3
c00024f4:	47                   	inc    edi
c00024f5:	83 ff 03             	cmp    edi,0x3
c00024f8:	76 d1                	jbe    c00024cb <find_volume+0x14d>
c00024fa:	83 c4 3c             	add    esp,0x3c
c00024fd:	5b                   	pop    ebx
c00024fe:	5e                   	pop    esi
c00024ff:	5f                   	pop    edi
c0002500:	5d                   	pop    ebp
c0002501:	c3                   	ret    

c0002502 <mount_volume>:
c0002502:	55                   	push   ebp
c0002503:	57                   	push   edi
c0002504:	89 cf                	mov    edi,ecx
c0002506:	56                   	push   esi
c0002507:	53                   	push   ebx
c0002508:	bb 0b 00 00 00       	mov    ebx,0xb
c000250d:	83 ec 3c             	sub    esp,0x3c
c0002510:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002516:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000251a:	e8 35 fb ff ff       	call   c0002054 <get_ldnumber>
c000251f:	85 c0                	test   eax,eax
c0002521:	0f 88 3a 05 00 00    	js     c0002a61 <mount_volume+0x55f>
c0002527:	8b 2c 85 a0 a3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5c60]
c000252e:	89 c6                	mov    esi,eax
c0002530:	bb 0c 00 00 00       	mov    ebx,0xc
c0002535:	85 ed                	test   ebp,ebp
c0002537:	0f 84 24 05 00 00    	je     c0002a61 <mount_volume+0x55f>
c000253d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002541:	83 e7 fe             	and    edi,0xfffffffe
c0002544:	89 2a                	mov    DWORD PTR [edx],ebp
c0002546:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000254a:	74 32                	je     c000257e <mount_volume+0x7c>
c000254c:	83 ec 0c             	sub    esp,0xc
c000254f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002553:	50                   	push   eax
c0002554:	e8 c8 f4 ff ff       	call   c0001a21 <disk_status>
c0002559:	83 c4 10             	add    esp,0x10
c000255c:	a8 01                	test   al,0x1
c000255e:	75 1e                	jne    c000257e <mount_volume+0x7c>
c0002560:	31 db                	xor    ebx,ebx
c0002562:	89 f9                	mov    ecx,edi
c0002564:	84 c9                	test   cl,cl
c0002566:	0f 84 f5 04 00 00    	je     c0002a61 <mount_volume+0x55f>
c000256c:	a8 04                	test   al,0x4
c000256e:	0f 84 ed 04 00 00    	je     c0002a61 <mount_volume+0x55f>
c0002574:	bb 0a 00 00 00       	mov    ebx,0xa
c0002579:	e9 e3 04 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c000257e:	83 ec 0c             	sub    esp,0xc
c0002581:	89 f0                	mov    eax,esi
c0002583:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002587:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000258a:	0f b6 f0             	movzx  esi,al
c000258d:	bb 03 00 00 00       	mov    ebx,0x3
c0002592:	56                   	push   esi
c0002593:	e8 8c f4 ff ff       	call   c0001a24 <disk_initialize>
c0002598:	83 c4 10             	add    esp,0x10
c000259b:	a8 01                	test   al,0x1
c000259d:	0f 85 be 04 00 00    	jne    c0002a61 <mount_volume+0x55f>
c00025a3:	89 f9                	mov    ecx,edi
c00025a5:	84 c9                	test   cl,cl
c00025a7:	74 04                	je     c00025ad <mount_volume+0xab>
c00025a9:	a8 04                	test   al,0x4
c00025ab:	75 c7                	jne    c0002574 <mount_volume+0x72>
c00025ad:	31 d2                	xor    edx,edx
c00025af:	89 e8                	mov    eax,ebp
c00025b1:	e8 c8 fd ff ff       	call   c000237e <find_volume>
c00025b6:	83 f8 04             	cmp    eax,0x4
c00025b9:	75 0a                	jne    c00025c5 <mount_volume+0xc3>
c00025bb:	bb 01 00 00 00       	mov    ebx,0x1
c00025c0:	e9 9c 04 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 0a                	jbe    c00025d4 <mount_volume+0xd2>
c00025ca:	bb 0d 00 00 00       	mov    ebx,0xd
c00025cf:	e9 8d 04 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c00025d4:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025d7:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025e2:	75 17                	jne    c00025fb <mount_volume+0xf9>
c00025e4:	b8 0b 00 00 00       	mov    eax,0xb
c00025e9:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025ee:	75 da                	jne    c00025ca <mount_volume+0xc8>
c00025f0:	40                   	inc    eax
c00025f1:	83 f8 40             	cmp    eax,0x40
c00025f4:	75 f3                	jne    c00025e9 <mount_volume+0xe7>
c00025f6:	e9 5a 02 00 00       	jmp    c0002855 <mount_volume+0x353>
c00025fb:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025fe:	e8 6f f4 ff ff       	call   c0001a72 <ld_word>
c0002603:	66 3d 00 02          	cmp    ax,0x200
c0002607:	75 c1                	jne    c00025ca <mount_volume+0xc8>
c0002609:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000260c:	e8 61 f4 ff ff       	call   c0001a72 <ld_word>
c0002611:	0f b7 c0             	movzx  eax,ax
c0002614:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002618:	85 c0                	test   eax,eax
c000261a:	75 0c                	jne    c0002628 <mount_volume+0x126>
c000261c:	8d 45 78             	lea    eax,[ebp+0x78]
c000261f:	e8 5b f4 ff ff       	call   c0001a7f <ld_dword>
c0002624:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000262c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000262f:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002632:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002636:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002639:	48                   	dec    eax
c000263a:	3c 01                	cmp    al,0x1
c000263c:	77 8c                	ja     c00025ca <mount_volume+0xc8>
c000263e:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002642:	89 c3                	mov    ebx,eax
c0002644:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002648:	66 85 c0             	test   ax,ax
c000264b:	0f 84 79 ff ff ff    	je     c00025ca <mount_volume+0xc8>
c0002651:	8d 40 ff             	lea    eax,[eax-0x1]
c0002654:	85 d8                	test   eax,ebx
c0002656:	0f 85 6e ff ff ff    	jne    c00025ca <mount_volume+0xc8>
c000265c:	8d 45 65             	lea    eax,[ebp+0x65]
c000265f:	e8 0e f4 ff ff       	call   c0001a72 <ld_word>
c0002664:	89 c7                	mov    edi,eax
c0002666:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000266a:	a8 0f                	test   al,0xf
c000266c:	0f 85 58 ff ff ff    	jne    c00025ca <mount_volume+0xc8>
c0002672:	8d 45 67             	lea    eax,[ebp+0x67]
c0002675:	e8 f8 f3 ff ff       	call   c0001a72 <ld_word>
c000267a:	0f b7 f0             	movzx  esi,ax
c000267d:	85 f6                	test   esi,esi
c000267f:	75 0a                	jne    c000268b <mount_volume+0x189>
c0002681:	8d 45 74             	lea    eax,[ebp+0x74]
c0002684:	e8 f6 f3 ff ff       	call   c0001a7f <ld_dword>
c0002689:	89 c6                	mov    esi,eax
c000268b:	8d 45 62             	lea    eax,[ebp+0x62]
c000268e:	e8 df f3 ff ff       	call   c0001a72 <ld_word>
c0002693:	66 85 c0             	test   ax,ax
c0002696:	0f 84 2e ff ff ff    	je     c00025ca <mount_volume+0xc8>
c000269c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00026a1:	0f b7 c8             	movzx  ecx,ax
c00026a4:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00026a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00026ad:	89 fa                	mov    edx,edi
c00026af:	66 c1 ea 04          	shr    dx,0x4
c00026b3:	0f b7 d2             	movzx  edx,dx
c00026b6:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00026ba:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00026bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026c1:	39 c6                	cmp    esi,eax
c00026c3:	0f 82 01 ff ff ff    	jb     c00025ca <mount_volume+0xc8>
c00026c9:	29 c6                	sub    esi,eax
c00026cb:	31 d2                	xor    edx,edx
c00026cd:	89 f0                	mov    eax,esi
c00026cf:	f7 f3                	div    ebx
c00026d1:	39 de                	cmp    esi,ebx
c00026d3:	0f 82 f1 fe ff ff    	jb     c00025ca <mount_volume+0xc8>
c00026d9:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026de:	0f 87 e6 fe ff ff    	ja     c00025ca <mount_volume+0xc8>
c00026e4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026e9:	0f 86 63 03 00 00    	jbe    c0002a52 <mount_volume+0x550>
c00026ef:	bb 03 00 00 00       	mov    ebx,0x3
c00026f4:	8d 70 02             	lea    esi,[eax+0x2]
c00026f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002702:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002705:	31 d2                	xor    edx,edx
c0002707:	89 c8                	mov    eax,ecx
c0002709:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000270c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002710:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002714:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002718:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000271c:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000271f:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002722:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002726:	31 d2                	xor    edx,edx
c0002728:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000272c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002730:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002733:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002736:	83 fb 03             	cmp    ebx,0x3
c0002739:	75 2b                	jne    c0002766 <mount_volume+0x264>
c000273b:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000273e:	e8 2f f3 ff ff       	call   c0001a72 <ld_word>
c0002743:	66 09 c7             	or     di,ax
c0002746:	0f 85 7e fe ff ff    	jne    c00025ca <mount_volume+0xc8>
c000274c:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002752:	c1 e6 02             	shl    esi,0x2
c0002755:	e8 25 f3 ff ff       	call   c0001a7f <ld_dword>
c000275a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002761:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002764:	eb 30                	jmp    c0002796 <mount_volume+0x294>
c0002766:	66 85 ff             	test   di,di
c0002769:	0f 84 5b fe ff ff    	je     c00025ca <mount_volume+0xc8>
c000276f:	31 d2                	xor    edx,edx
c0002771:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002775:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002779:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000277d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002780:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002783:	83 fb 02             	cmp    ebx,0x2
c0002786:	75 04                	jne    c000278c <mount_volume+0x28a>
c0002788:	01 f6                	add    esi,esi
c000278a:	eb 0a                	jmp    c0002796 <mount_volume+0x294>
c000278c:	8d 04 76             	lea    eax,[esi+esi*2]
c000278f:	83 e6 01             	and    esi,0x1
c0002792:	d1 e8                	shr    eax,1
c0002794:	01 c6                	add    esi,eax
c0002796:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000279c:	c1 ee 09             	shr    esi,0x9
c000279f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00027a3:	0f 87 21 fe ff ff    	ja     c00025ca <mount_volume+0xc8>
c00027a9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00027b0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00027b7:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00027bb:	83 fb 03             	cmp    ebx,0x3
c00027be:	75 7a                	jne    c000283a <mount_volume+0x338>
c00027c0:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027c6:	e8 a7 f2 ff ff       	call   c0001a72 <ld_word>
c00027cb:	66 48                	dec    ax
c00027cd:	75 6b                	jne    c000283a <mount_volume+0x338>
c00027cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027d7:	83 c2 01             	add    edx,0x1
c00027da:	89 e8                	mov    eax,ebp
c00027dc:	83 d1 00             	adc    ecx,0x0
c00027df:	e8 6c fa ff ff       	call   c0002250 <move_window>
c00027e4:	85 c0                	test   eax,eax
c00027e6:	75 52                	jne    c000283a <mount_volume+0x338>
c00027e8:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027ec:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027f2:	e8 7b f2 ff ff       	call   c0001a72 <ld_word>
c00027f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00027fb:	75 3d                	jne    c000283a <mount_volume+0x338>
c00027fd:	8d 45 54             	lea    eax,[ebp+0x54]
c0002800:	e8 7a f2 ff ff       	call   c0001a7f <ld_dword>
c0002805:	3d 52 52 61 41       	cmp    eax,0x41615252
c000280a:	75 2e                	jne    c000283a <mount_volume+0x338>
c000280c:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002812:	e8 68 f2 ff ff       	call   c0001a7f <ld_dword>
c0002817:	3d 72 72 41 61       	cmp    eax,0x61417272
c000281c:	75 1c                	jne    c000283a <mount_volume+0x338>
c000281e:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002824:	e8 56 f2 ff ff       	call   c0001a7f <ld_dword>
c0002829:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000282c:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002832:	e8 48 f2 ff ff       	call   c0001a7f <ld_dword>
c0002837:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000283a:	66 a1 80 a3 02 c0    	mov    ax,ds:0xc002a380
c0002840:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002843:	40                   	inc    eax
c0002844:	31 db                	xor    ebx,ebx
c0002846:	66 a3 80 a3 02 c0    	mov    ds:0xc002a380,ax
c000284c:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002850:	e9 0c 02 00 00       	jmp    c0002a61 <mount_volume+0x55f>
c0002855:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000285b:	e8 12 f2 ff ff       	call   c0001a72 <ld_word>
c0002860:	66 3d 00 01          	cmp    ax,0x100
c0002864:	0f 85 60 fd ff ff    	jne    c00025ca <mount_volume+0xc8>
c000286a:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002871:	0f 85 53 fd ff ff    	jne    c00025ca <mount_volume+0xc8>
c0002877:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000287d:	e8 15 f2 ff ff       	call   c0001a97 <ld_qword>
c0002882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002886:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000288a:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002890:	e8 ea f1 ff ff       	call   c0001a7f <ld_dword>
c0002895:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002898:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000289e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00028a1:	fe c8                	dec    al
c00028a3:	0f 85 21 fd ff ff    	jne    c00025ca <mount_volume+0xc8>
c00028a9:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00028b0:	bb 01 00 00 00       	mov    ebx,0x1
c00028b5:	d3 e3                	shl    ebx,cl
c00028b7:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00028bb:	66 85 db             	test   bx,bx
c00028be:	0f 84 06 fd ff ff    	je     c00025ca <mount_volume+0xc8>
c00028c4:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028ca:	e8 b0 f1 ff ff       	call   c0001a7f <ld_dword>
c00028cf:	89 c6                	mov    esi,eax
c00028d1:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028d6:	0f 87 ee fc ff ff    	ja     c00025ca <mount_volume+0xc8>
c00028dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028e0:	8d 40 02             	lea    eax,[eax+0x2]
c00028e3:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028e6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ed:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f0:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028f6:	e8 84 f1 ff ff       	call   c0001a7f <ld_dword>
c00028fb:	31 d2                	xor    edx,edx
c00028fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002901:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002905:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002909:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000290d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002910:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002913:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002919:	e8 61 f1 ff ff       	call   c0001a7f <ld_dword>
c000291e:	31 d2                	xor    edx,edx
c0002920:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002924:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002928:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000292c:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000292f:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002932:	0f b7 c3             	movzx  eax,bx
c0002935:	31 d2                	xor    edx,edx
c0002937:	0f af f0             	imul   esi,eax
c000293a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000293e:	89 f0                	mov    eax,esi
c0002940:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002944:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002948:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000294c:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002950:	39 c1                	cmp    ecx,eax
c0002952:	89 df                	mov    edi,ebx
c0002954:	19 d7                	sbb    edi,edx
c0002956:	0f 82 6e fc ff ff    	jb     c00025ca <mount_volume+0xc8>
c000295c:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002962:	31 db                	xor    ebx,ebx
c0002964:	e8 16 f1 ff ff       	call   c0001a7f <ld_dword>
c0002969:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002970:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002973:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000297b:	85 db                	test   ebx,ebx
c000297d:	75 39                	jne    c00029b8 <mount_volume+0x4b6>
c000297f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002983:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002987:	0f 86 3d fc ff ff    	jbe    c00025ca <mount_volume+0xc8>
c000298d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002990:	31 ff                	xor    edi,edi
c0002992:	89 e8                	mov    eax,ebp
c0002994:	e8 72 f3 ff ff       	call   c0001d0b <clst2sect>
c0002999:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000299d:	01 c6                	add    esi,eax
c000299f:	89 e8                	mov    eax,ebp
c00029a1:	11 d7                	adc    edi,edx
c00029a3:	89 f2                	mov    edx,esi
c00029a5:	89 f9                	mov    ecx,edi
c00029a7:	e8 a4 f8 ff ff       	call   c0002250 <move_window>
c00029ac:	85 c0                	test   eax,eax
c00029ae:	0f 85 07 fc ff ff    	jne    c00025bb <mount_volume+0xb9>
c00029b4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00029b8:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00029bd:	74 0b                	je     c00029ca <mount_volume+0x4c8>
c00029bf:	83 c3 20             	add    ebx,0x20
c00029c2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029c8:	eb b1                	jmp    c000297b <mount_volume+0x479>
c00029ca:	8d 75 54             	lea    esi,[ebp+0x54]
c00029cd:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029d1:	e8 a9 f0 ff ff       	call   c0001a7f <ld_dword>
c00029d6:	89 c3                	mov    ebx,eax
c00029d8:	83 f8 01             	cmp    eax,0x1
c00029db:	0f 86 e9 fb ff ff    	jbe    c00025ca <mount_volume+0xc8>
c00029e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029e4:	0f 86 e0 fb ff ff    	jbe    c00025ca <mount_volume+0xc8>
c00029ea:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029ed:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029f1:	0f af c2             	imul   eax,edx
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029f9:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029fc:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029ff:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002a02:	31 c9                	xor    ecx,ecx
c0002a04:	89 da                	mov    edx,ebx
c0002a06:	89 e8                	mov    eax,ebp
c0002a08:	c1 ea 07             	shr    edx,0x7
c0002a0b:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002a0e:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002a11:	e8 3a f8 ff ff       	call   c0002250 <move_window>
c0002a16:	85 c0                	test   eax,eax
c0002a18:	0f 85 9d fb ff ff    	jne    c00025bb <mount_volume+0xb9>
c0002a1e:	89 d8                	mov    eax,ebx
c0002a20:	83 e0 7f             	and    eax,0x7f
c0002a23:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a26:	e8 54 f0 ff ff       	call   c0001a7f <ld_dword>
c0002a2b:	83 f8 ff             	cmp    eax,0xffffffff
c0002a2e:	74 0a                	je     c0002a3a <mount_volume+0x538>
c0002a30:	43                   	inc    ebx
c0002a31:	39 d8                	cmp    eax,ebx
c0002a33:	74 cd                	je     c0002a02 <mount_volume+0x500>
c0002a35:	e9 90 fb ff ff       	jmp    c00025ca <mount_volume+0xc8>
c0002a3a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a41:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a48:	bb 04 00 00 00       	mov    ebx,0x4
c0002a4d:	e9 e8 fd ff ff       	jmp    c000283a <mount_volume+0x338>
c0002a52:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a57:	19 db                	sbb    ebx,ebx
c0002a59:	83 c3 02             	add    ebx,0x2
c0002a5c:	e9 93 fc ff ff       	jmp    c00026f4 <mount_volume+0x1f2>
c0002a61:	83 c4 3c             	add    esp,0x3c
c0002a64:	89 d8                	mov    eax,ebx
c0002a66:	5b                   	pop    ebx
c0002a67:	5e                   	pop    esi
c0002a68:	5f                   	pop    edi
c0002a69:	5d                   	pop    ebp
c0002a6a:	c3                   	ret    

c0002a6b <find_bitmap>:
c0002a6b:	55                   	push   ebp
c0002a6c:	57                   	push   edi
c0002a6d:	89 c7                	mov    edi,eax
c0002a6f:	56                   	push   esi
c0002a70:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a73:	53                   	push   ebx
c0002a74:	83 ec 1c             	sub    esp,0x1c
c0002a77:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a7e:	83 e8 02             	sub    eax,0x2
c0002a81:	39 f0                	cmp    eax,esi
c0002a83:	77 02                	ja     c0002a87 <find_bitmap+0x1c>
c0002a85:	31 f6                	xor    esi,esi
c0002a87:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a8b:	89 f3                	mov    ebx,esi
c0002a8d:	31 ed                	xor    ebp,ebp
c0002a8f:	31 c9                	xor    ecx,ecx
c0002a91:	89 da                	mov    edx,ebx
c0002a93:	89 f8                	mov    eax,edi
c0002a95:	c1 ea 0c             	shr    edx,0xc
c0002a98:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a9b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a9e:	e8 ad f7 ff ff       	call   c0002250 <move_window>
c0002aa3:	85 c0                	test   eax,eax
c0002aa5:	75 68                	jne    c0002b0f <find_bitmap+0xa4>
c0002aa7:	89 da                	mov    edx,ebx
c0002aa9:	89 d9                	mov    ecx,ebx
c0002aab:	c1 ea 03             	shr    edx,0x3
c0002aae:	83 e1 07             	and    ecx,0x7
c0002ab1:	b8 01 00 00 00       	mov    eax,0x1
c0002ab6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002abc:	d3 e0                	shl    eax,cl
c0002abe:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ac1:	83 e9 02             	sub    ecx,0x2
c0002ac4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ac8:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002acc:	43                   	inc    ebx
c0002acd:	21 c1                	and    ecx,eax
c0002acf:	d1 e0                	shl    eax,1
c0002ad1:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ad5:	77 09                	ja     c0002ae0 <find_bitmap+0x75>
c0002ad7:	31 db                	xor    ebx,ebx
c0002ad9:	ba 00 02 00 00       	mov    edx,0x200
c0002ade:	31 c0                	xor    eax,eax
c0002ae0:	84 c9                	test   cl,cl
c0002ae2:	75 10                	jne    c0002af4 <find_bitmap+0x89>
c0002ae4:	45                   	inc    ebp
c0002ae5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ae9:	75 0f                	jne    c0002afa <find_bitmap+0x8f>
c0002aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002aef:	83 c0 02             	add    eax,0x2
c0002af2:	eb 22                	jmp    c0002b16 <find_bitmap+0xab>
c0002af4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002af8:	31 ed                	xor    ebp,ebp
c0002afa:	39 de                	cmp    esi,ebx
c0002afc:	74 16                	je     c0002b14 <find_bitmap+0xa9>
c0002afe:	84 c0                	test   al,al
c0002b00:	75 c6                	jne    c0002ac8 <find_bitmap+0x5d>
c0002b02:	42                   	inc    edx
c0002b03:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002b09:	77 84                	ja     c0002a8f <find_bitmap+0x24>
c0002b0b:	b0 01                	mov    al,0x1
c0002b0d:	eb b9                	jmp    c0002ac8 <find_bitmap+0x5d>
c0002b0f:	83 c8 ff             	or     eax,0xffffffff
c0002b12:	eb 02                	jmp    c0002b16 <find_bitmap+0xab>
c0002b14:	31 c0                	xor    eax,eax
c0002b16:	83 c4 1c             	add    esp,0x1c
c0002b19:	5b                   	pop    ebx
c0002b1a:	5e                   	pop    esi
c0002b1b:	5f                   	pop    edi
c0002b1c:	5d                   	pop    ebp
c0002b1d:	c3                   	ret    

c0002b1e <change_bitmap>:
c0002b1e:	55                   	push   ebp
c0002b1f:	89 cd                	mov    ebp,ecx
c0002b21:	57                   	push   edi
c0002b22:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b25:	56                   	push   esi
c0002b26:	89 c7                	mov    edi,eax
c0002b28:	53                   	push   ebx
c0002b29:	89 c8                	mov    eax,ecx
c0002b2b:	83 ec 1c             	sub    esp,0x1c
c0002b2e:	31 d2                	xor    edx,edx
c0002b30:	89 ce                	mov    esi,ecx
c0002b32:	c1 e8 0c             	shr    eax,0xc
c0002b35:	bb 01 00 00 00       	mov    ebx,0x1
c0002b3a:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b3d:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b40:	c1 ee 03             	shr    esi,0x3
c0002b43:	83 e1 07             	and    ecx,0x7
c0002b46:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b4c:	d3 e3                	shl    ebx,cl
c0002b4e:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b52:	89 c1                	mov    ecx,eax
c0002b54:	89 d3                	mov    ebx,edx
c0002b56:	83 c1 01             	add    ecx,0x1
c0002b59:	83 d3 00             	adc    ebx,0x0
c0002b5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b60:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b64:	89 d1                	mov    ecx,edx
c0002b66:	89 c2                	mov    edx,eax
c0002b68:	89 f8                	mov    eax,edi
c0002b6a:	e8 e1 f6 ff ff       	call   c0002250 <move_window>
c0002b6f:	89 c1                	mov    ecx,eax
c0002b71:	85 c0                	test   eax,eax
c0002b73:	75 48                	jne    c0002bbd <change_bitmap+0x9f>
c0002b75:	31 d2                	xor    edx,edx
c0002b77:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b7b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b7f:	0f 95 c2             	setne  dl
c0002b82:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b86:	74 3c                	je     c0002bc4 <change_bitmap+0xa6>
c0002b88:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b8c:	4d                   	dec    ebp
c0002b8d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b91:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b95:	74 32                	je     c0002bc9 <change_bitmap+0xab>
c0002b97:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b9b:	75 d8                	jne    c0002b75 <change_bitmap+0x57>
c0002b9d:	8d 46 01             	lea    eax,[esi+0x1]
c0002ba0:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ba5:	89 c3                	mov    ebx,eax
c0002ba7:	31 f6                	xor    esi,esi
c0002ba9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002bad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb1:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002bb7:	74 99                	je     c0002b52 <change_bitmap+0x34>
c0002bb9:	89 de                	mov    esi,ebx
c0002bbb:	eb b8                	jmp    c0002b75 <change_bitmap+0x57>
c0002bbd:	b9 01 00 00 00       	mov    ecx,0x1
c0002bc2:	eb 05                	jmp    c0002bc9 <change_bitmap+0xab>
c0002bc4:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc9:	83 c4 1c             	add    esp,0x1c
c0002bcc:	89 c8                	mov    eax,ecx
c0002bce:	5b                   	pop    ebx
c0002bcf:	5e                   	pop    esi
c0002bd0:	5f                   	pop    edi
c0002bd1:	5d                   	pop    ebp
c0002bd2:	c3                   	ret    

c0002bd3 <put_fat>:
c0002bd3:	83 fa 01             	cmp    edx,0x1
c0002bd6:	0f 86 7b 01 00 00    	jbe    c0002d57 <put_fat+0x184>
c0002bdc:	55                   	push   ebp
c0002bdd:	57                   	push   edi
c0002bde:	89 cf                	mov    edi,ecx
c0002be0:	56                   	push   esi
c0002be1:	b9 02 00 00 00       	mov    ecx,0x2
c0002be6:	53                   	push   ebx
c0002be7:	89 c6                	mov    esi,eax
c0002be9:	83 ec 1c             	sub    esp,0x1c
c0002bec:	89 d3                	mov    ebx,edx
c0002bee:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bf1:	0f 86 68 01 00 00    	jbe    c0002d5f <put_fat+0x18c>
c0002bf7:	8a 00                	mov    al,BYTE PTR [eax]
c0002bf9:	3c 02                	cmp    al,0x2
c0002bfb:	0f 84 c7 00 00 00    	je     c0002cc8 <put_fat+0xf5>
c0002c01:	77 09                	ja     c0002c0c <put_fat+0x39>
c0002c03:	fe c8                	dec    al
c0002c05:	74 17                	je     c0002c1e <put_fat+0x4b>
c0002c07:	e9 53 01 00 00       	jmp    c0002d5f <put_fat+0x18c>
c0002c0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002c11:	3c 04                	cmp    al,0x4
c0002c13:	0f 86 e1 00 00 00    	jbe    c0002cfa <put_fat+0x127>
c0002c19:	e9 41 01 00 00       	jmp    c0002d5f <put_fat+0x18c>
c0002c1e:	89 d5                	mov    ebp,edx
c0002c20:	31 c9                	xor    ecx,ecx
c0002c22:	d1 ed                	shr    ebp,1
c0002c24:	89 f0                	mov    eax,esi
c0002c26:	01 d5                	add    ebp,edx
c0002c28:	89 ea                	mov    edx,ebp
c0002c2a:	c1 ea 09             	shr    edx,0x9
c0002c2d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c30:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c33:	e8 18 f6 ff ff       	call   c0002250 <move_window>
c0002c38:	89 c1                	mov    ecx,eax
c0002c3a:	85 c0                	test   eax,eax
c0002c3c:	0f 85 1d 01 00 00    	jne    c0002d5f <put_fat+0x18c>
c0002c42:	8d 46 54             	lea    eax,[esi+0x54]
c0002c45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c49:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c56:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c5a:	89 f8                	mov    eax,edi
c0002c5c:	83 e3 01             	and    ebx,0x1
c0002c5f:	74 0d                	je     c0002c6e <put_fat+0x9b>
c0002c61:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c64:	89 fa                	mov    edx,edi
c0002c66:	83 e0 0f             	and    eax,0xf
c0002c69:	c1 e2 04             	shl    edx,0x4
c0002c6c:	09 d0                	or     eax,edx
c0002c6e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c75:	31 c9                	xor    ecx,ecx
c0002c77:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c7b:	c1 ea 09             	shr    edx,0x9
c0002c7e:	89 f0                	mov    eax,esi
c0002c80:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c83:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c86:	e8 c5 f5 ff ff       	call   c0002250 <move_window>
c0002c8b:	89 c1                	mov    ecx,eax
c0002c8d:	85 c0                	test   eax,eax
c0002c8f:	0f 85 ca 00 00 00    	jne    c0002d5f <put_fat+0x18c>
c0002c95:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c99:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c9f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002ca3:	85 db                	test   ebx,ebx
c0002ca5:	74 07                	je     c0002cae <put_fat+0xdb>
c0002ca7:	c1 ef 04             	shr    edi,0x4
c0002caa:	89 fa                	mov    edx,edi
c0002cac:	eb 0e                	jmp    c0002cbc <put_fat+0xe9>
c0002cae:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002cb1:	c1 ef 08             	shr    edi,0x8
c0002cb4:	83 e2 f0             	and    edx,0xfffffff0
c0002cb7:	83 e7 0f             	and    edi,0xf
c0002cba:	09 fa                	or     edx,edi
c0002cbc:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002cbf:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cc3:	e9 97 00 00 00       	jmp    c0002d5f <put_fat+0x18c>
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	c1 ea 08             	shr    edx,0x8
c0002ccd:	89 f0                	mov    eax,esi
c0002ccf:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cd2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd5:	e8 76 f5 ff ff       	call   c0002250 <move_window>
c0002cda:	89 c1                	mov    ecx,eax
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 7f                	jne    c0002d5f <put_fat+0x18c>
c0002ce0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ce4:	01 db                	add    ebx,ebx
c0002ce6:	0f b7 d7             	movzx  edx,di
c0002ce9:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cef:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cf3:	e8 ec ed ff ff       	call   c0001ae4 <st_word>
c0002cf8:	eb 53                	jmp    c0002d4d <put_fat+0x17a>
c0002cfa:	31 c9                	xor    ecx,ecx
c0002cfc:	c1 ea 07             	shr    edx,0x7
c0002cff:	89 f0                	mov    eax,esi
c0002d01:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d04:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d07:	e8 44 f5 ff ff       	call   c0002250 <move_window>
c0002d0c:	89 c1                	mov    ecx,eax
c0002d0e:	85 c0                	test   eax,eax
c0002d10:	75 4d                	jne    c0002d5f <put_fat+0x18c>
c0002d12:	c1 e3 02             	shl    ebx,0x2
c0002d15:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002d1b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002d1e:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d22:	74 1c                	je     c0002d40 <put_fat+0x16d>
c0002d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d28:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d2e:	89 d8                	mov    eax,ebx
c0002d30:	e8 4a ed ff ff       	call   c0001a7f <ld_dword>
c0002d35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d39:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d3e:	09 c7                	or     edi,eax
c0002d40:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d44:	89 fa                	mov    edx,edi
c0002d46:	89 d8                	mov    eax,ebx
c0002d48:	e8 9b ed ff ff       	call   c0001ae8 <st_dword>
c0002d4d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d55:	eb 08                	jmp    c0002d5f <put_fat+0x18c>
c0002d57:	b9 02 00 00 00       	mov    ecx,0x2
c0002d5c:	89 c8                	mov    eax,ecx
c0002d5e:	c3                   	ret    
c0002d5f:	83 c4 1c             	add    esp,0x1c
c0002d62:	89 c8                	mov    eax,ecx
c0002d64:	5b                   	pop    ebx
c0002d65:	5e                   	pop    esi
c0002d66:	5f                   	pop    edi
c0002d67:	5d                   	pop    ebp
c0002d68:	c3                   	ret    

c0002d69 <fill_last_frag>:
c0002d69:	57                   	push   edi
c0002d6a:	89 cf                	mov    edi,ecx
c0002d6c:	56                   	push   esi
c0002d6d:	89 d6                	mov    esi,edx
c0002d6f:	53                   	push   ebx
c0002d70:	89 c3                	mov    ebx,eax
c0002d72:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d75:	85 c0                	test   eax,eax
c0002d77:	74 21                	je     c0002d9a <fill_last_frag+0x31>
c0002d79:	89 f9                	mov    ecx,edi
c0002d7b:	83 f8 01             	cmp    eax,0x1
c0002d7e:	76 05                	jbe    c0002d85 <fill_last_frag+0x1c>
c0002d80:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d83:	29 c1                	sub    ecx,eax
c0002d85:	8d 56 01             	lea    edx,[esi+0x1]
c0002d88:	29 c2                	sub    edx,eax
c0002d8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d8c:	e8 42 fe ff ff       	call   c0002bd3 <put_fat>
c0002d91:	85 c0                	test   eax,eax
c0002d93:	75 05                	jne    c0002d9a <fill_last_frag+0x31>
c0002d95:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d98:	eb d8                	jmp    c0002d72 <fill_last_frag+0x9>
c0002d9a:	5b                   	pop    ebx
c0002d9b:	5e                   	pop    esi
c0002d9c:	5f                   	pop    edi
c0002d9d:	c3                   	ret    

c0002d9e <fill_first_frag>:
c0002d9e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002da2:	75 2d                	jne    c0002dd1 <fill_first_frag+0x33>
c0002da4:	57                   	push   edi
c0002da5:	56                   	push   esi
c0002da6:	53                   	push   ebx
c0002da7:	89 c3                	mov    ebx,eax
c0002da9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002dac:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002daf:	01 d7                	add    edi,edx
c0002db1:	39 fa                	cmp    edx,edi
c0002db3:	74 14                	je     c0002dc9 <fill_first_frag+0x2b>
c0002db5:	8d 72 01             	lea    esi,[edx+0x1]
c0002db8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002dba:	89 f1                	mov    ecx,esi
c0002dbc:	e8 12 fe ff ff       	call   c0002bd3 <put_fat>
c0002dc1:	89 f2                	mov    edx,esi
c0002dc3:	85 c0                	test   eax,eax
c0002dc5:	74 ea                	je     c0002db1 <fill_first_frag+0x13>
c0002dc7:	eb 0b                	jmp    c0002dd4 <fill_first_frag+0x36>
c0002dc9:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002dcd:	31 c0                	xor    eax,eax
c0002dcf:	eb 03                	jmp    c0002dd4 <fill_first_frag+0x36>
c0002dd1:	31 c0                	xor    eax,eax
c0002dd3:	c3                   	ret    
c0002dd4:	5b                   	pop    ebx
c0002dd5:	5e                   	pop    esi
c0002dd6:	5f                   	pop    edi
c0002dd7:	c3                   	ret    

c0002dd8 <get_fat>:
c0002dd8:	83 fa 01             	cmp    edx,0x1
c0002ddb:	0f 86 db 01 00 00    	jbe    c0002fbc <get_fat+0x1e4>
c0002de1:	55                   	push   ebp
c0002de2:	b9 01 00 00 00       	mov    ecx,0x1
c0002de7:	57                   	push   edi
c0002de8:	56                   	push   esi
c0002de9:	53                   	push   ebx
c0002dea:	83 ec 1c             	sub    esp,0x1c
c0002ded:	8b 38                	mov    edi,DWORD PTR [eax]
c0002def:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002df2:	0f 86 cc 01 00 00    	jbe    c0002fc4 <get_fat+0x1ec>
c0002df8:	89 c3                	mov    ebx,eax
c0002dfa:	89 d6                	mov    esi,edx
c0002dfc:	8a 07                	mov    al,BYTE PTR [edi]
c0002dfe:	3c 02                	cmp    al,0x2
c0002e00:	0f 84 99 00 00 00    	je     c0002e9f <get_fat+0xc7>
c0002e06:	77 09                	ja     c0002e11 <get_fat+0x39>
c0002e08:	fe c8                	dec    al
c0002e0a:	74 1a                	je     c0002e26 <get_fat+0x4e>
c0002e0c:	e9 b3 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e11:	3c 03                	cmp    al,0x3
c0002e13:	0f 84 b5 00 00 00    	je     c0002ece <get_fat+0xf6>
c0002e19:	3c 04                	cmp    al,0x4
c0002e1b:	0f 84 e3 00 00 00    	je     c0002f04 <get_fat+0x12c>
c0002e21:	e9 9e 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e26:	89 d3                	mov    ebx,edx
c0002e28:	31 c9                	xor    ecx,ecx
c0002e2a:	d1 eb                	shr    ebx,1
c0002e2c:	89 f8                	mov    eax,edi
c0002e2e:	01 d3                	add    ebx,edx
c0002e30:	89 da                	mov    edx,ebx
c0002e32:	c1 ea 09             	shr    edx,0x9
c0002e35:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e38:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3b:	e8 10 f4 ff ff       	call   c0002250 <move_window>
c0002e40:	85 c0                	test   eax,eax
c0002e42:	74 08                	je     c0002e4c <get_fat+0x74>
c0002e44:	83 c9 ff             	or     ecx,0xffffffff
c0002e47:	e9 78 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e4c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e4f:	31 c9                	xor    ecx,ecx
c0002e51:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e57:	89 ea                	mov    edx,ebp
c0002e59:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e5d:	c1 ea 09             	shr    edx,0x9
c0002e60:	89 f8                	mov    eax,edi
c0002e62:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e65:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e68:	e8 e3 f3 ff ff       	call   c0002250 <move_window>
c0002e6d:	85 c0                	test   eax,eax
c0002e6f:	75 d3                	jne    c0002e44 <get_fat+0x6c>
c0002e71:	0f b6 c3             	movzx  eax,bl
c0002e74:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e7a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e7f:	c1 e3 08             	shl    ebx,0x8
c0002e82:	09 c3                	or     ebx,eax
c0002e84:	89 d9                	mov    ecx,ebx
c0002e86:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e8c:	83 e6 01             	and    esi,0x1
c0002e8f:	0f 84 2f 01 00 00    	je     c0002fc4 <get_fat+0x1ec>
c0002e95:	89 d9                	mov    ecx,ebx
c0002e97:	c1 e9 04             	shr    ecx,0x4
c0002e9a:	e9 25 01 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002e9f:	31 c9                	xor    ecx,ecx
c0002ea1:	c1 ea 08             	shr    edx,0x8
c0002ea4:	89 f8                	mov    eax,edi
c0002ea6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eac:	e8 9f f3 ff ff       	call   c0002250 <move_window>
c0002eb1:	85 c0                	test   eax,eax
c0002eb3:	75 8f                	jne    c0002e44 <get_fat+0x6c>
c0002eb5:	01 f6                	add    esi,esi
c0002eb7:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002ebd:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec1:	e8 ac eb ff ff       	call   c0001a72 <ld_word>
c0002ec6:	0f b7 c8             	movzx  ecx,ax
c0002ec9:	e9 f6 00 00 00       	jmp    c0002fc4 <get_fat+0x1ec>
c0002ece:	31 c9                	xor    ecx,ecx
c0002ed0:	c1 ea 07             	shr    edx,0x7
c0002ed3:	89 f8                	mov    eax,edi
c0002ed5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ed8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002edb:	e8 70 f3 ff ff       	call   c0002250 <move_window>
c0002ee0:	85 c0                	test   eax,eax
c0002ee2:	0f 85 5c ff ff ff    	jne    c0002e44 <get_fat+0x6c>
c0002ee8:	c1 e6 02             	shl    esi,0x2
c0002eeb:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ef1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ef5:	e8 85 eb ff ff       	call   c0001a7f <ld_dword>
c0002efa:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002eff:	e9 b4 00 00 00       	jmp    c0002fb8 <get_fat+0x1e0>
c0002f04:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002f07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f0a:	89 d1                	mov    ecx,edx
c0002f0c:	09 c1                	or     ecx,eax
c0002f0e:	74 06                	je     c0002f16 <get_fat+0x13e>
c0002f10:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002f14:	75 0f                	jne    c0002f25 <get_fat+0x14d>
c0002f16:	b9 01 00 00 00       	mov    ecx,0x1
c0002f1b:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002f1f:	0f 85 9f 00 00 00    	jne    c0002fc4 <get_fat+0x1ec>
c0002f25:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f29:	89 f5                	mov    ebp,esi
c0002f2b:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f30:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f33:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f36:	80 f9 02             	cmp    cl,0x2
c0002f39:	75 35                	jne    c0002f70 <get_fat+0x198>
c0002f3b:	83 c0 ff             	add    eax,0xffffffff
c0002f3e:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f43:	83 d2 ff             	adc    edx,0xffffffff
c0002f46:	31 db                	xor    ebx,ebx
c0002f48:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f4c:	53                   	push   ebx
c0002f4d:	c1 ea 09             	shr    edx,0x9
c0002f50:	51                   	push   ecx
c0002f51:	52                   	push   edx
c0002f52:	50                   	push   eax
c0002f53:	e8 24 04 02 00       	call   c002337c <__udivdi3>
c0002f58:	83 c4 10             	add    esp,0x10
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	39 c5                	cmp    ebp,eax
c0002f62:	77 60                	ja     c0002fc4 <get_fat+0x1ec>
c0002f64:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f69:	74 59                	je     c0002fc4 <get_fat+0x1ec>
c0002f6b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f6e:	eb 54                	jmp    c0002fc4 <get_fat+0x1ec>
c0002f70:	80 f9 03             	cmp    cl,0x3
c0002f73:	75 05                	jne    c0002f7a <get_fat+0x1a2>
c0002f75:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f78:	77 f1                	ja     c0002f6b <get_fat+0x193>
c0002f7a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f7f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f83:	75 3f                	jne    c0002fc4 <get_fat+0x1ec>
c0002f85:	31 c9                	xor    ecx,ecx
c0002f87:	89 f2                	mov    edx,esi
c0002f89:	89 f8                	mov    eax,edi
c0002f8b:	c1 ea 07             	shr    edx,0x7
c0002f8e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f91:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f94:	e8 b7 f2 ff ff       	call   c0002250 <move_window>
c0002f99:	85 c0                	test   eax,eax
c0002f9b:	0f 85 a3 fe ff ff    	jne    c0002e44 <get_fat+0x6c>
c0002fa1:	c1 e6 02             	shl    esi,0x2
c0002fa4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002faa:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fae:	e8 cc ea ff ff       	call   c0001a7f <ld_dword>
c0002fb3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002fb8:	89 c1                	mov    ecx,eax
c0002fba:	eb 08                	jmp    c0002fc4 <get_fat+0x1ec>
c0002fbc:	b9 01 00 00 00       	mov    ecx,0x1
c0002fc1:	89 c8                	mov    eax,ecx
c0002fc3:	c3                   	ret    
c0002fc4:	83 c4 1c             	add    esp,0x1c
c0002fc7:	89 c8                	mov    eax,ecx
c0002fc9:	5b                   	pop    ebx
c0002fca:	5e                   	pop    esi
c0002fcb:	5f                   	pop    edi
c0002fcc:	5d                   	pop    ebp
c0002fcd:	c3                   	ret    

c0002fce <dir_sdi>:
c0002fce:	55                   	push   ebp
c0002fcf:	57                   	push   edi
c0002fd0:	56                   	push   esi
c0002fd1:	53                   	push   ebx
c0002fd2:	89 c3                	mov    ebx,eax
c0002fd4:	83 ec 1c             	sub    esp,0x1c
c0002fd7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fd9:	31 c0                	xor    eax,eax
c0002fdb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fde:	0f 94 c0             	sete   al
c0002fe1:	48                   	dec    eax
c0002fe2:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fe7:	05 00 00 00 10       	add    eax,0x10000000
c0002fec:	39 d0                	cmp    eax,edx
c0002fee:	77 0a                	ja     c0002ffa <dir_sdi+0x2c>
c0002ff0:	b8 02 00 00 00       	mov    eax,0x2
c0002ff5:	e9 c4 00 00 00       	jmp    c00030be <dir_sdi+0xf0>
c0002ffa:	89 d6                	mov    esi,edx
c0002ffc:	f6 c2 1f             	test   dl,0x1f
c0002fff:	75 ef                	jne    c0002ff0 <dir_sdi+0x22>
c0003001:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003004:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003007:	85 c9                	test   ecx,ecx
c0003009:	75 2d                	jne    c0003038 <dir_sdi+0x6a>
c000300b:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000300e:	77 1b                	ja     c000302b <dir_sdi+0x5d>
c0003010:	89 f2                	mov    edx,esi
c0003012:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003016:	c1 ea 05             	shr    edx,0x5
c0003019:	39 c2                	cmp    edx,eax
c000301b:	73 d3                	jae    c0002ff0 <dir_sdi+0x22>
c000301d:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003020:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003023:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003026:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003029:	eb 4b                	jmp    c0003076 <dir_sdi+0xa8>
c000302b:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000302e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003032:	85 c0                	test   eax,eax
c0003034:	74 da                	je     c0003010 <dir_sdi+0x42>
c0003036:	89 c1                	mov    ecx,eax
c0003038:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000303c:	c1 e5 09             	shl    ebp,0x9
c000303f:	89 ca                	mov    edx,ecx
c0003041:	39 ee                	cmp    esi,ebp
c0003043:	72 1c                	jb     c0003061 <dir_sdi+0x93>
c0003045:	89 d8                	mov    eax,ebx
c0003047:	e8 8c fd ff ff       	call   c0002dd8 <get_fat>
c000304c:	89 c1                	mov    ecx,eax
c000304e:	83 f8 ff             	cmp    eax,0xffffffff
c0003051:	74 66                	je     c00030b9 <dir_sdi+0xeb>
c0003053:	83 f8 01             	cmp    eax,0x1
c0003056:	76 98                	jbe    c0002ff0 <dir_sdi+0x22>
c0003058:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000305b:	76 93                	jbe    c0002ff0 <dir_sdi+0x22>
c000305d:	29 ee                	sub    esi,ebp
c000305f:	eb de                	jmp    c000303f <dir_sdi+0x71>
c0003061:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003065:	89 f8                	mov    eax,edi
c0003067:	e8 9f ec ff ff       	call   c0001d0b <clst2sect>
c000306c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003070:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003073:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003076:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003079:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000307c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000307f:	89 d1                	mov    ecx,edx
c0003081:	09 c1                	or     ecx,eax
c0003083:	0f 84 67 ff ff ff    	je     c0002ff0 <dir_sdi+0x22>
c0003089:	89 f1                	mov    ecx,esi
c000308b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003093:	c1 e9 09             	shr    ecx,0x9
c0003096:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000309a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000309e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00030a2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00030a5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00030ab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00030ae:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00030b5:	31 c0                	xor    eax,eax
c00030b7:	eb 05                	jmp    c00030be <dir_sdi+0xf0>
c00030b9:	b8 01 00 00 00       	mov    eax,0x1
c00030be:	83 c4 1c             	add    esp,0x1c
c00030c1:	5b                   	pop    ebx
c00030c2:	5e                   	pop    esi
c00030c3:	5f                   	pop    edi
c00030c4:	5d                   	pop    ebp
c00030c5:	c3                   	ret    

c00030c6 <create_chain>:
c00030c6:	55                   	push   ebp
c00030c7:	89 c5                	mov    ebp,eax
c00030c9:	57                   	push   edi
c00030ca:	56                   	push   esi
c00030cb:	53                   	push   ebx
c00030cc:	83 ec 1c             	sub    esp,0x1c
c00030cf:	85 d2                	test   edx,edx
c00030d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030d5:	8b 30                	mov    esi,DWORD PTR [eax]
c00030d7:	75 0e                	jne    c00030e7 <create_chain+0x21>
c00030d9:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030dc:	85 ff                	test   edi,edi
c00030de:	74 39                	je     c0003119 <create_chain+0x53>
c00030e0:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030e3:	77 39                	ja     c000311e <create_chain+0x58>
c00030e5:	eb 32                	jmp    c0003119 <create_chain+0x53>
c00030e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030eb:	e8 e8 fc ff ff       	call   c0002dd8 <get_fat>
c00030f0:	89 c3                	mov    ebx,eax
c00030f2:	83 f8 01             	cmp    eax,0x1
c00030f5:	77 0a                	ja     c0003101 <create_chain+0x3b>
c00030f7:	bb 01 00 00 00       	mov    ebx,0x1
c00030fc:	e9 ba 01 00 00       	jmp    c00032bb <create_chain+0x1f5>
c0003101:	83 f8 ff             	cmp    eax,0xffffffff
c0003104:	0f 84 62 01 00 00    	je     c000326c <create_chain+0x1a6>
c000310a:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000310d:	0f 87 a8 01 00 00    	ja     c00032bb <create_chain+0x1f5>
c0003113:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003117:	eb 05                	jmp    c000311e <create_chain+0x58>
c0003119:	bf 01 00 00 00       	mov    edi,0x1
c000311e:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003122:	75 07                	jne    c000312b <create_chain+0x65>
c0003124:	31 db                	xor    ebx,ebx
c0003126:	e9 90 01 00 00       	jmp    c00032bb <create_chain+0x1f5>
c000312b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000312e:	75 74                	jne    c00031a4 <create_chain+0xde>
c0003130:	b9 01 00 00 00       	mov    ecx,0x1
c0003135:	89 fa                	mov    edx,edi
c0003137:	89 f0                	mov    eax,esi
c0003139:	e8 2d f9 ff ff       	call   c0002a6b <find_bitmap>
c000313e:	89 c3                	mov    ebx,eax
c0003140:	8d 40 ff             	lea    eax,[eax-0x1]
c0003143:	83 f8 fd             	cmp    eax,0xfffffffd
c0003146:	0f 87 6f 01 00 00    	ja     c00032bb <create_chain+0x1f5>
c000314c:	83 ec 0c             	sub    esp,0xc
c000314f:	b9 01 00 00 00       	mov    ecx,0x1
c0003154:	6a 01                	push   0x1
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 f0                	mov    eax,esi
c000315a:	e8 bf f9 ff ff       	call   c0002b1e <change_bitmap>
c000315f:	83 c4 10             	add    esp,0x10
c0003162:	83 f8 02             	cmp    eax,0x2
c0003165:	74 90                	je     c00030f7 <create_chain+0x31>
c0003167:	83 f8 01             	cmp    eax,0x1
c000316a:	0f 84 fc 00 00 00    	je     c000326c <create_chain+0x1a6>
c0003170:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003175:	75 09                	jne    c0003180 <create_chain+0xba>
c0003177:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000317b:	e9 0c 01 00 00       	jmp    c000328c <create_chain+0x1c6>
c0003180:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003184:	0f 85 e7 00 00 00    	jne    c0003271 <create_chain+0x1ab>
c000318a:	8d 57 01             	lea    edx,[edi+0x1]
c000318d:	39 da                	cmp    edx,ebx
c000318f:	0f 84 f7 00 00 00    	je     c000328c <create_chain+0x1c6>
c0003195:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003198:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000319c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000319f:	e9 cd 00 00 00       	jmp    c0003271 <create_chain+0x1ab>
c00031a4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00031a8:	75 41                	jne    c00031eb <create_chain+0x125>
c00031aa:	8d 5f 01             	lea    ebx,[edi+0x1]
c00031ad:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031b0:	77 05                	ja     c00031b7 <create_chain+0xf1>
c00031b2:	bb 02 00 00 00       	mov    ebx,0x2
c00031b7:	89 da                	mov    edx,ebx
c00031b9:	89 e8                	mov    eax,ebp
c00031bb:	e8 18 fc ff ff       	call   c0002dd8 <get_fat>
c00031c0:	83 f8 01             	cmp    eax,0x1
c00031c3:	0f 84 2e ff ff ff    	je     c00030f7 <create_chain+0x31>
c00031c9:	83 f8 ff             	cmp    eax,0xffffffff
c00031cc:	0f 84 9a 00 00 00    	je     c000326c <create_chain+0x1a6>
c00031d2:	85 c0                	test   eax,eax
c00031d4:	74 11                	je     c00031e7 <create_chain+0x121>
c00031d6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031d9:	83 f8 01             	cmp    eax,0x1
c00031dc:	76 0d                	jbe    c00031eb <create_chain+0x125>
c00031de:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031e1:	76 08                	jbe    c00031eb <create_chain+0x125>
c00031e3:	89 c7                	mov    edi,eax
c00031e5:	eb 04                	jmp    c00031eb <create_chain+0x125>
c00031e7:	85 db                	test   ebx,ebx
c00031e9:	75 38                	jne    c0003223 <create_chain+0x15d>
c00031eb:	89 fb                	mov    ebx,edi
c00031ed:	43                   	inc    ebx
c00031ee:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031f1:	77 0e                	ja     c0003201 <create_chain+0x13b>
c00031f3:	83 ff 01             	cmp    edi,0x1
c00031f6:	0f 86 28 ff ff ff    	jbe    c0003124 <create_chain+0x5e>
c00031fc:	bb 02 00 00 00       	mov    ebx,0x2
c0003201:	89 da                	mov    edx,ebx
c0003203:	89 e8                	mov    eax,ebp
c0003205:	e8 ce fb ff ff       	call   c0002dd8 <get_fat>
c000320a:	85 c0                	test   eax,eax
c000320c:	74 15                	je     c0003223 <create_chain+0x15d>
c000320e:	83 f8 01             	cmp    eax,0x1
c0003211:	0f 84 e0 fe ff ff    	je     c00030f7 <create_chain+0x31>
c0003217:	40                   	inc    eax
c0003218:	74 52                	je     c000326c <create_chain+0x1a6>
c000321a:	39 fb                	cmp    ebx,edi
c000321c:	75 cf                	jne    c00031ed <create_chain+0x127>
c000321e:	e9 01 ff ff ff       	jmp    c0003124 <create_chain+0x5e>
c0003223:	83 c9 ff             	or     ecx,0xffffffff
c0003226:	89 da                	mov    edx,ebx
c0003228:	89 f0                	mov    eax,esi
c000322a:	e8 a4 f9 ff ff       	call   c0002bd3 <put_fat>
c000322f:	85 c0                	test   eax,eax
c0003231:	75 32                	jne    c0003265 <create_chain+0x19f>
c0003233:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003238:	74 11                	je     c000324b <create_chain+0x185>
c000323a:	89 d9                	mov    ecx,ebx
c000323c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003240:	89 f0                	mov    eax,esi
c0003242:	e8 8c f9 ff ff       	call   c0002bd3 <put_fat>
c0003247:	85 c0                	test   eax,eax
c0003249:	75 1a                	jne    c0003265 <create_chain+0x19f>
c000324b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000324e:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003251:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003254:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003257:	39 d0                	cmp    eax,edx
c0003259:	77 04                	ja     c000325f <create_chain+0x199>
c000325b:	48                   	dec    eax
c000325c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000325f:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003263:	eb 56                	jmp    c00032bb <create_chain+0x1f5>
c0003265:	48                   	dec    eax
c0003266:	0f 85 8b fe ff ff    	jne    c00030f7 <create_chain+0x31>
c000326c:	83 cb ff             	or     ebx,0xffffffff
c000326f:	eb 4a                	jmp    c00032bb <create_chain+0x1f5>
c0003271:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003275:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003278:	41                   	inc    ecx
c0003279:	39 d9                	cmp    ecx,ebx
c000327b:	75 19                	jne    c0003296 <create_chain+0x1d0>
c000327d:	b9 02 00 00 00       	mov    ecx,0x2
c0003282:	85 d2                	test   edx,edx
c0003284:	74 03                	je     c0003289 <create_chain+0x1c3>
c0003286:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003289:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000328c:	85 c0                	test   eax,eax
c000328e:	0f 85 63 fe ff ff    	jne    c00030f7 <create_chain+0x31>
c0003294:	eb b5                	jmp    c000324b <create_chain+0x185>
c0003296:	85 d2                	test   edx,edx
c0003298:	75 07                	jne    c00032a1 <create_chain+0x1db>
c000329a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032a1:	89 d9                	mov    ecx,ebx
c00032a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a7:	89 e8                	mov    eax,ebp
c00032a9:	e8 bb fa ff ff       	call   c0002d69 <fill_last_frag>
c00032ae:	85 c0                	test   eax,eax
c00032b0:	75 b3                	jne    c0003265 <create_chain+0x19f>
c00032b2:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00032b9:	eb 90                	jmp    c000324b <create_chain+0x185>
c00032bb:	83 c4 1c             	add    esp,0x1c
c00032be:	89 d8                	mov    eax,ebx
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    

c00032c5 <remove_chain>:
c00032c5:	55                   	push   ebp
c00032c6:	57                   	push   edi
c00032c7:	56                   	push   esi
c00032c8:	53                   	push   ebx
c00032c9:	83 ec 1c             	sub    esp,0x1c
c00032cc:	83 fa 01             	cmp    edx,0x1
c00032cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032d3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032d5:	77 0a                	ja     c00032e1 <remove_chain+0x1c>
c00032d7:	b8 02 00 00 00       	mov    eax,0x2
c00032dc:	e9 24 01 00 00       	jmp    c0003405 <remove_chain+0x140>
c00032e1:	89 d6                	mov    esi,edx
c00032e3:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032e6:	76 ef                	jbe    c00032d7 <remove_chain+0x12>
c00032e8:	89 c7                	mov    edi,eax
c00032ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ef:	75 06                	jne    c00032f7 <remove_chain+0x32>
c00032f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032f5:	eb 54                	jmp    c000334b <remove_chain+0x86>
c00032f7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fa:	75 06                	jne    c0003302 <remove_chain+0x3d>
c00032fc:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003300:	74 ef                	je     c00032f1 <remove_chain+0x2c>
c0003302:	83 c9 ff             	or     ecx,0xffffffff
c0003305:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003309:	89 d8                	mov    eax,ebx
c000330b:	e8 c3 f8 ff ff       	call   c0002bd3 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	74 dd                	je     c00032f1 <remove_chain+0x2c>
c0003314:	e9 ec 00 00 00       	jmp    c0003405 <remove_chain+0x140>
c0003319:	83 f8 01             	cmp    eax,0x1
c000331c:	74 b9                	je     c00032d7 <remove_chain+0x12>
c000331e:	83 f8 ff             	cmp    eax,0xffffffff
c0003321:	74 6d                	je     c0003390 <remove_chain+0xcb>
c0003323:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003326:	75 6f                	jne    c0003397 <remove_chain+0xd2>
c0003328:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000332b:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000332e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003331:	39 d0                	cmp    eax,edx
c0003333:	73 08                	jae    c000333d <remove_chain+0x78>
c0003335:	40                   	inc    eax
c0003336:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000333a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000333d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003340:	39 e9                	cmp    ecx,ebp
c0003342:	75 64                	jne    c00033a8 <remove_chain+0xe3>
c0003344:	89 ee                	mov    esi,ebp
c0003346:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003349:	76 0f                	jbe    c000335a <remove_chain+0x95>
c000334b:	89 f2                	mov    edx,esi
c000334d:	89 f8                	mov    eax,edi
c000334f:	e8 84 fa ff ff       	call   c0002dd8 <get_fat>
c0003354:	89 c5                	mov    ebp,eax
c0003356:	85 c0                	test   eax,eax
c0003358:	75 bf                	jne    c0003319 <remove_chain+0x54>
c000335a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000335d:	0f 85 a0 00 00 00    	jne    c0003403 <remove_chain+0x13e>
c0003363:	eb 6c                	jmp    c00033d1 <remove_chain+0x10c>
c0003365:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003368:	84 c0                	test   al,al
c000336a:	75 7d                	jne    c00033e9 <remove_chain+0x124>
c000336c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000336f:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003373:	0f 84 86 00 00 00    	je     c00033ff <remove_chain+0x13a>
c0003379:	89 da                	mov    edx,ebx
c000337b:	89 f8                	mov    eax,edi
c000337d:	e8 56 fa ff ff       	call   c0002dd8 <get_fat>
c0003382:	83 f8 01             	cmp    eax,0x1
c0003385:	0f 86 4c ff ff ff    	jbe    c00032d7 <remove_chain+0x12>
c000338b:	83 f8 ff             	cmp    eax,0xffffffff
c000338e:	75 4e                	jne    c00033de <remove_chain+0x119>
c0003390:	b8 01 00 00 00       	mov    eax,0x1
c0003395:	eb 6e                	jmp    c0003405 <remove_chain+0x140>
c0003397:	31 c9                	xor    ecx,ecx
c0003399:	89 f2                	mov    edx,esi
c000339b:	89 d8                	mov    eax,ebx
c000339d:	e8 31 f8 ff ff       	call   c0002bd3 <put_fat>
c00033a2:	85 c0                	test   eax,eax
c00033a4:	74 82                	je     c0003328 <remove_chain+0x63>
c00033a6:	eb 5d                	jmp    c0003405 <remove_chain+0x140>
c00033a8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033ab:	75 1b                	jne    c00033c8 <remove_chain+0x103>
c00033ad:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00033b1:	89 d8                	mov    eax,ebx
c00033b3:	83 ec 0c             	sub    esp,0xc
c00033b6:	6a 00                	push   0x0
c00033b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00033bc:	e8 5d f7 ff ff       	call   c0002b1e <change_bitmap>
c00033c1:	83 c4 10             	add    esp,0x10
c00033c4:	85 c0                	test   eax,eax
c00033c6:	75 3d                	jne    c0003405 <remove_chain+0x140>
c00033c8:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033cc:	e9 73 ff ff ff       	jmp    c0003344 <remove_chain+0x7f>
c00033d1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d6:	75 8d                	jne    c0003365 <remove_chain+0xa0>
c00033d8:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033dc:	eb 25                	jmp    c0003403 <remove_chain+0x13e>
c00033de:	8d 53 01             	lea    edx,[ebx+0x1]
c00033e1:	89 c3                	mov    ebx,eax
c00033e3:	39 c2                	cmp    edx,eax
c00033e5:	74 88                	je     c000336f <remove_chain+0xaa>
c00033e7:	eb 1a                	jmp    c0003403 <remove_chain+0x13e>
c00033e9:	3c 03                	cmp    al,0x3
c00033eb:	75 16                	jne    c0003403 <remove_chain+0x13e>
c00033ed:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033f0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033f4:	77 0d                	ja     c0003403 <remove_chain+0x13e>
c00033f6:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033f9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033fd:	72 04                	jb     c0003403 <remove_chain+0x13e>
c00033ff:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003403:	31 c0                	xor    eax,eax
c0003405:	83 c4 1c             	add    esp,0x1c
c0003408:	5b                   	pop    ebx
c0003409:	5e                   	pop    esi
c000340a:	5f                   	pop    edi
c000340b:	5d                   	pop    ebp
c000340c:	c3                   	ret    

c000340d <dir_clear>:
c000340d:	55                   	push   ebp
c000340e:	57                   	push   edi
c000340f:	56                   	push   esi
c0003410:	89 c6                	mov    esi,eax
c0003412:	53                   	push   ebx
c0003413:	83 ec 1c             	sub    esp,0x1c
c0003416:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000341a:	e8 9d ed ff ff       	call   c00021bc <sync_window>
c000341f:	85 c0                	test   eax,eax
c0003421:	0f 85 de 00 00 00    	jne    c0003505 <dir_clear+0xf8>
c0003427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000342b:	89 f0                	mov    eax,esi
c000342d:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003430:	e8 d6 e8 ff ff       	call   c0001d0b <clst2sect>
c0003435:	b9 00 02 00 00       	mov    ecx,0x200
c000343a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000343e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003442:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003445:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003448:	89 e8                	mov    eax,ebp
c000344a:	31 d2                	xor    edx,edx
c000344c:	e8 b5 e6 ff ff       	call   c0001b06 <mem_set>
c0003451:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003455:	c1 e3 09             	shl    ebx,0x9
c0003458:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000345e:	76 1f                	jbe    c000347f <dir_clear+0x72>
c0003460:	bb 00 80 00 00       	mov    ebx,0x8000
c0003465:	eb 18                	jmp    c000347f <dir_clear+0x72>
c0003467:	83 ec 0c             	sub    esp,0xc
c000346a:	53                   	push   ebx
c000346b:	e8 35 4e 00 00       	call   c00082a5 <ff_memalloc>
c0003470:	83 c4 10             	add    esp,0x10
c0003473:	89 c7                	mov    edi,eax
c0003475:	85 c0                	test   eax,eax
c0003477:	0f 85 8f 00 00 00    	jne    c000350c <dir_clear+0xff>
c000347d:	d1 eb                	shr    ebx,1
c000347f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003485:	77 e0                	ja     c0003467 <dir_clear+0x5a>
c0003487:	31 db                	xor    ebx,ebx
c0003489:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348d:	39 d8                	cmp    eax,ebx
c000348f:	76 66                	jbe    c00034f7 <dir_clear+0xea>
c0003491:	83 ec 0c             	sub    esp,0xc
c0003494:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003498:	6a 01                	push   0x1
c000349a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000349e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00034a2:	55                   	push   ebp
c00034a3:	50                   	push   eax
c00034a4:	e8 94 e5 ff ff       	call   c0001a3d <disk_write>
c00034a9:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00034ae:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00034b3:	83 c4 20             	add    esp,0x20
c00034b6:	85 c0                	test   eax,eax
c00034b8:	75 3d                	jne    c00034f7 <dir_clear+0xea>
c00034ba:	43                   	inc    ebx
c00034bb:	eb cc                	jmp    c0003489 <dir_clear+0x7c>
c00034bd:	83 ec 0c             	sub    esp,0xc
c00034c0:	31 d2                	xor    edx,edx
c00034c2:	55                   	push   ebp
c00034c3:	89 d8                	mov    eax,ebx
c00034c5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034c9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034cd:	52                   	push   edx
c00034ce:	50                   	push   eax
c00034cf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034d3:	57                   	push   edi
c00034d4:	50                   	push   eax
c00034d5:	e8 63 e5 ff ff       	call   c0001a3d <disk_write>
c00034da:	83 c4 20             	add    esp,0x20
c00034dd:	85 c0                	test   eax,eax
c00034df:	75 0a                	jne    c00034eb <dir_clear+0xde>
c00034e1:	01 eb                	add    ebx,ebp
c00034e3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034e7:	39 d8                	cmp    eax,ebx
c00034e9:	77 d2                	ja     c00034bd <dir_clear+0xb0>
c00034eb:	83 ec 0c             	sub    esp,0xc
c00034ee:	57                   	push   edi
c00034ef:	e8 c7 4d 00 00       	call   c00082bb <ff_memfree>
c00034f4:	83 c4 10             	add    esp,0x10
c00034f7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034fb:	39 d8                	cmp    eax,ebx
c00034fd:	0f 95 c0             	setne  al
c0003500:	0f b6 c0             	movzx  eax,al
c0003503:	eb 19                	jmp    c000351e <dir_clear+0x111>
c0003505:	b8 01 00 00 00       	mov    eax,0x1
c000350a:	eb 12                	jmp    c000351e <dir_clear+0x111>
c000350c:	89 d9                	mov    ecx,ebx
c000350e:	31 d2                	xor    edx,edx
c0003510:	c1 eb 09             	shr    ebx,0x9
c0003513:	e8 ee e5 ff ff       	call   c0001b06 <mem_set>
c0003518:	89 dd                	mov    ebp,ebx
c000351a:	31 db                	xor    ebx,ebx
c000351c:	eb c5                	jmp    c00034e3 <dir_clear+0xd6>
c000351e:	83 c4 1c             	add    esp,0x1c
c0003521:	5b                   	pop    ebx
c0003522:	5e                   	pop    esi
c0003523:	5f                   	pop    edi
c0003524:	5d                   	pop    ebp
c0003525:	c3                   	ret    

c0003526 <dir_next>:
c0003526:	55                   	push   ebp
c0003527:	57                   	push   edi
c0003528:	56                   	push   esi
c0003529:	53                   	push   ebx
c000352a:	89 c3                	mov    ebx,eax
c000352c:	83 ec 1c             	sub    esp,0x1c
c000352f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003535:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003538:	8d 78 20             	lea    edi,[eax+0x20]
c000353b:	31 c0                	xor    eax,eax
c000353d:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003541:	0f 94 c0             	sete   al
c0003544:	48                   	dec    eax
c0003545:	25 00 00 20 f0       	and    eax,0xf0200000
c000354a:	05 00 00 00 10       	add    eax,0x10000000
c000354f:	39 f8                	cmp    eax,edi
c0003551:	77 0e                	ja     c0003561 <dir_next+0x3b>
c0003553:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000355a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003561:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003564:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003567:	b8 04 00 00 00       	mov    eax,0x4
c000356c:	89 ce                	mov    esi,ecx
c000356e:	09 d6                	or     esi,edx
c0003570:	0f 84 da 00 00 00    	je     c0003650 <dir_next+0x12a>
c0003576:	89 f8                	mov    eax,edi
c0003578:	25 ff 01 00 00       	and    eax,0x1ff
c000357d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003581:	0f 85 b9 00 00 00    	jne    c0003640 <dir_next+0x11a>
c0003587:	83 c2 01             	add    edx,0x1
c000358a:	83 d1 00             	adc    ecx,0x0
c000358d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003590:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003593:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003596:	85 d2                	test   edx,edx
c0003598:	75 29                	jne    c00035c3 <dir_next+0x9d>
c000359a:	89 fa                	mov    edx,edi
c000359c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00035a0:	c1 ea 05             	shr    edx,0x5
c00035a3:	39 c2                	cmp    edx,eax
c00035a5:	0f 82 95 00 00 00    	jb     c0003640 <dir_next+0x11a>
c00035ab:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00035b2:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00035b9:	b8 04 00 00 00       	mov    eax,0x4
c00035be:	e9 8d 00 00 00       	jmp    c0003650 <dir_next+0x12a>
c00035c3:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035c7:	89 f9                	mov    ecx,edi
c00035c9:	48                   	dec    eax
c00035ca:	c1 e9 09             	shr    ecx,0x9
c00035cd:	85 c8                	test   eax,ecx
c00035cf:	75 6f                	jne    c0003640 <dir_next+0x11a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	e8 00 f8 ff ff       	call   c0002dd8 <get_fat>
c00035d8:	89 c6                	mov    esi,eax
c00035da:	83 f8 01             	cmp    eax,0x1
c00035dd:	77 07                	ja     c00035e6 <dir_next+0xc0>
c00035df:	b8 02 00 00 00       	mov    eax,0x2
c00035e4:	eb 6a                	jmp    c0003650 <dir_next+0x12a>
c00035e6:	83 f8 ff             	cmp    eax,0xffffffff
c00035e9:	75 07                	jne    c00035f2 <dir_next+0xcc>
c00035eb:	b8 01 00 00 00       	mov    eax,0x1
c00035f0:	eb 5e                	jmp    c0003650 <dir_next+0x12a>
c00035f2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035f5:	77 37                	ja     c000362e <dir_next+0x108>
c00035f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035fc:	74 ad                	je     c00035ab <dir_next+0x85>
c00035fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003601:	89 d8                	mov    eax,ebx
c0003603:	e8 be fa ff ff       	call   c00030c6 <create_chain>
c0003608:	89 c6                	mov    esi,eax
c000360a:	b8 07 00 00 00       	mov    eax,0x7
c000360f:	85 f6                	test   esi,esi
c0003611:	74 3d                	je     c0003650 <dir_next+0x12a>
c0003613:	83 fe 01             	cmp    esi,0x1
c0003616:	74 c7                	je     c00035df <dir_next+0xb9>
c0003618:	83 fe ff             	cmp    esi,0xffffffff
c000361b:	74 ce                	je     c00035eb <dir_next+0xc5>
c000361d:	89 f2                	mov    edx,esi
c000361f:	89 e8                	mov    eax,ebp
c0003621:	e8 e7 fd ff ff       	call   c000340d <dir_clear>
c0003626:	85 c0                	test   eax,eax
c0003628:	75 c1                	jne    c00035eb <dir_next+0xc5>
c000362a:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000362e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003631:	89 f2                	mov    edx,esi
c0003633:	89 e8                	mov    eax,ebp
c0003635:	e8 d1 e6 ff ff       	call   c0001d0b <clst2sect>
c000363a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000363d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003644:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003647:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000364b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000364e:	31 c0                	xor    eax,eax
c0003650:	83 c4 1c             	add    esp,0x1c
c0003653:	5b                   	pop    ebx
c0003654:	5e                   	pop    esi
c0003655:	5f                   	pop    edi
c0003656:	5d                   	pop    ebp
c0003657:	c3                   	ret    

c0003658 <load_xdir>:
c0003658:	55                   	push   ebp
c0003659:	57                   	push   edi
c000365a:	56                   	push   esi
c000365b:	89 c6                	mov    esi,eax
c000365d:	53                   	push   ebx
c000365e:	83 ec 1c             	sub    esp,0x1c
c0003661:	8b 00                	mov    eax,DWORD PTR [eax]
c0003663:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003666:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003669:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366c:	e8 df eb ff ff       	call   c0002250 <move_window>
c0003671:	89 c3                	mov    ebx,eax
c0003673:	85 c0                	test   eax,eax
c0003675:	0f 85 0c 01 00 00    	jne    c0003787 <load_xdir+0x12f>
c000367b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000367e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003681:	0f 85 fb 00 00 00    	jne    c0003782 <load_xdir+0x12a>
c0003687:	89 f8                	mov    eax,edi
c0003689:	b9 20 00 00 00       	mov    ecx,0x20
c000368e:	e8 5e e4 ff ff       	call   c0001af1 <mem_cpy>
c0003693:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003697:	40                   	inc    eax
c0003698:	c1 e0 05             	shl    eax,0x5
c000369b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000369f:	83 e8 60             	sub    eax,0x60
c00036a2:	3d 00 02 00 00       	cmp    eax,0x200
c00036a7:	0f 87 d5 00 00 00    	ja     c0003782 <load_xdir+0x12a>
c00036ad:	31 d2                	xor    edx,edx
c00036af:	89 f0                	mov    eax,esi
c00036b1:	e8 70 fe ff ff       	call   c0003526 <dir_next>
c00036b6:	89 c3                	mov    ebx,eax
c00036b8:	83 f8 04             	cmp    eax,0x4
c00036bb:	0f 84 c1 00 00 00    	je     c0003782 <load_xdir+0x12a>
c00036c1:	85 c0                	test   eax,eax
c00036c3:	0f 85 be 00 00 00    	jne    c0003787 <load_xdir+0x12f>
c00036c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cc:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d1:	e8 7a eb ff ff       	call   c0002250 <move_window>
c00036d6:	89 c3                	mov    ebx,eax
c00036d8:	85 c0                	test   eax,eax
c00036da:	0f 85 a7 00 00 00    	jne    c0003787 <load_xdir+0x12f>
c00036e0:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e3:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036e6:	0f 85 96 00 00 00    	jne    c0003782 <load_xdir+0x12a>
c00036ec:	8d 47 20             	lea    eax,[edi+0x20]
c00036ef:	b9 20 00 00 00       	mov    ecx,0x20
c00036f4:	e8 f8 e3 ff ff       	call   c0001af1 <mem_cpy>
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036ff:	b9 0f 00 00 00       	mov    ecx,0xf
c0003704:	83 c0 2c             	add    eax,0x2c
c0003707:	f7 f1                	div    ecx
c0003709:	c1 e0 05             	shl    eax,0x5
c000370c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003710:	77 70                	ja     c0003782 <load_xdir+0x12a>
c0003712:	bd 40 00 00 00       	mov    ebp,0x40
c0003717:	31 d2                	xor    edx,edx
c0003719:	89 f0                	mov    eax,esi
c000371b:	e8 06 fe ff ff       	call   c0003526 <dir_next>
c0003720:	89 c3                	mov    ebx,eax
c0003722:	83 f8 04             	cmp    eax,0x4
c0003725:	74 5b                	je     c0003782 <load_xdir+0x12a>
c0003727:	85 c0                	test   eax,eax
c0003729:	75 5c                	jne    c0003787 <load_xdir+0x12f>
c000372b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000372e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003731:	8b 06                	mov    eax,DWORD PTR [esi]
c0003733:	e8 18 eb ff ff       	call   c0002250 <move_window>
c0003738:	89 c3                	mov    ebx,eax
c000373a:	85 c0                	test   eax,eax
c000373c:	75 49                	jne    c0003787 <load_xdir+0x12f>
c000373e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003741:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003744:	75 3c                	jne    c0003782 <load_xdir+0x12a>
c0003746:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000374c:	77 0d                	ja     c000375b <load_xdir+0x103>
c000374e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003751:	b9 20 00 00 00       	mov    ecx,0x20
c0003756:	e8 96 e3 ff ff       	call   c0001af1 <mem_cpy>
c000375b:	83 c5 20             	add    ebp,0x20
c000375e:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003762:	77 b3                	ja     c0003717 <load_xdir+0xbf>
c0003764:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000376a:	77 1b                	ja     c0003787 <load_xdir+0x12f>
c000376c:	89 f8                	mov    eax,edi
c000376e:	e8 cd e7 ff ff       	call   c0001f40 <xdir_sum>
c0003773:	89 c1                	mov    ecx,eax
c0003775:	8d 47 02             	lea    eax,[edi+0x2]
c0003778:	e8 f5 e2 ff ff       	call   c0001a72 <ld_word>
c000377d:	66 39 c1             	cmp    cx,ax
c0003780:	74 05                	je     c0003787 <load_xdir+0x12f>
c0003782:	bb 02 00 00 00       	mov    ebx,0x2
c0003787:	83 c4 1c             	add    esp,0x1c
c000378a:	89 d8                	mov    eax,ebx
c000378c:	5b                   	pop    ebx
c000378d:	5e                   	pop    esi
c000378e:	5f                   	pop    edi
c000378f:	5d                   	pop    ebp
c0003790:	c3                   	ret    

c0003791 <load_obj_xdir>:
c0003791:	53                   	push   ebx
c0003792:	89 c3                	mov    ebx,eax
c0003794:	83 ec 08             	sub    esp,0x8
c0003797:	8b 02                	mov    eax,DWORD PTR [edx]
c0003799:	89 03                	mov    DWORD PTR [ebx],eax
c000379b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000379e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00037a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00037a4:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00037a7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00037aa:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00037b1:	30 c0                	xor    al,al
c00037b3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037ba:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00037bd:	89 d8                	mov    eax,ebx
c00037bf:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037c2:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037c5:	e8 04 f8 ff ff       	call   c0002fce <dir_sdi>
c00037ca:	85 c0                	test   eax,eax
c00037cc:	75 0b                	jne    c00037d9 <load_obj_xdir+0x48>
c00037ce:	89 d8                	mov    eax,ebx
c00037d0:	83 c4 08             	add    esp,0x8
c00037d3:	5b                   	pop    ebx
c00037d4:	e9 7f fe ff ff       	jmp    c0003658 <load_xdir>
c00037d9:	83 c4 08             	add    esp,0x8
c00037dc:	5b                   	pop    ebx
c00037dd:	c3                   	ret    

c00037de <dir_read>:
c00037de:	55                   	push   ebp
c00037df:	bd 04 00 00 00       	mov    ebp,0x4
c00037e4:	57                   	push   edi
c00037e5:	56                   	push   esi
c00037e6:	be ff ff ff ff       	mov    esi,0xffffffff
c00037eb:	53                   	push   ebx
c00037ec:	89 c3                	mov    ebx,eax
c00037ee:	83 ec 1c             	sub    esp,0x1c
c00037f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037f5:	8b 38                	mov    edi,DWORD PTR [eax]
c00037f7:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037fc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037ff:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003802:	89 c8                	mov    eax,ecx
c0003804:	09 d0                	or     eax,edx
c0003806:	0f 84 25 01 00 00    	je     c0003931 <dir_read+0x153>
c000380c:	89 f8                	mov    eax,edi
c000380e:	e8 3d ea ff ff       	call   c0002250 <move_window>
c0003813:	89 c5                	mov    ebp,eax
c0003815:	85 c0                	test   eax,eax
c0003817:	0f 85 23 01 00 00    	jne    c0003940 <dir_read+0x162>
c000381d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003820:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003822:	84 c9                	test   cl,cl
c0003824:	0f 84 11 01 00 00    	je     c000393b <dir_read+0x15d>
c000382a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000382d:	75 48                	jne    c0003877 <dir_read+0x99>
c000382f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003834:	74 10                	je     c0003846 <dir_read+0x68>
c0003836:	80 f9 83             	cmp    cl,0x83
c0003839:	0f 85 dd 00 00 00    	jne    c000391c <dir_read+0x13e>
c000383f:	31 ed                	xor    ebp,ebp
c0003841:	e9 08 01 00 00       	jmp    c000394e <dir_read+0x170>
c0003846:	80 f9 85             	cmp    cl,0x85
c0003849:	0f 85 cd 00 00 00    	jne    c000391c <dir_read+0x13e>
c000384f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003852:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003855:	89 d8                	mov    eax,ebx
c0003857:	e8 fc fd ff ff       	call   c0003658 <load_xdir>
c000385c:	89 c5                	mov    ebp,eax
c000385e:	85 c0                	test   eax,eax
c0003860:	0f 85 da 00 00 00    	jne    c0003940 <dir_read+0x162>
c0003866:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003869:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000386c:	83 e0 3f             	and    eax,0x3f
c000386f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003872:	e9 d7 00 00 00       	jmp    c000394e <dir_read+0x170>
c0003877:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000387a:	83 e0 3f             	and    eax,0x3f
c000387d:	80 f9 2e             	cmp    cl,0x2e
c0003880:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003884:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003887:	0f 84 8a 00 00 00    	je     c0003917 <dir_read+0x139>
c000388d:	80 f9 e5             	cmp    cl,0xe5
c0003890:	0f 84 81 00 00 00    	je     c0003917 <dir_read+0x139>
c0003896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000389a:	83 e0 1f             	and    eax,0x1f
c000389d:	83 f8 08             	cmp    eax,0x8
c00038a0:	0f 94 c0             	sete   al
c00038a3:	0f b6 c0             	movzx  eax,al
c00038a6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038aa:	75 6b                	jne    c0003917 <dir_read+0x139>
c00038ac:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00038b1:	75 44                	jne    c00038f7 <dir_read+0x119>
c00038b3:	f6 c1 40             	test   cl,0x40
c00038b6:	74 12                	je     c00038ca <dir_read+0xec>
c00038b8:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038bb:	83 e1 bf             	and    ecx,0xffffffbf
c00038be:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038c2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038c5:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038c8:	eb 06                	jmp    c00038d0 <dir_read+0xf2>
c00038ca:	89 f0                	mov    eax,esi
c00038cc:	38 c8                	cmp    al,cl
c00038ce:	75 47                	jne    c0003917 <dir_read+0x139>
c00038d0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038d4:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d9:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038dc:	75 3e                	jne    c000391c <dir_read+0x13e>
c00038de:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038e2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038e5:	e8 8a e4 ff ff       	call   c0001d74 <pick_lfn>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 2e                	je     c000391c <dir_read+0x13e>
c00038ee:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038f2:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038f5:	eb 25                	jmp    c000391c <dir_read+0x13e>
c00038f7:	89 f0                	mov    eax,esi
c00038f9:	84 c0                	test   al,al
c00038fb:	75 11                	jne    c000390e <dir_read+0x130>
c00038fd:	89 d0                	mov    eax,edx
c00038ff:	e8 2a e6 ff ff       	call   c0001f2e <sum_sfn>
c0003904:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003908:	0f 84 31 ff ff ff    	je     c000383f <dir_read+0x61>
c000390e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003915:	eb 37                	jmp    c000394e <dir_read+0x170>
c0003917:	be ff ff ff ff       	mov    esi,0xffffffff
c000391c:	31 d2                	xor    edx,edx
c000391e:	89 d8                	mov    eax,ebx
c0003920:	e8 01 fc ff ff       	call   c0003526 <dir_next>
c0003925:	89 c5                	mov    ebp,eax
c0003927:	85 c0                	test   eax,eax
c0003929:	0f 84 cd fe ff ff    	je     c00037fc <dir_read+0x1e>
c000392f:	eb 0f                	jmp    c0003940 <dir_read+0x162>
c0003931:	85 ed                	test   ebp,ebp
c0003933:	0f 84 06 ff ff ff    	je     c000383f <dir_read+0x61>
c0003939:	eb 05                	jmp    c0003940 <dir_read+0x162>
c000393b:	bd 04 00 00 00       	mov    ebp,0x4
c0003940:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003947:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000394e:	83 c4 1c             	add    esp,0x1c
c0003951:	89 e8                	mov    eax,ebp
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	5f                   	pop    edi
c0003956:	5d                   	pop    ebp
c0003957:	c3                   	ret    

c0003958 <dir_alloc>:
c0003958:	55                   	push   ebp
c0003959:	89 d5                	mov    ebp,edx
c000395b:	57                   	push   edi
c000395c:	31 d2                	xor    edx,edx
c000395e:	56                   	push   esi
c000395f:	53                   	push   ebx
c0003960:	89 c3                	mov    ebx,eax
c0003962:	83 ec 0c             	sub    esp,0xc
c0003965:	8b 38                	mov    edi,DWORD PTR [eax]
c0003967:	e8 62 f6 ff ff       	call   c0002fce <dir_sdi>
c000396c:	85 c0                	test   eax,eax
c000396e:	75 4e                	jne    c00039be <dir_alloc+0x66>
c0003970:	31 f6                	xor    esi,esi
c0003972:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003975:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003978:	89 f8                	mov    eax,edi
c000397a:	e8 d1 e8 ff ff       	call   c0002250 <move_window>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 3b                	jne    c00039be <dir_alloc+0x66>
c0003983:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003986:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003989:	8a 12                	mov    dl,BYTE PTR [edx]
c000398b:	75 07                	jne    c0003994 <dir_alloc+0x3c>
c000398d:	f7 d2                	not    edx
c000398f:	c0 ea 07             	shr    dl,0x7
c0003992:	eb 0d                	jmp    c00039a1 <dir_alloc+0x49>
c0003994:	84 d2                	test   dl,dl
c0003996:	0f 94 c1             	sete   cl
c0003999:	80 fa e5             	cmp    dl,0xe5
c000399c:	0f 94 c2             	sete   dl
c000399f:	09 ca                	or     edx,ecx
c00039a1:	84 d2                	test   dl,dl
c00039a3:	74 07                	je     c00039ac <dir_alloc+0x54>
c00039a5:	46                   	inc    esi
c00039a6:	39 ee                	cmp    esi,ebp
c00039a8:	75 04                	jne    c00039ae <dir_alloc+0x56>
c00039aa:	eb 1c                	jmp    c00039c8 <dir_alloc+0x70>
c00039ac:	31 f6                	xor    esi,esi
c00039ae:	ba 01 00 00 00       	mov    edx,0x1
c00039b3:	89 d8                	mov    eax,ebx
c00039b5:	e8 6c fb ff ff       	call   c0003526 <dir_next>
c00039ba:	85 c0                	test   eax,eax
c00039bc:	74 b4                	je     c0003972 <dir_alloc+0x1a>
c00039be:	83 f8 04             	cmp    eax,0x4
c00039c1:	75 05                	jne    c00039c8 <dir_alloc+0x70>
c00039c3:	b8 07 00 00 00       	mov    eax,0x7
c00039c8:	83 c4 0c             	add    esp,0xc
c00039cb:	5b                   	pop    ebx
c00039cc:	5e                   	pop    esi
c00039cd:	5f                   	pop    edi
c00039ce:	5d                   	pop    ebp
c00039cf:	c3                   	ret    

c00039d0 <store_xdir>:
c00039d0:	55                   	push   ebp
c00039d1:	57                   	push   edi
c00039d2:	89 c7                	mov    edi,eax
c00039d4:	56                   	push   esi
c00039d5:	53                   	push   ebx
c00039d6:	83 ec 0c             	sub    esp,0xc
c00039d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00039db:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039de:	89 e8                	mov    eax,ebp
c00039e0:	e8 5b e5 ff ff       	call   c0001f40 <xdir_sum>
c00039e5:	0f b7 d0             	movzx  edx,ax
c00039e8:	8d 45 02             	lea    eax,[ebp+0x2]
c00039eb:	e8 f4 e0 ff ff       	call   c0001ae4 <st_word>
c00039f0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039f4:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039f7:	89 f8                	mov    eax,edi
c00039f9:	e8 d0 f5 ff ff       	call   c0002fce <dir_sdi>
c00039fe:	89 c6                	mov    esi,eax
c0003a00:	85 f6                	test   esi,esi
c0003a02:	75 3d                	jne    c0003a41 <store_xdir+0x71>
c0003a04:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003a07:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003a0a:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a0c:	e8 3f e8 ff ff       	call   c0002250 <move_window>
c0003a11:	89 c6                	mov    esi,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	75 2a                	jne    c0003a41 <store_xdir+0x71>
c0003a17:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003a1a:	b9 20 00 00 00       	mov    ecx,0x20
c0003a1f:	89 ea                	mov    edx,ebp
c0003a21:	e8 cb e0 ff ff       	call   c0001af1 <mem_cpy>
c0003a26:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a28:	85 db                	test   ebx,ebx
c0003a2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a2e:	74 11                	je     c0003a41 <store_xdir+0x71>
c0003a30:	31 d2                	xor    edx,edx
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	83 c5 20             	add    ebp,0x20
c0003a37:	e8 ea fa ff ff       	call   c0003526 <dir_next>
c0003a3c:	4b                   	dec    ebx
c0003a3d:	89 c6                	mov    esi,eax
c0003a3f:	eb bf                	jmp    c0003a00 <store_xdir+0x30>
c0003a41:	89 f0                	mov    eax,esi
c0003a43:	83 fe 02             	cmp    esi,0x2
c0003a46:	76 05                	jbe    c0003a4d <store_xdir+0x7d>
c0003a48:	b8 02 00 00 00       	mov    eax,0x2
c0003a4d:	83 c4 0c             	add    esp,0xc
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	5d                   	pop    ebp
c0003a54:	c3                   	ret    

c0003a55 <dir_remove>:
c0003a55:	57                   	push   edi
c0003a56:	56                   	push   esi
c0003a57:	53                   	push   ebx
c0003a58:	89 c3                	mov    ebx,eax
c0003a5a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a5d:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a5f:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a62:	83 fa ff             	cmp    edx,0xffffffff
c0003a65:	74 09                	je     c0003a70 <dir_remove+0x1b>
c0003a67:	e8 62 f5 ff ff       	call   c0002fce <dir_sdi>
c0003a6c:	85 c0                	test   eax,eax
c0003a6e:	75 41                	jne    c0003ab1 <dir_remove+0x5c>
c0003a70:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a73:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a76:	89 f0                	mov    eax,esi
c0003a78:	e8 d3 e7 ff ff       	call   c0002250 <move_window>
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 26                	jne    c0003aa7 <dir_remove+0x52>
c0003a81:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a84:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a87:	75 05                	jne    c0003a8e <dir_remove+0x39>
c0003a89:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a8c:	eb 03                	jmp    c0003a91 <dir_remove+0x3c>
c0003a8e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a91:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a95:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a98:	73 17                	jae    c0003ab1 <dir_remove+0x5c>
c0003a9a:	31 d2                	xor    edx,edx
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 83 fa ff ff       	call   c0003526 <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 c9                	je     c0003a70 <dir_remove+0x1b>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_remove+0x5c>
c0003aac:	b8 02 00 00 00       	mov    eax,0x2
c0003ab1:	5b                   	pop    ebx
c0003ab2:	5e                   	pop    esi
c0003ab3:	5f                   	pop    edi
c0003ab4:	c3                   	ret    

c0003ab5 <create_name>:
c0003ab5:	55                   	push   ebp
c0003ab6:	89 d5                	mov    ebp,edx
c0003ab8:	57                   	push   edi
c0003ab9:	89 c7                	mov    edi,eax
c0003abb:	56                   	push   esi
c0003abc:	31 f6                	xor    esi,esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 3c             	sub    esp,0x3c
c0003ac2:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ac4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ac8:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003acd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ad1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ad5:	e8 72 e0 ff ff       	call   c0001b4c <tchar2uni>
c0003ada:	89 c3                	mov    ebx,eax
c0003adc:	83 f8 ff             	cmp    eax,0xffffffff
c0003adf:	75 0a                	jne    c0003aeb <create_name+0x36>
c0003ae1:	b8 06 00 00 00       	mov    eax,0x6
c0003ae6:	e9 9e 02 00 00       	jmp    c0003d89 <create_name+0x2d4>
c0003aeb:	3d ff ff 00 00       	cmp    eax,0xffff
c0003af0:	76 0c                	jbe    c0003afe <create_name+0x49>
c0003af2:	c1 e8 10             	shr    eax,0x10
c0003af5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003af9:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003afd:	46                   	inc    esi
c0003afe:	66 83 fb 1f          	cmp    bx,0x1f
c0003b02:	76 4f                	jbe    c0003b53 <create_name+0x9e>
c0003b04:	66 83 fb 5c          	cmp    bx,0x5c
c0003b08:	74 35                	je     c0003b3f <create_name+0x8a>
c0003b0a:	66 83 fb 2f          	cmp    bx,0x2f
c0003b0e:	74 2f                	je     c0003b3f <create_name+0x8a>
c0003b10:	66 83 fb 7f          	cmp    bx,0x7f
c0003b14:	77 11                	ja     c0003b27 <create_name+0x72>
c0003b16:	0f b7 d3             	movzx  edx,bx
c0003b19:	b8 32 5e 02 c0       	mov    eax,0xc0025e32
c0003b1e:	e8 11 e0 ff ff       	call   c0001b34 <chk_chr>
c0003b23:	85 c0                	test   eax,eax
c0003b25:	75 ba                	jne    c0003ae1 <create_name+0x2c>
c0003b27:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b2d:	77 b2                	ja     c0003ae1 <create_name+0x2c>
c0003b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b33:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b37:	46                   	inc    esi
c0003b38:	eb 97                	jmp    c0003ad1 <create_name+0x1c>
c0003b3a:	40                   	inc    eax
c0003b3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b43:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b45:	80 fa 2f             	cmp    dl,0x2f
c0003b48:	74 f0                	je     c0003b3a <create_name+0x85>
c0003b4a:	80 fa 5c             	cmp    dl,0x5c
c0003b4d:	74 eb                	je     c0003b3a <create_name+0x85>
c0003b4f:	31 db                	xor    ebx,ebx
c0003b51:	eb 02                	jmp    c0003b55 <create_name+0xa0>
c0003b53:	b3 04                	mov    bl,0x4
c0003b55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b59:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	74 18                	je     c0003b78 <create_name+0xc3>
c0003b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b64:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b69:	66 83 f8 20          	cmp    ax,0x20
c0003b6d:	74 06                	je     c0003b75 <create_name+0xc0>
c0003b6f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b73:	75 03                	jne    c0003b78 <create_name+0xc3>
c0003b75:	4e                   	dec    esi
c0003b76:	eb e4                	jmp    c0003b5c <create_name+0xa7>
c0003b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7c:	31 ed                	xor    ebp,ebp
c0003b7e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b84:	85 f6                	test   esi,esi
c0003b86:	0f 84 55 ff ff ff    	je     c0003ae1 <create_name+0x2c>
c0003b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b90:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b93:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b97:	66 83 f8 20          	cmp    ax,0x20
c0003b9b:	75 04                	jne    c0003ba1 <create_name+0xec>
c0003b9d:	89 d5                	mov    ebp,edx
c0003b9f:	eb eb                	jmp    c0003b8c <create_name+0xd7>
c0003ba1:	85 ed                	test   ebp,ebp
c0003ba3:	75 06                	jne    c0003bab <create_name+0xf6>
c0003ba5:	66 83 f8 2e          	cmp    ax,0x2e
c0003ba9:	75 08                	jne    c0003bb3 <create_name+0xfe>
c0003bab:	83 cb 03             	or     ebx,0x3
c0003bae:	eb 03                	jmp    c0003bb3 <create_name+0xfe>
c0003bb0:	4e                   	dec    esi
c0003bb1:	74 0c                	je     c0003bbf <create_name+0x10a>
c0003bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bb7:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003bbd:	75 f1                	jne    c0003bb0 <create_name+0xfb>
c0003bbf:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bc4:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003bc7:	ba 20 00 00 00       	mov    edx,0x20
c0003bcc:	e8 35 df ff ff       	call   c0001b06 <mem_set>
c0003bd1:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bd9:	31 c9                	xor    ecx,ecx
c0003bdb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003be0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003be3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003beb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	0f 84 30 01 00 00    	je     c0003d28 <create_name+0x273>
c0003bf8:	66 83 fd 20          	cmp    bp,0x20
c0003bfc:	74 10                	je     c0003c0e <create_name+0x159>
c0003bfe:	66 83 fd 2e          	cmp    bp,0x2e
c0003c02:	75 13                	jne    c0003c17 <create_name+0x162>
c0003c04:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c08:	0f 84 6b 01 00 00    	je     c0003d79 <create_name+0x2c4>
c0003c0e:	83 cb 03             	or     ebx,0x3
c0003c11:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003c15:	eb c9                	jmp    c0003be0 <create_name+0x12b>
c0003c17:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003c1b:	73 0b                	jae    c0003c28 <create_name+0x173>
c0003c1d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c21:	75 47                	jne    c0003c6a <create_name+0x1b5>
c0003c23:	e9 51 01 00 00       	jmp    c0003d79 <create_name+0x2c4>
c0003c28:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c2d:	75 10                	jne    c0003c3f <create_name+0x18a>
c0003c2f:	83 cb 03             	or     ebx,0x3
c0003c32:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3a:	e9 e9 00 00 00       	jmp    c0003d28 <create_name+0x273>
c0003c3f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c43:	74 0d                	je     c0003c52 <create_name+0x19d>
c0003c45:	83 cb 03             	or     ebx,0x3
c0003c48:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c4c:	0f 87 d6 00 00 00    	ja     c0003d28 <create_name+0x273>
c0003c52:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c57:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c5b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c63:	b9 08 00 00 00       	mov    ecx,0x8
c0003c68:	eb a7                	jmp    c0003c11 <create_name+0x15c>
c0003c6a:	66 83 fd 7f          	cmp    bp,0x7f
c0003c6e:	76 68                	jbe    c0003cd8 <create_name+0x223>
c0003c70:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c74:	88 da                	mov    dl,bl
c0003c76:	83 ca 02             	or     edx,0x2
c0003c79:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c7d:	50                   	push   eax
c0003c7e:	50                   	push   eax
c0003c7f:	68 b5 01 00 00       	push   0x1b5
c0003c84:	55                   	push   ebp
c0003c85:	e8 48 46 00 00       	call   c00082d2 <ff_uni2oem>
c0003c8a:	83 c4 10             	add    esp,0x10
c0003c8d:	89 c5                	mov    ebp,eax
c0003c8f:	a8 80                	test   al,0x80
c0003c91:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c95:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c99:	74 0c                	je     c0003ca7 <create_name+0x1f2>
c0003c9b:	83 e5 7f             	and    ebp,0x7f
c0003c9e:	0f b6 ad 80 5d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda280]
c0003ca5:	eb 2a                	jmp    c0003cd1 <create_name+0x21c>
c0003ca7:	66 3d ff 00          	cmp    ax,0xff
c0003cab:	76 24                	jbe    c0003cd1 <create_name+0x21c>
c0003cad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003cb1:	48                   	dec    eax
c0003cb2:	39 c8                	cmp    eax,ecx
c0003cb4:	77 0c                	ja     c0003cc2 <create_name+0x20d>
c0003cb6:	83 cb 03             	or     ebx,0x3
c0003cb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003cbd:	e9 4f ff ff ff       	jmp    c0003c11 <create_name+0x15c>
c0003cc2:	89 e8                	mov    eax,ebp
c0003cc4:	88 d3                	mov    bl,dl
c0003cc6:	66 c1 e8 08          	shr    ax,0x8
c0003cca:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cce:	41                   	inc    ecx
c0003ccf:	eb 4b                	jmp    c0003d1c <create_name+0x267>
c0003cd1:	88 d3                	mov    bl,dl
c0003cd3:	66 85 ed             	test   bp,bp
c0003cd6:	74 19                	je     c0003cf1 <create_name+0x23c>
c0003cd8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cdc:	0f b7 d5             	movzx  edx,bp
c0003cdf:	b8 3b 5e 02 c0       	mov    eax,0xc0025e3b
c0003ce4:	e8 4b de ff ff       	call   c0001b34 <chk_chr>
c0003ce9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ced:	85 c0                	test   eax,eax
c0003cef:	74 0a                	je     c0003cfb <create_name+0x246>
c0003cf1:	83 cb 03             	or     ebx,0x3
c0003cf4:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cf9:	eb 21                	jmp    c0003d1c <create_name+0x267>
c0003cfb:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cfe:	66 83 f8 19          	cmp    ax,0x19
c0003d02:	77 07                	ja     c0003d0b <create_name+0x256>
c0003d04:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003d09:	eb 11                	jmp    c0003d1c <create_name+0x267>
c0003d0b:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003d0e:	66 83 f8 19          	cmp    ax,0x19
c0003d12:	77 08                	ja     c0003d1c <create_name+0x267>
c0003d14:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003d19:	83 ed 20             	sub    ebp,0x20
c0003d1c:	89 e8                	mov    eax,ebp
c0003d1e:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d22:	41                   	inc    ecx
c0003d23:	e9 e9 fe ff ff       	jmp    c0003c11 <create_name+0x15c>
c0003d28:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d2c:	75 04                	jne    c0003d32 <create_name+0x27d>
c0003d2e:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d32:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d37:	75 05                	jne    c0003d3e <create_name+0x289>
c0003d39:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d3e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d42:	83 e0 0c             	and    eax,0xc
c0003d45:	3c 0c                	cmp    al,0xc
c0003d47:	74 0b                	je     c0003d54 <create_name+0x29f>
c0003d49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d4d:	83 e0 03             	and    eax,0x3
c0003d50:	3c 03                	cmp    al,0x3
c0003d52:	75 05                	jne    c0003d59 <create_name+0x2a4>
c0003d54:	83 cb 02             	or     ebx,0x2
c0003d57:	eb 19                	jmp    c0003d72 <create_name+0x2bd>
c0003d59:	f6 c3 02             	test   bl,0x2
c0003d5c:	75 14                	jne    c0003d72 <create_name+0x2bd>
c0003d5e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d63:	74 03                	je     c0003d68 <create_name+0x2b3>
c0003d65:	83 cb 10             	or     ebx,0x10
c0003d68:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d6d:	74 03                	je     c0003d72 <create_name+0x2bd>
c0003d6f:	83 cb 08             	or     ebx,0x8
c0003d72:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d75:	31 c0                	xor    eax,eax
c0003d77:	eb 10                	jmp    c0003d89 <create_name+0x2d4>
c0003d79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d7e:	0f 85 ce fe ff ff    	jne    c0003c52 <create_name+0x19d>
c0003d84:	e9 a6 fe ff ff       	jmp    c0003c2f <create_name+0x17a>
c0003d89:	83 c4 3c             	add    esp,0x3c
c0003d8c:	5b                   	pop    ebx
c0003d8d:	5e                   	pop    esi
c0003d8e:	5f                   	pop    edi
c0003d8f:	5d                   	pop    ebp
c0003d90:	c3                   	ret    

c0003d91 <xname_sum>:
c0003d91:	56                   	push   esi
c0003d92:	53                   	push   ebx
c0003d93:	89 c6                	mov    esi,eax
c0003d95:	51                   	push   ecx
c0003d96:	31 db                	xor    ebx,ebx
c0003d98:	83 c6 02             	add    esi,0x2
c0003d9b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d9f:	66 85 c0             	test   ax,ax
c0003da2:	74 1f                	je     c0003dc3 <xname_sum+0x32>
c0003da4:	83 ec 0c             	sub    esp,0xc
c0003da7:	66 d1 cb             	ror    bx,1
c0003daa:	50                   	push   eax
c0003dab:	e8 1e 46 00 00       	call   c00083ce <ff_wtoupper>
c0003db0:	83 c4 10             	add    esp,0x10
c0003db3:	0f b6 d0             	movzx  edx,al
c0003db6:	66 c1 e8 08          	shr    ax,0x8
c0003dba:	01 d3                	add    ebx,edx
c0003dbc:	66 d1 cb             	ror    bx,1
c0003dbf:	01 c3                	add    ebx,eax
c0003dc1:	eb d5                	jmp    c0003d98 <xname_sum+0x7>
c0003dc3:	89 d8                	mov    eax,ebx
c0003dc5:	5a                   	pop    edx
c0003dc6:	5b                   	pop    ebx
c0003dc7:	5e                   	pop    esi
c0003dc8:	c3                   	ret    

c0003dc9 <create_xdir>:
c0003dc9:	55                   	push   ebp
c0003dca:	b9 40 00 00 00       	mov    ecx,0x40
c0003dcf:	57                   	push   edi
c0003dd0:	bd 01 00 00 00       	mov    ebp,0x1
c0003dd5:	56                   	push   esi
c0003dd6:	31 ff                	xor    edi,edi
c0003dd8:	53                   	push   ebx
c0003dd9:	be 40 00 00 00       	mov    esi,0x40
c0003dde:	89 c3                	mov    ebx,eax
c0003de0:	83 ec 1c             	sub    esp,0x1c
c0003de3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003de7:	31 d2                	xor    edx,edx
c0003de9:	e8 18 dd ff ff       	call   c0001b06 <mem_set>
c0003dee:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003df1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003df5:	31 c9                	xor    ecx,ecx
c0003df7:	8d 46 01             	lea    eax,[esi+0x1]
c0003dfa:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dfe:	83 c6 02             	add    esi,0x2
c0003e01:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003e05:	66 85 ed             	test   bp,bp
c0003e08:	74 12                	je     c0003e1c <create_xdir+0x53>
c0003e0a:	0f b6 c1             	movzx  eax,cl
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003e15:	66 83 fd 01          	cmp    bp,0x1
c0003e19:	80 d9 ff             	sbb    cl,0xff
c0003e1c:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003e1f:	0f b7 d5             	movzx  edx,bp
c0003e22:	83 c6 02             	add    esi,0x2
c0003e25:	e8 ba dc ff ff       	call   c0001ae4 <st_word>
c0003e2a:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e30:	75 d3                	jne    c0003e05 <create_xdir+0x3c>
c0003e32:	8d 47 01             	lea    eax,[edi+0x1]
c0003e35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e39:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e3d:	0f b6 c1             	movzx  eax,cl
c0003e40:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e45:	74 07                	je     c0003e4e <create_xdir+0x85>
c0003e47:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e4c:	eb a9                	jmp    c0003df7 <create_xdir+0x2e>
c0003e4e:	8d 47 02             	lea    eax,[edi+0x2]
c0003e51:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e54:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e57:	89 d0                	mov    eax,edx
c0003e59:	e8 33 ff ff ff       	call   c0003d91 <xname_sum>
c0003e5e:	83 c4 1c             	add    esp,0x1c
c0003e61:	0f b7 d0             	movzx  edx,ax
c0003e64:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e67:	5b                   	pop    ebx
c0003e68:	5e                   	pop    esi
c0003e69:	5f                   	pop    edi
c0003e6a:	5d                   	pop    ebp
c0003e6b:	e9 74 dc ff ff       	jmp    c0001ae4 <st_word>

c0003e70 <cmp_lfn>:
c0003e70:	55                   	push   ebp
c0003e71:	57                   	push   edi
c0003e72:	89 d7                	mov    edi,edx
c0003e74:	56                   	push   esi
c0003e75:	53                   	push   ebx
c0003e76:	83 ec 1c             	sub    esp,0x1c
c0003e79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e7d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e80:	e8 ed db ff ff       	call   c0001a72 <ld_word>
c0003e85:	66 85 c0             	test   ax,ax
c0003e88:	74 07                	je     c0003e91 <cmp_lfn+0x21>
c0003e8a:	31 c0                	xor    eax,eax
c0003e8c:	e9 9a 00 00 00       	jmp    c0003f2b <cmp_lfn+0xbb>
c0003e91:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e93:	bd 01 00 00 00       	mov    ebp,0x1
c0003e98:	83 e3 3f             	and    ebx,0x3f
c0003e9b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003ea3:	4b                   	dec    ebx
c0003ea4:	6b db 0d             	imul   ebx,ebx,0xd
c0003ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003eab:	0f b6 80 00 5e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda200]
c0003eb2:	01 f8                	add    eax,edi
c0003eb4:	e8 b9 db ff ff       	call   c0001a72 <ld_word>
c0003eb9:	66 85 ed             	test   bp,bp
c0003ebc:	89 c6                	mov    esi,eax
c0003ebe:	74 3c                	je     c0003efc <cmp_lfn+0x8c>
c0003ec0:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ec6:	77 c2                	ja     c0003e8a <cmp_lfn+0x1a>
c0003ec8:	83 ec 0c             	sub    esp,0xc
c0003ecb:	0f b7 c0             	movzx  eax,ax
c0003ece:	50                   	push   eax
c0003ecf:	e8 fa 44 00 00       	call   c00083ce <ff_wtoupper>
c0003ed4:	89 c5                	mov    ebp,eax
c0003ed6:	8d 43 01             	lea    eax,[ebx+0x1]
c0003ed9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003edd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ee1:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee8:	e8 e1 44 00 00       	call   c00083ce <ff_wtoupper>
c0003eed:	83 c4 10             	add    esp,0x10
c0003ef0:	39 c5                	cmp    ebp,eax
c0003ef2:	75 96                	jne    c0003e8a <cmp_lfn+0x1a>
c0003ef4:	89 f5                	mov    ebp,esi
c0003ef6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003efa:	eb 04                	jmp    c0003f00 <cmp_lfn+0x90>
c0003efc:	66 46                	inc    si
c0003efe:	75 8a                	jne    c0003e8a <cmp_lfn+0x1a>
c0003f00:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003f04:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003f09:	75 9c                	jne    c0003ea7 <cmp_lfn+0x37>
c0003f0b:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003f0e:	74 16                	je     c0003f26 <cmp_lfn+0xb6>
c0003f10:	66 85 ed             	test   bp,bp
c0003f13:	74 11                	je     c0003f26 <cmp_lfn+0xb6>
c0003f15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003f19:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003f1e:	0f 94 c0             	sete   al
c0003f21:	0f b6 c0             	movzx  eax,al
c0003f24:	eb 05                	jmp    c0003f2b <cmp_lfn+0xbb>
c0003f26:	b8 01 00 00 00       	mov    eax,0x1
c0003f2b:	83 c4 1c             	add    esp,0x1c
c0003f2e:	5b                   	pop    ebx
c0003f2f:	5e                   	pop    esi
c0003f30:	5f                   	pop    edi
c0003f31:	5d                   	pop    ebp
c0003f32:	c3                   	ret    

c0003f33 <dir_find>:
c0003f33:	55                   	push   ebp
c0003f34:	31 d2                	xor    edx,edx
c0003f36:	57                   	push   edi
c0003f37:	56                   	push   esi
c0003f38:	53                   	push   ebx
c0003f39:	89 c3                	mov    ebx,eax
c0003f3b:	83 ec 1c             	sub    esp,0x1c
c0003f3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f40:	e8 89 f0 ff ff       	call   c0002fce <dir_sdi>
c0003f45:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f48:	85 c0                	test   eax,eax
c0003f4a:	0f 85 9e 01 00 00    	jne    c00040ee <dir_find+0x1bb>
c0003f50:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f53:	0f 85 8d 00 00 00    	jne    c0003fe6 <dir_find+0xb3>
c0003f59:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f5c:	e8 30 fe ff ff       	call   c0003d91 <xname_sum>
c0003f61:	89 c7                	mov    edi,eax
c0003f63:	31 d2                	xor    edx,edx
c0003f65:	89 d8                	mov    eax,ebx
c0003f67:	e8 72 f8 ff ff       	call   c00037de <dir_read>
c0003f6c:	85 c0                	test   eax,eax
c0003f6e:	0f 85 5e 01 00 00    	jne    c00040d2 <dir_find+0x19f>
c0003f74:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f77:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f7a:	e8 f3 da ff ff       	call   c0001a72 <ld_word>
c0003f7f:	66 39 f8             	cmp    ax,di
c0003f82:	75 df                	jne    c0003f63 <dir_find+0x30>
c0003f84:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f87:	31 ed                	xor    ebp,ebp
c0003f89:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f8d:	ba 40 00 00 00       	mov    edx,0x40
c0003f92:	89 e9                	mov    ecx,ebp
c0003f94:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f98:	0f 84 42 01 00 00    	je     c00040e0 <dir_find+0x1ad>
c0003f9e:	f6 c2 1f             	test   dl,0x1f
c0003fa1:	75 03                	jne    c0003fa6 <dir_find+0x73>
c0003fa3:	83 c2 02             	add    edx,0x2
c0003fa6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003faa:	89 d0                	mov    eax,edx
c0003fac:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003faf:	e8 be da ff ff       	call   c0001a72 <ld_word>
c0003fb4:	83 ec 0c             	sub    esp,0xc
c0003fb7:	0f b7 c0             	movzx  eax,ax
c0003fba:	50                   	push   eax
c0003fbb:	e8 0e 44 00 00       	call   c00083ce <ff_wtoupper>
c0003fc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fc4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fc7:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fce:	e8 fb 43 00 00       	call   c00083ce <ff_wtoupper>
c0003fd3:	83 c4 10             	add    esp,0x10
c0003fd6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fda:	75 87                	jne    c0003f63 <dir_find+0x30>
c0003fdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fe0:	45                   	inc    ebp
c0003fe1:	83 c2 02             	add    edx,0x2
c0003fe4:	eb ac                	jmp    c0003f92 <dir_find+0x5f>
c0003fe6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fed:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003ff2:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ffa:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ffd:	89 f0                	mov    eax,esi
c0003fff:	e8 4c e2 ff ff       	call   c0002250 <move_window>
c0004004:	85 c0                	test   eax,eax
c0004006:	0f 85 c6 00 00 00    	jne    c00040d2 <dir_find+0x19f>
c000400c:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000400f:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004012:	84 c9                	test   cl,cl
c0004014:	0f 84 bd 00 00 00    	je     c00040d7 <dir_find+0x1a4>
c000401a:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000401d:	88 d0                	mov    al,dl
c000401f:	83 e0 3f             	and    eax,0x3f
c0004022:	80 f9 e5             	cmp    cl,0xe5
c0004025:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004028:	0f 84 87 00 00 00    	je     c00040b5 <dir_find+0x182>
c000402e:	80 e2 08             	and    dl,0x8
c0004031:	74 06                	je     c0004039 <dir_find+0x106>
c0004033:	3c 0f                	cmp    al,0xf
c0004035:	75 7e                	jne    c00040b5 <dir_find+0x182>
c0004037:	eb 04                	jmp    c000403d <dir_find+0x10a>
c0004039:	3c 0f                	cmp    al,0xf
c000403b:	75 4c                	jne    c0004089 <dir_find+0x156>
c000403d:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004041:	75 7e                	jne    c00040c1 <dir_find+0x18e>
c0004043:	f6 c1 40             	test   cl,0x40
c0004046:	74 12                	je     c000405a <dir_find+0x127>
c0004048:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000404b:	83 e1 bf             	and    ecx,0xffffffbf
c000404e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004052:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004055:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004058:	eb 06                	jmp    c0004060 <dir_find+0x12d>
c000405a:	89 f8                	mov    eax,edi
c000405c:	38 c8                	cmp    al,cl
c000405e:	75 5c                	jne    c00040bc <dir_find+0x189>
c0004060:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004064:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004069:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000406c:	75 53                	jne    c00040c1 <dir_find+0x18e>
c000406e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004072:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004075:	89 ea                	mov    edx,ebp
c0004077:	e8 f4 fd ff ff       	call   c0003e70 <cmp_lfn>
c000407c:	85 c0                	test   eax,eax
c000407e:	74 41                	je     c00040c1 <dir_find+0x18e>
c0004080:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004084:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004087:	eb 38                	jmp    c00040c1 <dir_find+0x18e>
c0004089:	89 f8                	mov    eax,edi
c000408b:	84 c0                	test   al,al
c000408d:	75 0d                	jne    c000409c <dir_find+0x169>
c000408f:	89 e8                	mov    eax,ebp
c0004091:	e8 98 de ff ff       	call   c0001f2e <sum_sfn>
c0004096:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000409a:	74 52                	je     c00040ee <dir_find+0x1bb>
c000409c:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00040a0:	75 13                	jne    c00040b5 <dir_find+0x182>
c00040a2:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00040a5:	b9 0b 00 00 00       	mov    ecx,0xb
c00040aa:	89 e8                	mov    eax,ebp
c00040ac:	e8 60 da ff ff       	call   c0001b11 <mem_cmp>
c00040b1:	85 c0                	test   eax,eax
c00040b3:	74 39                	je     c00040ee <dir_find+0x1bb>
c00040b5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040bc:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040c1:	31 d2                	xor    edx,edx
c00040c3:	89 d8                	mov    eax,ebx
c00040c5:	e8 5c f4 ff ff       	call   c0003526 <dir_next>
c00040ca:	85 c0                	test   eax,eax
c00040cc:	0f 84 25 ff ff ff    	je     c0003ff7 <dir_find+0xc4>
c00040d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d5:	eb 17                	jmp    c00040ee <dir_find+0x1bb>
c00040d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040de:	eb 0e                	jmp    c00040ee <dir_find+0x1bb>
c00040e0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040e3:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040e8:	0f 85 75 fe ff ff    	jne    c0003f63 <dir_find+0x30>
c00040ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040f1:	83 c4 1c             	add    esp,0x1c
c00040f4:	5b                   	pop    ebx
c00040f5:	5e                   	pop    esi
c00040f6:	5f                   	pop    edi
c00040f7:	5d                   	pop    ebp
c00040f8:	c3                   	ret    

c00040f9 <dir_register>:
c00040f9:	55                   	push   ebp
c00040fa:	57                   	push   edi
c00040fb:	56                   	push   esi
c00040fc:	be 06 00 00 00       	mov    esi,0x6
c0004101:	53                   	push   ebx
c0004102:	83 ec 6c             	sub    esp,0x6c
c0004105:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004109:	0f 85 62 02 00 00    	jne    c0004371 <dir_register+0x278>
c000410f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004111:	31 ff                	xor    edi,edi
c0004113:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004116:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000411b:	74 03                	je     c0004120 <dir_register+0x27>
c000411d:	47                   	inc    edi
c000411e:	eb f6                	jmp    c0004116 <dir_register+0x1d>
c0004120:	89 c3                	mov    ebx,eax
c0004122:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004126:	0f 85 e1 00 00 00    	jne    c000420d <dir_register+0x114>
c000412c:	83 c7 0e             	add    edi,0xe
c000412f:	b9 0f 00 00 00       	mov    ecx,0xf
c0004134:	89 f8                	mov    eax,edi
c0004136:	31 d2                	xor    edx,edx
c0004138:	f7 f1                	div    ecx
c000413a:	8d 50 02             	lea    edx,[eax+0x2]
c000413d:	89 c7                	mov    edi,eax
c000413f:	89 d8                	mov    eax,ebx
c0004141:	e8 12 f8 ff ff       	call   c0003958 <dir_alloc>
c0004146:	89 c6                	mov    esi,eax
c0004148:	85 c0                	test   eax,eax
c000414a:	0f 85 21 02 00 00    	jne    c0004371 <dir_register+0x278>
c0004150:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004156:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004159:	c1 e7 05             	shl    edi,0x5
c000415c:	29 f8                	sub    eax,edi
c000415e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004161:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004164:	a8 04                	test   al,0x4
c0004166:	0f 84 91 00 00 00    	je     c00041fd <dir_register+0x104>
c000416c:	83 e0 fb             	and    eax,0xfffffffb
c000416f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004172:	89 d8                	mov    eax,ebx
c0004174:	e8 25 ec ff ff       	call   c0002d9e <fill_first_frag>
c0004179:	85 c0                	test   eax,eax
c000417b:	0f 85 ee 01 00 00    	jne    c000436f <dir_register+0x276>
c0004181:	83 c9 ff             	or     ecx,0xffffffff
c0004184:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004187:	89 d8                	mov    eax,ebx
c0004189:	e8 db eb ff ff       	call   c0002d69 <fill_last_frag>
c000418e:	85 c0                	test   eax,eax
c0004190:	0f 85 d9 01 00 00    	jne    c000436f <dir_register+0x276>
c0004196:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419a:	74 61                	je     c00041fd <dir_register+0x104>
c000419c:	89 da                	mov    edx,ebx
c000419e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041a2:	e8 ea f5 ff ff       	call   c0003791 <load_obj_xdir>
c00041a7:	85 c0                	test   eax,eax
c00041a9:	0f 85 c0 01 00 00    	jne    c000436f <dir_register+0x276>
c00041af:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00041b3:	31 c9                	xor    ecx,ecx
c00041b5:	c1 e2 09             	shl    edx,0x9
c00041b8:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00041bb:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00041be:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041c1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041c7:	83 c0 38             	add    eax,0x38
c00041ca:	e8 1c d9 ff ff       	call   c0001aeb <st_qword>
c00041cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041d2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041d5:	83 c0 28             	add    eax,0x28
c00041d8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041db:	e8 0b d9 ff ff       	call   c0001aeb <st_qword>
c00041e0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041e6:	83 c8 01             	or     eax,0x1
c00041e9:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f0:	e8 db f7 ff ff       	call   c00039d0 <store_xdir>
c00041f5:	85 c0                	test   eax,eax
c00041f7:	0f 85 72 01 00 00    	jne    c000436f <dir_register+0x276>
c00041fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004200:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004203:	e8 c1 fb ff ff       	call   c0003dc9 <create_xdir>
c0004208:	e9 64 01 00 00       	jmp    c0004371 <dir_register+0x278>
c000420d:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004210:	b9 0c 00 00 00       	mov    ecx,0xc
c0004215:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004219:	89 c2                	mov    edx,eax
c000421b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000421f:	e8 cd d8 ff ff       	call   c0001af1 <mem_cpy>
c0004224:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004229:	74 58                	je     c0004283 <dir_register+0x18a>
c000422b:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000422f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004237:	83 ec 0c             	sub    esp,0xc
c000423a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000423d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004241:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004245:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004249:	e8 24 dc ff ff       	call   c0001e72 <gen_numname>
c000424e:	89 d8                	mov    eax,ebx
c0004250:	e8 de fc ff ff       	call   c0003f33 <dir_find>
c0004255:	83 c4 10             	add    esp,0x10
c0004258:	89 c6                	mov    esi,eax
c000425a:	85 c0                	test   eax,eax
c000425c:	75 15                	jne    c0004273 <dir_register+0x17a>
c000425e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004262:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004267:	75 ce                	jne    c0004237 <dir_register+0x13e>
c0004269:	be 07 00 00 00       	mov    esi,0x7
c000426e:	e9 fe 00 00 00       	jmp    c0004371 <dir_register+0x278>
c0004273:	83 f8 04             	cmp    eax,0x4
c0004276:	0f 85 f5 00 00 00    	jne    c0004371 <dir_register+0x278>
c000427c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004280:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004283:	b9 01 00 00 00       	mov    ecx,0x1
c0004288:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000428d:	74 0f                	je     c000429e <dir_register+0x1a5>
c000428f:	b9 0d 00 00 00       	mov    ecx,0xd
c0004294:	8d 47 0c             	lea    eax,[edi+0xc]
c0004297:	31 d2                	xor    edx,edx
c0004299:	f7 f1                	div    ecx
c000429b:	8d 48 01             	lea    ecx,[eax+0x1]
c000429e:	89 ca                	mov    edx,ecx
c00042a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042a4:	89 d8                	mov    eax,ebx
c00042a6:	e8 ad f6 ff ff       	call   c0003958 <dir_alloc>
c00042ab:	89 c6                	mov    esi,eax
c00042ad:	85 c0                	test   eax,eax
c00042af:	0f 85 bc 00 00 00    	jne    c0004371 <dir_register+0x278>
c00042b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042b9:	49                   	dec    ecx
c00042ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042be:	74 6a                	je     c000432a <dir_register+0x231>
c00042c0:	89 c8                	mov    eax,ecx
c00042c2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042c5:	c1 e0 05             	shl    eax,0x5
c00042c8:	29 c2                	sub    edx,eax
c00042ca:	89 d8                	mov    eax,ebx
c00042cc:	e8 fd ec ff ff       	call   c0002fce <dir_sdi>
c00042d1:	89 c6                	mov    esi,eax
c00042d3:	85 c0                	test   eax,eax
c00042d5:	0f 85 96 00 00 00    	jne    c0004371 <dir_register+0x278>
c00042db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042df:	e8 4a dc ff ff       	call   c0001f2e <sum_sfn>
c00042e4:	0f b6 f8             	movzx  edi,al
c00042e7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042ea:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042ed:	89 e8                	mov    eax,ebp
c00042ef:	e8 5c df ff ff       	call   c0002250 <move_window>
c00042f4:	89 c6                	mov    esi,eax
c00042f6:	85 c0                	test   eax,eax
c00042f8:	75 77                	jne    c0004371 <dir_register+0x278>
c00042fa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 ec 0c             	sub    esp,0xc
c0004305:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004308:	57                   	push   edi
c0004309:	e8 e0 da ff ff       	call   c0001dee <put_lfn>
c000430e:	31 d2                	xor    edx,edx
c0004310:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004314:	89 d8                	mov    eax,ebx
c0004316:	e8 0b f2 ff ff       	call   c0003526 <dir_next>
c000431b:	83 c4 10             	add    esp,0x10
c000431e:	89 c6                	mov    esi,eax
c0004320:	85 c0                	test   eax,eax
c0004322:	75 4d                	jne    c0004371 <dir_register+0x278>
c0004324:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004328:	75 bd                	jne    c00042e7 <dir_register+0x1ee>
c000432a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000432d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004330:	89 e8                	mov    eax,ebp
c0004332:	e8 19 df ff ff       	call   c0002250 <move_window>
c0004337:	89 c6                	mov    esi,eax
c0004339:	85 c0                	test   eax,eax
c000433b:	75 34                	jne    c0004371 <dir_register+0x278>
c000433d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004340:	b9 20 00 00 00       	mov    ecx,0x20
c0004345:	31 d2                	xor    edx,edx
c0004347:	e8 ba d7 ff ff       	call   c0001b06 <mem_set>
c000434c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000434f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004353:	b9 0b 00 00 00       	mov    ecx,0xb
c0004358:	e8 94 d7 ff ff       	call   c0001af1 <mem_cpy>
c000435d:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004360:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004363:	83 e0 18             	and    eax,0x18
c0004366:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004369:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000436d:	eb 02                	jmp    c0004371 <dir_register+0x278>
c000436f:	89 c6                	mov    esi,eax
c0004371:	83 c4 6c             	add    esp,0x6c
c0004374:	89 f0                	mov    eax,esi
c0004376:	5b                   	pop    ebx
c0004377:	5e                   	pop    esi
c0004378:	5f                   	pop    edi
c0004379:	5d                   	pop    ebp
c000437a:	c3                   	ret    

c000437b <sync_fs>:
c000437b:	56                   	push   esi
c000437c:	53                   	push   ebx
c000437d:	53                   	push   ebx
c000437e:	89 c3                	mov    ebx,eax
c0004380:	e8 37 de ff ff       	call   c00021bc <sync_window>
c0004385:	85 c0                	test   eax,eax
c0004387:	0f 85 b1 00 00 00    	jne    c000443e <sync_fs+0xc3>
c000438d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004390:	0f 85 8e 00 00 00    	jne    c0004424 <sync_fs+0xa9>
c0004396:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000439a:	0f 85 84 00 00 00    	jne    c0004424 <sync_fs+0xa9>
c00043a0:	b9 00 02 00 00       	mov    ecx,0x200
c00043a5:	8d 73 54             	lea    esi,[ebx+0x54]
c00043a8:	31 d2                	xor    edx,edx
c00043aa:	89 f0                	mov    eax,esi
c00043ac:	e8 55 d7 ff ff       	call   c0001b06 <mem_set>
c00043b1:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00043b7:	ba 55 aa 00 00       	mov    edx,0xaa55
c00043bc:	e8 23 d7 ff ff       	call   c0001ae4 <st_word>
c00043c1:	ba 52 52 61 41       	mov    edx,0x41615252
c00043c6:	89 f0                	mov    eax,esi
c00043c8:	e8 1b d7 ff ff       	call   c0001ae8 <st_dword>
c00043cd:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043d3:	ba 72 72 41 61       	mov    edx,0x61417272
c00043d8:	e8 0b d7 ff ff       	call   c0001ae8 <st_dword>
c00043dd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043e0:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043e6:	e8 fd d6 ff ff       	call   c0001ae8 <st_dword>
c00043eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ee:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043f4:	e8 ef d6 ff ff       	call   c0001ae8 <st_dword>
c00043f9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ff:	83 c0 01             	add    eax,0x1
c0004402:	83 d2 00             	adc    edx,0x0
c0004405:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004408:	83 ec 0c             	sub    esp,0xc
c000440b:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000440e:	6a 01                	push   0x1
c0004410:	52                   	push   edx
c0004411:	50                   	push   eax
c0004412:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004416:	56                   	push   esi
c0004417:	50                   	push   eax
c0004418:	e8 20 d6 ff ff       	call   c0001a3d <disk_write>
c000441d:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004421:	83 c4 20             	add    esp,0x20
c0004424:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004428:	51                   	push   ecx
c0004429:	6a 00                	push   0x0
c000442b:	6a 00                	push   0x0
c000442d:	50                   	push   eax
c000442e:	e8 20 d6 ff ff       	call   c0001a53 <disk_ioctl>
c0004433:	83 c4 10             	add    esp,0x10
c0004436:	85 c0                	test   eax,eax
c0004438:	0f 95 c0             	setne  al
c000443b:	0f b6 c0             	movzx  eax,al
c000443e:	5a                   	pop    edx
c000443f:	5b                   	pop    ebx
c0004440:	5e                   	pop    esi
c0004441:	c3                   	ret    

c0004442 <create_partition>:
c0004442:	55                   	push   ebp
c0004443:	0f b6 c0             	movzx  eax,al
c0004446:	57                   	push   edi
c0004447:	56                   	push   esi
c0004448:	53                   	push   ebx
c0004449:	83 ec 60             	sub    esp,0x60
c000444c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004450:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004454:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004458:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000445c:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004460:	50                   	push   eax
c0004461:	6a 01                	push   0x1
c0004463:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004467:	e8 e7 d5 ff ff       	call   c0001a53 <disk_ioctl>
c000446c:	83 c4 10             	add    esp,0x10
c000446f:	85 c0                	test   eax,eax
c0004471:	74 0a                	je     c000447d <create_partition+0x3b>
c0004473:	b8 01 00 00 00       	mov    eax,0x1
c0004478:	e9 67 05 00 00       	jmp    c00049e4 <create_partition+0x5a2>
c000447d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004481:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004485:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004489:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000448d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004492:	0f 86 ed 03 00 00    	jbe    c0004885 <create_partition+0x443>
c0004498:	83 c0 df             	add    eax,0xffffffdf
c000449b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00044a3:	83 d2 ff             	adc    edx,0xffffffff
c00044a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00044aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00044ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044b6:	83 c0 bd             	add    eax,0xffffffbd
c00044b9:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044c0:	83 d2 ff             	adc    edx,0xffffffff
c00044c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044c7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044d3:	be 22 00 00 00       	mov    esi,0x22
c00044d8:	31 ff                	xor    edi,edi
c00044da:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044e2:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044ea:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044f2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044f6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044fc:	75 0e                	jne    c000450c <create_partition+0xca>
c00044fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004503:	31 d2                	xor    edx,edx
c0004505:	89 d8                	mov    eax,ebx
c0004507:	e8 fa d5 ff ff       	call   c0001b06 <mem_set>
c000450c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004510:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004518:	0b 04 24             	or     eax,DWORD PTR [esp]
c000451b:	0f 84 23 01 00 00    	je     c0004644 <create_partition+0x202>
c0004521:	89 f0                	mov    eax,esi
c0004523:	89 fa                	mov    edx,edi
c0004525:	05 ff 07 00 00       	add    eax,0x7ff
c000452a:	83 d2 00             	adc    edx,0x0
c000452d:	89 c1                	mov    ecx,eax
c000452f:	89 d7                	mov    edi,edx
c0004531:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004537:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000453b:	89 ce                	mov    esi,ecx
c000453d:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004541:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004545:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004549:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000454c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004550:	89 04 24             	mov    DWORD PTR [esp],eax
c0004553:	b8 64 00 00 00       	mov    eax,0x64
c0004558:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000455b:	b8 00 00 00 00       	mov    eax,0x0
c0004560:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004564:	72 41                	jb     c00045a7 <create_partition+0x165>
c0004566:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000456a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000456e:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004572:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004577:	01 c1                	add    ecx,eax
c0004579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000457d:	f7 24 24             	mul    DWORD PTR [esp]
c0004580:	6a 00                	push   0x0
c0004582:	01 ca                	add    edx,ecx
c0004584:	6a 64                	push   0x64
c0004586:	52                   	push   edx
c0004587:	50                   	push   eax
c0004588:	e8 ef ed 01 00       	call   c002337c <__udivdi3>
c000458d:	83 c4 10             	add    esp,0x10
c0004590:	05 ff 07 00 00       	add    eax,0x7ff
c0004595:	83 d2 00             	adc    edx,0x0
c0004598:	89 c1                	mov    ecx,eax
c000459a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000459e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00045a4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00045a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00045aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00045ae:	01 f0                	add    eax,esi
c00045b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00045b4:	11 fa                	adc    edx,edi
c00045b6:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00045ba:	19 d1                	sbb    ecx,edx
c00045bc:	73 2e                	jae    c00045ec <create_partition+0x1aa>
c00045be:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045c2:	89 f8                	mov    eax,edi
c00045c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045cb:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045cf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045d7:	73 6b                	jae    c0004644 <create_partition+0x202>
c00045d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045e1:	29 f0                	sub    eax,esi
c00045e3:	19 fa                	sbb    edx,edi
c00045e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00045e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045f3:	74 4f                	je     c0004644 <create_partition+0x202>
c00045f5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045f8:	b9 10 00 00 00       	mov    ecx,0x10
c00045fd:	ba 10 5e 02 c0       	mov    edx,0xc0025e10
c0004602:	e8 ea d4 ff ff       	call   c0001af1 <mem_cpy>
c0004607:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000460b:	b9 10 00 00 00       	mov    ecx,0x10
c0004610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004614:	e8 2c db ff ff       	call   c0002145 <make_rand>
c0004619:	89 f2                	mov    edx,esi
c000461b:	89 f9                	mov    ecx,edi
c000461d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004621:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004625:	e8 c1 d4 ff ff       	call   c0001aeb <st_qword>
c000462a:	03 34 24             	add    esi,DWORD PTR [esp]
c000462d:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004631:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004635:	89 f2                	mov    edx,esi
c0004637:	89 f9                	mov    ecx,edi
c0004639:	83 c2 ff             	add    edx,0xffffffff
c000463c:	83 d1 ff             	adc    ecx,0xffffffff
c000463f:	e8 a7 d4 ff ff       	call   c0001aeb <st_qword>
c0004644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004648:	83 e8 80             	sub    eax,0xffffff80
c000464b:	89 c5                	mov    ebp,eax
c000464d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004651:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004657:	75 6b                	jne    c00046c4 <create_partition+0x282>
c0004659:	45                   	inc    ebp
c000465a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000465e:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004663:	e8 39 da ff ff       	call   c00020a1 <crc32>
c0004668:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000466e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004672:	75 e5                	jne    c0004659 <create_partition+0x217>
c0004674:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004678:	31 d2                	xor    edx,edx
c000467a:	83 ec 0c             	sub    esp,0xc
c000467d:	c1 ed 09             	shr    ebp,0x9
c0004680:	6a 01                	push   0x1
c0004682:	8d 45 02             	lea    eax,[ebp+0x2]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 ac d3 ff ff       	call   c0001a3d <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 d7 fd ff ff    	jne    c0004473 <create_partition+0x31>
c000469c:	83 ec 0c             	sub    esp,0xc
c000469f:	31 d2                	xor    edx,edx
c00046a1:	6a 01                	push   0x1
c00046a3:	89 e8                	mov    eax,ebp
c00046a5:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00046a9:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00046ad:	52                   	push   edx
c00046ae:	50                   	push   eax
c00046af:	53                   	push   ebx
c00046b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046b4:	e8 84 d3 ff ff       	call   c0001a3d <disk_write>
c00046b9:	83 c4 20             	add    esp,0x20
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 af fd ff ff    	jne    c0004473 <create_partition+0x31>
c00046c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046cc:	3d 00 40 00 00       	cmp    eax,0x4000
c00046d1:	74 0d                	je     c00046e0 <create_partition+0x29e>
c00046d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046db:	e9 12 fe ff ff       	jmp    c00044f2 <create_partition+0xb0>
c00046e0:	31 d2                	xor    edx,edx
c00046e2:	b9 00 02 00 00       	mov    ecx,0x200
c00046e7:	89 d8                	mov    eax,ebx
c00046e9:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046ec:	e8 15 d4 ff ff       	call   c0001b06 <mem_set>
c00046f1:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c00046fe:	89 d8                	mov    eax,ebx
c0004700:	e8 ec d3 ff ff       	call   c0001af1 <mem_cpy>
c0004705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004709:	8d 43 58             	lea    eax,[ebx+0x58]
c000470c:	f7 d2                	not    edx
c000470e:	e8 d5 d3 ff ff       	call   c0001ae8 <st_dword>
c0004713:	8d 43 18             	lea    eax,[ebx+0x18]
c0004716:	31 c9                	xor    ecx,ecx
c0004718:	89 04 24             	mov    DWORD PTR [esp],eax
c000471b:	ba 01 00 00 00       	mov    edx,0x1
c0004720:	e8 c6 d3 ff ff       	call   c0001aeb <st_qword>
c0004725:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004729:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000472d:	83 c2 ff             	add    edx,0xffffffff
c0004730:	89 e8                	mov    eax,ebp
c0004732:	83 d1 ff             	adc    ecx,0xffffffff
c0004735:	e8 b1 d3 ff ff       	call   c0001aeb <st_qword>
c000473a:	31 c9                	xor    ecx,ecx
c000473c:	8d 43 28             	lea    eax,[ebx+0x28]
c000473f:	ba 22 00 00 00       	mov    edx,0x22
c0004744:	e8 a2 d3 ff ff       	call   c0001aeb <st_qword>
c0004749:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000474d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004751:	83 c2 de             	add    edx,0xffffffde
c0004754:	8d 43 30             	lea    eax,[ebx+0x30]
c0004757:	83 d1 ff             	adc    ecx,0xffffffff
c000475a:	31 f6                	xor    esi,esi
c000475c:	e8 8a d3 ff ff       	call   c0001aeb <st_qword>
c0004761:	8d 43 54             	lea    eax,[ebx+0x54]
c0004764:	ba 80 00 00 00       	mov    edx,0x80
c0004769:	e8 7a d3 ff ff       	call   c0001ae8 <st_dword>
c000476e:	8d 43 50             	lea    eax,[ebx+0x50]
c0004771:	ba 80 00 00 00       	mov    edx,0x80
c0004776:	e8 6d d3 ff ff       	call   c0001ae8 <st_dword>
c000477b:	ba 02 00 00 00       	mov    edx,0x2
c0004780:	89 f8                	mov    eax,edi
c0004782:	e8 61 d3 ff ff       	call   c0001ae8 <st_dword>
c0004787:	8d 53 38             	lea    edx,[ebx+0x38]
c000478a:	b9 10 00 00 00       	mov    ecx,0x10
c000478f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004793:	e8 ad d9 ff ff       	call   c0002145 <make_rand>
c0004798:	83 c8 ff             	or     eax,0xffffffff
c000479b:	46                   	inc    esi
c000479c:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00047a1:	e8 fb d8 ff ff       	call   c00020a1 <crc32>
c00047a6:	83 fe 5c             	cmp    esi,0x5c
c00047a9:	75 f0                	jne    c000479b <create_partition+0x359>
c00047ab:	f7 d0                	not    eax
c00047ad:	8d 73 10             	lea    esi,[ebx+0x10]
c00047b0:	89 c2                	mov    edx,eax
c00047b2:	89 f0                	mov    eax,esi
c00047b4:	e8 2f d3 ff ff       	call   c0001ae8 <st_dword>
c00047b9:	83 ec 0c             	sub    esp,0xc
c00047bc:	6a 01                	push   0x1
c00047be:	6a 00                	push   0x0
c00047c0:	6a 01                	push   0x1
c00047c2:	53                   	push   ebx
c00047c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047c7:	e8 71 d2 ff ff       	call   c0001a3d <disk_write>
c00047cc:	83 c4 20             	add    esp,0x20
c00047cf:	85 c0                	test   eax,eax
c00047d1:	0f 85 9c fc ff ff    	jne    c0004473 <create_partition+0x31>
c00047d7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047db:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047df:	83 c2 ff             	add    edx,0xffffffff
c00047e2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e5:	83 d1 ff             	adc    ecx,0xffffffff
c00047e8:	e8 fe d2 ff ff       	call   c0001aeb <st_qword>
c00047ed:	ba 01 00 00 00       	mov    edx,0x1
c00047f2:	31 c9                	xor    ecx,ecx
c00047f4:	89 e8                	mov    eax,ebp
c00047f6:	e8 f0 d2 ff ff       	call   c0001aeb <st_qword>
c00047fb:	89 f8                	mov    eax,edi
c00047fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004801:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004805:	31 ff                	xor    edi,edi
c0004807:	e8 df d2 ff ff       	call   c0001aeb <st_qword>
c000480c:	89 f0                	mov    eax,esi
c000480e:	31 d2                	xor    edx,edx
c0004810:	e8 d3 d2 ff ff       	call   c0001ae8 <st_dword>
c0004815:	83 c8 ff             	or     eax,0xffffffff
c0004818:	47                   	inc    edi
c0004819:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000481e:	e8 7e d8 ff ff       	call   c00020a1 <crc32>
c0004823:	83 ff 5c             	cmp    edi,0x5c
c0004826:	75 f0                	jne    c0004818 <create_partition+0x3d6>
c0004828:	f7 d0                	not    eax
c000482a:	89 c2                	mov    edx,eax
c000482c:	89 f0                	mov    eax,esi
c000482e:	e8 b5 d2 ff ff       	call   c0001ae8 <st_dword>
c0004833:	83 ec 0c             	sub    esp,0xc
c0004836:	6a 01                	push   0x1
c0004838:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000483c:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004840:	83 c0 ff             	add    eax,0xffffffff
c0004843:	83 d2 ff             	adc    edx,0xffffffff
c0004846:	52                   	push   edx
c0004847:	50                   	push   eax
c0004848:	53                   	push   ebx
c0004849:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000484d:	e8 eb d1 ff ff       	call   c0001a3d <disk_write>
c0004852:	83 c4 20             	add    esp,0x20
c0004855:	85 c0                	test   eax,eax
c0004857:	0f 85 16 fc ff ff    	jne    c0004473 <create_partition+0x31>
c000485d:	31 d2                	xor    edx,edx
c000485f:	89 d8                	mov    eax,ebx
c0004861:	b9 00 02 00 00       	mov    ecx,0x200
c0004866:	e8 9b d2 ff ff       	call   c0001b06 <mem_set>
c000486b:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004871:	b9 10 00 00 00       	mov    ecx,0x10
c0004876:	ba 10 5d 02 c0       	mov    edx,0xc0025d10
c000487b:	e8 71 d2 ff ff       	call   c0001af1 <mem_cpy>
c0004880:	e9 21 01 00 00       	jmp    c00049a6 <create_partition+0x564>
c0004885:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004889:	b9 05 00 00 00       	mov    ecx,0x5
c000488e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004891:	bf 08 00 00 00       	mov    edi,0x8
c0004896:	89 f8                	mov    eax,edi
c0004898:	31 d2                	xor    edx,edx
c000489a:	0f b6 f0             	movzx  esi,al
c000489d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a0:	f7 f6                	div    esi
c00048a2:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00048a7:	76 0a                	jbe    c00048b3 <create_partition+0x471>
c00048a9:	d1 e7                	shl    edi,1
c00048ab:	49                   	dec    ecx
c00048ac:	75 e8                	jne    c0004896 <create_partition+0x454>
c00048ae:	bf ff ff ff ff       	mov    edi,0xffffffff
c00048b3:	b9 00 02 00 00       	mov    ecx,0x200
c00048b8:	31 d2                	xor    edx,edx
c00048ba:	89 d8                	mov    eax,ebx
c00048bc:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048c2:	e8 3f d2 ff ff       	call   c0001b06 <mem_set>
c00048c7:	b9 64 00 00 00       	mov    ecx,0x64
c00048cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048d9:	f7 f1                	div    ecx
c00048db:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	0f b6 c0             	movzx  eax,al
c00048e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048ed:	e9 80 00 00 00       	jmp    c0004972 <create_partition+0x530>
c00048f2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048f5:	29 cf                	sub    edi,ecx
c00048f7:	89 ca                	mov    edx,ecx
c00048f9:	89 f0                	mov    eax,esi
c00048fb:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004900:	e8 e3 d1 ff ff       	call   c0001ae8 <st_dword>
c0004905:	8d 46 04             	lea    eax,[esi+0x4]
c0004908:	89 fa                	mov    edx,edi
c000490a:	83 c6 10             	add    esi,0x10
c000490d:	e8 d6 d1 ff ff       	call   c0001ae8 <st_dword>
c0004912:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004916:	31 d2                	xor    edx,edx
c0004918:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c000491b:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000491f:	89 c8                	mov    eax,ecx
c0004921:	01 f9                	add    ecx,edi
c0004923:	f7 f5                	div    ebp
c0004925:	89 d5                	mov    ebp,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	45                   	inc    ebp
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004931:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004934:	89 c2                	mov    edx,eax
c0004936:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004939:	c1 ea 02             	shr    edx,0x2
c000493c:	83 e2 c0             	and    edx,0xffffffc0
c000493f:	09 ea                	or     edx,ebp
c0004941:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004946:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004949:	31 d2                	xor    edx,edx
c000494b:	f7 f5                	div    ebp
c000494d:	89 d7                	mov    edi,edx
c000494f:	31 d2                	xor    edx,edx
c0004951:	47                   	inc    edi
c0004952:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004956:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004959:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c000495c:	89 c5                	mov    ebp,eax
c000495e:	c1 ed 02             	shr    ebp,0x2
c0004961:	83 e5 c0             	and    ebp,0xffffffc0
c0004964:	09 ef                	or     edi,ebp
c0004966:	89 fa                	mov    edx,edi
c0004968:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000496b:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004970:	74 34                	je     c00049a6 <create_partition+0x564>
c0004972:	85 c9                	test   ecx,ecx
c0004974:	74 30                	je     c00049a6 <create_partition+0x564>
c0004976:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004979:	76 2b                	jbe    c00049a6 <create_partition+0x564>
c000497b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000497f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004983:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004986:	83 ff 64             	cmp    edi,0x64
c0004989:	76 4b                	jbe    c00049d6 <create_partition+0x594>
c000498b:	89 f8                	mov    eax,edi
c000498d:	01 c8                	add    eax,ecx
c000498f:	0f 82 5d ff ff ff    	jb     c00048f2 <create_partition+0x4b0>
c0004995:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004998:	0f 87 54 ff ff ff    	ja     c00048f2 <create_partition+0x4b0>
c000499e:	85 ff                	test   edi,edi
c00049a0:	0f 85 51 ff ff ff    	jne    c00048f7 <create_partition+0x4b5>
c00049a6:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00049ac:	ba 55 aa 00 00       	mov    edx,0xaa55
c00049b1:	e8 2e d1 ff ff       	call   c0001ae4 <st_word>
c00049b6:	83 ec 0c             	sub    esp,0xc
c00049b9:	6a 01                	push   0x1
c00049bb:	6a 00                	push   0x0
c00049bd:	6a 00                	push   0x0
c00049bf:	53                   	push   ebx
c00049c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049c4:	e8 74 d0 ff ff       	call   c0001a3d <disk_write>
c00049c9:	83 c4 20             	add    esp,0x20
c00049cc:	85 c0                	test   eax,eax
c00049ce:	0f 95 c0             	setne  al
c00049d1:	0f b6 c0             	movzx  eax,al
c00049d4:	eb 0e                	jmp    c00049e4 <create_partition+0x5a2>
c00049d6:	74 07                	je     c00049df <create_partition+0x59d>
c00049d8:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049dd:	eb ac                	jmp    c000498b <create_partition+0x549>
c00049df:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049e2:	eb a7                	jmp    c000498b <create_partition+0x549>
c00049e4:	83 c4 5c             	add    esp,0x5c
c00049e7:	5b                   	pop    ebx
c00049e8:	5e                   	pop    esi
c00049e9:	5f                   	pop    edi
c00049ea:	5d                   	pop    ebp
c00049eb:	c3                   	ret    

c00049ec <get_fileinfo>:
c00049ec:	55                   	push   ebp
c00049ed:	57                   	push   edi
c00049ee:	56                   	push   esi
c00049ef:	53                   	push   ebx
c00049f0:	83 ec 1c             	sub    esp,0x1c
c00049f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00049f5:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049f9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049fd:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004a00:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004a03:	0f 84 dc 01 00 00    	je     c0004be5 <get_fileinfo+0x1f9>
c0004a09:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004a0c:	75 0f                	jne    c0004a1d <get_fileinfo+0x31>
c0004a0e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004a11:	83 c4 1c             	add    esp,0x1c
c0004a14:	5b                   	pop    ebx
c0004a15:	5e                   	pop    esi
c0004a16:	5f                   	pop    edi
c0004a17:	5d                   	pop    ebp
c0004a18:	e9 58 d5 ff ff       	jmp    c0001f75 <get_xfileinfo>
c0004a1d:	89 d3                	mov    ebx,edx
c0004a1f:	89 c6                	mov    esi,eax
c0004a21:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a25:	74 6a                	je     c0004a91 <get_fileinfo+0xa5>
c0004a27:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a2f:	31 ed                	xor    ebp,ebp
c0004a31:	31 ff                	xor    edi,edi
c0004a33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a3e:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a42:	66 85 d2             	test   dx,dx
c0004a45:	74 3e                	je     c0004a85 <get_fileinfo+0x99>
c0004a47:	66 85 ed             	test   bp,bp
c0004a4a:	75 0c                	jne    c0004a58 <get_fileinfo+0x6c>
c0004a4c:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a52:	66 3d ff 07          	cmp    ax,0x7ff
c0004a56:	76 22                	jbe    c0004a7a <get_fileinfo+0x8e>
c0004a58:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a5d:	89 e8                	mov    eax,ebp
c0004a5f:	29 f9                	sub    ecx,edi
c0004a61:	c1 e0 10             	shl    eax,0x10
c0004a64:	09 d0                	or     eax,edx
c0004a66:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a6a:	e8 a3 d1 ff ff       	call   c0001c12 <put_utf>
c0004a6f:	84 c0                	test   al,al
c0004a71:	74 10                	je     c0004a83 <get_fileinfo+0x97>
c0004a73:	0f b6 c0             	movzx  eax,al
c0004a76:	31 d2                	xor    edx,edx
c0004a78:	01 c7                	add    edi,eax
c0004a7a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a7f:	89 d5                	mov    ebp,edx
c0004a81:	eb b0                	jmp    c0004a33 <get_fileinfo+0x47>
c0004a83:	31 ff                	xor    edi,edi
c0004a85:	66 85 ed             	test   bp,bp
c0004a88:	74 02                	je     c0004a8c <get_fileinfo+0xa0>
c0004a8a:	31 ff                	xor    edi,edi
c0004a8c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a91:	31 ff                	xor    edi,edi
c0004a93:	31 c9                	xor    ecx,ecx
c0004a95:	83 f9 0a             	cmp    ecx,0xa
c0004a98:	0f 87 ad 00 00 00    	ja     c0004b4b <get_fileinfo+0x15f>
c0004a9e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa1:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004aa4:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004aa8:	66 83 fa 20          	cmp    dx,0x20
c0004aac:	0f 84 92 00 00 00    	je     c0004b44 <get_fileinfo+0x158>
c0004ab2:	66 83 fa 05          	cmp    dx,0x5
c0004ab6:	75 05                	jne    c0004abd <get_fileinfo+0xd1>
c0004ab8:	ba e5 00 00 00       	mov    edx,0xe5
c0004abd:	83 ff 0b             	cmp    edi,0xb
c0004ac0:	77 0b                	ja     c0004acd <get_fileinfo+0xe1>
c0004ac2:	83 fd 09             	cmp    ebp,0x9
c0004ac5:	75 06                	jne    c0004acd <get_fileinfo+0xe1>
c0004ac7:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004acc:	47                   	inc    edi
c0004acd:	0f b7 c2             	movzx  eax,dx
c0004ad0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ad4:	e8 6d d0 ff ff       	call   c0001b46 <dbc_1st>
c0004ad9:	85 c0                	test   eax,eax
c0004adb:	74 2f                	je     c0004b0c <get_fileinfo+0x120>
c0004add:	83 fd 08             	cmp    ebp,0x8
c0004ae0:	74 2a                	je     c0004b0c <get_fileinfo+0x120>
c0004ae2:	83 fd 0b             	cmp    ebp,0xb
c0004ae5:	74 25                	je     c0004b0c <get_fileinfo+0x120>
c0004ae7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aea:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004aee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004af2:	e8 52 d0 ff ff       	call   c0001b49 <dbc_2nd>
c0004af7:	85 c0                	test   eax,eax
c0004af9:	74 11                	je     c0004b0c <get_fileinfo+0x120>
c0004afb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aff:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004b04:	c1 e2 08             	shl    edx,0x8
c0004b07:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004b0a:	09 c2                	or     edx,eax
c0004b0c:	0f b7 d2             	movzx  edx,dx
c0004b0f:	50                   	push   eax
c0004b10:	50                   	push   eax
c0004b11:	68 b5 01 00 00       	push   0x1b5
c0004b16:	52                   	push   edx
c0004b17:	e8 46 38 00 00       	call   c0008362 <ff_oem2uni>
c0004b1c:	83 c4 10             	add    esp,0x10
c0004b1f:	66 85 c0             	test   ax,ax
c0004b22:	75 04                	jne    c0004b28 <get_fileinfo+0x13c>
c0004b24:	31 ff                	xor    edi,edi
c0004b26:	eb 23                	jmp    c0004b4b <get_fileinfo+0x15f>
c0004b28:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b2d:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b31:	29 f9                	sub    ecx,edi
c0004b33:	0f b7 c0             	movzx  eax,ax
c0004b36:	e8 d7 d0 ff ff       	call   c0001c12 <put_utf>
c0004b3b:	84 c0                	test   al,al
c0004b3d:	74 e5                	je     c0004b24 <get_fileinfo+0x138>
c0004b3f:	0f b6 c0             	movzx  eax,al
c0004b42:	01 c7                	add    edi,eax
c0004b44:	89 e9                	mov    ecx,ebp
c0004b46:	e9 4a ff ff ff       	jmp    c0004a95 <get_fileinfo+0xa9>
c0004b4b:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b50:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b54:	75 54                	jne    c0004baa <get_fileinfo+0x1be>
c0004b56:	85 ff                	test   edi,edi
c0004b58:	75 0b                	jne    c0004b65 <get_fileinfo+0x179>
c0004b5a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b5e:	ba 01 00 00 00       	mov    edx,0x1
c0004b63:	eb 33                	jmp    c0004b98 <get_fileinfo+0x1ac>
c0004b65:	b1 08                	mov    cl,0x8
c0004b67:	31 d2                	xor    edx,edx
c0004b69:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b6f:	84 c0                	test   al,al
c0004b71:	74 25                	je     c0004b98 <get_fileinfo+0x1ac>
c0004b73:	66 83 f8 2e          	cmp    ax,0x2e
c0004b77:	74 16                	je     c0004b8f <get_fileinfo+0x1a3>
c0004b79:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b7c:	66 83 ff 19          	cmp    di,0x19
c0004b80:	77 0f                	ja     c0004b91 <get_fileinfo+0x1a5>
c0004b82:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b85:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b88:	74 07                	je     c0004b91 <get_fileinfo+0x1a5>
c0004b8a:	83 c0 20             	add    eax,0x20
c0004b8d:	eb 02                	jmp    c0004b91 <get_fileinfo+0x1a5>
c0004b8f:	b1 10                	mov    cl,0x10
c0004b91:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b95:	42                   	inc    edx
c0004b96:	eb d1                	jmp    c0004b69 <get_fileinfo+0x17d>
c0004b98:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b9d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba0:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ba4:	75 04                	jne    c0004baa <get_fileinfo+0x1be>
c0004ba6:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004baa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bad:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004bb0:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004bb3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb6:	83 c0 1c             	add    eax,0x1c
c0004bb9:	e8 c1 ce ff ff       	call   c0001a7f <ld_dword>
c0004bbe:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004bc5:	89 03                	mov    DWORD PTR [ebx],eax
c0004bc7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bca:	83 c0 16             	add    eax,0x16
c0004bcd:	e8 a0 ce ff ff       	call   c0001a72 <ld_word>
c0004bd2:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd9:	83 c0 18             	add    eax,0x18
c0004bdc:	e8 91 ce ff ff       	call   c0001a72 <ld_word>
c0004be1:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004be5:	83 c4 1c             	add    esp,0x1c
c0004be8:	5b                   	pop    ebx
c0004be9:	5e                   	pop    esi
c0004bea:	5f                   	pop    edi
c0004beb:	5d                   	pop    ebp
c0004bec:	c3                   	ret    

c0004bed <ld_clust.isra.0>:
c0004bed:	56                   	push   esi
c0004bee:	89 c6                	mov    esi,eax
c0004bf0:	53                   	push   ebx
c0004bf1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bf4:	89 d3                	mov    ebx,edx
c0004bf6:	e8 77 ce ff ff       	call   c0001a72 <ld_word>
c0004bfb:	0f b7 c8             	movzx  ecx,ax
c0004bfe:	89 f0                	mov    eax,esi
c0004c00:	3c 03                	cmp    al,0x3
c0004c02:	75 0d                	jne    c0004c11 <ld_clust.isra.0+0x24>
c0004c04:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c07:	e8 66 ce ff ff       	call   c0001a72 <ld_word>
c0004c0c:	c1 e0 10             	shl    eax,0x10
c0004c0f:	09 c1                	or     ecx,eax
c0004c11:	89 c8                	mov    eax,ecx
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <st_clust.isra.1>:
c0004c16:	56                   	push   esi
c0004c17:	89 c6                	mov    esi,eax
c0004c19:	53                   	push   ebx
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	0f b7 d1             	movzx  edx,cx
c0004c1f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c22:	e8 bd ce ff ff       	call   c0001ae4 <st_word>
c0004c27:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c2a:	75 0f                	jne    c0004c3b <st_clust.isra.1+0x25>
c0004c2c:	c1 e9 10             	shr    ecx,0x10
c0004c2f:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c32:	89 ca                	mov    edx,ecx
c0004c34:	5b                   	pop    ebx
c0004c35:	5e                   	pop    esi
c0004c36:	e9 a9 ce ff ff       	jmp    c0001ae4 <st_word>
c0004c3b:	5b                   	pop    ebx
c0004c3c:	5e                   	pop    esi
c0004c3d:	c3                   	ret    

c0004c3e <init_alloc_info.isra.2>:
c0004c3e:	56                   	push   esi
c0004c3f:	53                   	push   ebx
c0004c40:	89 c6                	mov    esi,eax
c0004c42:	89 d3                	mov    ebx,edx
c0004c44:	51                   	push   ecx
c0004c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c47:	83 c0 34             	add    eax,0x34
c0004c4a:	e8 30 ce ff ff       	call   c0001a7f <ld_dword>
c0004c4f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c52:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c54:	83 c0 38             	add    eax,0x38
c0004c57:	e8 3b ce ff ff       	call   c0001a97 <ld_qword>
c0004c5c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c5f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c62:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c64:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c67:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c6e:	83 e0 02             	and    eax,0x2
c0004c71:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c74:	5b                   	pop    ebx
c0004c75:	5b                   	pop    ebx
c0004c76:	5e                   	pop    esi
c0004c77:	c3                   	ret    

c0004c78 <follow_path>:
c0004c78:	56                   	push   esi
c0004c79:	53                   	push   ebx
c0004c7a:	89 c3                	mov    ebx,eax
c0004c7c:	83 ec 14             	sub    esp,0x14
c0004c7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c83:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c8b:	80 fa 5c             	cmp    dl,0x5c
c0004c8e:	75 07                	jne    c0004c97 <follow_path+0x1f>
c0004c90:	40                   	inc    eax
c0004c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c95:	eb ee                	jmp    c0004c85 <follow_path+0xd>
c0004c97:	80 fa 2f             	cmp    dl,0x2f
c0004c9a:	74 f4                	je     c0004c90 <follow_path+0x18>
c0004c9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004ca3:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004caa:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004cad:	77 52                	ja     c0004d01 <follow_path+0x89>
c0004caf:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004cb3:	31 d2                	xor    edx,edx
c0004cb5:	89 d8                	mov    eax,ebx
c0004cb7:	e8 12 e3 ff ff       	call   c0002fce <dir_sdi>
c0004cbc:	eb 7c                	jmp    c0004d3a <follow_path+0xc2>
c0004cbe:	89 d8                	mov    eax,ebx
c0004cc0:	e8 6e f2 ff ff       	call   c0003f33 <dir_find>
c0004cc5:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	75 46                	jne    c0004d12 <follow_path+0x9a>
c0004ccc:	80 e2 04             	and    dl,0x4
c0004ccf:	75 69                	jne    c0004d3a <follow_path+0xc2>
c0004cd1:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cd5:	74 5e                	je     c0004d35 <follow_path+0xbd>
c0004cd7:	8a 06                	mov    al,BYTE PTR [esi]
c0004cd9:	3c 04                	cmp    al,0x4
c0004cdb:	75 41                	jne    c0004d1e <follow_path+0xa6>
c0004cdd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ce0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ce4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ce7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cea:	30 c0                	xor    al,al
c0004cec:	09 d0                	or     eax,edx
c0004cee:	89 da                	mov    edx,ebx
c0004cf0:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cf3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cf6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cf9:	8d 46 10             	lea    eax,[esi+0x10]
c0004cfc:	e8 3d ff ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0004d01:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d05:	89 d8                	mov    eax,ebx
c0004d07:	e8 a9 ed ff ff       	call   c0003ab5 <create_name>
c0004d0c:	85 c0                	test   eax,eax
c0004d0e:	74 ae                	je     c0004cbe <follow_path+0x46>
c0004d10:	eb 28                	jmp    c0004d3a <follow_path+0xc2>
c0004d12:	83 f8 04             	cmp    eax,0x4
c0004d15:	75 23                	jne    c0004d3a <follow_path+0xc2>
c0004d17:	80 e2 04             	and    dl,0x4
c0004d1a:	74 19                	je     c0004d35 <follow_path+0xbd>
c0004d1c:	eb 1c                	jmp    c0004d3a <follow_path+0xc2>
c0004d1e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d21:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d27:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d2b:	e8 bd fe ff ff       	call   c0004bed <ld_clust.isra.0>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	eb cc                	jmp    c0004d01 <follow_path+0x89>
c0004d35:	b8 05 00 00 00       	mov    eax,0x5
c0004d3a:	83 c4 14             	add    esp,0x14
c0004d3d:	5b                   	pop    ebx
c0004d3e:	5e                   	pop    esi
c0004d3f:	c3                   	ret    

c0004d40 <f_mount>:
c0004d40:	53                   	push   ebx
c0004d41:	83 ec 18             	sub    esp,0x18
c0004d44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d48:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d54:	e8 fb d2 ff ff       	call   c0002054 <get_ldnumber>
c0004d59:	89 c2                	mov    edx,eax
c0004d5b:	b8 0b 00 00 00       	mov    eax,0xb
c0004d60:	85 d2                	test   edx,edx
c0004d62:	78 39                	js     c0004d9d <f_mount+0x5d>
c0004d64:	8b 04 95 a0 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c60]
c0004d6b:	85 c0                	test   eax,eax
c0004d6d:	74 03                	je     c0004d72 <f_mount+0x32>
c0004d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d76:	85 c0                	test   eax,eax
c0004d78:	74 03                	je     c0004d7d <f_mount+0x3d>
c0004d7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d81:	89 04 95 a0 a3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5c60],eax
c0004d88:	31 c0                	xor    eax,eax
c0004d8a:	84 db                	test   bl,bl
c0004d8c:	74 0f                	je     c0004d9d <f_mount+0x5d>
c0004d8e:	31 c9                	xor    ecx,ecx
c0004d90:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d94:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d98:	e8 65 d7 ff ff       	call   c0002502 <mount_volume>
c0004d9d:	83 c4 18             	add    esp,0x18
c0004da0:	5b                   	pop    ebx
c0004da1:	c3                   	ret    

c0004da2 <f_open>:
c0004da2:	55                   	push   ebp
c0004da3:	bd 09 00 00 00       	mov    ebp,0x9
c0004da8:	57                   	push   edi
c0004da9:	56                   	push   esi
c0004daa:	53                   	push   ebx
c0004dab:	83 ec 7c             	sub    esp,0x7c
c0004dae:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004db5:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004dbc:	85 db                	test   ebx,ebx
c0004dbe:	0f 84 10 04 00 00    	je     c00051d4 <f_open+0x432>
c0004dc4:	89 fe                	mov    esi,edi
c0004dc6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004dca:	83 e6 3f             	and    esi,0x3f
c0004dcd:	89 f0                	mov    eax,esi
c0004dcf:	0f b6 c8             	movzx  ecx,al
c0004dd2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004dd9:	e8 24 d7 ff ff       	call   c0002502 <mount_volume>
c0004dde:	89 c5                	mov    ebp,eax
c0004de0:	85 c0                	test   eax,eax
c0004de2:	0f 85 e6 03 00 00    	jne    c00051ce <f_open+0x42c>
c0004de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dec:	bd 11 00 00 00       	mov    ebp,0x11
c0004df1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004df5:	83 ec 0c             	sub    esp,0xc
c0004df8:	68 60 04 00 00       	push   0x460
c0004dfd:	e8 a3 34 00 00       	call   c00082a5 <ff_memalloc>
c0004e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004e06:	83 c4 10             	add    esp,0x10
c0004e09:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004e0e:	0f 84 c0 03 00 00    	je     c00051d4 <f_open+0x432>
c0004e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004e1c:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e22:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e25:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e28:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e33:	e8 40 fe ff ff       	call   c0004c78 <follow_path>
c0004e38:	89 c5                	mov    ebp,eax
c0004e3a:	85 c0                	test   eax,eax
c0004e3c:	75 0c                	jne    c0004e4a <f_open+0xa8>
c0004e3e:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e43:	79 05                	jns    c0004e4a <f_open+0xa8>
c0004e45:	bd 06 00 00 00       	mov    ebp,0x6
c0004e4a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e50:	0f 84 84 01 00 00    	je     c0004fda <f_open+0x238>
c0004e56:	85 ed                	test   ebp,ebp
c0004e58:	74 20                	je     c0004e7a <f_open+0xd8>
c0004e5a:	83 fd 04             	cmp    ebp,0x4
c0004e5d:	0f 85 58 03 00 00    	jne    c00051bb <f_open+0x419>
c0004e63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e67:	83 ce 08             	or     esi,0x8
c0004e6a:	e8 8a f2 ff ff       	call   c00040f9 <dir_register>
c0004e6f:	89 c5                	mov    ebp,eax
c0004e71:	85 c0                	test   eax,eax
c0004e73:	74 2f                	je     c0004ea4 <f_open+0x102>
c0004e75:	e9 41 03 00 00       	jmp    c00051bb <f_open+0x419>
c0004e7a:	bd 07 00 00 00       	mov    ebp,0x7
c0004e7f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e84:	0f 85 31 03 00 00    	jne    c00051bb <f_open+0x419>
c0004e8a:	bd 08 00 00 00       	mov    ebp,0x8
c0004e8f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e95:	0f 85 20 03 00 00    	jne    c00051bb <f_open+0x419>
c0004e9b:	83 e7 08             	and    edi,0x8
c0004e9e:	0f 84 65 01 00 00    	je     c0005009 <f_open+0x267>
c0004ea4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ea8:	8a 02                	mov    al,BYTE PTR [edx]
c0004eaa:	3c 04                	cmp    al,0x4
c0004eac:	0f 85 97 00 00 00    	jne    c0004f49 <f_open+0x1a7>
c0004eb2:	8d 42 10             	lea    eax,[edx+0x10]
c0004eb5:	89 13                	mov    DWORD PTR [ebx],edx
c0004eb7:	89 da                	mov    edx,ebx
c0004eb9:	e8 80 fd ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0004ebe:	31 d2                	xor    edx,edx
c0004ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec4:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ec9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ecc:	83 c0 02             	add    eax,0x2
c0004ecf:	e8 32 cc ff ff       	call   c0001b06 <mem_set>
c0004ed4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ed9:	31 d2                	xor    edx,edx
c0004edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004edf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee2:	83 c0 26             	add    eax,0x26
c0004ee5:	e8 1c cc ff ff       	call   c0001b06 <mem_set>
c0004eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ef1:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ef5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004efa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004efd:	83 c0 08             	add    eax,0x8
c0004f00:	e8 e3 cb ff ff       	call   c0001ae8 <st_dword>
c0004f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f09:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004f0c:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 b7 ea ff ff       	call   c00039d0 <store_xdir>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	0f 85 98 02 00 00    	jne    c00051bb <f_open+0x419>
c0004f23:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f26:	85 d2                	test   edx,edx
c0004f28:	0f 84 db 00 00 00    	je     c0005009 <f_open+0x267>
c0004f2e:	31 c9                	xor    ecx,ecx
c0004f30:	89 d8                	mov    eax,ebx
c0004f32:	e8 8e e3 ff ff       	call   c00032c5 <remove_chain>
c0004f37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f3b:	89 c5                	mov    ebp,eax
c0004f3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f40:	48                   	dec    eax
c0004f41:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f44:	e9 b8 00 00 00       	jmp    c0005001 <f_open+0x25f>
c0004f49:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f4d:	89 ea                	mov    edx,ebp
c0004f4f:	e8 99 fc ff ff       	call   c0004bed <ld_clust.isra.0>
c0004f54:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f59:	89 c7                	mov    edi,eax
c0004f5b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f5e:	e8 85 cb ff ff       	call   c0001ae8 <st_dword>
c0004f63:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f67:	31 c9                	xor    ecx,ecx
c0004f69:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f71:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f75:	e8 9c fc ff ff       	call   c0004c16 <st_clust.isra.1>
c0004f7a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f7e:	31 d2                	xor    edx,edx
c0004f80:	83 c0 1c             	add    eax,0x1c
c0004f83:	e8 60 cb ff ff       	call   c0001ae8 <st_dword>
c0004f88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f8c:	85 ff                	test   edi,edi
c0004f8e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f92:	74 75                	je     c0005009 <f_open+0x267>
c0004f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f98:	31 c9                	xor    ecx,ecx
c0004f9a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f9d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004fa0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004fa4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fa8:	89 fa                	mov    edx,edi
c0004faa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fae:	e8 12 e3 ff ff       	call   c00032c5 <remove_chain>
c0004fb3:	89 c5                	mov    ebp,eax
c0004fb5:	85 c0                	test   eax,eax
c0004fb7:	0f 85 fe 01 00 00    	jne    c00051bb <f_open+0x419>
c0004fbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc9:	4f                   	dec    edi
c0004fca:	e8 81 d2 ff ff       	call   c0002250 <move_window>
c0004fcf:	89 c5                	mov    ebp,eax
c0004fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fd8:	eb 27                	jmp    c0005001 <f_open+0x25f>
c0004fda:	85 ed                	test   ebp,ebp
c0004fdc:	0f 85 d9 01 00 00    	jne    c00051bb <f_open+0x419>
c0004fe2:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fe6:	bd 04 00 00 00       	mov    ebp,0x4
c0004feb:	a8 10                	test   al,0x10
c0004fed:	0f 85 c8 01 00 00    	jne    c00051bb <f_open+0x419>
c0004ff3:	83 e7 02             	and    edi,0x2
c0004ff6:	74 11                	je     c0005009 <f_open+0x267>
c0004ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0004ffd:	a8 01                	test   al,0x1
c0004fff:	eb 02                	jmp    c0005003 <f_open+0x261>
c0005001:	85 ed                	test   ebp,ebp
c0005003:	0f 85 b2 01 00 00    	jne    c00051bb <f_open+0x419>
c0005009:	f7 c6 08 00 00 00    	test   esi,0x8
c000500f:	74 03                	je     c0005014 <f_open+0x272>
c0005011:	83 ce 40             	or     esi,0x40
c0005014:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005018:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000501b:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000501e:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005021:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005024:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005028:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000502b:	8a 02                	mov    al,BYTE PTR [edx]
c000502d:	3c 04                	cmp    al,0x4
c000502f:	75 2a                	jne    c000505b <f_open+0x2b9>
c0005031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005035:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000503a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000503d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005041:	30 c0                	xor    al,al
c0005043:	09 c8                	or     eax,ecx
c0005045:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005048:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000504c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000504f:	8d 42 10             	lea    eax,[edx+0x10]
c0005052:	89 da                	mov    edx,ebx
c0005054:	e8 e5 fb ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0005059:	eb 1c                	jmp    c0005077 <f_open+0x2d5>
c000505b:	89 fa                	mov    edx,edi
c000505d:	e8 8b fb ff ff       	call   c0004bed <ld_clust.isra.0>
c0005062:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005065:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005068:	e8 12 ca ff ff       	call   c0001a7f <ld_dword>
c000506d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005074:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000507b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005082:	89 03                	mov    DWORD PTR [ebx],eax
c0005084:	31 d2                	xor    edx,edx
c0005086:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000508a:	b9 00 02 00 00       	mov    ecx,0x200
c000508f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005093:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005097:	89 f0                	mov    eax,esi
c0005099:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00050a0:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00050a3:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00050aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00050ad:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00050b4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00050bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00050bf:	e8 42 ca ff ff       	call   c0001b06 <mem_set>
c00050c4:	83 e6 20             	and    esi,0x20
c00050c7:	75 07                	jne    c00050d0 <f_open+0x32e>
c00050c9:	31 ed                	xor    ebp,ebp
c00050cb:	e9 eb 00 00 00       	jmp    c00051bb <f_open+0x419>
c00050d0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050d3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050e2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050e6:	74 e1                	je     c00050c9 <f_open+0x327>
c00050e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050f0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050f3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050fd:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005101:	31 ff                	xor    edi,edi
c0005103:	c1 e5 09             	shl    ebp,0x9
c0005106:	89 ee                	mov    esi,ebp
c0005108:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000510c:	89 f8                	mov    eax,edi
c000510e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005112:	73 22                	jae    c0005136 <f_open+0x394>
c0005114:	89 d8                	mov    eax,ebx
c0005116:	e8 bd dc ff ff       	call   c0002dd8 <get_fat>
c000511b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000511f:	89 c2                	mov    edx,eax
c0005121:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005125:	83 f8 01             	cmp    eax,0x1
c0005128:	76 10                	jbe    c000513a <f_open+0x398>
c000512a:	83 f8 ff             	cmp    eax,0xffffffff
c000512d:	75 d9                	jne    c0005108 <f_open+0x366>
c000512f:	bd 01 00 00 00       	mov    ebp,0x1
c0005134:	eb 09                	jmp    c000513f <f_open+0x39d>
c0005136:	31 ed                	xor    ebp,ebp
c0005138:	eb 05                	jmp    c000513f <f_open+0x39d>
c000513a:	bd 02 00 00 00       	mov    ebp,0x2
c000513f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005142:	85 ed                	test   ebp,ebp
c0005144:	75 75                	jne    c00051bb <f_open+0x419>
c0005146:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000514a:	25 ff 01 00 00       	and    eax,0x1ff
c000514f:	0f 84 74 ff ff ff    	je     c00050c9 <f_open+0x327>
c0005155:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005159:	bd 02 00 00 00       	mov    ebp,0x2
c000515e:	89 c8                	mov    eax,ecx
c0005160:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005164:	e8 a2 cb ff ff       	call   c0001d0b <clst2sect>
c0005169:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000516d:	89 d7                	mov    edi,edx
c000516f:	09 c7                	or     edi,eax
c0005171:	74 48                	je     c00051bb <f_open+0x419>
c0005173:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005177:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000517b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005183:	0f ac fe 09          	shrd   esi,edi,0x9
c0005187:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000518b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000518f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005192:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005196:	83 ec 0c             	sub    esp,0xc
c0005199:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000519c:	6a 01                	push   0x1
c000519e:	52                   	push   edx
c000519f:	50                   	push   eax
c00051a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00051a4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051a8:	50                   	push   eax
c00051a9:	e8 79 c8 ff ff       	call   c0001a27 <disk_read>
c00051ae:	83 c4 20             	add    esp,0x20
c00051b1:	85 c0                	test   eax,eax
c00051b3:	0f 95 c0             	setne  al
c00051b6:	0f b6 c0             	movzx  eax,al
c00051b9:	89 c5                	mov    ebp,eax
c00051bb:	83 ec 0c             	sub    esp,0xc
c00051be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051c2:	e8 f4 30 00 00       	call   c00082bb <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	85 ed                	test   ebp,ebp
c00051cc:	74 06                	je     c00051d4 <f_open+0x432>
c00051ce:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051d4:	83 c4 7c             	add    esp,0x7c
c00051d7:	89 e8                	mov    eax,ebp
c00051d9:	5b                   	pop    ebx
c00051da:	5e                   	pop    esi
c00051db:	5f                   	pop    edi
c00051dc:	5d                   	pop    ebp
c00051dd:	c3                   	ret    

c00051de <f_read>:
c00051de:	55                   	push   ebp
c00051df:	57                   	push   edi
c00051e0:	56                   	push   esi
c00051e1:	53                   	push   ebx
c00051e2:	83 ec 2c             	sub    esp,0x2c
c00051e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051f3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051f7:	89 d8                	mov    eax,ebx
c00051f9:	e8 77 cf ff ff       	call   c0002175 <validate>
c00051fe:	89 c5                	mov    ebp,eax
c0005200:	85 c0                	test   eax,eax
c0005202:	0f 85 4c 02 00 00    	jne    c0005454 <f_read+0x276>
c0005208:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000520c:	85 ed                	test   ebp,ebp
c000520e:	0f 85 40 02 00 00    	jne    c0005454 <f_read+0x276>
c0005214:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005218:	0f 84 31 02 00 00    	je     c000544f <f_read+0x271>
c000521e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005221:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005224:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005227:	bf 00 00 00 00       	mov    edi,0x0
c000522c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000522f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005233:	89 d1                	mov    ecx,edx
c0005235:	19 f9                	sbb    ecx,edi
c0005237:	0f 83 cf 00 00 00    	jae    c000530c <f_read+0x12e>
c000523d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005241:	e9 c6 00 00 00       	jmp    c000530c <f_read+0x12e>
c0005246:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005249:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000524c:	89 d0                	mov    eax,edx
c000524e:	25 ff 01 00 00       	and    eax,0x1ff
c0005253:	0f 85 c9 01 00 00    	jne    c0005422 <f_read+0x244>
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	89 d6                	mov    esi,edx
c000525f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005263:	89 cf                	mov    edi,ecx
c0005265:	48                   	dec    eax
c0005266:	0f ac fe 09          	shrd   esi,edi,0x9
c000526a:	21 f0                	and    eax,esi
c000526c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005270:	0f 84 a6 00 00 00    	je     c000531c <f_read+0x13e>
c0005276:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000527a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000527d:	89 c8                	mov    eax,ecx
c000527f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005282:	e8 84 ca ff ff       	call   c0001d0b <clst2sect>
c0005287:	89 d7                	mov    edi,edx
c0005289:	09 c7                	or     edi,eax
c000528b:	0f 84 b4 00 00 00    	je     c0005345 <f_read+0x167>
c0005291:	31 ff                	xor    edi,edi
c0005293:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005297:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000529a:	01 c6                	add    esi,eax
c000529c:	11 d7                	adc    edi,edx
c000529e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00052a6:	0f 86 fd 00 00 00    	jbe    c00053a9 <f_read+0x1cb>
c00052ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052b4:	c1 e8 09             	shr    eax,0x9
c00052b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ba:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00052be:	03 14 24             	add    edx,DWORD PTR [esp]
c00052c1:	39 c2                	cmp    edx,eax
c00052c3:	76 07                	jbe    c00052cc <f_read+0xee>
c00052c5:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00052cc:	83 ec 0c             	sub    esp,0xc
c00052cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052d3:	57                   	push   edi
c00052d4:	56                   	push   esi
c00052d5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052dd:	50                   	push   eax
c00052de:	e8 44 c7 ff ff       	call   c0001a27 <disk_read>
c00052e3:	83 c4 20             	add    esp,0x20
c00052e6:	85 c0                	test   eax,eax
c00052e8:	75 6e                	jne    c0005358 <f_read+0x17a>
c00052ea:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052ee:	78 7e                	js     c000536e <f_read+0x190>
c00052f0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052f3:	c1 e6 09             	shl    esi,0x9
c00052f6:	31 ff                	xor    edi,edi
c00052f8:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005300:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005304:	01 30                	add    DWORD PTR [eax],esi
c0005306:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005309:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000530c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005311:	0f 85 2f ff ff ff    	jne    c0005246 <f_read+0x68>
c0005317:	e9 38 01 00 00       	jmp    c0005454 <f_read+0x276>
c000531c:	89 c8                	mov    eax,ecx
c000531e:	09 d0                	or     eax,edx
c0005320:	75 05                	jne    c0005327 <f_read+0x149>
c0005322:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005325:	eb 19                	jmp    c0005340 <f_read+0x162>
c0005327:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000532b:	74 09                	je     c0005336 <f_read+0x158>
c000532d:	89 d8                	mov    eax,ebx
c000532f:	e8 f8 c9 ff ff       	call   c0001d2c <clmt_clust>
c0005334:	eb 0a                	jmp    c0005340 <f_read+0x162>
c0005336:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005339:	89 d8                	mov    eax,ebx
c000533b:	e8 98 da ff ff       	call   c0002dd8 <get_fat>
c0005340:	83 f8 01             	cmp    eax,0x1
c0005343:	77 0e                	ja     c0005353 <f_read+0x175>
c0005345:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005349:	bd 02 00 00 00       	mov    ebp,0x2
c000534e:	e9 01 01 00 00       	jmp    c0005454 <f_read+0x276>
c0005353:	83 f8 ff             	cmp    eax,0xffffffff
c0005356:	75 0e                	jne    c0005366 <f_read+0x188>
c0005358:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000535c:	bd 01 00 00 00       	mov    ebp,0x1
c0005361:	e9 ee 00 00 00       	jmp    c0005454 <f_read+0x276>
c0005366:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005369:	e9 08 ff ff ff       	jmp    c0005276 <f_read+0x98>
c000536e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005371:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005374:	29 f0                	sub    eax,esi
c0005376:	19 fa                	sbb    edx,edi
c0005378:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000537b:	89 d7                	mov    edi,edx
c000537d:	ba 00 00 00 00       	mov    edx,0x0
c0005382:	89 f9                	mov    ecx,edi
c0005384:	19 d1                	sbb    ecx,edx
c0005386:	0f 83 64 ff ff ff    	jae    c00052f0 <f_read+0x112>
c000538c:	89 c7                	mov    edi,eax
c000538e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005391:	c1 e7 09             	shl    edi,0x9
c0005394:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005398:	b9 00 02 00 00       	mov    ecx,0x200
c000539d:	01 f8                	add    eax,edi
c000539f:	e8 4d c7 ff ff       	call   c0001af1 <mem_cpy>
c00053a4:	e9 47 ff ff ff       	jmp    c00052f0 <f_read+0x112>
c00053a9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00053ac:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00053af:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00053b6:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00053ba:	75 05                	jne    c00053c1 <f_read+0x1e3>
c00053bc:	39 34 24             	cmp    DWORD PTR [esp],esi
c00053bf:	74 5b                	je     c000541c <f_read+0x23e>
c00053c1:	8d 43 50             	lea    eax,[ebx+0x50]
c00053c4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053cc:	79 2a                	jns    c00053f8 <f_read+0x21a>
c00053ce:	83 ec 0c             	sub    esp,0xc
c00053d1:	6a 01                	push   0x1
c00053d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053df:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 54 c6 ff ff       	call   c0001a3d <disk_write>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 64 ff ff ff    	jne    c0005358 <f_read+0x17a>
c00053f4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053f8:	83 ec 0c             	sub    esp,0xc
c00053fb:	6a 01                	push   0x1
c00053fd:	57                   	push   edi
c00053fe:	56                   	push   esi
c00053ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005403:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005407:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000540b:	50                   	push   eax
c000540c:	e8 16 c6 ff ff       	call   c0001a27 <disk_read>
c0005411:	83 c4 20             	add    esp,0x20
c0005414:	85 c0                	test   eax,eax
c0005416:	0f 85 3c ff ff ff    	jne    c0005358 <f_read+0x17a>
c000541c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000541f:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005422:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005425:	ba 00 02 00 00       	mov    edx,0x200
c000542a:	25 ff 01 00 00       	and    eax,0x1ff
c000542f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005433:	29 c2                	sub    edx,eax
c0005435:	39 d6                	cmp    esi,edx
c0005437:	76 02                	jbe    c000543b <f_read+0x25d>
c0005439:	89 d6                	mov    esi,edx
c000543b:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000543f:	89 f1                	mov    ecx,esi
c0005441:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005445:	e8 a7 c6 ff ff       	call   c0001af1 <mem_cpy>
c000544a:	e9 a7 fe ff ff       	jmp    c00052f6 <f_read+0x118>
c000544f:	bd 07 00 00 00       	mov    ebp,0x7
c0005454:	83 c4 2c             	add    esp,0x2c
c0005457:	89 e8                	mov    eax,ebp
c0005459:	5b                   	pop    ebx
c000545a:	5e                   	pop    esi
c000545b:	5f                   	pop    edi
c000545c:	5d                   	pop    ebp
c000545d:	c3                   	ret    

c000545e <f_write>:
c000545e:	55                   	push   ebp
c000545f:	57                   	push   edi
c0005460:	56                   	push   esi
c0005461:	53                   	push   ebx
c0005462:	83 ec 2c             	sub    esp,0x2c
c0005465:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005469:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000546d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005473:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005477:	89 d8                	mov    eax,ebx
c0005479:	e8 f7 cc ff ff       	call   c0002175 <validate>
c000547e:	89 c5                	mov    ebp,eax
c0005480:	85 c0                	test   eax,eax
c0005482:	0f 85 86 02 00 00    	jne    c000570e <f_write+0x2b0>
c0005488:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000548c:	85 ed                	test   ebp,ebp
c000548e:	0f 85 7a 02 00 00    	jne    c000570e <f_write+0x2b0>
c0005494:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005498:	0f 84 6b 02 00 00    	je     c0005709 <f_write+0x2ab>
c000549e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054a2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00054a5:	0f 84 43 01 00 00    	je     c00055ee <f_write+0x190>
c00054ab:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00054ae:	89 c1                	mov    ecx,eax
c00054b0:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00054b4:	0f 83 34 01 00 00    	jae    c00055ee <f_write+0x190>
c00054ba:	f7 d0                	not    eax
c00054bc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054c0:	e9 29 01 00 00       	jmp    c00055ee <f_write+0x190>
c00054c5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054c8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054cb:	89 d0                	mov    eax,edx
c00054cd:	25 ff 01 00 00       	and    eax,0x1ff
c00054d2:	0f 85 00 02 00 00    	jne    c00056d8 <f_write+0x27a>
c00054d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054dc:	89 d6                	mov    esi,edx
c00054de:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054e2:	89 cf                	mov    edi,ecx
c00054e4:	48                   	dec    eax
c00054e5:	0f ac fe 09          	shrd   esi,edi,0x9
c00054e9:	21 f0                	and    eax,esi
c00054eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ef:	0f 84 06 01 00 00    	je     c00055fb <f_write+0x19d>
c00054f5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054f9:	0f 88 6e 01 00 00    	js     c000566d <f_write+0x20f>
c00054ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005503:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005506:	89 c8                	mov    eax,ecx
c0005508:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000550c:	e8 fa c7 ff ff       	call   c0001d0b <clst2sect>
c0005511:	89 d1                	mov    ecx,edx
c0005513:	09 c1                	or     ecx,eax
c0005515:	0f 84 1c 01 00 00    	je     c0005637 <f_write+0x1d9>
c000551b:	31 ff                	xor    edi,edi
c000551d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005521:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005525:	01 c6                	add    esi,eax
c0005527:	11 d7                	adc    edi,edx
c0005529:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005531:	0f 86 63 01 00 00    	jbe    c000569a <f_write+0x23c>
c0005537:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000553b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000553f:	c1 e8 09             	shr    eax,0x9
c0005542:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005546:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000554a:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000554e:	39 c2                	cmp    edx,eax
c0005550:	76 08                	jbe    c000555a <f_write+0xfc>
c0005552:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005556:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000555a:	83 ec 0c             	sub    esp,0xc
c000555d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005561:	57                   	push   edi
c0005562:	56                   	push   esi
c0005563:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005567:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000556b:	50                   	push   eax
c000556c:	e8 cc c4 ff ff       	call   c0001a3d <disk_write>
c0005571:	83 c4 20             	add    esp,0x20
c0005574:	85 c0                	test   eax,eax
c0005576:	0f 85 ce 00 00 00    	jne    c000564a <f_write+0x1ec>
c000557c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005582:	29 f0                	sub    eax,esi
c0005584:	19 fa                	sbb    edx,edi
c0005586:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000558a:	89 d7                	mov    edi,edx
c000558c:	ba 00 00 00 00       	mov    edx,0x0
c0005591:	89 f9                	mov    ecx,edi
c0005593:	19 d1                	sbb    ecx,edx
c0005595:	73 1c                	jae    c00055b3 <f_write+0x155>
c0005597:	89 c7                	mov    edi,eax
c0005599:	b9 00 02 00 00       	mov    ecx,0x200
c000559e:	c1 e7 09             	shl    edi,0x9
c00055a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055a4:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00055a8:	89 fa                	mov    edx,edi
c00055aa:	e8 42 c5 ff ff       	call   c0001af1 <mem_cpy>
c00055af:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00055b7:	c1 e6 09             	shl    esi,0x9
c00055ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00055be:	31 ff                	xor    edi,edi
c00055c0:	01 30                	add    DWORD PTR [eax],esi
c00055c2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055c6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055cd:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055d3:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055d6:	89 c1                	mov    ecx,eax
c00055d8:	39 f2                	cmp    edx,esi
c00055da:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055dd:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055e0:	19 f9                	sbb    ecx,edi
c00055e2:	73 04                	jae    c00055e8 <f_write+0x18a>
c00055e4:	89 f2                	mov    edx,esi
c00055e6:	89 f8                	mov    eax,edi
c00055e8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055eb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055ee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055f3:	0f 85 cc fe ff ff    	jne    c00054c5 <f_write+0x67>
c00055f9:	eb 2e                	jmp    c0005629 <f_write+0x1cb>
c00055fb:	89 c8                	mov    eax,ecx
c00055fd:	09 d0                	or     eax,edx
c00055ff:	75 0b                	jne    c000560c <f_write+0x1ae>
c0005601:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005604:	31 d2                	xor    edx,edx
c0005606:	85 c0                	test   eax,eax
c0005608:	75 28                	jne    c0005632 <f_write+0x1d4>
c000560a:	eb 12                	jmp    c000561e <f_write+0x1c0>
c000560c:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005610:	74 09                	je     c000561b <f_write+0x1bd>
c0005612:	89 d8                	mov    eax,ebx
c0005614:	e8 13 c7 ff ff       	call   c0001d2c <clmt_clust>
c0005619:	eb 0a                	jmp    c0005625 <f_write+0x1c7>
c000561b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000561e:	89 d8                	mov    eax,ebx
c0005620:	e8 a1 da ff ff       	call   c00030c6 <create_chain>
c0005625:	85 c0                	test   eax,eax
c0005627:	75 09                	jne    c0005632 <f_write+0x1d4>
c0005629:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000562d:	e9 dc 00 00 00       	jmp    c000570e <f_write+0x2b0>
c0005632:	83 f8 01             	cmp    eax,0x1
c0005635:	75 0e                	jne    c0005645 <f_write+0x1e7>
c0005637:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000563b:	bd 02 00 00 00       	mov    ebp,0x2
c0005640:	e9 c9 00 00 00       	jmp    c000570e <f_write+0x2b0>
c0005645:	83 f8 ff             	cmp    eax,0xffffffff
c0005648:	75 0e                	jne    c0005658 <f_write+0x1fa>
c000564a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000564e:	bd 01 00 00 00       	mov    ebp,0x1
c0005653:	e9 b6 00 00 00       	jmp    c000570e <f_write+0x2b0>
c0005658:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000565b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000565f:	0f 85 90 fe ff ff    	jne    c00054f5 <f_write+0x97>
c0005665:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005668:	e9 88 fe ff ff       	jmp    c00054f5 <f_write+0x97>
c000566d:	83 ec 0c             	sub    esp,0xc
c0005670:	8d 43 50             	lea    eax,[ebx+0x50]
c0005673:	6a 01                	push   0x1
c0005675:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005678:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000567b:	50                   	push   eax
c000567c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005680:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005684:	50                   	push   eax
c0005685:	e8 b3 c3 ff ff       	call   c0001a3d <disk_write>
c000568a:	83 c4 20             	add    esp,0x20
c000568d:	85 c0                	test   eax,eax
c000568f:	75 b9                	jne    c000564a <f_write+0x1ec>
c0005691:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005695:	e9 65 fe ff ff       	jmp    c00054ff <f_write+0xa1>
c000569a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000569d:	75 05                	jne    c00056a4 <f_write+0x246>
c000569f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00056a2:	74 2e                	je     c00056d2 <f_write+0x274>
c00056a4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00056a7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056aa:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00056ad:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00056b0:	73 20                	jae    c00056d2 <f_write+0x274>
c00056b2:	83 ec 0c             	sub    esp,0xc
c00056b5:	8d 43 50             	lea    eax,[ebx+0x50]
c00056b8:	6a 01                	push   0x1
c00056ba:	57                   	push   edi
c00056bb:	56                   	push   esi
c00056bc:	50                   	push   eax
c00056bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056c1:	50                   	push   eax
c00056c2:	e8 60 c3 ff ff       	call   c0001a27 <disk_read>
c00056c7:	83 c4 20             	add    esp,0x20
c00056ca:	85 c0                	test   eax,eax
c00056cc:	0f 85 78 ff ff ff    	jne    c000564a <f_write+0x1ec>
c00056d2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056d5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056d8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056db:	ba 00 02 00 00       	mov    edx,0x200
c00056e0:	25 ff 01 00 00       	and    eax,0x1ff
c00056e5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056e9:	29 c2                	sub    edx,eax
c00056eb:	39 d6                	cmp    esi,edx
c00056ed:	76 02                	jbe    c00056f1 <f_write+0x293>
c00056ef:	89 d6                	mov    esi,edx
c00056f1:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056f5:	89 f1                	mov    ecx,esi
c00056f7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056fb:	e8 f1 c3 ff ff       	call   c0001af1 <mem_cpy>
c0005700:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005704:	e9 b1 fe ff ff       	jmp    c00055ba <f_write+0x15c>
c0005709:	bd 07 00 00 00       	mov    ebp,0x7
c000570e:	83 c4 2c             	add    esp,0x2c
c0005711:	89 e8                	mov    eax,ebp
c0005713:	5b                   	pop    ebx
c0005714:	5e                   	pop    esi
c0005715:	5f                   	pop    edi
c0005716:	5d                   	pop    ebp
c0005717:	c3                   	ret    

c0005718 <f_sync>:
c0005718:	56                   	push   esi
c0005719:	53                   	push   ebx
c000571a:	83 ec 64             	sub    esp,0x64
c000571d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005721:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005725:	89 d8                	mov    eax,ebx
c0005727:	e8 49 ca ff ff       	call   c0002175 <validate>
c000572c:	85 c0                	test   eax,eax
c000572e:	0f 85 ba 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c0005734:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005737:	f6 c2 40             	test   dl,0x40
c000573a:	0f 84 ae 01 00 00    	je     c00058ee <f_sync+0x1d6>
c0005740:	84 d2                	test   dl,dl
c0005742:	79 33                	jns    c0005777 <f_sync+0x5f>
c0005744:	83 ec 0c             	sub    esp,0xc
c0005747:	8d 43 50             	lea    eax,[ebx+0x50]
c000574a:	6a 01                	push   0x1
c000574c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000574f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005752:	50                   	push   eax
c0005753:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005757:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000575b:	50                   	push   eax
c000575c:	e8 dc c2 ff ff       	call   c0001a3d <disk_write>
c0005761:	83 c4 20             	add    esp,0x20
c0005764:	89 c2                	mov    edx,eax
c0005766:	b8 01 00 00 00       	mov    eax,0x1
c000576b:	85 d2                	test   edx,edx
c000576d:	0f 85 7b 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c0005773:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000577e:	0f 85 11 01 00 00    	jne    c0005895 <f_sync+0x17d>
c0005784:	89 d8                	mov    eax,ebx
c0005786:	e8 13 d6 ff ff       	call   c0002d9e <fill_first_frag>
c000578b:	85 c0                	test   eax,eax
c000578d:	0f 85 5b 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c0005793:	83 c9 ff             	or     ecx,0xffffffff
c0005796:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005799:	89 d8                	mov    eax,ebx
c000579b:	e8 c9 d5 ff ff       	call   c0002d69 <fill_last_frag>
c00057a0:	85 c0                	test   eax,eax
c00057a2:	0f 85 46 01 00 00    	jne    c00058ee <f_sync+0x1d6>
c00057a8:	83 ec 0c             	sub    esp,0xc
c00057ab:	68 60 04 00 00       	push   0x460
c00057b0:	e8 f0 2a 00 00       	call   c00082a5 <ff_memalloc>
c00057b5:	83 c4 10             	add    esp,0x10
c00057b8:	89 c6                	mov    esi,eax
c00057ba:	b8 11 00 00 00       	mov    eax,0x11
c00057bf:	85 f6                	test   esi,esi
c00057c1:	0f 84 27 01 00 00    	je     c00058ee <f_sync+0x1d6>
c00057c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057cb:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057d1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057d7:	89 da                	mov    edx,ebx
c00057d9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057dd:	e8 af df ff ff       	call   c0003791 <load_obj_xdir>
c00057e2:	85 c0                	test   eax,eax
c00057e4:	0f 85 95 00 00 00    	jne    c000587f <f_sync+0x167>
c00057ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ee:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f1:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057f5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057f8:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057fb:	83 ca 01             	or     edx,0x1
c00057fe:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005801:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005807:	83 c0 34             	add    eax,0x34
c000580a:	e8 d9 c2 ff ff       	call   c0001ae8 <st_dword>
c000580f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005813:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005819:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000581c:	83 c0 38             	add    eax,0x38
c000581f:	e8 c7 c2 ff ff       	call   c0001aeb <st_qword>
c0005824:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000582b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000582e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005831:	83 c0 28             	add    eax,0x28
c0005834:	e8 b2 c2 ff ff       	call   c0001aeb <st_qword>
c0005839:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000583d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005842:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005845:	83 c0 0c             	add    eax,0xc
c0005848:	e8 9b c2 ff ff       	call   c0001ae8 <st_dword>
c000584d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005851:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005854:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005858:	31 d2                	xor    edx,edx
c000585a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000585d:	83 c0 10             	add    eax,0x10
c0005860:	e8 83 c2 ff ff       	call   c0001ae8 <st_dword>
c0005865:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005869:	e8 62 e1 ff ff       	call   c00039d0 <store_xdir>
c000586e:	85 c0                	test   eax,eax
c0005870:	75 0d                	jne    c000587f <f_sync+0x167>
c0005872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005876:	e8 00 eb ff ff       	call   c000437b <sync_fs>
c000587b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005883:	83 ec 0c             	sub    esp,0xc
c0005886:	56                   	push   esi
c0005887:	e8 2f 2a 00 00       	call   c00082bb <ff_memfree>
c000588c:	83 c4 10             	add    esp,0x10
c000588f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005893:	eb 59                	jmp    c00058ee <f_sync+0x1d6>
c0005895:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005898:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000589b:	e8 b0 c9 ff ff       	call   c0002250 <move_window>
c00058a0:	85 c0                	test   eax,eax
c00058a2:	75 4a                	jne    c00058ee <f_sync+0x1d6>
c00058a4:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00058a7:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00058ab:	89 f2                	mov    edx,esi
c00058ad:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00058b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00058b2:	e8 5f f3 ff ff       	call   c0004c16 <st_clust.isra.1>
c00058b7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ba:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058bd:	e8 26 c2 ff ff       	call   c0001ae8 <st_dword>
c00058c2:	8d 46 16             	lea    eax,[esi+0x16]
c00058c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00058ca:	e8 19 c2 ff ff       	call   c0001ae8 <st_dword>
c00058cf:	8d 46 12             	lea    eax,[esi+0x12]
c00058d2:	31 d2                	xor    edx,edx
c00058d4:	e8 0b c2 ff ff       	call   c0001ae4 <st_word>
c00058d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058dd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e5:	e8 91 ea ff ff       	call   c000437b <sync_fs>
c00058ea:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058ee:	83 c4 64             	add    esp,0x64
c00058f1:	5b                   	pop    ebx
c00058f2:	5e                   	pop    esi
c00058f3:	c3                   	ret    

c00058f4 <f_close>:
c00058f4:	53                   	push   ebx
c00058f5:	83 ec 24             	sub    esp,0x24
c00058f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058fc:	53                   	push   ebx
c00058fd:	e8 16 fe ff ff       	call   c0005718 <f_sync>
c0005902:	83 c4 10             	add    esp,0x10
c0005905:	85 c0                	test   eax,eax
c0005907:	75 15                	jne    c000591e <f_close+0x2a>
c0005909:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000590d:	89 d8                	mov    eax,ebx
c000590f:	e8 61 c8 ff ff       	call   c0002175 <validate>
c0005914:	85 c0                	test   eax,eax
c0005916:	75 06                	jne    c000591e <f_close+0x2a>
c0005918:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000591e:	83 c4 18             	add    esp,0x18
c0005921:	5b                   	pop    ebx
c0005922:	c3                   	ret    

c0005923 <f_lseek>:
c0005923:	55                   	push   ebp
c0005924:	57                   	push   edi
c0005925:	56                   	push   esi
c0005926:	53                   	push   ebx
c0005927:	83 ec 3c             	sub    esp,0x3c
c000592a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000592e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005932:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005936:	89 04 24             	mov    DWORD PTR [esp],eax
c0005939:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000593d:	89 d8                	mov    eax,ebx
c000593f:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005943:	e8 2d c8 ff ff       	call   c0002175 <validate>
c0005948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000594c:	85 c0                	test   eax,eax
c000594e:	0f 85 7a 04 00 00    	jne    c0005dce <f_lseek+0x4ab>
c0005954:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000595c:	85 c0                	test   eax,eax
c000595e:	0f 85 6a 04 00 00    	jne    c0005dce <f_lseek+0x4ab>
c0005964:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005968:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596b:	74 0c                	je     c0005979 <f_lseek+0x56>
c000596d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005970:	85 c0                	test   eax,eax
c0005972:	75 1f                	jne    c0005993 <f_lseek+0x70>
c0005974:	e9 b5 01 00 00       	jmp    c0005b2e <f_lseek+0x20b>
c0005979:	83 c9 ff             	or     ecx,0xffffffff
c000597c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000597f:	89 d8                	mov    eax,ebx
c0005981:	e8 e3 d3 ff ff       	call   c0002d69 <fill_last_frag>
c0005986:	85 c0                	test   eax,eax
c0005988:	74 e3                	je     c000596d <f_lseek+0x4a>
c000598a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000598e:	e9 3b 04 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c0005993:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005998:	0f 85 ac 00 00 00    	jne    c0005a4a <f_lseek+0x127>
c000599e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00059a2:	0f 85 a2 00 00 00    	jne    c0005a4a <f_lseek+0x127>
c00059a8:	8d 78 04             	lea    edi,[eax+0x4]
c00059ab:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00059ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00059b0:	be 02 00 00 00       	mov    esi,0x2
c00059b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059b9:	85 ed                	test   ebp,ebp
c00059bb:	74 73                	je     c0005a30 <f_lseek+0x10d>
c00059bd:	89 e9                	mov    ecx,ebp
c00059bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059c6:	ff 04 24             	inc    DWORD PTR [esp]
c00059c9:	89 ca                	mov    edx,ecx
c00059cb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059cf:	89 d8                	mov    eax,ebx
c00059d1:	e8 02 d4 ff ff       	call   c0002dd8 <get_fat>
c00059d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059da:	83 f8 01             	cmp    eax,0x1
c00059dd:	77 11                	ja     c00059f0 <f_lseek+0xcd>
c00059df:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059e3:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059eb:	e9 de 03 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c00059f0:	83 f8 ff             	cmp    eax,0xffffffff
c00059f3:	75 11                	jne    c0005a06 <f_lseek+0xe3>
c00059f5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059f9:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005a01:	e9 c8 03 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c0005a06:	8d 51 01             	lea    edx,[ecx+0x1]
c0005a09:	89 c1                	mov    ecx,eax
c0005a0b:	39 c2                	cmp    edx,eax
c0005a0d:	74 b7                	je     c00059c6 <f_lseek+0xa3>
c0005a0f:	83 c6 02             	add    esi,0x2
c0005a12:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005a16:	72 0b                	jb     c0005a23 <f_lseek+0x100>
c0005a18:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005a1b:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005a1e:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a20:	83 c7 08             	add    edi,0x8
c0005a23:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a27:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a2a:	76 04                	jbe    c0005a30 <f_lseek+0x10d>
c0005a2c:	89 c5                	mov    ebp,eax
c0005a2e:	eb 8d                	jmp    c00059bd <f_lseek+0x9a>
c0005a30:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a33:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a37:	89 30                	mov    DWORD PTR [eax],esi
c0005a39:	0f 87 87 03 00 00    	ja     c0005dc6 <f_lseek+0x4a3>
c0005a3f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a45:	e9 84 03 00 00       	jmp    c0005dce <f_lseek+0x4ab>
c0005a4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a4d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a5c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a63:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a67:	73 0f                	jae    c0005a78 <f_lseek+0x155>
c0005a69:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a80:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a83:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a8a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a8e:	0f 84 3a 03 00 00    	je     c0005dce <f_lseek+0x4ab>
c0005a94:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a98:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a9c:	83 c6 ff             	add    esi,0xffffffff
c0005a9f:	89 d8                	mov    eax,ebx
c0005aa1:	83 d7 ff             	adc    edi,0xffffffff
c0005aa4:	89 f2                	mov    edx,esi
c0005aa6:	89 f9                	mov    ecx,edi
c0005aa8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005aac:	89 34 24             	mov    DWORD PTR [esp],esi
c0005aaf:	e8 78 c2 ff ff       	call   c0001d2c <clmt_clust>
c0005ab4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ab8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005abb:	89 c2                	mov    edx,eax
c0005abd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac1:	89 c8                	mov    eax,ecx
c0005ac3:	e8 43 c2 ff ff       	call   c0001d0b <clst2sect>
c0005ac8:	89 d7                	mov    edi,edx
c0005aca:	09 c7                	or     edi,eax
c0005acc:	0f 84 0d ff ff ff    	je     c00059df <f_lseek+0xbc>
c0005ad2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ad6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005adc:	0f 84 ec 02 00 00    	je     c0005dce <f_lseek+0x4ab>
c0005ae2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ae6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005aea:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005aed:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005af1:	0f ac fe 09          	shrd   esi,edi,0x9
c0005af5:	4d                   	dec    ebp
c0005af6:	31 ff                	xor    edi,edi
c0005af8:	21 ee                	and    esi,ebp
c0005afa:	01 c6                	add    esi,eax
c0005afc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005aff:	11 d7                	adc    edi,edx
c0005b01:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005b04:	39 fa                	cmp    edx,edi
c0005b06:	75 08                	jne    c0005b10 <f_lseek+0x1ed>
c0005b08:	39 f0                	cmp    eax,esi
c0005b0a:	0f 84 be 02 00 00    	je     c0005dce <f_lseek+0x4ab>
c0005b10:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005b13:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005b17:	0f 89 80 02 00 00    	jns    c0005d9d <f_lseek+0x47a>
c0005b1d:	83 ec 0c             	sub    esp,0xc
c0005b20:	6a 01                	push   0x1
c0005b22:	52                   	push   edx
c0005b23:	50                   	push   eax
c0005b24:	55                   	push   ebp
c0005b25:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b29:	e9 5a 02 00 00       	jmp    c0005d88 <f_lseek+0x465>
c0005b2e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b32:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b35:	74 16                	je     c0005b4d <f_lseek+0x22a>
c0005b37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b3c:	76 0f                	jbe    c0005b4d <f_lseek+0x22a>
c0005b3e:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b4d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b50:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b53:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b56:	89 c7                	mov    edi,eax
c0005b58:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b5c:	73 0d                	jae    c0005b6b <f_lseek+0x248>
c0005b5e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b62:	75 07                	jne    c0005b6b <f_lseek+0x248>
c0005b64:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b6b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b6e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b71:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b75:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b7c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b83:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b86:	75 09                	jne    c0005b91 <f_lseek+0x26e>
c0005b88:	31 f6                	xor    esi,esi
c0005b8a:	31 ff                	xor    edi,edi
c0005b8c:	e9 af 01 00 00       	jmp    c0005d40 <f_lseek+0x41d>
c0005b91:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b95:	89 d7                	mov    edi,edx
c0005b97:	c1 e1 09             	shl    ecx,0x9
c0005b9a:	09 c7                	or     edi,eax
c0005b9c:	89 cd                	mov    ebp,ecx
c0005b9e:	74 6d                	je     c0005c0d <f_lseek+0x2ea>
c0005ba0:	83 c0 ff             	add    eax,0xffffffff
c0005ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba7:	83 d2 ff             	adc    edx,0xffffffff
c0005baa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005bad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bb1:	83 c0 ff             	add    eax,0xffffffff
c0005bb4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005bb8:	83 d2 ff             	adc    edx,0xffffffff
c0005bbb:	31 ff                	xor    edi,edi
c0005bbd:	57                   	push   edi
c0005bbe:	51                   	push   ecx
c0005bbf:	52                   	push   edx
c0005bc0:	50                   	push   eax
c0005bc1:	e8 b6 d7 01 00       	call   c002337c <__udivdi3>
c0005bc6:	83 c4 10             	add    esp,0x10
c0005bc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bd1:	57                   	push   edi
c0005bd2:	55                   	push   ebp
c0005bd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bdb:	e8 9c d7 01 00       	call   c002337c <__udivdi3>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005be7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005beb:	19 d1                	sbb    ecx,edx
c0005bed:	72 1e                	jb     c0005c0d <f_lseek+0x2ea>
c0005bef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bf3:	89 e9                	mov    ecx,ebp
c0005bf5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bf8:	f7 d9                	neg    ecx
c0005bfa:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bfd:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005c01:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005c04:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005c07:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005c0b:	eb 28                	jmp    c0005c35 <f_lseek+0x312>
c0005c0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005c10:	85 c0                	test   eax,eax
c0005c12:	75 1e                	jne    c0005c32 <f_lseek+0x30f>
c0005c14:	31 d2                	xor    edx,edx
c0005c16:	89 d8                	mov    eax,ebx
c0005c18:	e8 a9 d4 ff ff       	call   c00030c6 <create_chain>
c0005c1d:	83 f8 01             	cmp    eax,0x1
c0005c20:	0f 84 b9 fd ff ff    	je     c00059df <f_lseek+0xbc>
c0005c26:	83 f8 ff             	cmp    eax,0xffffffff
c0005c29:	0f 84 c6 fd ff ff    	je     c00059f5 <f_lseek+0xd2>
c0005c2f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c32:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c35:	85 c0                	test   eax,eax
c0005c37:	0f 84 4b ff ff ff    	je     c0005b88 <f_lseek+0x265>
c0005c3d:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c41:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c49:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c4c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c50:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c53:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c56:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c5a:	0f 83 9d 00 00 00    	jae    c0005cfd <f_lseek+0x3da>
c0005c60:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c64:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c68:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c6b:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c6f:	01 f2                	add    edx,esi
c0005c71:	11 f9                	adc    ecx,edi
c0005c73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c77:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c7b:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c7e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c81:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c84:	f6 c1 02             	test   cl,0x2
c0005c87:	74 35                	je     c0005cbe <f_lseek+0x39b>
c0005c89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c8d:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c90:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c93:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c97:	73 16                	jae    c0005caf <f_lseek+0x38c>
c0005c99:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005ca1:	88 ca                	mov    dl,cl
c0005ca3:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005ca6:	83 ca 40             	or     edx,0x40
c0005ca9:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005cac:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005caf:	89 c2                	mov    edx,eax
c0005cb1:	89 d8                	mov    eax,ebx
c0005cb3:	e8 0e d4 ff ff       	call   c00030c6 <create_chain>
c0005cb8:	85 c0                	test   eax,eax
c0005cba:	75 0b                	jne    c0005cc7 <f_lseek+0x3a4>
c0005cbc:	eb 30                	jmp    c0005cee <f_lseek+0x3cb>
c0005cbe:	89 c2                	mov    edx,eax
c0005cc0:	89 d8                	mov    eax,ebx
c0005cc2:	e8 11 d1 ff ff       	call   c0002dd8 <get_fat>
c0005cc7:	83 f8 ff             	cmp    eax,0xffffffff
c0005cca:	0f 84 25 fd ff ff    	je     c00059f5 <f_lseek+0xd2>
c0005cd0:	83 f8 01             	cmp    eax,0x1
c0005cd3:	0f 86 06 fd ff ff    	jbe    c00059df <f_lseek+0xbc>
c0005cd9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cdd:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ce0:	0f 86 f9 fc ff ff    	jbe    c00059df <f_lseek+0xbc>
c0005ce6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ce9:	e9 5b ff ff ff       	jmp    c0005c49 <f_lseek+0x326>
c0005cee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cf5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cfd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005d00:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005d04:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005d07:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005d0a:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005d0d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005d13:	0f 84 6f fe ff ff    	je     c0005b88 <f_lseek+0x265>
c0005d19:	89 c2                	mov    edx,eax
c0005d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005d1f:	e8 e7 bf ff ff       	call   c0001d0b <clst2sect>
c0005d24:	89 d7                	mov    edi,edx
c0005d26:	09 c7                	or     edi,eax
c0005d28:	0f 84 b1 fc ff ff    	je     c00059df <f_lseek+0xbc>
c0005d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d32:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d35:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d39:	c1 ef 09             	shr    edi,0x9
c0005d3c:	01 c6                	add    esi,eax
c0005d3e:	11 d7                	adc    edi,edx
c0005d40:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d43:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d46:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d49:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d4c:	19 d1                	sbb    ecx,edx
c0005d4e:	73 0a                	jae    c0005d5a <f_lseek+0x437>
c0005d50:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d53:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d56:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d5a:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d5f:	74 6d                	je     c0005dce <f_lseek+0x4ab>
c0005d61:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d67:	39 fa                	cmp    edx,edi
c0005d69:	75 04                	jne    c0005d6f <f_lseek+0x44c>
c0005d6b:	39 f0                	cmp    eax,esi
c0005d6d:	74 5f                	je     c0005dce <f_lseek+0x4ab>
c0005d6f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d72:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d76:	79 25                	jns    c0005d9d <f_lseek+0x47a>
c0005d78:	83 ec 0c             	sub    esp,0xc
c0005d7b:	6a 01                	push   0x1
c0005d7d:	52                   	push   edx
c0005d7e:	50                   	push   eax
c0005d7f:	55                   	push   ebp
c0005d80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d84:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d88:	50                   	push   eax
c0005d89:	e8 af bc ff ff       	call   c0001a3d <disk_write>
c0005d8e:	83 c4 20             	add    esp,0x20
c0005d91:	85 c0                	test   eax,eax
c0005d93:	0f 85 5c fc ff ff    	jne    c00059f5 <f_lseek+0xd2>
c0005d99:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d9d:	83 ec 0c             	sub    esp,0xc
c0005da0:	6a 01                	push   0x1
c0005da2:	57                   	push   edi
c0005da3:	56                   	push   esi
c0005da4:	55                   	push   ebp
c0005da5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005da9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005dad:	50                   	push   eax
c0005dae:	e8 74 bc ff ff       	call   c0001a27 <disk_read>
c0005db3:	83 c4 20             	add    esp,0x20
c0005db6:	85 c0                	test   eax,eax
c0005db8:	0f 85 37 fc ff ff    	jne    c00059f5 <f_lseek+0xd2>
c0005dbe:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005dc1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005dc4:	eb 08                	jmp    c0005dce <f_lseek+0x4ab>
c0005dc6:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005dce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005dd2:	83 c4 3c             	add    esp,0x3c
c0005dd5:	5b                   	pop    ebx
c0005dd6:	5e                   	pop    esi
c0005dd7:	5f                   	pop    edi
c0005dd8:	5d                   	pop    ebp
c0005dd9:	c3                   	ret    

c0005dda <f_opendir>:
c0005dda:	56                   	push   esi
c0005ddb:	b8 09 00 00 00       	mov    eax,0x9
c0005de0:	53                   	push   ebx
c0005de1:	83 ec 24             	sub    esp,0x24
c0005de4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005de8:	85 db                	test   ebx,ebx
c0005dea:	0f 84 e6 00 00 00    	je     c0005ed6 <f_opendir+0xfc>
c0005df0:	31 c9                	xor    ecx,ecx
c0005df2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005df6:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dfa:	e8 03 c7 ff ff       	call   c0002502 <mount_volume>
c0005dff:	85 c0                	test   eax,eax
c0005e01:	0f 85 c9 00 00 00    	jne    c0005ed0 <f_opendir+0xf6>
c0005e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	89 03                	mov    DWORD PTR [ebx],eax
c0005e10:	68 60 04 00 00       	push   0x460
c0005e15:	e8 8b 24 00 00       	call   c00082a5 <ff_memalloc>
c0005e1a:	83 c4 10             	add    esp,0x10
c0005e1d:	89 c6                	mov    esi,eax
c0005e1f:	b8 11 00 00 00       	mov    eax,0x11
c0005e24:	85 f6                	test   esi,esi
c0005e26:	0f 84 aa 00 00 00    	je     c0005ed6 <f_opendir+0xfc>
c0005e2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e30:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e36:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e39:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e3c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e40:	89 d8                	mov    eax,ebx
c0005e42:	e8 31 ee ff ff       	call   c0004c78 <follow_path>
c0005e47:	85 c0                	test   eax,eax
c0005e49:	75 61                	jne    c0005eac <f_opendir+0xd2>
c0005e4b:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e4f:	78 46                	js     c0005e97 <f_opendir+0xbd>
c0005e51:	b8 05 00 00 00       	mov    eax,0x5
c0005e56:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e5a:	74 50                	je     c0005eac <f_opendir+0xd2>
c0005e5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e60:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e62:	3c 04                	cmp    al,0x4
c0005e64:	75 26                	jne    c0005e8c <f_opendir+0xb2>
c0005e66:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e6c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e6f:	30 d2                	xor    dl,dl
c0005e71:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e75:	09 c2                	or     edx,eax
c0005e77:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e7a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e7d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e80:	89 da                	mov    edx,ebx
c0005e82:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e85:	e8 b4 ed ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c0005e8a:	eb 0b                	jmp    c0005e97 <f_opendir+0xbd>
c0005e8c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e8f:	e8 59 ed ff ff       	call   c0004bed <ld_clust.isra.0>
c0005e94:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e9b:	31 d2                	xor    edx,edx
c0005e9d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005ea1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005ea5:	89 d8                	mov    eax,ebx
c0005ea7:	e8 22 d1 ff ff       	call   c0002fce <dir_sdi>
c0005eac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005eb0:	83 ec 0c             	sub    esp,0xc
c0005eb3:	56                   	push   esi
c0005eb4:	e8 02 24 00 00       	call   c00082bb <ff_memfree>
c0005eb9:	83 c4 10             	add    esp,0x10
c0005ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ec0:	83 f8 04             	cmp    eax,0x4
c0005ec3:	74 06                	je     c0005ecb <f_opendir+0xf1>
c0005ec5:	85 c0                	test   eax,eax
c0005ec7:	74 0d                	je     c0005ed6 <f_opendir+0xfc>
c0005ec9:	eb 05                	jmp    c0005ed0 <f_opendir+0xf6>
c0005ecb:	b8 05 00 00 00       	mov    eax,0x5
c0005ed0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed6:	83 c4 24             	add    esp,0x24
c0005ed9:	5b                   	pop    ebx
c0005eda:	5e                   	pop    esi
c0005edb:	c3                   	ret    

c0005edc <f_closedir>:
c0005edc:	53                   	push   ebx
c0005edd:	83 ec 18             	sub    esp,0x18
c0005ee0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ee4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 86 c2 ff ff       	call   c0002175 <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 06                	jne    c0005ef9 <f_closedir+0x1d>
c0005ef3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ef9:	83 c4 18             	add    esp,0x18
c0005efc:	5b                   	pop    ebx
c0005efd:	c3                   	ret    

c0005efe <f_readdir>:
c0005efe:	57                   	push   edi
c0005eff:	56                   	push   esi
c0005f00:	53                   	push   ebx
c0005f01:	83 ec 20             	sub    esp,0x20
c0005f04:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f08:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005f0c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005f10:	89 d8                	mov    eax,ebx
c0005f12:	e8 5e c2 ff ff       	call   c0002175 <validate>
c0005f17:	85 c0                	test   eax,eax
c0005f19:	75 77                	jne    c0005f92 <f_readdir+0x94>
c0005f1b:	85 ff                	test   edi,edi
c0005f1d:	75 0b                	jne    c0005f2a <f_readdir+0x2c>
c0005f1f:	31 d2                	xor    edx,edx
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 a6 d0 ff ff       	call   c0002fce <dir_sdi>
c0005f28:	eb 68                	jmp    c0005f92 <f_readdir+0x94>
c0005f2a:	83 ec 0c             	sub    esp,0xc
c0005f2d:	68 60 04 00 00       	push   0x460
c0005f32:	e8 6e 23 00 00       	call   c00082a5 <ff_memalloc>
c0005f37:	83 c4 10             	add    esp,0x10
c0005f3a:	89 c6                	mov    esi,eax
c0005f3c:	b8 11 00 00 00       	mov    eax,0x11
c0005f41:	85 f6                	test   esi,esi
c0005f43:	74 4d                	je     c0005f92 <f_readdir+0x94>
c0005f45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f49:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f4f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f52:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f55:	31 d2                	xor    edx,edx
c0005f57:	89 d8                	mov    eax,ebx
c0005f59:	e8 80 d8 ff ff       	call   c00037de <dir_read>
c0005f5e:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f63:	75 19                	jne    c0005f7e <f_readdir+0x80>
c0005f65:	89 fa                	mov    edx,edi
c0005f67:	89 d8                	mov    eax,ebx
c0005f69:	e8 7e ea ff ff       	call   c00049ec <get_fileinfo>
c0005f6e:	31 d2                	xor    edx,edx
c0005f70:	89 d8                	mov    eax,ebx
c0005f72:	e8 af d5 ff ff       	call   c0003526 <dir_next>
c0005f77:	83 f8 04             	cmp    eax,0x4
c0005f7a:	75 02                	jne    c0005f7e <f_readdir+0x80>
c0005f7c:	31 c0                	xor    eax,eax
c0005f7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f82:	83 ec 0c             	sub    esp,0xc
c0005f85:	56                   	push   esi
c0005f86:	e8 30 23 00 00       	call   c00082bb <ff_memfree>
c0005f8b:	83 c4 10             	add    esp,0x10
c0005f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f92:	83 c4 20             	add    esp,0x20
c0005f95:	5b                   	pop    ebx
c0005f96:	5e                   	pop    esi
c0005f97:	5f                   	pop    edi
c0005f98:	c3                   	ret    

c0005f99 <f_stat>:
c0005f99:	57                   	push   edi
c0005f9a:	31 c9                	xor    ecx,ecx
c0005f9c:	56                   	push   esi
c0005f9d:	53                   	push   ebx
c0005f9e:	83 ec 50             	sub    esp,0x50
c0005fa1:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005fa5:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005fa9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005fad:	e8 50 c5 ff ff       	call   c0002502 <mount_volume>
c0005fb2:	89 c3                	mov    ebx,eax
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	75 67                	jne    c000601f <f_stat+0x86>
c0005fb8:	83 ec 0c             	sub    esp,0xc
c0005fbb:	bb 11 00 00 00       	mov    ebx,0x11
c0005fc0:	68 60 04 00 00       	push   0x460
c0005fc5:	e8 db 22 00 00       	call   c00082a5 <ff_memalloc>
c0005fca:	83 c4 10             	add    esp,0x10
c0005fcd:	89 c6                	mov    esi,eax
c0005fcf:	85 c0                	test   eax,eax
c0005fd1:	74 4c                	je     c000601f <f_stat+0x86>
c0005fd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fd7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fdd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fe0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fe3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fe7:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005feb:	e8 88 ec ff ff       	call   c0004c78 <follow_path>
c0005ff0:	89 c3                	mov    ebx,eax
c0005ff2:	85 c0                	test   eax,eax
c0005ff4:	75 1d                	jne    c0006013 <f_stat+0x7a>
c0005ff6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005ffb:	78 11                	js     c000600e <f_stat+0x75>
c0005ffd:	85 ff                	test   edi,edi
c0005fff:	74 12                	je     c0006013 <f_stat+0x7a>
c0006001:	89 fa                	mov    edx,edi
c0006003:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006007:	e8 e0 e9 ff ff       	call   c00049ec <get_fileinfo>
c000600c:	eb 05                	jmp    c0006013 <f_stat+0x7a>
c000600e:	bb 06 00 00 00       	mov    ebx,0x6
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	56                   	push   esi
c0006017:	e8 9f 22 00 00       	call   c00082bb <ff_memfree>
c000601c:	83 c4 10             	add    esp,0x10
c000601f:	83 c4 50             	add    esp,0x50
c0006022:	89 d8                	mov    eax,ebx
c0006024:	5b                   	pop    ebx
c0006025:	5e                   	pop    esi
c0006026:	5f                   	pop    edi
c0006027:	c3                   	ret    

c0006028 <f_getfree>:
c0006028:	55                   	push   ebp
c0006029:	31 c9                	xor    ecx,ecx
c000602b:	57                   	push   edi
c000602c:	56                   	push   esi
c000602d:	53                   	push   ebx
c000602e:	83 ec 5c             	sub    esp,0x5c
c0006031:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006035:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006039:	e8 c4 c4 ff ff       	call   c0002502 <mount_volume>
c000603e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006042:	85 c0                	test   eax,eax
c0006044:	0f 85 9d 01 00 00    	jne    c00061e7 <f_getfree+0x1bf>
c000604a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000604e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006052:	89 02                	mov    DWORD PTR [edx],eax
c0006054:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006057:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000605a:	8d 71 fe             	lea    esi,[ecx-0x2]
c000605d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006061:	39 f2                	cmp    edx,esi
c0006063:	77 0b                	ja     c0006070 <f_getfree+0x48>
c0006065:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006069:	89 10                	mov    DWORD PTR [eax],edx
c000606b:	e9 77 01 00 00       	jmp    c00061e7 <f_getfree+0x1bf>
c0006070:	8a 10                	mov    dl,BYTE PTR [eax]
c0006072:	80 fa 01             	cmp    dl,0x1
c0006075:	75 3a                	jne    c00060b1 <f_getfree+0x89>
c0006077:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000607b:	be 02 00 00 00       	mov    esi,0x2
c0006080:	31 db                	xor    ebx,ebx
c0006082:	89 f2                	mov    edx,esi
c0006084:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006088:	e8 4b cd ff ff       	call   c0002dd8 <get_fat>
c000608d:	83 f8 ff             	cmp    eax,0xffffffff
c0006090:	0f 84 28 01 00 00    	je     c00061be <f_getfree+0x196>
c0006096:	83 f8 01             	cmp    eax,0x1
c0006099:	0f 84 29 01 00 00    	je     c00061c8 <f_getfree+0x1a0>
c000609f:	83 d3 00             	adc    ebx,0x0
c00060a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a6:	46                   	inc    esi
c00060a7:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00060aa:	77 d6                	ja     c0006082 <f_getfree+0x5a>
c00060ac:	e9 25 01 00 00       	jmp    c00061d6 <f_getfree+0x1ae>
c00060b1:	80 fa 04             	cmp    dl,0x4
c00060b4:	0f 85 88 00 00 00    	jne    c0006142 <f_getfree+0x11a>
c00060ba:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00060bd:	31 ed                	xor    ebp,ebp
c00060bf:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060ca:	31 db                	xor    ebx,ebx
c00060cc:	85 ed                	test   ebp,ebp
c00060ce:	75 3f                	jne    c000610f <f_getfree+0xe7>
c00060d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060d8:	83 c0 01             	add    eax,0x1
c00060db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060df:	83 d2 00             	adc    edx,0x0
c00060e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060f2:	e8 59 c1 ff ff       	call   c0002250 <move_window>
c00060f7:	85 c0                	test   eax,eax
c00060f9:	0f 85 d3 00 00 00    	jne    c00061d2 <f_getfree+0x1aa>
c00060ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006103:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006107:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000610b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000610f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006113:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006116:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c000611a:	89 cf                	mov    edi,ecx
c000611c:	85 f6                	test   esi,esi
c000611e:	74 12                	je     c0006132 <f_getfree+0x10a>
c0006120:	88 c1                	mov    cl,al
c0006122:	83 e1 01             	and    ecx,0x1
c0006125:	80 f9 01             	cmp    cl,0x1
c0006128:	83 d3 00             	adc    ebx,0x0
c000612b:	d0 e8                	shr    al,1
c000612d:	4e                   	dec    esi
c000612e:	39 fe                	cmp    esi,edi
c0006130:	75 ea                	jne    c000611c <f_getfree+0xf4>
c0006132:	45                   	inc    ebp
c0006133:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006139:	85 f6                	test   esi,esi
c000613b:	75 8f                	jne    c00060cc <f_getfree+0xa4>
c000613d:	e9 94 00 00 00       	jmp    c00061d6 <f_getfree+0x1ae>
c0006142:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006145:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006148:	31 f6                	xor    esi,esi
c000614a:	31 db                	xor    ebx,ebx
c000614c:	85 f6                	test   esi,esi
c000614e:	75 1b                	jne    c000616b <f_getfree+0x143>
c0006150:	89 d7                	mov    edi,edx
c0006152:	89 cd                	mov    ebp,ecx
c0006154:	83 c7 01             	add    edi,0x1
c0006157:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000615b:	83 d5 00             	adc    ebp,0x0
c000615e:	e8 ed c0 ff ff       	call   c0002250 <move_window>
c0006163:	85 c0                	test   eax,eax
c0006165:	75 6b                	jne    c00061d2 <f_getfree+0x1aa>
c0006167:	89 fa                	mov    edx,edi
c0006169:	89 e9                	mov    ecx,ebp
c000616b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000616f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006173:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006177:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000617a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000617e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006182:	75 11                	jne    c0006195 <f_getfree+0x16d>
c0006184:	e8 e9 b8 ff ff       	call   c0001a72 <ld_word>
c0006189:	66 83 f8 01          	cmp    ax,0x1
c000618d:	83 d3 00             	adc    ebx,0x0
c0006190:	83 c6 02             	add    esi,0x2
c0006193:	eb 13                	jmp    c00061a8 <f_getfree+0x180>
c0006195:	e8 e5 b8 ff ff       	call   c0001a7f <ld_dword>
c000619a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000619f:	83 f8 01             	cmp    eax,0x1
c00061a2:	83 d3 00             	adc    ebx,0x0
c00061a5:	83 c6 04             	add    esi,0x4
c00061a8:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00061ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00061b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00061b6:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00061ba:	75 90                	jne    c000614c <f_getfree+0x124>
c00061bc:	eb 18                	jmp    c00061d6 <f_getfree+0x1ae>
c00061be:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061c6:	eb 0e                	jmp    c00061d6 <f_getfree+0x1ae>
c00061c8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061d0:	eb 04                	jmp    c00061d6 <f_getfree+0x1ae>
c00061d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061d6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061da:	89 18                	mov    DWORD PTR [eax],ebx
c00061dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e0:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061e3:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061eb:	83 c4 5c             	add    esp,0x5c
c00061ee:	5b                   	pop    ebx
c00061ef:	5e                   	pop    esi
c00061f0:	5f                   	pop    edi
c00061f1:	5d                   	pop    ebp
c00061f2:	c3                   	ret    

c00061f3 <f_truncate>:
c00061f3:	56                   	push   esi
c00061f4:	53                   	push   ebx
c00061f5:	83 ec 14             	sub    esp,0x14
c00061f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061fc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006200:	89 d8                	mov    eax,ebx
c0006202:	e8 6e bf ff ff       	call   c0002175 <validate>
c0006207:	89 c6                	mov    esi,eax
c0006209:	85 c0                	test   eax,eax
c000620b:	0f 85 d2 00 00 00    	jne    c00062e3 <f_truncate+0xf0>
c0006211:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006215:	85 f6                	test   esi,esi
c0006217:	0f 85 c6 00 00 00    	jne    c00062e3 <f_truncate+0xf0>
c000621d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006221:	0f 84 b7 00 00 00    	je     c00062de <f_truncate+0xeb>
c0006227:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000622a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000622d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006230:	89 d1                	mov    ecx,edx
c0006232:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006235:	0f 83 a8 00 00 00    	jae    c00062e3 <f_truncate+0xf0>
c000623b:	09 c2                	or     edx,eax
c000623d:	75 15                	jne    c0006254 <f_truncate+0x61>
c000623f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006242:	31 c9                	xor    ecx,ecx
c0006244:	89 d8                	mov    eax,ebx
c0006246:	e8 7a d0 ff ff       	call   c00032c5 <remove_chain>
c000624b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006252:	eb 35                	jmp    c0006289 <f_truncate+0x96>
c0006254:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006257:	89 d8                	mov    eax,ebx
c0006259:	e8 7a cb ff ff       	call   c0002dd8 <get_fat>
c000625e:	89 c2                	mov    edx,eax
c0006260:	b8 01 00 00 00       	mov    eax,0x1
c0006265:	83 fa ff             	cmp    edx,0xffffffff
c0006268:	74 1f                	je     c0006289 <f_truncate+0x96>
c000626a:	b8 02 00 00 00       	mov    eax,0x2
c000626f:	83 fa 01             	cmp    edx,0x1
c0006272:	74 15                	je     c0006289 <f_truncate+0x96>
c0006274:	31 c0                	xor    eax,eax
c0006276:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000627a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000627d:	76 0a                	jbe    c0006289 <f_truncate+0x96>
c000627f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006282:	89 d8                	mov    eax,ebx
c0006284:	e8 3c d0 ff ff       	call   c00032c5 <remove_chain>
c0006289:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000628c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000628f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006292:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006295:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006298:	83 ca 40             	or     edx,0x40
c000629b:	85 c0                	test   eax,eax
c000629d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00062a0:	75 35                	jne    c00062d7 <f_truncate+0xe4>
c00062a2:	84 d2                	test   dl,dl
c00062a4:	79 3d                	jns    c00062e3 <f_truncate+0xf0>
c00062a6:	83 ec 0c             	sub    esp,0xc
c00062a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00062ac:	6a 01                	push   0x1
c00062ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00062b1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00062b4:	50                   	push   eax
c00062b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00062b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00062bd:	50                   	push   eax
c00062be:	e8 7a b7 ff ff       	call   c0001a3d <disk_write>
c00062c3:	83 c4 20             	add    esp,0x20
c00062c6:	85 c0                	test   eax,eax
c00062c8:	75 08                	jne    c00062d2 <f_truncate+0xdf>
c00062ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062ce:	31 f6                	xor    esi,esi
c00062d0:	eb 11                	jmp    c00062e3 <f_truncate+0xf0>
c00062d2:	b8 01 00 00 00       	mov    eax,0x1
c00062d7:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062da:	89 c6                	mov    esi,eax
c00062dc:	eb 05                	jmp    c00062e3 <f_truncate+0xf0>
c00062de:	be 07 00 00 00       	mov    esi,0x7
c00062e3:	89 f0                	mov    eax,esi
c00062e5:	83 c4 14             	add    esp,0x14
c00062e8:	5b                   	pop    ebx
c00062e9:	5e                   	pop    esi
c00062ea:	c3                   	ret    

c00062eb <f_unlink>:
c00062eb:	56                   	push   esi
c00062ec:	b9 02 00 00 00       	mov    ecx,0x2
c00062f1:	53                   	push   ebx
c00062f2:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062f8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062fc:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006303:	e8 fa c1 ff ff       	call   c0002502 <mount_volume>
c0006308:	85 c0                	test   eax,eax
c000630a:	0f 85 55 01 00 00    	jne    c0006465 <f_unlink+0x17a>
c0006310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006314:	83 ec 0c             	sub    esp,0xc
c0006317:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000631b:	68 60 04 00 00       	push   0x460
c0006320:	e8 80 1f 00 00       	call   c00082a5 <ff_memalloc>
c0006325:	83 c4 10             	add    esp,0x10
c0006328:	89 c3                	mov    ebx,eax
c000632a:	b8 11 00 00 00       	mov    eax,0x11
c000632f:	85 db                	test   ebx,ebx
c0006331:	0f 84 2e 01 00 00    	je     c0006465 <f_unlink+0x17a>
c0006337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000633b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006341:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006344:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006347:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000634e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006352:	e8 21 e9 ff ff       	call   c0004c78 <follow_path>
c0006357:	85 c0                	test   eax,eax
c0006359:	0f 85 f2 00 00 00    	jne    c0006451 <f_unlink+0x166>
c000635f:	b8 06 00 00 00       	mov    eax,0x6
c0006364:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000636c:	0f 88 df 00 00 00    	js     c0006451 <f_unlink+0x166>
c0006372:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006377:	74 0a                	je     c0006383 <f_unlink+0x98>
c0006379:	b8 07 00 00 00       	mov    eax,0x7
c000637e:	e9 ce 00 00 00       	jmp    c0006451 <f_unlink+0x166>
c0006383:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006387:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000638b:	8a 02                	mov    al,BYTE PTR [edx]
c000638d:	3c 04                	cmp    al,0x4
c000638f:	75 12                	jne    c00063a3 <f_unlink+0xb8>
c0006391:	8d 42 10             	lea    eax,[edx+0x10]
c0006394:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006398:	e8 a1 e8 ff ff       	call   c0004c3e <init_alloc_info.isra.2>
c000639d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00063a1:	eb 0e                	jmp    c00063b1 <f_unlink+0xc6>
c00063a3:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00063aa:	e8 3e e8 ff ff       	call   c0004bed <ld_clust.isra.0>
c00063af:	89 c6                	mov    esi,eax
c00063b1:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00063b6:	75 12                	jne    c00063ca <f_unlink+0xdf>
c00063b8:	8d 44 24 48          	lea    eax,[esp+0x48]
c00063bc:	e8 94 d6 ff ff       	call   c0003a55 <dir_remove>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	74 6c                	je     c0006431 <f_unlink+0x146>
c00063c5:	e9 87 00 00 00       	jmp    c0006451 <f_unlink+0x166>
c00063ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ce:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063d5:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063dc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063df:	75 21                	jne    c0006402 <f_unlink+0x117>
c00063e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063e9:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063f0:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063f7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063fb:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006402:	31 d2                	xor    edx,edx
c0006404:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000640b:	e8 be cb ff ff       	call   c0002fce <dir_sdi>
c0006410:	85 c0                	test   eax,eax
c0006412:	75 3d                	jne    c0006451 <f_unlink+0x166>
c0006414:	31 d2                	xor    edx,edx
c0006416:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000641d:	e8 bc d3 ff ff       	call   c00037de <dir_read>
c0006422:	85 c0                	test   eax,eax
c0006424:	0f 84 4f ff ff ff    	je     c0006379 <f_unlink+0x8e>
c000642a:	83 f8 04             	cmp    eax,0x4
c000642d:	75 22                	jne    c0006451 <f_unlink+0x166>
c000642f:	eb 87                	jmp    c00063b8 <f_unlink+0xcd>
c0006431:	85 f6                	test   esi,esi
c0006433:	75 0b                	jne    c0006440 <f_unlink+0x155>
c0006435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006439:	e8 3d df ff ff       	call   c000437b <sync_fs>
c000643e:	eb 11                	jmp    c0006451 <f_unlink+0x166>
c0006440:	31 c9                	xor    ecx,ecx
c0006442:	89 f2                	mov    edx,esi
c0006444:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006448:	e8 78 ce ff ff       	call   c00032c5 <remove_chain>
c000644d:	85 c0                	test   eax,eax
c000644f:	74 e4                	je     c0006435 <f_unlink+0x14a>
c0006451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006455:	83 ec 0c             	sub    esp,0xc
c0006458:	53                   	push   ebx
c0006459:	e8 5d 1e 00 00       	call   c00082bb <ff_memfree>
c000645e:	83 c4 10             	add    esp,0x10
c0006461:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006465:	81 c4 e4 00 00 00    	add    esp,0xe4
c000646b:	5b                   	pop    ebx
c000646c:	5e                   	pop    esi
c000646d:	c3                   	ret    

c000646e <f_mkdir>:
c000646e:	57                   	push   edi
c000646f:	b9 02 00 00 00       	mov    ecx,0x2
c0006474:	56                   	push   esi
c0006475:	53                   	push   ebx
c0006476:	83 c4 80             	add    esp,0xffffff80
c0006479:	8d 54 24 08          	lea    edx,[esp+0x8]
c000647d:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006484:	e8 79 c0 ff ff       	call   c0002502 <mount_volume>
c0006489:	89 c3                	mov    ebx,eax
c000648b:	85 c0                	test   eax,eax
c000648d:	0f 85 fe 01 00 00    	jne    c0006691 <f_mkdir+0x223>
c0006493:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006497:	bb 11 00 00 00       	mov    ebx,0x11
c000649c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00064a0:	83 ec 0c             	sub    esp,0xc
c00064a3:	68 60 04 00 00       	push   0x460
c00064a8:	e8 f8 1d 00 00       	call   c00082a5 <ff_memalloc>
c00064ad:	83 c4 10             	add    esp,0x10
c00064b0:	89 c7                	mov    edi,eax
c00064b2:	85 c0                	test   eax,eax
c00064b4:	0f 84 d7 01 00 00    	je     c0006691 <f_mkdir+0x223>
c00064ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064be:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064c4:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064c7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064ca:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064d1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064d5:	e8 9e e7 ff ff       	call   c0004c78 <follow_path>
c00064da:	89 c3                	mov    ebx,eax
c00064dc:	85 c0                	test   eax,eax
c00064de:	74 3e                	je     c000651e <f_mkdir+0xb0>
c00064e0:	83 f8 04             	cmp    eax,0x4
c00064e3:	75 3e                	jne    c0006523 <f_mkdir+0xb5>
c00064e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e9:	31 d2                	xor    edx,edx
c00064eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064f3:	e8 ce cb ff ff       	call   c00030c6 <create_chain>
c00064f8:	89 c6                	mov    esi,eax
c00064fa:	85 c0                	test   eax,eax
c00064fc:	74 0c                	je     c000650a <f_mkdir+0x9c>
c00064fe:	bb 02 00 00 00       	mov    ebx,0x2
c0006503:	83 f8 01             	cmp    eax,0x1
c0006506:	74 07                	je     c000650f <f_mkdir+0xa1>
c0006508:	eb 2a                	jmp    c0006534 <f_mkdir+0xc6>
c000650a:	bb 07 00 00 00       	mov    ebx,0x7
c000650f:	31 c9                	xor    ecx,ecx
c0006511:	89 f2                	mov    edx,esi
c0006513:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006517:	e8 a9 cd ff ff       	call   c00032c5 <remove_chain>
c000651c:	eb 05                	jmp    c0006523 <f_mkdir+0xb5>
c000651e:	bb 08 00 00 00       	mov    ebx,0x8
c0006523:	83 ec 0c             	sub    esp,0xc
c0006526:	57                   	push   edi
c0006527:	e8 8f 1d 00 00       	call   c00082bb <ff_memfree>
c000652c:	83 c4 10             	add    esp,0x10
c000652f:	e9 5d 01 00 00       	jmp    c0006691 <f_mkdir+0x223>
c0006534:	bb 01 00 00 00       	mov    ebx,0x1
c0006539:	83 f8 ff             	cmp    eax,0xffffffff
c000653c:	74 d1                	je     c000650f <f_mkdir+0xa1>
c000653e:	89 f2                	mov    edx,esi
c0006540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006544:	e8 c4 ce ff ff       	call   c000340d <dir_clear>
c0006549:	89 c3                	mov    ebx,eax
c000654b:	85 c0                	test   eax,eax
c000654d:	75 c0                	jne    c000650f <f_mkdir+0xa1>
c000654f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006553:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006556:	74 69                	je     c00065c1 <f_mkdir+0x153>
c0006558:	b9 0b 00 00 00       	mov    ecx,0xb
c000655d:	83 c0 54             	add    eax,0x54
c0006560:	ba 20 00 00 00       	mov    edx,0x20
c0006565:	e8 9c b5 ff ff       	call   c0001b06 <mem_set>
c000656a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006573:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006577:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000657b:	83 c0 6a             	add    eax,0x6a
c000657e:	e8 65 b5 ff ff       	call   c0001ae8 <st_dword>
c0006583:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006587:	89 f1                	mov    ecx,esi
c0006589:	8d 50 54             	lea    edx,[eax+0x54]
c000658c:	e8 85 e6 ff ff       	call   c0004c16 <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	b9 20 00 00 00       	mov    ecx,0x20
c000659a:	8d 50 54             	lea    edx,[eax+0x54]
c000659d:	83 c0 74             	add    eax,0x74
c00065a0:	e8 4c b5 ff ff       	call   c0001af1 <mem_cpy>
c00065a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00065ad:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00065b1:	8d 50 74             	lea    edx,[eax+0x74]
c00065b4:	e8 5d e6 ff ff       	call   c0004c16 <st_clust.isra.1>
c00065b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065bd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065c1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065c5:	e8 2f db ff ff       	call   c00040f9 <dir_register>
c00065ca:	89 c3                	mov    ebx,eax
c00065cc:	85 c0                	test   eax,eax
c00065ce:	0f 85 3b ff ff ff    	jne    c000650f <f_mkdir+0xa1>
c00065d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065db:	75 74                	jne    c0006651 <f_mkdir+0x1e3>
c00065dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e0:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e5:	83 c0 0c             	add    eax,0xc
c00065e8:	e8 fb b4 ff ff       	call   c0001ae8 <st_dword>
c00065ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f1:	89 f2                	mov    edx,esi
c00065f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f6:	83 c0 34             	add    eax,0x34
c00065f9:	e8 ea b4 ff ff       	call   c0001ae8 <st_dword>
c00065fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006602:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006606:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006609:	c1 e2 09             	shl    edx,0x9
c000660c:	83 c0 38             	add    eax,0x38
c000660f:	e8 d4 b4 ff ff       	call   c0001ae8 <st_dword>
c0006614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006618:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000661c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000661f:	c1 e2 09             	shl    edx,0x9
c0006622:	83 c0 28             	add    eax,0x28
c0006625:	e8 be b4 ff ff       	call   c0001ae8 <st_dword>
c000662a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006631:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006635:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006638:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000663c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006640:	e8 8b d3 ff ff       	call   c00039d0 <store_xdir>
c0006645:	89 c3                	mov    ebx,eax
c0006647:	85 c0                	test   eax,eax
c0006649:	0f 85 d4 fe ff ff    	jne    c0006523 <f_mkdir+0xb5>
c000664f:	eb 30                	jmp    c0006681 <f_mkdir+0x213>
c0006651:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006655:	ba 00 00 21 50       	mov    edx,0x50210000
c000665a:	83 c0 16             	add    eax,0x16
c000665d:	e8 86 b4 ff ff       	call   c0001ae8 <st_dword>
c0006662:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006666:	89 f1                	mov    ecx,esi
c0006668:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000666c:	e8 a5 e5 ff ff       	call   c0004c16 <st_clust.isra.1>
c0006671:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006675:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006681:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006685:	e8 f1 dc ff ff       	call   c000437b <sync_fs>
c000668a:	89 c3                	mov    ebx,eax
c000668c:	e9 92 fe ff ff       	jmp    c0006523 <f_mkdir+0xb5>
c0006691:	83 ec 80             	sub    esp,0xffffff80
c0006694:	89 d8                	mov    eax,ebx
c0006696:	5b                   	pop    ebx
c0006697:	5e                   	pop    esi
c0006698:	5f                   	pop    edi
c0006699:	c3                   	ret    

c000669a <f_rename>:
c000669a:	55                   	push   ebp
c000669b:	57                   	push   edi
c000669c:	56                   	push   esi
c000669d:	53                   	push   ebx
c000669e:	81 ec fc 00 00 00    	sub    esp,0xfc
c00066a4:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00066ab:	e8 a4 b9 ff ff       	call   c0002054 <get_ldnumber>
c00066b0:	b9 02 00 00 00       	mov    ecx,0x2
c00066b5:	8d 54 24 14          	lea    edx,[esp+0x14]
c00066b9:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066c0:	e8 3d be ff ff       	call   c0002502 <mount_volume>
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 b5 02 00 00    	jne    c0006982 <f_rename+0x2e8>
c00066cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d1:	83 ec 0c             	sub    esp,0xc
c00066d4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066d8:	68 60 04 00 00       	push   0x460
c00066dd:	e8 c3 1b 00 00       	call   c00082a5 <ff_memalloc>
c00066e2:	83 c4 10             	add    esp,0x10
c00066e5:	89 c3                	mov    ebx,eax
c00066e7:	b8 11 00 00 00       	mov    eax,0x11
c00066ec:	85 db                	test   ebx,ebx
c00066ee:	0f 84 8e 02 00 00    	je     c0006982 <f_rename+0x2e8>
c00066f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066f8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066fe:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006701:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006704:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000670b:	8d 44 24 58          	lea    eax,[esp+0x58]
c000670f:	e8 64 e5 ff ff       	call   c0004c78 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	0f 85 52 02 00 00    	jne    c000696e <f_rename+0x2d4>
c000671c:	b8 06 00 00 00       	mov    eax,0x6
c0006721:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006729:	0f 85 3f 02 00 00    	jne    c000696e <f_rename+0x2d4>
c000672f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006733:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006736:	0f 85 05 01 00 00    	jne    c0006841 <f_rename+0x1a7>
c000673c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000673f:	b9 40 00 00 00       	mov    ecx,0x40
c0006744:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006748:	e8 a4 b3 ff ff       	call   c0001af1 <mem_cpy>
c000674d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006752:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006756:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000675d:	e8 8f b3 ff ff       	call   c0001af1 <mem_cpy>
c0006762:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006769:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006770:	e8 03 e5 ff ff       	call   c0004c78 <follow_path>
c0006775:	85 c0                	test   eax,eax
c0006777:	75 29                	jne    c00067a2 <f_rename+0x108>
c0006779:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000677d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006784:	74 0a                	je     c0006790 <f_rename+0xf6>
c0006786:	b8 08 00 00 00       	mov    eax,0x8
c000678b:	e9 de 01 00 00       	jmp    c000696e <f_rename+0x2d4>
c0006790:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006797:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000679e:	75 e6                	jne    c0006786 <f_rename+0xec>
c00067a0:	eb 09                	jmp    c00067ab <f_rename+0x111>
c00067a2:	83 f8 04             	cmp    eax,0x4
c00067a5:	0f 85 c3 01 00 00    	jne    c000696e <f_rename+0x2d4>
c00067ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067b2:	e8 42 d9 ff ff       	call   c00040f9 <dir_register>
c00067b7:	85 c0                	test   eax,eax
c00067b9:	0f 85 af 01 00 00    	jne    c000696e <f_rename+0x2d4>
c00067bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c3:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067c6:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067c9:	89 c5                	mov    ebp,eax
c00067cb:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067d2:	8d 46 24             	lea    eax,[esi+0x24]
c00067d5:	e8 98 b2 ff ff       	call   c0001a72 <ld_word>
c00067da:	b9 40 00 00 00       	mov    ecx,0x40
c00067df:	89 c7                	mov    edi,eax
c00067e1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067e5:	89 f0                	mov    eax,esi
c00067e7:	e8 05 b3 ff ff       	call   c0001af1 <mem_cpy>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	89 e9                	mov    ecx,ebp
c00067f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f5:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067f8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006800:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006803:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006806:	0f b7 d7             	movzx  edx,di
c0006809:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680c:	83 c0 24             	add    eax,0x24
c000680f:	e8 d0 b2 ff ff       	call   c0001ae4 <st_word>
c0006814:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006818:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000681b:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000681e:	a8 10                	test   al,0x10
c0006820:	75 06                	jne    c0006828 <f_rename+0x18e>
c0006822:	83 c8 20             	or     eax,0x20
c0006825:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006828:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000682f:	e8 9c d1 ff ff       	call   c00039d0 <store_xdir>
c0006834:	85 c0                	test   eax,eax
c0006836:	0f 84 1c 01 00 00    	je     c0006958 <f_rename+0x2be>
c000683c:	e9 2d 01 00 00       	jmp    c000696e <f_rename+0x2d4>
c0006841:	b9 20 00 00 00       	mov    ecx,0x20
c0006846:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000684d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006851:	e8 9b b2 ff ff       	call   c0001af1 <mem_cpy>
c0006856:	b9 4c 00 00 00       	mov    ecx,0x4c
c000685b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000685f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006866:	e8 86 b2 ff ff       	call   c0001af1 <mem_cpy>
c000686b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006872:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006879:	e8 fa e3 ff ff       	call   c0004c78 <follow_path>
c000687e:	85 c0                	test   eax,eax
c0006880:	75 27                	jne    c00068a9 <f_rename+0x20f>
c0006882:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006886:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000688d:	0f 85 f3 fe ff ff    	jne    c0006786 <f_rename+0xec>
c0006893:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000689a:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00068a1:	0f 85 df fe ff ff    	jne    c0006786 <f_rename+0xec>
c00068a7:	eb 09                	jmp    c00068b2 <f_rename+0x218>
c00068a9:	83 f8 04             	cmp    eax,0x4
c00068ac:	0f 85 bc 00 00 00    	jne    c000696e <f_rename+0x2d4>
c00068b2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068b9:	e8 3b d8 ff ff       	call   c00040f9 <dir_register>
c00068be:	85 c0                	test   eax,eax
c00068c0:	0f 85 a8 00 00 00    	jne    c000696e <f_rename+0x2d4>
c00068c6:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068cd:	b9 13 00 00 00       	mov    ecx,0x13
c00068d2:	8d 46 0d             	lea    eax,[esi+0xd]
c00068d5:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068d9:	e8 13 b2 ff ff       	call   c0001af1 <mem_cpy>
c00068de:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068e2:	a8 10                	test   al,0x10
c00068e4:	75 03                	jne    c00068e9 <f_rename+0x24f>
c00068e6:	83 c8 20             	or     eax,0x20
c00068e9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f4:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068f8:	74 5e                	je     c0006958 <f_rename+0x2be>
c00068fa:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006901:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006905:	74 51                	je     c0006958 <f_rename+0x2be>
c0006907:	89 f2                	mov    edx,esi
c0006909:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000690d:	8a 07                	mov    al,BYTE PTR [edi]
c000690f:	e8 d9 e2 ff ff       	call   c0004bed <ld_clust.isra.0>
c0006914:	89 c2                	mov    edx,eax
c0006916:	89 f8                	mov    eax,edi
c0006918:	e8 ee b3 ff ff       	call   c0001d0b <clst2sect>
c000691d:	89 c6                	mov    esi,eax
c000691f:	89 d1                	mov    ecx,edx
c0006921:	b8 02 00 00 00       	mov    eax,0x2
c0006926:	09 f2                	or     edx,esi
c0006928:	74 44                	je     c000696e <f_rename+0x2d4>
c000692a:	89 f2                	mov    edx,esi
c000692c:	89 f8                	mov    eax,edi
c000692e:	e8 1d b9 ff ff       	call   c0002250 <move_window>
c0006933:	85 c0                	test   eax,eax
c0006935:	75 37                	jne    c000696e <f_rename+0x2d4>
c0006937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000693b:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000693f:	75 17                	jne    c0006958 <f_rename+0x2be>
c0006941:	8d 50 74             	lea    edx,[eax+0x74]
c0006944:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000694b:	e8 c6 e2 ff ff       	call   c0004c16 <st_clust.isra.1>
c0006950:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006954:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006958:	8d 44 24 58          	lea    eax,[esp+0x58]
c000695c:	e8 f4 d0 ff ff       	call   c0003a55 <dir_remove>
c0006961:	85 c0                	test   eax,eax
c0006963:	75 09                	jne    c000696e <f_rename+0x2d4>
c0006965:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006969:	e8 0d da ff ff       	call   c000437b <sync_fs>
c000696e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006972:	83 ec 0c             	sub    esp,0xc
c0006975:	53                   	push   ebx
c0006976:	e8 40 19 00 00       	call   c00082bb <ff_memfree>
c000697b:	83 c4 10             	add    esp,0x10
c000697e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006982:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006988:	5b                   	pop    ebx
c0006989:	5e                   	pop    esi
c000698a:	5f                   	pop    edi
c000698b:	5d                   	pop    ebp
c000698c:	c3                   	ret    

c000698d <f_chmod>:
c000698d:	57                   	push   edi
c000698e:	b9 02 00 00 00       	mov    ecx,0x2
c0006993:	56                   	push   esi
c0006994:	53                   	push   ebx
c0006995:	83 ec 60             	sub    esp,0x60
c0006998:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000699c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00069a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00069a4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00069a8:	e8 55 bb ff ff       	call   c0002502 <mount_volume>
c00069ad:	85 c0                	test   eax,eax
c00069af:	0f 85 af 00 00 00    	jne    c0006a64 <f_chmod+0xd7>
c00069b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b9:	83 ec 0c             	sub    esp,0xc
c00069bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069c0:	68 60 04 00 00       	push   0x460
c00069c5:	e8 db 18 00 00       	call   c00082a5 <ff_memalloc>
c00069ca:	83 c4 10             	add    esp,0x10
c00069cd:	89 c6                	mov    esi,eax
c00069cf:	b8 11 00 00 00       	mov    eax,0x11
c00069d4:	85 f6                	test   esi,esi
c00069d6:	0f 84 88 00 00 00    	je     c0006a64 <f_chmod+0xd7>
c00069dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069e6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069e9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069ec:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069f4:	e8 7f e2 ff ff       	call   c0004c78 <follow_path>
c00069f9:	85 c0                	test   eax,eax
c00069fb:	75 53                	jne    c0006a50 <f_chmod+0xc3>
c00069fd:	b8 06 00 00 00       	mov    eax,0x6
c0006a02:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a07:	75 47                	jne    c0006a50 <f_chmod+0xc3>
c0006a09:	89 f9                	mov    ecx,edi
c0006a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a0f:	83 e1 27             	and    ecx,0x27
c0006a12:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a15:	75 1d                	jne    c0006a34 <f_chmod+0xa7>
c0006a17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a1a:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a1d:	21 cb                	and    ebx,ecx
c0006a1f:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a22:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a25:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a29:	e8 a2 cf ff ff       	call   c00039d0 <store_xdir>
c0006a2e:	85 c0                	test   eax,eax
c0006a30:	75 1e                	jne    c0006a50 <f_chmod+0xc3>
c0006a32:	eb 13                	jmp    c0006a47 <f_chmod+0xba>
c0006a34:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a38:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a3b:	21 cb                	and    ebx,ecx
c0006a3d:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a40:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a4b:	e8 2b d9 ff ff       	call   c000437b <sync_fs>
c0006a50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a54:	83 ec 0c             	sub    esp,0xc
c0006a57:	56                   	push   esi
c0006a58:	e8 5e 18 00 00       	call   c00082bb <ff_memfree>
c0006a5d:	83 c4 10             	add    esp,0x10
c0006a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a64:	83 c4 60             	add    esp,0x60
c0006a67:	5b                   	pop    ebx
c0006a68:	5e                   	pop    esi
c0006a69:	5f                   	pop    edi
c0006a6a:	c3                   	ret    

c0006a6b <f_utime>:
c0006a6b:	56                   	push   esi
c0006a6c:	b9 02 00 00 00       	mov    ecx,0x2
c0006a71:	53                   	push   ebx
c0006a72:	83 ec 64             	sub    esp,0x64
c0006a75:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a79:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a7d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a81:	e8 7c ba ff ff       	call   c0002502 <mount_volume>
c0006a86:	85 c0                	test   eax,eax
c0006a88:	0f 85 b5 00 00 00    	jne    c0006b43 <f_utime+0xd8>
c0006a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a92:	83 ec 0c             	sub    esp,0xc
c0006a95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a99:	68 60 04 00 00       	push   0x460
c0006a9e:	e8 02 18 00 00       	call   c00082a5 <ff_memalloc>
c0006aa3:	83 c4 10             	add    esp,0x10
c0006aa6:	89 c3                	mov    ebx,eax
c0006aa8:	b8 11 00 00 00       	mov    eax,0x11
c0006aad:	85 db                	test   ebx,ebx
c0006aaf:	0f 84 8e 00 00 00    	je     c0006b43 <f_utime+0xd8>
c0006ab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006abf:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ac2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ac5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ac9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006acd:	e8 a6 e1 ff ff       	call   c0004c78 <follow_path>
c0006ad2:	85 c0                	test   eax,eax
c0006ad4:	75 59                	jne    c0006b2f <f_utime+0xc4>
c0006ad6:	b8 06 00 00 00       	mov    eax,0x6
c0006adb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae0:	75 4d                	jne    c0006b2f <f_utime+0xc4>
c0006ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ae6:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006aea:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006aee:	c1 e2 10             	shl    edx,0x10
c0006af1:	09 ca                	or     edx,ecx
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1a                	jne    c0006b12 <f_utime+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	83 c0 0c             	add    eax,0xc
c0006afe:	e8 e5 af ff ff       	call   c0001ae8 <st_dword>
c0006b03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b07:	e8 c4 ce ff ff       	call   c00039d0 <store_xdir>
c0006b0c:	85 c0                	test   eax,eax
c0006b0e:	75 1f                	jne    c0006b2f <f_utime+0xc4>
c0006b10:	eb 14                	jmp    c0006b26 <f_utime+0xbb>
c0006b12:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b16:	83 c0 16             	add    eax,0x16
c0006b19:	e8 ca af ff ff       	call   c0001ae8 <st_dword>
c0006b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b22:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2a:	e8 4c d8 ff ff       	call   c000437b <sync_fs>
c0006b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b33:	83 ec 0c             	sub    esp,0xc
c0006b36:	53                   	push   ebx
c0006b37:	e8 7f 17 00 00       	call   c00082bb <ff_memfree>
c0006b3c:	83 c4 10             	add    esp,0x10
c0006b3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b43:	83 c4 64             	add    esp,0x64
c0006b46:	5b                   	pop    ebx
c0006b47:	5e                   	pop    esi
c0006b48:	c3                   	ret    

c0006b49 <f_getlabel>:
c0006b49:	55                   	push   ebp
c0006b4a:	31 c9                	xor    ecx,ecx
c0006b4c:	57                   	push   edi
c0006b4d:	56                   	push   esi
c0006b4e:	53                   	push   ebx
c0006b4f:	83 ec 6c             	sub    esp,0x6c
c0006b52:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b56:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b5d:	e8 a0 b9 ff ff       	call   c0002502 <mount_volume>
c0006b62:	89 c6                	mov    esi,eax
c0006b64:	85 c0                	test   eax,eax
c0006b66:	0f 85 c1 01 00 00    	jne    c0006d2d <f_getlabel+0x1e4>
c0006b6c:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b74:	0f 84 5f 01 00 00    	je     c0006cd9 <f_getlabel+0x190>
c0006b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7e:	31 d2                	xor    edx,edx
c0006b80:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b84:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b8c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b90:	e8 39 c4 ff ff       	call   c0002fce <dir_sdi>
c0006b95:	85 c0                	test   eax,eax
c0006b97:	0f 85 2d 01 00 00    	jne    c0006cca <f_getlabel+0x181>
c0006b9d:	ba 01 00 00 00       	mov    edx,0x1
c0006ba2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba6:	e8 33 cc ff ff       	call   c00037de <dir_read>
c0006bab:	85 c0                	test   eax,eax
c0006bad:	0f 85 17 01 00 00    	jne    c0006cca <f_getlabel+0x181>
c0006bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bba:	74 09                	je     c0006bc5 <f_getlabel+0x7c>
c0006bbc:	31 db                	xor    ebx,ebx
c0006bbe:	31 c9                	xor    ecx,ecx
c0006bc0:	e9 c8 00 00 00       	jmp    c0006c8d <f_getlabel+0x144>
c0006bc5:	31 ed                	xor    ebp,ebp
c0006bc7:	31 db                	xor    ebx,ebx
c0006bc9:	31 ff                	xor    edi,edi
c0006bcb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bcf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bd3:	39 fa                	cmp    edx,edi
c0006bd5:	76 4b                	jbe    c0006c22 <f_getlabel+0xd9>
c0006bd7:	47                   	inc    edi
c0006bd8:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bdb:	01 d0                	add    eax,edx
c0006bdd:	e8 90 ae ff ff       	call   c0001a72 <ld_word>
c0006be2:	66 85 ed             	test   bp,bp
c0006be5:	75 0d                	jne    c0006bf4 <f_getlabel+0xab>
c0006be7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bed:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bf2:	76 28                	jbe    c0006c1c <f_getlabel+0xd3>
c0006bf4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bfb:	89 e9                	mov    ecx,ebp
c0006bfd:	01 da                	add    edx,ebx
c0006bff:	c1 e1 10             	shl    ecx,0x10
c0006c02:	0f b7 c0             	movzx  eax,ax
c0006c05:	09 c8                	or     eax,ecx
c0006c07:	b9 04 00 00 00       	mov    ecx,0x4
c0006c0c:	e8 01 b0 ff ff       	call   c0001c12 <put_utf>
c0006c11:	84 c0                	test   al,al
c0006c13:	74 0b                	je     c0006c20 <f_getlabel+0xd7>
c0006c15:	0f b6 c0             	movzx  eax,al
c0006c18:	01 c3                	add    ebx,eax
c0006c1a:	31 c0                	xor    eax,eax
c0006c1c:	89 c5                	mov    ebp,eax
c0006c1e:	eb ab                	jmp    c0006bcb <f_getlabel+0x82>
c0006c20:	31 db                	xor    ebx,ebx
c0006c22:	66 85 ed             	test   bp,bp
c0006c25:	74 02                	je     c0006c29 <f_getlabel+0xe0>
c0006c27:	31 db                	xor    ebx,ebx
c0006c29:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c30:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c34:	e9 a0 00 00 00       	jmp    c0006cd9 <f_getlabel+0x190>
c0006c39:	83 ff 0b             	cmp    edi,0xb
c0006c3c:	74 11                	je     c0006c4f <f_getlabel+0x106>
c0006c3e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c47:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c4a:	c1 e0 08             	shl    eax,0x8
c0006c4d:	09 c2                	or     edx,eax
c0006c4f:	0f b7 d2             	movzx  edx,dx
c0006c52:	50                   	push   eax
c0006c53:	50                   	push   eax
c0006c54:	68 b5 01 00 00       	push   0x1b5
c0006c59:	52                   	push   edx
c0006c5a:	e8 03 17 00 00       	call   c0008362 <ff_oem2uni>
c0006c5f:	83 c4 10             	add    esp,0x10
c0006c62:	66 85 c0             	test   ax,ax
c0006c65:	74 46                	je     c0006cad <f_getlabel+0x164>
c0006c67:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c6e:	0f b7 c0             	movzx  eax,ax
c0006c71:	01 da                	add    edx,ebx
c0006c73:	b9 04 00 00 00       	mov    ecx,0x4
c0006c78:	e8 95 af ff ff       	call   c0001c12 <put_utf>
c0006c7d:	84 c0                	test   al,al
c0006c7f:	74 2c                	je     c0006cad <f_getlabel+0x164>
c0006c81:	0f b6 c0             	movzx  eax,al
c0006c84:	01 c3                	add    ebx,eax
c0006c86:	83 ff 0b             	cmp    edi,0xb
c0006c89:	74 24                	je     c0006caf <f_getlabel+0x166>
c0006c8b:	89 f9                	mov    ecx,edi
c0006c8d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c91:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c94:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c99:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ca2:	e8 9f ae ff ff       	call   c0001b46 <dbc_1st>
c0006ca7:	85 c0                	test   eax,eax
c0006ca9:	74 a4                	je     c0006c4f <f_getlabel+0x106>
c0006cab:	eb 8c                	jmp    c0006c39 <f_getlabel+0xf0>
c0006cad:	31 db                	xor    ebx,ebx
c0006caf:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006cb6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006cb9:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006cc0:	74 17                	je     c0006cd9 <f_getlabel+0x190>
c0006cc2:	4b                   	dec    ebx
c0006cc3:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006cc6:	74 ee                	je     c0006cb6 <f_getlabel+0x16d>
c0006cc8:	eb 0f                	jmp    c0006cd9 <f_getlabel+0x190>
c0006cca:	83 f8 04             	cmp    eax,0x4
c0006ccd:	75 5c                	jne    c0006d2b <f_getlabel+0x1e2>
c0006ccf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cd6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cd9:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ce1:	74 4a                	je     c0006d2d <f_getlabel+0x1e4>
c0006ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ce7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cea:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ced:	e8 5e b5 ff ff       	call   c0002250 <move_window>
c0006cf2:	89 c6                	mov    esi,eax
c0006cf4:	85 c0                	test   eax,eax
c0006cf6:	75 35                	jne    c0006d2d <f_getlabel+0x1e4>
c0006cf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cfc:	b8 43 00 00 00       	mov    eax,0x43
c0006d01:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006d03:	80 f9 03             	cmp    cl,0x3
c0006d06:	74 0f                	je     c0006d17 <f_getlabel+0x1ce>
c0006d08:	31 c0                	xor    eax,eax
c0006d0a:	80 f9 04             	cmp    cl,0x4
c0006d0d:	0f 94 c0             	sete   al
c0006d10:	48                   	dec    eax
c0006d11:	83 e0 c3             	and    eax,0xffffffc3
c0006d14:	83 c0 64             	add    eax,0x64
c0006d17:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006d1b:	e8 5f ad ff ff       	call   c0001a7f <ld_dword>
c0006d20:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d27:	89 07                	mov    DWORD PTR [edi],eax
c0006d29:	eb 02                	jmp    c0006d2d <f_getlabel+0x1e4>
c0006d2b:	89 c6                	mov    esi,eax
c0006d2d:	83 c4 6c             	add    esp,0x6c
c0006d30:	89 f0                	mov    eax,esi
c0006d32:	5b                   	pop    ebx
c0006d33:	5e                   	pop    esi
c0006d34:	5f                   	pop    edi
c0006d35:	5d                   	pop    ebp
c0006d36:	c3                   	ret    

c0006d37 <f_setlabel>:
c0006d37:	56                   	push   esi
c0006d38:	b9 02 00 00 00       	mov    ecx,0x2
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 74             	sub    esp,0x74
c0006d41:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 b1 b7 ff ff       	call   c0002502 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 41 02 00 00    	jne    c0006f9c <f_setlabel+0x265>
c0006d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d5f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d62:	0f 85 8e 00 00 00    	jne    c0006df6 <f_setlabel+0xbf>
c0006d68:	b9 16 00 00 00       	mov    ecx,0x16
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d73:	31 db                	xor    ebx,ebx
c0006d75:	e8 8c ad ff ff       	call   c0001b06 <mem_set>
c0006d7a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d81:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d84:	0f 86 0a 01 00 00    	jbe    c0006e94 <f_setlabel+0x15d>
c0006d8a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d91:	e8 b6 ad ff ff       	call   c0001b4c <tchar2uni>
c0006d96:	89 c6                	mov    esi,eax
c0006d98:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d9d:	76 2a                	jbe    c0006dc9 <f_setlabel+0x92>
c0006d9f:	83 f8 ff             	cmp    eax,0xffffffff
c0006da2:	74 05                	je     c0006da9 <f_setlabel+0x72>
c0006da4:	83 fb 09             	cmp    ebx,0x9
c0006da7:	76 0a                	jbe    c0006db3 <f_setlabel+0x7c>
c0006da9:	be 06 00 00 00       	mov    esi,0x6
c0006dae:	e9 e9 01 00 00       	jmp    c0006f9c <f_setlabel+0x265>
c0006db3:	89 c2                	mov    edx,eax
c0006db5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006db9:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbc:	c1 ea 10             	shr    edx,0x10
c0006dbf:	01 c8                	add    eax,ecx
c0006dc1:	43                   	inc    ebx
c0006dc2:	e8 1d ad ff ff       	call   c0001ae4 <st_word>
c0006dc7:	eb 04                	jmp    c0006dcd <f_setlabel+0x96>
c0006dc9:	85 c0                	test   eax,eax
c0006dcb:	74 dc                	je     c0006da9 <f_setlabel+0x72>
c0006dcd:	89 f2                	mov    edx,esi
c0006dcf:	b8 57 5d 02 c0       	mov    eax,0xc0025d57
c0006dd4:	e8 5b ad ff ff       	call   c0001b34 <chk_chr>
c0006dd9:	85 c0                	test   eax,eax
c0006ddb:	75 cc                	jne    c0006da9 <f_setlabel+0x72>
c0006ddd:	83 fb 0a             	cmp    ebx,0xa
c0006de0:	77 c7                	ja     c0006da9 <f_setlabel+0x72>
c0006de2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006de5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006de9:	0f b7 d6             	movzx  edx,si
c0006dec:	01 c8                	add    eax,ecx
c0006dee:	43                   	inc    ebx
c0006def:	e8 f0 ac ff ff       	call   c0001ae4 <st_word>
c0006df4:	eb 84                	jmp    c0006d7a <f_setlabel+0x43>
c0006df6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfb:	ba 20 00 00 00       	mov    edx,0x20
c0006e00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e04:	31 db                	xor    ebx,ebx
c0006e06:	e8 fb ac ff ff       	call   c0001b06 <mem_set>
c0006e0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e15:	76 60                	jbe    c0006e77 <f_setlabel+0x140>
c0006e17:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e1e:	e8 29 ad ff ff       	call   c0001b4c <tchar2uni>
c0006e23:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e28:	0f 87 7b ff ff ff    	ja     c0006da9 <f_setlabel+0x72>
c0006e2e:	83 ec 0c             	sub    esp,0xc
c0006e31:	50                   	push   eax
c0006e32:	e8 97 15 00 00       	call   c00083ce <ff_wtoupper>
c0006e37:	5a                   	pop    edx
c0006e38:	59                   	pop    ecx
c0006e39:	68 b5 01 00 00       	push   0x1b5
c0006e3e:	50                   	push   eax
c0006e3f:	e8 8e 14 00 00       	call   c00082d2 <ff_uni2oem>
c0006e44:	83 c4 10             	add    esp,0x10
c0006e47:	89 c6                	mov    esi,eax
c0006e49:	66 85 c0             	test   ax,ax
c0006e4c:	0f 84 57 ff ff ff    	je     c0006da9 <f_setlabel+0x72>
c0006e52:	0f b7 d0             	movzx  edx,ax
c0006e55:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c0006e5a:	e8 d5 ac ff ff       	call   c0001b34 <chk_chr>
c0006e5f:	85 c0                	test   eax,eax
c0006e61:	0f 85 42 ff ff ff    	jne    c0006da9 <f_setlabel+0x72>
c0006e67:	66 81 fe ff 00       	cmp    si,0xff
c0006e6c:	0f 87 14 01 00 00    	ja     c0006f86 <f_setlabel+0x24f>
c0006e72:	e9 fa 00 00 00       	jmp    c0006f71 <f_setlabel+0x23a>
c0006e77:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e7c:	0f 84 27 ff ff ff    	je     c0006da9 <f_setlabel+0x72>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	74 0e                	je     c0006e94 <f_setlabel+0x15d>
c0006e86:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e89:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e8e:	75 04                	jne    c0006e94 <f_setlabel+0x15d>
c0006e90:	89 c3                	mov    ebx,eax
c0006e92:	eb ee                	jmp    c0006e82 <f_setlabel+0x14b>
c0006e94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e98:	31 d2                	xor    edx,edx
c0006e9a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e9e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006ea6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eaa:	e8 1f c1 ff ff       	call   c0002fce <dir_sdi>
c0006eaf:	89 c6                	mov    esi,eax
c0006eb1:	85 c0                	test   eax,eax
c0006eb3:	0f 85 e3 00 00 00    	jne    c0006f9c <f_setlabel+0x265>
c0006eb9:	ba 01 00 00 00       	mov    edx,0x1
c0006ebe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ec2:	e8 17 c9 ff ff       	call   c00037de <dir_read>
c0006ec7:	85 c0                	test   eax,eax
c0006ec9:	75 21                	jne    c0006eec <f_setlabel+0x1b5>
c0006ecb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ecf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed3:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006ed6:	74 5d                	je     c0006f35 <f_setlabel+0x1fe>
c0006ed8:	85 db                	test   ebx,ebx
c0006eda:	74 0b                	je     c0006ee7 <f_setlabel+0x1b0>
c0006edc:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee1:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee5:	eb 70                	jmp    c0006f57 <f_setlabel+0x220>
c0006ee7:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006eea:	eb 70                	jmp    c0006f5c <f_setlabel+0x225>
c0006eec:	83 f8 04             	cmp    eax,0x4
c0006eef:	75 7c                	jne    c0006f6d <f_setlabel+0x236>
c0006ef1:	85 db                	test   ebx,ebx
c0006ef3:	0f 84 a3 00 00 00    	je     c0006f9c <f_setlabel+0x265>
c0006ef9:	ba 01 00 00 00       	mov    edx,0x1
c0006efe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f02:	e8 51 ca ff ff       	call   c0003958 <dir_alloc>
c0006f07:	89 c6                	mov    esi,eax
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	0f 85 8b 00 00 00    	jne    c0006f9c <f_setlabel+0x265>
c0006f11:	31 d2                	xor    edx,edx
c0006f13:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f17:	b9 20 00 00 00       	mov    ecx,0x20
c0006f1c:	e8 e5 ab ff ff       	call   c0001b06 <mem_set>
c0006f21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f25:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f28:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2c:	75 18                	jne    c0006f46 <f_setlabel+0x20f>
c0006f2e:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f35:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f38:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f41:	83 c0 02             	add    eax,0x2
c0006f44:	eb 9b                	jmp    c0006ee1 <f_setlabel+0x1aa>
c0006f46:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f4a:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f4f:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f53:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f57:	e8 95 ab ff ff       	call   c0001af1 <mem_cpy>
c0006f5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f60:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f68:	e8 0e d4 ff ff       	call   c000437b <sync_fs>
c0006f6d:	89 c6                	mov    esi,eax
c0006f6f:	eb 2b                	jmp    c0006f9c <f_setlabel+0x265>
c0006f71:	83 fb 0a             	cmp    ebx,0xa
c0006f74:	0f 87 2f fe ff ff    	ja     c0006da9 <f_setlabel+0x72>
c0006f7a:	89 f0                	mov    eax,esi
c0006f7c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f80:	43                   	inc    ebx
c0006f81:	e9 85 fe ff ff       	jmp    c0006e0b <f_setlabel+0xd4>
c0006f86:	83 fb 09             	cmp    ebx,0x9
c0006f89:	0f 87 1a fe ff ff    	ja     c0006da9 <f_setlabel+0x72>
c0006f8f:	89 f0                	mov    eax,esi
c0006f91:	66 c1 e8 08          	shr    ax,0x8
c0006f95:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f99:	43                   	inc    ebx
c0006f9a:	eb de                	jmp    c0006f7a <f_setlabel+0x243>
c0006f9c:	89 f0                	mov    eax,esi
c0006f9e:	83 c4 74             	add    esp,0x74
c0006fa1:	5b                   	pop    ebx
c0006fa2:	5e                   	pop    esi
c0006fa3:	c3                   	ret    

c0006fa4 <f_forward>:
c0006fa4:	55                   	push   ebp
c0006fa5:	57                   	push   edi
c0006fa6:	56                   	push   esi
c0006fa7:	53                   	push   ebx
c0006fa8:	83 ec 2c             	sub    esp,0x2c
c0006fab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006faf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006fb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006fb9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006fbd:	89 d8                	mov    eax,ebx
c0006fbf:	e8 b1 b1 ff ff       	call   c0002175 <validate>
c0006fc4:	89 c5                	mov    ebp,eax
c0006fc6:	85 c0                	test   eax,eax
c0006fc8:	0f 85 aa 01 00 00    	jne    c0007178 <f_forward+0x1d4>
c0006fce:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fd2:	85 ed                	test   ebp,ebp
c0006fd4:	0f 85 9e 01 00 00    	jne    c0007178 <f_forward+0x1d4>
c0006fda:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fde:	0f 84 8f 01 00 00    	je     c0007173 <f_forward+0x1cf>
c0006fe4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fe7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fea:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fed:	bf 00 00 00 00       	mov    edi,0x0
c0006ff2:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006ff5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ff9:	89 d1                	mov    ecx,edx
c0006ffb:	19 f9                	sbb    ecx,edi
c0006ffd:	0f 83 cf 00 00 00    	jae    c00070d2 <f_forward+0x12e>
c0007003:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007007:	e9 c6 00 00 00       	jmp    c00070d2 <f_forward+0x12e>
c000700c:	50                   	push   eax
c000700d:	50                   	push   eax
c000700e:	6a 00                	push   0x0
c0007010:	6a 00                	push   0x0
c0007012:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007016:	83 c4 10             	add    esp,0x10
c0007019:	85 c0                	test   eax,eax
c000701b:	0f 84 57 01 00 00    	je     c0007178 <f_forward+0x1d4>
c0007021:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007024:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007028:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000702b:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000702f:	89 d7                	mov    edi,edx
c0007031:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007034:	89 c6                	mov    esi,eax
c0007036:	0f ac fe 09          	shrd   esi,edi,0x9
c000703a:	21 ce                	and    esi,ecx
c000703c:	89 c1                	mov    ecx,eax
c000703e:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007044:	0f 84 98 00 00 00    	je     c00070e2 <f_forward+0x13e>
c000704a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000704e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007051:	89 c8                	mov    eax,ecx
c0007053:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007057:	e8 af ac ff ff       	call   c0001d0b <clst2sect>
c000705c:	89 d7                	mov    edi,edx
c000705e:	09 c7                	or     edi,eax
c0007060:	0f 84 9e 00 00 00    	je     c0007104 <f_forward+0x160>
c0007066:	31 ff                	xor    edi,edi
c0007068:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000706b:	01 c6                	add    esi,eax
c000706d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007071:	11 d7                	adc    edi,edx
c0007073:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007076:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007079:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000707d:	39 fa                	cmp    edx,edi
c000707f:	0f 85 a2 00 00 00    	jne    c0007127 <f_forward+0x183>
c0007085:	39 f0                	cmp    eax,esi
c0007087:	0f 85 9a 00 00 00    	jne    c0007127 <f_forward+0x183>
c000708d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007090:	ba 00 02 00 00       	mov    edx,0x200
c0007095:	25 ff 01 00 00       	and    eax,0x1ff
c000709a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000709e:	29 c2                	sub    edx,eax
c00070a0:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00070a3:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00070a6:	39 d1                	cmp    ecx,edx
c00070a8:	76 02                	jbe    c00070ac <f_forward+0x108>
c00070aa:	89 d1                	mov    ecx,edx
c00070ac:	8d 73 50             	lea    esi,[ebx+0x50]
c00070af:	52                   	push   edx
c00070b0:	01 c6                	add    esi,eax
c00070b2:	52                   	push   edx
c00070b3:	51                   	push   ecx
c00070b4:	56                   	push   esi
c00070b5:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00070b9:	83 c4 10             	add    esp,0x10
c00070bc:	85 c0                	test   eax,eax
c00070be:	74 44                	je     c0007104 <f_forward+0x160>
c00070c0:	31 ff                	xor    edi,edi
c00070c2:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070c5:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070c8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070cc:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070d0:	01 07                	add    DWORD PTR [edi],eax
c00070d2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070d7:	0f 85 2f ff ff ff    	jne    c000700c <f_forward+0x68>
c00070dd:	e9 96 00 00 00       	jmp    c0007178 <f_forward+0x1d4>
c00070e2:	85 f6                	test   esi,esi
c00070e4:	0f 85 60 ff ff ff    	jne    c000704a <f_forward+0xa6>
c00070ea:	89 d7                	mov    edi,edx
c00070ec:	09 c7                	or     edi,eax
c00070ee:	75 05                	jne    c00070f5 <f_forward+0x151>
c00070f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070f3:	eb 0a                	jmp    c00070ff <f_forward+0x15b>
c00070f5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070f8:	89 d8                	mov    eax,ebx
c00070fa:	e8 d9 bc ff ff       	call   c0002dd8 <get_fat>
c00070ff:	83 f8 01             	cmp    eax,0x1
c0007102:	77 0b                	ja     c000710f <f_forward+0x16b>
c0007104:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007108:	bd 02 00 00 00       	mov    ebp,0x2
c000710d:	eb 69                	jmp    c0007178 <f_forward+0x1d4>
c000710f:	83 f8 ff             	cmp    eax,0xffffffff
c0007112:	75 0b                	jne    c000711f <f_forward+0x17b>
c0007114:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007118:	bd 01 00 00 00       	mov    ebp,0x1
c000711d:	eb 59                	jmp    c0007178 <f_forward+0x1d4>
c000711f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007122:	e9 23 ff ff ff       	jmp    c000704a <f_forward+0xa6>
c0007127:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000712b:	79 20                	jns    c000714d <f_forward+0x1a9>
c000712d:	83 ec 0c             	sub    esp,0xc
c0007130:	6a 01                	push   0x1
c0007132:	52                   	push   edx
c0007133:	50                   	push   eax
c0007134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007138:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000713c:	50                   	push   eax
c000713d:	e8 fb a8 ff ff       	call   c0001a3d <disk_write>
c0007142:	83 c4 20             	add    esp,0x20
c0007145:	85 c0                	test   eax,eax
c0007147:	75 cb                	jne    c0007114 <f_forward+0x170>
c0007149:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000714d:	83 ec 0c             	sub    esp,0xc
c0007150:	6a 01                	push   0x1
c0007152:	57                   	push   edi
c0007153:	56                   	push   esi
c0007154:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007158:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007160:	50                   	push   eax
c0007161:	e8 c1 a8 ff ff       	call   c0001a27 <disk_read>
c0007166:	83 c4 20             	add    esp,0x20
c0007169:	85 c0                	test   eax,eax
c000716b:	0f 84 1c ff ff ff    	je     c000708d <f_forward+0xe9>
c0007171:	eb a1                	jmp    c0007114 <f_forward+0x170>
c0007173:	bd 07 00 00 00       	mov    ebp,0x7
c0007178:	83 c4 2c             	add    esp,0x2c
c000717b:	89 e8                	mov    eax,ebp
c000717d:	5b                   	pop    ebx
c000717e:	5e                   	pop    esi
c000717f:	5f                   	pop    edi
c0007180:	5d                   	pop    ebp
c0007181:	c3                   	ret    

c0007182 <f_mkfs>:
c0007182:	55                   	push   ebp
c0007183:	57                   	push   edi
c0007184:	56                   	push   esi
c0007185:	53                   	push   ebx
c0007186:	bb 0b 00 00 00       	mov    ebx,0xb
c000718b:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007191:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007198:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000719f:	e8 b0 ae ff ff       	call   c0002054 <get_ldnumber>
c00071a4:	85 c0                	test   eax,eax
c00071a6:	0f 88 ec 10 00 00    	js     c0008298 <f_mkfs+0x1116>
c00071ac:	8b 14 85 a0 a3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5c60]
c00071b3:	85 d2                	test   edx,edx
c00071b5:	74 03                	je     c00071ba <f_mkfs+0x38>
c00071b7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00071ba:	85 f6                	test   esi,esi
c00071bc:	75 05                	jne    c00071c3 <f_mkfs+0x41>
c00071be:	be 40 5d 02 c0       	mov    esi,0xc0025d40
c00071c3:	83 ec 0c             	sub    esp,0xc
c00071c6:	0f b6 c0             	movzx  eax,al
c00071c9:	bb 03 00 00 00       	mov    ebx,0x3
c00071ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	e8 49 a8 ff ff       	call   c0001a24 <disk_initialize>
c00071db:	83 c4 10             	add    esp,0x10
c00071de:	a8 01                	test   al,0x1
c00071e0:	0f 85 b2 10 00 00    	jne    c0008298 <f_mkfs+0x1116>
c00071e6:	bb 0a 00 00 00       	mov    ebx,0xa
c00071eb:	a8 04                	test   al,0x4
c00071ed:	0f 85 a5 10 00 00    	jne    c0008298 <f_mkfs+0x1116>
c00071f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071f6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071fa:	85 c0                	test   eax,eax
c00071fc:	75 20                	jne    c000721e <f_mkfs+0x9c>
c00071fe:	51                   	push   ecx
c00071ff:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007203:	50                   	push   eax
c0007204:	6a 03                	push   0x3
c0007206:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000720a:	e8 44 a8 ff ff       	call   c0001a53 <disk_ioctl>
c000720f:	83 c4 10             	add    esp,0x10
c0007212:	85 c0                	test   eax,eax
c0007214:	74 08                	je     c000721e <f_mkfs+0x9c>
c0007216:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000721e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007222:	8d 42 ff             	lea    eax,[edx-0x1]
c0007225:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722a:	77 04                	ja     c0007230 <f_mkfs+0xae>
c000722c:	85 c2                	test   edx,eax
c000722e:	74 08                	je     c0007238 <f_mkfs+0xb6>
c0007230:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007238:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000723b:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000723f:	48                   	dec    eax
c0007240:	3c 01                	cmp    al,0x1
c0007242:	76 05                	jbe    c0007249 <f_mkfs+0xc7>
c0007244:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007249:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000724c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007250:	48                   	dec    eax
c0007251:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007256:	77 07                	ja     c000725f <f_mkfs+0xdd>
c0007258:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000725d:	74 08                	je     c0007267 <f_mkfs+0xe5>
c000725f:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007267:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000726a:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007270:	77 07                	ja     c0007279 <f_mkfs+0xf7>
c0007272:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007275:	85 d8                	test   eax,ebx
c0007277:	74 02                	je     c000727b <f_mkfs+0xf9>
c0007279:	31 db                	xor    ebx,ebx
c000727b:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007286:	77 0a                	ja     c0007292 <f_mkfs+0x110>
c0007288:	bb 11 00 00 00       	mov    ebx,0x11
c000728d:	e9 06 10 00 00       	jmp    c0008298 <f_mkfs+0x1116>
c0007292:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007299:	8b 36                	mov    esi,DWORD PTR [esi]
c000729b:	85 ed                	test   ebp,ebp
c000729d:	75 1e                	jne    c00072bd <f_mkfs+0x13b>
c000729f:	83 ec 0c             	sub    esp,0xc
c00072a2:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00072a9:	25 00 fe ff ff       	and    eax,0xfffffe00
c00072ae:	50                   	push   eax
c00072af:	e8 f1 0f 00 00       	call   c00082a5 <ff_memalloc>
c00072b4:	83 c4 10             	add    esp,0x10
c00072b7:	89 c5                	mov    ebp,eax
c00072b9:	85 c0                	test   eax,eax
c00072bb:	74 cb                	je     c0007288 <f_mkfs+0x106>
c00072bd:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072c5:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072cd:	52                   	push   edx
c00072ce:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072d2:	50                   	push   eax
c00072d3:	6a 01                	push   0x1
c00072d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072d9:	e8 75 a7 ff ff       	call   c0001a53 <disk_ioctl>
c00072de:	83 c4 10             	add    esp,0x10
c00072e1:	85 c0                	test   eax,eax
c00072e3:	0f 85 4a 0f 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c00072e9:	89 f1                	mov    ecx,esi
c00072eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072f3:	83 e1 0f             	and    ecx,0xf
c00072f6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fe:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007302:	83 e6 08             	and    esi,0x8
c0007305:	75 56                	jne    c000735d <f_mkfs+0x1db>
c0007307:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000730b:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000730f:	83 ff 00             	cmp    edi,0x0
c0007312:	76 20                	jbe    c0007334 <f_mkfs+0x1b2>
c0007314:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007319:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007321:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007327:	83 d7 ff             	adc    edi,0xffffffff
c000732a:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000732e:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007332:	eb 21                	jmp    c0007355 <f_mkfs+0x1d3>
c0007334:	ba 3f 00 00 00       	mov    edx,0x3f
c0007339:	39 f2                	cmp    edx,esi
c000733b:	19 f8                	sbb    eax,edi
c000733d:	73 1e                	jae    c000735d <f_mkfs+0x1db>
c000733f:	83 c6 c1             	add    esi,0xffffffc1
c0007342:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000734a:	83 d7 ff             	adc    edi,0xffffffff
c000734d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007351:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007355:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000735d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007361:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007365:	89 04 24             	mov    DWORD PTR [esp],eax
c0007368:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000736c:	31 c0                	xor    eax,eax
c000736e:	ba 7f 00 00 00       	mov    edx,0x7f
c0007373:	89 c7                	mov    edi,eax
c0007375:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007378:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000737c:	0f 83 c5 0a 00 00    	jae    c0007e47 <f_mkfs+0xcc5>
c0007382:	89 df                	mov    edi,ebx
c0007384:	c1 ef 09             	shr    edi,0x9
c0007387:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000738b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007392:	c1 ef 09             	shr    edi,0x9
c0007395:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000739a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000739e:	74 29                	je     c00073c9 <f_mkfs+0x247>
c00073a0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073a6:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00073ab:	0f 97 c2             	seta   dl
c00073ae:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00073b1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073b5:	0f 92 c0             	setb   al
c00073b8:	08 c2                	or     dl,al
c00073ba:	75 5b                	jne    c0007417 <f_mkfs+0x295>
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	83 e0 07             	and    eax,0x7
c00073c3:	3c 04                	cmp    al,0x4
c00073c5:	74 50                	je     c0007417 <f_mkfs+0x295>
c00073c7:	eb 1b                	jmp    c00073e4 <f_mkfs+0x262>
c00073c9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073ce:	0f 87 73 0a 00 00    	ja     c0007e47 <f_mkfs+0xcc5>
c00073d4:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073da:	76 08                	jbe    c00073e4 <f_mkfs+0x262>
c00073dc:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073e4:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073e8:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073ec:	83 e0 01             	and    eax,0x1
c00073ef:	80 e1 02             	and    cl,0x2
c00073f2:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073f6:	74 0d                	je     c0007405 <f_mkfs+0x283>
c00073f8:	84 c0                	test   al,al
c00073fa:	0f 84 53 09 00 00    	je     c0007d53 <f_mkfs+0xbd1>
c0007400:	e9 12 08 00 00       	jmp    c0007c17 <f_mkfs+0xa95>
c0007405:	bb 13 00 00 00       	mov    ebx,0x13
c000740a:	84 c0                	test   al,al
c000740c:	0f 85 05 08 00 00    	jne    c0007c17 <f_mkfs+0xa95>
c0007412:	e9 39 0e 00 00       	jmp    c0008250 <f_mkfs+0x10ce>
c0007417:	31 c0                	xor    eax,eax
c0007419:	ba ff 0f 00 00       	mov    edx,0xfff
c000741e:	89 c7                	mov    edi,eax
c0007420:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007423:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007427:	0f 83 1a 0a 00 00    	jae    c0007e47 <f_mkfs+0xcc5>
c000742d:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007433:	77 39                	ja     c000746e <f_mkfs+0x2ec>
c0007435:	ba ff ff 07 00       	mov    edx,0x7ffff
c000743a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007442:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007445:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007449:	73 08                	jae    c0007453 <f_mkfs+0x2d1>
c000744b:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007453:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007458:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000745b:	b8 00 00 00 00       	mov    eax,0x0
c0007460:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007464:	73 08                	jae    c000746e <f_mkfs+0x2ec>
c0007466:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000746e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007472:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007476:	83 c0 20             	add    eax,0x20
c0007479:	83 d2 00             	adc    edx,0x0
c000747c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007480:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007488:	31 d2                	xor    edx,edx
c000748a:	31 ff                	xor    edi,edi
c000748c:	52                   	push   edx
c000748d:	89 fb                	mov    ebx,edi
c000748f:	50                   	push   eax
c0007490:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007494:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007498:	e8 df be 01 00       	call   c002337c <__udivdi3>
c000749d:	83 c4 10             	add    esp,0x10
c00074a0:	c1 e0 02             	shl    eax,0x2
c00074a3:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00074a7:	05 07 02 00 00       	add    eax,0x207
c00074ac:	89 f1                	mov    ecx,esi
c00074ae:	c1 e8 09             	shr    eax,0x9
c00074b1:	83 c1 ff             	add    ecx,0xffffffff
c00074b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00074b8:	83 d3 ff             	adc    ebx,0xffffffff
c00074bb:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00074bf:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074c3:	31 d2                	xor    edx,edx
c00074c5:	01 c8                	add    eax,ecx
c00074c7:	11 da                	adc    edx,ebx
c00074c9:	89 c1                	mov    ecx,eax
c00074cb:	f7 de                	neg    esi
c00074cd:	89 d0                	mov    eax,edx
c00074cf:	83 d7 00             	adc    edi,0x0
c00074d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074d6:	f7 df                	neg    edi
c00074d8:	21 f1                	and    ecx,esi
c00074da:	21 f8                	and    eax,edi
c00074dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074e4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074ec:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f3:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074f7:	0f ac d0 01          	shrd   eax,edx,0x1
c00074fb:	89 df                	mov    edi,ebx
c00074fd:	d1 ea                	shr    edx,1
c00074ff:	39 c1                	cmp    ecx,eax
c0007501:	19 d7                	sbb    edi,edx
c0007503:	0f 83 3e 09 00 00    	jae    c0007e47 <f_mkfs+0xcc5>
c0007509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000750d:	31 d2                	xor    edx,edx
c000750f:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007513:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007517:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000751b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000751e:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007522:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007526:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000752a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000752e:	83 f8 0f             	cmp    eax,0xf
c0007531:	0f 86 10 09 00 00    	jbe    c0007e47 <f_mkfs+0xcc5>
c0007537:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000753f:	0f 87 02 09 00 00    	ja     c0007e47 <f_mkfs+0xcc5>
c0007545:	31 d2                	xor    edx,edx
c0007547:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000754b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007553:	83 c0 07             	add    eax,0x7
c0007556:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000755e:	c1 e8 03             	shr    eax,0x3
c0007561:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007568:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000756c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007570:	c1 e0 09             	shl    eax,0x9
c0007573:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007577:	48                   	dec    eax
c0007578:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000757c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007580:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007584:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007588:	31 d2                	xor    edx,edx
c000758a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000758e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007599:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000759e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00075a2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00075a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00075aa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00075ae:	31 ff                	xor    edi,edi
c00075b0:	31 f6                	xor    esi,esi
c00075b2:	31 db                	xor    ebx,ebx
c00075b4:	85 ff                	test   edi,edi
c00075b6:	74 05                	je     c00075bd <f_mkfs+0x43b>
c00075b8:	4f                   	dec    edi
c00075b9:	74 44                	je     c00075ff <f_mkfs+0x47d>
c00075bb:	eb 4f                	jmp    c000760c <f_mkfs+0x48a>
c00075bd:	83 ec 0c             	sub    esp,0xc
c00075c0:	0f b7 c3             	movzx  eax,bx
c00075c3:	50                   	push   eax
c00075c4:	e8 05 0e 00 00       	call   c00083ce <ff_wtoupper>
c00075c9:	83 c4 10             	add    esp,0x10
c00075cc:	89 c1                	mov    ecx,eax
c00075ce:	8d 53 01             	lea    edx,[ebx+0x1]
c00075d1:	66 39 c3             	cmp    bx,ax
c00075d4:	75 3e                	jne    c0007614 <f_mkfs+0x492>
c00075d6:	be 01 00 00 00       	mov    esi,0x1
c00075db:	89 df                	mov    edi,ebx
c00075dd:	66 01 f7             	add    di,si
c00075e0:	75 07                	jne    c00075e9 <f_mkfs+0x467>
c00075e2:	83 fe 7f             	cmp    esi,0x7f
c00075e5:	77 31                	ja     c0007618 <f_mkfs+0x496>
c00075e7:	eb 16                	jmp    c00075ff <f_mkfs+0x47d>
c00075e9:	83 ec 0c             	sub    esp,0xc
c00075ec:	0f b7 ff             	movzx  edi,di
c00075ef:	57                   	push   edi
c00075f0:	e8 d9 0d 00 00       	call   c00083ce <ff_wtoupper>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	39 c7                	cmp    edi,eax
c00075fa:	75 e6                	jne    c00075e2 <f_mkfs+0x460>
c00075fc:	46                   	inc    esi
c00075fd:	eb dc                	jmp    c00075db <f_mkfs+0x459>
c00075ff:	31 c0                	xor    eax,eax
c0007601:	89 d9                	mov    ecx,ebx
c0007603:	4e                   	dec    esi
c0007604:	0f 95 c0             	setne  al
c0007607:	43                   	inc    ebx
c0007608:	89 c7                	mov    edi,eax
c000760a:	eb 14                	jmp    c0007620 <f_mkfs+0x49e>
c000760c:	89 f1                	mov    ecx,esi
c000760e:	01 f3                	add    ebx,esi
c0007610:	31 ff                	xor    edi,edi
c0007612:	eb 0c                	jmp    c0007620 <f_mkfs+0x49e>
c0007614:	89 d3                	mov    ebx,edx
c0007616:	eb 08                	jmp    c0007620 <f_mkfs+0x49e>
c0007618:	bf 02 00 00 00       	mov    edi,0x2
c000761d:	83 c9 ff             	or     ecx,0xffffffff
c0007620:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007624:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007627:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000762b:	0f b6 c1             	movzx  eax,cl
c000762e:	e8 3a a9 ff ff       	call   c0001f6d <xsum32>
c0007633:	66 c1 e9 08          	shr    cx,0x8
c0007637:	89 c2                	mov    edx,eax
c0007639:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000763c:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007640:	0f b7 c1             	movzx  eax,cx
c0007643:	e8 25 a9 ff ff       	call   c0001f6d <xsum32>
c0007648:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000764d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007651:	66 85 db             	test   bx,bx
c0007654:	74 1f                	je     c0007675 <f_mkfs+0x4f3>
c0007656:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007659:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007660:	83 c0 02             	add    eax,0x2
c0007663:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007669:	39 c2                	cmp    edx,eax
c000766b:	74 08                	je     c0007675 <f_mkfs+0x4f3>
c000766d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007670:	e9 3f ff ff ff       	jmp    c00075b4 <f_mkfs+0x432>
c0007675:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007678:	83 ec 0c             	sub    esp,0xc
c000767b:	05 01 02 00 00       	add    eax,0x201
c0007680:	c1 e8 09             	shr    eax,0x9
c0007683:	50                   	push   eax
c0007684:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007688:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000768c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007690:	55                   	push   ebp
c0007691:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007695:	e8 a3 a3 ff ff       	call   c0001a3d <disk_write>
c000769a:	83 c4 20             	add    esp,0x20
c000769d:	85 c0                	test   eax,eax
c000769f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00076a2:	0f 85 8b 0b 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c00076a8:	89 d0                	mov    eax,edx
c00076aa:	31 d2                	xor    edx,edx
c00076ac:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00076b0:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00076b4:	66 85 db             	test   bx,bx
c00076b7:	74 04                	je     c00076bd <f_mkfs+0x53b>
c00076b9:	31 c0                	xor    eax,eax
c00076bb:	eb b0                	jmp    c000766d <f_mkfs+0x4eb>
c00076bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076c1:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076c5:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076c9:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076cf:	31 d2                	xor    edx,edx
c00076d1:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076dc:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076e0:	c1 eb 09             	shr    ebx,0x9
c00076e3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076ee:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076f6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076fa:	8d 70 01             	lea    esi,[eax+0x1]
c00076fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007701:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007705:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000770c:	31 d2                	xor    edx,edx
c000770e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007713:	89 04 24             	mov    DWORD PTR [esp],eax
c0007716:	89 c1                	mov    ecx,eax
c0007718:	89 e8                	mov    eax,ebp
c000771a:	e8 e7 a3 ff ff       	call   c0001b06 <mem_set>
c000771f:	31 c0                	xor    eax,eax
c0007721:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007724:	76 10                	jbe    c0007736 <f_mkfs+0x5b4>
c0007726:	83 fe 07             	cmp    esi,0x7
c0007729:	76 0b                	jbe    c0007736 <f_mkfs+0x5b4>
c000772b:	40                   	inc    eax
c000772c:	83 ee 08             	sub    esi,0x8
c000772f:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007734:	eb eb                	jmp    c0007721 <f_mkfs+0x59f>
c0007736:	b2 01                	mov    dl,0x1
c0007738:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000773c:	85 f6                	test   esi,esi
c000773e:	74 0c                	je     c000774c <f_mkfs+0x5ca>
c0007740:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007743:	76 07                	jbe    c000774c <f_mkfs+0x5ca>
c0007745:	08 11                	or     BYTE PTR [ecx],dl
c0007747:	4e                   	dec    esi
c0007748:	d1 e2                	shl    edx,1
c000774a:	eb f0                	jmp    c000773c <f_mkfs+0x5ba>
c000774c:	89 df                	mov    edi,ebx
c000774e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007752:	76 04                	jbe    c0007758 <f_mkfs+0x5d6>
c0007754:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007758:	83 ec 0c             	sub    esp,0xc
c000775b:	57                   	push   edi
c000775c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007760:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007764:	55                   	push   ebp
c0007765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007769:	e8 cf a2 ff ff       	call   c0001a3d <disk_write>
c000776e:	83 c4 20             	add    esp,0x20
c0007771:	85 c0                	test   eax,eax
c0007773:	0f 85 ba 0a 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007779:	31 d2                	xor    edx,edx
c000777b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000777f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007783:	29 fb                	sub    ebx,edi
c0007785:	0f 85 7a ff ff ff    	jne    c0007705 <f_mkfs+0x583>
c000778b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000778f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007797:	31 f6                	xor    esi,esi
c0007799:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000779d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077a0:	31 d2                	xor    edx,edx
c00077a2:	89 e8                	mov    eax,ebp
c00077a4:	e8 5d a3 ff ff       	call   c0001b06 <mem_set>
c00077a9:	31 c9                	xor    ecx,ecx
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 40                	jne    c00077ef <f_mkfs+0x66d>
c00077af:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00077b4:	89 e8                	mov    eax,ebp
c00077b6:	bb 02 00 00 00       	mov    ebx,0x2
c00077bb:	e8 28 a3 ff ff       	call   c0001ae8 <st_dword>
c00077c0:	8d 45 04             	lea    eax,[ebp+0x4]
c00077c3:	83 ca ff             	or     edx,0xffffffff
c00077c6:	e8 1d a3 ff ff       	call   c0001ae8 <st_dword>
c00077cb:	b9 08 00 00 00       	mov    ecx,0x8
c00077d0:	eb 1d                	jmp    c00077ef <f_mkfs+0x66d>
c00077d2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077d5:	76 3b                	jbe    c0007812 <f_mkfs+0x690>
c00077d7:	43                   	inc    ebx
c00077d8:	83 fe 01             	cmp    esi,0x1
c00077db:	89 da                	mov    edx,ebx
c00077dd:	77 03                	ja     c00077e2 <f_mkfs+0x660>
c00077df:	83 ca ff             	or     edx,0xffffffff
c00077e2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077e6:	4e                   	dec    esi
c00077e7:	e8 fc a2 ff ff       	call   c0001ae8 <st_dword>
c00077ec:	83 c1 04             	add    ecx,0x4
c00077ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077f3:	85 f6                	test   esi,esi
c00077f5:	75 db                	jne    c00077d2 <f_mkfs+0x650>
c00077f7:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077fc:	77 14                	ja     c0007812 <f_mkfs+0x690>
c00077fe:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007802:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007809:	85 f6                	test   esi,esi
c000780b:	74 05                	je     c0007812 <f_mkfs+0x690>
c000780d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007810:	77 dd                	ja     c00077ef <f_mkfs+0x66d>
c0007812:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007816:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000781a:	39 cf                	cmp    edi,ecx
c000781c:	76 02                	jbe    c0007820 <f_mkfs+0x69e>
c000781e:	89 cf                	mov    edi,ecx
c0007820:	83 ec 0c             	sub    esp,0xc
c0007823:	57                   	push   edi
c0007824:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007828:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000782c:	55                   	push   ebp
c000782d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007831:	e8 07 a2 ff ff       	call   c0001a3d <disk_write>
c0007836:	83 c4 20             	add    esp,0x20
c0007839:	85 c0                	test   eax,eax
c000783b:	0f 85 f2 09 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007841:	31 d2                	xor    edx,edx
c0007843:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007847:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000784b:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000784f:	0f 85 48 ff ff ff    	jne    c000779d <f_mkfs+0x61b>
c0007855:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007858:	31 d2                	xor    edx,edx
c000785a:	89 e8                	mov    eax,ebp
c000785c:	31 ff                	xor    edi,edi
c000785e:	e8 a3 a2 ff ff       	call   c0001b06 <mem_set>
c0007863:	8d 45 34             	lea    eax,[ebp+0x34]
c0007866:	ba 02 00 00 00       	mov    edx,0x2
c000786b:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000786f:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007873:	e8 70 a2 ff ff       	call   c0001ae8 <st_dword>
c0007878:	8d 45 38             	lea    eax,[ebp+0x38]
c000787b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000787f:	e8 64 a2 ff ff       	call   c0001ae8 <st_dword>
c0007884:	8d 45 44             	lea    eax,[ebp+0x44]
c0007887:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000788b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000788f:	e8 54 a2 ff ff       	call   c0001ae8 <st_dword>
c0007894:	8d 45 54             	lea    eax,[ebp+0x54]
c0007897:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000789b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000789f:	83 c2 02             	add    edx,0x2
c00078a2:	e8 41 a2 ff ff       	call   c0001ae8 <st_dword>
c00078a7:	8d 45 58             	lea    eax,[ebp+0x58]
c00078aa:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00078ae:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00078b2:	e8 31 a2 ff ff       	call   c0001ae8 <st_dword>
c00078b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078bb:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078c0:	89 c6                	mov    esi,eax
c00078c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cd:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078d1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078d8:	39 cb                	cmp    ebx,ecx
c00078da:	76 02                	jbe    c00078de <f_mkfs+0x75c>
c00078dc:	89 cb                	mov    ebx,ecx
c00078de:	83 ec 0c             	sub    esp,0xc
c00078e1:	53                   	push   ebx
c00078e2:	57                   	push   edi
c00078e3:	56                   	push   esi
c00078e4:	55                   	push   ebp
c00078e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078e9:	e8 4f a1 ff ff       	call   c0001a3d <disk_write>
c00078ee:	83 c4 20             	add    esp,0x20
c00078f1:	85 c0                	test   eax,eax
c00078f3:	0f 85 3a 09 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c00078f9:	31 d2                	xor    edx,edx
c00078fb:	b9 00 02 00 00       	mov    ecx,0x200
c0007900:	89 e8                	mov    eax,ebp
c0007902:	e8 ff a1 ff ff       	call   c0001b06 <mem_set>
c0007907:	31 d2                	xor    edx,edx
c0007909:	01 de                	add    esi,ebx
c000790b:	11 d7                	adc    edi,edx
c000790d:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007910:	75 bf                	jne    c00078d1 <f_mkfs+0x74f>
c0007912:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007916:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000791a:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007922:	b9 00 02 00 00       	mov    ecx,0x200
c0007927:	31 d2                	xor    edx,edx
c0007929:	89 e8                	mov    eax,ebp
c000792b:	e8 d6 a1 ff ff       	call   c0001b06 <mem_set>
c0007930:	b9 0b 00 00 00       	mov    ecx,0xb
c0007935:	ba 20 5e 02 c0       	mov    edx,0xc0025e20
c000793a:	89 e8                	mov    eax,ebp
c000793c:	e8 b0 a1 ff ff       	call   c0001af1 <mem_cpy>
c0007941:	8d 45 40             	lea    eax,[ebp+0x40]
c0007944:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007948:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000794c:	e8 9a a1 ff ff       	call   c0001aeb <st_qword>
c0007951:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007955:	8d 45 48             	lea    eax,[ebp+0x48]
c0007958:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000795c:	e8 8a a1 ff ff       	call   c0001aeb <st_qword>
c0007961:	8d 45 50             	lea    eax,[ebp+0x50]
c0007964:	ba 20 00 00 00       	mov    edx,0x20
c0007969:	e8 7a a1 ff ff       	call   c0001ae8 <st_dword>
c000796e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007972:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007976:	e8 6d a1 ff ff       	call   c0001ae8 <st_dword>
c000797b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000797f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007983:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007987:	e8 5c a1 ff ff       	call   c0001ae8 <st_dword>
c000798c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000798f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007993:	e8 50 a1 ff ff       	call   c0001ae8 <st_dword>
c0007998:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000799c:	8d 50 02             	lea    edx,[eax+0x2]
c000799f:	8d 45 60             	lea    eax,[ebp+0x60]
c00079a2:	e8 41 a1 ff ff       	call   c0001ae8 <st_dword>
c00079a7:	8d 45 64             	lea    eax,[ebp+0x64]
c00079aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00079af:	e8 34 a1 ff ff       	call   c0001ae8 <st_dword>
c00079b4:	8d 45 68             	lea    eax,[ebp+0x68]
c00079b7:	ba 00 01 00 00       	mov    edx,0x100
c00079bc:	e8 23 a1 ff ff       	call   c0001ae4 <st_word>
c00079c1:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079c5:	b8 0a 00 00 00       	mov    eax,0xa
c00079ca:	48                   	dec    eax
c00079cb:	74 05                	je     c00079d2 <f_mkfs+0x850>
c00079cd:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079d0:	eb f8                	jmp    c00079ca <f_mkfs+0x848>
c00079d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079d6:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079de:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079e2:	74 05                	je     c00079e9 <f_mkfs+0x867>
c00079e4:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079e7:	eb f5                	jmp    c00079de <f_mkfs+0x85c>
c00079e9:	8d 45 78             	lea    eax,[ebp+0x78]
c00079ec:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079f1:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079f7:	31 db                	xor    ebx,ebx
c00079f9:	e8 e6 a0 ff ff       	call   c0001ae4 <st_word>
c00079fe:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007a04:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a09:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a0c:	e8 d3 a0 ff ff       	call   c0001ae4 <st_word>
c0007a11:	31 c9                	xor    ecx,ecx
c0007a13:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007a16:	83 f8 01             	cmp    eax,0x1
c0007a19:	76 13                	jbe    c0007a2e <f_mkfs+0x8ac>
c0007a1b:	83 f9 70             	cmp    ecx,0x70
c0007a1e:	74 0e                	je     c0007a2e <f_mkfs+0x8ac>
c0007a20:	89 da                	mov    edx,ebx
c0007a22:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a27:	e8 41 a5 ff ff       	call   c0001f6d <xsum32>
c0007a2c:	89 c3                	mov    ebx,eax
c0007a2e:	41                   	inc    ecx
c0007a2f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a35:	75 dc                	jne    c0007a13 <f_mkfs+0x891>
c0007a37:	89 f0                	mov    eax,esi
c0007a39:	89 fa                	mov    edx,edi
c0007a3b:	83 c0 01             	add    eax,0x1
c0007a3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a42:	83 d2 00             	adc    edx,0x0
c0007a45:	83 ec 0c             	sub    esp,0xc
c0007a48:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a4c:	6a 01                	push   0x1
c0007a4e:	57                   	push   edi
c0007a4f:	56                   	push   esi
c0007a50:	55                   	push   ebp
c0007a51:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a55:	e8 e3 9f ff ff       	call   c0001a3d <disk_write>
c0007a5a:	83 c4 20             	add    esp,0x20
c0007a5d:	85 c0                	test   eax,eax
c0007a5f:	0f 85 ce 07 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007a65:	31 d2                	xor    edx,edx
c0007a67:	b9 00 02 00 00       	mov    ecx,0x200
c0007a6c:	89 e8                	mov    eax,ebp
c0007a6e:	e8 93 a0 ff ff       	call   c0001b06 <mem_set>
c0007a73:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a78:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7b:	e8 64 a0 ff ff       	call   c0001ae4 <st_word>
c0007a80:	89 f0                	mov    eax,esi
c0007a82:	89 fa                	mov    edx,edi
c0007a84:	83 c0 09             	add    eax,0x9
c0007a87:	83 d2 00             	adc    edx,0x0
c0007a8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a91:	31 c9                	xor    ecx,ecx
c0007a93:	41                   	inc    ecx
c0007a94:	89 da                	mov    edx,ebx
c0007a96:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a9b:	e8 cd a4 ff ff       	call   c0001f6d <xsum32>
c0007aa0:	89 c3                	mov    ebx,eax
c0007aa2:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007aa8:	75 e9                	jne    c0007a93 <f_mkfs+0x911>
c0007aaa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007aae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ab2:	83 c0 01             	add    eax,0x1
c0007ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ab9:	83 d2 00             	adc    edx,0x0
c0007abc:	83 ec 0c             	sub    esp,0xc
c0007abf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007ac3:	6a 01                	push   0x1
c0007ac5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ac9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007acd:	55                   	push   ebp
c0007ace:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad2:	e8 66 9f ff ff       	call   c0001a3d <disk_write>
c0007ad7:	83 c4 20             	add    esp,0x20
c0007ada:	85 c0                	test   eax,eax
c0007adc:	0f 85 51 07 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ae6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007aea:	75 09                	jne    c0007af5 <f_mkfs+0x973>
c0007aec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007aef:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007af3:	74 12                	je     c0007b07 <f_mkfs+0x985>
c0007af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007afd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007b01:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007b05:	eb 8a                	jmp    c0007a91 <f_mkfs+0x90f>
c0007b07:	31 d2                	xor    edx,edx
c0007b09:	b9 00 02 00 00       	mov    ecx,0x200
c0007b0e:	89 e8                	mov    eax,ebp
c0007b10:	e8 f1 9f ff ff       	call   c0001b06 <mem_set>
c0007b15:	83 c6 0b             	add    esi,0xb
c0007b18:	83 d7 00             	adc    edi,0x0
c0007b1b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007b1f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b23:	31 c9                	xor    ecx,ecx
c0007b25:	41                   	inc    ecx
c0007b26:	89 da                	mov    edx,ebx
c0007b28:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b2d:	e8 3b a4 ff ff       	call   c0001f6d <xsum32>
c0007b32:	89 c3                	mov    ebx,eax
c0007b34:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b3a:	75 e9                	jne    c0007b25 <f_mkfs+0x9a3>
c0007b3c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b43:	83 c6 01             	add    esi,0x1
c0007b46:	83 d7 00             	adc    edi,0x0
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	6a 01                	push   0x1
c0007b4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b56:	55                   	push   ebp
c0007b57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5b:	e8 dd 9e ff ff       	call   c0001a3d <disk_write>
c0007b60:	83 c4 20             	add    esp,0x20
c0007b63:	85 c0                	test   eax,eax
c0007b65:	0f 85 c8 06 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007b6b:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b6f:	75 06                	jne    c0007b77 <f_mkfs+0x9f5>
c0007b71:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b75:	74 09                	je     c0007b80 <f_mkfs+0x9fe>
c0007b77:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b7a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b7e:	eb a3                	jmp    c0007b23 <f_mkfs+0x9a1>
c0007b80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b84:	89 da                	mov    edx,ebx
c0007b86:	01 e8                	add    eax,ebp
c0007b88:	e8 5b 9f ff ff       	call   c0001ae8 <st_dword>
c0007b8d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b92:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b9a:	75 e4                	jne    c0007b80 <f_mkfs+0x9fe>
c0007b9c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b9f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ba3:	83 c6 02             	add    esi,0x2
c0007ba6:	83 d7 00             	adc    edi,0x0
c0007ba9:	83 ec 0c             	sub    esp,0xc
c0007bac:	6a 01                	push   0x1
c0007bae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007bb6:	55                   	push   ebp
c0007bb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007bbb:	e8 7d 9e ff ff       	call   c0001a3d <disk_write>
c0007bc0:	83 c4 20             	add    esp,0x20
c0007bc3:	85 c0                	test   eax,eax
c0007bc5:	0f 85 68 06 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007bcb:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bd0:	74 0d                	je     c0007bdf <f_mkfs+0xa5d>
c0007bd2:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bda:	e9 43 fd ff ff       	jmp    c0007922 <f_mkfs+0x7a0>
c0007bdf:	b1 07                	mov    cl,0x7
c0007be1:	e9 e3 05 00 00       	jmp    c00081c9 <f_mkfs+0x1047>
c0007be6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007beb:	0f 85 4f 02 00 00    	jne    c0007e40 <f_mkfs+0xcbe>
c0007bf1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bf6:	0f 86 22 02 00 00    	jbe    c0007e1e <f_mkfs+0xc9c>
c0007bfc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c01:	0f 85 81 06 00 00    	jne    c0008288 <f_mkfs+0x1106>
c0007c07:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007c0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c0e:	83 f8 40             	cmp    eax,0x40
c0007c11:	0f 87 51 06 00 00    	ja     c0008268 <f_mkfs+0x10e6>
c0007c17:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c1b:	85 ff                	test   edi,edi
c0007c1d:	75 1c                	jne    c0007c3b <f_mkfs+0xab9>
c0007c1f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c22:	ba 20 5d 02 c0       	mov    edx,0xc0025d20
c0007c27:	c1 e9 0c             	shr    ecx,0xc
c0007c2a:	bf 01 00 00 00       	mov    edi,0x1
c0007c2f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c32:	66 85 c0             	test   ax,ax
c0007c35:	0f 85 95 01 00 00    	jne    c0007dd0 <f_mkfs+0xc4e>
c0007c3b:	31 d2                	xor    edx,edx
c0007c3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c40:	f7 f7                	div    edi
c0007c42:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c47:	0f 86 95 01 00 00    	jbe    c0007de2 <f_mkfs+0xc60>
c0007c4d:	83 c0 02             	add    eax,0x2
c0007c50:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c55:	01 c0                	add    eax,eax
c0007c57:	05 ff 01 00 00       	add    eax,0x1ff
c0007c5c:	be 01 00 00 00       	mov    esi,0x1
c0007c61:	c1 e8 09             	shr    eax,0x9
c0007c64:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c6c:	c1 e0 05             	shl    eax,0x5
c0007c6f:	c1 e8 09             	shr    eax,0x9
c0007c72:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c76:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c7b:	31 d2                	xor    edx,edx
c0007c7d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c81:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c85:	89 f0                	mov    eax,esi
c0007c87:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c8b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c9b:	31 d2                	xor    edx,edx
c0007c9d:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007ca2:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007ca6:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007caa:	31 db                	xor    ebx,ebx
c0007cac:	01 c8                	add    eax,ecx
c0007cae:	11 da                	adc    edx,ebx
c0007cb0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007cb4:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007cb8:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007cbc:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007cc0:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007cc4:	f7 da                	neg    edx
c0007cc6:	21 d1                	and    ecx,edx
c0007cc8:	29 d9                	sub    ecx,ebx
c0007cca:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ccf:	0f 85 20 01 00 00    	jne    c0007df5 <f_mkfs+0xc73>
c0007cd5:	31 db                	xor    ebx,ebx
c0007cd7:	01 ce                	add    esi,ecx
c0007cd9:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cdd:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ce1:	31 d2                	xor    edx,edx
c0007ce3:	89 f8                	mov    eax,edi
c0007ce5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ce9:	c1 e0 04             	shl    eax,0x4
c0007cec:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cf0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cf4:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cf8:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cfc:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cff:	19 d3                	sbb    ebx,edx
c0007d01:	0f 82 40 01 00 00    	jb     c0007e47 <f_mkfs+0xcc5>
c0007d07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d0a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007d0e:	89 c8                	mov    eax,ecx
c0007d10:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007d15:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007d19:	29 f0                	sub    eax,esi
c0007d1b:	29 d0                	sub    eax,edx
c0007d1d:	31 d2                	xor    edx,edx
c0007d1f:	f7 f7                	div    edi
c0007d21:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d26:	89 c3                	mov    ebx,eax
c0007d28:	0f 85 b8 fe ff ff    	jne    c0007be6 <f_mkfs+0xa64>
c0007d2e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d33:	0f 87 1d 01 00 00    	ja     c0007e56 <f_mkfs+0xcd4>
c0007d39:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d3e:	0f 85 03 01 00 00    	jne    c0007e47 <f_mkfs+0xcc5>
c0007d44:	83 ff 01             	cmp    edi,0x1
c0007d47:	0f 86 fa 00 00 00    	jbe    c0007e47 <f_mkfs+0xcc5>
c0007d4d:	d1 ef                	shr    edi,1
c0007d4f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d53:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d57:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d5a:	85 db                	test   ebx,ebx
c0007d5c:	75 2d                	jne    c0007d8b <f_mkfs+0xc09>
c0007d5e:	89 cb                	mov    ebx,ecx
c0007d60:	ba 30 5d 02 c0       	mov    edx,0xc0025d30
c0007d65:	c1 eb 11             	shr    ebx,0x11
c0007d68:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d70:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d73:	66 85 c0             	test   ax,ax
c0007d76:	74 11                	je     c0007d89 <f_mkfs+0xc07>
c0007d78:	83 c2 02             	add    edx,0x2
c0007d7b:	39 d8                	cmp    eax,ebx
c0007d7d:	77 0a                	ja     c0007d89 <f_mkfs+0xc07>
c0007d7f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d83:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d87:	eb e7                	jmp    c0007d70 <f_mkfs+0xbee>
c0007d89:	31 db                	xor    ebx,ebx
c0007d8b:	31 d2                	xor    edx,edx
c0007d8d:	89 c8                	mov    eax,ecx
c0007d8f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d93:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d9a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d9f:	c1 ea 09             	shr    edx,0x9
c0007da2:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007da7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007dab:	0f 87 96 00 00 00    	ja     c0007e47 <f_mkfs+0xcc5>
c0007db1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db5:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007dbd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007dc1:	be 20 00 00 00       	mov    esi,0x20
c0007dc6:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007dcb:	e9 a6 fe ff ff       	jmp    c0007c76 <f_mkfs+0xaf4>
c0007dd0:	83 c2 02             	add    edx,0x2
c0007dd3:	39 c8                	cmp    eax,ecx
c0007dd5:	0f 87 60 fe ff ff    	ja     c0007c3b <f_mkfs+0xab9>
c0007ddb:	01 ff                	add    edi,edi
c0007ddd:	e9 4d fe ff ff       	jmp    c0007c2f <f_mkfs+0xaad>
c0007de2:	8d 04 40             	lea    eax,[eax+eax*2]
c0007de5:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dea:	40                   	inc    eax
c0007deb:	d1 e8                	shr    eax,1
c0007ded:	83 c0 03             	add    eax,0x3
c0007df0:	e9 62 fe ff ff       	jmp    c0007c57 <f_mkfs+0xad5>
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	89 c8                	mov    eax,ecx
c0007df9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dfd:	85 d2                	test   edx,edx
c0007dff:	74 0c                	je     c0007e0d <f_mkfs+0xc8b>
c0007e01:	49                   	dec    ecx
c0007e02:	46                   	inc    esi
c0007e03:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007e08:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007e0d:	89 c8                	mov    eax,ecx
c0007e0f:	31 d2                	xor    edx,edx
c0007e11:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007e15:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007e19:	e9 c3 fe ff ff       	jmp    c0007ce1 <f_mkfs+0xb5f>
c0007e1e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e23:	77 31                	ja     c0007e56 <f_mkfs+0xcd4>
c0007e25:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e2a:	75 1b                	jne    c0007e47 <f_mkfs+0xcc5>
c0007e2c:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e33:	3d 80 00 00 00       	cmp    eax,0x80
c0007e38:	0f 86 d9 fd ff ff    	jbe    c0007c17 <f_mkfs+0xa95>
c0007e3e:	eb 07                	jmp    c0007e47 <f_mkfs+0xcc5>
c0007e40:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e45:	76 0a                	jbe    c0007e51 <f_mkfs+0xccf>
c0007e47:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e4c:	e9 ff 03 00 00       	jmp    c0008250 <f_mkfs+0x10ce>
c0007e51:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e56:	31 d2                	xor    edx,edx
c0007e58:	b9 00 02 00 00       	mov    ecx,0x200
c0007e5d:	89 e8                	mov    eax,ebp
c0007e5f:	e8 a2 9c ff ff       	call   c0001b06 <mem_set>
c0007e64:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e69:	ba 42 5e 02 c0       	mov    edx,0xc0025e42
c0007e6e:	89 e8                	mov    eax,ebp
c0007e70:	e8 7c 9c ff ff       	call   c0001af1 <mem_cpy>
c0007e75:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e78:	ba 00 02 00 00       	mov    edx,0x200
c0007e7d:	e8 62 9c ff ff       	call   c0001ae4 <st_word>
c0007e82:	89 f8                	mov    eax,edi
c0007e84:	0f b7 d6             	movzx  edx,si
c0007e87:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e8a:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e8d:	e8 52 9c ff ff       	call   c0001ae4 <st_word>
c0007e92:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9b:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e9e:	75 08                	jne    c0007ea8 <f_mkfs+0xd26>
c0007ea0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ea8:	8d 45 11             	lea    eax,[ebp+0x11]
c0007eab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007eaf:	e8 30 9c ff ff       	call   c0001ae4 <st_word>
c0007eb4:	b8 ff ff 00 00       	mov    eax,0xffff
c0007eb9:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007ebd:	39 d0                	cmp    eax,edx
c0007ebf:	b8 00 00 00 00       	mov    eax,0x0
c0007ec4:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ec8:	72 0a                	jb     c0007ed4 <f_mkfs+0xd52>
c0007eca:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ecd:	e8 12 9c ff ff       	call   c0001ae4 <st_word>
c0007ed2:	eb 08                	jmp    c0007edc <f_mkfs+0xd5a>
c0007ed4:	8d 45 20             	lea    eax,[ebp+0x20]
c0007ed7:	e8 0c 9c ff ff       	call   c0001ae8 <st_dword>
c0007edc:	8d 45 18             	lea    eax,[ebp+0x18]
c0007edf:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ee4:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ee8:	e8 f7 9b ff ff       	call   c0001ae4 <st_word>
c0007eed:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ef0:	ba ff 00 00 00       	mov    edx,0xff
c0007ef5:	e8 ea 9b ff ff       	call   c0001ae4 <st_word>
c0007efa:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007efd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f01:	e8 e2 9b ff ff       	call   c0001ae8 <st_dword>
c0007f06:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f0b:	75 57                	jne    c0007f64 <f_mkfs+0xde2>
c0007f0d:	8d 45 43             	lea    eax,[ebp+0x43]
c0007f10:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f15:	e8 ce 9b ff ff       	call   c0001ae8 <st_dword>
c0007f1a:	8d 45 24             	lea    eax,[ebp+0x24]
c0007f1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f21:	e8 c2 9b ff ff       	call   c0001ae8 <st_dword>
c0007f26:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f29:	ba 02 00 00 00       	mov    edx,0x2
c0007f2e:	e8 b5 9b ff ff       	call   c0001ae8 <st_dword>
c0007f33:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f36:	ba 01 00 00 00       	mov    edx,0x1
c0007f3b:	e8 a4 9b ff ff       	call   c0001ae4 <st_word>
c0007f40:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f43:	ba 06 00 00 00       	mov    edx,0x6
c0007f48:	e8 97 9b ff ff       	call   c0001ae4 <st_word>
c0007f4d:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f51:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f55:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f58:	b9 13 00 00 00       	mov    ecx,0x13
c0007f5d:	ba 4e 5e 02 c0       	mov    edx,0xc0025e4e
c0007f62:	eb 2f                	jmp    c0007f93 <f_mkfs+0xe11>
c0007f64:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f67:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f6c:	e8 77 9b ff ff       	call   c0001ae8 <st_dword>
c0007f71:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f76:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f79:	e8 66 9b ff ff       	call   c0001ae4 <st_word>
c0007f7e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f82:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f86:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f89:	b9 13 00 00 00       	mov    ecx,0x13
c0007f8e:	ba 62 5e 02 c0       	mov    edx,0xc0025e62
c0007f93:	e8 59 9b ff ff       	call   c0001af1 <mem_cpy>
c0007f98:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f9e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fa3:	89 f0                	mov    eax,esi
c0007fa5:	e8 3a 9b ff ff       	call   c0001ae4 <st_word>
c0007faa:	83 ec 0c             	sub    esp,0xc
c0007fad:	6a 01                	push   0x1
c0007faf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007fb7:	55                   	push   ebp
c0007fb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fbc:	e8 7c 9a ff ff       	call   c0001a3d <disk_write>
c0007fc1:	83 c4 20             	add    esp,0x20
c0007fc4:	85 c0                	test   eax,eax
c0007fc6:	0f 85 67 02 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0007fcc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fd1:	0f 85 b7 00 00 00    	jne    c000808e <f_mkfs+0xf0c>
c0007fd7:	83 ec 0c             	sub    esp,0xc
c0007fda:	6a 01                	push   0x1
c0007fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe4:	83 c0 06             	add    eax,0x6
c0007fe7:	83 d2 00             	adc    edx,0x0
c0007fea:	52                   	push   edx
c0007feb:	50                   	push   eax
c0007fec:	55                   	push   ebp
c0007fed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff1:	e8 47 9a ff ff       	call   c0001a3d <disk_write>
c0007ff6:	83 c4 20             	add    esp,0x20
c0007ff9:	b9 00 02 00 00       	mov    ecx,0x200
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	89 e8                	mov    eax,ebp
c0008002:	e8 ff 9a ff ff       	call   c0001b06 <mem_set>
c0008007:	ba 52 52 61 41       	mov    edx,0x41615252
c000800c:	89 e8                	mov    eax,ebp
c000800e:	e8 d5 9a ff ff       	call   c0001ae8 <st_dword>
c0008013:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008019:	ba 72 72 41 61       	mov    edx,0x61417272
c000801e:	e8 c5 9a ff ff       	call   c0001ae8 <st_dword>
c0008023:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008026:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000802c:	e8 b7 9a ff ff       	call   c0001ae8 <st_dword>
c0008031:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008037:	ba 02 00 00 00       	mov    edx,0x2
c000803c:	e8 a7 9a ff ff       	call   c0001ae8 <st_dword>
c0008041:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008046:	89 f0                	mov    eax,esi
c0008048:	e8 97 9a ff ff       	call   c0001ae4 <st_word>
c000804d:	83 ec 0c             	sub    esp,0xc
c0008050:	6a 01                	push   0x1
c0008052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008056:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000805a:	83 c0 07             	add    eax,0x7
c000805d:	83 d2 00             	adc    edx,0x0
c0008060:	52                   	push   edx
c0008061:	50                   	push   eax
c0008062:	55                   	push   ebp
c0008063:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008067:	e8 d1 99 ff ff       	call   c0001a3d <disk_write>
c000806c:	83 c4 14             	add    esp,0x14
c000806f:	6a 01                	push   0x1
c0008071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008075:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008079:	83 c0 01             	add    eax,0x1
c000807c:	83 d2 00             	adc    edx,0x0
c000807f:	52                   	push   edx
c0008080:	50                   	push   eax
c0008081:	55                   	push   ebp
c0008082:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008086:	e8 b2 99 ff ff       	call   c0001a3d <disk_write>
c000808b:	83 c4 20             	add    esp,0x20
c000808e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008095:	31 d2                	xor    edx,edx
c0008097:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000809d:	31 db                	xor    ebx,ebx
c000809f:	89 e8                	mov    eax,ebp
c00080a1:	e8 60 9a ff ff       	call   c0001b06 <mem_set>
c00080a6:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00080ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00080b2:	0f 94 c3             	sete   bl
c00080b5:	4b                   	dec    ebx
c00080b6:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00080bc:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080c2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c7:	75 21                	jne    c00080ea <f_mkfs+0xf68>
c00080c9:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080ce:	89 e8                	mov    eax,ebp
c00080d0:	e8 13 9a ff ff       	call   c0001ae8 <st_dword>
c00080d5:	8d 45 04             	lea    eax,[ebp+0x4]
c00080d8:	83 ca ff             	or     edx,0xffffffff
c00080db:	e8 08 9a ff ff       	call   c0001ae8 <st_dword>
c00080e0:	8d 45 08             	lea    eax,[ebp+0x8]
c00080e3:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080e8:	eb 04                	jmp    c00080ee <f_mkfs+0xf6c>
c00080ea:	89 da                	mov    edx,ebx
c00080ec:	89 e8                	mov    eax,ebp
c00080ee:	e8 f5 99 ff ff       	call   c0001ae8 <st_dword>
c00080f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080fb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080ff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008103:	39 ce                	cmp    esi,ecx
c0008105:	76 02                	jbe    c0008109 <f_mkfs+0xf87>
c0008107:	89 ce                	mov    esi,ecx
c0008109:	83 ec 0c             	sub    esp,0xc
c000810c:	56                   	push   esi
c000810d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008111:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008115:	55                   	push   ebp
c0008116:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000811a:	e8 1e 99 ff ff       	call   c0001a3d <disk_write>
c000811f:	83 c4 20             	add    esp,0x20
c0008122:	85 c0                	test   eax,eax
c0008124:	0f 85 09 01 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c000812a:	31 d2                	xor    edx,edx
c000812c:	b9 00 02 00 00       	mov    ecx,0x200
c0008131:	89 e8                	mov    eax,ebp
c0008133:	e8 ce 99 ff ff       	call   c0001b06 <mem_set>
c0008138:	31 d2                	xor    edx,edx
c000813a:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000813e:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008142:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008146:	75 b3                	jne    c00080fb <f_mkfs+0xf79>
c0008148:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000814b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008152:	40                   	inc    eax
c0008153:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008157:	0f 87 65 ff ff ff    	ja     c00080c2 <f_mkfs+0xf40>
c000815d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008162:	74 04                	je     c0008168 <f_mkfs+0xfe6>
c0008164:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008168:	89 fb                	mov    ebx,edi
c000816a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000816e:	76 04                	jbe    c0008174 <f_mkfs+0xff2>
c0008170:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008174:	83 ec 0c             	sub    esp,0xc
c0008177:	53                   	push   ebx
c0008178:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000817c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008180:	55                   	push   ebp
c0008181:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008185:	e8 b3 98 ff ff       	call   c0001a3d <disk_write>
c000818a:	83 c4 20             	add    esp,0x20
c000818d:	85 c0                	test   eax,eax
c000818f:	0f 85 9e 00 00 00    	jne    c0008233 <f_mkfs+0x10b1>
c0008195:	31 d2                	xor    edx,edx
c0008197:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000819b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000819f:	29 df                	sub    edi,ebx
c00081a1:	75 c5                	jne    c0008168 <f_mkfs+0xfe6>
c00081a3:	b1 0c                	mov    cl,0xc
c00081a5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081aa:	74 1d                	je     c00081c9 <f_mkfs+0x1047>
c00081ac:	b8 ff ff 00 00       	mov    eax,0xffff
c00081b1:	b1 06                	mov    cl,0x6
c00081b3:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00081b7:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00081bb:	72 0c                	jb     c00081c9 <f_mkfs+0x1047>
c00081bd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081c2:	0f 94 c1             	sete   cl
c00081c5:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081c9:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081ce:	75 4c                	jne    c000821c <f_mkfs+0x109a>
c00081d0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081d4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081d8:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081df:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081e6:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081f1:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081fc:	0f b6 c9             	movzx  ecx,cl
c00081ff:	83 ec 0c             	sub    esp,0xc
c0008202:	55                   	push   ebp
c0008203:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000820a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000820e:	e8 2f c2 ff ff       	call   c0004442 <create_partition>
c0008213:	83 c4 10             	add    esp,0x10
c0008216:	89 c3                	mov    ebx,eax
c0008218:	85 c0                	test   eax,eax
c000821a:	75 34                	jne    c0008250 <f_mkfs+0x10ce>
c000821c:	31 db                	xor    ebx,ebx
c000821e:	50                   	push   eax
c000821f:	6a 00                	push   0x0
c0008221:	6a 00                	push   0x0
c0008223:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008227:	e8 27 98 ff ff       	call   c0001a53 <disk_ioctl>
c000822c:	83 c4 10             	add    esp,0x10
c000822f:	85 c0                	test   eax,eax
c0008231:	74 1d                	je     c0008250 <f_mkfs+0x10ce>
c0008233:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000823b:	75 0c                	jne    c0008249 <f_mkfs+0x10c7>
c000823d:	83 ec 0c             	sub    esp,0xc
c0008240:	55                   	push   ebp
c0008241:	e8 75 00 00 00       	call   c00082bb <ff_memfree>
c0008246:	83 c4 10             	add    esp,0x10
c0008249:	bb 01 00 00 00       	mov    ebx,0x1
c000824e:	eb 48                	jmp    c0008298 <f_mkfs+0x1116>
c0008250:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008258:	75 3e                	jne    c0008298 <f_mkfs+0x1116>
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	55                   	push   ebp
c000825e:	e8 58 00 00 00       	call   c00082bb <ff_memfree>
c0008263:	83 c4 10             	add    esp,0x10
c0008266:	eb 30                	jmp    c0008298 <f_mkfs+0x1116>
c0008268:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000826d:	0f 85 eb fa ff ff    	jne    c0007d5e <f_mkfs+0xbdc>
c0008273:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008277:	81 ff 80 00 00 00    	cmp    edi,0x80
c000827d:	0f 86 b8 f9 ff ff    	jbe    c0007c3b <f_mkfs+0xab9>
c0008283:	e9 bf fb ff ff       	jmp    c0007e47 <f_mkfs+0xcc5>
c0008288:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000828d:	0f 85 c0 fa ff ff    	jne    c0007d53 <f_mkfs+0xbd1>
c0008293:	e9 af fb ff ff       	jmp    c0007e47 <f_mkfs+0xcc5>
c0008298:	81 c4 9c 00 00 00    	add    esp,0x9c
c000829e:	89 d8                	mov    eax,ebx
c00082a0:	5b                   	pop    ebx
c00082a1:	5e                   	pop    esi
c00082a2:	5f                   	pop    edi
c00082a3:	5d                   	pop    ebp
c00082a4:	c3                   	ret    

c00082a5 <ff_memalloc>:
c00082a5:	83 ec 0c             	sub    esp,0xc
c00082a8:	83 ec 0c             	sub    esp,0xc
c00082ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082af:	e8 b2 6e 00 00       	call   c000f166 <malloc>
c00082b4:	83 c4 10             	add    esp,0x10
c00082b7:	83 c4 0c             	add    esp,0xc
c00082ba:	c3                   	ret    

c00082bb <ff_memfree>:
c00082bb:	83 ec 0c             	sub    esp,0xc
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082c5:	e8 ac 6e 00 00       	call   c000f176 <free>
c00082ca:	83 c4 10             	add    esp,0x10
c00082cd:	90                   	nop
c00082ce:	83 c4 0c             	add    esp,0xc
c00082d1:	c3                   	ret    

c00082d2 <ff_uni2oem>:
c00082d2:	83 ec 14             	sub    esp,0x14
c00082d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082d9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082dd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082e4:	c7 44 24 0c 80 61 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026180
c00082ec:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082f1:	77 0b                	ja     c00082fe <ff_uni2oem+0x2c>
c00082f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	eb 5b                	jmp    c0008359 <ff_uni2oem+0x87>
c00082fe:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008306:	77 51                	ja     c0008359 <ff_uni2oem+0x87>
c0008308:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000830e:	75 49                	jne    c0008359 <ff_uni2oem+0x87>
c0008310:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008317:	eb 0b                	jmp    c0008324 <ff_uni2oem+0x52>
c0008319:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000831e:	40                   	inc    eax
c000831f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008324:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000832a:	77 1b                	ja     c0008347 <ff_uni2oem+0x75>
c000832c:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008331:	01 c0                	add    eax,eax
c0008333:	89 c2                	mov    edx,eax
c0008335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008339:	01 d0                	add    eax,edx
c000833b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000833e:	0f b7 c0             	movzx  eax,ax
c0008341:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008345:	75 d2                	jne    c0008319 <ff_uni2oem+0x47>
c0008347:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000834c:	83 e8 80             	sub    eax,0xffffff80
c000834f:	25 ff 00 00 00       	and    eax,0xff
c0008354:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008359:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000835e:	83 c4 14             	add    esp,0x14
c0008361:	c3                   	ret    

c0008362 <ff_oem2uni>:
c0008362:	83 ec 18             	sub    esp,0x18
c0008365:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008372:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008376:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000837d:	c7 44 24 10 80 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026180
c0008385:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000838b:	77 0b                	ja     c0008398 <ff_oem2uni+0x36>
c000838d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008391:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008396:	eb 2d                	jmp    c00083c5 <ff_oem2uni+0x63>
c0008398:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000839e:	75 25                	jne    c00083c5 <ff_oem2uni+0x63>
c00083a0:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00083a7:	77 1c                	ja     c00083c5 <ff_oem2uni+0x63>
c00083a9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00083ae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00083b3:	01 c0                	add    eax,eax
c00083b5:	89 c2                	mov    edx,eax
c00083b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083bb:	01 d0                	add    eax,edx
c00083bd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083c0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083c5:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083ca:	83 c4 18             	add    esp,0x18
c00083cd:	c3                   	ret    

c00083ce <ff_wtoupper>:
c00083ce:	83 ec 10             	sub    esp,0x10
c00083d1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083d9:	0f 87 3e 01 00 00    	ja     c000851d <ff_wtoupper+0x14f>
c00083df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083e3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083e8:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083ef:	77 07                	ja     c00083f8 <ff_wtoupper+0x2a>
c00083f1:	b8 80 5f 02 c0       	mov    eax,0xc0025f80
c00083f6:	eb 05                	jmp    c00083fd <ff_wtoupper+0x2f>
c00083f8:	b8 c0 5e 02 c0       	mov    eax,0xc0025ec0
c00083fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008401:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008405:	8d 50 02             	lea    edx,[eax+0x2]
c0008408:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000840c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000840f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008414:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c000841a:	0f 84 f4 00 00 00    	je     c0008514 <ff_wtoupper+0x146>
c0008420:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008425:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000842a:	0f 82 e4 00 00 00    	jb     c0008514 <ff_wtoupper+0x146>
c0008430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008434:	8d 50 02             	lea    edx,[eax+0x2]
c0008437:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000843b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000843e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008443:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008448:	66 c1 e8 08          	shr    ax,0x8
c000844c:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008451:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008458:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000845d:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008462:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008467:	01 ca                	add    edx,ecx
c0008469:	39 d0                	cmp    eax,edx
c000846b:	0f 8d 86 00 00 00    	jge    c00084f7 <ff_wtoupper+0x129>
c0008471:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008476:	83 f8 08             	cmp    eax,0x8
c0008479:	0f 87 94 00 00 00    	ja     c0008513 <ff_wtoupper+0x145>
c000847f:	8b 04 85 80 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda180]
c0008486:	ff e0                	jmp    eax
c0008488:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000848d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008492:	29 c2                	sub    edx,eax
c0008494:	89 d0                	mov    eax,edx
c0008496:	01 c0                	add    eax,eax
c0008498:	89 c2                	mov    edx,eax
c000849a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000849e:	01 d0                	add    eax,edx
c00084a0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084a3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00084a8:	eb 4b                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084aa:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084af:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00084b3:	83 e0 01             	and    eax,0x1
c00084b6:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00084bb:	eb 38                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084c3:	eb 30                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084c5:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084cb:	eb 28                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084cd:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084d3:	eb 20                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084d5:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084db:	eb 18                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084dd:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084e3:	eb 10                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084e5:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084eb:	eb 08                	jmp    c00084f5 <ff_wtoupper+0x127>
c00084ed:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084f4:	90                   	nop
c00084f5:	eb 1c                	jmp    c0008513 <ff_wtoupper+0x145>
c00084f7:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084fd:	0f 85 fe fe ff ff    	jne    c0008401 <ff_wtoupper+0x33>
c0008503:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008508:	01 c0                	add    eax,eax
c000850a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000850e:	e9 ee fe ff ff       	jmp    c0008401 <ff_wtoupper+0x33>
c0008513:	90                   	nop
c0008514:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008519:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000851d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008521:	83 c4 10             	add    esp,0x10
c0008524:	c3                   	ret    

c0008525 <is_bad_src_ratio>:
c0008525:	83 ec 1c             	sub    esp,0x1c
c0008528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000852c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008530:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008538:	b8 00 00 00 00       	mov    eax,0x0
c000853d:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008542:	52                   	push   edx
c0008543:	50                   	push   eax
c0008544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000854c:	e8 fe c8 01 00       	call   c0024e4f <__ltdf2>
c0008551:	83 c4 10             	add    esp,0x10
c0008554:	85 c0                	test   eax,eax
c0008556:	78 20                	js     c0008578 <is_bad_src_ratio+0x53>
c0008558:	b8 00 00 00 00       	mov    eax,0x0
c000855d:	ba 00 00 70 40       	mov    edx,0x40700000
c0008562:	52                   	push   edx
c0008563:	50                   	push   eax
c0008564:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008568:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000856c:	e8 c0 c8 01 00       	call   c0024e31 <__gtdf2>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	85 c0                	test   eax,eax
c0008576:	7e 07                	jle    c000857f <is_bad_src_ratio+0x5a>
c0008578:	b8 01 00 00 00       	mov    eax,0x1
c000857d:	eb 05                	jmp    c0008584 <is_bad_src_ratio+0x5f>
c000857f:	b8 00 00 00 00       	mov    eax,0x0
c0008584:	83 c4 1c             	add    esp,0x1c
c0008587:	c3                   	ret    

c0008588 <psrc_set_converter>:
c0008588:	56                   	push   esi
c0008589:	89 d6                	mov    esi,edx
c000858b:	53                   	push   ebx
c000858c:	89 c3                	mov    ebx,eax
c000858e:	83 ec 0c             	sub    esp,0xc
c0008591:	52                   	push   edx
c0008592:	50                   	push   eax
c0008593:	e8 58 51 00 00       	call   c000d6f0 <sinc_set_converter>
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	85 c0                	test   eax,eax
c000859d:	74 25                	je     c00085c4 <psrc_set_converter+0x3c>
c000859f:	50                   	push   eax
c00085a0:	50                   	push   eax
c00085a1:	56                   	push   esi
c00085a2:	53                   	push   ebx
c00085a3:	e8 2a 59 00 00       	call   c000ded2 <zoh_set_converter>
c00085a8:	83 c4 10             	add    esp,0x10
c00085ab:	85 c0                	test   eax,eax
c00085ad:	74 15                	je     c00085c4 <psrc_set_converter+0x3c>
c00085af:	51                   	push   ecx
c00085b0:	51                   	push   ecx
c00085b1:	56                   	push   esi
c00085b2:	53                   	push   ebx
c00085b3:	e8 77 10 00 00       	call   c000962f <linear_set_converter>
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	ba 0a 00 00 00       	mov    edx,0xa
c00085c0:	85 c0                	test   eax,eax
c00085c2:	75 02                	jne    c00085c6 <psrc_set_converter+0x3e>
c00085c4:	31 d2                	xor    edx,edx
c00085c6:	89 d0                	mov    eax,edx
c00085c8:	5a                   	pop    edx
c00085c9:	5b                   	pop    ebx
c00085ca:	5e                   	pop    esi
c00085cb:	c3                   	ret    

c00085cc <src_delete>:
c00085cc:	53                   	push   ebx
c00085cd:	83 ec 08             	sub    esp,0x8
c00085d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085d4:	85 db                	test   ebx,ebx
c00085d6:	74 29                	je     c0008601 <src_delete+0x35>
c00085d8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085db:	85 c0                	test   eax,eax
c00085dd:	74 0c                	je     c00085eb <src_delete+0x1f>
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	50                   	push   eax
c00085e3:	e8 8e 6b 00 00       	call   c000f176 <free>
c00085e8:	83 c4 10             	add    esp,0x10
c00085eb:	50                   	push   eax
c00085ec:	6a 3c                	push   0x3c
c00085ee:	6a 00                	push   0x0
c00085f0:	53                   	push   ebx
c00085f1:	e8 f6 80 ff ff       	call   c00006ec <memset>
c00085f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085f9:	e8 78 6b 00 00       	call   c000f176 <free>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	31 c0                	xor    eax,eax
c0008603:	83 c4 08             	add    esp,0x8
c0008606:	5b                   	pop    ebx
c0008607:	c3                   	ret    

c0008608 <src_process>:
c0008608:	56                   	push   esi
c0008609:	53                   	push   ebx
c000860a:	83 ec 14             	sub    esp,0x14
c000860d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008611:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008615:	85 f6                	test   esi,esi
c0008617:	0f 84 2a 01 00 00    	je     c0008747 <src_process+0x13f>
c000861d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008621:	0f 84 27 01 00 00    	je     c000874e <src_process+0x146>
c0008627:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c000862b:	0f 84 1d 01 00 00    	je     c000874e <src_process+0x146>
c0008631:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008638:	0f 85 17 01 00 00    	jne    c0008755 <src_process+0x14d>
c000863e:	85 db                	test   ebx,ebx
c0008640:	0f 84 16 01 00 00    	je     c000875c <src_process+0x154>
c0008646:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008649:	0f 84 14 01 00 00    	je     c0008763 <src_process+0x15b>
c000864f:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008653:	0f 84 0a 01 00 00    	je     c0008763 <src_process+0x15b>
c0008659:	50                   	push   eax
c000865a:	50                   	push   eax
c000865b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000865e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008661:	e8 bf fe ff ff       	call   c0008525 <is_bad_src_ratio>
c0008666:	83 c4 10             	add    esp,0x10
c0008669:	85 c0                	test   eax,eax
c000866b:	0f 85 f9 00 00 00    	jne    c000876a <src_process+0x162>
c0008671:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008675:	79 07                	jns    c000867e <src_process+0x76>
c0008677:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000867e:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008682:	79 07                	jns    c000868b <src_process+0x83>
c0008684:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000868b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000868d:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008690:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008693:	39 ca                	cmp    edx,ecx
c0008695:	73 0b                	jae    c00086a2 <src_process+0x9a>
c0008697:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000869b:	8d 04 82             	lea    eax,[edx+eax*4]
c000869e:	39 c1                	cmp    ecx,eax
c00086a0:	eb 09                	jmp    c00086ab <src_process+0xa3>
c00086a2:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00086a6:	8d 04 81             	lea    eax,[ecx+eax*4]
c00086a9:	39 c2                	cmp    edx,eax
c00086ab:	0f 82 c0 00 00 00    	jb     c0008771 <src_process+0x169>
c00086b1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00086b8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00086bf:	68 00 00 70 3f       	push   0x3f700000
c00086c4:	6a 00                	push   0x0
c00086c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086c9:	ff 36                	push   DWORD PTR [esi]
c00086cb:	e8 7f c7 01 00       	call   c0024e4f <__ltdf2>
c00086d0:	83 c4 10             	add    esp,0x10
c00086d3:	85 c0                	test   eax,eax
c00086d5:	79 0b                	jns    c00086e2 <src_process+0xda>
c00086d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086da:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086dd:	89 06                	mov    DWORD PTR [esi],eax
c00086df:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086e2:	83 ec 10             	sub    esp,0x10
c00086e5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086ee:	ff 36                	push   DWORD PTR [esi]
c00086f0:	e8 5f be 01 00       	call   c0024554 <__subdf3>
c00086f5:	83 c4 18             	add    esp,0x18
c00086f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008700:	52                   	push   edx
c0008701:	50                   	push   eax
c0008702:	e8 d9 c8 01 00       	call   c0024fe0 <fabs>
c0008707:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000870b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000870f:	83 c4 10             	add    esp,0x10
c0008712:	68 af 03 d2 3c       	push   0x3cd203af
c0008717:	68 16 56 e7 9e       	push   0x9ee75616
c000871c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008720:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008724:	e8 26 c7 01 00       	call   c0024e4f <__ltdf2>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	85 c0                	test   eax,eax
c000872e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0008732:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008736:	79 05                	jns    c000873d <src_process+0x135>
c0008738:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000873b:	eb 03                	jmp    c0008740 <src_process+0x138>
c000873d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008740:	83 c4 14             	add    esp,0x14
c0008743:	5b                   	pop    ebx
c0008744:	5e                   	pop    esi
c0008745:	ff e0                	jmp    eax
c0008747:	b8 02 00 00 00       	mov    eax,0x2
c000874c:	eb 28                	jmp    c0008776 <src_process+0x16e>
c000874e:	b8 07 00 00 00       	mov    eax,0x7
c0008753:	eb 21                	jmp    c0008776 <src_process+0x16e>
c0008755:	b8 12 00 00 00       	mov    eax,0x12
c000875a:	eb 1a                	jmp    c0008776 <src_process+0x16e>
c000875c:	b8 03 00 00 00       	mov    eax,0x3
c0008761:	eb 13                	jmp    c0008776 <src_process+0x16e>
c0008763:	b8 04 00 00 00       	mov    eax,0x4
c0008768:	eb 0c                	jmp    c0008776 <src_process+0x16e>
c000876a:	b8 06 00 00 00       	mov    eax,0x6
c000876f:	eb 05                	jmp    c0008776 <src_process+0x16e>
c0008771:	b8 10 00 00 00       	mov    eax,0x10
c0008776:	83 c4 14             	add    esp,0x14
c0008779:	5b                   	pop    ebx
c000877a:	5e                   	pop    esi
c000877b:	c3                   	ret    

c000877c <src_callback_read>:
c000877c:	55                   	push   ebp
c000877d:	57                   	push   edi
c000877e:	56                   	push   esi
c000877f:	53                   	push   ebx
c0008780:	83 ec 3c             	sub    esp,0x3c
c0008783:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008787:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000878b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000878f:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008793:	85 ed                	test   ebp,ebp
c0008795:	0f 8e 30 01 00 00    	jle    c00088cb <src_callback_read+0x14f>
c000879b:	85 db                	test   ebx,ebx
c000879d:	0f 84 28 01 00 00    	je     c00088cb <src_callback_read+0x14f>
c00087a3:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00087aa:	74 0c                	je     c00087b8 <src_callback_read+0x3c>
c00087ac:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00087b3:	e9 13 01 00 00       	jmp    c00088cb <src_callback_read+0x14f>
c00087b8:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00087bc:	75 0c                	jne    c00087ca <src_callback_read+0x4e>
c00087be:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00087c5:	e9 01 01 00 00       	jmp    c00088cb <src_callback_read+0x14f>
c00087ca:	51                   	push   ecx
c00087cb:	6a 24                	push   0x24
c00087cd:	6a 00                	push   0x0
c00087cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087d3:	50                   	push   eax
c00087d4:	e8 13 7f ff ff       	call   c00006ec <memset>
c00087d9:	58                   	pop    eax
c00087da:	5a                   	pop    edx
c00087db:	57                   	push   edi
c00087dc:	56                   	push   esi
c00087dd:	e8 43 fd ff ff       	call   c0008525 <is_bad_src_ratio>
c00087e2:	83 c4 10             	add    esp,0x10
c00087e5:	85 c0                	test   eax,eax
c00087e7:	74 0c                	je     c00087f5 <src_callback_read+0x79>
c00087e9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087f0:	e9 d6 00 00 00       	jmp    c00088cb <src_callback_read+0x14f>
c00087f5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087f9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008801:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008805:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008808:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000880c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008810:	31 f6                	xor    esi,esi
c0008812:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008815:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008819:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000881e:	75 30                	jne    c0008850 <src_callback_read+0xd4>
c0008820:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008828:	52                   	push   edx
c0008829:	52                   	push   edx
c000882a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000882e:	50                   	push   eax
c000882f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008832:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008835:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008839:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000883d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008841:	83 c4 10             	add    esp,0x10
c0008844:	85 c0                	test   eax,eax
c0008846:	75 08                	jne    c0008850 <src_callback_read+0xd4>
c0008848:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008850:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008857:	50                   	push   eax
c0008858:	50                   	push   eax
c0008859:	8d 44 24 14          	lea    eax,[esp+0x14]
c000885d:	50                   	push   eax
c000885e:	53                   	push   ebx
c000885f:	e8 a4 fd ff ff       	call   c0008608 <src_process>
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000886e:	85 c0                	test   eax,eax
c0008870:	75 42                	jne    c00088b4 <src_callback_read+0x138>
c0008872:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008876:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008879:	89 f9                	mov    ecx,edi
c000887b:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c000887f:	0f af ca             	imul   ecx,edx
c0008882:	c1 e1 02             	shl    ecx,0x2
c0008885:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008889:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000888d:	0f af d1             	imul   edx,ecx
c0008890:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008894:	c1 e2 02             	shl    edx,0x2
c0008897:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000889b:	8d 14 31             	lea    edx,[ecx+esi*1]
c000889e:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00088a3:	75 04                	jne    c00088a9 <src_callback_read+0x12d>
c00088a5:	85 c9                	test   ecx,ecx
c00088a7:	74 0b                	je     c00088b4 <src_callback_read+0x138>
c00088a9:	39 d5                	cmp    ebp,edx
c00088ab:	7e 09                	jle    c00088b6 <src_callback_read+0x13a>
c00088ad:	89 d6                	mov    esi,edx
c00088af:	e9 65 ff ff ff       	jmp    c0008819 <src_callback_read+0x9d>
c00088b4:	89 f2                	mov    edx,esi
c00088b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00088ba:	85 c0                	test   eax,eax
c00088bc:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00088bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088c3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00088c6:	74 05                	je     c00088cd <src_callback_read+0x151>
c00088c8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088cb:	31 d2                	xor    edx,edx
c00088cd:	83 c4 3c             	add    esp,0x3c
c00088d0:	89 d0                	mov    eax,edx
c00088d2:	5b                   	pop    ebx
c00088d3:	5e                   	pop    esi
c00088d4:	5f                   	pop    edi
c00088d5:	5d                   	pop    ebp
c00088d6:	c3                   	ret    

c00088d7 <src_set_ratio>:
c00088d7:	57                   	push   edi
c00088d8:	b8 02 00 00 00       	mov    eax,0x2
c00088dd:	56                   	push   esi
c00088de:	53                   	push   ebx
c00088df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088eb:	85 db                	test   ebx,ebx
c00088ed:	74 2d                	je     c000891c <src_set_ratio+0x45>
c00088ef:	b8 07 00 00 00       	mov    eax,0x7
c00088f4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088f8:	74 22                	je     c000891c <src_set_ratio+0x45>
c00088fa:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088fe:	74 1c                	je     c000891c <src_set_ratio+0x45>
c0008900:	50                   	push   eax
c0008901:	50                   	push   eax
c0008902:	57                   	push   edi
c0008903:	56                   	push   esi
c0008904:	e8 1c fc ff ff       	call   c0008525 <is_bad_src_ratio>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	85 c0                	test   eax,eax
c000890e:	75 07                	jne    c0008917 <src_set_ratio+0x40>
c0008910:	89 33                	mov    DWORD PTR [ebx],esi
c0008912:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008915:	eb 05                	jmp    c000891c <src_set_ratio+0x45>
c0008917:	b8 06 00 00 00       	mov    eax,0x6
c000891c:	5b                   	pop    ebx
c000891d:	5e                   	pop    esi
c000891e:	5f                   	pop    edi
c000891f:	c3                   	ret    

c0008920 <src_get_channels>:
c0008920:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008924:	b8 02 00 00 00       	mov    eax,0x2
c0008929:	85 d2                	test   edx,edx
c000892b:	74 14                	je     c0008941 <src_get_channels+0x21>
c000892d:	b8 07 00 00 00       	mov    eax,0x7
c0008932:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008936:	74 09                	je     c0008941 <src_get_channels+0x21>
c0008938:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000893c:	74 03                	je     c0008941 <src_get_channels+0x21>
c000893e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008941:	c3                   	ret    

c0008942 <src_reset>:
c0008942:	53                   	push   ebx
c0008943:	b8 02 00 00 00       	mov    eax,0x2
c0008948:	83 ec 08             	sub    esp,0x8
c000894b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000894f:	85 db                	test   ebx,ebx
c0008951:	74 36                	je     c0008989 <src_reset+0x47>
c0008953:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008956:	85 c0                	test   eax,eax
c0008958:	74 09                	je     c0008963 <src_reset+0x21>
c000895a:	83 ec 0c             	sub    esp,0xc
c000895d:	53                   	push   ebx
c000895e:	ff d0                	call   eax
c0008960:	83 c4 10             	add    esp,0x10
c0008963:	31 c0                	xor    eax,eax
c0008965:	31 d2                	xor    edx,edx
c0008967:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000896a:	89 03                	mov    DWORD PTR [ebx],eax
c000896c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000896f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008972:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008979:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008987:	31 c0                	xor    eax,eax
c0008989:	83 c4 08             	add    esp,0x8
c000898c:	5b                   	pop    ebx
c000898d:	c3                   	ret    

c000898e <src_new>:
c000898e:	57                   	push   edi
c000898f:	56                   	push   esi
c0008990:	53                   	push   ebx
c0008991:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008995:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008999:	85 f6                	test   esi,esi
c000899b:	74 73                	je     c0008a10 <src_new+0x82>
c000899d:	85 ff                	test   edi,edi
c000899f:	7f 08                	jg     c00089a9 <src_new+0x1b>
c00089a1:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a7:	eb 1e                	jmp    c00089c7 <src_new+0x39>
c00089a9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089af:	50                   	push   eax
c00089b0:	50                   	push   eax
c00089b1:	6a 3c                	push   0x3c
c00089b3:	6a 01                	push   0x1
c00089b5:	e8 dc 67 00 00       	call   c000f196 <calloc>
c00089ba:	83 c4 10             	add    esp,0x10
c00089bd:	89 c3                	mov    ebx,eax
c00089bf:	85 c0                	test   eax,eax
c00089c1:	75 10                	jne    c00089d3 <src_new+0x45>
c00089c3:	85 f6                	test   esi,esi
c00089c5:	75 04                	jne    c00089cb <src_new+0x3d>
c00089c7:	31 db                	xor    ebx,ebx
c00089c9:	eb 4b                	jmp    c0008a16 <src_new+0x88>
c00089cb:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089d1:	eb 43                	jmp    c0008a16 <src_new+0x88>
c00089d3:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d6:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089e1:	e8 a2 fb ff ff       	call   c0008588 <psrc_set_converter>
c00089e6:	85 c0                	test   eax,eax
c00089e8:	74 18                	je     c0008a02 <src_new+0x74>
c00089ea:	85 f6                	test   esi,esi
c00089ec:	74 06                	je     c00089f4 <src_new+0x66>
c00089ee:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089f4:	83 ec 0c             	sub    esp,0xc
c00089f7:	53                   	push   ebx
c00089f8:	31 db                	xor    ebx,ebx
c00089fa:	e8 77 67 00 00       	call   c000f176 <free>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	83 ec 0c             	sub    esp,0xc
c0008a05:	53                   	push   ebx
c0008a06:	e8 37 ff ff ff       	call   c0008942 <src_reset>
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	eb 06                	jmp    c0008a16 <src_new+0x88>
c0008a10:	85 ff                	test   edi,edi
c0008a12:	7f 9b                	jg     c00089af <src_new+0x21>
c0008a14:	eb b1                	jmp    c00089c7 <src_new+0x39>
c0008a16:	89 d8                	mov    eax,ebx
c0008a18:	5b                   	pop    ebx
c0008a19:	5e                   	pop    esi
c0008a1a:	5f                   	pop    edi
c0008a1b:	c3                   	ret    

c0008a1c <src_callback_new>:
c0008a1c:	56                   	push   esi
c0008a1d:	53                   	push   ebx
c0008a1e:	53                   	push   ebx
c0008a1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a27:	85 f6                	test   esi,esi
c0008a29:	75 0e                	jne    c0008a39 <src_callback_new+0x1d>
c0008a2b:	31 db                	xor    ebx,ebx
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	74 47                	je     c0008a78 <src_callback_new+0x5c>
c0008a31:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a37:	eb 3f                	jmp    c0008a78 <src_callback_new+0x5c>
c0008a39:	85 c0                	test   eax,eax
c0008a3b:	74 06                	je     c0008a43 <src_callback_new+0x27>
c0008a3d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a43:	51                   	push   ecx
c0008a44:	50                   	push   eax
c0008a45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a4d:	e8 3c ff ff ff       	call   c000898e <src_new>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	89 c3                	mov    ebx,eax
c0008a57:	85 c0                	test   eax,eax
c0008a59:	74 1d                	je     c0008a78 <src_callback_new+0x5c>
c0008a5b:	83 ec 0c             	sub    esp,0xc
c0008a5e:	50                   	push   eax
c0008a5f:	e8 de fe ff ff       	call   c0008942 <src_reset>
c0008a64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a68:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a6f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a72:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	89 d8                	mov    eax,ebx
c0008a7a:	5a                   	pop    edx
c0008a7b:	5b                   	pop    ebx
c0008a7c:	5e                   	pop    esi
c0008a7d:	c3                   	ret    

c0008a7e <src_get_name>:
c0008a7e:	53                   	push   ebx
c0008a7f:	83 ec 14             	sub    esp,0x14
c0008a82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a86:	53                   	push   ebx
c0008a87:	e8 3e 4c 00 00       	call   c000d6ca <sinc_get_name>
c0008a8c:	83 c4 10             	add    esp,0x10
c0008a8f:	85 c0                	test   eax,eax
c0008a91:	75 1d                	jne    c0008ab0 <src_get_name+0x32>
c0008a93:	83 ec 0c             	sub    esp,0xc
c0008a96:	53                   	push   ebx
c0008a97:	e8 18 54 00 00       	call   c000deb4 <zoh_get_name>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	85 c0                	test   eax,eax
c0008aa1:	75 0d                	jne    c0008ab0 <src_get_name+0x32>
c0008aa3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa7:	83 c4 08             	add    esp,0x8
c0008aaa:	5b                   	pop    ebx
c0008aab:	e9 61 0b 00 00       	jmp    c0009611 <linear_get_name>
c0008ab0:	83 c4 08             	add    esp,0x8
c0008ab3:	5b                   	pop    ebx
c0008ab4:	c3                   	ret    

c0008ab5 <src_get_description>:
c0008ab5:	53                   	push   ebx
c0008ab6:	83 ec 14             	sub    esp,0x14
c0008ab9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008abd:	53                   	push   ebx
c0008abe:	e8 1a 4c 00 00       	call   c000d6dd <sinc_get_description>
c0008ac3:	83 c4 10             	add    esp,0x10
c0008ac6:	85 c0                	test   eax,eax
c0008ac8:	75 1d                	jne    c0008ae7 <src_get_description+0x32>
c0008aca:	83 ec 0c             	sub    esp,0xc
c0008acd:	53                   	push   ebx
c0008ace:	e8 f0 53 00 00       	call   c000dec3 <zoh_get_description>
c0008ad3:	83 c4 10             	add    esp,0x10
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	75 0d                	jne    c0008ae7 <src_get_description+0x32>
c0008ada:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ade:	83 c4 08             	add    esp,0x8
c0008ae1:	5b                   	pop    ebx
c0008ae2:	e9 39 0b 00 00       	jmp    c0009620 <linear_get_description>
c0008ae7:	83 c4 08             	add    esp,0x8
c0008aea:	5b                   	pop    ebx
c0008aeb:	c3                   	ret    

c0008aec <src_get_version>:
c0008aec:	b8 80 62 02 c0       	mov    eax,0xc0026280
c0008af1:	c3                   	ret    

c0008af2 <src_is_valid_ratio>:
c0008af2:	83 ec 14             	sub    esp,0x14
c0008af5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008af9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008afd:	e8 23 fa ff ff       	call   c0008525 <is_bad_src_ratio>
c0008b02:	85 c0                	test   eax,eax
c0008b04:	0f 94 c0             	sete   al
c0008b07:	83 c4 1c             	add    esp,0x1c
c0008b0a:	0f b6 c0             	movzx  eax,al
c0008b0d:	c3                   	ret    

c0008b0e <src_error>:
c0008b0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b12:	31 c0                	xor    eax,eax
c0008b14:	85 d2                	test   edx,edx
c0008b16:	74 03                	je     c0008b1b <src_error+0xd>
c0008b18:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b1b:	c3                   	ret    

c0008b1c <src_strerror>:
c0008b1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b20:	31 c0                	xor    eax,eax
c0008b22:	83 fa 17             	cmp    edx,0x17
c0008b25:	77 07                	ja     c0008b2e <src_strerror+0x12>
c0008b27:	8b 04 95 e0 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9920]
c0008b2e:	c3                   	ret    

c0008b2f <src_simple>:
c0008b2f:	56                   	push   esi
c0008b30:	53                   	push   ebx
c0008b31:	83 ec 18             	sub    esp,0x18
c0008b34:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b38:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b3c:	50                   	push   eax
c0008b3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b45:	e8 44 fe ff ff       	call   c000898e <src_new>
c0008b4a:	83 c4 10             	add    esp,0x10
c0008b4d:	85 c0                	test   eax,eax
c0008b4f:	75 06                	jne    c0008b57 <src_simple+0x28>
c0008b51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b55:	eb 25                	jmp    c0008b7c <src_simple+0x4d>
c0008b57:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b5e:	89 c3                	mov    ebx,eax
c0008b60:	50                   	push   eax
c0008b61:	50                   	push   eax
c0008b62:	56                   	push   esi
c0008b63:	53                   	push   ebx
c0008b64:	e8 9f fa ff ff       	call   c0008608 <src_process>
c0008b69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b70:	e8 57 fa ff ff       	call   c00085cc <src_delete>
c0008b75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	83 c4 14             	add    esp,0x14
c0008b7f:	5b                   	pop    ebx
c0008b80:	5e                   	pop    esi
c0008b81:	c3                   	ret    

c0008b82 <src_short_to_float_array>:
c0008b82:	53                   	push   ebx
c0008b83:	83 ec 18             	sub    esp,0x18
c0008b86:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b8a:	85 db                	test   ebx,ebx
c0008b8c:	74 54                	je     c0008be2 <src_short_to_float_array+0x60>
c0008b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b92:	4b                   	dec    ebx
c0008b93:	83 ec 0c             	sub    esp,0xc
c0008b96:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b9a:	50                   	push   eax
c0008b9b:	e8 43 c0 01 00       	call   c0024be3 <__floatsidf>
c0008ba0:	83 c4 10             	add    esp,0x10
c0008ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bab:	68 00 00 00 3f       	push   0x3f000000
c0008bb0:	6a 00                	push   0x0
c0008bb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bba:	e8 c1 b9 01 00       	call   c0024580 <__muldf3>
c0008bbf:	59                   	pop    ecx
c0008bc0:	59                   	pop    ecx
c0008bc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bc5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bcd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bd1:	e8 7d c2 01 00       	call   c0024e53 <__truncdfsf2>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bdd:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008be0:	eb a8                	jmp    c0008b8a <src_short_to_float_array+0x8>
c0008be2:	83 c4 18             	add    esp,0x18
c0008be5:	5b                   	pop    ebx
c0008be6:	c3                   	ret    

c0008be7 <src_float_to_short_array>:
c0008be7:	56                   	push   esi
c0008be8:	53                   	push   ebx
c0008be9:	83 ec 14             	sub    esp,0x14
c0008bec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bf0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bf4:	85 db                	test   ebx,ebx
c0008bf6:	0f 84 a4 00 00 00    	je     c0008ca0 <src_float_to_short_array+0xb9>
c0008bfc:	83 ec 0c             	sub    esp,0xc
c0008bff:	4b                   	dec    ebx
c0008c00:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c04:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c07:	e8 6b c3 01 00       	call   c0024f77 <__extendsfdf2>
c0008c0c:	83 c4 10             	add    esp,0x10
c0008c0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c17:	68 00 00 e0 41       	push   0x41e00000
c0008c1c:	6a 00                	push   0x0
c0008c1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c26:	e8 55 b9 01 00       	call   c0024580 <__muldf3>
c0008c2b:	83 c4 10             	add    esp,0x10
c0008c2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c36:	68 ff ff df 41       	push   0x41dfffff
c0008c3b:	68 00 00 c0 ff       	push   0xffc00000
c0008c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c48:	e8 00 c2 01 00       	call   c0024e4d <__gedf2>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	85 c0                	test   eax,eax
c0008c52:	78 08                	js     c0008c5c <src_float_to_short_array+0x75>
c0008c54:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c5a:	eb 98                	jmp    c0008bf4 <src_float_to_short_array+0xd>
c0008c5c:	68 00 00 e0 c1       	push   0xc1e00000
c0008c61:	6a 00                	push   0x0
c0008c63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6b:	e8 e1 c1 01 00       	call   c0024e51 <__ledf2>
c0008c70:	83 c4 10             	add    esp,0x10
c0008c73:	85 c0                	test   eax,eax
c0008c75:	7f 0b                	jg     c0008c82 <src_float_to_short_array+0x9b>
c0008c77:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c7d:	e9 72 ff ff ff       	jmp    c0008bf4 <src_float_to_short_array+0xd>
c0008c82:	50                   	push   eax
c0008c83:	50                   	push   eax
c0008c84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c8c:	e8 6f c3 01 00       	call   c0025000 <lrint>
c0008c91:	83 c4 10             	add    esp,0x10
c0008c94:	c1 f8 10             	sar    eax,0x10
c0008c97:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c9b:	e9 54 ff ff ff       	jmp    c0008bf4 <src_float_to_short_array+0xd>
c0008ca0:	83 c4 14             	add    esp,0x14
c0008ca3:	5b                   	pop    ebx
c0008ca4:	5e                   	pop    esi
c0008ca5:	c3                   	ret    

c0008ca6 <src_int_to_float_array>:
c0008ca6:	53                   	push   ebx
c0008ca7:	83 ec 18             	sub    esp,0x18
c0008caa:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cae:	85 db                	test   ebx,ebx
c0008cb0:	74 52                	je     c0008d04 <src_int_to_float_array+0x5e>
c0008cb2:	83 ec 0c             	sub    esp,0xc
c0008cb5:	4b                   	dec    ebx
c0008cb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cba:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cbd:	e8 21 bf 01 00       	call   c0024be3 <__floatsidf>
c0008cc2:	83 c4 10             	add    esp,0x10
c0008cc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ccd:	68 00 00 00 3e       	push   0x3e000000
c0008cd2:	6a 00                	push   0x0
c0008cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cdc:	e8 9f b8 01 00       	call   c0024580 <__muldf3>
c0008ce1:	59                   	pop    ecx
c0008ce2:	59                   	pop    ecx
c0008ce3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cf3:	e8 5b c1 01 00       	call   c0024e53 <__truncdfsf2>
c0008cf8:	83 c4 10             	add    esp,0x10
c0008cfb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cff:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d02:	eb aa                	jmp    c0008cae <src_int_to_float_array+0x8>
c0008d04:	83 c4 18             	add    esp,0x18
c0008d07:	5b                   	pop    ebx
c0008d08:	c3                   	ret    

c0008d09 <src_float_to_int_array>:
c0008d09:	56                   	push   esi
c0008d0a:	53                   	push   ebx
c0008d0b:	83 ec 14             	sub    esp,0x14
c0008d0e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d12:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d16:	85 db                	test   ebx,ebx
c0008d18:	0f 84 a2 00 00 00    	je     c0008dc0 <src_float_to_int_array+0xb7>
c0008d1e:	83 ec 0c             	sub    esp,0xc
c0008d21:	4b                   	dec    ebx
c0008d22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d26:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d29:	e8 49 c2 01 00       	call   c0024f77 <__extendsfdf2>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d39:	68 00 00 e0 41       	push   0x41e00000
c0008d3e:	6a 00                	push   0x0
c0008d40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d48:	e8 33 b8 01 00       	call   c0024580 <__muldf3>
c0008d4d:	83 c4 10             	add    esp,0x10
c0008d50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d58:	68 ff ff df 41       	push   0x41dfffff
c0008d5d:	68 00 00 c0 ff       	push   0xffc00000
c0008d62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6a:	e8 de c0 01 00       	call   c0024e4d <__gedf2>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	85 c0                	test   eax,eax
c0008d74:	78 09                	js     c0008d7f <src_float_to_int_array+0x76>
c0008d76:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d7d:	eb 97                	jmp    c0008d16 <src_float_to_int_array+0xd>
c0008d7f:	68 00 00 e0 c1       	push   0xc1e00000
c0008d84:	6a 00                	push   0x0
c0008d86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8e:	e8 be c0 01 00       	call   c0024e51 <__ledf2>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	7f 0c                	jg     c0008da6 <src_float_to_int_array+0x9d>
c0008d9a:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008da1:	e9 70 ff ff ff       	jmp    c0008d16 <src_float_to_int_array+0xd>
c0008da6:	50                   	push   eax
c0008da7:	50                   	push   eax
c0008da8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008db0:	e8 4b c2 01 00       	call   c0025000 <lrint>
c0008db5:	83 c4 10             	add    esp,0x10
c0008db8:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008dbb:	e9 56 ff ff ff       	jmp    c0008d16 <src_float_to_int_array+0xd>
c0008dc0:	83 c4 14             	add    esp,0x14
c0008dc3:	5b                   	pop    ebx
c0008dc4:	5e                   	pop    esi
c0008dc5:	c3                   	ret    

c0008dc6 <is_bad_src_ratio>:
c0008dc6:	83 ec 1c             	sub    esp,0x1c
c0008dc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008dd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008dd9:	b8 00 00 00 00       	mov    eax,0x0
c0008dde:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008de3:	52                   	push   edx
c0008de4:	50                   	push   eax
c0008de5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ded:	e8 5d c0 01 00       	call   c0024e4f <__ltdf2>
c0008df2:	83 c4 10             	add    esp,0x10
c0008df5:	85 c0                	test   eax,eax
c0008df7:	78 20                	js     c0008e19 <is_bad_src_ratio+0x53>
c0008df9:	b8 00 00 00 00       	mov    eax,0x0
c0008dfe:	ba 00 00 70 40       	mov    edx,0x40700000
c0008e03:	52                   	push   edx
c0008e04:	50                   	push   eax
c0008e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e0d:	e8 1f c0 01 00       	call   c0024e31 <__gtdf2>
c0008e12:	83 c4 10             	add    esp,0x10
c0008e15:	85 c0                	test   eax,eax
c0008e17:	7e 07                	jle    c0008e20 <is_bad_src_ratio+0x5a>
c0008e19:	b8 01 00 00 00       	mov    eax,0x1
c0008e1e:	eb 05                	jmp    c0008e25 <is_bad_src_ratio+0x5f>
c0008e20:	b8 00 00 00 00       	mov    eax,0x0
c0008e25:	83 c4 1c             	add    esp,0x1c
c0008e28:	c3                   	ret    

c0008e29 <fmod_one>:
c0008e29:	83 ec 2c             	sub    esp,0x2c
c0008e2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e3c:	83 ec 08             	sub    esp,0x8
c0008e3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e47:	e8 b4 c1 01 00       	call   c0025000 <lrint>
c0008e4c:	83 c4 10             	add    esp,0x10
c0008e4f:	83 ec 0c             	sub    esp,0xc
c0008e52:	50                   	push   eax
c0008e53:	e8 8b bd 01 00       	call   c0024be3 <__floatsidf>
c0008e58:	83 c4 10             	add    esp,0x10
c0008e5b:	52                   	push   edx
c0008e5c:	50                   	push   eax
c0008e5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e65:	e8 ea b6 01 00       	call   c0024554 <__subdf3>
c0008e6a:	83 c4 10             	add    esp,0x10
c0008e6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e75:	b8 00 00 00 00       	mov    eax,0x0
c0008e7a:	ba 00 00 00 00       	mov    edx,0x0
c0008e7f:	52                   	push   edx
c0008e80:	50                   	push   eax
c0008e81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e89:	e8 c1 bf 01 00       	call   c0024e4f <__ltdf2>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	85 c0                	test   eax,eax
c0008e93:	79 1e                	jns    c0008eb3 <fmod_one+0x8a>
c0008e95:	b8 00 00 00 00       	mov    eax,0x0
c0008e9a:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e9f:	52                   	push   edx
c0008ea0:	50                   	push   eax
c0008ea1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ea5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ea9:	e8 55 b0 01 00       	call   c0023f03 <__adddf3>
c0008eae:	83 c4 10             	add    esp,0x10
c0008eb1:	eb 08                	jmp    c0008ebb <fmod_one+0x92>
c0008eb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008eb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008ebb:	83 c4 2c             	add    esp,0x2c
c0008ebe:	c3                   	ret    

c0008ebf <linear_vari_process>:
c0008ebf:	55                   	push   ebp
c0008ec0:	57                   	push   edi
c0008ec1:	56                   	push   esi
c0008ec2:	53                   	push   ebx
c0008ec3:	83 ec 3c             	sub    esp,0x3c
c0008ec6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008eca:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008ed2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ed6:	0f 8e f7 06 00 00    	jle    c00095d3 <linear_vari_process+0x714>
c0008edc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ee0:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ee8:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008eeb:	85 db                	test   ebx,ebx
c0008eed:	0f 84 e0 06 00 00    	je     c00095d3 <linear_vari_process+0x714>
c0008ef3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ef6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008efa:	74 19                	je     c0008f15 <linear_vari_process+0x56>
c0008efc:	31 d2                	xor    edx,edx
c0008efe:	39 c2                	cmp    edx,eax
c0008f00:	7d 0c                	jge    c0008f0e <linear_vari_process+0x4f>
c0008f02:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f04:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008f07:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008f0b:	42                   	inc    edx
c0008f0c:	eb f0                	jmp    c0008efe <linear_vari_process+0x3f>
c0008f0e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f15:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f18:	0f af d0             	imul   edx,eax
c0008f1b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f1e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f22:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f29:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f2c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f33:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f37:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f3c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f44:	57                   	push   edi
c0008f45:	57                   	push   edi
c0008f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f4e:	e8 73 fe ff ff       	call   c0008dc6 <is_bad_src_ratio>
c0008f53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f57:	83 c4 10             	add    esp,0x10
c0008f5a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f5f:	0f 85 66 06 00 00    	jne    c00095cb <linear_vari_process+0x70c>
c0008f65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f69:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f77:	68 00 00 f0 3f       	push   0x3ff00000
c0008f7c:	6a 00                	push   0x0
c0008f7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f86:	e8 c4 be 01 00       	call   c0024e4f <__ltdf2>
c0008f8b:	83 c4 10             	add    esp,0x10
c0008f8e:	85 c0                	test   eax,eax
c0008f90:	0f 89 89 02 00 00    	jns    c000921f <linear_vari_process+0x360>
c0008f96:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f99:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f9c:	0f 8d 7d 02 00 00    	jge    c000921f <linear_vari_process+0x360>
c0008fa2:	83 ec 0c             	sub    esp,0xc
c0008fa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008fa8:	e8 36 bc 01 00       	call   c0024be3 <__floatsidf>
c0008fad:	83 c4 10             	add    esp,0x10
c0008fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fb3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fb7:	68 00 00 f0 3f       	push   0x3ff00000
c0008fbc:	6a 00                	push   0x0
c0008fbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc6:	e8 38 af 01 00       	call   c0023f03 <__adddf3>
c0008fcb:	83 c4 10             	add    esp,0x10
c0008fce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fd2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fd6:	52                   	push   edx
c0008fd7:	50                   	push   eax
c0008fd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe0:	e8 9b b5 01 00       	call   c0024580 <__muldf3>
c0008fe5:	5d                   	pop    ebp
c0008fe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fee:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008ff1:	e8 ed bb 01 00       	call   c0024be3 <__floatsidf>
c0008ff6:	83 c4 10             	add    esp,0x10
c0008ff9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ffd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009001:	52                   	push   edx
c0009002:	50                   	push   eax
c0009003:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009007:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000900b:	e8 f3 ae 01 00       	call   c0023f03 <__adddf3>
c0009010:	59                   	pop    ecx
c0009011:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009015:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009019:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000901c:	e8 c2 bb 01 00       	call   c0024be3 <__floatsidf>
c0009021:	83 c4 10             	add    esp,0x10
c0009024:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009028:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000902c:	52                   	push   edx
c000902d:	50                   	push   eax
c000902e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009036:	e8 12 be 01 00       	call   c0024e4d <__gedf2>
c000903b:	83 c4 10             	add    esp,0x10
c000903e:	85 c0                	test   eax,eax
c0009040:	0f 89 d9 01 00 00    	jns    c000921f <linear_vari_process+0x360>
c0009046:	85 ff                	test   edi,edi
c0009048:	0f 8e f4 00 00 00    	jle    c0009142 <linear_vari_process+0x283>
c000904e:	83 ec 10             	sub    esp,0x10
c0009051:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009054:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009057:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000905b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000905e:	ff 30                	push   DWORD PTR [eax]
c0009060:	e8 ef b4 01 00       	call   c0024554 <__subdf3>
c0009065:	83 c4 18             	add    esp,0x18
c0009068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000906c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009070:	52                   	push   edx
c0009071:	50                   	push   eax
c0009072:	e8 69 bf 01 00       	call   c0024fe0 <fabs>
c0009077:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000907b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009087:	68 23 42 92 0c       	push   0xc924223
c000908c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009090:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009094:	e8 98 bd 01 00       	call   c0024e31 <__gtdf2>
c0009099:	83 c4 10             	add    esp,0x10
c000909c:	85 c0                	test   eax,eax
c000909e:	0f 8e 9e 00 00 00    	jle    c0009142 <linear_vari_process+0x283>
c00090a4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b4:	52                   	push   edx
c00090b5:	50                   	push   eax
c00090b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00090b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00090bc:	e8 93 b4 01 00       	call   c0024554 <__subdf3>
c00090c1:	59                   	pop    ecx
c00090c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090c6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090ca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090cd:	e8 11 bb 01 00       	call   c0024be3 <__floatsidf>
c00090d2:	83 c4 10             	add    esp,0x10
c00090d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090dd:	52                   	push   edx
c00090de:	50                   	push   eax
c00090df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	e8 94 b4 01 00       	call   c0024580 <__muldf3>
c00090ec:	5f                   	pop    edi
c00090ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090f8:	e8 e6 ba 01 00       	call   c0024be3 <__floatsidf>
c00090fd:	83 c4 10             	add    esp,0x10
c0009100:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009104:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009108:	52                   	push   edx
c0009109:	50                   	push   eax
c000910a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 4d b7 01 00       	call   c0024864 <__divdf3>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000911e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009122:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009126:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009132:	e8 cc ad 01 00       	call   c0023f03 <__adddf3>
c0009137:	83 c4 10             	add    esp,0x10
c000913a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000913e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009142:	31 ff                	xor    edi,edi
c0009144:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009147:	0f 8e 9d 00 00 00    	jle    c00091ea <linear_vari_process+0x32b>
c000914d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009150:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009154:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009157:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000915b:	89 04 24             	mov    DWORD PTR [esp],eax
c000915e:	8b 06                	mov    eax,DWORD PTR [esi]
c0009160:	52                   	push   edx
c0009161:	52                   	push   edx
c0009162:	55                   	push   ebp
c0009163:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009166:	47                   	inc    edi
c0009167:	e8 2c a7 01 00       	call   c0023898 <__subsf3>
c000916c:	89 04 24             	mov    DWORD PTR [esp],eax
c000916f:	e8 03 be 01 00       	call   c0024f77 <__extendsfdf2>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000917b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009183:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009187:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918f:	e8 ec b3 01 00       	call   c0024580 <__muldf3>
c0009194:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000919b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000919f:	e8 d3 bd 01 00       	call   c0024f77 <__extendsfdf2>
c00091a4:	83 c4 10             	add    esp,0x10
c00091a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ab:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091af:	52                   	push   edx
c00091b0:	50                   	push   eax
c00091b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b9:	e8 45 ad 01 00       	call   c0023f03 <__adddf3>
c00091be:	59                   	pop    ecx
c00091bf:	5d                   	pop    ebp
c00091c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091c4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091d0:	e8 7e bc 01 00       	call   c0024e53 <__truncdfsf2>
c00091d5:	83 c4 10             	add    esp,0x10
c00091d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091db:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091df:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091e2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091e5:	e9 5a ff ff ff       	jmp    c0009144 <linear_vari_process+0x285>
c00091ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f2:	68 00 00 f0 3f       	push   0x3ff00000
c00091f7:	6a 00                	push   0x0
c00091f9:	e8 66 b6 01 00       	call   c0024864 <__divdf3>
c00091fe:	83 c4 10             	add    esp,0x10
c0009201:	89 04 24             	mov    DWORD PTR [esp],eax
c0009204:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009208:	52                   	push   edx
c0009209:	50                   	push   eax
c000920a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009212:	e8 ec ac 01 00       	call   c0023f03 <__adddf3>
c0009217:	83 c4 10             	add    esp,0x10
c000921a:	e9 50 fd ff ff       	jmp    c0008f6f <linear_vari_process+0xb0>
c000921f:	50                   	push   eax
c0009220:	50                   	push   eax
c0009221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009229:	e8 fb fb ff ff       	call   c0008e29 <fmod_one>
c000922e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009235:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009241:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009245:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009249:	e8 06 b3 01 00       	call   c0024554 <__subdf3>
c000924e:	83 c4 18             	add    esp,0x18
c0009251:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009255:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009259:	52                   	push   edx
c000925a:	50                   	push   eax
c000925b:	e8 a0 bd 01 00       	call   c0025000 <lrint>
c0009260:	83 c4 10             	add    esp,0x10
c0009263:	0f af f8             	imul   edi,eax
c0009266:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009269:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000926c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000926f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009272:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009275:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009279:	0f 8d b4 02 00 00    	jge    c0009533 <linear_vari_process+0x674>
c000927f:	83 ec 0c             	sub    esp,0xc
c0009282:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009285:	e8 59 b9 01 00       	call   c0024be3 <__floatsidf>
c000928a:	83 c4 10             	add    esp,0x10
c000928d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009291:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009295:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009299:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000929d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092a5:	e8 d6 b2 01 00       	call   c0024580 <__muldf3>
c00092aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00092ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b5:	e8 29 b9 01 00       	call   c0024be3 <__floatsidf>
c00092ba:	83 c4 10             	add    esp,0x10
c00092bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c5:	52                   	push   edx
c00092c6:	50                   	push   eax
c00092c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092cf:	e8 2f ac 01 00       	call   c0023f03 <__adddf3>
c00092d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092df:	e8 ff b8 01 00       	call   c0024be3 <__floatsidf>
c00092e4:	83 c4 10             	add    esp,0x10
c00092e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ef:	52                   	push   edx
c00092f0:	50                   	push   eax
c00092f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092f9:	e8 51 bb 01 00       	call   c0024e4f <__ltdf2>
c00092fe:	83 c4 10             	add    esp,0x10
c0009301:	85 c0                	test   eax,eax
c0009303:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009307:	0f 89 26 02 00 00    	jns    c0009533 <linear_vari_process+0x674>
c000930d:	85 c9                	test   ecx,ecx
c000930f:	0f 8e f5 00 00 00    	jle    c000940a <linear_vari_process+0x54b>
c0009315:	83 ec 10             	sub    esp,0x10
c0009318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000931b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000931e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009322:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009325:	ff 30                	push   DWORD PTR [eax]
c0009327:	e8 28 b2 01 00       	call   c0024554 <__subdf3>
c000932c:	83 c4 18             	add    esp,0x18
c000932f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009333:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009337:	52                   	push   edx
c0009338:	50                   	push   eax
c0009339:	e8 a2 bc 01 00       	call   c0024fe0 <fabs>
c000933e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009342:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009346:	83 c4 10             	add    esp,0x10
c0009349:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000934e:	68 23 42 92 0c       	push   0xc924223
c0009353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009357:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935b:	e8 d1 ba 01 00       	call   c0024e31 <__gtdf2>
c0009360:	83 c4 10             	add    esp,0x10
c0009363:	85 c0                	test   eax,eax
c0009365:	0f 8e 9f 00 00 00    	jle    c000940a <linear_vari_process+0x54b>
c000936b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000936f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009372:	8b 00                	mov    eax,DWORD PTR [eax]
c0009374:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000937c:	52                   	push   edx
c000937d:	50                   	push   eax
c000937e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009381:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009384:	e8 cb b1 01 00       	call   c0024554 <__subdf3>
c0009389:	5f                   	pop    edi
c000938a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000938e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009392:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009395:	e8 49 b8 01 00       	call   c0024be3 <__floatsidf>
c000939a:	83 c4 10             	add    esp,0x10
c000939d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093a5:	52                   	push   edx
c00093a6:	50                   	push   eax
c00093a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093af:	e8 cc b1 01 00       	call   c0024580 <__muldf3>
c00093b4:	5d                   	pop    ebp
c00093b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093b9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00093bd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00093c0:	e8 1e b8 01 00       	call   c0024be3 <__floatsidf>
c00093c5:	83 c4 10             	add    esp,0x10
c00093c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d0:	52                   	push   edx
c00093d1:	50                   	push   eax
c00093d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093da:	e8 85 b4 01 00       	call   c0024864 <__divdf3>
c00093df:	83 c4 10             	add    esp,0x10
c00093e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fa:	e8 04 ab 01 00       	call   c0023f03 <__adddf3>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009406:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000940a:	31 ff                	xor    edi,edi
c000940c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000940f:	39 f8                	cmp    eax,edi
c0009411:	0f 8e ac 00 00 00    	jle    c00094c3 <linear_vari_process+0x604>
c0009417:	8b 16                	mov    edx,DWORD PTR [esi]
c0009419:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000941c:	29 c1                	sub    ecx,eax
c000941e:	89 c8                	mov    eax,ecx
c0009420:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009423:	01 f8                	add    eax,edi
c0009425:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009429:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000942c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000942f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009433:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009436:	51                   	push   ecx
c0009437:	01 f8                	add    eax,edi
c0009439:	51                   	push   ecx
c000943a:	47                   	inc    edi
c000943b:	55                   	push   ebp
c000943c:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000943f:	e8 54 a4 01 00       	call   c0023898 <__subsf3>
c0009444:	89 04 24             	mov    DWORD PTR [esp],eax
c0009447:	e8 2b bb 01 00       	call   c0024f77 <__extendsfdf2>
c000944c:	83 c4 10             	add    esp,0x10
c000944f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009453:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009457:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000945b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000945f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009463:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009467:	e8 14 b1 01 00       	call   c0024580 <__muldf3>
c000946c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009473:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009477:	e8 fb ba 01 00       	call   c0024f77 <__extendsfdf2>
c000947c:	83 c4 10             	add    esp,0x10
c000947f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009483:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009487:	52                   	push   edx
c0009488:	50                   	push   eax
c0009489:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000948d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009491:	e8 6d aa 01 00       	call   c0023f03 <__adddf3>
c0009496:	5d                   	pop    ebp
c0009497:	59                   	pop    ecx
c0009498:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000949c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a8:	e8 a6 b9 01 00       	call   c0024e53 <__truncdfsf2>
c00094ad:	83 c4 10             	add    esp,0x10
c00094b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00094b4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00094b8:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00094bb:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00094be:	e9 49 ff ff ff       	jmp    c000940c <linear_vari_process+0x54d>
c00094c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094cb:	68 00 00 f0 3f       	push   0x3ff00000
c00094d0:	6a 00                	push   0x0
c00094d2:	e8 8d b3 01 00       	call   c0024864 <__divdf3>
c00094d7:	83 c4 10             	add    esp,0x10
c00094da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094e2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094e6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f2:	e8 0c aa 01 00       	call   c0023f03 <__adddf3>
c00094f7:	59                   	pop    ecx
c00094f8:	5f                   	pop    edi
c00094f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094fd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009509:	e8 1b f9 ff ff       	call   c0008e29 <fmod_one>
c000950e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009511:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009515:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000951d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009521:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009525:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009529:	e8 26 b0 01 00       	call   c0024554 <__subdf3>
c000952e:	e9 1b fd ff ff       	jmp    c000924e <linear_vari_process+0x38f>
c0009533:	39 fd                	cmp    ebp,edi
c0009535:	7d 38                	jge    c000956f <linear_vari_process+0x6b0>
c0009537:	83 ec 0c             	sub    esp,0xc
c000953a:	89 f8                	mov    eax,edi
c000953c:	29 e8                	sub    eax,ebp
c000953e:	99                   	cdq    
c000953f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009542:	50                   	push   eax
c0009543:	e8 9b b6 01 00       	call   c0024be3 <__floatsidf>
c0009548:	83 c4 10             	add    esp,0x10
c000954b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000954f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009553:	52                   	push   edx
c0009554:	50                   	push   eax
c0009555:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009559:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000955d:	e8 a1 a9 01 00       	call   c0023f03 <__adddf3>
c0009562:	83 c4 10             	add    esp,0x10
c0009565:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009568:	89 04 24             	mov    DWORD PTR [esp],eax
c000956b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000956f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009573:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009576:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000957a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000957d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009580:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009583:	85 c0                	test   eax,eax
c0009585:	7f 27                	jg     c00095ae <linear_vari_process+0x6ef>
c0009587:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000958b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000958f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009593:	89 01                	mov    DWORD PTR [ecx],eax
c0009595:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009598:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000959b:	99                   	cdq    
c000959c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000959f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095a5:	99                   	cdq    
c00095a6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095a9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095ac:	eb 25                	jmp    c00095d3 <linear_vari_process+0x714>
c00095ae:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095b1:	31 d2                	xor    edx,edx
c00095b3:	29 c8                	sub    eax,ecx
c00095b5:	c1 e0 02             	shl    eax,0x2
c00095b8:	39 d1                	cmp    ecx,edx
c00095ba:	7e cb                	jle    c0009587 <linear_vari_process+0x6c8>
c00095bc:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095be:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095c1:	83 c0 04             	add    eax,0x4
c00095c4:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095c8:	42                   	inc    edx
c00095c9:	eb ed                	jmp    c00095b8 <linear_vari_process+0x6f9>
c00095cb:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095d7:	83 c4 3c             	add    esp,0x3c
c00095da:	5b                   	pop    ebx
c00095db:	5e                   	pop    esi
c00095dc:	5f                   	pop    edi
c00095dd:	5d                   	pop    ebp
c00095de:	c3                   	ret    

c00095df <linear_reset>:
c00095df:	83 ec 0c             	sub    esp,0xc
c00095e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095e9:	85 c0                	test   eax,eax
c00095eb:	74 20                	je     c000960d <linear_reset+0x2e>
c00095ed:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095f0:	83 c0 1c             	add    eax,0x1c
c00095f3:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095f6:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095fd:	c1 e2 02             	shl    edx,0x2
c0009600:	51                   	push   ecx
c0009601:	52                   	push   edx
c0009602:	6a 00                	push   0x0
c0009604:	50                   	push   eax
c0009605:	e8 e2 70 ff ff       	call   c00006ec <memset>
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	83 c4 0c             	add    esp,0xc
c0009610:	c3                   	ret    

c0009611 <linear_get_name>:
c0009611:	31 c0                	xor    eax,eax
c0009613:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009618:	75 05                	jne    c000961f <linear_get_name+0xe>
c000961a:	b8 40 67 02 c0       	mov    eax,0xc0026740
c000961f:	c3                   	ret    

c0009620 <linear_get_description>:
c0009620:	31 c0                	xor    eax,eax
c0009622:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009627:	75 05                	jne    c000962e <linear_get_description+0xe>
c0009629:	b8 54 67 02 c0       	mov    eax,0xc0026754
c000962e:	c3                   	ret    

c000962f <linear_set_converter>:
c000962f:	53                   	push   ebx
c0009630:	b8 0a 00 00 00       	mov    eax,0xa
c0009635:	83 ec 08             	sub    esp,0x8
c0009638:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000963c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009641:	75 6e                	jne    c00096b1 <linear_set_converter+0x82>
c0009643:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009646:	85 c0                	test   eax,eax
c0009648:	74 13                	je     c000965d <linear_set_converter+0x2e>
c000964a:	83 ec 0c             	sub    esp,0xc
c000964d:	50                   	push   eax
c000964e:	e8 23 5b 00 00       	call   c000f176 <free>
c0009653:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000965a:	83 c4 10             	add    esp,0x10
c000965d:	50                   	push   eax
c000965e:	50                   	push   eax
c000965f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009662:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009669:	50                   	push   eax
c000966a:	6a 01                	push   0x1
c000966c:	e8 25 5b 00 00       	call   c000f196 <calloc>
c0009671:	83 c4 10             	add    esp,0x10
c0009674:	89 c2                	mov    edx,eax
c0009676:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009679:	85 d2                	test   edx,edx
c000967b:	b8 01 00 00 00       	mov    eax,0x1
c0009680:	74 2f                	je     c00096b1 <linear_set_converter+0x82>
c0009682:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009685:	83 ec 0c             	sub    esp,0xc
c0009688:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000968b:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009691:	c7 43 24 bf 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ebf
c0009698:	c7 43 20 bf 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ebf
c000969f:	c7 43 28 df 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095df
c00096a6:	53                   	push   ebx
c00096a7:	e8 33 ff ff ff       	call   c00095df <linear_reset>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	31 c0                	xor    eax,eax
c00096b1:	83 c4 08             	add    esp,0x8
c00096b4:	5b                   	pop    ebx
c00096b5:	c3                   	ret    

c00096b6 <is_bad_src_ratio>:
c00096b6:	83 ec 1c             	sub    esp,0x1c
c00096b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00096bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096c9:	b8 00 00 00 00       	mov    eax,0x0
c00096ce:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096d3:	52                   	push   edx
c00096d4:	50                   	push   eax
c00096d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096dd:	e8 6d b7 01 00       	call   c0024e4f <__ltdf2>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	85 c0                	test   eax,eax
c00096e7:	78 20                	js     c0009709 <is_bad_src_ratio+0x53>
c00096e9:	b8 00 00 00 00       	mov    eax,0x0
c00096ee:	ba 00 00 70 40       	mov    edx,0x40700000
c00096f3:	52                   	push   edx
c00096f4:	50                   	push   eax
c00096f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fd:	e8 2f b7 01 00       	call   c0024e31 <__gtdf2>
c0009702:	83 c4 10             	add    esp,0x10
c0009705:	85 c0                	test   eax,eax
c0009707:	7e 07                	jle    c0009710 <is_bad_src_ratio+0x5a>
c0009709:	b8 01 00 00 00       	mov    eax,0x1
c000970e:	eb 05                	jmp    c0009715 <is_bad_src_ratio+0x5f>
c0009710:	b8 00 00 00 00       	mov    eax,0x0
c0009715:	83 c4 1c             	add    esp,0x1c
c0009718:	c3                   	ret    

c0009719 <int_to_fp>:
c0009719:	c1 e0 0c             	shl    eax,0xc
c000971c:	c3                   	ret    

c000971d <fp_to_int>:
c000971d:	c1 f8 0c             	sar    eax,0xc
c0009720:	c3                   	ret    

c0009721 <fp_fraction_part>:
c0009721:	25 ff 0f 00 00       	and    eax,0xfff
c0009726:	c3                   	ret    

c0009727 <fp_to_double>:
c0009727:	83 ec 1c             	sub    esp,0x1c
c000972a:	e8 f2 ff ff ff       	call   c0009721 <fp_fraction_part>
c000972f:	83 ec 0c             	sub    esp,0xc
c0009732:	50                   	push   eax
c0009733:	e8 ab b4 01 00       	call   c0024be3 <__floatsidf>
c0009738:	83 c4 10             	add    esp,0x10
c000973b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000973f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009743:	68 00 00 30 3f       	push   0x3f300000
c0009748:	6a 00                	push   0x0
c000974a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009752:	e8 29 ae 01 00       	call   c0024580 <__muldf3>
c0009757:	83 c4 2c             	add    esp,0x2c
c000975a:	c3                   	ret    

c000975b <calc_output_single>:
c000975b:	55                   	push   ebp
c000975c:	57                   	push   edi
c000975d:	56                   	push   esi
c000975e:	89 c6                	mov    esi,eax
c0009760:	53                   	push   ebx
c0009761:	89 d3                	mov    ebx,edx
c0009763:	83 ec 4c             	sub    esp,0x4c
c0009766:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000976a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000976d:	e8 a7 ff ff ff       	call   c0009719 <int_to_fp>
c0009772:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009775:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009779:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000977d:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009781:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009784:	99                   	cdq    
c0009785:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000978d:	f7 fb                	idiv   ebx
c000978f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009797:	89 da                	mov    edx,ebx
c0009799:	0f af d0             	imul   edx,eax
c000979c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00097a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00097a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00097a8:	29 c2                	sub    edx,eax
c00097aa:	8d 2c 96             	lea    ebp,[esi+edx*4]
c00097ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097b1:	83 c5 04             	add    ebp,0x4
c00097b4:	e8 6e ff ff ff       	call   c0009727 <fp_to_double>
c00097b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097c5:	e8 53 ff ff ff       	call   c000971d <fp_to_int>
c00097ca:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097cd:	52                   	push   edx
c00097ce:	52                   	push   edx
c00097cf:	51                   	push   ecx
c00097d0:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097d4:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097d8:	e8 bb a0 01 00       	call   c0023898 <__subsf3>
c00097dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00097e0:	e8 92 b7 01 00       	call   c0024f77 <__extendsfdf2>
c00097e5:	83 c4 10             	add    esp,0x10
c00097e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009800:	e8 7b ad 01 00       	call   c0024580 <__muldf3>
c0009805:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009809:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000980d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009810:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009814:	e8 5e b7 01 00       	call   c0024f77 <__extendsfdf2>
c0009819:	83 c4 10             	add    esp,0x10
c000981c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009820:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009824:	52                   	push   edx
c0009825:	50                   	push   eax
c0009826:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000982a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000982e:	e8 d0 a6 01 00       	call   c0023f03 <__adddf3>
c0009833:	59                   	pop    ecx
c0009834:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009838:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000983c:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009842:	e8 30 b7 01 00       	call   c0024f77 <__extendsfdf2>
c0009847:	83 c4 10             	add    esp,0x10
c000984a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000984e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009852:	52                   	push   edx
c0009853:	50                   	push   eax
c0009854:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009858:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000985c:	e8 1f ad 01 00       	call   c0024580 <__muldf3>
c0009861:	83 c4 10             	add    esp,0x10
c0009864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009868:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000986c:	52                   	push   edx
c000986d:	50                   	push   eax
c000986e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009876:	e8 88 a6 01 00       	call   c0023f03 <__adddf3>
c000987b:	83 c4 10             	add    esp,0x10
c000987e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009882:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009886:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000988a:	0f 89 1d ff ff ff    	jns    c00097ad <calc_output_single+0x52>
c0009890:	89 d9                	mov    ecx,ebx
c0009892:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009896:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000989a:	89 dd                	mov    ebp,ebx
c000989c:	29 c8                	sub    eax,ecx
c000989e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00098a6:	99                   	cdq    
c00098a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00098af:	f7 fb                	idiv   ebx
c00098b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00098b5:	0f af e8             	imul   ebp,eax
c00098b8:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c00098bc:	01 cd                	add    ebp,ecx
c00098be:	8d 34 86             	lea    esi,[esi+eax*4]
c00098c1:	89 e8                	mov    eax,ebp
c00098c3:	83 ee 04             	sub    esi,0x4
c00098c6:	e8 5c fe ff ff       	call   c0009727 <fp_to_double>
c00098cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098d3:	89 e8                	mov    eax,ebp
c00098d5:	29 dd                	sub    ebp,ebx
c00098d7:	e8 41 fe ff ff       	call   c000971d <fp_to_int>
c00098dc:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098df:	52                   	push   edx
c00098e0:	52                   	push   edx
c00098e1:	51                   	push   ecx
c00098e2:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098e6:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098ea:	e8 a9 9f 01 00       	call   c0023898 <__subsf3>
c00098ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00098f2:	e8 80 b6 01 00       	call   c0024f77 <__extendsfdf2>
c00098f7:	83 c4 10             	add    esp,0x10
c00098fa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098fe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000990a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000990e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009912:	e8 69 ac 01 00       	call   c0024580 <__muldf3>
c0009917:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000991b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000991f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009922:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009926:	e8 4c b6 01 00       	call   c0024f77 <__extendsfdf2>
c000992b:	83 c4 10             	add    esp,0x10
c000992e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009932:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009936:	52                   	push   edx
c0009937:	50                   	push   eax
c0009938:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000993c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009940:	e8 be a5 01 00       	call   c0023f03 <__adddf3>
c0009945:	59                   	pop    ecx
c0009946:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000994a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000994e:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009954:	e8 1e b6 01 00       	call   c0024f77 <__extendsfdf2>
c0009959:	83 c4 10             	add    esp,0x10
c000995c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009960:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009964:	52                   	push   edx
c0009965:	50                   	push   eax
c0009966:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000996a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000996e:	e8 0d ac 01 00       	call   c0024580 <__muldf3>
c0009973:	83 c4 10             	add    esp,0x10
c0009976:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000997a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000997e:	52                   	push   edx
c000997f:	50                   	push   eax
c0009980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009988:	e8 76 a5 01 00       	call   c0023f03 <__adddf3>
c000998d:	83 c4 10             	add    esp,0x10
c0009990:	85 ed                	test   ebp,ebp
c0009992:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009996:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000999a:	0f 8f 21 ff ff ff    	jg     c00098c1 <calc_output_single+0x166>
c00099a0:	52                   	push   edx
c00099a1:	50                   	push   eax
c00099a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099aa:	e8 54 a5 01 00       	call   c0023f03 <__adddf3>
c00099af:	83 c4 5c             	add    esp,0x5c
c00099b2:	5b                   	pop    ebx
c00099b3:	5e                   	pop    esi
c00099b4:	5f                   	pop    edi
c00099b5:	5d                   	pop    ebp
c00099b6:	c3                   	ret    

c00099b7 <calc_output_stereo>:
c00099b7:	55                   	push   ebp
c00099b8:	89 cd                	mov    ebp,ecx
c00099ba:	57                   	push   edi
c00099bb:	56                   	push   esi
c00099bc:	53                   	push   ebx
c00099bd:	89 c3                	mov    ebx,eax
c00099bf:	83 ec 6c             	sub    esp,0x6c
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099cd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099d8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099dc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099df:	e8 35 fd ff ff       	call   c0009719 <int_to_fp>
c00099e4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099f0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099f8:	29 c8                	sub    eax,ecx
c00099fa:	99                   	cdq    
c00099fb:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a03:	0f af d0             	imul   edx,eax
c0009a06:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009a09:	31 d2                	xor    edx,edx
c0009a0b:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009a0f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009a13:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009a16:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009a1a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009a1d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009a21:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009a25:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a28:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a2d:	29 c1                	sub    ecx,eax
c0009a2f:	31 c0                	xor    eax,eax
c0009a31:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a3c:	83 c7 08             	add    edi,0x8
c0009a3f:	e8 e3 fc ff ff       	call   c0009727 <fp_to_double>
c0009a44:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a48:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a50:	e8 c8 fc ff ff       	call   c000971d <fp_to_int>
c0009a55:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a58:	52                   	push   edx
c0009a59:	52                   	push   edx
c0009a5a:	51                   	push   ecx
c0009a5b:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a5f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a63:	e8 30 9e 01 00       	call   c0023898 <__subsf3>
c0009a68:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a6b:	e8 07 b5 01 00       	call   c0024f77 <__extendsfdf2>
c0009a70:	83 c4 10             	add    esp,0x10
c0009a73:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a77:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a83:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a87:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a8b:	e8 f0 aa 01 00       	call   c0024580 <__muldf3>
c0009a90:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a94:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a98:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a9b:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a9f:	e8 d3 b4 01 00       	call   c0024f77 <__extendsfdf2>
c0009aa4:	83 c4 10             	add    esp,0x10
c0009aa7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aab:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aaf:	52                   	push   edx
c0009ab0:	50                   	push   eax
c0009ab1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009ab5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009ab9:	e8 45 a4 01 00       	call   c0023f03 <__adddf3>
c0009abe:	59                   	pop    ecx
c0009abf:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009ac3:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009ac7:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009acd:	e8 a5 b4 01 00       	call   c0024f77 <__extendsfdf2>
c0009ad2:	83 c4 10             	add    esp,0x10
c0009ad5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009add:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ae1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ae5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aed:	e8 8e aa 01 00       	call   c0024580 <__muldf3>
c0009af2:	83 c4 10             	add    esp,0x10
c0009af5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009af9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009afd:	52                   	push   edx
c0009afe:	50                   	push   eax
c0009aff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b07:	e8 f7 a3 01 00       	call   c0023f03 <__adddf3>
c0009b0c:	59                   	pop    ecx
c0009b0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b11:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009b15:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009b1b:	e8 57 b4 01 00       	call   c0024f77 <__extendsfdf2>
c0009b20:	83 c4 10             	add    esp,0x10
c0009b23:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b27:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b2f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b33:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b3b:	e8 40 aa 01 00       	call   c0024580 <__muldf3>
c0009b40:	83 c4 10             	add    esp,0x10
c0009b43:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b47:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b4b:	52                   	push   edx
c0009b4c:	50                   	push   eax
c0009b4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b55:	e8 a9 a3 01 00       	call   c0023f03 <__adddf3>
c0009b5a:	83 c4 10             	add    esp,0x10
c0009b5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b65:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b69:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b6d:	0f 89 c5 fe ff ff    	jns    c0009a38 <calc_output_stereo+0x81>
c0009b73:	29 e9                	sub    ecx,ebp
c0009b75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b79:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b7d:	29 c8                	sub    eax,ecx
c0009b7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b87:	99                   	cdq    
c0009b88:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b8c:	31 d2                	xor    edx,edx
c0009b8e:	0f af f8             	imul   edi,eax
c0009b91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b95:	40                   	inc    eax
c0009b96:	01 cf                	add    edi,ecx
c0009b98:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b9d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009ba1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009ba9:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009bac:	31 c0                	xor    eax,eax
c0009bae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009bb2:	89 f8                	mov    eax,edi
c0009bb4:	83 eb 08             	sub    ebx,0x8
c0009bb7:	e8 6b fb ff ff       	call   c0009727 <fp_to_double>
c0009bbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009bc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009bc4:	89 f8                	mov    eax,edi
c0009bc6:	e8 52 fb ff ff       	call   c000971d <fp_to_int>
c0009bcb:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009bce:	52                   	push   edx
c0009bcf:	52                   	push   edx
c0009bd0:	55                   	push   ebp
c0009bd1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bd5:	e8 be 9c 01 00       	call   c0023898 <__subsf3>
c0009bda:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bdd:	e8 95 b3 01 00       	call   c0024f77 <__extendsfdf2>
c0009be2:	83 c4 10             	add    esp,0x10
c0009be5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009be9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bfd:	e8 7e a9 01 00       	call   c0024580 <__muldf3>
c0009c02:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009c05:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009c09:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009c0d:	e8 65 b3 01 00       	call   c0024f77 <__extendsfdf2>
c0009c12:	83 c4 10             	add    esp,0x10
c0009c15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c1d:	52                   	push   edx
c0009c1e:	50                   	push   eax
c0009c1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c27:	e8 d7 a2 01 00       	call   c0023f03 <__adddf3>
c0009c2c:	59                   	pop    ecx
c0009c2d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c31:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c35:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c3b:	e8 37 b3 01 00       	call   c0024f77 <__extendsfdf2>
c0009c40:	83 c4 10             	add    esp,0x10
c0009c43:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c47:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c5b:	e8 20 a9 01 00       	call   c0024580 <__muldf3>
c0009c60:	83 c4 10             	add    esp,0x10
c0009c63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c6b:	52                   	push   edx
c0009c6c:	50                   	push   eax
c0009c6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c75:	e8 89 a2 01 00       	call   c0023f03 <__adddf3>
c0009c7a:	5d                   	pop    ebp
c0009c7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c7f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c83:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c89:	e8 e9 b2 01 00       	call   c0024f77 <__extendsfdf2>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c95:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ca1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ca9:	e8 d2 a8 01 00       	call   c0024580 <__muldf3>
c0009cae:	83 c4 10             	add    esp,0x10
c0009cb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009cb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009cb9:	52                   	push   edx
c0009cba:	50                   	push   eax
c0009cbb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009cc3:	e8 3b a2 01 00       	call   c0023f03 <__adddf3>
c0009cc8:	83 c4 10             	add    esp,0x10
c0009ccb:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009ccf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cd7:	85 ff                	test   edi,edi
c0009cd9:	0f 8f d3 fe ff ff    	jg     c0009bb2 <calc_output_stereo+0x1fb>
c0009cdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cef:	e8 0f a2 01 00       	call   c0023f03 <__adddf3>
c0009cf4:	83 c4 10             	add    esp,0x10
c0009cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0f:	e8 6c a8 01 00       	call   c0024580 <__muldf3>
c0009d14:	59                   	pop    ecx
c0009d15:	5b                   	pop    ebx
c0009d16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d26:	e8 28 b1 01 00       	call   c0024e53 <__truncdfsf2>
c0009d2b:	83 c4 10             	add    esp,0x10
c0009d2e:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d35:	89 03                	mov    DWORD PTR [ebx],eax
c0009d37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d47:	e8 b7 a1 01 00       	call   c0023f03 <__adddf3>
c0009d4c:	83 c4 10             	add    esp,0x10
c0009d4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d67:	e8 14 a8 01 00       	call   c0024580 <__muldf3>
c0009d6c:	5e                   	pop    esi
c0009d6d:	5f                   	pop    edi
c0009d6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d7e:	e8 d0 b0 01 00       	call   c0024e53 <__truncdfsf2>
c0009d83:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d8a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d8d:	83 c4 7c             	add    esp,0x7c
c0009d90:	5b                   	pop    ebx
c0009d91:	5e                   	pop    esi
c0009d92:	5f                   	pop    edi
c0009d93:	5d                   	pop    ebp
c0009d94:	c3                   	ret    

c0009d95 <calc_output_quad>:
c0009d95:	55                   	push   ebp
c0009d96:	57                   	push   edi
c0009d97:	56                   	push   esi
c0009d98:	89 c6                	mov    esi,eax
c0009d9a:	53                   	push   ebx
c0009d9b:	83 ec 7c             	sub    esp,0x7c
c0009d9e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009da2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009da6:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009dad:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009db4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dbc:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009dbf:	e8 55 f9 ff ff       	call   c0009719 <int_to_fp>
c0009dc4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009dc7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009dca:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009dce:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009dd2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009dd6:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009dda:	99                   	cdq    
c0009ddb:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009ddf:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009de3:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009de6:	31 d2                	xor    edx,edx
c0009de8:	0f af d8             	imul   ebx,eax
c0009deb:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009df3:	0f af c7             	imul   eax,edi
c0009df6:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009dfa:	29 c1                	sub    ecx,eax
c0009dfc:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009e04:	31 c0                	xor    eax,eax
c0009e06:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009e09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e0d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e15:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009e1d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009e21:	89 d8                	mov    eax,ebx
c0009e23:	83 c7 10             	add    edi,0x10
c0009e26:	e8 fc f8 ff ff       	call   c0009727 <fp_to_double>
c0009e2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e33:	89 d8                	mov    eax,ebx
c0009e35:	e8 e3 f8 ff ff       	call   c000971d <fp_to_int>
c0009e3a:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	51                   	push   ecx
c0009e41:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e45:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e49:	e8 4a 9a 01 00       	call   c0023898 <__subsf3>
c0009e4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e51:	e8 21 b1 01 00       	call   c0024f77 <__extendsfdf2>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e5d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e71:	e8 0a a7 01 00       	call   c0024580 <__muldf3>
c0009e76:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e81:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e85:	e8 ed b0 01 00       	call   c0024f77 <__extendsfdf2>
c0009e8a:	83 c4 10             	add    esp,0x10
c0009e8d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e91:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e95:	52                   	push   edx
c0009e96:	50                   	push   eax
c0009e97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e9f:	e8 5f a0 01 00       	call   c0023f03 <__adddf3>
c0009ea4:	59                   	pop    ecx
c0009ea5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ea9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ead:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009eb3:	e8 bf b0 01 00       	call   c0024f77 <__extendsfdf2>
c0009eb8:	83 c4 10             	add    esp,0x10
c0009ebb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ecb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed3:	e8 a8 a6 01 00       	call   c0024580 <__muldf3>
c0009ed8:	83 c4 10             	add    esp,0x10
c0009edb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009edf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee3:	52                   	push   edx
c0009ee4:	50                   	push   eax
c0009ee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eed:	e8 11 a0 01 00       	call   c0023f03 <__adddf3>
c0009ef2:	59                   	pop    ecx
c0009ef3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ef7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009efb:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009f01:	e8 71 b0 01 00       	call   c0024f77 <__extendsfdf2>
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f19:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f21:	e8 5a a6 01 00       	call   c0024580 <__muldf3>
c0009f26:	83 c4 10             	add    esp,0x10
c0009f29:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f2d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f31:	52                   	push   edx
c0009f32:	50                   	push   eax
c0009f33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f3b:	e8 c3 9f 01 00       	call   c0023f03 <__adddf3>
c0009f40:	59                   	pop    ecx
c0009f41:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f45:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f49:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f4f:	e8 23 b0 01 00       	call   c0024f77 <__extendsfdf2>
c0009f54:	83 c4 10             	add    esp,0x10
c0009f57:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f5b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f67:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f6b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f6f:	e8 0c a6 01 00       	call   c0024580 <__muldf3>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f7b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f7f:	52                   	push   edx
c0009f80:	50                   	push   eax
c0009f81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f89:	e8 75 9f 01 00       	call   c0023f03 <__adddf3>
c0009f8e:	59                   	pop    ecx
c0009f8f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f93:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f97:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f9d:	e8 d5 af 01 00       	call   c0024f77 <__extendsfdf2>
c0009fa2:	83 c4 10             	add    esp,0x10
c0009fa5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fa9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fb5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fb9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fbd:	e8 be a5 01 00       	call   c0024580 <__muldf3>
c0009fc2:	83 c4 10             	add    esp,0x10
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fcd:	52                   	push   edx
c0009fce:	50                   	push   eax
c0009fcf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fd7:	e8 27 9f 01 00       	call   c0023f03 <__adddf3>
c0009fdc:	83 c4 10             	add    esp,0x10
c0009fdf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fe3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fe7:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009feb:	0f 89 30 fe ff ff    	jns    c0009e21 <calc_output_quad+0x8c>
c0009ff1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009ff5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ff9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ffd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a001:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a009:	29 c8                	sub    eax,ecx
c000a00b:	99                   	cdq    
c000a00c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a010:	31 d2                	xor    edx,edx
c000a012:	0f af d8             	imul   ebx,eax
c000a015:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a019:	40                   	inc    eax
c000a01a:	01 cb                	add    ebx,ecx
c000a01c:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a021:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a025:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a029:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a02d:	8d 34 86             	lea    esi,[esi+eax*4]
c000a030:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a038:	31 c0                	xor    eax,eax
c000a03a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a03e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a042:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a046:	89 d8                	mov    eax,ebx
c000a048:	83 ee 10             	sub    esi,0x10
c000a04b:	e8 d7 f6 ff ff       	call   c0009727 <fp_to_double>
c000a050:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a058:	89 d8                	mov    eax,ebx
c000a05a:	e8 be f6 ff ff       	call   c000971d <fp_to_int>
c000a05f:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a063:	52                   	push   edx
c000a064:	52                   	push   edx
c000a065:	57                   	push   edi
c000a066:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a06a:	e8 29 98 01 00       	call   c0023898 <__subsf3>
c000a06f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a072:	e8 00 af 01 00       	call   c0024f77 <__extendsfdf2>
c000a077:	83 c4 10             	add    esp,0x10
c000a07a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a07e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a08e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a092:	e8 e9 a4 01 00       	call   c0024580 <__muldf3>
c000a097:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a09a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a09e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a0a2:	e8 d0 ae 01 00       	call   c0024f77 <__extendsfdf2>
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ae:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b2:	52                   	push   edx
c000a0b3:	50                   	push   eax
c000a0b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a0bc:	e8 42 9e 01 00       	call   c0023f03 <__adddf3>
c000a0c1:	59                   	pop    ecx
c000a0c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a0c6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0ca:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0d0:	e8 a2 ae 01 00       	call   c0024f77 <__extendsfdf2>
c000a0d5:	83 c4 10             	add    esp,0x10
c000a0d8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0dc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ec:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f0:	e8 8b a4 01 00       	call   c0024580 <__muldf3>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a100:	52                   	push   edx
c000a101:	50                   	push   eax
c000a102:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a106:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a10a:	e8 f4 9d 01 00       	call   c0023f03 <__adddf3>
c000a10f:	5f                   	pop    edi
c000a110:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a114:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a118:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a11e:	e8 54 ae 01 00       	call   c0024f77 <__extendsfdf2>
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a12a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a136:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13e:	e8 3d a4 01 00       	call   c0024580 <__muldf3>
c000a143:	83 c4 10             	add    esp,0x10
c000a146:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a14e:	52                   	push   edx
c000a14f:	50                   	push   eax
c000a150:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a154:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a158:	e8 a6 9d 01 00       	call   c0023f03 <__adddf3>
c000a15d:	59                   	pop    ecx
c000a15e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a162:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a166:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a16c:	e8 06 ae 01 00       	call   c0024f77 <__extendsfdf2>
c000a171:	83 c4 10             	add    esp,0x10
c000a174:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a178:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a184:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a188:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a18c:	e8 ef a3 01 00       	call   c0024580 <__muldf3>
c000a191:	83 c4 10             	add    esp,0x10
c000a194:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a198:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a19c:	52                   	push   edx
c000a19d:	50                   	push   eax
c000a19e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1a6:	e8 58 9d 01 00       	call   c0023f03 <__adddf3>
c000a1ab:	5f                   	pop    edi
c000a1ac:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a1b0:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a1b4:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a1ba:	e8 b8 ad 01 00       	call   c0024f77 <__extendsfdf2>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a1c6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1da:	e8 a1 a3 01 00       	call   c0024580 <__muldf3>
c000a1df:	83 c4 10             	add    esp,0x10
c000a1e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ea:	52                   	push   edx
c000a1eb:	50                   	push   eax
c000a1ec:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1f0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1f4:	e8 0a 9d 01 00       	call   c0023f03 <__adddf3>
c000a1f9:	83 c4 10             	add    esp,0x10
c000a1fc:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a200:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a204:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a208:	85 db                	test   ebx,ebx
c000a20a:	0f 8f 36 fe ff ff    	jg     c000a046 <calc_output_quad+0x2b1>
c000a210:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a214:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a218:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a21c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a220:	e8 de 9c 01 00       	call   c0023f03 <__adddf3>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a240:	e8 3b a3 01 00       	call   c0024580 <__muldf3>
c000a245:	59                   	pop    ecx
c000a246:	5b                   	pop    ebx
c000a247:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a24f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a257:	e8 f7 ab 01 00       	call   c0024e53 <__truncdfsf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a266:	89 06                	mov    DWORD PTR [esi],eax
c000a268:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a26c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a270:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a274:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a278:	e8 86 9c 01 00       	call   c0023f03 <__adddf3>
c000a27d:	83 c4 10             	add    esp,0x10
c000a280:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a284:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a288:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a290:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a298:	e8 e3 a2 01 00       	call   c0024580 <__muldf3>
c000a29d:	5e                   	pop    esi
c000a29e:	5f                   	pop    edi
c000a29f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	e8 9f ab 01 00       	call   c0024e53 <__truncdfsf2>
c000a2b4:	83 c4 10             	add    esp,0x10
c000a2b7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2be:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a2c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2d1:	e8 2d 9c 01 00       	call   c0023f03 <__adddf3>
c000a2d6:	83 c4 10             	add    esp,0x10
c000a2d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f1:	e8 8a a2 01 00       	call   c0024580 <__muldf3>
c000a2f6:	5d                   	pop    ebp
c000a2f7:	59                   	pop    ecx
c000a2f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a304:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a308:	e8 46 ab 01 00       	call   c0024e53 <__truncdfsf2>
c000a30d:	83 c4 10             	add    esp,0x10
c000a310:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a317:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a31a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a31e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a322:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a326:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a32a:	e8 d4 9b 01 00       	call   c0023f03 <__adddf3>
c000a32f:	83 c4 10             	add    esp,0x10
c000a332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a336:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a33a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a346:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a34a:	e8 31 a2 01 00       	call   c0024580 <__muldf3>
c000a34f:	5b                   	pop    ebx
c000a350:	5e                   	pop    esi
c000a351:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a355:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a35d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a361:	e8 ed aa 01 00       	call   c0024e53 <__truncdfsf2>
c000a366:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a36d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a370:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a376:	5b                   	pop    ebx
c000a377:	5e                   	pop    esi
c000a378:	5f                   	pop    edi
c000a379:	5d                   	pop    ebp
c000a37a:	c3                   	ret    

c000a37b <calc_output_hex>:
c000a37b:	55                   	push   ebp
c000a37c:	89 cd                	mov    ebp,ecx
c000a37e:	57                   	push   edi
c000a37f:	56                   	push   esi
c000a380:	53                   	push   ebx
c000a381:	89 c3                	mov    ebx,eax
c000a383:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a389:	89 14 24             	mov    DWORD PTR [esp],edx
c000a38c:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a393:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a39a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a39e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a3a5:	e8 6f f3 ff ff       	call   c0009719 <int_to_fp>
c000a3aa:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a3ad:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a3b1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a3b4:	29 c8                	sub    eax,ecx
c000a3b6:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a3ba:	99                   	cdq    
c000a3bb:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a3c3:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a3c6:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3ce:	0f af f8             	imul   edi,eax
c000a3d1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3d4:	01 cf                	add    edi,ecx
c000a3d6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3da:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3e1:	0f af c2             	imul   eax,edx
c000a3e4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3e8:	29 c1                	sub    ecx,eax
c000a3ea:	31 d2                	xor    edx,edx
c000a3ec:	31 c0                	xor    eax,eax
c000a3ee:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a401:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a405:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a409:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a40d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a415:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a419:	89 f8                	mov    eax,edi
c000a41b:	e8 07 f3 ff ff       	call   c0009727 <fp_to_double>
c000a420:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a428:	89 f8                	mov    eax,edi
c000a42a:	e8 ee f2 ff ff       	call   c000971d <fp_to_int>
c000a42f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a433:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a436:	52                   	push   edx
c000a437:	52                   	push   edx
c000a438:	51                   	push   ecx
c000a439:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a43d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a444:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a448:	e8 4b 94 01 00       	call   c0023898 <__subsf3>
c000a44d:	89 04 24             	mov    DWORD PTR [esp],eax
c000a450:	e8 22 ab 01 00       	call   c0024f77 <__extendsfdf2>
c000a455:	83 c4 10             	add    esp,0x10
c000a458:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a45c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a464:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a468:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a46c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a470:	e8 0b a1 01 00       	call   c0024580 <__muldf3>
c000a475:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a479:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a47d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a480:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a484:	e8 ee aa 01 00       	call   c0024f77 <__extendsfdf2>
c000a489:	83 c4 10             	add    esp,0x10
c000a48c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a490:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a494:	52                   	push   edx
c000a495:	50                   	push   eax
c000a496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a49e:	e8 60 9a 01 00       	call   c0023f03 <__adddf3>
c000a4a3:	59                   	pop    ecx
c000a4a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a4a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a4ac:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a4b2:	e8 c0 aa 01 00       	call   c0024f77 <__extendsfdf2>
c000a4b7:	83 c4 10             	add    esp,0x10
c000a4ba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4be:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ce:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4d2:	e8 a9 a0 01 00       	call   c0024580 <__muldf3>
c000a4d7:	83 c4 10             	add    esp,0x10
c000a4da:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4de:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e2:	52                   	push   edx
c000a4e3:	50                   	push   eax
c000a4e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4ec:	e8 12 9a 01 00       	call   c0023f03 <__adddf3>
c000a4f1:	59                   	pop    ecx
c000a4f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4f6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4fa:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a500:	e8 72 aa 01 00       	call   c0024f77 <__extendsfdf2>
c000a505:	83 c4 10             	add    esp,0x10
c000a508:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a510:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a514:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a518:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a520:	e8 5b a0 01 00       	call   c0024580 <__muldf3>
c000a525:	83 c4 10             	add    esp,0x10
c000a528:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a52c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a530:	52                   	push   edx
c000a531:	50                   	push   eax
c000a532:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a536:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a53a:	e8 c4 99 01 00       	call   c0023f03 <__adddf3>
c000a53f:	59                   	pop    ecx
c000a540:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a544:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a548:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a54e:	e8 24 aa 01 00       	call   c0024f77 <__extendsfdf2>
c000a553:	83 c4 10             	add    esp,0x10
c000a556:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a55a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a566:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56e:	e8 0d a0 01 00       	call   c0024580 <__muldf3>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a57e:	52                   	push   edx
c000a57f:	50                   	push   eax
c000a580:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a584:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a588:	e8 76 99 01 00       	call   c0023f03 <__adddf3>
c000a58d:	59                   	pop    ecx
c000a58e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a592:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a596:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a59c:	e8 d6 a9 01 00       	call   c0024f77 <__extendsfdf2>
c000a5a1:	83 c4 10             	add    esp,0x10
c000a5a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5bc:	e8 bf 9f 01 00       	call   c0024580 <__muldf3>
c000a5c1:	83 c4 10             	add    esp,0x10
c000a5c4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5cc:	52                   	push   edx
c000a5cd:	50                   	push   eax
c000a5ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5d6:	e8 28 99 01 00       	call   c0023f03 <__adddf3>
c000a5db:	59                   	pop    ecx
c000a5dc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5e0:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5e4:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5ea:	e8 88 a9 01 00       	call   c0024f77 <__extendsfdf2>
c000a5ef:	83 c4 10             	add    esp,0x10
c000a5f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a602:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a606:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60a:	e8 71 9f 01 00       	call   c0024580 <__muldf3>
c000a60f:	83 c4 10             	add    esp,0x10
c000a612:	83 c6 18             	add    esi,0x18
c000a615:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a619:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61d:	52                   	push   edx
c000a61e:	50                   	push   eax
c000a61f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a623:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a627:	e8 d7 98 01 00       	call   c0023f03 <__adddf3>
c000a62c:	59                   	pop    ecx
c000a62d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a631:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a635:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a63b:	e8 37 a9 01 00       	call   c0024f77 <__extendsfdf2>
c000a640:	83 c4 10             	add    esp,0x10
c000a643:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a647:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a653:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a657:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a65b:	e8 20 9f 01 00       	call   c0024580 <__muldf3>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a667:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a66b:	52                   	push   edx
c000a66c:	50                   	push   eax
c000a66d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a671:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a675:	e8 89 98 01 00       	call   c0023f03 <__adddf3>
c000a67a:	83 c4 10             	add    esp,0x10
c000a67d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a681:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a685:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a688:	0f 89 8b fd ff ff    	jns    c000a419 <calc_output_hex+0x9e>
c000a68e:	31 f6                	xor    esi,esi
c000a690:	31 ff                	xor    edi,edi
c000a692:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a696:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a699:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a69d:	29 e9                	sub    ecx,ebp
c000a69f:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a6a3:	29 c8                	sub    eax,ecx
c000a6a5:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a6a8:	99                   	cdq    
c000a6a9:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a6ad:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a6b0:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a6b4:	0f af e8             	imul   ebp,eax
c000a6b7:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a6bb:	40                   	inc    eax
c000a6bc:	01 cd                	add    ebp,ecx
c000a6be:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a6c3:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6c7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6cb:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6cf:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6d2:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6d6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6da:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6de:	89 e8                	mov    eax,ebp
c000a6e0:	e8 42 f0 ff ff       	call   c0009727 <fp_to_double>
c000a6e5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6ed:	89 e8                	mov    eax,ebp
c000a6ef:	e8 29 f0 ff ff       	call   c000971d <fp_to_int>
c000a6f4:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6f8:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6fb:	52                   	push   edx
c000a6fc:	52                   	push   edx
c000a6fd:	51                   	push   ecx
c000a6fe:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a705:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a70c:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a710:	e8 83 91 01 00       	call   c0023898 <__subsf3>
c000a715:	89 04 24             	mov    DWORD PTR [esp],eax
c000a718:	e8 5a a8 01 00       	call   c0024f77 <__extendsfdf2>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a724:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a728:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a72c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a730:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a734:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a738:	e8 43 9e 01 00       	call   c0024580 <__muldf3>
c000a73d:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a744:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a748:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a74b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a74f:	e8 23 a8 01 00       	call   c0024f77 <__extendsfdf2>
c000a754:	83 c4 10             	add    esp,0x10
c000a757:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a75b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75f:	52                   	push   edx
c000a760:	50                   	push   eax
c000a761:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a769:	e8 95 97 01 00       	call   c0023f03 <__adddf3>
c000a76e:	59                   	pop    ecx
c000a76f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a773:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a777:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a77d:	e8 f5 a7 01 00       	call   c0024f77 <__extendsfdf2>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a789:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a795:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a799:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79d:	e8 de 9d 01 00       	call   c0024580 <__muldf3>
c000a7a2:	83 c4 10             	add    esp,0x10
c000a7a5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ad:	52                   	push   edx
c000a7ae:	50                   	push   eax
c000a7af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a7b7:	e8 47 97 01 00       	call   c0023f03 <__adddf3>
c000a7bc:	59                   	pop    ecx
c000a7bd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a7c1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a7c5:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7cb:	e8 a7 a7 01 00       	call   c0024f77 <__extendsfdf2>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7eb:	e8 90 9d 01 00       	call   c0024580 <__muldf3>
c000a7f0:	83 c4 10             	add    esp,0x10
c000a7f3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7fb:	52                   	push   edx
c000a7fc:	50                   	push   eax
c000a7fd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a801:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a805:	e8 f9 96 01 00       	call   c0023f03 <__adddf3>
c000a80a:	59                   	pop    ecx
c000a80b:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a80f:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a813:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a819:	e8 59 a7 01 00       	call   c0024f77 <__extendsfdf2>
c000a81e:	83 c4 10             	add    esp,0x10
c000a821:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a825:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a829:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a831:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a835:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a839:	e8 42 9d 01 00       	call   c0024580 <__muldf3>
c000a83e:	83 c4 10             	add    esp,0x10
c000a841:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a845:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a849:	52                   	push   edx
c000a84a:	50                   	push   eax
c000a84b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a84f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a853:	e8 ab 96 01 00       	call   c0023f03 <__adddf3>
c000a858:	59                   	pop    ecx
c000a859:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a85d:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a861:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a867:	e8 0b a7 01 00       	call   c0024f77 <__extendsfdf2>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a873:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a877:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a883:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a887:	e8 f4 9c 01 00       	call   c0024580 <__muldf3>
c000a88c:	83 c4 10             	add    esp,0x10
c000a88f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a893:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a897:	52                   	push   edx
c000a898:	50                   	push   eax
c000a899:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a89d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a8a1:	e8 5d 96 01 00       	call   c0023f03 <__adddf3>
c000a8a6:	59                   	pop    ecx
c000a8a7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a8ab:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a8af:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a8b5:	e8 bd a6 01 00       	call   c0024f77 <__extendsfdf2>
c000a8ba:	83 c4 10             	add    esp,0x10
c000a8bd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8cd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d5:	e8 a6 9c 01 00       	call   c0024580 <__muldf3>
c000a8da:	83 c4 10             	add    esp,0x10
c000a8dd:	83 eb 18             	sub    ebx,0x18
c000a8e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e8:	52                   	push   edx
c000a8e9:	50                   	push   eax
c000a8ea:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8ee:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8f2:	e8 0c 96 01 00       	call   c0023f03 <__adddf3>
c000a8f7:	59                   	pop    ecx
c000a8f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8fc:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a900:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a906:	e8 6c a6 01 00       	call   c0024f77 <__extendsfdf2>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a912:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a916:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a922:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a926:	e8 55 9c 01 00       	call   c0024580 <__muldf3>
c000a92b:	83 c4 10             	add    esp,0x10
c000a92e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a932:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a936:	52                   	push   edx
c000a937:	50                   	push   eax
c000a938:	57                   	push   edi
c000a939:	56                   	push   esi
c000a93a:	e8 c4 95 01 00       	call   c0023f03 <__adddf3>
c000a93f:	83 c4 10             	add    esp,0x10
c000a942:	89 c6                	mov    esi,eax
c000a944:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a947:	89 d7                	mov    edi,edx
c000a949:	85 ed                	test   ebp,ebp
c000a94b:	0f 8f 8d fd ff ff    	jg     c000a6de <calc_output_hex+0x363>
c000a951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a955:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a959:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a95d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a961:	e8 9d 95 01 00       	call   c0023f03 <__adddf3>
c000a966:	83 c4 10             	add    esp,0x10
c000a969:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a970:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a974:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a978:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a980:	e8 fb 9b 01 00       	call   c0024580 <__muldf3>
c000a985:	59                   	pop    ecx
c000a986:	5b                   	pop    ebx
c000a987:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a98f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a993:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a997:	e8 b7 a4 01 00       	call   c0024e53 <__truncdfsf2>
c000a99c:	83 c4 10             	add    esp,0x10
c000a99f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a6:	89 03                	mov    DWORD PTR [ebx],eax
c000a9a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a9b8:	e8 46 95 01 00       	call   c0023f03 <__adddf3>
c000a9bd:	83 c4 10             	add    esp,0x10
c000a9c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d7:	e8 a4 9b 01 00       	call   c0024580 <__muldf3>
c000a9dc:	5d                   	pop    ebp
c000a9dd:	59                   	pop    ecx
c000a9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ee:	e8 60 a4 01 00       	call   c0024e53 <__truncdfsf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9fd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aa00:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa04:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aa10:	e8 ee 94 01 00       	call   c0023f03 <__adddf3>
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2f:	e8 4c 9b 01 00       	call   c0024580 <__muldf3>
c000aa34:	5b                   	pop    ebx
c000aa35:	5d                   	pop    ebp
c000aa36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa46:	e8 08 a4 01 00       	call   c0024e53 <__truncdfsf2>
c000aa4b:	83 c4 10             	add    esp,0x10
c000aa4e:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa55:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa58:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa5c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa68:	e8 96 94 01 00       	call   c0023f03 <__adddf3>
c000aa6d:	83 c4 10             	add    esp,0x10
c000aa70:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa87:	e8 f4 9a 01 00       	call   c0024580 <__muldf3>
c000aa8c:	59                   	pop    ecx
c000aa8d:	5b                   	pop    ebx
c000aa8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	e8 b0 a3 01 00       	call   c0024e53 <__truncdfsf2>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aab0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aab4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aab8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aabc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aac0:	e8 3e 94 01 00       	call   c0023f03 <__adddf3>
c000aac5:	83 c4 10             	add    esp,0x10
c000aac8:	89 04 24             	mov    DWORD PTR [esp],eax
c000aacb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadf:	e8 9c 9a 01 00       	call   c0024580 <__muldf3>
c000aae4:	5d                   	pop    ebp
c000aae5:	59                   	pop    ecx
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf6:	e8 58 a3 01 00       	call   c0024e53 <__truncdfsf2>
c000aafb:	83 c4 10             	add    esp,0x10
c000aafe:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab05:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ab08:	57                   	push   edi
c000ab09:	56                   	push   esi
c000ab0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ab12:	e8 ec 93 01 00       	call   c0023f03 <__adddf3>
c000ab17:	83 c4 10             	add    esp,0x10
c000ab1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab31:	e8 4a 9a 01 00       	call   c0024580 <__muldf3>
c000ab36:	5b                   	pop    ebx
c000ab37:	5e                   	pop    esi
c000ab38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab48:	e8 06 a3 01 00       	call   c0024e53 <__truncdfsf2>
c000ab4d:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab54:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab57:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab5d:	5b                   	pop    ebx
c000ab5e:	5e                   	pop    esi
c000ab5f:	5f                   	pop    edi
c000ab60:	5d                   	pop    ebp
c000ab61:	c3                   	ret    

c000ab62 <sinc_reset>:
c000ab62:	56                   	push   esi
c000ab63:	53                   	push   ebx
c000ab64:	51                   	push   ecx
c000ab65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab69:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab6c:	85 db                	test   ebx,ebx
c000ab6e:	74 59                	je     c000abc9 <sinc_reset+0x67>
c000ab70:	31 d2                	xor    edx,edx
c000ab72:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab79:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab7c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab7f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab86:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab8d:	31 c0                	xor    eax,eax
c000ab8f:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab95:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab98:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab9b:	52                   	push   edx
c000ab9c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab9f:	c1 e0 02             	shl    eax,0x2
c000aba2:	50                   	push   eax
c000aba3:	6a 00                	push   0x0
c000aba5:	56                   	push   esi
c000aba6:	e8 41 5b ff ff       	call   c00006ec <memset>
c000abab:	83 c4 0c             	add    esp,0xc
c000abae:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abb1:	c1 e0 02             	shl    eax,0x2
c000abb4:	50                   	push   eax
c000abb5:	68 aa 00 00 00       	push   0xaa
c000abba:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000abbd:	8d 04 86             	lea    eax,[esi+eax*4]
c000abc0:	50                   	push   eax
c000abc1:	e8 26 5b ff ff       	call   c00006ec <memset>
c000abc6:	83 c4 10             	add    esp,0x10
c000abc9:	58                   	pop    eax
c000abca:	5b                   	pop    ebx
c000abcb:	5e                   	pop    esi
c000abcc:	c3                   	ret    

c000abcd <calc_output_multi>:
c000abcd:	55                   	push   ebp
c000abce:	57                   	push   edi
c000abcf:	56                   	push   esi
c000abd0:	89 c6                	mov    esi,eax
c000abd2:	53                   	push   ebx
c000abd3:	83 ec 4c             	sub    esp,0x4c
c000abd6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abda:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abde:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abe2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abe6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abf2:	8d 46 44             	lea    eax,[esi+0x44]
c000abf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf8:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac02:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ac05:	e8 0f eb ff ff       	call   c0009719 <int_to_fp>
c000ac0a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ac0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ac11:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ac15:	99                   	cdq    
c000ac16:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ac1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ac1e:	0f af d0             	imul   edx,eax
c000ac21:	0f af c3             	imul   eax,ebx
c000ac24:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac28:	29 c1                	sub    ecx,eax
c000ac2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac2e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac32:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac3d:	57                   	push   edi
c000ac3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac42:	6a 00                	push   0x0
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 9f 5a ff ff       	call   c00006ec <memset>
c000ac4d:	83 c4 10             	add    esp,0x10
c000ac50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac54:	89 df                	mov    edi,ebx
c000ac56:	e8 cc ea ff ff       	call   c0009727 <fp_to_double>
c000ac5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac5f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac67:	e8 b1 ea ff ff       	call   c000971d <fp_to_int>
c000ac6c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac6f:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac72:	51                   	push   ecx
c000ac73:	51                   	push   ecx
c000ac74:	55                   	push   ebp
c000ac75:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac79:	e8 1a 8c 01 00       	call   c0023898 <__subsf3>
c000ac7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac81:	e8 f1 a2 01 00       	call   c0024f77 <__extendsfdf2>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac8d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aca1:	e8 da 98 01 00       	call   c0024580 <__muldf3>
c000aca6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aca9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000acad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000acb1:	e8 c1 a2 01 00       	call   c0024f77 <__extendsfdf2>
c000acb6:	83 c4 10             	add    esp,0x10
c000acb9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acbd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc1:	52                   	push   edx
c000acc2:	50                   	push   eax
c000acc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000accb:	e8 33 92 01 00       	call   c0023f03 <__adddf3>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acd7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acdb:	89 f8                	mov    eax,edi
c000acdd:	b9 08 00 00 00       	mov    ecx,0x8
c000ace2:	99                   	cdq    
c000ace3:	f7 f9                	idiv   ecx
c000ace5:	4a                   	dec    edx
c000ace6:	83 fa 06             	cmp    edx,0x6
c000ace9:	77 07                	ja     c000acf2 <calc_output_multi+0x125>
c000aceb:	ff 24 95 84 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd987c]
c000acf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acf5:	4f                   	dec    edi
c000acf6:	83 ec 0c             	sub    esp,0xc
c000acf9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad00:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad07:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad0b:	e8 67 a2 01 00       	call   c0024f77 <__extendsfdf2>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad17:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad27:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad2b:	e8 50 98 01 00       	call   c0024580 <__muldf3>
c000ad30:	83 c4 10             	add    esp,0x10
c000ad33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3b:	52                   	push   edx
c000ad3c:	50                   	push   eax
c000ad3d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad40:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad43:	e8 bb 91 01 00       	call   c0023f03 <__adddf3>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad4e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad54:	4f                   	dec    edi
c000ad55:	83 ec 0c             	sub    esp,0xc
c000ad58:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad5f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad66:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad6a:	e8 08 a2 01 00       	call   c0024f77 <__extendsfdf2>
c000ad6f:	83 c4 10             	add    esp,0x10
c000ad72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad76:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8a:	e8 f1 97 01 00       	call   c0024580 <__muldf3>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad9a:	52                   	push   edx
c000ad9b:	50                   	push   eax
c000ad9c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad9f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ada2:	e8 5c 91 01 00       	call   c0023f03 <__adddf3>
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adb3:	4f                   	dec    edi
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbe:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adc5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adc9:	e8 a9 a1 01 00       	call   c0024f77 <__extendsfdf2>
c000adce:	83 c4 10             	add    esp,0x10
c000add1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000add5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000addd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ade9:	e8 92 97 01 00       	call   c0024580 <__muldf3>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf9:	52                   	push   edx
c000adfa:	50                   	push   eax
c000adfb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adfe:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae01:	e8 fd 90 01 00       	call   c0023f03 <__adddf3>
c000ae06:	83 c4 10             	add    esp,0x10
c000ae09:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae0c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae12:	4f                   	dec    edi
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae1d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae24:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae28:	e8 4a a1 01 00       	call   c0024f77 <__extendsfdf2>
c000ae2d:	83 c4 10             	add    esp,0x10
c000ae30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae44:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae48:	e8 33 97 01 00       	call   c0024580 <__muldf3>
c000ae4d:	83 c4 10             	add    esp,0x10
c000ae50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae54:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae58:	52                   	push   edx
c000ae59:	50                   	push   eax
c000ae5a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae5d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae60:	e8 9e 90 01 00       	call   c0023f03 <__adddf3>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae6b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae6e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae71:	4f                   	dec    edi
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae7c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae83:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae87:	e8 eb a0 01 00       	call   c0024f77 <__extendsfdf2>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aea7:	e8 d4 96 01 00       	call   c0024580 <__muldf3>
c000aeac:	83 c4 10             	add    esp,0x10
c000aeaf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb7:	52                   	push   edx
c000aeb8:	50                   	push   eax
c000aeb9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aebc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aebf:	e8 3f 90 01 00       	call   c0023f03 <__adddf3>
c000aec4:	83 c4 10             	add    esp,0x10
c000aec7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeca:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aecd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed0:	4f                   	dec    edi
c000aed1:	83 ec 0c             	sub    esp,0xc
c000aed4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aed7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aedb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aee2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aee6:	e8 8c a0 01 00       	call   c0024f77 <__extendsfdf2>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aefa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aefe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af06:	e8 75 96 01 00       	call   c0024580 <__muldf3>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af12:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af16:	52                   	push   edx
c000af17:	50                   	push   eax
c000af18:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af1b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af1e:	e8 e0 8f 01 00       	call   c0023f03 <__adddf3>
c000af23:	83 c4 10             	add    esp,0x10
c000af26:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af29:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af2f:	4f                   	dec    edi
c000af30:	83 ec 0c             	sub    esp,0xc
c000af33:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af3a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af41:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af45:	e8 2d a0 01 00       	call   c0024f77 <__extendsfdf2>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af51:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af65:	e8 16 96 01 00       	call   c0024580 <__muldf3>
c000af6a:	83 c4 10             	add    esp,0x10
c000af6d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af71:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af75:	52                   	push   edx
c000af76:	50                   	push   eax
c000af77:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af7a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af7d:	e8 81 8f 01 00       	call   c0023f03 <__adddf3>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af88:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af8e:	4f                   	dec    edi
c000af8f:	83 ec 0c             	sub    esp,0xc
c000af92:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af99:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afa0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afa4:	e8 ce 9f 01 00       	call   c0024f77 <__extendsfdf2>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afc0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afc4:	e8 b7 95 01 00       	call   c0024580 <__muldf3>
c000afc9:	83 c4 10             	add    esp,0x10
c000afcc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afd4:	52                   	push   edx
c000afd5:	50                   	push   eax
c000afd6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afd9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afdc:	e8 22 8f 01 00       	call   c0023f03 <__adddf3>
c000afe1:	83 c4 10             	add    esp,0x10
c000afe4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afe7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afea:	85 ff                	test   edi,edi
c000afec:	0f 8f e9 fc ff ff    	jg     c000acdb <calc_output_multi+0x10e>
c000aff2:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000aff6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000affa:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000affe:	0f 89 4c fc ff ff    	jns    c000ac50 <calc_output_multi+0x83>
c000b004:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b008:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b00c:	29 c8                	sub    eax,ecx
c000b00e:	99                   	cdq    
c000b00f:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b013:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b017:	0f af d0             	imul   edx,eax
c000b01a:	40                   	inc    eax
c000b01b:	01 d1                	add    ecx,edx
c000b01d:	0f af c3             	imul   eax,ebx
c000b020:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b024:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b02b:	55                   	push   ebp
c000b02c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b030:	6a 00                	push   0x0
c000b032:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b036:	e8 b1 56 ff ff       	call   c00006ec <memset>
c000b03b:	83 c4 10             	add    esp,0x10
c000b03e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b042:	e8 e0 e6 ff ff       	call   c0009727 <fp_to_double>
c000b047:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b04b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b04f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b053:	e8 c5 e6 ff ff       	call   c000971d <fp_to_int>
c000b058:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b05b:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b05e:	57                   	push   edi
c000b05f:	57                   	push   edi
c000b060:	89 df                	mov    edi,ebx
c000b062:	55                   	push   ebp
c000b063:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b067:	e8 2c 88 01 00       	call   c0023898 <__subsf3>
c000b06c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b06f:	e8 03 9f 01 00       	call   c0024f77 <__extendsfdf2>
c000b074:	83 c4 10             	add    esp,0x10
c000b077:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b07b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08f:	e8 ec 94 01 00       	call   c0024580 <__muldf3>
c000b094:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b097:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b09b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b09f:	e8 d3 9e 01 00       	call   c0024f77 <__extendsfdf2>
c000b0a4:	83 c4 10             	add    esp,0x10
c000b0a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0af:	52                   	push   edx
c000b0b0:	50                   	push   eax
c000b0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0b9:	e8 45 8e 01 00       	call   c0023f03 <__adddf3>
c000b0be:	83 c4 10             	add    esp,0x10
c000b0c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0c5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0c9:	89 f8                	mov    eax,edi
c000b0cb:	b9 08 00 00 00       	mov    ecx,0x8
c000b0d0:	99                   	cdq    
c000b0d1:	f7 f9                	idiv   ecx
c000b0d3:	4a                   	dec    edx
c000b0d4:	83 fa 06             	cmp    edx,0x6
c000b0d7:	77 07                	ja     c000b0e0 <calc_output_multi+0x513>
c000b0d9:	ff 24 95 a0 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9860]
c000b0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0e4:	4f                   	dec    edi
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0ef:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0f6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0fa:	e8 78 9e 01 00       	call   c0024f77 <__extendsfdf2>
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b10a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b112:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b116:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b11a:	e8 61 94 01 00       	call   c0024580 <__muldf3>
c000b11f:	83 c4 10             	add    esp,0x10
c000b122:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b126:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12a:	52                   	push   edx
c000b12b:	50                   	push   eax
c000b12c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b12f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b132:	e8 cc 8d 01 00       	call   c0023f03 <__adddf3>
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b13d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b144:	4f                   	dec    edi
c000b145:	83 ec 0c             	sub    esp,0xc
c000b148:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b14b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b14f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b156:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b15a:	e8 18 9e 01 00       	call   c0024f77 <__extendsfdf2>
c000b15f:	83 c4 10             	add    esp,0x10
c000b162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b16a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b16e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b172:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b176:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b17a:	e8 01 94 01 00       	call   c0024580 <__muldf3>
c000b17f:	83 c4 10             	add    esp,0x10
c000b182:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b186:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18a:	52                   	push   edx
c000b18b:	50                   	push   eax
c000b18c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b18f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b192:	e8 6c 8d 01 00       	call   c0023f03 <__adddf3>
c000b197:	83 c4 10             	add    esp,0x10
c000b19a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b19d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1a4:	4f                   	dec    edi
c000b1a5:	83 ec 0c             	sub    esp,0xc
c000b1a8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1af:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1b6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1ba:	e8 b8 9d 01 00       	call   c0024f77 <__extendsfdf2>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1da:	e8 a1 93 01 00       	call   c0024580 <__muldf3>
c000b1df:	83 c4 10             	add    esp,0x10
c000b1e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ea:	52                   	push   edx
c000b1eb:	50                   	push   eax
c000b1ec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1ef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1f2:	e8 0c 8d 01 00       	call   c0023f03 <__adddf3>
c000b1f7:	83 c4 10             	add    esp,0x10
c000b1fa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1fd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b204:	4f                   	dec    edi
c000b205:	83 ec 0c             	sub    esp,0xc
c000b208:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b20b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b20f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b216:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b21a:	e8 58 9d 01 00       	call   c0024f77 <__extendsfdf2>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b226:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b22a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23a:	e8 41 93 01 00       	call   c0024580 <__muldf3>
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b246:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24a:	52                   	push   edx
c000b24b:	50                   	push   eax
c000b24c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b24f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b252:	e8 ac 8c 01 00       	call   c0023f03 <__adddf3>
c000b257:	83 c4 10             	add    esp,0x10
c000b25a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b25d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b264:	4f                   	dec    edi
c000b265:	83 ec 0c             	sub    esp,0xc
c000b268:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b26b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b26f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b276:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b27a:	e8 f8 9c 01 00       	call   c0024f77 <__extendsfdf2>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b286:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b292:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b296:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29a:	e8 e1 92 01 00       	call   c0024580 <__muldf3>
c000b29f:	83 c4 10             	add    esp,0x10
c000b2a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2aa:	52                   	push   edx
c000b2ab:	50                   	push   eax
c000b2ac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2af:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b2:	e8 4c 8c 01 00       	call   c0023f03 <__adddf3>
c000b2b7:	83 c4 10             	add    esp,0x10
c000b2ba:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2bd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c4:	4f                   	dec    edi
c000b2c5:	83 ec 0c             	sub    esp,0xc
c000b2c8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2cf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2d6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2da:	e8 98 9c 01 00       	call   c0024f77 <__extendsfdf2>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fa:	e8 81 92 01 00       	call   c0024580 <__muldf3>
c000b2ff:	83 c4 10             	add    esp,0x10
c000b302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30a:	52                   	push   edx
c000b30b:	50                   	push   eax
c000b30c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b30f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b312:	e8 ec 8b 01 00       	call   c0023f03 <__adddf3>
c000b317:	83 c4 10             	add    esp,0x10
c000b31a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b31d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b324:	4f                   	dec    edi
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b32b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b32f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b336:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b33a:	e8 38 9c 01 00       	call   c0024f77 <__extendsfdf2>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b346:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b34e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b352:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b356:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35a:	e8 21 92 01 00       	call   c0024580 <__muldf3>
c000b35f:	83 c4 10             	add    esp,0x10
c000b362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36a:	52                   	push   edx
c000b36b:	50                   	push   eax
c000b36c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b36f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b372:	e8 8c 8b 01 00       	call   c0023f03 <__adddf3>
c000b377:	83 c4 10             	add    esp,0x10
c000b37a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b37d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b384:	4f                   	dec    edi
c000b385:	83 ec 0c             	sub    esp,0xc
c000b388:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b38b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b38f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b396:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b39a:	e8 d8 9b 01 00       	call   c0024f77 <__extendsfdf2>
c000b39f:	83 c4 10             	add    esp,0x10
c000b3a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3ba:	e8 c1 91 01 00       	call   c0024580 <__muldf3>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ca:	52                   	push   edx
c000b3cb:	50                   	push   eax
c000b3cc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3cf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d2:	e8 2c 8b 01 00       	call   c0023f03 <__adddf3>
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3dd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e0:	85 ff                	test   edi,edi
c000b3e2:	0f 8f e1 fc ff ff    	jg     c000b0c9 <calc_output_multi+0x4fc>
c000b3e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3ec:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3f0:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3f9:	0f 8f 3f fc ff ff    	jg     c000b03e <calc_output_multi+0x471>
c000b3ff:	be 08 00 00 00       	mov    esi,0x8
c000b404:	89 d8                	mov    eax,ebx
c000b406:	99                   	cdq    
c000b407:	f7 fe                	idiv   esi
c000b409:	4a                   	dec    edx
c000b40a:	83 fa 06             	cmp    edx,0x6
c000b40d:	77 07                	ja     c000b416 <calc_output_multi+0x849>
c000b40f:	ff 24 95 bc 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9844]
c000b416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b41a:	4b                   	dec    ebx
c000b41b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b41f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b422:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b426:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b42a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b42d:	e8 d1 8a 01 00       	call   c0023f03 <__adddf3>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b439:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b43d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b445:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44d:	e8 2e 91 01 00       	call   c0024580 <__muldf3>
c000b452:	5d                   	pop    ebp
c000b453:	59                   	pop    ecx
c000b454:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b458:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b45c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b460:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b464:	e8 ea 99 01 00       	call   c0024e53 <__truncdfsf2>
c000b469:	83 c4 10             	add    esp,0x10
c000b46c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b470:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b477:	4b                   	dec    ebx
c000b478:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b47c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b47f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b483:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b487:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b48a:	e8 74 8a 01 00       	call   c0023f03 <__adddf3>
c000b48f:	83 c4 10             	add    esp,0x10
c000b492:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b496:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4aa:	e8 d1 90 01 00       	call   c0024580 <__muldf3>
c000b4af:	59                   	pop    ecx
c000b4b0:	5f                   	pop    edi
c000b4b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4b5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c1:	e8 8d 99 01 00       	call   c0024e53 <__truncdfsf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4cd:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d4:	4b                   	dec    ebx
c000b4d5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e7:	e8 17 8a 01 00       	call   c0023f03 <__adddf3>
c000b4ec:	83 c4 10             	add    esp,0x10
c000b4ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b507:	e8 74 90 01 00       	call   c0024580 <__muldf3>
c000b50c:	5f                   	pop    edi
c000b50d:	5d                   	pop    ebp
c000b50e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b512:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b516:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51e:	e8 30 99 01 00       	call   c0024e53 <__truncdfsf2>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b52a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b52d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b531:	4b                   	dec    ebx
c000b532:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b536:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b539:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b53d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b541:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b544:	e8 ba 89 01 00       	call   c0023f03 <__adddf3>
c000b549:	83 c4 10             	add    esp,0x10
c000b54c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b550:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b560:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b564:	e8 17 90 01 00       	call   c0024580 <__muldf3>
c000b569:	5d                   	pop    ebp
c000b56a:	59                   	pop    ecx
c000b56b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b56f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b573:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b577:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57b:	e8 d3 98 01 00       	call   c0024e53 <__truncdfsf2>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b587:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58e:	4b                   	dec    ebx
c000b58f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b593:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b59a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a1:	e8 5d 89 01 00       	call   c0023f03 <__adddf3>
c000b5a6:	83 c4 10             	add    esp,0x10
c000b5a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c1:	e8 ba 8f 01 00       	call   c0024580 <__muldf3>
c000b5c6:	59                   	pop    ecx
c000b5c7:	5f                   	pop    edi
c000b5c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d8:	e8 76 98 01 00       	call   c0024e53 <__truncdfsf2>
c000b5dd:	83 c4 10             	add    esp,0x10
c000b5e0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5e4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5eb:	4b                   	dec    ebx
c000b5ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5f7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fe:	e8 00 89 01 00       	call   c0023f03 <__adddf3>
c000b603:	83 c4 10             	add    esp,0x10
c000b606:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b60a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b616:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b61e:	e8 5d 8f 01 00       	call   c0024580 <__muldf3>
c000b623:	5f                   	pop    edi
c000b624:	5d                   	pop    ebp
c000b625:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b629:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b635:	e8 19 98 01 00       	call   c0024e53 <__truncdfsf2>
c000b63a:	83 c4 10             	add    esp,0x10
c000b63d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b641:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b648:	4b                   	dec    ebx
c000b649:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b64d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b650:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b654:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b658:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b65b:	e8 a3 88 01 00       	call   c0023f03 <__adddf3>
c000b660:	83 c4 10             	add    esp,0x10
c000b663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b667:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b66f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b673:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b677:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67b:	e8 00 8f 01 00       	call   c0024580 <__muldf3>
c000b680:	5d                   	pop    ebp
c000b681:	59                   	pop    ecx
c000b682:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b686:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b692:	e8 bc 97 01 00       	call   c0024e53 <__truncdfsf2>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b69e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6a5:	4b                   	dec    ebx
c000b6a6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6aa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6b1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6b5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6b8:	e8 46 88 01 00       	call   c0023f03 <__adddf3>
c000b6bd:	83 c4 10             	add    esp,0x10
c000b6c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6d8:	e8 a3 8e 01 00       	call   c0024580 <__muldf3>
c000b6dd:	59                   	pop    ecx
c000b6de:	5f                   	pop    edi
c000b6df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ef:	e8 5f 97 01 00       	call   c0024e53 <__truncdfsf2>
c000b6f4:	83 c4 10             	add    esp,0x10
c000b6f7:	85 db                	test   ebx,ebx
c000b6f9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6fd:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b700:	0f 8f fe fc ff ff    	jg     c000b404 <calc_output_multi+0x837>
c000b706:	83 c4 4c             	add    esp,0x4c
c000b709:	5b                   	pop    ebx
c000b70a:	5e                   	pop    esi
c000b70b:	5f                   	pop    edi
c000b70c:	5d                   	pop    ebp
c000b70d:	c3                   	ret    

c000b70e <double_to_fp>:
c000b70e:	83 ec 0c             	sub    esp,0xc
c000b711:	68 00 00 b0 40       	push   0x40b00000
c000b716:	6a 00                	push   0x0
c000b718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b720:	e8 5b 8e 01 00       	call   c0024580 <__muldf3>
c000b725:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b729:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b72d:	83 c4 1c             	add    esp,0x1c
c000b730:	e9 cb 98 01 00       	jmp    c0025000 <lrint>

c000b735 <fmod_one>:
c000b735:	83 ec 2c             	sub    esp,0x2c
c000b738:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b73c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b740:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b748:	83 ec 08             	sub    esp,0x8
c000b74b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b753:	e8 a8 98 01 00       	call   c0025000 <lrint>
c000b758:	83 c4 10             	add    esp,0x10
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	50                   	push   eax
c000b75f:	e8 7f 94 01 00       	call   c0024be3 <__floatsidf>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	52                   	push   edx
c000b768:	50                   	push   eax
c000b769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b771:	e8 de 8d 01 00       	call   c0024554 <__subdf3>
c000b776:	83 c4 10             	add    esp,0x10
c000b779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b77d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b781:	b8 00 00 00 00       	mov    eax,0x0
c000b786:	ba 00 00 00 00       	mov    edx,0x0
c000b78b:	52                   	push   edx
c000b78c:	50                   	push   eax
c000b78d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b791:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b795:	e8 b5 96 01 00       	call   c0024e4f <__ltdf2>
c000b79a:	83 c4 10             	add    esp,0x10
c000b79d:	85 c0                	test   eax,eax
c000b79f:	79 1e                	jns    c000b7bf <fmod_one+0x8a>
c000b7a1:	b8 00 00 00 00       	mov    eax,0x0
c000b7a6:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b7ab:	52                   	push   edx
c000b7ac:	50                   	push   eax
c000b7ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b7b5:	e8 49 87 01 00       	call   c0023f03 <__adddf3>
c000b7ba:	83 c4 10             	add    esp,0x10
c000b7bd:	eb 08                	jmp    c000b7c7 <fmod_one+0x92>
c000b7bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7c7:	83 c4 2c             	add    esp,0x2c
c000b7ca:	c3                   	ret    

c000b7cb <prepare_data>:
c000b7cb:	55                   	push   ebp
c000b7cc:	57                   	push   edi
c000b7cd:	56                   	push   esi
c000b7ce:	53                   	push   ebx
c000b7cf:	83 ec 1c             	sub    esp,0x1c
c000b7d2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7d6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7da:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7de:	0f 89 57 01 00 00    	jns    c000b93b <prepare_data+0x170>
c000b7e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7e7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7ea:	85 d2                	test   edx,edx
c000b7ec:	75 0d                	jne    c000b7fb <prepare_data+0x30>
c000b7ee:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7f1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7f4:	29 d0                	sub    eax,edx
c000b7f6:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7f9:	eb 44                	jmp    c000b83f <prepare_data+0x74>
c000b7fb:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7fe:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b801:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b804:	39 c1                	cmp    ecx,eax
c000b806:	7d 04                	jge    c000b80c <prepare_data+0x41>
c000b808:	29 d0                	sub    eax,edx
c000b80a:	eb 2d                	jmp    c000b839 <prepare_data+0x6e>
c000b80c:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b812:	29 d7                	sub    edi,edx
c000b814:	01 f7                	add    edi,esi
c000b816:	51                   	push   ecx
c000b817:	29 f2                	sub    edx,esi
c000b819:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b820:	8d 14 90             	lea    edx,[eax+edx*4]
c000b823:	51                   	push   ecx
c000b824:	52                   	push   edx
c000b825:	50                   	push   eax
c000b826:	e8 53 4e ff ff       	call   c000067e <memmove>
c000b82b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b82e:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b831:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b834:	29 f0                	sub    eax,esi
c000b836:	83 c4 10             	add    esp,0x10
c000b839:	29 f0                	sub    eax,esi
c000b83b:	79 02                	jns    c000b83f <prepare_data+0x74>
c000b83d:	31 c0                	xor    eax,eax
c000b83f:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b842:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b845:	29 ef                	sub    edi,ebp
c000b847:	39 c7                	cmp    edi,eax
c000b849:	7e 02                	jle    c000b84d <prepare_data+0x82>
c000b84b:	89 c7                	mov    edi,eax
c000b84d:	89 f8                	mov    eax,edi
c000b84f:	99                   	cdq    
c000b850:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b853:	b8 15 00 00 00       	mov    eax,0x15
c000b858:	29 d7                	sub    edi,edx
c000b85a:	0f 88 dd 00 00 00    	js     c000b93d <prepare_data+0x172>
c000b860:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b863:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b866:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b869:	0f 8f ce 00 00 00    	jg     c000b93d <prepare_data+0x172>
c000b86f:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b875:	50                   	push   eax
c000b876:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b87d:	50                   	push   eax
c000b87e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b882:	8b 00                	mov    eax,DWORD PTR [eax]
c000b884:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b887:	50                   	push   eax
c000b888:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b88b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b88f:	50                   	push   eax
c000b890:	e8 21 4e ff ff       	call   c00006b6 <memcpy>
c000b895:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b898:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b89b:	01 fd                	add    ebp,edi
c000b89d:	01 f9                	add    ecx,edi
c000b89f:	83 c4 10             	add    esp,0x10
c000b8a2:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b8a5:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b8a8:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b8ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8af:	0f 85 86 00 00 00    	jne    c000b93b <prepare_data+0x170>
c000b8b5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b8b8:	89 e8                	mov    eax,ebp
c000b8ba:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b8bd:	29 c8                	sub    eax,ecx
c000b8bf:	39 f8                	cmp    eax,edi
c000b8c1:	7d 78                	jge    c000b93b <prepare_data+0x170>
c000b8c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8c7:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8cb:	74 6e                	je     c000b93b <prepare_data+0x170>
c000b8cd:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8d0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8d4:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8d7:	29 ef                	sub    edi,ebp
c000b8d9:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8dd:	7c 29                	jl     c000b908 <prepare_data+0x13d>
c000b8df:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8e2:	29 f1                	sub    ecx,esi
c000b8e4:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8eb:	55                   	push   ebp
c000b8ec:	50                   	push   eax
c000b8ed:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8f0:	50                   	push   eax
c000b8f1:	52                   	push   edx
c000b8f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8f6:	e8 83 4d ff ff       	call   c000067e <memmove>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b901:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b904:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b908:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b90b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b90e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b911:	83 c6 05             	add    esi,0x5
c000b914:	78 07                	js     c000b91d <prepare_data+0x152>
c000b916:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b919:	39 cf                	cmp    edi,ecx
c000b91b:	7e 04                	jle    c000b921 <prepare_data+0x156>
c000b91d:	89 ce                	mov    esi,ecx
c000b91f:	29 c6                	sub    esi,eax
c000b921:	8d 04 82             	lea    eax,[edx+eax*4]
c000b924:	51                   	push   ecx
c000b925:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b92c:	51                   	push   ecx
c000b92d:	6a 00                	push   0x0
c000b92f:	50                   	push   eax
c000b930:	e8 b7 4d ff ff       	call   c00006ec <memset>
c000b935:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b938:	83 c4 10             	add    esp,0x10
c000b93b:	31 c0                	xor    eax,eax
c000b93d:	83 c4 1c             	add    esp,0x1c
c000b940:	5b                   	pop    ebx
c000b941:	5e                   	pop    esi
c000b942:	5f                   	pop    edi
c000b943:	5d                   	pop    ebp
c000b944:	c3                   	ret    

c000b945 <sinc_multichan_vari_process>:
c000b945:	55                   	push   ebp
c000b946:	b8 05 00 00 00       	mov    eax,0x5
c000b94b:	57                   	push   edi
c000b94c:	56                   	push   esi
c000b94d:	53                   	push   ebx
c000b94e:	83 ec 4c             	sub    esp,0x4c
c000b951:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b955:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b959:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b95c:	85 db                	test   ebx,ebx
c000b95e:	0f 84 b5 05 00 00    	je     c000bf19 <sinc_multichan_vari_process+0x5d4>
c000b964:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b967:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b96a:	0f af d0             	imul   edx,eax
c000b96d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b970:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b974:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b97b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b97e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b985:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b988:	8b 06                	mov    eax,DWORD PTR [esi]
c000b98a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b98e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b992:	57                   	push   edi
c000b993:	57                   	push   edi
c000b994:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b998:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b99c:	e8 15 dd ff ff       	call   c00096b6 <is_bad_src_ratio>
c000b9a1:	83 c4 10             	add    esp,0x10
c000b9a4:	89 c2                	mov    edx,eax
c000b9a6:	b8 16 00 00 00       	mov    eax,0x16
c000b9ab:	85 d2                	test   edx,edx
c000b9ad:	0f 85 66 05 00 00    	jne    c000bf19 <sinc_multichan_vari_process+0x5d4>
c000b9b3:	83 ec 0c             	sub    esp,0xc
c000b9b6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b9b9:	e8 25 92 01 00       	call   c0024be3 <__floatsidf>
c000b9be:	83 c4 10             	add    esp,0x10
c000b9c1:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9c8:	68 00 00 00 40       	push   0x40000000
c000b9cd:	6a 00                	push   0x0
c000b9cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9d7:	e8 27 85 01 00       	call   c0023f03 <__adddf3>
c000b9dc:	59                   	pop    ecx
c000b9dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9e1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9e5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9e8:	e8 f6 91 01 00       	call   c0024be3 <__floatsidf>
c000b9ed:	83 c4 10             	add    esp,0x10
c000b9f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9f8:	52                   	push   edx
c000b9f9:	50                   	push   eax
c000b9fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba02:	e8 5d 8e 01 00       	call   c0024864 <__divdf3>
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba12:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba14:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba17:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba1e:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000ba21:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000ba24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba2c:	52                   	push   edx
c000ba2d:	50                   	push   eax
c000ba2e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba36:	e8 14 94 01 00       	call   c0024e4f <__ltdf2>
c000ba3b:	83 c4 10             	add    esp,0x10
c000ba3e:	85 c0                	test   eax,eax
c000ba40:	79 1d                	jns    c000ba5f <sinc_multichan_vari_process+0x11a>
c000ba42:	68 00 00 f0 3f       	push   0x3ff00000
c000ba47:	6a 00                	push   0x0
c000ba49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba51:	e8 f9 93 01 00       	call   c0024e4f <__ltdf2>
c000ba56:	83 c4 10             	add    esp,0x10
c000ba59:	85 c0                	test   eax,eax
c000ba5b:	78 2c                	js     c000ba89 <sinc_multichan_vari_process+0x144>
c000ba5d:	eb 4a                	jmp    c000baa9 <sinc_multichan_vari_process+0x164>
c000ba5f:	68 00 00 f0 3f       	push   0x3ff00000
c000ba64:	6a 00                	push   0x0
c000ba66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6e:	e8 dc 93 01 00       	call   c0024e4f <__ltdf2>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	85 c0                	test   eax,eax
c000ba78:	79 2f                	jns    c000baa9 <sinc_multichan_vari_process+0x164>
c000ba7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba82:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba89:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba8d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba91:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba99:	e8 c6 8d 01 00       	call   c0024864 <__divdf3>
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000baa5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000baa9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000baac:	50                   	push   eax
c000baad:	50                   	push   eax
c000baae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab6:	e8 45 95 01 00       	call   c0025000 <lrint>
c000babb:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000babe:	40                   	inc    eax
c000babf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bac3:	0f af c7             	imul   eax,edi
c000bac6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baca:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bacd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bad1:	58                   	pop    eax
c000bad2:	5a                   	pop    edx
c000bad3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bad7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000badb:	e8 55 fc ff ff       	call   c000b735 <fmod_one>
c000bae0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baeb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000baee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000baf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bafa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bafe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb02:	e8 4d 8a 01 00       	call   c0024554 <__subdf3>
c000bb07:	83 c4 18             	add    esp,0x18
c000bb0a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb0e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb12:	52                   	push   edx
c000bb13:	50                   	push   eax
c000bb14:	e8 e7 94 01 00       	call   c0025000 <lrint>
c000bb19:	0f af f8             	imul   edi,eax
c000bb1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bb20:	01 f8                	add    eax,edi
c000bb22:	99                   	cdq    
c000bb23:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bb26:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb31:	68 00 00 f0 3f       	push   0x3ff00000
c000bb36:	6a 00                	push   0x0
c000bb38:	e8 27 8d 01 00       	call   c0024864 <__divdf3>
c000bb3d:	83 c4 10             	add    esp,0x10
c000bb40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb48:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb4d:	68 23 42 92 0c       	push   0xc924223
c000bb52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb5a:	e8 a4 83 01 00       	call   c0023f03 <__adddf3>
c000bb5f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb63:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb67:	83 c4 20             	add    esp,0x20
c000bb6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb72:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb7d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb80:	7d 4e                	jge    c000bbd0 <sinc_multichan_vari_process+0x28b>
c000bb82:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb85:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb88:	01 c8                	add    eax,ecx
c000bb8a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb8d:	99                   	cdq    
c000bb8e:	f7 f9                	idiv   ecx
c000bb90:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb94:	7d 0c                	jge    c000bba2 <sinc_multichan_vari_process+0x25d>
c000bb96:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb99:	85 ff                	test   edi,edi
c000bb9b:	79 68                	jns    c000bc05 <sinc_multichan_vari_process+0x2c0>
c000bb9d:	e9 e3 00 00 00       	jmp    c000bc85 <sinc_multichan_vari_process+0x340>
c000bba2:	50                   	push   eax
c000bba3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba7:	55                   	push   ebp
c000bba8:	53                   	push   ebx
c000bba9:	e8 1d fc ff ff       	call   c000b7cb <prepare_data>
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bbb4:	85 c0                	test   eax,eax
c000bbb6:	0f 85 5d 03 00 00    	jne    c000bf19 <sinc_multichan_vari_process+0x5d4>
c000bbbc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bbbf:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bbc2:	01 c8                	add    eax,ecx
c000bbc4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bbc7:	99                   	cdq    
c000bbc8:	f7 f9                	idiv   ecx
c000bbca:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bbce:	7c c6                	jl     c000bb96 <sinc_multichan_vari_process+0x251>
c000bbd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbd3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbd7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbda:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbe1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbe5:	89 06                	mov    DWORD PTR [esi],eax
c000bbe7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbed:	99                   	cdq    
c000bbee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbf1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbf4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbf7:	99                   	cdq    
c000bbf8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbfb:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbfe:	31 c0                	xor    eax,eax
c000bc00:	e9 14 03 00 00       	jmp    c000bf19 <sinc_multichan_vari_process+0x5d4>
c000bc05:	83 ec 0c             	sub    esp,0xc
c000bc08:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bc0b:	e8 d3 8f 01 00       	call   c0024be3 <__floatsidf>
c000bc10:	83 c4 10             	add    esp,0x10
c000bc13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc17:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc1f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2b:	e8 d3 82 01 00       	call   c0023f03 <__adddf3>
c000bc30:	83 c4 10             	add    esp,0x10
c000bc33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4b:	e8 b3 82 01 00       	call   c0023f03 <__adddf3>
c000bc50:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc53:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc57:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc5b:	e8 83 8f 01 00       	call   c0024be3 <__floatsidf>
c000bc60:	83 c4 10             	add    esp,0x10
c000bc63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc6b:	52                   	push   edx
c000bc6c:	50                   	push   eax
c000bc6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc75:	e8 d3 91 01 00       	call   c0024e4d <__gedf2>
c000bc7a:	83 c4 10             	add    esp,0x10
c000bc7d:	85 c0                	test   eax,eax
c000bc7f:	0f 89 4b ff ff ff    	jns    c000bbd0 <sinc_multichan_vari_process+0x28b>
c000bc85:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc89:	0f 8e ed 00 00 00    	jle    c000bd7c <sinc_multichan_vari_process+0x437>
c000bc8f:	83 ec 10             	sub    esp,0x10
c000bc92:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc95:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc98:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc9b:	ff 36                	push   DWORD PTR [esi]
c000bc9d:	e8 b2 88 01 00       	call   c0024554 <__subdf3>
c000bca2:	83 c4 18             	add    esp,0x18
c000bca5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcad:	52                   	push   edx
c000bcae:	50                   	push   eax
c000bcaf:	e8 2c 93 01 00       	call   c0024fe0 <fabs>
c000bcb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbc:	83 c4 10             	add    esp,0x10
c000bcbf:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bcc4:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bcc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bccd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcd1:	e8 5b 91 01 00       	call   c0024e31 <__gtdf2>
c000bcd6:	83 c4 10             	add    esp,0x10
c000bcd9:	85 c0                	test   eax,eax
c000bcdb:	0f 8e 9b 00 00 00    	jle    c000bd7c <sinc_multichan_vari_process+0x437>
c000bce1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bce3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bce6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcee:	52                   	push   edx
c000bcef:	50                   	push   eax
c000bcf0:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bcf3:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bcf6:	e8 59 88 01 00       	call   c0024554 <__subdf3>
c000bcfb:	59                   	pop    ecx
c000bcfc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd00:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd04:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bd07:	e8 d7 8e 01 00       	call   c0024be3 <__floatsidf>
c000bd0c:	83 c4 10             	add    esp,0x10
c000bd0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd13:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd17:	52                   	push   edx
c000bd18:	50                   	push   eax
c000bd19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd21:	e8 5a 88 01 00       	call   c0024580 <__muldf3>
c000bd26:	5f                   	pop    edi
c000bd27:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd2b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd2f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd32:	e8 ac 8e 01 00       	call   c0024be3 <__floatsidf>
c000bd37:	83 c4 10             	add    esp,0x10
c000bd3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd42:	52                   	push   edx
c000bd43:	50                   	push   eax
c000bd44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd4c:	e8 13 8b 01 00       	call   c0024864 <__divdf3>
c000bd51:	83 c4 10             	add    esp,0x10
c000bd54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 92 81 01 00       	call   c0023f03 <__adddf3>
c000bd71:	83 c4 10             	add    esp,0x10
c000bd74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd7c:	83 ec 0c             	sub    esp,0xc
c000bd7f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd82:	e8 5c 8e 01 00       	call   c0024be3 <__floatsidf>
c000bd87:	83 c4 10             	add    esp,0x10
c000bd8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bda2:	e8 a8 90 01 00       	call   c0024e4f <__ltdf2>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	85 c0                	test   eax,eax
c000bdac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bdb0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdb8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bdbc:	78 10                	js     c000bdce <sinc_multichan_vari_process+0x489>
c000bdbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bdc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdde:	e8 9d 87 01 00       	call   c0024580 <__muldf3>
c000bde3:	59                   	pop    ecx
c000bde4:	5f                   	pop    edi
c000bde5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bde9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bded:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdf5:	e8 14 f9 ff ff       	call   c000b70e <double_to_fp>
c000bdfa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfe:	89 c7                	mov    edi,eax
c000be00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be0c:	e8 6f 87 01 00       	call   c0024580 <__muldf3>
c000be11:	83 c4 18             	add    esp,0x18
c000be14:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be1c:	52                   	push   edx
c000be1d:	50                   	push   eax
c000be1e:	e8 eb f8 ff ff       	call   c000b70e <double_to_fp>
c000be23:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000be26:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be2a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be2d:	8d 04 90             	lea    eax,[eax+edx*4]
c000be30:	50                   	push   eax
c000be31:	50                   	push   eax
c000be32:	50                   	push   eax
c000be33:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be36:	e8 a8 8d 01 00       	call   c0024be3 <__floatsidf>
c000be3b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be3f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be53:	e8 0c 8a 01 00       	call   c0024864 <__divdf3>
c000be58:	83 c4 1c             	add    esp,0x1c
c000be5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be5f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be63:	52                   	push   edx
c000be64:	89 fa                	mov    edx,edi
c000be66:	50                   	push   eax
c000be67:	89 d8                	mov    eax,ebx
c000be69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be6c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be70:	e8 58 ed ff ff       	call   c000abcd <calc_output_multi>
c000be75:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be78:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be8b:	e8 d4 89 01 00       	call   c0024864 <__divdf3>
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bea3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bea7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000beab:	e8 53 80 01 00       	call   c0023f03 <__adddf3>
c000beb0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000beb4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000beb8:	83 c4 28             	add    esp,0x28
c000bebb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bebf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bec3:	e8 6d f8 ff ff       	call   c000b735 <fmod_one>
c000bec8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000becb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000becf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bed3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bed6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000beda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bede:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bee2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bee6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beea:	e8 65 86 01 00       	call   c0024554 <__subdf3>
c000beef:	83 c4 18             	add    esp,0x18
c000bef2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bef6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000befa:	52                   	push   edx
c000befb:	50                   	push   eax
c000befc:	e8 ff 90 01 00       	call   c0025000 <lrint>
c000bf01:	0f af f8             	imul   edi,eax
c000bf04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf08:	83 c4 10             	add    esp,0x10
c000bf0b:	01 f8                	add    eax,edi
c000bf0d:	99                   	cdq    
c000bf0e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf11:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf14:	e9 61 fc ff ff       	jmp    c000bb7a <sinc_multichan_vari_process+0x235>
c000bf19:	83 c4 4c             	add    esp,0x4c
c000bf1c:	5b                   	pop    ebx
c000bf1d:	5e                   	pop    esi
c000bf1e:	5f                   	pop    edi
c000bf1f:	5d                   	pop    ebp
c000bf20:	c3                   	ret    

c000bf21 <sinc_hex_vari_process>:
c000bf21:	55                   	push   ebp
c000bf22:	b8 05 00 00 00       	mov    eax,0x5
c000bf27:	57                   	push   edi
c000bf28:	56                   	push   esi
c000bf29:	53                   	push   ebx
c000bf2a:	83 ec 4c             	sub    esp,0x4c
c000bf2d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf31:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf35:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf38:	85 db                	test   ebx,ebx
c000bf3a:	0f 84 b7 05 00 00    	je     c000c4f7 <sinc_hex_vari_process+0x5d6>
c000bf40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf43:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf46:	0f af d0             	imul   edx,eax
c000bf49:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf4c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf50:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf57:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf61:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf64:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf6f:	57                   	push   edi
c000bf70:	57                   	push   edi
c000bf71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf79:	e8 38 d7 ff ff       	call   c00096b6 <is_bad_src_ratio>
c000bf7e:	83 c4 10             	add    esp,0x10
c000bf81:	89 c2                	mov    edx,eax
c000bf83:	b8 16 00 00 00       	mov    eax,0x16
c000bf88:	85 d2                	test   edx,edx
c000bf8a:	0f 85 67 05 00 00    	jne    c000c4f7 <sinc_hex_vari_process+0x5d6>
c000bf90:	83 ec 0c             	sub    esp,0xc
c000bf93:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf96:	e8 48 8c 01 00       	call   c0024be3 <__floatsidf>
c000bf9b:	83 c4 10             	add    esp,0x10
c000bf9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfa1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bfa5:	68 00 00 00 40       	push   0x40000000
c000bfaa:	6a 00                	push   0x0
c000bfac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfb4:	e8 4a 7f 01 00       	call   c0023f03 <__adddf3>
c000bfb9:	59                   	pop    ecx
c000bfba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfbe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bfc2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc5:	e8 19 8c 01 00       	call   c0024be3 <__floatsidf>
c000bfca:	83 c4 10             	add    esp,0x10
c000bfcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfd1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfd5:	52                   	push   edx
c000bfd6:	50                   	push   eax
c000bfd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfdb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfdf:	e8 80 88 01 00       	call   c0024864 <__divdf3>
c000bfe4:	83 c4 10             	add    esp,0x10
c000bfe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfeb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bff2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bff5:	89 04 24             	mov    DWORD PTR [esp],eax
c000bff8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bffc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfff:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c006:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c00a:	52                   	push   edx
c000c00b:	50                   	push   eax
c000c00c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c010:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c014:	e8 36 8e 01 00       	call   c0024e4f <__ltdf2>
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	85 c0                	test   eax,eax
c000c01e:	79 1d                	jns    c000c03d <sinc_hex_vari_process+0x11c>
c000c020:	68 00 00 f0 3f       	push   0x3ff00000
c000c025:	6a 00                	push   0x0
c000c027:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c02b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c02f:	e8 1b 8e 01 00       	call   c0024e4f <__ltdf2>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	85 c0                	test   eax,eax
c000c039:	78 2c                	js     c000c067 <sinc_hex_vari_process+0x146>
c000c03b:	eb 4a                	jmp    c000c087 <sinc_hex_vari_process+0x166>
c000c03d:	68 00 00 f0 3f       	push   0x3ff00000
c000c042:	6a 00                	push   0x0
c000c044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04c:	e8 fe 8d 01 00       	call   c0024e4f <__ltdf2>
c000c051:	83 c4 10             	add    esp,0x10
c000c054:	85 c0                	test   eax,eax
c000c056:	79 2f                	jns    c000c087 <sinc_hex_vari_process+0x166>
c000c058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c060:	89 04 24             	mov    DWORD PTR [esp],eax
c000c063:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c067:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c06b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c077:	e8 e8 87 01 00       	call   c0024864 <__divdf3>
c000c07c:	83 c4 10             	add    esp,0x10
c000c07f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c083:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c087:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c08a:	50                   	push   eax
c000c08b:	50                   	push   eax
c000c08c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c090:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c094:	e8 67 8f 01 00       	call   c0025000 <lrint>
c000c099:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c09c:	40                   	inc    eax
c000c09d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a1:	0f af c7             	imul   eax,edi
c000c0a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0af:	58                   	pop    eax
c000c0b0:	5a                   	pop    edx
c000c0b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b9:	e8 77 f6 ff ff       	call   c000b735 <fmod_one>
c000c0be:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c0c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0c5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0e0:	e8 6f 84 01 00       	call   c0024554 <__subdf3>
c000c0e5:	83 c4 18             	add    esp,0x18
c000c0e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0f0:	52                   	push   edx
c000c0f1:	50                   	push   eax
c000c0f2:	e8 09 8f 01 00       	call   c0025000 <lrint>
c000c0f7:	0f af f8             	imul   edi,eax
c000c0fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0fe:	01 f8                	add    eax,edi
c000c100:	99                   	cdq    
c000c101:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c104:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c107:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10f:	68 00 00 f0 3f       	push   0x3ff00000
c000c114:	6a 00                	push   0x0
c000c116:	e8 49 87 01 00       	call   c0024864 <__divdf3>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c122:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c126:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c12b:	68 23 42 92 0c       	push   0xc924223
c000c130:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c134:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c138:	e8 c6 7d 01 00       	call   c0023f03 <__adddf3>
c000c13d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c141:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c145:	83 c4 20             	add    esp,0x20
c000c148:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c150:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c158:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c15b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c15e:	7d 4e                	jge    c000c1ae <sinc_hex_vari_process+0x28d>
c000c160:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c163:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c166:	01 c8                	add    eax,ecx
c000c168:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c16b:	99                   	cdq    
c000c16c:	f7 f9                	idiv   ecx
c000c16e:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c172:	7d 0c                	jge    c000c180 <sinc_hex_vari_process+0x25f>
c000c174:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c177:	85 ff                	test   edi,edi
c000c179:	79 69                	jns    c000c1e4 <sinc_hex_vari_process+0x2c3>
c000c17b:	e9 e4 00 00 00       	jmp    c000c264 <sinc_hex_vari_process+0x343>
c000c180:	50                   	push   eax
c000c181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c185:	56                   	push   esi
c000c186:	53                   	push   ebx
c000c187:	e8 3f f6 ff ff       	call   c000b7cb <prepare_data>
c000c18c:	83 c4 10             	add    esp,0x10
c000c18f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c192:	85 c0                	test   eax,eax
c000c194:	0f 85 5d 03 00 00    	jne    c000c4f7 <sinc_hex_vari_process+0x5d6>
c000c19a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c19d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1a0:	01 c8                	add    eax,ecx
c000c1a2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1a5:	99                   	cdq    
c000c1a6:	f7 f9                	idiv   ecx
c000c1a8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c1ac:	7c c6                	jl     c000c174 <sinc_hex_vari_process+0x253>
c000c1ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c1b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c1b5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1b8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1c6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1cc:	99                   	cdq    
c000c1cd:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1d0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1d6:	99                   	cdq    
c000c1d7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1da:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1dd:	31 c0                	xor    eax,eax
c000c1df:	e9 13 03 00 00       	jmp    c000c4f7 <sinc_hex_vari_process+0x5d6>
c000c1e4:	83 ec 0c             	sub    esp,0xc
c000c1e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1ea:	e8 f4 89 01 00       	call   c0024be3 <__floatsidf>
c000c1ef:	83 c4 10             	add    esp,0x10
c000c1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c202:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c206:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c20a:	e8 f4 7c 01 00       	call   c0023f03 <__adddf3>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c21e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c222:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c226:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c22a:	e8 d4 7c 01 00       	call   c0023f03 <__adddf3>
c000c22f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c232:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c236:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c23a:	e8 a4 89 01 00       	call   c0024be3 <__floatsidf>
c000c23f:	83 c4 10             	add    esp,0x10
c000c242:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c246:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c24a:	52                   	push   edx
c000c24b:	50                   	push   eax
c000c24c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c250:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c254:	e8 f4 8b 01 00       	call   c0024e4d <__gedf2>
c000c259:	83 c4 10             	add    esp,0x10
c000c25c:	85 c0                	test   eax,eax
c000c25e:	0f 89 4a ff ff ff    	jns    c000c1ae <sinc_hex_vari_process+0x28d>
c000c264:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c268:	0f 8e ef 00 00 00    	jle    c000c35d <sinc_hex_vari_process+0x43c>
c000c26e:	83 ec 10             	sub    esp,0x10
c000c271:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c274:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c277:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c27a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c27d:	e8 d2 82 01 00       	call   c0024554 <__subdf3>
c000c282:	83 c4 18             	add    esp,0x18
c000c285:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c289:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c28d:	52                   	push   edx
c000c28e:	50                   	push   eax
c000c28f:	e8 4c 8d 01 00       	call   c0024fe0 <fabs>
c000c294:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c298:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29c:	83 c4 10             	add    esp,0x10
c000c29f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2a4:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b1:	e8 7b 8b 01 00       	call   c0024e31 <__gtdf2>
c000c2b6:	83 c4 10             	add    esp,0x10
c000c2b9:	85 c0                	test   eax,eax
c000c2bb:	0f 8e 9c 00 00 00    	jle    c000c35d <sinc_hex_vari_process+0x43c>
c000c2c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2c4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2cf:	52                   	push   edx
c000c2d0:	50                   	push   eax
c000c2d1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2d4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2d7:	e8 78 82 01 00       	call   c0024554 <__subdf3>
c000c2dc:	59                   	pop    ecx
c000c2dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2e5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2e8:	e8 f6 88 01 00       	call   c0024be3 <__floatsidf>
c000c2ed:	83 c4 10             	add    esp,0x10
c000c2f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2f8:	52                   	push   edx
c000c2f9:	50                   	push   eax
c000c2fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c302:	e8 79 82 01 00       	call   c0024580 <__muldf3>
c000c307:	5f                   	pop    edi
c000c308:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c30c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c310:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c313:	e8 cb 88 01 00       	call   c0024be3 <__floatsidf>
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c323:	52                   	push   edx
c000c324:	50                   	push   eax
c000c325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c329:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c32d:	e8 32 85 01 00       	call   c0024864 <__divdf3>
c000c332:	83 c4 10             	add    esp,0x10
c000c335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c339:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c33d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c341:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c345:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c349:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c34d:	e8 b1 7b 01 00       	call   c0023f03 <__adddf3>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c359:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c35d:	83 ec 0c             	sub    esp,0xc
c000c360:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c363:	e8 7b 88 01 00       	call   c0024be3 <__floatsidf>
c000c368:	83 c4 10             	add    esp,0x10
c000c36b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c36f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c373:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c377:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c37b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c383:	e8 c7 8a 01 00       	call   c0024e4f <__ltdf2>
c000c388:	83 c4 10             	add    esp,0x10
c000c38b:	85 c0                	test   eax,eax
c000c38d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c395:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c399:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c39d:	78 10                	js     c000c3af <sinc_hex_vari_process+0x48e>
c000c39f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c3a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3bf:	e8 bc 81 01 00       	call   c0024580 <__muldf3>
c000c3c4:	59                   	pop    ecx
c000c3c5:	5f                   	pop    edi
c000c3c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3d6:	e8 33 f3 ff ff       	call   c000b70e <double_to_fp>
c000c3db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3df:	89 c7                	mov    edi,eax
c000c3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ed:	e8 8e 81 01 00       	call   c0024580 <__muldf3>
c000c3f2:	83 c4 18             	add    esp,0x18
c000c3f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3fd:	52                   	push   edx
c000c3fe:	50                   	push   eax
c000c3ff:	e8 0a f3 ff ff       	call   c000b70e <double_to_fp>
c000c404:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c407:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c40b:	83 c4 0c             	add    esp,0xc
c000c40e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c411:	8d 04 90             	lea    eax,[eax+edx*4]
c000c414:	50                   	push   eax
c000c415:	50                   	push   eax
c000c416:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c419:	e8 c5 87 01 00       	call   c0024be3 <__floatsidf>
c000c41e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c422:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c426:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c42a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c42e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c432:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c436:	e8 29 84 01 00       	call   c0024864 <__divdf3>
c000c43b:	83 c4 18             	add    esp,0x18
c000c43e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c442:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c446:	52                   	push   edx
c000c447:	89 fa                	mov    edx,edi
c000c449:	50                   	push   eax
c000c44a:	89 d8                	mov    eax,ebx
c000c44c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c450:	e8 26 df ff ff       	call   c000a37b <calc_output_hex>
c000c455:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c461:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c465:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c469:	e8 f6 83 01 00       	call   c0024864 <__divdf3>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c475:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c481:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c485:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c489:	e8 75 7a 01 00       	call   c0023f03 <__adddf3>
c000c48e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c492:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c496:	83 c4 18             	add    esp,0x18
c000c499:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c49d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a1:	e8 8f f2 ff ff       	call   c000b735 <fmod_one>
c000c4a6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c4a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4ad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c4b1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c4b4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4c8:	e8 87 80 01 00       	call   c0024554 <__subdf3>
c000c4cd:	83 c4 18             	add    esp,0x18
c000c4d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4d8:	52                   	push   edx
c000c4d9:	50                   	push   eax
c000c4da:	e8 21 8b 01 00       	call   c0025000 <lrint>
c000c4df:	0f af f8             	imul   edi,eax
c000c4e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4e6:	83 c4 10             	add    esp,0x10
c000c4e9:	01 f8                	add    eax,edi
c000c4eb:	99                   	cdq    
c000c4ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4f2:	e9 61 fc ff ff       	jmp    c000c158 <sinc_hex_vari_process+0x237>
c000c4f7:	83 c4 4c             	add    esp,0x4c
c000c4fa:	5b                   	pop    ebx
c000c4fb:	5e                   	pop    esi
c000c4fc:	5f                   	pop    edi
c000c4fd:	5d                   	pop    ebp
c000c4fe:	c3                   	ret    

c000c4ff <sinc_quad_vari_process>:
c000c4ff:	55                   	push   ebp
c000c500:	b8 05 00 00 00       	mov    eax,0x5
c000c505:	57                   	push   edi
c000c506:	56                   	push   esi
c000c507:	53                   	push   ebx
c000c508:	83 ec 4c             	sub    esp,0x4c
c000c50b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c50f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c513:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c516:	85 db                	test   ebx,ebx
c000c518:	0f 84 b7 05 00 00    	je     c000cad5 <sinc_quad_vari_process+0x5d6>
c000c51e:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c521:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c524:	0f af d0             	imul   edx,eax
c000c527:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c52a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c52e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c535:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c538:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c53f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c542:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c545:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54d:	57                   	push   edi
c000c54e:	57                   	push   edi
c000c54f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c553:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c557:	e8 5a d1 ff ff       	call   c00096b6 <is_bad_src_ratio>
c000c55c:	83 c4 10             	add    esp,0x10
c000c55f:	89 c2                	mov    edx,eax
c000c561:	b8 16 00 00 00       	mov    eax,0x16
c000c566:	85 d2                	test   edx,edx
c000c568:	0f 85 67 05 00 00    	jne    c000cad5 <sinc_quad_vari_process+0x5d6>
c000c56e:	83 ec 0c             	sub    esp,0xc
c000c571:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c574:	e8 6a 86 01 00       	call   c0024be3 <__floatsidf>
c000c579:	83 c4 10             	add    esp,0x10
c000c57c:	89 04 24             	mov    DWORD PTR [esp],eax
c000c57f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c583:	68 00 00 00 40       	push   0x40000000
c000c588:	6a 00                	push   0x0
c000c58a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c58e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c592:	e8 6c 79 01 00       	call   c0023f03 <__adddf3>
c000c597:	59                   	pop    ecx
c000c598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c59c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c5a0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5a3:	e8 3b 86 01 00       	call   c0024be3 <__floatsidf>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5b3:	52                   	push   edx
c000c5b4:	50                   	push   eax
c000c5b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5bd:	e8 a2 82 01 00       	call   c0024864 <__divdf3>
c000c5c2:	83 c4 10             	add    esp,0x10
c000c5c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e8:	52                   	push   edx
c000c5e9:	50                   	push   eax
c000c5ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5f2:	e8 58 88 01 00       	call   c0024e4f <__ltdf2>
c000c5f7:	83 c4 10             	add    esp,0x10
c000c5fa:	85 c0                	test   eax,eax
c000c5fc:	79 1d                	jns    c000c61b <sinc_quad_vari_process+0x11c>
c000c5fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c603:	6a 00                	push   0x0
c000c605:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c609:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c60d:	e8 3d 88 01 00       	call   c0024e4f <__ltdf2>
c000c612:	83 c4 10             	add    esp,0x10
c000c615:	85 c0                	test   eax,eax
c000c617:	78 2c                	js     c000c645 <sinc_quad_vari_process+0x146>
c000c619:	eb 4a                	jmp    c000c665 <sinc_quad_vari_process+0x166>
c000c61b:	68 00 00 f0 3f       	push   0x3ff00000
c000c620:	6a 00                	push   0x0
c000c622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62a:	e8 20 88 01 00       	call   c0024e4f <__ltdf2>
c000c62f:	83 c4 10             	add    esp,0x10
c000c632:	85 c0                	test   eax,eax
c000c634:	79 2f                	jns    c000c665 <sinc_quad_vari_process+0x166>
c000c636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c63a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c63e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c641:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c645:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c649:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c64d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c651:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c655:	e8 0a 82 01 00       	call   c0024864 <__divdf3>
c000c65a:	83 c4 10             	add    esp,0x10
c000c65d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c661:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c665:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c668:	50                   	push   eax
c000c669:	50                   	push   eax
c000c66a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c672:	e8 89 89 01 00       	call   c0025000 <lrint>
c000c677:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c67a:	40                   	inc    eax
c000c67b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c67f:	0f af c7             	imul   eax,edi
c000c682:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c68d:	58                   	pop    eax
c000c68e:	5a                   	pop    edx
c000c68f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c693:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c697:	e8 99 f0 ff ff       	call   c000b735 <fmod_one>
c000c69c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c69f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c6a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c6aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6be:	e8 91 7e 01 00       	call   c0024554 <__subdf3>
c000c6c3:	83 c4 18             	add    esp,0x18
c000c6c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6ce:	52                   	push   edx
c000c6cf:	50                   	push   eax
c000c6d0:	e8 2b 89 01 00       	call   c0025000 <lrint>
c000c6d5:	0f af f8             	imul   edi,eax
c000c6d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6dc:	01 f8                	add    eax,edi
c000c6de:	99                   	cdq    
c000c6df:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6e2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6ed:	68 00 00 f0 3f       	push   0x3ff00000
c000c6f2:	6a 00                	push   0x0
c000c6f4:	e8 6b 81 01 00       	call   c0024864 <__divdf3>
c000c6f9:	83 c4 10             	add    esp,0x10
c000c6fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c700:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c704:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c709:	68 23 42 92 0c       	push   0xc924223
c000c70e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c712:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c716:	e8 e8 77 01 00       	call   c0023f03 <__adddf3>
c000c71b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c71f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c723:	83 c4 20             	add    esp,0x20
c000c726:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c72e:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c736:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c739:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c73c:	7d 4e                	jge    c000c78c <sinc_quad_vari_process+0x28d>
c000c73e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c741:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c744:	01 c8                	add    eax,ecx
c000c746:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c749:	99                   	cdq    
c000c74a:	f7 f9                	idiv   ecx
c000c74c:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c750:	7d 0c                	jge    c000c75e <sinc_quad_vari_process+0x25f>
c000c752:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c755:	85 ff                	test   edi,edi
c000c757:	79 69                	jns    c000c7c2 <sinc_quad_vari_process+0x2c3>
c000c759:	e9 e4 00 00 00       	jmp    c000c842 <sinc_quad_vari_process+0x343>
c000c75e:	50                   	push   eax
c000c75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c763:	56                   	push   esi
c000c764:	53                   	push   ebx
c000c765:	e8 61 f0 ff ff       	call   c000b7cb <prepare_data>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c770:	85 c0                	test   eax,eax
c000c772:	0f 85 5d 03 00 00    	jne    c000cad5 <sinc_quad_vari_process+0x5d6>
c000c778:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c77b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c77e:	01 c8                	add    eax,ecx
c000c780:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c783:	99                   	cdq    
c000c784:	f7 f9                	idiv   ecx
c000c786:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c78a:	7c c6                	jl     c000c752 <sinc_quad_vari_process+0x253>
c000c78c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c78f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c793:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c796:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c799:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c79d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c7a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c7a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c7a7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c7aa:	99                   	cdq    
c000c7ab:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7ae:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c7b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c7b4:	99                   	cdq    
c000c7b5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c7b8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c7bb:	31 c0                	xor    eax,eax
c000c7bd:	e9 13 03 00 00       	jmp    c000cad5 <sinc_quad_vari_process+0x5d6>
c000c7c2:	83 ec 0c             	sub    esp,0xc
c000c7c5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7c8:	e8 16 84 01 00       	call   c0024be3 <__floatsidf>
c000c7cd:	83 c4 10             	add    esp,0x10
c000c7d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7dc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e8:	e8 16 77 01 00       	call   c0023f03 <__adddf3>
c000c7ed:	83 c4 10             	add    esp,0x10
c000c7f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c804:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c808:	e8 f6 76 01 00       	call   c0023f03 <__adddf3>
c000c80d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c810:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c814:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c818:	e8 c6 83 01 00       	call   c0024be3 <__floatsidf>
c000c81d:	83 c4 10             	add    esp,0x10
c000c820:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c824:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c828:	52                   	push   edx
c000c829:	50                   	push   eax
c000c82a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c82e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c832:	e8 16 86 01 00       	call   c0024e4d <__gedf2>
c000c837:	83 c4 10             	add    esp,0x10
c000c83a:	85 c0                	test   eax,eax
c000c83c:	0f 89 4a ff ff ff    	jns    c000c78c <sinc_quad_vari_process+0x28d>
c000c842:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c846:	0f 8e ef 00 00 00    	jle    c000c93b <sinc_quad_vari_process+0x43c>
c000c84c:	83 ec 10             	sub    esp,0x10
c000c84f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c852:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c855:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c858:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c85b:	e8 f4 7c 01 00       	call   c0024554 <__subdf3>
c000c860:	83 c4 18             	add    esp,0x18
c000c863:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c867:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c86b:	52                   	push   edx
c000c86c:	50                   	push   eax
c000c86d:	e8 6e 87 01 00       	call   c0024fe0 <fabs>
c000c872:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c876:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c87a:	83 c4 10             	add    esp,0x10
c000c87d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c882:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c887:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c88b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c88f:	e8 9d 85 01 00       	call   c0024e31 <__gtdf2>
c000c894:	83 c4 10             	add    esp,0x10
c000c897:	85 c0                	test   eax,eax
c000c899:	0f 8e 9c 00 00 00    	jle    c000c93b <sinc_quad_vari_process+0x43c>
c000c89f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8a2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c8a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ad:	52                   	push   edx
c000c8ae:	50                   	push   eax
c000c8af:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c8b2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c8b5:	e8 9a 7c 01 00       	call   c0024554 <__subdf3>
c000c8ba:	59                   	pop    ecx
c000c8bb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8bf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8c3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c8c6:	e8 18 83 01 00       	call   c0024be3 <__floatsidf>
c000c8cb:	83 c4 10             	add    esp,0x10
c000c8ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8d6:	52                   	push   edx
c000c8d7:	50                   	push   eax
c000c8d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e0:	e8 9b 7c 01 00       	call   c0024580 <__muldf3>
c000c8e5:	5f                   	pop    edi
c000c8e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8ea:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8ee:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8f1:	e8 ed 82 01 00       	call   c0024be3 <__floatsidf>
c000c8f6:	83 c4 10             	add    esp,0x10
c000c8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c901:	52                   	push   edx
c000c902:	50                   	push   eax
c000c903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c90b:	e8 54 7f 01 00       	call   c0024864 <__divdf3>
c000c910:	83 c4 10             	add    esp,0x10
c000c913:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c917:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c91b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c91f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c923:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c927:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c92b:	e8 d3 75 01 00       	call   c0023f03 <__adddf3>
c000c930:	83 c4 10             	add    esp,0x10
c000c933:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c937:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c93b:	83 ec 0c             	sub    esp,0xc
c000c93e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c941:	e8 9d 82 01 00       	call   c0024be3 <__floatsidf>
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c94d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c951:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c955:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c959:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c95d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c961:	e8 e9 84 01 00       	call   c0024e4f <__ltdf2>
c000c966:	83 c4 10             	add    esp,0x10
c000c969:	85 c0                	test   eax,eax
c000c96b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c96f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c973:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c977:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c97b:	78 10                	js     c000c98d <sinc_quad_vari_process+0x48e>
c000c97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c981:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c985:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c989:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c98d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c995:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c999:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99d:	e8 de 7b 01 00       	call   c0024580 <__muldf3>
c000c9a2:	59                   	pop    ecx
c000c9a3:	5f                   	pop    edi
c000c9a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c9a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c9ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b4:	e8 55 ed ff ff       	call   c000b70e <double_to_fp>
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	89 c7                	mov    edi,eax
c000c9bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9cb:	e8 b0 7b 01 00       	call   c0024580 <__muldf3>
c000c9d0:	83 c4 18             	add    esp,0x18
c000c9d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9d7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	e8 2c ed ff ff       	call   c000b70e <double_to_fp>
c000c9e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9e5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9e9:	83 c4 0c             	add    esp,0xc
c000c9ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9ef:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9f2:	50                   	push   eax
c000c9f3:	50                   	push   eax
c000c9f4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9f7:	e8 e7 81 01 00       	call   c0024be3 <__floatsidf>
c000c9fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca00:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca14:	e8 4b 7e 01 00       	call   c0024864 <__divdf3>
c000ca19:	83 c4 18             	add    esp,0x18
c000ca1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca20:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca24:	52                   	push   edx
c000ca25:	89 fa                	mov    edx,edi
c000ca27:	50                   	push   eax
c000ca28:	89 d8                	mov    eax,ebx
c000ca2a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca2e:	e8 62 d3 ff ff       	call   c0009d95 <calc_output_quad>
c000ca33:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca47:	e8 18 7e 01 00       	call   c0024864 <__divdf3>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca67:	e8 97 74 01 00       	call   c0023f03 <__adddf3>
c000ca6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca74:	83 c4 18             	add    esp,0x18
c000ca77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca7f:	e8 b1 ec ff ff       	call   c000b735 <fmod_one>
c000ca84:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca87:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca8b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca8f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa6:	e8 a9 7a 01 00       	call   c0024554 <__subdf3>
c000caab:	83 c4 18             	add    esp,0x18
c000caae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cab2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab6:	52                   	push   edx
c000cab7:	50                   	push   eax
c000cab8:	e8 43 85 01 00       	call   c0025000 <lrint>
c000cabd:	0f af f8             	imul   edi,eax
c000cac0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cac4:	83 c4 10             	add    esp,0x10
c000cac7:	01 f8                	add    eax,edi
c000cac9:	99                   	cdq    
c000caca:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cacd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cad0:	e9 61 fc ff ff       	jmp    c000c736 <sinc_quad_vari_process+0x237>
c000cad5:	83 c4 4c             	add    esp,0x4c
c000cad8:	5b                   	pop    ebx
c000cad9:	5e                   	pop    esi
c000cada:	5f                   	pop    edi
c000cadb:	5d                   	pop    ebp
c000cadc:	c3                   	ret    

c000cadd <sinc_stereo_vari_process>:
c000cadd:	55                   	push   ebp
c000cade:	b8 05 00 00 00       	mov    eax,0x5
c000cae3:	57                   	push   edi
c000cae4:	56                   	push   esi
c000cae5:	53                   	push   ebx
c000cae6:	83 ec 4c             	sub    esp,0x4c
c000cae9:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000caed:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000caf1:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000caf4:	85 db                	test   ebx,ebx
c000caf6:	0f 84 b7 05 00 00    	je     c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cafc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000caff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cb02:	0f af d0             	imul   edx,eax
c000cb05:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cb08:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000cb0c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cb13:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cb16:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cb1d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb20:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb2b:	57                   	push   edi
c000cb2c:	57                   	push   edi
c000cb2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb35:	e8 7c cb ff ff       	call   c00096b6 <is_bad_src_ratio>
c000cb3a:	83 c4 10             	add    esp,0x10
c000cb3d:	89 c2                	mov    edx,eax
c000cb3f:	b8 16 00 00 00       	mov    eax,0x16
c000cb44:	85 d2                	test   edx,edx
c000cb46:	0f 85 67 05 00 00    	jne    c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cb4c:	83 ec 0c             	sub    esp,0xc
c000cb4f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb52:	e8 8c 80 01 00       	call   c0024be3 <__floatsidf>
c000cb57:	83 c4 10             	add    esp,0x10
c000cb5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb61:	68 00 00 00 40       	push   0x40000000
c000cb66:	6a 00                	push   0x0
c000cb68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb70:	e8 8e 73 01 00       	call   c0023f03 <__adddf3>
c000cb75:	59                   	pop    ecx
c000cb76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb7e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb81:	e8 5d 80 01 00       	call   c0024be3 <__floatsidf>
c000cb86:	83 c4 10             	add    esp,0x10
c000cb89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb8d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb91:	52                   	push   edx
c000cb92:	50                   	push   eax
c000cb93:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb9b:	e8 c4 7c 01 00       	call   c0024864 <__divdf3>
c000cba0:	83 c4 10             	add    esp,0x10
c000cba3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cba7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbb4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cbbb:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cbbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbc2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbcc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbd0:	e8 7a 82 01 00       	call   c0024e4f <__ltdf2>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	85 c0                	test   eax,eax
c000cbda:	79 1d                	jns    c000cbf9 <sinc_stereo_vari_process+0x11c>
c000cbdc:	68 00 00 f0 3f       	push   0x3ff00000
c000cbe1:	6a 00                	push   0x0
c000cbe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbeb:	e8 5f 82 01 00       	call   c0024e4f <__ltdf2>
c000cbf0:	83 c4 10             	add    esp,0x10
c000cbf3:	85 c0                	test   eax,eax
c000cbf5:	78 2c                	js     c000cc23 <sinc_stereo_vari_process+0x146>
c000cbf7:	eb 4a                	jmp    c000cc43 <sinc_stereo_vari_process+0x166>
c000cbf9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbfe:	6a 00                	push   0x0
c000cc00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc08:	e8 42 82 01 00       	call   c0024e4f <__ltdf2>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	85 c0                	test   eax,eax
c000cc12:	79 2f                	jns    c000cc43 <sinc_stereo_vari_process+0x166>
c000cc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cc1c:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc1f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc23:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc27:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc33:	e8 2c 7c 01 00       	call   c0024864 <__divdf3>
c000cc38:	83 c4 10             	add    esp,0x10
c000cc3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc43:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc46:	50                   	push   eax
c000cc47:	50                   	push   eax
c000cc48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc50:	e8 ab 83 01 00       	call   c0025000 <lrint>
c000cc55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc58:	40                   	inc    eax
c000cc59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5d:	0f af c7             	imul   eax,edi
c000cc60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc67:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc6b:	58                   	pop    eax
c000cc6c:	5a                   	pop    edx
c000cc6d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc75:	e8 bb ea ff ff       	call   c000b735 <fmod_one>
c000cc7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc85:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc9c:	e8 b3 78 01 00       	call   c0024554 <__subdf3>
c000cca1:	83 c4 18             	add    esp,0x18
c000cca4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cca8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccac:	52                   	push   edx
c000ccad:	50                   	push   eax
c000ccae:	e8 4d 83 01 00       	call   c0025000 <lrint>
c000ccb3:	0f af f8             	imul   edi,eax
c000ccb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ccba:	01 f8                	add    eax,edi
c000ccbc:	99                   	cdq    
c000ccbd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ccc0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ccc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccb:	68 00 00 f0 3f       	push   0x3ff00000
c000ccd0:	6a 00                	push   0x0
c000ccd2:	e8 8d 7b 01 00       	call   c0024864 <__divdf3>
c000ccd7:	83 c4 10             	add    esp,0x10
c000ccda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cce2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cce7:	68 23 42 92 0c       	push   0xc924223
c000ccec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf4:	e8 0a 72 01 00       	call   c0023f03 <__adddf3>
c000ccf9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccfd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cd01:	83 c4 20             	add    esp,0x20
c000cd04:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000cd0c:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000cd14:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cd17:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cd1a:	7d 4e                	jge    c000cd6a <sinc_stereo_vari_process+0x28d>
c000cd1c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd1f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd22:	01 c8                	add    eax,ecx
c000cd24:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd27:	99                   	cdq    
c000cd28:	f7 f9                	idiv   ecx
c000cd2a:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd2e:	7d 0c                	jge    c000cd3c <sinc_stereo_vari_process+0x25f>
c000cd30:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd33:	85 ff                	test   edi,edi
c000cd35:	79 69                	jns    c000cda0 <sinc_stereo_vari_process+0x2c3>
c000cd37:	e9 e4 00 00 00       	jmp    c000ce20 <sinc_stereo_vari_process+0x343>
c000cd3c:	50                   	push   eax
c000cd3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd41:	56                   	push   esi
c000cd42:	53                   	push   ebx
c000cd43:	e8 83 ea ff ff       	call   c000b7cb <prepare_data>
c000cd48:	83 c4 10             	add    esp,0x10
c000cd4b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd4e:	85 c0                	test   eax,eax
c000cd50:	0f 85 5d 03 00 00    	jne    c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cd56:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd59:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd5c:	01 c8                	add    eax,ecx
c000cd5e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd61:	99                   	cdq    
c000cd62:	f7 f9                	idiv   ecx
c000cd64:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd68:	7c c6                	jl     c000cd30 <sinc_stereo_vari_process+0x253>
c000cd6a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd71:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd74:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd7f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd82:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd85:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd88:	99                   	cdq    
c000cd89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd8c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd8f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd92:	99                   	cdq    
c000cd93:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd96:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd99:	31 c0                	xor    eax,eax
c000cd9b:	e9 13 03 00 00       	jmp    c000d0b3 <sinc_stereo_vari_process+0x5d6>
c000cda0:	83 ec 0c             	sub    esp,0xc
c000cda3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cda6:	e8 38 7e 01 00       	call   c0024be3 <__floatsidf>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cdbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc6:	e8 38 71 01 00       	call   c0023f03 <__adddf3>
c000cdcb:	83 c4 10             	add    esp,0x10
c000cdce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde6:	e8 18 71 01 00       	call   c0023f03 <__adddf3>
c000cdeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdf2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf6:	e8 e8 7d 01 00       	call   c0024be3 <__floatsidf>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce06:	52                   	push   edx
c000ce07:	50                   	push   eax
c000ce08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce10:	e8 38 80 01 00       	call   c0024e4d <__gedf2>
c000ce15:	83 c4 10             	add    esp,0x10
c000ce18:	85 c0                	test   eax,eax
c000ce1a:	0f 89 4a ff ff ff    	jns    c000cd6a <sinc_stereo_vari_process+0x28d>
c000ce20:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000ce24:	0f 8e ef 00 00 00    	jle    c000cf19 <sinc_stereo_vari_process+0x43c>
c000ce2a:	83 ec 10             	sub    esp,0x10
c000ce2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce33:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce36:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce39:	e8 16 77 01 00       	call   c0024554 <__subdf3>
c000ce3e:	83 c4 18             	add    esp,0x18
c000ce41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce49:	52                   	push   edx
c000ce4a:	50                   	push   eax
c000ce4b:	e8 90 81 01 00       	call   c0024fe0 <fabs>
c000ce50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce58:	83 c4 10             	add    esp,0x10
c000ce5b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce60:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce6d:	e8 bf 7f 01 00       	call   c0024e31 <__gtdf2>
c000ce72:	83 c4 10             	add    esp,0x10
c000ce75:	85 c0                	test   eax,eax
c000ce77:	0f 8e 9c 00 00 00    	jle    c000cf19 <sinc_stereo_vari_process+0x43c>
c000ce7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce8b:	52                   	push   edx
c000ce8c:	50                   	push   eax
c000ce8d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce90:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce93:	e8 bc 76 01 00       	call   c0024554 <__subdf3>
c000ce98:	59                   	pop    ecx
c000ce99:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce9d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cea1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cea4:	e8 3a 7d 01 00       	call   c0024be3 <__floatsidf>
c000cea9:	83 c4 10             	add    esp,0x10
c000ceac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb4:	52                   	push   edx
c000ceb5:	50                   	push   eax
c000ceb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cebe:	e8 bd 76 01 00       	call   c0024580 <__muldf3>
c000cec3:	5f                   	pop    edi
c000cec4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cec8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000cecc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cecf:	e8 0f 7d 01 00       	call   c0024be3 <__floatsidf>
c000ced4:	83 c4 10             	add    esp,0x10
c000ced7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cedb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cedf:	52                   	push   edx
c000cee0:	50                   	push   eax
c000cee1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee9:	e8 76 79 01 00       	call   c0024864 <__divdf3>
c000ceee:	83 c4 10             	add    esp,0x10
c000cef1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cef5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cef9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cefd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cf01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf09:	e8 f5 6f 01 00       	call   c0023f03 <__adddf3>
c000cf0e:	83 c4 10             	add    esp,0x10
c000cf11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf19:	83 ec 0c             	sub    esp,0xc
c000cf1c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf1f:	e8 bf 7c 01 00       	call   c0024be3 <__floatsidf>
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3f:	e8 0b 7f 01 00       	call   c0024e4f <__ltdf2>
c000cf44:	83 c4 10             	add    esp,0x10
c000cf47:	85 c0                	test   eax,eax
c000cf49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf51:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf55:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf59:	78 10                	js     c000cf6b <sinc_stereo_vari_process+0x48e>
c000cf5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf5f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf67:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7b:	e8 00 76 01 00       	call   c0024580 <__muldf3>
c000cf80:	59                   	pop    ecx
c000cf81:	5f                   	pop    edi
c000cf82:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf92:	e8 77 e7 ff ff       	call   c000b70e <double_to_fp>
c000cf97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf9b:	89 c7                	mov    edi,eax
c000cf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa9:	e8 d2 75 01 00       	call   c0024580 <__muldf3>
c000cfae:	83 c4 18             	add    esp,0x18
c000cfb1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfb9:	52                   	push   edx
c000cfba:	50                   	push   eax
c000cfbb:	e8 4e e7 ff ff       	call   c000b70e <double_to_fp>
c000cfc0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cfc3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfc7:	83 c4 0c             	add    esp,0xc
c000cfca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfcd:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfd0:	50                   	push   eax
c000cfd1:	50                   	push   eax
c000cfd2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfd5:	e8 09 7c 01 00       	call   c0024be3 <__floatsidf>
c000cfda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfe2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfe6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff2:	e8 6d 78 01 00       	call   c0024864 <__divdf3>
c000cff7:	83 c4 18             	add    esp,0x18
c000cffa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cffe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d002:	52                   	push   edx
c000d003:	89 fa                	mov    edx,edi
c000d005:	50                   	push   eax
c000d006:	89 d8                	mov    eax,ebx
c000d008:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d00c:	e8 a6 c9 ff ff       	call   c00099b7 <calc_output_stereo>
c000d011:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d015:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d01d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d021:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d025:	e8 3a 78 01 00       	call   c0024864 <__divdf3>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d031:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d03d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d041:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d045:	e8 b9 6e 01 00       	call   c0023f03 <__adddf3>
c000d04a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d04e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d052:	83 c4 18             	add    esp,0x18
c000d055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d059:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05d:	e8 d3 e6 ff ff       	call   c000b735 <fmod_one>
c000d062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d069:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d06d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d080:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d084:	e8 cb 74 01 00       	call   c0024554 <__subdf3>
c000d089:	83 c4 18             	add    esp,0x18
c000d08c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d090:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d094:	52                   	push   edx
c000d095:	50                   	push   eax
c000d096:	e8 65 7f 01 00       	call   c0025000 <lrint>
c000d09b:	0f af f8             	imul   edi,eax
c000d09e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	01 f8                	add    eax,edi
c000d0a7:	99                   	cdq    
c000d0a8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0ab:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0ae:	e9 61 fc ff ff       	jmp    c000cd14 <sinc_stereo_vari_process+0x237>
c000d0b3:	83 c4 4c             	add    esp,0x4c
c000d0b6:	5b                   	pop    ebx
c000d0b7:	5e                   	pop    esi
c000d0b8:	5f                   	pop    edi
c000d0b9:	5d                   	pop    ebp
c000d0ba:	c3                   	ret    

c000d0bb <sinc_mono_vari_process>:
c000d0bb:	55                   	push   ebp
c000d0bc:	b8 05 00 00 00       	mov    eax,0x5
c000d0c1:	57                   	push   edi
c000d0c2:	56                   	push   esi
c000d0c3:	53                   	push   ebx
c000d0c4:	83 ec 4c             	sub    esp,0x4c
c000d0c7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0cb:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0cf:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0d2:	85 db                	test   ebx,ebx
c000d0d4:	0f 84 e8 05 00 00    	je     c000d6c2 <sinc_mono_vari_process+0x607>
c000d0da:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0dd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0e0:	0f af d0             	imul   edx,eax
c000d0e3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0e6:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0ea:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0f1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0fb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d101:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d105:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d109:	57                   	push   edi
c000d10a:	57                   	push   edi
c000d10b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d10f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d113:	e8 9e c5 ff ff       	call   c00096b6 <is_bad_src_ratio>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	89 c2                	mov    edx,eax
c000d11d:	b8 16 00 00 00       	mov    eax,0x16
c000d122:	85 d2                	test   edx,edx
c000d124:	0f 85 98 05 00 00    	jne    c000d6c2 <sinc_mono_vari_process+0x607>
c000d12a:	83 ec 0c             	sub    esp,0xc
c000d12d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d130:	e8 ae 7a 01 00       	call   c0024be3 <__floatsidf>
c000d135:	83 c4 10             	add    esp,0x10
c000d138:	89 04 24             	mov    DWORD PTR [esp],eax
c000d13b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d13f:	68 00 00 00 40       	push   0x40000000
c000d144:	6a 00                	push   0x0
c000d146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d14a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d14e:	e8 b0 6d 01 00       	call   c0023f03 <__adddf3>
c000d153:	59                   	pop    ecx
c000d154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d15c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d15f:	e8 7f 7a 01 00       	call   c0024be3 <__floatsidf>
c000d164:	83 c4 10             	add    esp,0x10
c000d167:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d16b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d16f:	52                   	push   edx
c000d170:	50                   	push   eax
c000d171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d179:	e8 e6 76 01 00       	call   c0024864 <__divdf3>
c000d17e:	83 c4 10             	add    esp,0x10
c000d181:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d185:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d189:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d18c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d18f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d192:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d196:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d199:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d19c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1a4:	52                   	push   edx
c000d1a5:	50                   	push   eax
c000d1a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1ae:	e8 9c 7c 01 00       	call   c0024e4f <__ltdf2>
c000d1b3:	83 c4 10             	add    esp,0x10
c000d1b6:	85 c0                	test   eax,eax
c000d1b8:	79 1d                	jns    c000d1d7 <sinc_mono_vari_process+0x11c>
c000d1ba:	68 00 00 f0 3f       	push   0x3ff00000
c000d1bf:	6a 00                	push   0x0
c000d1c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1c9:	e8 81 7c 01 00       	call   c0024e4f <__ltdf2>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	85 c0                	test   eax,eax
c000d1d3:	78 2c                	js     c000d201 <sinc_mono_vari_process+0x146>
c000d1d5:	eb 4a                	jmp    c000d221 <sinc_mono_vari_process+0x166>
c000d1d7:	68 00 00 f0 3f       	push   0x3ff00000
c000d1dc:	6a 00                	push   0x0
c000d1de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1e6:	e8 64 7c 01 00       	call   c0024e4f <__ltdf2>
c000d1eb:	83 c4 10             	add    esp,0x10
c000d1ee:	85 c0                	test   eax,eax
c000d1f0:	79 2f                	jns    c000d221 <sinc_mono_vari_process+0x166>
c000d1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d201:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d205:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d209:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d20d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d211:	e8 4e 76 01 00       	call   c0024864 <__divdf3>
c000d216:	83 c4 10             	add    esp,0x10
c000d219:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d21d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d221:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d224:	50                   	push   eax
c000d225:	50                   	push   eax
c000d226:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	e8 cd 7d 01 00       	call   c0025000 <lrint>
c000d233:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d236:	40                   	inc    eax
c000d237:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d23b:	0f af c7             	imul   eax,edi
c000d23e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d245:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d249:	58                   	pop    eax
c000d24a:	5a                   	pop    edx
c000d24b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d24f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d253:	e8 dd e4 ff ff       	call   c000b735 <fmod_one>
c000d258:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d25b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d25f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d263:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d266:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d26e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d272:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d276:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d27a:	e8 d5 72 01 00       	call   c0024554 <__subdf3>
c000d27f:	83 c4 18             	add    esp,0x18
c000d282:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d286:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d28a:	52                   	push   edx
c000d28b:	50                   	push   eax
c000d28c:	e8 6f 7d 01 00       	call   c0025000 <lrint>
c000d291:	0f af f8             	imul   edi,eax
c000d294:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d298:	01 f8                	add    eax,edi
c000d29a:	99                   	cdq    
c000d29b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d29e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a9:	68 00 00 f0 3f       	push   0x3ff00000
c000d2ae:	6a 00                	push   0x0
c000d2b0:	e8 af 75 01 00       	call   c0024864 <__divdf3>
c000d2b5:	83 c4 10             	add    esp,0x10
c000d2b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2c0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d2c5:	68 23 42 92 0c       	push   0xc924223
c000d2ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2d2:	e8 2c 6c 01 00       	call   c0023f03 <__adddf3>
c000d2d7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2db:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2df:	83 c4 20             	add    esp,0x20
c000d2e2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2ea:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2f5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2f8:	7d 4e                	jge    c000d348 <sinc_mono_vari_process+0x28d>
c000d2fa:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2fd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d300:	01 c8                	add    eax,ecx
c000d302:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d305:	99                   	cdq    
c000d306:	f7 f9                	idiv   ecx
c000d308:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d30c:	7d 0c                	jge    c000d31a <sinc_mono_vari_process+0x25f>
c000d30e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d311:	85 ff                	test   edi,edi
c000d313:	79 69                	jns    c000d37e <sinc_mono_vari_process+0x2c3>
c000d315:	e9 e4 00 00 00       	jmp    c000d3fe <sinc_mono_vari_process+0x343>
c000d31a:	57                   	push   edi
c000d31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d31f:	56                   	push   esi
c000d320:	53                   	push   ebx
c000d321:	e8 a5 e4 ff ff       	call   c000b7cb <prepare_data>
c000d326:	83 c4 10             	add    esp,0x10
c000d329:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d32c:	85 c0                	test   eax,eax
c000d32e:	0f 85 8e 03 00 00    	jne    c000d6c2 <sinc_mono_vari_process+0x607>
c000d334:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d337:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d33a:	01 c8                	add    eax,ecx
c000d33c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d33f:	99                   	cdq    
c000d340:	f7 f9                	idiv   ecx
c000d342:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d346:	7c c6                	jl     c000d30e <sinc_mono_vari_process+0x253>
c000d348:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d34b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d34f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d352:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d355:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d359:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d35d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d360:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d363:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d366:	99                   	cdq    
c000d367:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d36a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d36d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d370:	99                   	cdq    
c000d371:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d374:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d377:	31 c0                	xor    eax,eax
c000d379:	e9 44 03 00 00       	jmp    c000d6c2 <sinc_mono_vari_process+0x607>
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d384:	e8 5a 78 01 00       	call   c0024be3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d390:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d394:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d398:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d39c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a4:	e8 5a 6b 01 00       	call   c0023f03 <__adddf3>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d3b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d3b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c4:	e8 3a 6b 01 00       	call   c0023f03 <__adddf3>
c000d3c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3d4:	e8 0a 78 01 00       	call   c0024be3 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ee:	e8 3e 7a 01 00       	call   c0024e31 <__gtdf2>
c000d3f3:	83 c4 10             	add    esp,0x10
c000d3f6:	85 c0                	test   eax,eax
c000d3f8:	0f 8f 4a ff ff ff    	jg     c000d348 <sinc_mono_vari_process+0x28d>
c000d3fe:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d402:	0f 8e ef 00 00 00    	jle    c000d4f7 <sinc_mono_vari_process+0x43c>
c000d408:	83 ec 10             	sub    esp,0x10
c000d40b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d40e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d411:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d414:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d417:	e8 38 71 01 00       	call   c0024554 <__subdf3>
c000d41c:	83 c4 18             	add    esp,0x18
c000d41f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d423:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d427:	52                   	push   edx
c000d428:	50                   	push   eax
c000d429:	e8 b2 7b 01 00       	call   c0024fe0 <fabs>
c000d42e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d432:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d436:	83 c4 10             	add    esp,0x10
c000d439:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d43e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d447:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d44b:	e8 e1 79 01 00       	call   c0024e31 <__gtdf2>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	85 c0                	test   eax,eax
c000d455:	0f 8e 9c 00 00 00    	jle    c000d4f7 <sinc_mono_vari_process+0x43c>
c000d45b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d45e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d461:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d465:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d469:	52                   	push   edx
c000d46a:	50                   	push   eax
c000d46b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d46e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d471:	e8 de 70 01 00       	call   c0024554 <__subdf3>
c000d476:	5f                   	pop    edi
c000d477:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d47b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d47f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d482:	e8 5c 77 01 00       	call   c0024be3 <__floatsidf>
c000d487:	83 c4 10             	add    esp,0x10
c000d48a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d48e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d492:	52                   	push   edx
c000d493:	50                   	push   eax
c000d494:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d498:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49c:	e8 df 70 01 00       	call   c0024580 <__muldf3>
c000d4a1:	59                   	pop    ecx
c000d4a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d4a6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d4aa:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d4ad:	e8 31 77 01 00       	call   c0024be3 <__floatsidf>
c000d4b2:	83 c4 10             	add    esp,0x10
c000d4b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4bd:	52                   	push   edx
c000d4be:	50                   	push   eax
c000d4bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c7:	e8 98 73 01 00       	call   c0024864 <__divdf3>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e7:	e8 17 6a 01 00       	call   c0023f03 <__adddf3>
c000d4ec:	83 c4 10             	add    esp,0x10
c000d4ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f7:	83 ec 0c             	sub    esp,0xc
c000d4fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4fd:	e8 e1 76 01 00       	call   c0024be3 <__floatsidf>
c000d502:	83 c4 10             	add    esp,0x10
c000d505:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d509:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d50d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d511:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 2d 79 01 00       	call   c0024e4f <__ltdf2>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	85 c0                	test   eax,eax
c000d527:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d52b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d52f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d533:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d537:	78 10                	js     c000d549 <sinc_mono_vari_process+0x48e>
c000d539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d541:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d549:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d551:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d555:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d559:	e8 22 70 01 00       	call   c0024580 <__muldf3>
c000d55e:	59                   	pop    ecx
c000d55f:	5f                   	pop    edi
c000d560:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d564:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d568:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d56c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d570:	e8 99 e1 ff ff       	call   c000b70e <double_to_fp>
c000d575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d579:	89 c7                	mov    edi,eax
c000d57b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d587:	e8 f4 6f 01 00       	call   c0024580 <__muldf3>
c000d58c:	83 c4 18             	add    esp,0x18
c000d58f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d593:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d597:	52                   	push   edx
c000d598:	50                   	push   eax
c000d599:	e8 70 e1 ff ff       	call   c000b70e <double_to_fp>
c000d59e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d5a2:	83 ec 0c             	sub    esp,0xc
c000d5a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d5a8:	e8 36 76 01 00       	call   c0024be3 <__floatsidf>
c000d5ad:	83 c4 10             	add    esp,0x10
c000d5b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5b8:	52                   	push   edx
c000d5b9:	50                   	push   eax
c000d5ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c2:	e8 9d 72 01 00       	call   c0024864 <__divdf3>
c000d5c7:	83 c4 10             	add    esp,0x10
c000d5ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5d6:	89 d8                	mov    eax,ebx
c000d5d8:	89 fa                	mov    edx,edi
c000d5da:	e8 7c c1 ff ff       	call   c000975b <calc_output_single>
c000d5df:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5e2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ed:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5f1:	52                   	push   edx
c000d5f2:	50                   	push   eax
c000d5f3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5fb:	e8 80 6f 01 00       	call   c0024580 <__muldf3>
c000d600:	59                   	pop    ecx
c000d601:	59                   	pop    ecx
c000d602:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d606:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d60a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d60e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d612:	e8 3c 78 01 00       	call   c0024e53 <__truncdfsf2>
c000d617:	83 c4 10             	add    esp,0x10
c000d61a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d61e:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d621:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d630:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d634:	e8 2b 72 01 00       	call   c0024864 <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d650:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d654:	e8 aa 68 01 00       	call   c0023f03 <__adddf3>
c000d659:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d65d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d661:	83 c4 18             	add    esp,0x18
c000d664:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d668:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d66c:	e8 c4 e0 ff ff       	call   c000b735 <fmod_one>
c000d671:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d674:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d678:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d67c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d67f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d68b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d693:	e8 bc 6e 01 00       	call   c0024554 <__subdf3>
c000d698:	83 c4 18             	add    esp,0x18
c000d69b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d69f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d6a3:	52                   	push   edx
c000d6a4:	50                   	push   eax
c000d6a5:	e8 56 79 01 00       	call   c0025000 <lrint>
c000d6aa:	0f af f8             	imul   edi,eax
c000d6ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6b1:	83 c4 10             	add    esp,0x10
c000d6b4:	01 f8                	add    eax,edi
c000d6b6:	99                   	cdq    
c000d6b7:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d6ba:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d6bd:	e9 30 fc ff ff       	jmp    c000d2f2 <sinc_mono_vari_process+0x237>
c000d6c2:	83 c4 4c             	add    esp,0x4c
c000d6c5:	5b                   	pop    ebx
c000d6c6:	5e                   	pop    esi
c000d6c7:	5f                   	pop    edi
c000d6c8:	5d                   	pop    ebp
c000d6c9:	c3                   	ret    

c000d6ca <sinc_get_name>:
c000d6ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6ce:	31 c0                	xor    eax,eax
c000d6d0:	83 fa 02             	cmp    edx,0x2
c000d6d3:	77 07                	ja     c000d6dc <sinc_get_name+0x12>
c000d6d5:	8b 04 95 e4 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd981c]
c000d6dc:	c3                   	ret    

c000d6dd <sinc_get_description>:
c000d6dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6e1:	31 c0                	xor    eax,eax
c000d6e3:	83 fa 02             	cmp    edx,0x2
c000d6e6:	77 07                	ja     c000d6ef <sinc_get_description+0x12>
c000d6e8:	8b 04 95 d8 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9828]
c000d6ef:	c3                   	ret    

c000d6f0 <sinc_set_converter>:
c000d6f0:	53                   	push   ebx
c000d6f1:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6f7:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6fe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d701:	85 c0                	test   eax,eax
c000d703:	74 13                	je     c000d718 <sinc_set_converter+0x28>
c000d705:	83 ec 0c             	sub    esp,0xc
c000d708:	50                   	push   eax
c000d709:	e8 68 1a 00 00       	call   c000f176 <free>
c000d70e:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d715:	83 c4 10             	add    esp,0x10
c000d718:	50                   	push   eax
c000d719:	68 44 08 00 00       	push   0x844
c000d71e:	6a 00                	push   0x0
c000d720:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d724:	50                   	push   eax
c000d725:	e8 c2 2f ff ff       	call   c00006ec <memset>
c000d72a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d72d:	83 c4 10             	add    esp,0x10
c000d730:	b8 0b 00 00 00       	mov    eax,0xb
c000d735:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d73b:	7f 6e                	jg     c000d7ab <sinc_set_converter+0xbb>
c000d73d:	83 fa 01             	cmp    edx,0x1
c000d740:	75 10                	jne    c000d752 <sinc_set_converter+0x62>
c000d742:	c7 43 24 bb d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d0bb
c000d749:	c7 43 20 bb d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d0bb
c000d750:	eb 4d                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d752:	83 fa 02             	cmp    edx,0x2
c000d755:	75 10                	jne    c000d767 <sinc_set_converter+0x77>
c000d757:	c7 43 24 dd ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cadd
c000d75e:	c7 43 20 dd ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cadd
c000d765:	eb 38                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d767:	83 fa 04             	cmp    edx,0x4
c000d76a:	75 10                	jne    c000d77c <sinc_set_converter+0x8c>
c000d76c:	c7 43 24 ff c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4ff
c000d773:	c7 43 20 ff c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4ff
c000d77a:	eb 23                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d77c:	83 fa 06             	cmp    edx,0x6
c000d77f:	75 10                	jne    c000d791 <sinc_set_converter+0xa1>
c000d781:	c7 43 24 21 bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf21
c000d788:	c7 43 20 21 bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf21
c000d78f:	eb 0e                	jmp    c000d79f <sinc_set_converter+0xaf>
c000d791:	c7 43 24 45 b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b945
c000d798:	c7 43 20 45 b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b945
c000d79f:	c7 43 28 62 ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab62
c000d7a6:	b8 0a 00 00 00       	mov    eax,0xa
c000d7ab:	81 c4 58 08 00 00    	add    esp,0x858
c000d7b1:	5b                   	pop    ebx
c000d7b2:	c3                   	ret    

c000d7b3 <is_bad_src_ratio>:
c000d7b3:	83 ec 1c             	sub    esp,0x1c
c000d7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d7c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7c6:	b8 00 00 00 00       	mov    eax,0x0
c000d7cb:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7d0:	52                   	push   edx
c000d7d1:	50                   	push   eax
c000d7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7da:	e8 70 76 01 00       	call   c0024e4f <__ltdf2>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	85 c0                	test   eax,eax
c000d7e4:	78 20                	js     c000d806 <is_bad_src_ratio+0x53>
c000d7e6:	b8 00 00 00 00       	mov    eax,0x0
c000d7eb:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7f0:	52                   	push   edx
c000d7f1:	50                   	push   eax
c000d7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7fa:	e8 32 76 01 00       	call   c0024e31 <__gtdf2>
c000d7ff:	83 c4 10             	add    esp,0x10
c000d802:	85 c0                	test   eax,eax
c000d804:	7e 07                	jle    c000d80d <is_bad_src_ratio+0x5a>
c000d806:	b8 01 00 00 00       	mov    eax,0x1
c000d80b:	eb 05                	jmp    c000d812 <is_bad_src_ratio+0x5f>
c000d80d:	b8 00 00 00 00       	mov    eax,0x0
c000d812:	83 c4 1c             	add    esp,0x1c
c000d815:	c3                   	ret    

c000d816 <fmod_one>:
c000d816:	83 ec 2c             	sub    esp,0x2c
c000d819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d81d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d821:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d825:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d829:	83 ec 08             	sub    esp,0x8
c000d82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d834:	e8 c7 77 01 00       	call   c0025000 <lrint>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	83 ec 0c             	sub    esp,0xc
c000d83f:	50                   	push   eax
c000d840:	e8 9e 73 01 00       	call   c0024be3 <__floatsidf>
c000d845:	83 c4 10             	add    esp,0x10
c000d848:	52                   	push   edx
c000d849:	50                   	push   eax
c000d84a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d84e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d852:	e8 fd 6c 01 00       	call   c0024554 <__subdf3>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d85e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d862:	b8 00 00 00 00       	mov    eax,0x0
c000d867:	ba 00 00 00 00       	mov    edx,0x0
c000d86c:	52                   	push   edx
c000d86d:	50                   	push   eax
c000d86e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d872:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d876:	e8 d4 75 01 00       	call   c0024e4f <__ltdf2>
c000d87b:	83 c4 10             	add    esp,0x10
c000d87e:	85 c0                	test   eax,eax
c000d880:	79 1e                	jns    c000d8a0 <fmod_one+0x8a>
c000d882:	b8 00 00 00 00       	mov    eax,0x0
c000d887:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d88c:	52                   	push   edx
c000d88d:	50                   	push   eax
c000d88e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d892:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d896:	e8 68 66 01 00       	call   c0023f03 <__adddf3>
c000d89b:	83 c4 10             	add    esp,0x10
c000d89e:	eb 08                	jmp    c000d8a8 <fmod_one+0x92>
c000d8a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d8a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d8a8:	83 c4 2c             	add    esp,0x2c
c000d8ab:	c3                   	ret    

c000d8ac <zoh_vari_process>:
c000d8ac:	55                   	push   ebp
c000d8ad:	57                   	push   edi
c000d8ae:	56                   	push   esi
c000d8af:	53                   	push   ebx
c000d8b0:	83 ec 3c             	sub    esp,0x3c
c000d8b3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d8b7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d8bb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d8c3:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8c7:	0f 8e a9 05 00 00    	jle    c000de76 <zoh_vari_process+0x5ca>
c000d8cd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8d0:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8d8:	85 db                	test   ebx,ebx
c000d8da:	0f 84 96 05 00 00    	je     c000de76 <zoh_vari_process+0x5ca>
c000d8e0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8e3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8e7:	74 19                	je     c000d902 <zoh_vari_process+0x56>
c000d8e9:	31 d2                	xor    edx,edx
c000d8eb:	39 c2                	cmp    edx,eax
c000d8ed:	7d 0c                	jge    c000d8fb <zoh_vari_process+0x4f>
c000d8ef:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8f1:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8f4:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8f8:	42                   	inc    edx
c000d8f9:	eb f0                	jmp    c000d8eb <zoh_vari_process+0x3f>
c000d8fb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d902:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d905:	0f af d0             	imul   edx,eax
c000d908:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d90b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d90f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d916:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d919:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d920:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d923:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d926:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d92a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d92e:	57                   	push   edi
c000d92f:	57                   	push   edi
c000d930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d938:	e8 76 fe ff ff       	call   c000d7b3 <is_bad_src_ratio>
c000d93d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d941:	83 c4 10             	add    esp,0x10
c000d944:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d949:	0f 85 1f 05 00 00    	jne    c000de6e <zoh_vari_process+0x5c2>
c000d94f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d952:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d955:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d959:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d95d:	68 00 00 f0 3f       	push   0x3ff00000
c000d962:	6a 00                	push   0x0
c000d964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96c:	e8 de 74 01 00       	call   c0024e4f <__ltdf2>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	85 c0                	test   eax,eax
c000d976:	0f 89 dc 01 00 00    	jns    c000db58 <zoh_vari_process+0x2ac>
c000d97c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d97f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d982:	0f 8d d0 01 00 00    	jge    c000db58 <zoh_vari_process+0x2ac>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d98e:	e8 50 72 01 00       	call   c0024be3 <__floatsidf>
c000d993:	83 c4 10             	add    esp,0x10
c000d996:	89 04 24             	mov    DWORD PTR [esp],eax
c000d999:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d99d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ad:	e8 ce 6b 01 00       	call   c0024580 <__muldf3>
c000d9b2:	59                   	pop    ecx
c000d9b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9bb:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9be:	e8 20 72 01 00       	call   c0024be3 <__floatsidf>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9ce:	52                   	push   edx
c000d9cf:	50                   	push   eax
c000d9d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9d8:	e8 26 65 01 00       	call   c0023f03 <__adddf3>
c000d9dd:	59                   	pop    ecx
c000d9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9e2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9e6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9e9:	e8 f5 71 01 00       	call   c0024be3 <__floatsidf>
c000d9ee:	83 c4 10             	add    esp,0x10
c000d9f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9f9:	52                   	push   edx
c000d9fa:	50                   	push   eax
c000d9fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da03:	e8 45 74 01 00       	call   c0024e4d <__gedf2>
c000da08:	83 c4 10             	add    esp,0x10
c000da0b:	85 c0                	test   eax,eax
c000da0d:	0f 89 45 01 00 00    	jns    c000db58 <zoh_vari_process+0x2ac>
c000da13:	85 ff                	test   edi,edi
c000da15:	0f 8e ee 00 00 00    	jle    c000db09 <zoh_vari_process+0x25d>
c000da1b:	83 ec 10             	sub    esp,0x10
c000da1e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da21:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da24:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da27:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da2a:	e8 25 6b 01 00       	call   c0024554 <__subdf3>
c000da2f:	83 c4 18             	add    esp,0x18
c000da32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da3a:	52                   	push   edx
c000da3b:	50                   	push   eax
c000da3c:	e8 9f 75 01 00       	call   c0024fe0 <fabs>
c000da41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da45:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da51:	68 23 42 92 0c       	push   0xc924223
c000da56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da5e:	e8 ce 73 01 00       	call   c0024e31 <__gtdf2>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	85 c0                	test   eax,eax
c000da68:	0f 8e 9b 00 00 00    	jle    c000db09 <zoh_vari_process+0x25d>
c000da6e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da71:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da74:	89 04 24             	mov    DWORD PTR [esp],eax
c000da77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da7b:	52                   	push   edx
c000da7c:	50                   	push   eax
c000da7d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da80:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da83:	e8 cc 6a 01 00       	call   c0024554 <__subdf3>
c000da88:	59                   	pop    ecx
c000da89:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da8d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da91:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da94:	e8 4a 71 01 00       	call   c0024be3 <__floatsidf>
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000daa4:	52                   	push   edx
c000daa5:	50                   	push   eax
c000daa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daae:	e8 cd 6a 01 00       	call   c0024580 <__muldf3>
c000dab3:	5f                   	pop    edi
c000dab4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dab8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dabc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dabf:	e8 1f 71 01 00       	call   c0024be3 <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dacb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad9:	e8 86 6d 01 00       	call   c0024864 <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dae5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daed:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000daf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daf9:	e8 05 64 01 00       	call   c0023f03 <__adddf3>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db09:	31 c0                	xor    eax,eax
c000db0b:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000db0e:	7e 13                	jle    c000db23 <zoh_vari_process+0x277>
c000db10:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000db14:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000db17:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000db1a:	40                   	inc    eax
c000db1b:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000db1e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000db21:	eb e8                	jmp    c000db0b <zoh_vari_process+0x25f>
c000db23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db2b:	68 00 00 f0 3f       	push   0x3ff00000
c000db30:	6a 00                	push   0x0
c000db32:	e8 2d 6d 01 00       	call   c0024864 <__divdf3>
c000db37:	83 c4 10             	add    esp,0x10
c000db3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000db3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db41:	52                   	push   edx
c000db42:	50                   	push   eax
c000db43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4b:	e8 b3 63 01 00       	call   c0023f03 <__adddf3>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	e9 fd fd ff ff       	jmp    c000d955 <zoh_vari_process+0xa9>
c000db58:	57                   	push   edi
c000db59:	57                   	push   edi
c000db5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db62:	e8 af fc ff ff       	call   c000d816 <fmod_one>
c000db67:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db6e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db82:	e8 cd 69 01 00       	call   c0024554 <__subdf3>
c000db87:	83 c4 18             	add    esp,0x18
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	e8 67 74 01 00       	call   c0025000 <lrint>
c000db99:	83 c4 10             	add    esp,0x10
c000db9c:	0f af f8             	imul   edi,eax
c000db9f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000dba2:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000dba5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000dba9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000dbac:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000dbaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbb3:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dbb6:	0f 8d 1d 02 00 00    	jge    c000ddd9 <zoh_vari_process+0x52d>
c000dbbc:	83 ec 0c             	sub    esp,0xc
c000dbbf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbc2:	e8 1c 70 01 00       	call   c0024be3 <__floatsidf>
c000dbc7:	83 c4 10             	add    esp,0x10
c000dbca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbd2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbd6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbe2:	e8 99 69 01 00       	call   c0024580 <__muldf3>
c000dbe7:	59                   	pop    ecx
c000dbe8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbec:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf4:	e8 ea 6f 01 00       	call   c0024be3 <__floatsidf>
c000dbf9:	83 c4 10             	add    esp,0x10
c000dbfc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc00:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc04:	52                   	push   edx
c000dc05:	50                   	push   eax
c000dc06:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc0e:	e8 f0 62 01 00       	call   c0023f03 <__adddf3>
c000dc13:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc1e:	e8 c0 6f 01 00       	call   c0024be3 <__floatsidf>
c000dc23:	83 c4 10             	add    esp,0x10
c000dc26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc2e:	52                   	push   edx
c000dc2f:	50                   	push   eax
c000dc30:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc34:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc38:	e8 14 72 01 00       	call   c0024e51 <__ledf2>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	85 c0                	test   eax,eax
c000dc42:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc46:	0f 8f 8d 01 00 00    	jg     c000ddd9 <zoh_vari_process+0x52d>
c000dc4c:	85 c9                	test   ecx,ecx
c000dc4e:	0f 8e ef 00 00 00    	jle    c000dd43 <zoh_vari_process+0x497>
c000dc54:	83 ec 10             	sub    esp,0x10
c000dc57:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc5a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc63:	e8 ec 68 01 00       	call   c0024554 <__subdf3>
c000dc68:	83 c4 18             	add    esp,0x18
c000dc6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc73:	52                   	push   edx
c000dc74:	50                   	push   eax
c000dc75:	e8 66 73 01 00       	call   c0024fe0 <fabs>
c000dc7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc82:	83 c4 10             	add    esp,0x10
c000dc85:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc8a:	68 23 42 92 0c       	push   0xc924223
c000dc8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc97:	e8 95 71 01 00       	call   c0024e31 <__gtdf2>
c000dc9c:	83 c4 10             	add    esp,0x10
c000dc9f:	85 c0                	test   eax,eax
c000dca1:	0f 8e 9c 00 00 00    	jle    c000dd43 <zoh_vari_process+0x497>
c000dca7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dcaa:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dcad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb5:	52                   	push   edx
c000dcb6:	50                   	push   eax
c000dcb7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcba:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcbd:	e8 92 68 01 00       	call   c0024554 <__subdf3>
c000dcc2:	5f                   	pop    edi
c000dcc3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcc7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dccb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcce:	e8 10 6f 01 00       	call   c0024be3 <__floatsidf>
c000dcd3:	83 c4 10             	add    esp,0x10
c000dcd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcde:	52                   	push   edx
c000dcdf:	50                   	push   eax
c000dce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce8:	e8 93 68 01 00       	call   c0024580 <__muldf3>
c000dced:	59                   	pop    ecx
c000dcee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcf2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcf6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcf9:	e8 e5 6e 01 00       	call   c0024be3 <__floatsidf>
c000dcfe:	83 c4 10             	add    esp,0x10
c000dd01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd05:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd09:	52                   	push   edx
c000dd0a:	50                   	push   eax
c000dd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd13:	e8 4c 6b 01 00       	call   c0024864 <__divdf3>
c000dd18:	83 c4 10             	add    esp,0x10
c000dd1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd33:	e8 cb 61 01 00       	call   c0023f03 <__adddf3>
c000dd38:	83 c4 10             	add    esp,0x10
c000dd3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd43:	31 c0                	xor    eax,eax
c000dd45:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd48:	39 c2                	cmp    edx,eax
c000dd4a:	7e 1d                	jle    c000dd69 <zoh_vari_process+0x4bd>
c000dd4c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd4f:	29 d1                	sub    ecx,edx
c000dd51:	89 ca                	mov    edx,ecx
c000dd53:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd55:	01 c2                	add    edx,eax
c000dd57:	40                   	inc    eax
c000dd58:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd5b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd5e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd61:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd64:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd67:	eb dc                	jmp    c000dd45 <zoh_vari_process+0x499>
c000dd69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd71:	68 00 00 f0 3f       	push   0x3ff00000
c000dd76:	6a 00                	push   0x0
c000dd78:	e8 e7 6a 01 00       	call   c0024864 <__divdf3>
c000dd7d:	83 c4 10             	add    esp,0x10
c000dd80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd84:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd8c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd98:	e8 66 61 01 00       	call   c0023f03 <__adddf3>
c000dd9d:	5f                   	pop    edi
c000dd9e:	59                   	pop    ecx
c000dd9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dda3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dda7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddaf:	e8 62 fa ff ff       	call   c000d816 <fmod_one>
c000ddb4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ddb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcf:	e8 80 67 01 00       	call   c0024554 <__subdf3>
c000ddd4:	e9 ae fd ff ff       	jmp    c000db87 <zoh_vari_process+0x2db>
c000ddd9:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000dddd:	7d 3a                	jge    c000de19 <zoh_vari_process+0x56d>
c000dddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde3:	83 ec 0c             	sub    esp,0xc
c000dde6:	29 f8                	sub    eax,edi
c000dde8:	99                   	cdq    
c000dde9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddec:	50                   	push   eax
c000dded:	e8 f1 6d 01 00       	call   c0024be3 <__floatsidf>
c000ddf2:	83 c4 10             	add    esp,0x10
c000ddf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddf9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddfd:	52                   	push   edx
c000ddfe:	50                   	push   eax
c000ddff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de07:	e8 f7 60 01 00       	call   c0023f03 <__adddf3>
c000de0c:	83 c4 10             	add    esp,0x10
c000de0f:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000de12:	89 04 24             	mov    DWORD PTR [esp],eax
c000de15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000de1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de20:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000de23:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000de26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de29:	85 c0                	test   eax,eax
c000de2b:	7f 24                	jg     c000de51 <zoh_vari_process+0x5a5>
c000de2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de35:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de38:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de3b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de3e:	99                   	cdq    
c000de3f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de42:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de45:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de48:	99                   	cdq    
c000de49:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de4c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de4f:	eb 25                	jmp    c000de76 <zoh_vari_process+0x5ca>
c000de51:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de54:	31 d2                	xor    edx,edx
c000de56:	29 c8                	sub    eax,ecx
c000de58:	c1 e0 02             	shl    eax,0x2
c000de5b:	39 d1                	cmp    ecx,edx
c000de5d:	7e ce                	jle    c000de2d <zoh_vari_process+0x581>
c000de5f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de61:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de64:	83 c0 04             	add    eax,0x4
c000de67:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de6b:	42                   	inc    edx
c000de6c:	eb ed                	jmp    c000de5b <zoh_vari_process+0x5af>
c000de6e:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de7a:	83 c4 3c             	add    esp,0x3c
c000de7d:	5b                   	pop    ebx
c000de7e:	5e                   	pop    esi
c000de7f:	5f                   	pop    edi
c000de80:	5d                   	pop    ebp
c000de81:	c3                   	ret    

c000de82 <zoh_reset>:
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de89:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de8c:	85 c0                	test   eax,eax
c000de8e:	74 20                	je     c000deb0 <zoh_reset+0x2e>
c000de90:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de93:	83 c0 1c             	add    eax,0x1c
c000de96:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de99:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000dea0:	c1 e2 02             	shl    edx,0x2
c000dea3:	51                   	push   ecx
c000dea4:	52                   	push   edx
c000dea5:	6a 00                	push   0x0
c000dea7:	50                   	push   eax
c000dea8:	e8 3f 28 ff ff       	call   c00006ec <memset>
c000dead:	83 c4 10             	add    esp,0x10
c000deb0:	83 c4 0c             	add    esp,0xc
c000deb3:	c3                   	ret    

c000deb4 <zoh_get_name>:
c000deb4:	31 c0                	xor    eax,eax
c000deb6:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000debb:	75 05                	jne    c000dec2 <zoh_get_name+0xe>
c000debd:	b8 fe 68 02 c0       	mov    eax,0xc00268fe
c000dec2:	c3                   	ret    

c000dec3 <zoh_get_description>:
c000dec3:	31 c0                	xor    eax,eax
c000dec5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000deca:	75 05                	jne    c000ded1 <zoh_get_description+0xe>
c000decc:	b8 0f 69 02 c0       	mov    eax,0xc002690f
c000ded1:	c3                   	ret    

c000ded2 <zoh_set_converter>:
c000ded2:	53                   	push   ebx
c000ded3:	b8 0a 00 00 00       	mov    eax,0xa
c000ded8:	83 ec 08             	sub    esp,0x8
c000dedb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dedf:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000dee4:	75 6e                	jne    c000df54 <zoh_set_converter+0x82>
c000dee6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dee9:	85 c0                	test   eax,eax
c000deeb:	74 13                	je     c000df00 <zoh_set_converter+0x2e>
c000deed:	83 ec 0c             	sub    esp,0xc
c000def0:	50                   	push   eax
c000def1:	e8 80 12 00 00       	call   c000f176 <free>
c000def6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	50                   	push   eax
c000df01:	50                   	push   eax
c000df02:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df05:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000df0c:	50                   	push   eax
c000df0d:	6a 01                	push   0x1
c000df0f:	e8 82 12 00 00       	call   c000f196 <calloc>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	89 c2                	mov    edx,eax
c000df19:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000df1c:	85 d2                	test   edx,edx
c000df1e:	b8 01 00 00 00       	mov    eax,0x1
c000df23:	74 2f                	je     c000df54 <zoh_set_converter+0x82>
c000df25:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df2e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df34:	c7 43 24 ac d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d8ac
c000df3b:	c7 43 20 ac d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d8ac
c000df42:	c7 43 28 82 de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de82
c000df49:	53                   	push   ebx
c000df4a:	e8 33 ff ff ff       	call   c000de82 <zoh_reset>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	31 c0                	xor    eax,eax
c000df54:	83 c4 08             	add    esp,0x8
c000df57:	5b                   	pop    ebx
c000df58:	c3                   	ret    
c000df59:	90                   	nop

c000df5a <Computer::close(int, int, void*)>:
c000df5a:	57                   	push   edi
c000df5b:	56                   	push   esi
c000df5c:	53                   	push   ebx
c000df5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df65:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df69:	83 ec 0c             	sub    esp,0xc
c000df6c:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df72:	e8 61 58 00 00       	call   c00137d8 <Device::closeAll()>
c000df77:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	8b 10                	mov    edx,DWORD PTR [eax]
c000df82:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df86:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df8e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df96:	5b                   	pop    ebx
c000df97:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df9a:	5e                   	pop    esi
c000df9b:	5f                   	pop    edi
c000df9c:	ff e0                	jmp    eax

c000df9e <Computer::Computer()>:
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa5:	83 ec 08             	sub    esp,0x8
c000dfa8:	68 46 69 02 c0       	push   0xc0026946
c000dfad:	50                   	push   eax
c000dfae:	e8 9f 58 00 00       	call   c0013852 <Device::Device(char const*)>
c000dfb3:	83 c4 10             	add    esp,0x10
c000dfb6:	ba 10 6b 02 c0       	mov    edx,0xc0026b10
c000dfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbf:	89 10                	mov    DWORD PTR [eax],edx
c000dfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfe7:	83 ca 04             	or     edx,0x4
c000dfea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dffa:	0f b6 d0             	movzx  edx,al
c000dffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e001:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e012:	0f b6 d0             	movzx  edx,al
c000e015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e019:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e022:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e028:	8d 50 01             	lea    edx,[eax+0x1]
c000e02b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e02f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e035:	0f b6 d0             	movzx  edx,al
c000e038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e03c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e040:	83 e1 3f             	and    ecx,0x3f
c000e043:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e051:	0f b6 d0             	movzx  edx,al
c000e054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e058:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e063:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e069:	0f b6 d0             	movzx  edx,al
c000e06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e070:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e079:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e07f:	8d 50 01             	lea    edx,[eax+0x1]
c000e082:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e086:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e08c:	0f b6 d0             	movzx  edx,al
c000e08f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e093:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e097:	83 e1 3f             	and    ecx,0x3f
c000e09a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0a8:	0f b6 d0             	movzx  edx,al
c000e0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0af:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0c0:	0f b6 d0             	movzx  edx,al
c000e0c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0c7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e0d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0dd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0e3:	0f b6 d0             	movzx  edx,al
c000e0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0ee:	83 e1 3f             	and    ecx,0x3f
c000e0f1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0f5:	90                   	nop
c000e0f6:	83 c4 0c             	add    esp,0xc
c000e0f9:	c3                   	ret    

c000e0fa <Computer::setBootMessage(char const*)>:
c000e0fa:	c3                   	ret    
c000e0fb:	90                   	nop

c000e0fc <Computer::start()>:
c000e0fc:	56                   	push   esi
c000e0fd:	53                   	push   ebx
c000e0fe:	50                   	push   eax
c000e0ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e103:	e8 50 e7 00 00       	call   c001c858 <lockScheduler()>
c000e108:	e8 7f ea 00 00       	call   c001cb8c <schedule()>
c000e10d:	e8 48 e7 00 00       	call   c001c85a <unlockScheduler()>
c000e112:	fb                   	sti    
c000e113:	83 ec 0c             	sub    esp,0xc
c000e116:	68 3b 07 00 00       	push   0x73b
c000e11b:	e8 48 40 00 00       	call   c0012168 <operator new(unsigned long)>
c000e120:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e127:	89 c6                	mov    esi,eax
c000e129:	ff 35 b4 b8 02 c0    	push   DWORD PTR ds:0xc002b8b4
c000e12f:	68 4f 69 02 c0       	push   0xc002694f
c000e134:	6a 01                	push   0x1
c000e136:	50                   	push   eax
c000e137:	e8 7c e5 00 00       	call   c001c6b8 <Process::Process(bool, char const*, Process*, char**)>
c000e13c:	83 c4 20             	add    esp,0x20
c000e13f:	68 ff 00 00 00       	push   0xff
c000e144:	6a 00                	push   0x0
c000e146:	68 f3 ea 00 c0       	push   0xc000eaf3
c000e14b:	56                   	push   esi
c000e14c:	e8 31 e8 00 00       	call   c001c982 <Process::createThread(void (*)(void*), void*, int)>
c000e151:	6a 7a                	push   0x7a
c000e153:	6a 00                	push   0x0
c000e155:	68 bb d1 01 c0       	push   0xc001d1bb
c000e15a:	ff 35 b4 b8 02 c0    	push   DWORD PTR ds:0xc002b8b4
c000e160:	e8 1d e8 00 00       	call   c001c982 <Process::createThread(void (*)(void*), void*, int)>
c000e165:	83 c4 20             	add    esp,0x20
c000e168:	a3 68 b8 02 c0       	mov    ds:0xc002b868,eax
c000e16d:	c6 05 0d a4 02 c0 01 	mov    BYTE PTR ds:0xc002a40d,0x1
c000e174:	e8 39 44 00 00       	call   c00125b2 <initVFS()>
c000e179:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e17f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e181:	6a 00                	push   0x0
c000e183:	6a 00                	push   0x0
c000e185:	6a 00                	push   0x0
c000e187:	50                   	push   eax
c000e188:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e18b:	e8 25 cf 00 00       	call   c001b0b5 <setupSystemCalls()>
c000e190:	e8 1b 4f 00 00       	call   c00130b0 <loadClockSettings()>
c000e195:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e198:	e8 0f 56 00 00       	call   c00137ac <Device::loadDriversForAll()>
c000e19d:	5a                   	pop    edx
c000e19e:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c000e1a4:	59                   	pop    ecx
c000e1a5:	6a 01                	push   0x1
c000e1a7:	68 5c 69 02 c0       	push   0xc002695c
c000e1ac:	e8 d6 e0 00 00       	call   c001c287 <Thr::loadDLL(char const*, bool)>
c000e1b1:	5e                   	pop    esi
c000e1b2:	5a                   	pop    edx
c000e1b3:	53                   	push   ebx
c000e1b4:	50                   	push   eax
c000e1b5:	e8 93 e2 00 00       	call   c001c44d <Thr::executeDLL(unsigned long, void*)>
c000e1ba:	c7 04 24 cc 7a 02 c0 	mov    DWORD PTR [esp],0xc0027acc
c000e1c1:	e8 91 40 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	83 ec 0c             	sub    esp,0xc
c000e1cc:	6a 02                	push   0x2
c000e1ce:	e8 13 eb 00 00       	call   c001cce6 <blockTask(TaskState)>
c000e1d3:	83 c4 10             	add    esp,0x10
c000e1d6:	eb f1                	jmp    c000e1c9 <Computer::start()+0xcd>

c000e1d8 <firstTask()>:
c000e1d8:	83 ec 18             	sub    esp,0x18
c000e1db:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000e1e1:	e8 16 ff ff ff       	call   c000e0fc <Computer::start()>

c000e1e6 <Computer::detectFeatures()>:
c000e1e6:	55                   	push   ebp
c000e1e7:	57                   	push   edi
c000e1e8:	56                   	push   esi
c000e1e9:	53                   	push   ebx
c000e1ea:	83 ec 1c             	sub    esp,0x1c
c000e1ed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1f1:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1fb:	e8 a3 21 ff ff       	call   c00003a3 <detectCPUID>
c000e200:	85 c0                	test   eax,eax
c000e202:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e208:	0f 95 c2             	setne  dl
c000e20b:	83 e0 fd             	and    eax,0xfffffffd
c000e20e:	d1 e2                	shl    edx,1
c000e210:	09 d0                	or     eax,edx
c000e212:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e218:	a8 02                	test   al,0x2
c000e21a:	75 46                	jne    c000e262 <Computer::detectFeatures()+0x7c>
c000e21c:	f6 05 21 a4 02 c0 04 	test   BYTE PTR ds:0xc002a421,0x4
c000e223:	74 07                	je     c000e22c <Computer::detectFeatures()+0x46>
c000e225:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e22c:	e8 15 4e 01 00       	call   c0023046 <x87Detect>
c000e231:	83 e0 01             	and    eax,0x1
c000e234:	c1 e0 04             	shl    eax,0x4
c000e237:	88 c2                	mov    dl,al
c000e239:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e23f:	83 e0 ef             	and    eax,0xffffffef
c000e242:	09 d0                	or     eax,edx
c000e244:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e24a:	a8 10                	test   al,0x10
c000e24c:	0f 85 10 01 00 00    	jne    c000e362 <Computer::detectFeatures()+0x17c>
c000e252:	84 c0                	test   al,al
c000e254:	0f 88 2b 01 00 00    	js     c000e385 <Computer::detectFeatures()+0x19f>
c000e25a:	83 c4 1c             	add    esp,0x1c
c000e25d:	5b                   	pop    ebx
c000e25e:	5e                   	pop    esi
c000e25f:	5f                   	pop    edi
c000e260:	5d                   	pop    ebp
c000e261:	c3                   	ret    
c000e262:	83 ec 0c             	sub    esp,0xc
c000e265:	6a 20                	push   0x20
c000e267:	e8 61 95 00 00       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c000e26c:	83 e0 01             	and    eax,0x1
c000e26f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e276:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e27c:	83 e0 f7             	and    eax,0xfffffff7
c000e27f:	09 d0                	or     eax,edx
c000e281:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e287:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e28e:	e8 3a 95 00 00       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c000e293:	83 e0 01             	and    eax,0x1
c000e296:	88 c2                	mov    dl,al
c000e298:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e29e:	83 e0 fe             	and    eax,0xfffffffe
c000e2a1:	09 d0                	or     eax,edx
c000e2a3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2a9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e2b0:	e8 18 95 00 00       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c000e2b5:	c1 e0 07             	shl    eax,0x7
c000e2b8:	88 c2                	mov    dl,al
c000e2ba:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e2c0:	83 e0 7f             	and    eax,0x7f
c000e2c3:	09 d0                	or     eax,edx
c000e2c5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2cb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2d2:	e8 f6 94 00 00       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 e0 01             	and    eax,0x1
c000e2dd:	c1 e0 05             	shl    eax,0x5
c000e2e0:	88 c2                	mov    dl,al
c000e2e2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2e8:	83 e0 df             	and    eax,0xffffffdf
c000e2eb:	09 d0                	or     eax,edx
c000e2ed:	f7 05 20 a4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a420,0x401
c000e2f7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2fd:	0f 84 a8 00 00 00    	je     c000e3ab <Computer::detectFeatures()+0x1c5>
c000e303:	83 ec 0c             	sub    esp,0xc
c000e306:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000e30d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e311:	50                   	push   eax
c000e312:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e316:	55                   	push   ebp
c000e317:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e31b:	57                   	push   edi
c000e31c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e320:	56                   	push   esi
c000e321:	68 00 00 00 80       	push   0x80000000
c000e326:	e8 1f 94 00 00       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e32b:	83 c4 20             	add    esp,0x20
c000e32e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e335:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e339:	0f 86 dd fe ff ff    	jbe    c000e21c <Computer::detectFeatures()+0x36>
c000e33f:	83 ec 0c             	sub    esp,0xc
c000e342:	50                   	push   eax
c000e343:	55                   	push   ebp
c000e344:	57                   	push   edi
c000e345:	56                   	push   esi
c000e346:	68 01 00 00 80       	push   0x80000001
c000e34b:	e8 fa 93 00 00       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e350:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e35a:	83 c4 20             	add    esp,0x20
c000e35d:	e9 ba fe ff ff       	jmp    c000e21c <Computer::detectFeatures()+0x36>
c000e362:	e8 99 4c 01 00       	call   c0023000 <sseDetect>
c000e367:	88 c2                	mov    dl,al
c000e369:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e36f:	c1 e2 07             	shl    edx,0x7
c000e372:	83 e0 7f             	and    eax,0x7f
c000e375:	09 d0                	or     eax,edx
c000e377:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e37d:	84 c0                	test   al,al
c000e37f:	0f 89 d5 fe ff ff    	jns    c000e25a <Computer::detectFeatures()+0x74>
c000e385:	e8 66 4c 01 00       	call   c0022ff0 <avxDetect>
c000e38a:	83 e0 01             	and    eax,0x1
c000e38d:	c1 e0 05             	shl    eax,0x5
c000e390:	88 c2                	mov    dl,al
c000e392:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e398:	83 e0 df             	and    eax,0xffffffdf
c000e39b:	09 d0                	or     eax,edx
c000e39d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e3a3:	83 c4 1c             	add    esp,0x1c
c000e3a6:	5b                   	pop    ebx
c000e3a7:	5e                   	pop    esi
c000e3a8:	5f                   	pop    edi
c000e3a9:	5d                   	pop    ebp
c000e3aa:	c3                   	ret    
c000e3ab:	83 ec 0c             	sub    esp,0xc
c000e3ae:	68 00 02 00 00       	push   0x200
c000e3b3:	e8 15 94 00 00       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c000e3b8:	83 c4 10             	add    esp,0x10
c000e3bb:	e9 43 ff ff ff       	jmp    c000e303 <Computer::detectFeatures()+0x11d>

c000e3c0 <Computer::displayFeatures()>:
c000e3c0:	53                   	push   ebx
c000e3c1:	83 ec 14             	sub    esp,0x14
c000e3c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3c8:	68 7f 69 02 c0       	push   0xc002697f
c000e3cd:	e8 85 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e3d2:	83 c4 10             	add    esp,0x10
c000e3d5:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3dc:	0f 85 73 02 00 00    	jne    c000e655 <Computer::displayFeatures()+0x295>
c000e3e2:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e3e7:	83 ec 08             	sub    esp,0x8
c000e3ea:	50                   	push   eax
c000e3eb:	68 92 69 02 c0       	push   0xc0026992
c000e3f0:	e8 62 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e3f5:	83 c4 10             	add    esp,0x10
c000e3f8:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3ff:	0f 85 8c 02 00 00    	jne    c000e691 <Computer::displayFeatures()+0x2d1>
c000e405:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e40a:	83 ec 08             	sub    esp,0x8
c000e40d:	50                   	push   eax
c000e40e:	68 a3 69 02 c0       	push   0xc00269a3
c000e413:	e8 3f 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e418:	83 c4 10             	add    esp,0x10
c000e41b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e422:	0f 85 5f 02 00 00    	jne    c000e687 <Computer::displayFeatures()+0x2c7>
c000e428:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e42d:	83 ec 08             	sub    esp,0x8
c000e430:	50                   	push   eax
c000e431:	68 b4 69 02 c0       	push   0xc00269b4
c000e436:	e8 1c 3e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e445:	0f 85 32 02 00 00    	jne    c000e67d <Computer::displayFeatures()+0x2bd>
c000e44b:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e450:	83 ec 08             	sub    esp,0x8
c000e453:	50                   	push   eax
c000e454:	68 c5 69 02 c0       	push   0xc00269c5
c000e459:	e8 f9 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e45e:	83 c4 10             	add    esp,0x10
c000e461:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e468:	0f 85 05 02 00 00    	jne    c000e673 <Computer::displayFeatures()+0x2b3>
c000e46e:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e473:	83 ec 08             	sub    esp,0x8
c000e476:	50                   	push   eax
c000e477:	68 d6 69 02 c0       	push   0xc00269d6
c000e47c:	e8 d6 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e481:	83 c4 10             	add    esp,0x10
c000e484:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e48b:	0f 85 d8 01 00 00    	jne    c000e669 <Computer::displayFeatures()+0x2a9>
c000e491:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e496:	83 ec 08             	sub    esp,0x8
c000e499:	50                   	push   eax
c000e49a:	68 e7 69 02 c0       	push   0xc00269e7
c000e49f:	e8 b3 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e4a4:	83 c4 10             	add    esp,0x10
c000e4a7:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e4ae:	0f 85 ab 01 00 00    	jne    c000e65f <Computer::displayFeatures()+0x29f>
c000e4b4:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4b9:	83 ec 08             	sub    esp,0x8
c000e4bc:	50                   	push   eax
c000e4bd:	68 f8 69 02 c0       	push   0xc00269f8
c000e4c2:	e8 90 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e4c7:	83 c4 10             	add    esp,0x10
c000e4ca:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4d1:	0f 88 1b 02 00 00    	js     c000e6f2 <Computer::displayFeatures()+0x332>
c000e4d7:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4dc:	83 ec 08             	sub    esp,0x8
c000e4df:	50                   	push   eax
c000e4e0:	68 09 6a 02 c0       	push   0xc0026a09
c000e4e5:	e8 6d 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e4ea:	83 c4 10             	add    esp,0x10
c000e4ed:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4f4:	0f 85 a1 01 00 00    	jne    c000e69b <Computer::displayFeatures()+0x2db>
c000e4fa:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e4ff:	83 ec 08             	sub    esp,0x8
c000e502:	50                   	push   eax
c000e503:	68 1a 6a 02 c0       	push   0xc0026a1a
c000e508:	e8 4a 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e50d:	83 c4 10             	add    esp,0x10
c000e510:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e517:	0f 85 cb 01 00 00    	jne    c000e6e8 <Computer::displayFeatures()+0x328>
c000e51d:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e522:	83 ec 08             	sub    esp,0x8
c000e525:	50                   	push   eax
c000e526:	68 2b 6a 02 c0       	push   0xc0026a2b
c000e52b:	e8 27 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e53a:	0f 85 9e 01 00 00    	jne    c000e6de <Computer::displayFeatures()+0x31e>
c000e540:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e545:	83 ec 08             	sub    esp,0x8
c000e548:	50                   	push   eax
c000e549:	68 3c 6a 02 c0       	push   0xc0026a3c
c000e54e:	e8 04 3d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e55d:	0f 85 71 01 00 00    	jne    c000e6d4 <Computer::displayFeatures()+0x314>
c000e563:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e568:	83 ec 08             	sub    esp,0x8
c000e56b:	50                   	push   eax
c000e56c:	68 4d 6a 02 c0       	push   0xc0026a4d
c000e571:	e8 e1 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e580:	0f 85 44 01 00 00    	jne    c000e6ca <Computer::displayFeatures()+0x30a>
c000e586:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e58b:	83 ec 08             	sub    esp,0x8
c000e58e:	50                   	push   eax
c000e58f:	68 5e 6a 02 c0       	push   0xc0026a5e
c000e594:	e8 be 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e599:	83 c4 10             	add    esp,0x10
c000e59c:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e5a3:	0f 85 17 01 00 00    	jne    c000e6c0 <Computer::displayFeatures()+0x300>
c000e5a9:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5ae:	83 ec 08             	sub    esp,0x8
c000e5b1:	50                   	push   eax
c000e5b2:	68 6f 6a 02 c0       	push   0xc0026a6f
c000e5b7:	e8 9b 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e5bc:	83 c4 10             	add    esp,0x10
c000e5bf:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5c6:	0f 85 ea 00 00 00    	jne    c000e6b6 <Computer::displayFeatures()+0x2f6>
c000e5cc:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5d1:	83 ec 08             	sub    esp,0x8
c000e5d4:	50                   	push   eax
c000e5d5:	68 80 6a 02 c0       	push   0xc0026a80
c000e5da:	e8 78 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e5df:	83 c4 10             	add    esp,0x10
c000e5e2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5e9:	0f 88 0d 01 00 00    	js     c000e6fc <Computer::displayFeatures()+0x33c>
c000e5ef:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e5f4:	83 ec 08             	sub    esp,0x8
c000e5f7:	50                   	push   eax
c000e5f8:	68 91 6a 02 c0       	push   0xc0026a91
c000e5fd:	e8 55 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e602:	83 c4 10             	add    esp,0x10
c000e605:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e60c:	0f 85 9a 00 00 00    	jne    c000e6ac <Computer::displayFeatures()+0x2ec>
c000e612:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e617:	83 ec 08             	sub    esp,0x8
c000e61a:	50                   	push   eax
c000e61b:	68 a2 6a 02 c0       	push   0xc0026aa2
c000e620:	e8 32 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e625:	83 c4 10             	add    esp,0x10
c000e628:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e62f:	75 74                	jne    c000e6a5 <Computer::displayFeatures()+0x2e5>
c000e631:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e636:	83 ec 08             	sub    esp,0x8
c000e639:	50                   	push   eax
c000e63a:	68 b3 6a 02 c0       	push   0xc0026ab3
c000e63f:	e8 13 3c 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e644:	c7 44 24 20 1e 81 02 c0 	mov    DWORD PTR [esp+0x20],0xc002811e
c000e64c:	83 c4 18             	add    esp,0x18
c000e64f:	5b                   	pop    ebx
c000e650:	e9 02 3c 00 00       	jmp    c0012257 <Dbg::kprintf(char const*, ...)>
c000e655:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e65a:	e9 88 fd ff ff       	jmp    c000e3e7 <Computer::displayFeatures()+0x27>
c000e65f:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e664:	e9 50 fe ff ff       	jmp    c000e4b9 <Computer::displayFeatures()+0xf9>
c000e669:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e66e:	e9 23 fe ff ff       	jmp    c000e496 <Computer::displayFeatures()+0xd6>
c000e673:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e678:	e9 f6 fd ff ff       	jmp    c000e473 <Computer::displayFeatures()+0xb3>
c000e67d:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e682:	e9 c9 fd ff ff       	jmp    c000e450 <Computer::displayFeatures()+0x90>
c000e687:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e68c:	e9 9c fd ff ff       	jmp    c000e42d <Computer::displayFeatures()+0x6d>
c000e691:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e696:	e9 6f fd ff ff       	jmp    c000e40a <Computer::displayFeatures()+0x4a>
c000e69b:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6a0:	e9 5a fe ff ff       	jmp    c000e4ff <Computer::displayFeatures()+0x13f>
c000e6a5:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6aa:	eb 8a                	jmp    c000e636 <Computer::displayFeatures()+0x276>
c000e6ac:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6b1:	e9 61 ff ff ff       	jmp    c000e617 <Computer::displayFeatures()+0x257>
c000e6b6:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6bb:	e9 11 ff ff ff       	jmp    c000e5d1 <Computer::displayFeatures()+0x211>
c000e6c0:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6c5:	e9 e4 fe ff ff       	jmp    c000e5ae <Computer::displayFeatures()+0x1ee>
c000e6ca:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6cf:	e9 b7 fe ff ff       	jmp    c000e58b <Computer::displayFeatures()+0x1cb>
c000e6d4:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6d9:	e9 8a fe ff ff       	jmp    c000e568 <Computer::displayFeatures()+0x1a8>
c000e6de:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6e3:	e9 5d fe ff ff       	jmp    c000e545 <Computer::displayFeatures()+0x185>
c000e6e8:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6ed:	e9 30 fe ff ff       	jmp    c000e522 <Computer::displayFeatures()+0x162>
c000e6f2:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e6f7:	e9 e0 fd ff ff       	jmp    c000e4dc <Computer::displayFeatures()+0x11c>
c000e6fc:	b8 78 69 02 c0       	mov    eax,0xc0026978
c000e701:	e9 ee fe ff ff       	jmp    c000e5f4 <Computer::displayFeatures()+0x234>

c000e706 <Computer::rdmsr(unsigned int)>:
c000e706:	83 ec 0c             	sub    esp,0xc
c000e709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e70d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e714:	74 0a                	je     c000e720 <Computer::rdmsr(unsigned int)+0x1a>
c000e716:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e71a:	0f 32                	rdmsr  
c000e71c:	83 c4 0c             	add    esp,0xc
c000e71f:	c3                   	ret    
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	68 c4 6a 02 c0       	push   0xc0026ac4
c000e728:	e8 d7 b1 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000e72d:	83 c4 10             	add    esp,0x10
c000e730:	eb e4                	jmp    c000e716 <Computer::rdmsr(unsigned int)+0x10>

c000e732 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e732:	57                   	push   edi
c000e733:	56                   	push   esi
c000e734:	52                   	push   edx
c000e735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e739:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e73d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e741:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e748:	74 0e                	je     c000e758 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e74a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e74e:	89 f0                	mov    eax,esi
c000e750:	89 fa                	mov    edx,edi
c000e752:	0f 30                	wrmsr  
c000e754:	58                   	pop    eax
c000e755:	5e                   	pop    esi
c000e756:	5f                   	pop    edi
c000e757:	c3                   	ret    
c000e758:	83 ec 0c             	sub    esp,0xc
c000e75b:	68 ca 6a 02 c0       	push   0xc0026aca
c000e760:	e8 9f b1 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000e765:	83 c4 10             	add    esp,0x10
c000e768:	eb e0                	jmp    c000e74a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e76a <Computer::nmiEnabled()>:
c000e76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e76e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e774:	c3                   	ret    
c000e775:	90                   	nop

c000e776 <Computer::readCMOS(unsigned char)>:
c000e776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e77a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e781:	19 c0                	sbb    eax,eax
c000e783:	83 e0 80             	and    eax,0xffffff80
c000e786:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e78a:	e6 70                	out    0x70,al
c000e78c:	e4 71                	in     al,0x71
c000e78e:	c3                   	ret    
c000e78f:	90                   	nop

c000e790 <Computer::enableNMI(bool)>:
c000e790:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e798:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e79e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e7a6:	eb ce                	jmp    c000e776 <Computer::readCMOS(unsigned char)>

c000e7a8 <Computer::open(int, int, void*)>:
c000e7a8:	56                   	push   esi
c000e7a9:	53                   	push   ebx
c000e7aa:	83 ec 10             	sub    esp,0x10
c000e7ad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7b1:	f6 05 20 a4 02 c0 04 	test   BYTE PTR ds:0xc002a420,0x4
c000e7b8:	68 68 22 00 00       	push   0x2268
c000e7bd:	0f 94 05 c0 93 02 c0 	sete   BYTE PTR ds:0xc00293c0
c000e7c4:	e8 9f 39 00 00       	call   c0012168 <operator new(unsigned long)>
c000e7c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7cc:	89 c6                	mov    esi,eax
c000e7ce:	e8 3b 86 00 00       	call   c0016e0e <ACPI::ACPI()>
c000e7d3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7d9:	58                   	pop    eax
c000e7da:	5a                   	pop    edx
c000e7db:	56                   	push   esi
c000e7dc:	53                   	push   ebx
c000e7dd:	e8 80 4e 00 00       	call   c0013662 <Device::addChild(Device*)>
c000e7e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7e5:	e8 fc f9 ff ff       	call   c000e1e6 <Computer::detectFeatures()>
c000e7ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7ed:	e8 ce fb ff ff       	call   c000e3c0 <Computer::displayFeatures()>
c000e7f2:	59                   	pop    ecx
c000e7f3:	5e                   	pop    esi
c000e7f4:	6a 01                	push   0x1
c000e7f6:	53                   	push   ebx
c000e7f7:	e8 94 ff ff ff       	call   c000e790 <Computer::enableNMI(bool)>
c000e7fc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e803:	e8 60 39 00 00       	call   c0012168 <operator new(unsigned long)>
c000e808:	89 04 24             	mov    DWORD PTR [esp],eax
c000e80b:	89 c6                	mov    esi,eax
c000e80d:	e8 86 90 00 00       	call   c0017898 <CPU::CPU()>
c000e812:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e818:	58                   	pop    eax
c000e819:	5a                   	pop    edx
c000e81a:	56                   	push   esi
c000e81b:	53                   	push   ebx
c000e81c:	e8 41 4e 00 00       	call   c0013662 <Device::addChild(Device*)>
c000e821:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e827:	8b 10                	mov    edx,DWORD PTR [eax]
c000e829:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e82d:	6a 00                	push   0x0
c000e82f:	6a 00                	push   0x0
c000e831:	50                   	push   eax
c000e832:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e835:	83 c4 20             	add    esp,0x20
c000e838:	e8 8d 53 00 00       	call   c0013bca <setupFPU()>
c000e83d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e843:	85 c0                	test   eax,eax
c000e845:	74 1f                	je     c000e866 <Computer::open(int, int, void*)+0xbe>
c000e847:	83 ec 08             	sub    esp,0x8
c000e84a:	50                   	push   eax
c000e84b:	53                   	push   ebx
c000e84c:	e8 11 4e 00 00       	call   c0013662 <Device::addChild(Device*)>
c000e851:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e857:	8b 10                	mov    edx,DWORD PTR [eax]
c000e859:	6a 00                	push   0x0
c000e85b:	6a 00                	push   0x0
c000e85d:	6a 00                	push   0x0
c000e85f:	50                   	push   eax
c000e860:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e863:	83 c4 20             	add    esp,0x20
c000e866:	83 ec 0c             	sub    esp,0xc
c000e869:	68 d8 e1 00 c0       	push   0xc000e1d8
c000e86e:	e8 0f e2 00 00       	call   c001ca82 <setupMultitasking(void (*)())>
c000e873:	83 c4 14             	add    esp,0x14
c000e876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e87b:	5b                   	pop    ebx
c000e87c:	5e                   	pop    esi
c000e87d:	c3                   	ret    

c000e87e <Computer::disableNMI()>:
c000e87e:	6a 00                	push   0x0
c000e880:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e884:	e8 07 ff ff ff       	call   c000e790 <Computer::enableNMI(bool)>
c000e889:	58                   	pop    eax
c000e88a:	5a                   	pop    edx
c000e88b:	c3                   	ret    

c000e88c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e890:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e897:	19 c0                	sbb    eax,eax
c000e899:	83 e0 80             	and    eax,0xffffff80
c000e89c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e8a0:	e6 70                	out    0x70,al
c000e8a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a6:	e6 71                	out    0x71,al
c000e8a8:	c3                   	ret    
c000e8a9:	90                   	nop

c000e8aa <Computer::handleNMI()>:
c000e8aa:	56                   	push   esi
c000e8ab:	53                   	push   ebx
c000e8ac:	83 ec 10             	sub    esp,0x10
c000e8af:	e4 92                	in     al,0x92
c000e8b1:	89 c6                	mov    esi,eax
c000e8b3:	e4 61                	in     al,0x61
c000e8b5:	68 d0 6a 02 c0       	push   0xc0026ad0
c000e8ba:	88 c3                	mov    bl,al
c000e8bc:	e8 96 39 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e8c1:	83 c4 10             	add    esp,0x10
c000e8c4:	83 e6 10             	and    esi,0x10
c000e8c7:	75 0d                	jne    c000e8d6 <Computer::handleNMI()+0x2c>
c000e8c9:	f6 c3 40             	test   bl,0x40
c000e8cc:	75 1d                	jne    c000e8eb <Computer::handleNMI()+0x41>
c000e8ce:	84 db                	test   bl,bl
c000e8d0:	78 2d                	js     c000e8ff <Computer::handleNMI()+0x55>
c000e8d2:	58                   	pop    eax
c000e8d3:	5b                   	pop    ebx
c000e8d4:	5e                   	pop    esi
c000e8d5:	c3                   	ret    
c000e8d6:	83 ec 0c             	sub    esp,0xc
c000e8d9:	68 e1 6a 02 c0       	push   0xc0026ae1
c000e8de:	e8 21 b0 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000e8e3:	83 c4 10             	add    esp,0x10
c000e8e6:	f6 c3 40             	test   bl,0x40
c000e8e9:	74 e3                	je     c000e8ce <Computer::handleNMI()+0x24>
c000e8eb:	83 ec 0c             	sub    esp,0xc
c000e8ee:	68 ee 6a 02 c0       	push   0xc0026aee
c000e8f3:	e8 0c b0 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000e8f8:	83 c4 10             	add    esp,0x10
c000e8fb:	84 db                	test   bl,bl
c000e8fd:	79 d3                	jns    c000e8d2 <Computer::handleNMI()+0x28>
c000e8ff:	c7 44 24 10 f8 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026af8
c000e907:	5a                   	pop    edx
c000e908:	5b                   	pop    ebx
c000e909:	5e                   	pop    esi
c000e90a:	e9 f5 af 00 00       	jmp    c0019904 <Krnl::panic(char const*)>
c000e90f:	90                   	nop

c000e910 <Computer::setDiskActivityLight(int, bool)>:
c000e910:	56                   	push   esi
c000e911:	53                   	push   ebx
c000e912:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e916:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e91b:	77 1b                	ja     c000e938 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e91d:	e4 92                	in     al,0x92
c000e91f:	bb 40 00 00 00       	mov    ebx,0x40
c000e924:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e928:	89 da                	mov    edx,ebx
c000e92a:	d3 e2                	shl    edx,cl
c000e92c:	89 f1                	mov    ecx,esi
c000e92e:	f7 d2                	not    edx
c000e930:	d3 e3                	shl    ebx,cl
c000e932:	21 d0                	and    eax,edx
c000e934:	09 d8                	or     eax,ebx
c000e936:	e6 92                	out    0x92,al
c000e938:	5b                   	pop    ebx
c000e939:	5e                   	pop    esi
c000e93a:	c3                   	ret    
c000e93b:	90                   	nop

c000e93c <GDTEntry::setBase(unsigned int)>:
c000e93c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e940:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e944:	89 c1                	mov    ecx,eax
c000e946:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e94a:	c1 e9 10             	shr    ecx,0x10
c000e94d:	c1 e8 18             	shr    eax,0x18
c000e950:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e953:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e956:	c3                   	ret    
c000e957:	90                   	nop

c000e958 <GDTEntry::setLimit(unsigned int)>:
c000e958:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e95c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e960:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e963:	66 89 01             	mov    WORD PTR [ecx],ax
c000e966:	83 e2 f0             	and    edx,0xfffffff0
c000e969:	c1 e8 10             	shr    eax,0x10
c000e96c:	83 e0 0f             	and    eax,0xf
c000e96f:	09 d0                	or     eax,edx
c000e971:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e974:	c3                   	ret    
c000e975:	90                   	nop

c000e976 <GDT::GDT()>:
c000e976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e97a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e98a:	90                   	nop
c000e98b:	c3                   	ret    

c000e98c <GDT::addEntry(GDTEntry)>:
c000e98c:	53                   	push   ebx
c000e98d:	83 ec 0c             	sub    esp,0xc
c000e990:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e994:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e996:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e99d:	52                   	push   edx
c000e99e:	50                   	push   eax
c000e99f:	68 34 6b 02 c0       	push   0xc0026b34
c000e9a4:	e8 ae 38 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000e9a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e9ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e9af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9b3:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e9b7:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e9bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e9be:	c1 e0 03             	shl    eax,0x3
c000e9c1:	89 13                	mov    DWORD PTR [ebx],edx
c000e9c3:	83 c4 18             	add    esp,0x18
c000e9c6:	5b                   	pop    ebx
c000e9c7:	c3                   	ret    

c000e9c8 <GDT::getNumberOfEntries()>:
c000e9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9ce:	c3                   	ret    
c000e9cf:	90                   	nop

c000e9d0 <GDT::flush()>:
c000e9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9d4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9d6:	83 c0 04             	add    eax,0x4
c000e9d9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9e0:	a3 12 a4 02 c0       	mov    ds:0xc002a412,eax
c000e9e5:	66 89 15 10 a4 02 c0 	mov    WORD PTR ds:0xc002a410,dx
c000e9ec:	e9 26 1a ff ff       	jmp    c0000417 <loadGDT>
c000e9f1:	90                   	nop

c000e9f2 <GDT::setup()>:
c000e9f2:	55                   	push   ebp
c000e9f3:	57                   	push   edi
c000e9f4:	56                   	push   esi
c000e9f5:	53                   	push   ebx
c000e9f6:	83 ec 3c             	sub    esp,0x3c
c000e9f9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9fd:	6a 00                	push   0x0
c000e9ff:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ea03:	53                   	push   ebx
c000ea04:	e8 33 ff ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c000ea09:	6a 00                	push   0x0
c000ea0b:	53                   	push   ebx
c000ea0c:	e8 47 ff ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c000ea11:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ea19:	6a 00                	push   0x0
c000ea1b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ea1f:	53                   	push   ebx
c000ea20:	e8 17 ff ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c000ea25:	68 ff ff ff 00       	push   0xffffff
c000ea2a:	53                   	push   ebx
c000ea2b:	e8 28 ff ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c000ea30:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea34:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea39:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea3e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea42:	83 c4 20             	add    esp,0x20
c000ea45:	6a 00                	push   0x0
c000ea47:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea4b:	53                   	push   ebx
c000ea4c:	e8 eb fe ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c000ea51:	68 ff ff ff 00       	push   0xffffff
c000ea56:	53                   	push   ebx
c000ea57:	e8 fc fe ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c000ea5c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea64:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea68:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea6c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea75:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea7a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea7e:	89 d8                	mov    eax,ebx
c000ea80:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea84:	80 cc 60             	or     ah,0x60
c000ea87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea8b:	83 c4 0c             	add    esp,0xc
c000ea8e:	89 f8                	mov    eax,edi
c000ea90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea94:	80 cc 60             	or     ah,0x60
c000ea97:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea9b:	89 c7                	mov    edi,eax
c000ea9d:	55                   	push   ebp
c000ea9e:	e8 e9 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eaa3:	83 c4 0c             	add    esp,0xc
c000eaa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaaa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eaae:	55                   	push   ebp
c000eaaf:	e8 d8 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eab4:	83 c4 0c             	add    esp,0xc
c000eab7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eabb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eabf:	55                   	push   ebp
c000eac0:	e8 c7 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eac5:	83 c4 0c             	add    esp,0xc
c000eac8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eacc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ead0:	53                   	push   ebx
c000ead1:	51                   	push   ecx
c000ead2:	55                   	push   ebp
c000ead3:	e8 b4 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000ead8:	83 c4 0c             	add    esp,0xc
c000eadb:	57                   	push   edi
c000eadc:	56                   	push   esi
c000eadd:	55                   	push   ebp
c000eade:	e8 a9 fe ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c000eae3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eae6:	e8 e5 fe ff ff       	call   c000e9d0 <GDT::flush()>
c000eaeb:	83 c4 4c             	add    esp,0x4c
c000eaee:	5b                   	pop    ebx
c000eaef:	5e                   	pop    esi
c000eaf0:	5f                   	pop    edi
c000eaf1:	5d                   	pop    ebp
c000eaf2:	c3                   	ret    

c000eaf3 <idleFunction(void*)>:
c000eaf3:	53                   	push   ebx
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	e8 5e dd 00 00       	call   c001c85a <unlockScheduler()>
c000eafc:	e8 83 8d 00 00       	call   c0017884 <thisCPU()>
c000eb01:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eb08:	74 41                	je     c000eb4b <idleFunction(void*)+0x58>
c000eb0a:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c000eb0f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb16:	74 33                	je     c000eb4b <idleFunction(void*)+0x58>
c000eb18:	31 db                	xor    ebx,ebx
c000eb1a:	52                   	push   edx
c000eb1b:	52                   	push   edx
c000eb1c:	68 e1 00 00 00       	push   0xe1
c000eb21:	50                   	push   eax
c000eb22:	e8 df fb ff ff       	call   c000e706 <Computer::rdmsr(unsigned int)>
c000eb27:	53                   	push   ebx
c000eb28:	83 e0 02             	and    eax,0x2
c000eb2b:	50                   	push   eax
c000eb2c:	68 e1 00 00 00       	push   0xe1
c000eb31:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000eb37:	e8 f6 fb ff ff       	call   c000e732 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb3c:	83 c4 20             	add    esp,0x20
c000eb3f:	e8 f0 16 ff ff       	call   c0000234 <doTPAUSE>
c000eb44:	e8 37 65 01 00       	call   c0025080 <idleCommon()>
c000eb49:	eb f4                	jmp    c000eb3f <idleFunction(void*)+0x4c>
c000eb4b:	fb                   	sti    
c000eb4c:	f4                   	hlt    
c000eb4d:	e8 2e 65 01 00       	call   c0025080 <idleCommon()>
c000eb52:	eb f7                	jmp    c000eb4b <idleFunction(void*)+0x58>

c000eb54 <IDTEntry::IDTEntry(bool)>:
c000eb54:	83 ec 04             	sub    esp,0x4
c000eb57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb5b:	88 04 24             	mov    BYTE PTR [esp],al
c000eb5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb62:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb6c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb74:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb77:	83 e2 f0             	and    edx,0xfffffff0
c000eb7a:	83 ca 0e             	or     edx,0xe
c000eb7d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb84:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb87:	83 e2 ef             	and    edx,0xffffffef
c000eb8a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb8d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb91:	74 04                	je     c000eb97 <IDTEntry::IDTEntry(bool)+0x43>
c000eb93:	b2 03                	mov    dl,0x3
c000eb95:	eb 02                	jmp    c000eb99 <IDTEntry::IDTEntry(bool)+0x45>
c000eb97:	b2 00                	mov    dl,0x0
c000eb99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb9d:	83 e2 03             	and    edx,0x3
c000eba0:	88 d1                	mov    cl,dl
c000eba2:	c1 e1 05             	shl    ecx,0x5
c000eba5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eba8:	83 e2 9f             	and    edx,0xffffff9f
c000ebab:	09 ca                	or     edx,ecx
c000ebad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebb4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ebb7:	83 ca 80             	or     edx,0xffffff80
c000ebba:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ebbd:	90                   	nop
c000ebbe:	83 c4 04             	add    esp,0x4
c000ebc1:	c3                   	ret    

c000ebc2 <IDTEntry::setOffset(unsigned int)>:
c000ebc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ebc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebca:	66 89 02             	mov    WORD PTR [edx],ax
c000ebcd:	c1 e8 10             	shr    eax,0x10
c000ebd0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebd4:	c3                   	ret    
c000ebd5:	90                   	nop

c000ebd6 <IDT::IDT()>:
c000ebd6:	90                   	nop
c000ebd7:	c3                   	ret    

c000ebd8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebdc:	83 c0 30             	add    eax,0x30
c000ebdf:	c3                   	ret    

c000ebe0 <IDT::addEntry(IDTEntry, int)>:
c000ebe0:	53                   	push   ebx
c000ebe1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebe5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebe9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebf1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebf4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebf8:	5b                   	pop    ebx
c000ebf9:	c3                   	ret    

c000ebfa <IDT::addEntry(int, void (*)(), bool)>:
c000ebfa:	53                   	push   ebx
c000ebfb:	83 ec 10             	sub    esp,0x10
c000ebfe:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ec03:	50                   	push   eax
c000ec04:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ec08:	53                   	push   ebx
c000ec09:	e8 46 ff ff ff       	call   c000eb54 <IDTEntry::IDTEntry(bool)>
c000ec0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ec12:	53                   	push   ebx
c000ec13:	e8 aa ff ff ff       	call   c000ebc2 <IDTEntry::setOffset(unsigned int)>
c000ec18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec28:	e8 b3 ff ff ff       	call   c000ebe0 <IDT::addEntry(IDTEntry, int)>
c000ec2d:	83 c4 30             	add    esp,0x30
c000ec30:	5b                   	pop    ebx
c000ec31:	c3                   	ret    

c000ec32 <IDT::flush()>:
c000ec32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec36:	66 c7 05 18 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a418,0x7ff
c000ec3f:	a3 1a a4 02 c0       	mov    ds:0xc002a41a,eax
c000ec44:	0f 01 1d 18 a4 02 c0 	lidtd  ds:0xc002a418
c000ec4b:	c3                   	ret    

c000ec4c <IDT::setup()>:
c000ec4c:	57                   	push   edi
c000ec4d:	56                   	push   esi
c000ec4e:	53                   	push   ebx
c000ec4f:	83 ec 10             	sub    esp,0x10
c000ec52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec56:	6a 00                	push   0x0
c000ec58:	68 37 04 00 c0       	push   0xc0000437
c000ec5d:	6a 00                	push   0x0
c000ec5f:	53                   	push   ebx
c000ec60:	e8 95 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec65:	6a 00                	push   0x0
c000ec67:	68 47 04 00 c0       	push   0xc0000447
c000ec6c:	6a 01                	push   0x1
c000ec6e:	53                   	push   ebx
c000ec6f:	e8 86 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec74:	83 c4 20             	add    esp,0x20
c000ec77:	6a 00                	push   0x0
c000ec79:	68 51 04 00 c0       	push   0xc0000451
c000ec7e:	6a 02                	push   0x2
c000ec80:	53                   	push   ebx
c000ec81:	e8 74 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec86:	6a 00                	push   0x0
c000ec88:	68 5b 04 00 c0       	push   0xc000045b
c000ec8d:	6a 03                	push   0x3
c000ec8f:	53                   	push   ebx
c000ec90:	e8 65 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ec95:	83 c4 20             	add    esp,0x20
c000ec98:	6a 00                	push   0x0
c000ec9a:	68 65 04 00 c0       	push   0xc0000465
c000ec9f:	6a 04                	push   0x4
c000eca1:	53                   	push   ebx
c000eca2:	e8 53 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eca7:	6a 00                	push   0x0
c000eca9:	68 6f 04 00 c0       	push   0xc000046f
c000ecae:	6a 05                	push   0x5
c000ecb0:	53                   	push   ebx
c000ecb1:	e8 44 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecb6:	83 c4 20             	add    esp,0x20
c000ecb9:	6a 00                	push   0x0
c000ecbb:	68 79 04 00 c0       	push   0xc0000479
c000ecc0:	6a 06                	push   0x6
c000ecc2:	53                   	push   ebx
c000ecc3:	e8 32 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecc8:	6a 00                	push   0x0
c000ecca:	68 83 04 00 c0       	push   0xc0000483
c000eccf:	6a 07                	push   0x7
c000ecd1:	53                   	push   ebx
c000ecd2:	e8 23 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecd7:	83 c4 20             	add    esp,0x20
c000ecda:	6a 00                	push   0x0
c000ecdc:	68 8d 04 00 c0       	push   0xc000048d
c000ece1:	6a 08                	push   0x8
c000ece3:	53                   	push   ebx
c000ece4:	e8 11 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ece9:	6a 00                	push   0x0
c000eceb:	68 95 04 00 c0       	push   0xc0000495
c000ecf0:	6a 09                	push   0x9
c000ecf2:	53                   	push   ebx
c000ecf3:	e8 02 ff ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ecf8:	83 c4 20             	add    esp,0x20
c000ecfb:	6a 00                	push   0x0
c000ecfd:	68 9f 04 00 c0       	push   0xc000049f
c000ed02:	6a 0a                	push   0xa
c000ed04:	53                   	push   ebx
c000ed05:	e8 f0 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed0a:	6a 00                	push   0x0
c000ed0c:	68 a7 04 00 c0       	push   0xc00004a7
c000ed11:	6a 0b                	push   0xb
c000ed13:	53                   	push   ebx
c000ed14:	e8 e1 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed19:	83 c4 20             	add    esp,0x20
c000ed1c:	6a 00                	push   0x0
c000ed1e:	68 af 04 00 c0       	push   0xc00004af
c000ed23:	6a 0c                	push   0xc
c000ed25:	53                   	push   ebx
c000ed26:	e8 cf fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed2b:	6a 00                	push   0x0
c000ed2d:	68 b7 04 00 c0       	push   0xc00004b7
c000ed32:	6a 0d                	push   0xd
c000ed34:	53                   	push   ebx
c000ed35:	e8 c0 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed3a:	83 c4 20             	add    esp,0x20
c000ed3d:	6a 00                	push   0x0
c000ed3f:	68 bf 04 00 c0       	push   0xc00004bf
c000ed44:	6a 0e                	push   0xe
c000ed46:	53                   	push   ebx
c000ed47:	e8 ae fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed4c:	6a 00                	push   0x0
c000ed4e:	68 c7 04 00 c0       	push   0xc00004c7
c000ed53:	6a 0f                	push   0xf
c000ed55:	53                   	push   ebx
c000ed56:	e8 9f fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed5b:	83 c4 20             	add    esp,0x20
c000ed5e:	6a 00                	push   0x0
c000ed60:	68 d1 04 00 c0       	push   0xc00004d1
c000ed65:	6a 10                	push   0x10
c000ed67:	53                   	push   ebx
c000ed68:	e8 8d fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed6d:	6a 00                	push   0x0
c000ed6f:	68 db 04 00 c0       	push   0xc00004db
c000ed74:	6a 11                	push   0x11
c000ed76:	53                   	push   ebx
c000ed77:	e8 7e fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed7c:	83 c4 20             	add    esp,0x20
c000ed7f:	6a 00                	push   0x0
c000ed81:	68 e5 04 00 c0       	push   0xc00004e5
c000ed86:	6a 12                	push   0x12
c000ed88:	53                   	push   ebx
c000ed89:	e8 6c fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed8e:	6a 01                	push   0x1
c000ed90:	68 ef 04 00 c0       	push   0xc00004ef
c000ed95:	6a 60                	push   0x60
c000ed97:	53                   	push   ebx
c000ed98:	e8 5d fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ed9d:	83 c4 20             	add    esp,0x20
c000eda0:	6a 00                	push   0x0
c000eda2:	68 f9 04 00 c0       	push   0xc00004f9
c000eda7:	6a 20                	push   0x20
c000eda9:	53                   	push   ebx
c000edaa:	e8 4b fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edaf:	6a 00                	push   0x0
c000edb1:	68 03 05 00 c0       	push   0xc0000503
c000edb6:	6a 21                	push   0x21
c000edb8:	53                   	push   ebx
c000edb9:	e8 3c fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edbe:	83 c4 20             	add    esp,0x20
c000edc1:	6a 00                	push   0x0
c000edc3:	68 0d 05 00 c0       	push   0xc000050d
c000edc8:	6a 22                	push   0x22
c000edca:	53                   	push   ebx
c000edcb:	e8 2a fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edd0:	6a 00                	push   0x0
c000edd2:	68 17 05 00 c0       	push   0xc0000517
c000edd7:	6a 23                	push   0x23
c000edd9:	53                   	push   ebx
c000edda:	e8 1b fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eddf:	83 c4 20             	add    esp,0x20
c000ede2:	6a 00                	push   0x0
c000ede4:	68 21 05 00 c0       	push   0xc0000521
c000ede9:	6a 24                	push   0x24
c000edeb:	53                   	push   ebx
c000edec:	e8 09 fe ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000edf1:	6a 00                	push   0x0
c000edf3:	68 2b 05 00 c0       	push   0xc000052b
c000edf8:	6a 25                	push   0x25
c000edfa:	53                   	push   ebx
c000edfb:	e8 fa fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee00:	83 c4 20             	add    esp,0x20
c000ee03:	6a 00                	push   0x0
c000ee05:	68 35 05 00 c0       	push   0xc0000535
c000ee0a:	6a 26                	push   0x26
c000ee0c:	53                   	push   ebx
c000ee0d:	e8 e8 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee12:	6a 00                	push   0x0
c000ee14:	68 3f 05 00 c0       	push   0xc000053f
c000ee19:	6a 27                	push   0x27
c000ee1b:	53                   	push   ebx
c000ee1c:	e8 d9 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee21:	83 c4 20             	add    esp,0x20
c000ee24:	6a 00                	push   0x0
c000ee26:	68 49 05 00 c0       	push   0xc0000549
c000ee2b:	6a 28                	push   0x28
c000ee2d:	53                   	push   ebx
c000ee2e:	e8 c7 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee33:	6a 00                	push   0x0
c000ee35:	68 53 05 00 c0       	push   0xc0000553
c000ee3a:	6a 29                	push   0x29
c000ee3c:	53                   	push   ebx
c000ee3d:	e8 b8 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee42:	83 c4 20             	add    esp,0x20
c000ee45:	6a 00                	push   0x0
c000ee47:	68 5d 05 00 c0       	push   0xc000055d
c000ee4c:	6a 2a                	push   0x2a
c000ee4e:	53                   	push   ebx
c000ee4f:	e8 a6 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee54:	6a 00                	push   0x0
c000ee56:	68 67 05 00 c0       	push   0xc0000567
c000ee5b:	6a 2b                	push   0x2b
c000ee5d:	53                   	push   ebx
c000ee5e:	e8 97 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee63:	83 c4 20             	add    esp,0x20
c000ee66:	6a 00                	push   0x0
c000ee68:	68 71 05 00 c0       	push   0xc0000571
c000ee6d:	6a 2c                	push   0x2c
c000ee6f:	53                   	push   ebx
c000ee70:	e8 85 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee75:	6a 00                	push   0x0
c000ee77:	68 7b 05 00 c0       	push   0xc000057b
c000ee7c:	6a 2d                	push   0x2d
c000ee7e:	53                   	push   ebx
c000ee7f:	e8 76 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee84:	83 c4 20             	add    esp,0x20
c000ee87:	6a 00                	push   0x0
c000ee89:	68 85 05 00 c0       	push   0xc0000585
c000ee8e:	6a 2e                	push   0x2e
c000ee90:	53                   	push   ebx
c000ee91:	e8 64 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ee96:	6a 00                	push   0x0
c000ee98:	68 8f 05 00 c0       	push   0xc000058f
c000ee9d:	6a 2f                	push   0x2f
c000ee9f:	53                   	push   ebx
c000eea0:	e8 55 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eea5:	83 c4 20             	add    esp,0x20
c000eea8:	6a 00                	push   0x0
c000eeaa:	68 99 05 00 c0       	push   0xc0000599
c000eeaf:	6a 30                	push   0x30
c000eeb1:	53                   	push   ebx
c000eeb2:	e8 43 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eeb7:	6a 00                	push   0x0
c000eeb9:	68 a3 05 00 c0       	push   0xc00005a3
c000eebe:	6a 31                	push   0x31
c000eec0:	53                   	push   ebx
c000eec1:	e8 34 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eec6:	83 c4 20             	add    esp,0x20
c000eec9:	6a 00                	push   0x0
c000eecb:	68 ad 05 00 c0       	push   0xc00005ad
c000eed0:	6a 32                	push   0x32
c000eed2:	53                   	push   ebx
c000eed3:	e8 22 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eed8:	6a 00                	push   0x0
c000eeda:	68 b7 05 00 c0       	push   0xc00005b7
c000eedf:	6a 33                	push   0x33
c000eee1:	53                   	push   ebx
c000eee2:	e8 13 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eee7:	83 c4 20             	add    esp,0x20
c000eeea:	6a 00                	push   0x0
c000eeec:	68 c1 05 00 c0       	push   0xc00005c1
c000eef1:	6a 34                	push   0x34
c000eef3:	53                   	push   ebx
c000eef4:	e8 01 fd ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000eef9:	6a 00                	push   0x0
c000eefb:	68 cb 05 00 c0       	push   0xc00005cb
c000ef00:	6a 35                	push   0x35
c000ef02:	53                   	push   ebx
c000ef03:	e8 f2 fc ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ef08:	83 c4 20             	add    esp,0x20
c000ef0b:	6a 00                	push   0x0
c000ef0d:	68 d5 05 00 c0       	push   0xc00005d5
c000ef12:	6a 36                	push   0x36
c000ef14:	53                   	push   ebx
c000ef15:	e8 e0 fc ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ef1a:	6a 00                	push   0x0
c000ef1c:	68 df 05 00 c0       	push   0xc00005df
c000ef21:	6a 37                	push   0x37
c000ef23:	53                   	push   ebx
c000ef24:	e8 d1 fc ff ff       	call   c000ebfa <IDT::addEntry(int, void (*)(), bool)>
c000ef29:	83 c4 20             	add    esp,0x20
c000ef2c:	e8 e4 24 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000ef31:	52                   	push   edx
c000ef32:	6a 03                	push   0x3
c000ef34:	6a 02                	push   0x2
c000ef36:	50                   	push   eax
c000ef37:	e8 1c 2b 00 00       	call   c0011a58 <VAS::allocatePages(int, int)>
c000ef3c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef43:	89 c6                	mov    esi,eax
c000ef45:	e8 1e 32 00 00       	call   c0012168 <operator new(unsigned long)>
c000ef4a:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef50:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef53:	89 c7                	mov    edi,eax
c000ef55:	e8 c0 1c 00 00       	call   c0010c1a <TSS::TSS()>
c000ef5a:	83 c4 0c             	add    esp,0xc
c000ef5d:	68 8d 04 00 c0       	push   0xc000048d
c000ef62:	56                   	push   esi
c000ef63:	57                   	push   edi
c000ef64:	e8 f1 1c 00 00       	call   c0010c5a <TSS::setup(unsigned long, unsigned long)>
c000ef69:	59                   	pop    ecx
c000ef6a:	89 c6                	mov    esi,eax
c000ef6c:	5f                   	pop    edi
c000ef6d:	6a 00                	push   0x0
c000ef6f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef73:	50                   	push   eax
c000ef74:	e8 db fb ff ff       	call   c000eb54 <IDTEntry::IDTEntry(bool)>
c000ef79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef7d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef82:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef89:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef93:	80 ce 05             	or     dh,0x5
c000ef96:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efa1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000efa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efa7:	e8 86 fc ff ff       	call   c000ec32 <IDT::flush()>
c000efac:	83 c4 20             	add    esp,0x20
c000efaf:	5b                   	pop    ebx
c000efb0:	5e                   	pop    esi
c000efb1:	5f                   	pop    edi
c000efb2:	c3                   	ret    

c000efb3 <sbrk>:
c000efb3:	55                   	push   ebp
c000efb4:	57                   	push   edi
c000efb5:	56                   	push   esi
c000efb6:	53                   	push   ebx
c000efb7:	83 ec 1c             	sub    esp,0x1c
c000efba:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000efbe:	85 db                	test   ebx,ebx
c000efc0:	74 37                	je     c000eff9 <sbrk+0x46>
c000efc2:	78 3f                	js     c000f003 <sbrk+0x50>
c000efc4:	e8 bb 88 00 00       	call   c0017884 <thisCPU()>
c000efc9:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efcf:	83 e0 01             	and    eax,0x1
c000efd2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efd6:	a1 ac 93 02 c0       	mov    eax,ds:0xc00293ac
c000efdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efdf:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efe5:	89 d8                	mov    eax,ebx
c000efe7:	78 35                	js     c000f01e <sbrk+0x6b>
c000efe9:	c1 f8 0c             	sar    eax,0xc
c000efec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eff0:	89 c7                	mov    edi,eax
c000eff2:	be 00 00 00 00       	mov    esi,0x0
c000eff7:	eb 3c                	jmp    c000f035 <sbrk+0x82>
c000eff9:	a1 ac 93 02 c0       	mov    eax,ds:0xc00293ac
c000effe:	e9 ad 00 00 00       	jmp    c000f0b0 <sbrk+0xfd>
c000f003:	83 ec 08             	sub    esp,0x8
c000f006:	53                   	push   ebx
c000f007:	68 50 6b 02 c0       	push   0xc0026b50
c000f00c:	e8 46 32 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f011:	83 c4 10             	add    esp,0x10
c000f014:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f019:	e9 92 00 00 00       	jmp    c000f0b0 <sbrk+0xfd>
c000f01e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f024:	eb c3                	jmp    c000efe9 <sbrk+0x36>
c000f026:	81 05 ac 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293ac,0x1000
c000f030:	46                   	inc    esi
c000f031:	39 f7                	cmp    edi,esi
c000f033:	74 34                	je     c000f069 <sbrk+0xb6>
c000f035:	e8 db 23 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000f03a:	89 c3                	mov    ebx,eax
c000f03c:	8b 2d ac 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293ac
c000f042:	e8 c9 06 00 00       	call   c000f710 <Phys::allocatePage()>
c000f047:	68 01 04 00 00       	push   0x401
c000f04c:	55                   	push   ebp
c000f04d:	50                   	push   eax
c000f04e:	53                   	push   ebx
c000f04f:	e8 04 29 00 00       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f054:	83 c4 10             	add    esp,0x10
c000f057:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f05c:	74 c8                	je     c000f026 <sbrk+0x73>
c000f05e:	8b 1d ac 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293ac
c000f064:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f067:	eb bd                	jmp    c000f026 <sbrk+0x73>
c000f069:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f06e:	74 48                	je     c000f0b8 <sbrk+0x105>
c000f070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f074:	89 d3                	mov    ebx,edx
c000f076:	c1 eb 0a             	shr    ebx,0xa
c000f079:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f07f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f085:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f089:	c1 e0 0c             	shl    eax,0xc
c000f08c:	01 d0                	add    eax,edx
c000f08e:	c1 e8 0a             	shr    eax,0xa
c000f091:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f096:	2d 00 00 40 00       	sub    eax,0x400000
c000f09b:	39 c3                	cmp    ebx,eax
c000f09d:	77 0d                	ja     c000f0ac <sbrk+0xf9>
c000f09f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f0a2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f0a8:	39 d8                	cmp    eax,ebx
c000f0aa:	73 f3                	jae    c000f09f <sbrk+0xec>
c000f0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b0:	83 c4 1c             	add    esp,0x1c
c000f0b3:	5b                   	pop    ebx
c000f0b4:	5e                   	pop    esi
c000f0b5:	5f                   	pop    edi
c000f0b6:	5d                   	pop    ebp
c000f0b7:	c3                   	ret    
c000f0b8:	e8 d8 5f 01 00       	call   c0025095 <CPU::readCR3()>
c000f0bd:	83 ec 0c             	sub    esp,0xc
c000f0c0:	50                   	push   eax
c000f0c1:	e8 e1 5f 01 00       	call   c00250a7 <CPU::writeCR3(unsigned long)>
c000f0c6:	83 c4 10             	add    esp,0x10
c000f0c9:	eb e1                	jmp    c000f0ac <sbrk+0xf9>

c000f0cb <mmap>:
c000f0cb:	83 ec 18             	sub    esp,0x18
c000f0ce:	68 80 6b 02 c0       	push   0xc0026b80
c000f0d3:	e8 2c a8 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000f0d8:	b8 00 00 00 00       	mov    eax,0x0
c000f0dd:	83 c4 1c             	add    esp,0x1c
c000f0e0:	c3                   	ret    

c000f0e1 <munmap>:
c000f0e1:	83 ec 18             	sub    esp,0x18
c000f0e4:	68 85 6b 02 c0       	push   0xc0026b85
c000f0e9:	e8 16 a8 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000f0ee:	b8 00 00 00 00       	mov    eax,0x0
c000f0f3:	83 c4 1c             	add    esp,0x1c
c000f0f6:	c3                   	ret    

c000f0f7 <liballoc_lock()>:
c000f0f7:	83 ec 0c             	sub    esp,0xc
c000f0fa:	e8 59 d7 00 00       	call   c001c858 <lockScheduler()>
c000f0ff:	b8 00 00 00 00       	mov    eax,0x0
c000f104:	83 c4 0c             	add    esp,0xc
c000f107:	c3                   	ret    

c000f108 <liballoc_unlock()>:
c000f108:	83 ec 0c             	sub    esp,0xc
c000f10b:	e8 4a d7 00 00       	call   c001c85a <unlockScheduler()>
c000f110:	b8 00 00 00 00       	mov    eax,0x0
c000f115:	83 c4 0c             	add    esp,0xc
c000f118:	c3                   	ret    

c000f119 <liballoc_alloc(int)>:
c000f119:	83 ec 0c             	sub    esp,0xc
c000f11c:	e8 f4 22 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000f121:	83 ec 04             	sub    esp,0x4
c000f124:	6a 01                	push   0x1
c000f126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f12a:	50                   	push   eax
c000f12b:	e8 28 29 00 00       	call   c0011a58 <VAS::allocatePages(int, int)>
c000f130:	83 c4 1c             	add    esp,0x1c
c000f133:	c3                   	ret    

c000f134 <liballoc_free(void*, int)>:
c000f134:	83 ec 0c             	sub    esp,0xc
c000f137:	e8 d9 22 00 00       	call   c0011415 <Virt::getAKernelVAS()>
c000f13c:	83 ec 08             	sub    esp,0x8
c000f13f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f143:	50                   	push   eax
c000f144:	e8 b9 25 00 00       	call   c0011702 <VAS::freeAllocatedPages(unsigned long)>
c000f149:	b8 00 00 00 00       	mov    eax,0x0
c000f14e:	83 c4 1c             	add    esp,0x1c
c000f151:	c3                   	ret    

c000f152 <realloc>:
c000f152:	83 ec 14             	sub    esp,0x14
c000f155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f15d:	e8 03 23 ff ff       	call   c0001465 <dlrealloc>
c000f162:	83 c4 1c             	add    esp,0x1c
c000f165:	c3                   	ret    

c000f166 <malloc>:
c000f166:	83 ec 18             	sub    esp,0x18
c000f169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f16d:	e8 b6 1d ff ff       	call   c0000f28 <dlmalloc>
c000f172:	83 c4 1c             	add    esp,0x1c
c000f175:	c3                   	ret    

c000f176 <free>:
c000f176:	83 ec 18             	sub    esp,0x18
c000f179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f17d:	e8 4b 1a ff ff       	call   c0000bcd <dlfree>
c000f182:	83 c4 1c             	add    esp,0x1c
c000f185:	c3                   	ret    

c000f186 <rfree>:
c000f186:	83 ec 18             	sub    esp,0x18
c000f189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f18d:	e8 e4 ff ff ff       	call   c000f176 <free>
c000f192:	83 c4 1c             	add    esp,0x1c
c000f195:	c3                   	ret    

c000f196 <calloc>:
c000f196:	56                   	push   esi
c000f197:	53                   	push   ebx
c000f198:	83 ec 10             	sub    esp,0x10
c000f19b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f19f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f1a4:	53                   	push   ebx
c000f1a5:	e8 bc ff ff ff       	call   c000f166 <malloc>
c000f1aa:	89 c6                	mov    esi,eax
c000f1ac:	83 c4 0c             	add    esp,0xc
c000f1af:	53                   	push   ebx
c000f1b0:	6a 00                	push   0x0
c000f1b2:	50                   	push   eax
c000f1b3:	e8 34 15 ff ff       	call   c00006ec <memset>
c000f1b8:	89 f0                	mov    eax,esi
c000f1ba:	83 c4 14             	add    esp,0x14
c000f1bd:	5b                   	pop    ebx
c000f1be:	5e                   	pop    esi
c000f1bf:	c3                   	ret    

c000f1c0 <hwTextMode_loadInData(VgaText*)>:
c000f1c0:	57                   	push   edi
c000f1c1:	56                   	push   esi
c000f1c2:	53                   	push   ebx
c000f1c3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1c7:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1cd:	85 c0                	test   eax,eax
c000f1cf:	7e 30                	jle    c000f201 <hwTextMode_loadInData(VgaText*)+0x41>
c000f1d1:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1d4:	31 f6                	xor    esi,esi
c000f1d6:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1d9:	31 c0                	xor    eax,eax
c000f1db:	c1 e1 05             	shl    ecx,0x5
c000f1de:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1e4:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1e8:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1ec:	40                   	inc    eax
c000f1ed:	83 f8 50             	cmp    eax,0x50
c000f1f0:	75 f2                	jne    c000f1e4 <hwTextMode_loadInData(VgaText*)+0x24>
c000f1f2:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1f8:	46                   	inc    esi
c000f1f9:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1ff:	7f d5                	jg     c000f1d6 <hwTextMode_loadInData(VgaText*)+0x16>
c000f201:	5b                   	pop    ebx
c000f202:	5e                   	pop    esi
c000f203:	5f                   	pop    edi
c000f204:	c3                   	ret    

c000f205 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f205:	56                   	push   esi
c000f206:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f20b:	53                   	push   ebx
c000f20c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f210:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f214:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f21a:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f220:	c1 e0 04             	shl    eax,0x4
c000f223:	83 e6 0f             	and    esi,0xf
c000f226:	0f b6 c0             	movzx  eax,al
c000f229:	41                   	inc    ecx
c000f22a:	09 f0                	or     eax,esi
c000f22c:	83 c2 02             	add    edx,0x2
c000f22f:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f233:	c1 e0 08             	shl    eax,0x8
c000f236:	09 f0                	or     eax,esi
c000f238:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f23c:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f242:	75 d0                	jne    c000f214 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f244:	5b                   	pop    ebx
c000f245:	5e                   	pop    esi
c000f246:	c3                   	ret    

c000f247 <hwTextMode_showCursor(VgaText*, bool)>:
c000f247:	56                   	push   esi
c000f248:	53                   	push   ebx
c000f249:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f24e:	74 38                	je     c000f288 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f250:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f255:	b0 0a                	mov    al,0xa
c000f257:	89 da                	mov    edx,ebx
c000f259:	ee                   	out    dx,al
c000f25a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f25f:	89 ca                	mov    edx,ecx
c000f261:	ec                   	in     al,dx
c000f262:	b2 0f                	mov    dl,0xf
c000f264:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f268:	83 e0 c0             	and    eax,0xffffffc0
c000f26b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f271:	09 d0                	or     eax,edx
c000f273:	89 ca                	mov    edx,ecx
c000f275:	ee                   	out    dx,al
c000f276:	b0 0b                	mov    al,0xb
c000f278:	89 da                	mov    edx,ebx
c000f27a:	ee                   	out    dx,al
c000f27b:	89 ca                	mov    edx,ecx
c000f27d:	ec                   	in     al,dx
c000f27e:	83 e0 e0             	and    eax,0xffffffe0
c000f281:	83 c8 0f             	or     eax,0xf
c000f284:	ee                   	out    dx,al
c000f285:	5b                   	pop    ebx
c000f286:	5e                   	pop    esi
c000f287:	c3                   	ret    
c000f288:	b0 0a                	mov    al,0xa
c000f28a:	ba d4 03 00 00       	mov    edx,0x3d4
c000f28f:	ee                   	out    dx,al
c000f290:	b0 20                	mov    al,0x20
c000f292:	ba d5 03 00 00       	mov    edx,0x3d5
c000f297:	ee                   	out    dx,al
c000f298:	5b                   	pop    ebx
c000f299:	5e                   	pop    esi
c000f29a:	c3                   	ret    

c000f29b <hwTextMode_update(VgaText*)>:
c000f29b:	c3                   	ret    

c000f29c <hwTextMode_updateCursor(VgaText*)>:
c000f29c:	56                   	push   esi
c000f29d:	b9 19 00 00 00       	mov    ecx,0x19
c000f2a2:	53                   	push   ebx
c000f2a3:	be d4 03 00 00       	mov    esi,0x3d4
c000f2a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2ac:	89 f2                	mov    edx,esi
c000f2ae:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f2b4:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f2ba:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f2bd:	c1 e1 04             	shl    ecx,0x4
c000f2c0:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2c6:	b0 0f                	mov    al,0xf
c000f2c8:	ee                   	out    dx,al
c000f2c9:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2ce:	88 c8                	mov    al,cl
c000f2d0:	89 da                	mov    edx,ebx
c000f2d2:	ee                   	out    dx,al
c000f2d3:	b0 0e                	mov    al,0xe
c000f2d5:	89 f2                	mov    edx,esi
c000f2d7:	ee                   	out    dx,al
c000f2d8:	89 c8                	mov    eax,ecx
c000f2da:	89 da                	mov    edx,ebx
c000f2dc:	66 c1 e8 08          	shr    ax,0x8
c000f2e0:	ee                   	out    dx,al
c000f2e1:	5b                   	pop    ebx
c000f2e2:	5e                   	pop    esi
c000f2e3:	c3                   	ret    

c000f2e4 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2e4:	ba da 03 00 00       	mov    edx,0x3da
c000f2e9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2ee:	75 18                	jne    c000f308 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2f0:	ec                   	in     al,dx
c000f2f1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2f6:	b0 30                	mov    al,0x30
c000f2f8:	89 ca                	mov    edx,ecx
c000f2fa:	ee                   	out    dx,al
c000f2fb:	ba c1 03 00 00       	mov    edx,0x3c1
c000f300:	ec                   	in     al,dx
c000f301:	83 c8 08             	or     eax,0x8
c000f304:	89 ca                	mov    edx,ecx
c000f306:	ee                   	out    dx,al
c000f307:	c3                   	ret    
c000f308:	ec                   	in     al,dx
c000f309:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f30e:	b0 30                	mov    al,0x30
c000f310:	89 ca                	mov    edx,ecx
c000f312:	ee                   	out    dx,al
c000f313:	ba c1 03 00 00       	mov    edx,0x3c1
c000f318:	ec                   	in     al,dx
c000f319:	83 e0 f7             	and    eax,0xfffffff7
c000f31c:	89 ca                	mov    edx,ecx
c000f31e:	ee                   	out    dx,al
c000f31f:	c3                   	ret    

c000f320 <hwTextMode_scrollScreen(VgaText*)>:
c000f320:	55                   	push   ebp
c000f321:	bd 02 00 00 00       	mov    ebp,0x2
c000f326:	57                   	push   edi
c000f327:	56                   	push   esi
c000f328:	53                   	push   ebx
c000f329:	83 ec 1c             	sub    esp,0x1c
c000f32c:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f334:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f338:	31 c0                	xor    eax,eax
c000f33a:	eb 0b                	jmp    c000f347 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f33c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f342:	74 57                	je     c000f39b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f344:	43                   	inc    ebx
c000f345:	89 f0                	mov    eax,esi
c000f347:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f34d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f353:	88 13                	mov    BYTE PTR [ebx],dl
c000f355:	8d 70 01             	lea    esi,[eax+0x1]
c000f358:	83 fd 18             	cmp    ebp,0x18
c000f35b:	75 df                	jne    c000f33c <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f35d:	a8 01                	test   al,0x1
c000f35f:	75 13                	jne    c000f374 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f361:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f364:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f36a:	75 d8                	jne    c000f344 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f36c:	83 c4 1c             	add    esp,0x1c
c000f36f:	5b                   	pop    ebx
c000f370:	5e                   	pop    esi
c000f371:	5f                   	pop    edi
c000f372:	5d                   	pop    ebp
c000f373:	c3                   	ret    
c000f374:	83 ec 08             	sub    esp,0x8
c000f377:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f37b:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f382:	50                   	push   eax
c000f383:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f387:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f38e:	50                   	push   eax
c000f38f:	e8 66 0b 00 00       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000f394:	83 c4 10             	add    esp,0x10
c000f397:	88 07                	mov    BYTE PTR [edi],al
c000f399:	eb c9                	jmp    c000f364 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f39b:	45                   	inc    ebp
c000f39c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f3a4:	eb 8e                	jmp    c000f334 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f3a6 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f3a6:	56                   	push   esi
c000f3a7:	53                   	push   ebx
c000f3a8:	83 ec 0c             	sub    esp,0xc
c000f3ab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f3af:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f3b3:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3b8:	50                   	push   eax
c000f3b9:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3be:	50                   	push   eax
c000f3bf:	e8 36 0b 00 00       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000f3c4:	5a                   	pop    edx
c000f3c5:	0f b6 c0             	movzx  eax,al
c000f3c8:	59                   	pop    ecx
c000f3c9:	50                   	push   eax
c000f3ca:	89 f0                	mov    eax,esi
c000f3cc:	0f be f0             	movsx  esi,al
c000f3cf:	56                   	push   esi
c000f3d0:	e8 cb 0b 00 00       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c000f3d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3d9:	ba 19 00 00 00       	mov    edx,0x19
c000f3de:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3e4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3e7:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3ea:	c1 e1 04             	shl    ecx,0x4
c000f3ed:	c1 e2 04             	shl    edx,0x4
c000f3f0:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3f4:	01 ca                	add    edx,ecx
c000f3f6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3fe:	83 c4 14             	add    esp,0x14
c000f401:	5b                   	pop    ebx
c000f402:	5e                   	pop    esi
c000f403:	c3                   	ret    

c000f404 <setupTextMode()>:
c000f404:	c7 05 b8 a4 02 c0 e4 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b8,0xc000f2e4
c000f40e:	c7 05 a4 a4 02 c0 c0 f1 00 c0 	mov    DWORD PTR ds:0xc002a4a4,0xc000f1c0
c000f418:	c7 05 a0 a4 02 c0 05 f2 00 c0 	mov    DWORD PTR ds:0xc002a4a0,0xc000f205
c000f422:	c7 05 ac a4 02 c0 20 f3 00 c0 	mov    DWORD PTR ds:0xc002a4ac,0xc000f320
c000f42c:	c7 05 b4 a4 02 c0 47 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b4,0xc000f247
c000f436:	c7 05 a8 a4 02 c0 9b f2 00 c0 	mov    DWORD PTR ds:0xc002a4a8,0xc000f29b
c000f440:	c7 05 b0 a4 02 c0 9c f2 00 c0 	mov    DWORD PTR ds:0xc002a4b0,0xc000f29c
c000f44a:	c7 05 bc a4 02 c0 a6 f3 00 c0 	mov    DWORD PTR ds:0xc002a4bc,0xc000f3a6
c000f454:	c3                   	ret    

c000f455 <kernel_main>:
c000f455:	57                   	push   edi
c000f456:	bf f9 03 00 00       	mov    edi,0x3f9
c000f45b:	56                   	push   esi
c000f45c:	31 f6                	xor    esi,esi
c000f45e:	53                   	push   ebx
c000f45f:	83 ec 10             	sub    esp,0x10
c000f462:	e8 ed 08 00 00       	call   c000fd54 <installVgaTextImplementation()>
c000f467:	e8 98 ff ff ff       	call   c000f404 <setupTextMode()>
c000f46c:	89 f0                	mov    eax,esi
c000f46e:	89 fa                	mov    edx,edi
c000f470:	ee                   	out    dx,al
c000f471:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f476:	b0 80                	mov    al,0x80
c000f478:	89 da                	mov    edx,ebx
c000f47a:	ee                   	out    dx,al
c000f47b:	b1 03                	mov    cl,0x3
c000f47d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f482:	88 c8                	mov    al,cl
c000f484:	ee                   	out    dx,al
c000f485:	89 f0                	mov    eax,esi
c000f487:	89 fa                	mov    edx,edi
c000f489:	ee                   	out    dx,al
c000f48a:	88 c8                	mov    al,cl
c000f48c:	89 da                	mov    edx,ebx
c000f48e:	ee                   	out    dx,al
c000f48f:	b0 c7                	mov    al,0xc7
c000f491:	ba fa 03 00 00       	mov    edx,0x3fa
c000f496:	ee                   	out    dx,al
c000f497:	b0 0b                	mov    al,0xb
c000f499:	ba fc 03 00 00       	mov    edx,0x3fc
c000f49e:	ee                   	out    dx,al
c000f49f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f4a4:	83 ec 0c             	sub    esp,0xc
c000f4a7:	05 ff 0f 00 00       	add    eax,0xfff
c000f4ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4b1:	50                   	push   eax
c000f4b2:	e8 59 03 00 00       	call   c000f810 <Phys::physicalMemorySetup(unsigned int)>
c000f4b7:	e8 da 1e 00 00       	call   c0011396 <Virt::virtualMemorySetup()>
c000f4bc:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4cb:	75 0e                	jne    c000f4db <kernel_main+0x86>
c000f4cd:	89 d8                	mov    eax,ebx
c000f4cf:	25 48 03 00 00       	and    eax,0x348
c000f4d4:	3d 00 03 00 00       	cmp    eax,0x300
c000f4d9:	74 10                	je     c000f4eb <kernel_main+0x96>
c000f4db:	83 ec 0c             	sub    esp,0xc
c000f4de:	68 1f 81 02 c0       	push   0xc002811f
c000f4e3:	e8 1c a4 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000f4e8:	83 c4 10             	add    esp,0x10
c000f4eb:	83 ec 0c             	sub    esp,0xc
c000f4ee:	89 1d 20 a4 02 c0    	mov    DWORD PTR ds:0xc002a420,ebx
c000f4f4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4f8:	53                   	push   ebx
c000f4f9:	e8 42 20 00 00       	call   c0011540 <VAS::VAS()>
c000f4fe:	89 1d 64 a5 02 c0    	mov    DWORD PTR ds:0xc002a564,ebx
c000f504:	e8 17 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f509:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f510:	e8 53 2c 00 00       	call   c0012168 <operator new(unsigned long)>
c000f515:	89 04 24             	mov    DWORD PTR [esp],eax
c000f518:	89 c6                	mov    esi,eax
c000f51a:	e8 7f ea ff ff       	call   c000df9e <Computer::Computer()>
c000f51f:	6a 00                	push   0x0
c000f521:	89 35 08 a4 02 c0    	mov    DWORD PTR ds:0xc002a408,esi
c000f527:	6a 00                	push   0x0
c000f529:	6a 00                	push   0x0
c000f52b:	56                   	push   esi
c000f52c:	e8 77 f2 ff ff       	call   c000e7a8 <Computer::open(int, int, void*)>
c000f531:	83 c4 14             	add    esp,0x14
c000f534:	53                   	push   ebx
c000f535:	e8 b2 22 00 00       	call   c00117ec <VAS::~VAS()>
c000f53a:	c7 04 24 8c 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b8c
c000f541:	e8 be a3 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000f546:	83 c4 20             	add    esp,0x20
c000f549:	5b                   	pop    ebx
c000f54a:	5e                   	pop    esi
c000f54b:	5f                   	pop    edi
c000f54c:	c3                   	ret    

c000f54d <Phys::allocateDMA(unsigned long)>:
c000f54d:	55                   	push   ebp
c000f54e:	31 d2                	xor    edx,edx
c000f550:	57                   	push   edi
c000f551:	31 ed                	xor    ebp,ebp
c000f553:	56                   	push   esi
c000f554:	31 c9                	xor    ecx,ecx
c000f556:	53                   	push   ebx
c000f557:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f55b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f561:	31 c0                	xor    eax,eax
c000f563:	c1 ee 0c             	shr    esi,0xc
c000f566:	eb 17                	jmp    c000f57f <Phys::allocateDMA(unsigned long)+0x32>
c000f568:	85 c9                	test   ecx,ecx
c000f56a:	75 04                	jne    c000f570 <Phys::allocateDMA(unsigned long)+0x23>
c000f56c:	89 d5                	mov    ebp,edx
c000f56e:	89 d0                	mov    eax,edx
c000f570:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f573:	39 de                	cmp    esi,ebx
c000f575:	74 20                	je     c000f597 <Phys::allocateDMA(unsigned long)+0x4a>
c000f577:	42                   	inc    edx
c000f578:	89 d9                	mov    ecx,ebx
c000f57a:	83 fa 2f             	cmp    edx,0x2f
c000f57d:	7f 11                	jg     c000f590 <Phys::allocateDMA(unsigned long)+0x43>
c000f57f:	80 ba 60 a4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5ba0],0x0
c000f586:	74 e0                	je     c000f568 <Phys::allocateDMA(unsigned long)+0x1b>
c000f588:	31 c9                	xor    ecx,ecx
c000f58a:	42                   	inc    edx
c000f58b:	83 fa 2f             	cmp    edx,0x2f
c000f58e:	7e ef                	jle    c000f57f <Phys::allocateDMA(unsigned long)+0x32>
c000f590:	5b                   	pop    ebx
c000f591:	31 c0                	xor    eax,eax
c000f593:	5e                   	pop    esi
c000f594:	5f                   	pop    edi
c000f595:	5d                   	pop    ebp
c000f596:	c3                   	ret    
c000f597:	8d 14 30             	lea    edx,[eax+esi*1]
c000f59a:	89 d7                	mov    edi,edx
c000f59c:	4f                   	dec    edi
c000f59d:	79 03                	jns    c000f5a2 <Phys::allocateDMA(unsigned long)+0x55>
c000f59f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f5a2:	c1 ff 04             	sar    edi,0x4
c000f5a5:	89 c2                	mov    edx,eax
c000f5a7:	c1 fa 04             	sar    edx,0x4
c000f5aa:	39 fa                	cmp    edx,edi
c000f5ac:	75 2f                	jne    c000f5dd <Phys::allocateDMA(unsigned long)+0x90>
c000f5ae:	85 db                	test   ebx,ebx
c000f5b0:	74 1a                	je     c000f5cc <Phys::allocateDMA(unsigned long)+0x7f>
c000f5b2:	be 60 a4 02 c0       	mov    esi,0xc002a460
c000f5b7:	8d 90 60 a4 02 c0    	lea    edx,[eax-0x3ffd5ba0]
c000f5bd:	f7 d6                	not    esi
c000f5bf:	29 c6                	sub    esi,eax
c000f5c1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5c4:	42                   	inc    edx
c000f5c5:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5c8:	39 d9                	cmp    ecx,ebx
c000f5ca:	7f f5                	jg     c000f5c1 <Phys::allocateDMA(unsigned long)+0x74>
c000f5cc:	85 ff                	test   edi,edi
c000f5ce:	74 13                	je     c000f5e3 <Phys::allocateDMA(unsigned long)+0x96>
c000f5d0:	5b                   	pop    ebx
c000f5d1:	05 50 20 0c 00       	add    eax,0xc2050
c000f5d6:	5e                   	pop    esi
c000f5d7:	c1 e0 0c             	shl    eax,0xc
c000f5da:	5f                   	pop    edi
c000f5db:	5d                   	pop    ebp
c000f5dc:	c3                   	ret    
c000f5dd:	89 ea                	mov    edx,ebp
c000f5df:	31 c9                	xor    ecx,ecx
c000f5e1:	eb a7                	jmp    c000f58a <Phys::allocateDMA(unsigned long)+0x3d>
c000f5e3:	5b                   	pop    ebx
c000f5e4:	c1 e0 0c             	shl    eax,0xc
c000f5e7:	5e                   	pop    esi
c000f5e8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5ed:	5f                   	pop    edi
c000f5ee:	5d                   	pop    ebp
c000f5ef:	c3                   	ret    

c000f5f0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5f8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5fe:	c1 e9 0c             	shr    ecx,0xc
c000f601:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f606:	76 25                	jbe    c000f62d <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f608:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f60d:	c1 e8 0c             	shr    eax,0xc
c000f610:	8d 50 10             	lea    edx,[eax+0x10]
c000f613:	85 c9                	test   ecx,ecx
c000f615:	74 15                	je     c000f62c <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f617:	8d 82 60 a4 02 c0    	lea    eax,[edx-0x3ffd5ba0]
c000f61d:	8d 94 11 60 a4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5ba0]
c000f624:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f627:	40                   	inc    eax
c000f628:	39 d0                	cmp    eax,edx
c000f62a:	75 f8                	jne    c000f624 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f62c:	c3                   	ret    
c000f62d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f633:	c1 ea 0c             	shr    edx,0xc
c000f636:	eb db                	jmp    c000f613 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f638 <Phys::setPageState(unsigned long, bool)>:
c000f638:	56                   	push   esi
c000f639:	ba 01 00 00 00       	mov    edx,0x1
c000f63e:	53                   	push   ebx
c000f63f:	8b 35 b0 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293b0
c000f645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f649:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f64d:	89 c8                	mov    eax,ecx
c000f64f:	83 e1 07             	and    ecx,0x7
c000f652:	c1 e8 03             	shr    eax,0x3
c000f655:	d3 e3                	shl    ebx,cl
c000f657:	01 c6                	add    esi,eax
c000f659:	d3 e2                	shl    edx,cl
c000f65b:	f7 d2                	not    edx
c000f65d:	20 16                	and    BYTE PTR [esi],dl
c000f65f:	03 05 b0 93 02 c0    	add    eax,DWORD PTR ds:0xc00293b0
c000f665:	08 18                	or     BYTE PTR [eax],bl
c000f667:	5b                   	pop    ebx
c000f668:	5e                   	pop    esi
c000f669:	c3                   	ret    

c000f66a <Phys::getPageState(unsigned long)>:
c000f66a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f66e:	8b 15 b0 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293b0
c000f674:	89 c8                	mov    eax,ecx
c000f676:	83 e1 07             	and    ecx,0x7
c000f679:	c1 e8 03             	shr    eax,0x3
c000f67c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f680:	d3 f8                	sar    eax,cl
c000f682:	83 e0 01             	and    eax,0x1
c000f685:	c3                   	ret    

c000f686 <Phys::freePage(unsigned long)>:
c000f686:	53                   	push   ebx
c000f687:	83 ec 08             	sub    esp,0x8
c000f68a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f68e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f694:	76 57                	jbe    c000f6ed <Phys::freePage(unsigned long)+0x67>
c000f696:	c1 eb 0c             	shr    ebx,0xc
c000f699:	53                   	push   ebx
c000f69a:	e8 cb ff ff ff       	call   c000f66a <Phys::getPageState(unsigned long)>
c000f69f:	5a                   	pop    edx
c000f6a0:	84 c0                	test   al,al
c000f6a2:	74 5b                	je     c000f6ff <Phys::freePage(unsigned long)+0x79>
c000f6a4:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f6a9:	48                   	dec    eax
c000f6aa:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f6af:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6b2:	8d 04 80             	lea    eax,[eax+eax*4]
c000f6b5:	c1 e0 02             	shl    eax,0x2
c000f6b8:	99                   	cdq    
c000f6b9:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f6bf:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f6c5:	75 13                	jne    c000f6da <Phys::freePage(unsigned long)+0x54>
c000f6c7:	83 ec 08             	sub    esp,0x8
c000f6ca:	6a 00                	push   0x0
c000f6cc:	53                   	push   ebx
c000f6cd:	e8 66 ff ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f6d2:	83 c4 10             	add    esp,0x10
c000f6d5:	83 c4 08             	add    esp,0x8
c000f6d8:	5b                   	pop    ebx
c000f6d9:	c3                   	ret    
c000f6da:	83 ec 0c             	sub    esp,0xc
c000f6dd:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f6e2:	50                   	push   eax
c000f6e3:	e8 00 0a 00 00       	call   c00100e8 <VgaText::updateRAMUsageDisplay(int)>
c000f6e8:	83 c4 10             	add    esp,0x10
c000f6eb:	eb da                	jmp    c000f6c7 <Phys::freePage(unsigned long)+0x41>
c000f6ed:	68 00 10 00 00       	push   0x1000
c000f6f2:	53                   	push   ebx
c000f6f3:	e8 f8 fe ff ff       	call   c000f5f0 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6f8:	59                   	pop    ecx
c000f6f9:	5b                   	pop    ebx
c000f6fa:	83 c4 08             	add    esp,0x8
c000f6fd:	5b                   	pop    ebx
c000f6fe:	c3                   	ret    
c000f6ff:	c7 44 24 10 a7 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ba7
c000f707:	83 c4 08             	add    esp,0x8
c000f70a:	5b                   	pop    ebx
c000f70b:	e9 f4 a1 00 00       	jmp    c0019904 <Krnl::panic(char const*)>

c000f710 <Phys::allocatePage()>:
c000f710:	56                   	push   esi
c000f711:	53                   	push   ebx
c000f712:	51                   	push   ecx
c000f713:	8b 35 40 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a440
c000f719:	89 f3                	mov    ebx,esi
c000f71b:	eb 0a                	jmp    c000f727 <Phys::allocatePage()+0x17>
c000f71d:	89 1d 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,ebx
c000f723:	39 de                	cmp    esi,ebx
c000f725:	74 24                	je     c000f74b <Phys::allocatePage()+0x3b>
c000f727:	53                   	push   ebx
c000f728:	e8 3d ff ff ff       	call   c000f66a <Phys::getPageState(unsigned long)>
c000f72d:	5a                   	pop    edx
c000f72e:	84 c0                	test   al,al
c000f730:	74 5a                	je     c000f78c <Phys::allocatePage()+0x7c>
c000f732:	43                   	inc    ebx
c000f733:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f739:	75 e2                	jne    c000f71d <Phys::allocatePage()+0xd>
c000f73b:	31 db                	xor    ebx,ebx
c000f73d:	c7 05 40 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a440,0x0
c000f747:	39 de                	cmp    esi,ebx
c000f749:	75 dc                	jne    c000f727 <Phys::allocatePage()+0x17>
c000f74b:	83 ec 0c             	sub    esp,0xc
c000f74e:	68 bd 6b 02 c0       	push   0xc0026bbd
c000f753:	e8 ff 2a 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f758:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f75f:	e8 e9 fd ff ff       	call   c000f54d <Phys::allocateDMA(unsigned long)>
c000f764:	83 c4 10             	add    esp,0x10
c000f767:	85 c0                	test   eax,eax
c000f769:	75 56                	jne    c000f7c1 <Phys::allocatePage()+0xb1>
c000f76b:	83 ec 0c             	sub    esp,0xc
c000f76e:	68 ce 6b 02 c0       	push   0xc0026bce
c000f773:	e8 8c a1 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000f778:	83 c4 10             	add    esp,0x10
c000f77b:	8b 1d 40 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a440
c000f781:	53                   	push   ebx
c000f782:	e8 e3 fe ff ff       	call   c000f66a <Phys::getPageState(unsigned long)>
c000f787:	5a                   	pop    edx
c000f788:	84 c0                	test   al,al
c000f78a:	75 a6                	jne    c000f732 <Phys::allocatePage()+0x22>
c000f78c:	6a 01                	push   0x1
c000f78e:	53                   	push   ebx
c000f78f:	e8 a4 fe ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f794:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f799:	59                   	pop    ecx
c000f79a:	40                   	inc    eax
c000f79b:	5b                   	pop    ebx
c000f79c:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f7a1:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7a4:	8d 04 80             	lea    eax,[eax+eax*4]
c000f7a7:	c1 e0 02             	shl    eax,0x2
c000f7aa:	99                   	cdq    
c000f7ab:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f7b1:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f7b7:	75 0c                	jne    c000f7c5 <Phys::allocatePage()+0xb5>
c000f7b9:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c000f7be:	c1 e0 0c             	shl    eax,0xc
c000f7c1:	5a                   	pop    edx
c000f7c2:	5b                   	pop    ebx
c000f7c3:	5e                   	pop    esi
c000f7c4:	c3                   	ret    
c000f7c5:	83 ec 0c             	sub    esp,0xc
c000f7c8:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f7cd:	50                   	push   eax
c000f7ce:	e8 15 09 00 00       	call   c00100e8 <VgaText::updateRAMUsageDisplay(int)>
c000f7d3:	83 c4 10             	add    esp,0x10
c000f7d6:	eb e1                	jmp    c000f7b9 <Phys::allocatePage()+0xa9>

c000f7d8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7d8:	56                   	push   esi
c000f7d9:	53                   	push   ebx
c000f7da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7de:	39 1d 44 a4 02 c0    	cmp    DWORD PTR ds:0xc002a444,ebx
c000f7e4:	73 06                	jae    c000f7ec <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7e6:	89 1d 44 a4 02 c0    	mov    DWORD PTR ds:0xc002a444,ebx
c000f7ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f0:	c1 eb 0c             	shr    ebx,0xc
c000f7f3:	c1 e8 0c             	shr    eax,0xc
c000f7f6:	39 d8                	cmp    eax,ebx
c000f7f8:	73 13                	jae    c000f80d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7fa:	6a 00                	push   0x0
c000f7fc:	8d 70 01             	lea    esi,[eax+0x1]
c000f7ff:	50                   	push   eax
c000f800:	e8 33 fe ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f805:	5a                   	pop    edx
c000f806:	89 f0                	mov    eax,esi
c000f808:	59                   	pop    ecx
c000f809:	39 f3                	cmp    ebx,esi
c000f80b:	75 ed                	jne    c000f7fa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f80d:	5b                   	pop    ebx
c000f80e:	5e                   	pop    esi
c000f80f:	c3                   	ret    

c000f810 <Phys::physicalMemorySetup(unsigned int)>:
c000f810:	55                   	push   ebp
c000f811:	57                   	push   edi
c000f812:	56                   	push   esi
c000f813:	53                   	push   ebx
c000f814:	31 db                	xor    ebx,ebx
c000f816:	83 ec 40             	sub    esp,0x40
c000f819:	6a 30                	push   0x30
c000f81b:	6a 00                	push   0x0
c000f81d:	68 60 a4 02 c0       	push   0xc002a460
c000f822:	e8 c5 0e ff ff       	call   c00006ec <memset>
c000f827:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f82b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f830:	05 00 10 00 00       	add    eax,0x1000
c000f835:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f839:	83 c4 10             	add    esp,0x10
c000f83c:	83 ec 08             	sub    esp,0x8
c000f83f:	6a 01                	push   0x1
c000f841:	53                   	push   ebx
c000f842:	43                   	inc    ebx
c000f843:	e8 f0 fd ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f851:	75 e9                	jne    c000f83c <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f853:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f85a:	66 85 c0             	test   ax,ax
c000f85d:	0f 84 8e 01 00 00    	je     c000f9f1 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f863:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f867:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f86f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f873:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f878:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f87c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f884:	eb 15                	jmp    c000f89b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f886:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f88a:	83 c3 18             	add    ebx,0x18
c000f88d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f891:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f895:	0f 84 66 01 00 00    	je     c000fa01 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f89b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f89e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f8a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f8a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f8ac:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f8ae:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f8b1:	01 f0                	add    eax,esi
c000f8b3:	55                   	push   ebp
c000f8b4:	11 fa                	adc    edx,edi
c000f8b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8ba:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f8be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8c2:	56                   	push   esi
c000f8c3:	68 08 6c 02 c0       	push   0xc0026c08
c000f8c8:	e8 8a 29 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f8cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8d1:	83 c4 10             	add    esp,0x10
c000f8d4:	09 f8                	or     eax,edi
c000f8d6:	0f 85 25 01 00 00    	jne    c000fa01 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8dc:	4d                   	dec    ebp
c000f8dd:	75 a7                	jne    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8df:	ba 00 00 08 00       	mov    edx,0x80000
c000f8e4:	89 c1                	mov    ecx,eax
c000f8e6:	39 f2                	cmp    edx,esi
c000f8e8:	19 f9                	sbb    ecx,edi
c000f8ea:	0f 82 a7 00 00 00    	jb     c000f997 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8f0:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8f4:	89 c1                	mov    ecx,eax
c000f8f6:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8fa:	0f 83 97 00 00 00    	jae    c000f997 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f900:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f905:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f909:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f90d:	39 fa                	cmp    edx,edi
c000f90f:	19 e8                	sbb    eax,ebp
c000f911:	0f 82 14 01 00 00    	jb     c000fa2b <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f917:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f91b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f91f:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f925:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f92a:	83 d5 ff             	adc    ebp,0xffffffff
c000f92d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f931:	31 c0                	xor    eax,eax
c000f933:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f937:	39 fa                	cmp    edx,edi
c000f939:	89 c1                	mov    ecx,eax
c000f93b:	19 e9                	sbb    ecx,ebp
c000f93d:	0f 83 43 ff ff ff    	jae    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f943:	be 00 00 08 00       	mov    esi,0x80000
c000f948:	50                   	push   eax
c000f949:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f94d:	57                   	push   edi
c000f94e:	56                   	push   esi
c000f94f:	68 2c 6c 02 c0       	push   0xc0026c2c
c000f954:	e8 fe 28 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f959:	5a                   	pop    edx
c000f95a:	59                   	pop    ecx
c000f95b:	57                   	push   edi
c000f95c:	56                   	push   esi
c000f95d:	e8 76 fe ff ff       	call   c000f7d8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f962:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f96a:	83 c4 0c             	add    esp,0xc
c000f96d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f971:	03 05 50 a4 02 c0    	add    eax,DWORD PTR ds:0xc002a450
c000f977:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f97e:	a3 50 a4 02 c0       	mov    ds:0xc002a450,eax
c000f983:	52                   	push   edx
c000f984:	50                   	push   eax
c000f985:	68 ea 6b 02 c0       	push   0xc0026bea
c000f98a:	e8 c8 28 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c000f98f:	83 c4 10             	add    esp,0x10
c000f992:	e9 ef fe ff ff       	jmp    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f997:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f99b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f99f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9a3:	39 ea                	cmp    edx,ebp
c000f9a5:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f9a9:	0f 82 d7 fe ff ff    	jb     c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9af:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f9b4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f9b8:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f9bc:	0f 83 c4 fe ff ff    	jae    c000f886 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9c2:	39 ee                	cmp    esi,ebp
c000f9c4:	89 f8                	mov    eax,edi
c000f9c6:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9ca:	0f 83 78 ff ff ff    	jae    c000f948 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9d8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9dc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9e0:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9ec:	e9 57 ff ff ff       	jmp    c000f948 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9f1:	83 ec 0c             	sub    esp,0xc
c000f9f4:	68 dc 6b 02 c0       	push   0xc0026bdc
c000f9f9:	e8 06 9f 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	bb 40 01 00 00       	mov    ebx,0x140
c000fa06:	83 ec 08             	sub    esp,0x8
c000fa09:	6a 00                	push   0x0
c000fa0b:	53                   	push   ebx
c000fa0c:	43                   	inc    ebx
c000fa0d:	e8 26 fc ff ff       	call   c000f638 <Phys::setPageState(unsigned long, bool)>
c000fa12:	ff 05 50 a4 02 c0    	inc    DWORD PTR ds:0xc002a450
c000fa18:	83 c4 10             	add    esp,0x10
c000fa1b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa21:	75 e3                	jne    c000fa06 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa23:	83 c4 3c             	add    esp,0x3c
c000fa26:	5b                   	pop    ebx
c000fa27:	5e                   	pop    esi
c000fa28:	5f                   	pop    edi
c000fa29:	5d                   	pop    ebp
c000fa2a:	c3                   	ret    
c000fa2b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa3b:	e9 d7 fe ff ff       	jmp    c000f917 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa40 <Pipe::isAtty()>:
c000fa40:	31 c0                	xor    eax,eax
c000fa42:	c3                   	ret    
c000fa43:	90                   	nop

c000fa44 <Pipe::~Pipe()>:
c000fa44:	83 ec 0c             	sub    esp,0xc
c000fa47:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c000fa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa50:	89 10                	mov    DWORD PTR [eax],edx
c000fa52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa56:	83 ec 0c             	sub    esp,0xc
c000fa59:	50                   	push   eax
c000fa5a:	e8 c5 15 00 00       	call   c0011024 <UnixFile::~UnixFile()>
c000fa5f:	83 c4 10             	add    esp,0x10
c000fa62:	90                   	nop
c000fa63:	83 c4 0c             	add    esp,0xc
c000fa66:	c3                   	ret    
c000fa67:	90                   	nop

c000fa68 <Pipe::~Pipe()>:
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	83 ec 0c             	sub    esp,0xc
c000fa6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa72:	e8 cd ff ff ff       	call   c000fa44 <Pipe::~Pipe()>
c000fa77:	83 c4 10             	add    esp,0x10
c000fa7a:	83 ec 08             	sub    esp,0x8
c000fa7d:	6a 20                	push   0x20
c000fa7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa83:	e8 ef 26 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c000fa88:	83 c4 10             	add    esp,0x10
c000fa8b:	83 c4 0c             	add    esp,0xc
c000fa8e:	c3                   	ret    
c000fa8f:	90                   	nop

c000fa90 <Pipe::read(unsigned long long, void*, int*)>:
c000fa90:	55                   	push   ebp
c000fa91:	57                   	push   edi
c000fa92:	56                   	push   esi
c000fa93:	53                   	push   ebx
c000fa94:	83 ec 1c             	sub    esp,0x1c
c000fa97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa9b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa9f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000faa3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000faa6:	89 c8                	mov    eax,ecx
c000faa8:	99                   	cdq    
c000faa9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000faad:	74 19                	je     c000fac8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000faaf:	39 f9                	cmp    ecx,edi
c000fab1:	89 d1                	mov    ecx,edx
c000fab3:	19 f1                	sbb    ecx,esi
c000fab5:	73 11                	jae    c000fac8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fab7:	e8 9c cd 00 00       	call   c001c858 <lockScheduler()>
c000fabc:	e8 cb d0 00 00       	call   c001cb8c <schedule()>
c000fac1:	e8 94 cd 00 00       	call   c001c85a <unlockScheduler()>
c000fac6:	eb db                	jmp    c000faa3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fac8:	39 f8                	cmp    eax,edi
c000faca:	89 d1                	mov    ecx,edx
c000facc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fad0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fad4:	19 f1                	sbb    ecx,esi
c000fad6:	73 08                	jae    c000fae0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fad8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fadc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fae0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fae3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fae6:	29 c6                	sub    esi,eax
c000fae8:	89 f1                	mov    ecx,esi
c000faea:	c1 f9 1f             	sar    ecx,0x1f
c000faed:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000faf1:	89 ca                	mov    edx,ecx
c000faf3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faf7:	19 d1                	sbb    ecx,edx
c000faf9:	73 04                	jae    c000faff <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fafb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000faff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fb03:	89 fd                	mov    ebp,edi
c000fb05:	29 f5                	sub    ebp,esi
c000fb07:	85 f6                	test   esi,esi
c000fb09:	74 12                	je     c000fb1d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000fb0b:	52                   	push   edx
c000fb0c:	56                   	push   esi
c000fb0d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fb10:	50                   	push   eax
c000fb11:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fb15:	e8 9c 0b ff ff       	call   c00006b6 <memcpy>
c000fb1a:	83 c4 10             	add    esp,0x10
c000fb1d:	85 ed                	test   ebp,ebp
c000fb1f:	74 12                	je     c000fb33 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb21:	50                   	push   eax
c000fb22:	55                   	push   ebp
c000fb23:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb26:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb2a:	56                   	push   esi
c000fb2b:	e8 86 0b ff ff       	call   c00006b6 <memcpy>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb39:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb3c:	99                   	cdq    
c000fb3d:	89 f7                	mov    edi,esi
c000fb3f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb43:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb47:	c1 ff 1f             	sar    edi,0x1f
c000fb4a:	57                   	push   edi
c000fb4b:	56                   	push   esi
c000fb4c:	52                   	push   edx
c000fb4d:	50                   	push   eax
c000fb4e:	e8 29 39 01 00       	call   c002347c <__umoddi3>
c000fb53:	83 c4 10             	add    esp,0x10
c000fb56:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb59:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb5e:	75 10                	jne    c000fb70 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb60:	83 ec 0c             	sub    esp,0xc
c000fb63:	68 55 6c 02 c0       	push   0xc0026c55
c000fb68:	e8 97 9d 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb78:	89 10                	mov    DWORD PTR [eax],edx
c000fb7a:	83 c4 1c             	add    esp,0x1c
c000fb7d:	31 c0                	xor    eax,eax
c000fb7f:	5b                   	pop    ebx
c000fb80:	5e                   	pop    esi
c000fb81:	5f                   	pop    edi
c000fb82:	5d                   	pop    ebp
c000fb83:	c3                   	ret    

c000fb84 <Pipe::write(unsigned long long, void*, int*)>:
c000fb84:	55                   	push   ebp
c000fb85:	57                   	push   edi
c000fb86:	56                   	push   esi
c000fb87:	53                   	push   ebx
c000fb88:	83 ec 1c             	sub    esp,0x1c
c000fb8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb93:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb97:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb9a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb9d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fba0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fba4:	89 de                	mov    esi,ebx
c000fba6:	89 df                	mov    edi,ebx
c000fba8:	c1 ff 1f             	sar    edi,0x1f
c000fbab:	01 c6                	add    esi,eax
c000fbad:	89 c8                	mov    eax,ecx
c000fbaf:	11 d7                	adc    edi,edx
c000fbb1:	99                   	cdq    
c000fbb2:	39 f1                	cmp    ecx,esi
c000fbb4:	89 d0                	mov    eax,edx
c000fbb6:	19 f8                	sbb    eax,edi
c000fbb8:	b8 01 00 00 00       	mov    eax,0x1
c000fbbd:	0f 82 80 00 00 00    	jb     c000fc43 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fbc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fbc6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fbc9:	01 d8                	add    eax,ebx
c000fbcb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbcf:	99                   	cdq    
c000fbd0:	f7 f9                	idiv   ecx
c000fbd2:	29 d1                	sub    ecx,edx
c000fbd4:	89 d7                	mov    edi,edx
c000fbd6:	89 c8                	mov    eax,ecx
c000fbd8:	99                   	cdq    
c000fbd9:	39 ce                	cmp    esi,ecx
c000fbdb:	19 d3                	sbb    ebx,edx
c000fbdd:	bb 00 00 00 00       	mov    ebx,0x0
c000fbe2:	72 04                	jb     c000fbe8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbe4:	89 f3                	mov    ebx,esi
c000fbe6:	29 cb                	sub    ebx,ecx
c000fbe8:	89 f1                	mov    ecx,esi
c000fbea:	29 d9                	sub    ecx,ebx
c000fbec:	74 1a                	je     c000fc08 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbee:	52                   	push   edx
c000fbef:	51                   	push   ecx
c000fbf0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbf4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbf8:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbfb:	57                   	push   edi
c000fbfc:	e8 b5 0a ff ff       	call   c00006b6 <memcpy>
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc08:	85 db                	test   ebx,ebx
c000fc0a:	74 12                	je     c000fc1e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fc0c:	50                   	push   eax
c000fc0d:	53                   	push   ebx
c000fc0e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fc12:	51                   	push   ecx
c000fc13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fc16:	e8 9b 0a ff ff       	call   c00006b6 <memcpy>
c000fc1b:	83 c4 10             	add    esp,0x10
c000fc1e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc21:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc26:	75 10                	jne    c000fc38 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc28:	83 ec 0c             	sub    esp,0xc
c000fc2b:	68 71 6c 02 c0       	push   0xc0026c71
c000fc30:	e8 cf 9c 00 00       	call   c0019904 <Krnl::panic(char const*)>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc3c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc3f:	89 38                	mov    DWORD PTR [eax],edi
c000fc41:	31 c0                	xor    eax,eax
c000fc43:	83 c4 1c             	add    esp,0x1c
c000fc46:	5b                   	pop    ebx
c000fc47:	5e                   	pop    esi
c000fc48:	5f                   	pop    edi
c000fc49:	5d                   	pop    ebp
c000fc4a:	c3                   	ret    
c000fc4b:	90                   	nop

c000fc4c <Pipe::Pipe(int)>:
c000fc4c:	83 ec 0c             	sub    esp,0xc
c000fc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc53:	83 ec 08             	sub    esp,0x8
c000fc56:	6a 00                	push   0x0
c000fc58:	50                   	push   eax
c000fc59:	e8 24 12 00 00       	call   c0010e82 <UnixFile::UnixFile(int)>
c000fc5e:	83 c4 10             	add    esp,0x10
c000fc61:	ba 98 6c 02 c0       	mov    edx,0xc0026c98
c000fc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6a:	89 10                	mov    DWORD PTR [eax],edx
c000fc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc74:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc7b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc86:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc91:	83 ec 0c             	sub    esp,0xc
c000fc94:	50                   	push   eax
c000fc95:	e8 cc f4 ff ff       	call   c000f166 <malloc>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	89 c2                	mov    edx,eax
c000fc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcaa:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fcae:	90                   	nop
c000fcaf:	83 c4 0c             	add    esp,0xc
c000fcb2:	c3                   	ret    
c000fcb3:	90                   	nop

c000fcb4 <VgaText::isAtty()>:
c000fcb4:	b0 01                	mov    al,0x1
c000fcb6:	c3                   	ret    
c000fcb7:	90                   	nop

c000fcb8 <VgaText::~VgaText()>:
c000fcb8:	83 ec 0c             	sub    esp,0xc
c000fcbb:	ba 54 6d 02 c0       	mov    edx,0xc0026d54
c000fcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcc4:	89 10                	mov    DWORD PTR [eax],edx
c000fcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcca:	83 ec 0c             	sub    esp,0xc
c000fccd:	50                   	push   eax
c000fcce:	e8 51 13 00 00       	call   c0011024 <UnixFile::~UnixFile()>
c000fcd3:	83 c4 10             	add    esp,0x10
c000fcd6:	90                   	nop
c000fcd7:	83 c4 0c             	add    esp,0xc
c000fcda:	c3                   	ret    
c000fcdb:	90                   	nop

c000fcdc <VgaText::~VgaText()>:
c000fcdc:	83 ec 0c             	sub    esp,0xc
c000fcdf:	83 ec 0c             	sub    esp,0xc
c000fce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce6:	e8 cd ff ff ff       	call   c000fcb8 <VgaText::~VgaText()>
c000fceb:	83 c4 10             	add    esp,0x10
c000fcee:	83 ec 08             	sub    esp,0x8
c000fcf1:	68 60 12 00 00       	push   0x1260
c000fcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcfa:	e8 78 24 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c000fcff:	83 c4 10             	add    esp,0x10
c000fd02:	83 c4 0c             	add    esp,0xc
c000fd05:	c3                   	ret    

c000fd06 <VgaText::read(unsigned long long, void*, int*)>:
c000fd06:	83 ec 10             	sub    esp,0x10
c000fd09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd15:	e8 28 57 00 00       	call   c0015442 <readKeyboard(VgaText*, char*, unsigned long)>
c000fd1a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fd1e:	89 02                	mov    DWORD PTR [edx],eax
c000fd20:	31 c0                	xor    eax,eax
c000fd22:	83 c4 1c             	add    esp,0x1c
c000fd25:	c3                   	ret    

c000fd26 <setTerminalScrollLock(bool)>:
c000fd26:	c3                   	ret    

c000fd27 <addToTerminalCycle(VgaText*)>:
c000fd27:	8b 15 c0 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4c0
c000fd2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd31:	85 d2                	test   edx,edx
c000fd33:	75 0c                	jne    c000fd41 <addToTerminalCycle(VgaText*)+0x1a>
c000fd35:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd3b:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c000fd40:	c3                   	ret    
c000fd41:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd47:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd4d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd53:	c3                   	ret    

c000fd54 <installVgaTextImplementation()>:
c000fd54:	83 ec 10             	sub    esp,0x10
c000fd57:	6a 20                	push   0x20
c000fd59:	6a 00                	push   0x0
c000fd5b:	68 a0 a4 02 c0       	push   0xc002a4a0
c000fd60:	e8 87 09 ff ff       	call   c00006ec <memset>
c000fd65:	83 c4 1c             	add    esp,0x1c
c000fd68:	c3                   	ret    

c000fd69 <scrollTerminalScrollLock(int)>:
c000fd69:	c3                   	ret    

c000fd6a <VgaText::load()>:
c000fd6a:	53                   	push   ebx
c000fd6b:	31 c0                	xor    eax,eax
c000fd6d:	83 ec 58             	sub    esp,0x58
c000fd70:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd74:	89 e2                	mov    edx,esp
c000fd76:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd7a:	40                   	inc    eax
c000fd7b:	83 f8 50             	cmp    eax,0x50
c000fd7e:	75 f6                	jne    c000fd76 <VgaText::load()+0xc>
c000fd80:	31 c0                	xor    eax,eax
c000fd82:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd89:	84 c9                	test   cl,cl
c000fd8b:	74 06                	je     c000fd93 <VgaText::load()+0x29>
c000fd8d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd90:	40                   	inc    eax
c000fd91:	eb ef                	jmp    c000fd82 <VgaText::load()+0x18>
c000fd93:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd99:	85 c0                	test   eax,eax
c000fd9b:	74 09                	je     c000fda6 <VgaText::load()+0x3c>
c000fd9d:	51                   	push   ecx
c000fd9e:	51                   	push   ecx
c000fd9f:	52                   	push   edx
c000fda0:	53                   	push   ebx
c000fda1:	ff d0                	call   eax
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fdac:	85 c0                	test   eax,eax
c000fdae:	74 09                	je     c000fdb9 <VgaText::load()+0x4f>
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	53                   	push   ebx
c000fdb4:	ff d0                	call   eax
c000fdb6:	83 c4 10             	add    esp,0x10
c000fdb9:	83 c4 58             	add    esp,0x58
c000fdbc:	5b                   	pop    ebx
c000fdbd:	c3                   	ret    

c000fdbe <VgaText::updateCursor()>:
c000fdbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc2:	39 05 c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,eax
c000fdc8:	75 0c                	jne    c000fdd6 <VgaText::updateCursor()+0x18>
c000fdca:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdd0:	85 c0                	test   eax,eax
c000fdd2:	74 02                	je     c000fdd6 <VgaText::updateCursor()+0x18>
c000fdd4:	ff e0                	jmp    eax
c000fdd6:	c3                   	ret    
c000fdd7:	90                   	nop

c000fdd8 <VgaText::showCursor(bool)>:
c000fdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fddc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fde0:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fde6:	c3                   	ret    
c000fde7:	90                   	nop

c000fde8 <VgaText::disableBlink(bool)>:
c000fde8:	56                   	push   esi
c000fde9:	53                   	push   ebx
c000fdea:	51                   	push   ecx
c000fdeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdf3:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000fdf9:	75 18                	jne    c000fe13 <VgaText::disableBlink(bool)+0x2b>
c000fdfb:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fe01:	85 c0                	test   eax,eax
c000fe03:	74 0e                	je     c000fe13 <VgaText::disableBlink(bool)+0x2b>
c000fe05:	89 f1                	mov    ecx,esi
c000fe07:	52                   	push   edx
c000fe08:	52                   	push   edx
c000fe09:	0f b6 d1             	movzx  edx,cl
c000fe0c:	52                   	push   edx
c000fe0d:	53                   	push   ebx
c000fe0e:	ff d0                	call   eax
c000fe10:	83 c4 10             	add    esp,0x10
c000fe13:	89 f0                	mov    eax,esi
c000fe15:	83 f0 01             	xor    eax,0x1
c000fe18:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fe1e:	58                   	pop    eax
c000fe1f:	5b                   	pop    ebx
c000fe20:	5e                   	pop    esi
c000fe21:	c3                   	ret    

c000fe22 <VgaText::doANSI_SGR(int)>:
c000fe22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe2a:	85 d2                	test   edx,edx
c000fe2c:	75 14                	jne    c000fe42 <VgaText::doANSI_SGR(int)+0x20>
c000fe2e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe34:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe3a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe40:	eb 65                	jmp    c000fea7 <VgaText::doANSI_SGR(int)+0x85>
c000fe42:	83 fa 07             	cmp    edx,0x7
c000fe45:	75 14                	jne    c000fe5b <VgaText::doANSI_SGR(int)+0x39>
c000fe47:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe4d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe53:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe59:	eb 4c                	jmp    c000fea7 <VgaText::doANSI_SGR(int)+0x85>
c000fe5b:	83 fa 1b             	cmp    edx,0x1b
c000fe5e:	74 ce                	je     c000fe2e <VgaText::doANSI_SGR(int)+0xc>
c000fe60:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe63:	83 f9 07             	cmp    ecx,0x7
c000fe66:	77 09                	ja     c000fe71 <VgaText::doANSI_SGR(int)+0x4f>
c000fe68:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe6f:	eb 20                	jmp    c000fe91 <VgaText::doANSI_SGR(int)+0x6f>
c000fe71:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe74:	83 f9 07             	cmp    ecx,0x7
c000fe77:	77 09                	ja     c000fe82 <VgaText::doANSI_SGR(int)+0x60>
c000fe79:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe80:	eb 25                	jmp    c000fea7 <VgaText::doANSI_SGR(int)+0x85>
c000fe82:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe85:	83 f9 07             	cmp    ecx,0x7
c000fe88:	77 0e                	ja     c000fe98 <VgaText::doANSI_SGR(int)+0x76>
c000fe8a:	8b 14 95 98 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d68]
c000fe91:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe97:	c3                   	ret    
c000fe98:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe9b:	83 f9 07             	cmp    ecx,0x7
c000fe9e:	77 0d                	ja     c000fead <VgaText::doANSI_SGR(int)+0x8b>
c000fea0:	8b 14 95 70 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d90]
c000fea7:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fead:	c3                   	ret    

c000feae <VgaText::setDefaultBgColour(VgaColour)>:
c000feae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb6:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000febc:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fec2:	c3                   	ret    
c000fec3:	90                   	nop

c000fec4 <VgaText::setDefaultFgColour(VgaColour)>:
c000fec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fecc:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000fed2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fed8:	c3                   	ret    
c000fed9:	90                   	nop

c000feda <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000feda:	53                   	push   ebx
c000fedb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fedf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fee7:	51                   	push   ecx
c000fee8:	e8 c1 ff ff ff       	call   c000feae <VgaText::setDefaultBgColour(VgaColour)>
c000feed:	58                   	pop    eax
c000feee:	5a                   	pop    edx
c000feef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fef3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fef7:	5b                   	pop    ebx
c000fef8:	eb ca                	jmp    c000fec4 <VgaText::setDefaultFgColour(VgaColour)>

c000fefa <VgaText::combineColours(unsigned char, unsigned char)>:
c000fefa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fefe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ff03:	83 e0 0f             	and    eax,0xf
c000ff06:	c1 e2 04             	shl    edx,0x4
c000ff09:	09 d0                	or     eax,edx
c000ff0b:	c3                   	ret    

c000ff0c <VgaText::scrollScreen()>:
c000ff0c:	57                   	push   edi
c000ff0d:	56                   	push   esi
c000ff0e:	be 01 00 00 00       	mov    esi,0x1
c000ff13:	53                   	push   ebx
c000ff14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff18:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ff1e:	31 ff                	xor    edi,edi
c000ff20:	01 d9                	add    ecx,ebx
c000ff22:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff25:	83 fe 17             	cmp    esi,0x17
c000ff28:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff2e:	75 28                	jne    c000ff58 <VgaText::scrollScreen()+0x4c>
c000ff30:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff36:	74 1c                	je     c000ff54 <VgaText::scrollScreen()+0x48>
c000ff38:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff3f:	50                   	push   eax
c000ff40:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff47:	50                   	push   eax
c000ff48:	e8 ad ff ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000ff4d:	5a                   	pop    edx
c000ff4e:	5a                   	pop    edx
c000ff4f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff52:	eb 04                	jmp    c000ff58 <VgaText::scrollScreen()+0x4c>
c000ff54:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff58:	47                   	inc    edi
c000ff59:	41                   	inc    ecx
c000ff5a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff60:	75 c0                	jne    c000ff22 <VgaText::scrollScreen()+0x16>
c000ff62:	46                   	inc    esi
c000ff63:	83 fe 18             	cmp    esi,0x18
c000ff66:	75 b0                	jne    c000ff18 <VgaText::scrollScreen()+0xc>
c000ff68:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000ff6e:	75 24                	jne    c000ff94 <VgaText::scrollScreen()+0x88>
c000ff70:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff77:	74 08                	je     c000ff81 <VgaText::scrollScreen()+0x75>
c000ff79:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff7f:	eb 13                	jmp    c000ff94 <VgaText::scrollScreen()+0x88>
c000ff81:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff87:	85 c0                	test   eax,eax
c000ff89:	74 09                	je     c000ff94 <VgaText::scrollScreen()+0x88>
c000ff8b:	83 ec 0c             	sub    esp,0xc
c000ff8e:	53                   	push   ebx
c000ff8f:	ff d0                	call   eax
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff98:	5b                   	pop    ebx
c000ff99:	5e                   	pop    esi
c000ff9a:	5f                   	pop    edi
c000ff9b:	e9 1e fe ff ff       	jmp    c000fdbe <VgaText::updateCursor()>

c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ffa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ffa5:	c1 e0 08             	shl    eax,0x8
c000ffa8:	89 c2                	mov    edx,eax
c000ffaa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ffaf:	09 d0                	or     eax,edx
c000ffb1:	c3                   	ret    

c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ffb2:	53                   	push   ebx
c000ffb3:	83 ec 08             	sub    esp,0x8
c000ffb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ffba:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffbf:	50                   	push   eax
c000ffc0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffc5:	50                   	push   eax
c000ffc6:	e8 2f ff ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c000ffcb:	5a                   	pop    edx
c000ffcc:	0f b6 c0             	movzx  eax,al
c000ffcf:	5b                   	pop    ebx
c000ffd0:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffd5:	50                   	push   eax
c000ffd6:	53                   	push   ebx
c000ffd7:	e8 c4 ff ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffdc:	5a                   	pop    edx
c000ffdd:	5a                   	pop    edx
c000ffde:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffe4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffe8:	0f b7 d2             	movzx  edx,dx
c000ffeb:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000fff0:	39 0d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ecx
c000fff6:	75 14                	jne    c001000c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000fff8:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000fffe:	85 c0                	test   eax,eax
c0010000:	74 0a                	je     c001000c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010002:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010006:	83 c4 08             	add    esp,0x8
c0010009:	5b                   	pop    ebx
c001000a:	ff e0                	jmp    eax
c001000c:	83 c4 08             	add    esp,0x8
c001000f:	5b                   	pop    ebx
c0010010:	c3                   	ret    
c0010011:	90                   	nop

c0010012 <VgaText::getCursorX()>:
c0010012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010016:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001001c:	c3                   	ret    
c001001d:	90                   	nop

c001001e <VgaText::getCursorY()>:
c001001e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010022:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010028:	c3                   	ret    
c0010029:	90                   	nop

c001002a <VgaText::setCursor(int, int)>:
c001002a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001002e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010032:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010038:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001003c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010042:	e9 77 fd ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c0010047:	90                   	nop

c0010048 <VgaText::setCursorX(int)>:
c0010048:	83 ec 10             	sub    esp,0x10
c001004b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001004f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010059:	50                   	push   eax
c001005a:	e8 cb ff ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c001005f:	83 c4 1c             	add    esp,0x1c
c0010062:	c3                   	ret    
c0010063:	90                   	nop

c0010064 <VgaText::setCursorY(int)>:
c0010064:	83 ec 10             	sub    esp,0x10
c0010067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001006b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001006f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010075:	50                   	push   eax
c0010076:	e8 af ff ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c001007b:	83 c4 1c             	add    esp,0x1c
c001007e:	c3                   	ret    
c001007f:	90                   	nop

c0010080 <VgaText::incrementCursor(bool)>:
c0010080:	56                   	push   esi
c0010081:	53                   	push   ebx
c0010082:	51                   	push   ecx
c0010083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010087:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001008b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010091:	40                   	inc    eax
c0010092:	83 f8 50             	cmp    eax,0x50
c0010095:	74 08                	je     c001009f <VgaText::incrementCursor(bool)+0x1f>
c0010097:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001009d:	eb 33                	jmp    c00100d2 <VgaText::incrementCursor(bool)+0x52>
c001009f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00100a5:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00100af:	8d 50 01             	lea    edx,[eax+0x1]
c00100b2:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00100b8:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00100be:	75 12                	jne    c00100d2 <VgaText::incrementCursor(bool)+0x52>
c00100c0:	83 ec 0c             	sub    esp,0xc
c00100c3:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100c9:	53                   	push   ebx
c00100ca:	e8 3d fe ff ff       	call   c000ff0c <VgaText::scrollScreen()>
c00100cf:	83 c4 10             	add    esp,0x10
c00100d2:	89 f0                	mov    eax,esi
c00100d4:	84 c0                	test   al,al
c00100d6:	74 0c                	je     c00100e4 <VgaText::incrementCursor(bool)+0x64>
c00100d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100dc:	5a                   	pop    edx
c00100dd:	5b                   	pop    ebx
c00100de:	5e                   	pop    esi
c00100df:	e9 da fc ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c00100e4:	58                   	pop    eax
c00100e5:	5b                   	pop    ebx
c00100e6:	5e                   	pop    esi
c00100e7:	c3                   	ret    

c00100e8 <VgaText::updateRAMUsageDisplay(int)>:
c00100e8:	53                   	push   ebx
c00100e9:	bb 0a 00 00 00       	mov    ebx,0xa
c00100ee:	6a 0f                	push   0xf
c00100f0:	6a 00                	push   0x0
c00100f2:	e8 03 fe ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c00100f7:	5a                   	pop    edx
c00100f8:	59                   	pop    ecx
c00100f9:	0f b6 c8             	movzx  ecx,al
c00100fc:	51                   	push   ecx
c00100fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010101:	99                   	cdq    
c0010102:	f7 fb                	idiv   ebx
c0010104:	89 d3                	mov    ebx,edx
c0010106:	83 c0 30             	add    eax,0x30
c0010109:	83 c3 30             	add    ebx,0x30
c001010c:	0f be c0             	movsx  eax,al
c001010f:	0f b6 db             	movzx  ebx,bl
c0010112:	50                   	push   eax
c0010113:	e8 88 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010118:	5a                   	pop    edx
c0010119:	5a                   	pop    edx
c001011a:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010120:	51                   	push   ecx
c0010121:	53                   	push   ebx
c0010122:	e8 79 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010127:	5b                   	pop    ebx
c0010128:	5a                   	pop    edx
c0010129:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001012f:	51                   	push   ecx
c0010130:	6a 25                	push   0x25
c0010132:	e8 69 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010137:	59                   	pop    ecx
c0010138:	5b                   	pop    ebx
c0010139:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c001013f:	5b                   	pop    ebx
c0010140:	c3                   	ret    
c0010141:	90                   	nop

c0010142 <VgaText::updateDiskUsage()>:
c0010142:	55                   	push   ebp
c0010143:	bd 10 27 00 00       	mov    ebp,0x2710
c0010148:	57                   	push   edi
c0010149:	56                   	push   esi
c001014a:	53                   	push   ebx
c001014b:	6a 0f                	push   0xf
c001014d:	6a 00                	push   0x0
c001014f:	e8 a6 fd ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c0010154:	5a                   	pop    edx
c0010155:	0f b6 d8             	movzx  ebx,al
c0010158:	59                   	pop    ecx
c0010159:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c001015e:	53                   	push   ebx
c001015f:	b9 0a 00 00 00       	mov    ecx,0xa
c0010164:	99                   	cdq    
c0010165:	f7 fd                	idiv   ebp
c0010167:	99                   	cdq    
c0010168:	f7 f9                	idiv   ecx
c001016a:	8d 42 30             	lea    eax,[edx+0x30]
c001016d:	0f b6 c0             	movzx  eax,al
c0010170:	50                   	push   eax
c0010171:	e8 2a fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c0010176:	5e                   	pop    esi
c0010177:	5f                   	pop    edi
c0010178:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001017e:	bf e8 03 00 00       	mov    edi,0x3e8
c0010183:	53                   	push   ebx
c0010184:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010189:	99                   	cdq    
c001018a:	f7 ff                	idiv   edi
c001018c:	99                   	cdq    
c001018d:	f7 f9                	idiv   ecx
c001018f:	8d 42 30             	lea    eax,[edx+0x30]
c0010192:	0f b6 c0             	movzx  eax,al
c0010195:	50                   	push   eax
c0010196:	e8 05 fe ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001019b:	5a                   	pop    edx
c001019c:	5e                   	pop    esi
c001019d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c00101a3:	be 64 00 00 00       	mov    esi,0x64
c00101a8:	53                   	push   ebx
c00101a9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ae:	99                   	cdq    
c00101af:	f7 fe                	idiv   esi
c00101b1:	99                   	cdq    
c00101b2:	f7 f9                	idiv   ecx
c00101b4:	8d 42 30             	lea    eax,[edx+0x30]
c00101b7:	0f b6 c0             	movzx  eax,al
c00101ba:	50                   	push   eax
c00101bb:	e8 e0 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00101c0:	5a                   	pop    edx
c00101c1:	5a                   	pop    edx
c00101c2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101c8:	53                   	push   ebx
c00101c9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ce:	99                   	cdq    
c00101cf:	f7 f9                	idiv   ecx
c00101d1:	99                   	cdq    
c00101d2:	f7 f9                	idiv   ecx
c00101d4:	8d 42 30             	lea    eax,[edx+0x30]
c00101d7:	0f b6 c0             	movzx  eax,al
c00101da:	50                   	push   eax
c00101db:	e8 c0 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00101e0:	5a                   	pop    edx
c00101e1:	5a                   	pop    edx
c00101e2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101e8:	53                   	push   ebx
c00101e9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ee:	99                   	cdq    
c00101ef:	f7 f9                	idiv   ecx
c00101f1:	8d 42 30             	lea    eax,[edx+0x30]
c00101f4:	0f b6 c0             	movzx  eax,al
c00101f7:	50                   	push   eax
c00101f8:	e8 a3 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00101fd:	5a                   	pop    edx
c00101fe:	5a                   	pop    edx
c00101ff:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c0010205:	53                   	push   ebx
c0010206:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001020b:	99                   	cdq    
c001020c:	f7 fd                	idiv   ebp
c001020e:	99                   	cdq    
c001020f:	f7 f9                	idiv   ecx
c0010211:	8d 42 30             	lea    eax,[edx+0x30]
c0010214:	0f b6 c0             	movzx  eax,al
c0010217:	50                   	push   eax
c0010218:	e8 83 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001021d:	5d                   	pop    ebp
c001021e:	5a                   	pop    edx
c001021f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010225:	53                   	push   ebx
c0010226:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001022b:	99                   	cdq    
c001022c:	f7 ff                	idiv   edi
c001022e:	99                   	cdq    
c001022f:	f7 f9                	idiv   ecx
c0010231:	8d 42 30             	lea    eax,[edx+0x30]
c0010234:	0f b6 c0             	movzx  eax,al
c0010237:	50                   	push   eax
c0010238:	e8 63 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001023d:	5f                   	pop    edi
c001023e:	5d                   	pop    ebp
c001023f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010245:	53                   	push   ebx
c0010246:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001024b:	99                   	cdq    
c001024c:	f7 fe                	idiv   esi
c001024e:	99                   	cdq    
c001024f:	f7 f9                	idiv   ecx
c0010251:	8d 42 30             	lea    eax,[edx+0x30]
c0010254:	0f b6 c0             	movzx  eax,al
c0010257:	50                   	push   eax
c0010258:	e8 43 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001025d:	5a                   	pop    edx
c001025e:	5e                   	pop    esi
c001025f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010265:	53                   	push   ebx
c0010266:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001026b:	99                   	cdq    
c001026c:	f7 f9                	idiv   ecx
c001026e:	99                   	cdq    
c001026f:	f7 f9                	idiv   ecx
c0010271:	8d 42 30             	lea    eax,[edx+0x30]
c0010274:	0f b6 c0             	movzx  eax,al
c0010277:	50                   	push   eax
c0010278:	e8 23 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001027d:	5f                   	pop    edi
c001027e:	5d                   	pop    ebp
c001027f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010285:	53                   	push   ebx
c0010286:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001028b:	99                   	cdq    
c001028c:	f7 f9                	idiv   ecx
c001028e:	83 c2 30             	add    edx,0x30
c0010291:	0f b6 d2             	movzx  edx,dl
c0010294:	52                   	push   edx
c0010295:	e8 06 fd ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c001029a:	5a                   	pop    edx
c001029b:	59                   	pop    ecx
c001029c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c00102a2:	5b                   	pop    ebx
c00102a3:	5e                   	pop    esi
c00102a4:	5f                   	pop    edi
c00102a5:	5d                   	pop    ebp
c00102a6:	c3                   	ret    
c00102a7:	90                   	nop

c00102a8 <VgaText::updateTitle()>:
c00102a8:	53                   	push   ebx
c00102a9:	31 c0                	xor    eax,eax
c00102ab:	83 ec 58             	sub    esp,0x58
c00102ae:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00102b2:	89 e1                	mov    ecx,esp
c00102b4:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00102b8:	40                   	inc    eax
c00102b9:	83 f8 50             	cmp    eax,0x50
c00102bc:	75 f6                	jne    c00102b4 <VgaText::updateTitle()+0xc>
c00102be:	31 c0                	xor    eax,eax
c00102c0:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102c7:	84 db                	test   bl,bl
c00102c9:	74 06                	je     c00102d1 <VgaText::updateTitle()+0x29>
c00102cb:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102ce:	40                   	inc    eax
c00102cf:	eb ef                	jmp    c00102c0 <VgaText::updateTitle()+0x18>
c00102d1:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102d7:	85 c0                	test   eax,eax
c00102d9:	74 09                	je     c00102e4 <VgaText::updateTitle()+0x3c>
c00102db:	53                   	push   ebx
c00102dc:	53                   	push   ebx
c00102dd:	51                   	push   ecx
c00102de:	52                   	push   edx
c00102df:	ff d0                	call   eax
c00102e1:	83 c4 10             	add    esp,0x10
c00102e4:	e8 59 fe ff ff       	call   c0010142 <VgaText::updateDiskUsage()>
c00102e9:	83 c4 58             	add    esp,0x58
c00102ec:	5b                   	pop    ebx
c00102ed:	c3                   	ret    

c00102ee <VgaText::setTitleTextColour(VgaColour)>:
c00102ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102f6:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102fc:	eb aa                	jmp    c00102a8 <VgaText::updateTitle()>

c00102fe <VgaText::setTitleColour(VgaColour)>:
c00102fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010302:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010306:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001030c:	eb 9a                	jmp    c00102a8 <VgaText::updateTitle()>

c001030e <VgaText::setTitle(char*)>:
c001030e:	53                   	push   ebx
c001030f:	83 ec 10             	sub    esp,0x10
c0010312:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010320:	50                   	push   eax
c0010321:	e8 65 04 ff ff       	call   c000078b <strcpy>
c0010326:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001032a:	83 c4 18             	add    esp,0x18
c001032d:	5b                   	pop    ebx
c001032e:	e9 75 ff ff ff       	jmp    c00102a8 <VgaText::updateTitle()>
c0010333:	90                   	nop

c0010334 <VgaText::decrementCursor(bool)>:
c0010334:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010338:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001033c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 07                	je     c001034d <VgaText::decrementCursor(bool)+0x19>
c0010346:	48                   	dec    eax
c0010347:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001034d:	84 c9                	test   cl,cl
c001034f:	74 09                	je     c001035a <VgaText::decrementCursor(bool)+0x26>
c0010351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010355:	e9 64 fa ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c001035a:	c3                   	ret    
c001035b:	90                   	nop

c001035c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001035c:	53                   	push   ebx
c001035d:	83 ec 08             	sub    esp,0x8
c0010360:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010368:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001036c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010370:	3c 07                	cmp    al,0x7
c0010372:	75 2a                	jne    c001039e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010374:	a1 6c a5 02 c0       	mov    eax,ds:0xc002a56c
c0010379:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010381:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010389:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010391:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010395:	83 c4 08             	add    esp,0x8
c0010398:	5b                   	pop    ebx
c0010399:	e9 a4 2c 00 00       	jmp    c0013042 <Buzzer::beep(int, int, bool)>
c001039e:	3c 0d                	cmp    al,0xd
c00103a0:	75 0c                	jne    c00103ae <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00103a2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103ac:	eb 3b                	jmp    c00103e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00103ae:	3c 0a                	cmp    al,0xa
c00103b0:	75 40                	jne    c00103f2 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00103b2:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00103b8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103c2:	8d 50 01             	lea    edx,[eax+0x1]
c00103c5:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103cb:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103d1:	75 12                	jne    c00103e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103dc:	53                   	push   ebx
c00103dd:	e8 2a fb ff ff       	call   c000ff0c <VgaText::scrollScreen()>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103e9:	83 c4 08             	add    esp,0x8
c00103ec:	5b                   	pop    ebx
c00103ed:	e9 cc f9 ff ff       	jmp    c000fdbe <VgaText::updateCursor()>
c00103f2:	3c 08                	cmp    al,0x8
c00103f4:	75 31                	jne    c0010427 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103f6:	50                   	push   eax
c00103f7:	50                   	push   eax
c00103f8:	6a 01                	push   0x1
c00103fa:	53                   	push   ebx
c00103fb:	e8 34 ff ff ff       	call   c0010334 <VgaText::decrementCursor(bool)>
c0010400:	5a                   	pop    edx
c0010401:	59                   	pop    ecx
c0010402:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010408:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c001040e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010414:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001041a:	6a 20                	push   0x20
c001041c:	53                   	push   ebx
c001041d:	e8 90 fb ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010422:	83 c4 28             	add    esp,0x28
c0010425:	5b                   	pop    ebx
c0010426:	c3                   	ret    
c0010427:	83 ec 08             	sub    esp,0x8
c001042a:	0f be c0             	movsx  eax,al
c001042d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010433:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010439:	51                   	push   ecx
c001043a:	52                   	push   edx
c001043b:	50                   	push   eax
c001043c:	53                   	push   ebx
c001043d:	e8 70 fb ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010442:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010446:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001044e:	83 c4 28             	add    esp,0x28
c0010451:	5b                   	pop    ebx
c0010452:	e9 29 fc ff ff       	jmp    c0010080 <VgaText::incrementCursor(bool)>
c0010457:	90                   	nop

c0010458 <VgaText::isShowingCursor()>:
c0010458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010462:	c3                   	ret    
c0010463:	90                   	nop

c0010464 <VgaText::isBlinkDisabled()>:
c0010464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010468:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001046e:	83 f0 01             	xor    eax,0x1
c0010471:	c3                   	ret    

c0010472 <VgaText::setCursorHeight(int)>:
c0010472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010476:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001047a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010480:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010487:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001048b:	e9 48 f9 ff ff       	jmp    c000fdd8 <VgaText::showCursor(bool)>

c0010490 <VgaText::getCursorHeight()>:
c0010490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010494:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001049a:	c3                   	ret    

c001049b <setActiveTerminal(VgaText*)>:
c001049b:	53                   	push   ebx
c001049c:	83 ec 08             	sub    esp,0x8
c001049f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104a3:	85 db                	test   ebx,ebx
c00104a5:	75 11                	jne    c00104b8 <setActiveTerminal(VgaText*)+0x1d>
c00104a7:	c7 44 24 10 ac 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026cac
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 4c 94 00 00       	jmp    c0019904 <Krnl::panic(char const*)>
c00104b8:	50                   	push   eax
c00104b9:	50                   	push   eax
c00104ba:	53                   	push   ebx
c00104bb:	68 ba 6c 02 c0       	push   0xc0026cba
c00104c0:	e8 92 1d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00104c5:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c00104ca:	83 c4 10             	add    esp,0x10
c00104cd:	85 c0                	test   eax,eax
c00104cf:	74 0c                	je     c00104dd <setActiveTerminal(VgaText*)+0x42>
c00104d1:	83 ec 0c             	sub    esp,0xc
c00104d4:	50                   	push   eax
c00104d5:	e8 e4 f8 ff ff       	call   c000fdbe <VgaText::updateCursor()>
c00104da:	83 c4 10             	add    esp,0x10
c00104dd:	89 1d c4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4c4,ebx
c00104e3:	51                   	push   ecx
c00104e4:	51                   	push   ecx
c00104e5:	53                   	push   ebx
c00104e6:	68 d2 6c 02 c0       	push   0xc0026cd2
c00104eb:	e8 67 1d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00104f0:	83 c4 0c             	add    esp,0xc
c00104f3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104f9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104ff:	53                   	push   ebx
c0010500:	e8 25 fb ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010505:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010508:	e8 57 ff ff ff       	call   c0010464 <VgaText::isBlinkDisabled()>
c001050d:	5a                   	pop    edx
c001050e:	0f b6 c0             	movzx  eax,al
c0010511:	59                   	pop    ecx
c0010512:	50                   	push   eax
c0010513:	53                   	push   ebx
c0010514:	e8 cf f8 ff ff       	call   c000fde8 <VgaText::disableBlink(bool)>
c0010519:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001051c:	e8 6f ff ff ff       	call   c0010490 <VgaText::getCursorHeight()>
c0010521:	5a                   	pop    edx
c0010522:	59                   	pop    ecx
c0010523:	50                   	push   eax
c0010524:	53                   	push   ebx
c0010525:	e8 48 ff ff ff       	call   c0010472 <VgaText::setCursorHeight(int)>
c001052a:	83 c4 10             	add    esp,0x10
c001052d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010534:	75 0a                	jne    c0010540 <setActiveTerminal(VgaText*)+0xa5>
c0010536:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010540:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010544:	83 c4 08             	add    esp,0x8
c0010547:	5b                   	pop    ebx
c0010548:	e9 1d f8 ff ff       	jmp    c000fd6a <VgaText::load()>

c001054d <doTerminalCycle()>:
c001054d:	83 ec 18             	sub    esp,0x18
c0010550:	a1 c0 a4 02 c0       	mov    eax,ds:0xc002a4c0
c0010555:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001055b:	50                   	push   eax
c001055c:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c0010561:	e8 35 ff ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c0010566:	83 c4 1c             	add    esp,0x1c
c0010569:	c3                   	ret    

c001056a <VgaText::doUpdate()>:
c001056a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001056e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010574:	85 c0                	test   eax,eax
c0010576:	74 02                	je     c001057a <VgaText::doUpdate()+0x10>
c0010578:	ff e0                	jmp    eax
c001057a:	c3                   	ret    
c001057b:	90                   	nop

c001057c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001057c:	55                   	push   ebp
c001057d:	57                   	push   edi
c001057e:	56                   	push   esi
c001057f:	53                   	push   ebx
c0010580:	83 ec 1c             	sub    esp,0x1c
c0010583:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010587:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001058c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010593:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010596:	50                   	push   eax
c0010597:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001059c:	50                   	push   eax
c001059d:	e8 58 f9 ff ff       	call   c000fefa <VgaText::combineColours(unsigned char, unsigned char)>
c00105a2:	59                   	pop    ecx
c00105a3:	0f b6 c0             	movzx  eax,al
c00105a6:	5b                   	pop    ebx
c00105a7:	31 c9                	xor    ecx,ecx
c00105a9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00105b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00105b5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00105bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105bf:	0f b7 db             	movzx  ebx,bx
c00105c2:	01 db                	add    ebx,ebx
c00105c4:	01 fb                	add    ebx,edi
c00105c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105c9:	84 c0                	test   al,al
c00105cb:	0f 84 38 01 00 00    	je     c0010709 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105d1:	3c 0d                	cmp    al,0xd
c00105d3:	75 0f                	jne    c00105e4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105d5:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105df:	e9 1f 01 00 00       	jmp    c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105e4:	3c 0a                	cmp    al,0xa
c00105e6:	75 5b                	jne    c0010643 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105e8:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105ee:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105f8:	8d 48 01             	lea    ecx,[eax+0x1]
c00105fb:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010601:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010607:	75 12                	jne    c001061b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010612:	55                   	push   ebp
c0010613:	e8 f4 f8 ff ff       	call   c000ff0c <VgaText::scrollScreen()>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	83 ec 0c             	sub    esp,0xc
c001061e:	55                   	push   ebp
c001061f:	e8 9a f7 ff ff       	call   c000fdbe <VgaText::updateCursor()>
c0010624:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001062c:	83 c4 10             	add    esp,0x10
c001062f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010635:	31 c9                	xor    ecx,ecx
c0010637:	0f b7 db             	movzx  ebx,bx
c001063a:	01 db                	add    ebx,ebx
c001063c:	01 fb                	add    ebx,edi
c001063e:	e9 c0 00 00 00       	jmp    c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010643:	3c 08                	cmp    al,0x8
c0010645:	75 4e                	jne    c0010695 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010647:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001064b:	53                   	push   ebx
c001064c:	53                   	push   ebx
c001064d:	6a 01                	push   0x1
c001064f:	55                   	push   ebp
c0010650:	e8 df fc ff ff       	call   c0010334 <VgaText::decrementCursor(bool)>
c0010655:	58                   	pop    eax
c0010656:	5a                   	pop    edx
c0010657:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001065d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010663:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010669:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c001066f:	6a 20                	push   0x20
c0010671:	55                   	push   ebp
c0010672:	e8 3b f9 ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010677:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001067f:	83 c4 20             	add    esp,0x20
c0010682:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010688:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001068c:	0f b7 db             	movzx  ebx,bx
c001068f:	01 db                	add    ebx,ebx
c0010691:	01 fb                	add    ebx,edi
c0010693:	eb 6e                	jmp    c0010703 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010695:	51                   	push   ecx
c0010696:	51                   	push   ecx
c0010697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001069b:	50                   	push   eax
c001069c:	e8 ff f8 ff ff       	call   c000ffa0 <VgaText::combineCharAndColour(char, unsigned char)>
c00106a1:	83 c4 10             	add    esp,0x10
c00106a4:	66 89 03             	mov    WORD PTR [ebx],ax
c00106a7:	39 2d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebp
c00106ad:	75 2a                	jne    c00106d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106af:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c00106b5:	85 c0                	test   eax,eax
c00106b7:	74 20                	je     c00106d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00106b9:	52                   	push   edx
c00106ba:	52                   	push   edx
c00106bb:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106c1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106cf:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106d2:	51                   	push   ecx
c00106d3:	55                   	push   ebp
c00106d4:	ff d0                	call   eax
c00106d6:	83 c4 20             	add    esp,0x20
c00106d9:	83 c3 02             	add    ebx,0x2
c00106dc:	50                   	push   eax
c00106dd:	50                   	push   eax
c00106de:	6a 00                	push   0x0
c00106e0:	55                   	push   ebp
c00106e1:	e8 9a f9 ff ff       	call   c0010080 <VgaText::incrementCursor(bool)>
c00106e6:	83 c4 10             	add    esp,0x10
c00106e9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106f0:	75 0f                	jne    c0010701 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106f2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106fa:	0f b7 db             	movzx  ebx,bx
c00106fd:	01 db                	add    ebx,ebx
c00106ff:	01 fb                	add    ebx,edi
c0010701:	b1 01                	mov    cl,0x1
c0010703:	46                   	inc    esi
c0010704:	e9 bd fe ff ff       	jmp    c00105c6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010709:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001070d:	83 ec 0c             	sub    esp,0xc
c0010710:	55                   	push   ebp
c0010711:	e8 a8 f6 ff ff       	call   c000fdbe <VgaText::updateCursor()>
c0010716:	83 c4 10             	add    esp,0x10
c0010719:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001071d:	84 c9                	test   cl,cl
c001071f:	74 0c                	je     c001072d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010721:	83 ec 0c             	sub    esp,0xc
c0010724:	55                   	push   ebp
c0010725:	e8 40 fe ff ff       	call   c001056a <VgaText::doUpdate()>
c001072a:	83 c4 10             	add    esp,0x10
c001072d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010734:	83 c4 1c             	add    esp,0x1c
c0010737:	5b                   	pop    ebx
c0010738:	5e                   	pop    esi
c0010739:	5f                   	pop    edi
c001073a:	5d                   	pop    ebp
c001073b:	c3                   	ret    

c001073c <VgaText::clearScreen()>:
c001073c:	57                   	push   edi
c001073d:	56                   	push   esi
c001073e:	31 f6                	xor    esi,esi
c0010740:	53                   	push   ebx
c0010741:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010745:	52                   	push   edx
c0010746:	6a 00                	push   0x0
c0010748:	6a 00                	push   0x0
c001074a:	53                   	push   ebx
c001074b:	e8 da f8 ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010750:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010757:	83 c4 10             	add    esp,0x10
c001075a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010760:	7e 26                	jle    c0010788 <VgaText::clearScreen()+0x4c>
c0010762:	31 ff                	xor    edi,edi
c0010764:	50                   	push   eax
c0010765:	50                   	push   eax
c0010766:	56                   	push   esi
c0010767:	57                   	push   edi
c0010768:	47                   	inc    edi
c0010769:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001076f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010775:	6a 20                	push   0x20
c0010777:	53                   	push   ebx
c0010778:	e8 35 f8 ff ff       	call   c000ffb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001077d:	83 c4 20             	add    esp,0x20
c0010780:	83 ff 50             	cmp    edi,0x50
c0010783:	75 df                	jne    c0010764 <VgaText::clearScreen()+0x28>
c0010785:	46                   	inc    esi
c0010786:	eb d2                	jmp    c001075a <VgaText::clearScreen()+0x1e>
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	53                   	push   ebx
c001078c:	e8 d9 fd ff ff       	call   c001056a <VgaText::doUpdate()>
c0010791:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010798:	83 c4 10             	add    esp,0x10
c001079b:	5b                   	pop    ebx
c001079c:	5e                   	pop    esi
c001079d:	5f                   	pop    edi
c001079e:	c3                   	ret    
c001079f:	90                   	nop

c00107a0 <VgaText::putchar(char)>:
c00107a0:	56                   	push   esi
c00107a1:	53                   	push   ebx
c00107a2:	83 ec 14             	sub    esp,0x14
c00107a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00107a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107ad:	3c 5b                	cmp    al,0x5b
c00107af:	75 21                	jne    c00107d2 <VgaText::putchar(char)+0x32>
c00107b1:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00107b8:	74 28                	je     c00107e2 <VgaText::putchar(char)+0x42>
c00107ba:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107c3:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107cd:	e9 e2 00 00 00       	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c00107d2:	3c 1b                	cmp    al,0x1b
c00107d4:	75 0c                	jne    c00107e2 <VgaText::putchar(char)+0x42>
c00107d6:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107dd:	e9 d2 00 00 00       	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c00107e2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107e8:	84 c9                	test   cl,cl
c00107ea:	0f 84 ab 00 00 00    	je     c001089b <VgaText::putchar(char)+0xfb>
c00107f0:	8d 50 c0             	lea    edx,[eax-0x40]
c00107f3:	80 fa 3e             	cmp    dl,0x3e
c00107f6:	0f 87 82 00 00 00    	ja     c001087e <VgaText::putchar(char)+0xde>
c00107fc:	3c 6d                	cmp    al,0x6d
c00107fe:	75 4d                	jne    c001084d <VgaText::putchar(char)+0xad>
c0010800:	31 f6                	xor    esi,esi
c0010802:	31 d2                	xor    edx,edx
c0010804:	31 c0                	xor    eax,eax
c0010806:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001080c:	7e 30                	jle    c001083e <VgaText::putchar(char)+0x9e>
c001080e:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010816:	80 fa 3b             	cmp    dl,0x3b
c0010819:	75 17                	jne    c0010832 <VgaText::putchar(char)+0x92>
c001081b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001081f:	50                   	push   eax
c0010820:	53                   	push   ebx
c0010821:	e8 fc f5 ff ff       	call   c000fe22 <VgaText::doANSI_SGR(int)>
c0010826:	59                   	pop    ecx
c0010827:	31 d2                	xor    edx,edx
c0010829:	58                   	pop    eax
c001082a:	31 c0                	xor    eax,eax
c001082c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010830:	eb 09                	jmp    c001083b <VgaText::putchar(char)+0x9b>
c0010832:	6b c0 0a             	imul   eax,eax,0xa
c0010835:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010839:	88 ca                	mov    dl,cl
c001083b:	46                   	inc    esi
c001083c:	eb c8                	jmp    c0010806 <VgaText::putchar(char)+0x66>
c001083e:	84 d2                	test   dl,dl
c0010840:	74 31                	je     c0010873 <VgaText::putchar(char)+0xd3>
c0010842:	50                   	push   eax
c0010843:	53                   	push   ebx
c0010844:	e8 d9 f5 ff ff       	call   c000fe22 <VgaText::doANSI_SGR(int)>
c0010849:	58                   	pop    eax
c001084a:	5a                   	pop    edx
c001084b:	eb 26                	jmp    c0010873 <VgaText::putchar(char)+0xd3>
c001084d:	3c 4a                	cmp    al,0x4a
c001084f:	75 22                	jne    c0010873 <VgaText::putchar(char)+0xd3>
c0010851:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010858:	75 19                	jne    c0010873 <VgaText::putchar(char)+0xd3>
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	53                   	push   ebx
c001085e:	e8 d9 fe ff ff       	call   c001073c <VgaText::clearScreen()>
c0010863:	83 c4 0c             	add    esp,0xc
c0010866:	6a 00                	push   0x0
c0010868:	6a 00                	push   0x0
c001086a:	53                   	push   ebx
c001086b:	e8 ba f7 ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010870:	83 c4 10             	add    esp,0x10
c0010873:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001087c:	eb 36                	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c001087e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010884:	83 fa 0e             	cmp    edx,0xe
c0010887:	7f 2b                	jg     c00108b4 <VgaText::putchar(char)+0x114>
c0010889:	8d 4a 01             	lea    ecx,[edx+0x1]
c001088c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010892:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010899:	eb 19                	jmp    c00108b4 <VgaText::putchar(char)+0x114>
c001089b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108a1:	0f be c0             	movsx  eax,al
c00108a4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00108aa:	50                   	push   eax
c00108ab:	53                   	push   ebx
c00108ac:	e8 ab fa ff ff       	call   c001035c <VgaText::putchar(char, VgaColour, VgaColour)>
c00108b1:	83 c4 10             	add    esp,0x10
c00108b4:	83 c4 14             	add    esp,0x14
c00108b7:	5b                   	pop    ebx
c00108b8:	5e                   	pop    esi
c00108b9:	c3                   	ret    

c00108ba <VgaText::puts(char const*)>:
c00108ba:	53                   	push   ebx
c00108bb:	83 ec 08             	sub    esp,0x8
c00108be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108c5:	84 c0                	test   al,al
c00108c7:	74 12                	je     c00108db <VgaText::puts(char const*)+0x21>
c00108c9:	43                   	inc    ebx
c00108ca:	51                   	push   ecx
c00108cb:	51                   	push   ecx
c00108cc:	50                   	push   eax
c00108cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d1:	e8 ca fe ff ff       	call   c00107a0 <VgaText::putchar(char)>
c00108d6:	83 c4 10             	add    esp,0x10
c00108d9:	eb e7                	jmp    c00108c2 <VgaText::puts(char const*)+0x8>
c00108db:	83 c4 08             	add    esp,0x8
c00108de:	5b                   	pop    ebx
c00108df:	c3                   	ret    

c00108e0 <VgaText::putx(unsigned int)>:
c00108e0:	57                   	push   edi
c00108e1:	b9 11 00 00 00       	mov    ecx,0x11
c00108e6:	56                   	push   esi
c00108e7:	be ee 6c 02 c0       	mov    esi,0xc0026cee
c00108ec:	53                   	push   ebx
c00108ed:	83 ec 20             	sub    esp,0x20
c00108f0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108f4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108f8:	fc                   	cld    
c00108f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108fb:	be 08 00 00 00       	mov    esi,0x8
c0010900:	50                   	push   eax
c0010901:	50                   	push   eax
c0010902:	89 d8                	mov    eax,ebx
c0010904:	c1 e3 04             	shl    ebx,0x4
c0010907:	c1 e8 1c             	shr    eax,0x1c
c001090a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001090f:	50                   	push   eax
c0010910:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010914:	e8 87 fe ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010919:	83 c4 10             	add    esp,0x10
c001091c:	4e                   	dec    esi
c001091d:	75 e1                	jne    c0010900 <VgaText::putx(unsigned int)+0x20>
c001091f:	83 c4 20             	add    esp,0x20
c0010922:	5b                   	pop    ebx
c0010923:	5e                   	pop    esi
c0010924:	5f                   	pop    edi
c0010925:	c3                   	ret    

c0010926 <VgaText::VgaText(char const*)>:
c0010926:	57                   	push   edi
c0010927:	56                   	push   esi
c0010928:	53                   	push   ebx
c0010929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092d:	83 ec 08             	sub    esp,0x8
c0010930:	6a 00                	push   0x0
c0010932:	50                   	push   eax
c0010933:	e8 4a 05 00 00       	call   c0010e82 <UnixFile::UnixFile(int)>
c0010938:	83 c4 10             	add    esp,0x10
c001093b:	ba 54 6d 02 c0       	mov    edx,0xc0026d54
c0010940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010944:	89 10                	mov    DWORD PTR [eax],edx
c0010946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001094a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010958:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010966:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001096d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010971:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010998:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001099f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a3:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00109aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ae:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00109b4:	bb a0 a4 02 c0       	mov    ebx,0xc002a4a0
c00109b9:	b8 08 00 00 00       	mov    eax,0x8
c00109be:	fc                   	cld    
c00109bf:	89 d7                	mov    edi,edx
c00109c1:	89 de                	mov    esi,ebx
c00109c3:	89 c1                	mov    ecx,eax
c00109c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 1e 10 00 00       	add    eax,0x101e
c00109d0:	83 ec 08             	sub    esp,0x8
c00109d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d7:	50                   	push   eax
c00109d8:	e8 ae fd fe ff       	call   c000078b <strcpy>
c00109dd:	83 c4 10             	add    esp,0x10
c00109e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f2:	83 c0 0c             	add    eax,0xc
c00109f5:	83 ec 04             	sub    esp,0x4
c00109f8:	68 00 0f 00 00       	push   0xf00
c00109fd:	6a 00                	push   0x0
c00109ff:	50                   	push   eax
c0010a00:	e8 e7 fc fe ff       	call   c00006ec <memset>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	83 ec 04             	sub    esp,0x4
c0010a0b:	6a 00                	push   0x0
c0010a0d:	6a 07                	push   0x7
c0010a0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a13:	e8 c2 f4 ff ff       	call   c000feda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010a18:	83 c4 10             	add    esp,0x10
c0010a1b:	83 ec 08             	sub    esp,0x8
c0010a1e:	6a 02                	push   0x2
c0010a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a24:	e8 49 fa ff ff       	call   c0010472 <VgaText::setCursorHeight(int)>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	83 ec 04             	sub    esp,0x4
c0010a2f:	6a 00                	push   0x0
c0010a31:	6a 00                	push   0x0
c0010a33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a37:	e8 ee f5 ff ff       	call   c001002a <VgaText::setCursor(int, int)>
c0010a3c:	83 c4 10             	add    esp,0x10
c0010a3f:	83 ec 08             	sub    esp,0x8
c0010a42:	6a 01                	push   0x1
c0010a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a48:	e8 8b f3 ff ff       	call   c000fdd8 <VgaText::showCursor(bool)>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	83 ec 08             	sub    esp,0x8
c0010a53:	6a 01                	push   0x1
c0010a55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a59:	e8 8a f3 ff ff       	call   c000fde8 <VgaText::disableBlink(bool)>
c0010a5e:	83 c4 10             	add    esp,0x10
c0010a61:	83 ec 0c             	sub    esp,0xc
c0010a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a68:	e8 cf fc ff ff       	call   c001073c <VgaText::clearScreen()>
c0010a6d:	83 c4 10             	add    esp,0x10
c0010a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a74:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7f:	05 9e 10 00 00       	add    eax,0x109e
c0010a84:	83 ec 04             	sub    esp,0x4
c0010a87:	68 96 00 00 00       	push   0x96
c0010a8c:	6a 00                	push   0x0
c0010a8e:	50                   	push   eax
c0010a8f:	e8 58 fc fe ff       	call   c00006ec <memset>
c0010a94:	83 c4 10             	add    esp,0x10
c0010a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9b:	05 34 11 00 00       	add    eax,0x1134
c0010aa0:	83 ec 04             	sub    esp,0x4
c0010aa3:	68 2c 01 00 00       	push   0x12c
c0010aa8:	6a 00                	push   0x0
c0010aaa:	50                   	push   eax
c0010aab:	e8 3c fc fe ff       	call   c00006ec <memset>
c0010ab0:	83 c4 10             	add    esp,0x10
c0010ab3:	90                   	nop
c0010ab4:	5b                   	pop    ebx
c0010ab5:	5e                   	pop    esi
c0010ab6:	5f                   	pop    edi
c0010ab7:	c3                   	ret    

c0010ab8 <VgaText::receiveKey(unsigned char)>:
c0010ab8:	55                   	push   ebp
c0010ab9:	57                   	push   edi
c0010aba:	56                   	push   esi
c0010abb:	53                   	push   ebx
c0010abc:	83 ec 1c             	sub    esp,0x1c
c0010abf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ac3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ac7:	84 db                	test   bl,bl
c0010ac9:	0f 84 c9 00 00 00    	je     c0010b98 <VgaText::receiveKey(unsigned char)+0xe0>
c0010acf:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010ad5:	80 fb 08             	cmp    bl,0x8
c0010ad8:	75 2c                	jne    c0010b06 <VgaText::receiveKey(unsigned char)+0x4e>
c0010ada:	83 ec 0c             	sub    esp,0xc
c0010add:	57                   	push   edi
c0010ade:	e8 26 fc fe ff       	call   c0000709 <strlen>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	74 41                	je     c0010b2b <VgaText::receiveKey(unsigned char)+0x73>
c0010aea:	50                   	push   eax
c0010aeb:	50                   	push   eax
c0010aec:	6a 08                	push   0x8
c0010aee:	56                   	push   esi
c0010aef:	e8 ac fc ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010af4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010af7:	e8 0d fc fe ff       	call   c0000709 <strlen>
c0010afc:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010b04:	eb 22                	jmp    c0010b28 <VgaText::receiveKey(unsigned char)+0x70>
c0010b06:	0f be c3             	movsx  eax,bl
c0010b09:	52                   	push   edx
c0010b0a:	52                   	push   edx
c0010b0b:	50                   	push   eax
c0010b0c:	56                   	push   esi
c0010b0d:	e8 8e fc ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010b12:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010b16:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010b1b:	59                   	pop    ecx
c0010b1c:	5d                   	pop    ebp
c0010b1d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b21:	50                   	push   eax
c0010b22:	57                   	push   edi
c0010b23:	e8 1a fd fe ff       	call   c0000842 <strcat>
c0010b28:	83 c4 10             	add    esp,0x10
c0010b2b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b32:	75 05                	jne    c0010b39 <VgaText::receiveKey(unsigned char)+0x81>
c0010b34:	80 fb 0a             	cmp    bl,0xa
c0010b37:	75 53                	jne    c0010b8c <VgaText::receiveKey(unsigned char)+0xd4>
c0010b39:	83 ec 0c             	sub    esp,0xc
c0010b3c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b42:	53                   	push   ebx
c0010b43:	e8 c1 fb fe ff       	call   c0000709 <strlen>
c0010b48:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b4b:	89 c5                	mov    ebp,eax
c0010b4d:	e8 b7 fb fe ff       	call   c0000709 <strlen>
c0010b52:	83 c4 10             	add    esp,0x10
c0010b55:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b59:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b5e:	76 10                	jbe    c0010b70 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b60:	83 ec 0c             	sub    esp,0xc
c0010b63:	68 ff 6c 02 c0       	push   0xc0026cff
c0010b68:	e8 97 8d 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0010b6d:	83 c4 10             	add    esp,0x10
c0010b70:	50                   	push   eax
c0010b71:	50                   	push   eax
c0010b72:	57                   	push   edi
c0010b73:	53                   	push   ebx
c0010b74:	e8 c9 fc fe ff       	call   c0000842 <strcat>
c0010b79:	83 c4 0c             	add    esp,0xc
c0010b7c:	68 96 00 00 00       	push   0x96
c0010b81:	6a 00                	push   0x0
c0010b83:	57                   	push   edi
c0010b84:	e8 63 fb fe ff       	call   c00006ec <memset>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	56                   	push   esi
c0010b90:	e8 d5 f9 ff ff       	call   c001056a <VgaText::doUpdate()>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	83 c4 1c             	add    esp,0x1c
c0010b9b:	5b                   	pop    ebx
c0010b9c:	5e                   	pop    esi
c0010b9d:	5f                   	pop    edi
c0010b9e:	5d                   	pop    ebp
c0010b9f:	c3                   	ret    

c0010ba0 <VgaText::write(unsigned long long, void*, int*)>:
c0010ba0:	55                   	push   ebp
c0010ba1:	57                   	push   edi
c0010ba2:	56                   	push   esi
c0010ba3:	53                   	push   ebx
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010bab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010baf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010bb3:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010bba:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010bbd:	39 eb                	cmp    ebx,ebp
c0010bbf:	74 13                	je     c0010bd4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010bc1:	43                   	inc    ebx
c0010bc2:	50                   	push   eax
c0010bc3:	50                   	push   eax
c0010bc4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010bc8:	50                   	push   eax
c0010bc9:	56                   	push   esi
c0010bca:	e8 d1 fb ff ff       	call   c00107a0 <VgaText::putchar(char)>
c0010bcf:	83 c4 10             	add    esp,0x10
c0010bd2:	eb e9                	jmp    c0010bbd <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bd4:	83 ec 0c             	sub    esp,0xc
c0010bd7:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010bde:	56                   	push   esi
c0010bdf:	e8 86 f9 ff ff       	call   c001056a <VgaText::doUpdate()>
c0010be4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010be8:	89 38                	mov    DWORD PTR [eax],edi
c0010bea:	83 c4 1c             	add    esp,0x1c
c0010bed:	31 c0                	xor    eax,eax
c0010bef:	5b                   	pop    ebx
c0010bf0:	5e                   	pop    esi
c0010bf1:	5f                   	pop    edi
c0010bf2:	5d                   	pop    ebp
c0010bf3:	c3                   	ret    

c0010bf4 <newTerminal(char*)>:
c0010bf4:	83 ec 28             	sub    esp,0x28
c0010bf7:	68 60 12 00 00       	push   0x1260
c0010bfc:	e8 67 15 00 00       	call   c0012168 <operator new(unsigned long)>
c0010c01:	5a                   	pop    edx
c0010c02:	59                   	pop    ecx
c0010c03:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010c07:	50                   	push   eax
c0010c08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c0c:	e8 15 fd ff ff       	call   c0010926 <VgaText::VgaText(char const*)>
c0010c11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010c15:	83 c4 2c             	add    esp,0x2c
c0010c18:	c3                   	ret    
c0010c19:	90                   	nop

c0010c1a <TSS::TSS()>:
c0010c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c1e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c25:	90                   	nop
c0010c26:	c3                   	ret    
c0010c27:	90                   	nop

c0010c28 <TSS::setESP(unsigned long)>:
c0010c28:	55                   	push   ebp
c0010c29:	89 e5                	mov    ebp,esp
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c37:	90                   	nop
c0010c38:	5d                   	pop    ebp
c0010c39:	c3                   	ret    

c0010c3a <TSS::flush()>:
c0010c3a:	55                   	push   ebp
c0010c3b:	89 e5                	mov    ebp,esp
c0010c3d:	83 ec 10             	sub    esp,0x10
c0010c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c45:	83 c8 03             	or     eax,0x3
c0010c48:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c4c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c50:	66 89 d0             	mov    ax,dx
c0010c53:	0f 00 d8             	ltr    ax
c0010c56:	90                   	nop
c0010c57:	c9                   	leave  
c0010c58:	c3                   	ret    
c0010c59:	90                   	nop

c0010c5a <TSS::setup(unsigned long, unsigned long)>:
c0010c5a:	55                   	push   ebp
c0010c5b:	89 e5                	mov    ebp,esp
c0010c5d:	53                   	push   ebx
c0010c5e:	83 ec 14             	sub    esp,0x14
c0010c61:	83 ec 0c             	sub    esp,0xc
c0010c64:	6a 68                	push   0x68
c0010c66:	e8 fb e4 ff ff       	call   c000f166 <malloc>
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	89 c2                	mov    edx,eax
c0010c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7c:	83 ec 04             	sub    esp,0x4
c0010c7f:	6a 68                	push   0x68
c0010c81:	6a 00                	push   0x0
c0010c83:	50                   	push   eax
c0010c84:	e8 63 fa fe ff       	call   c00006ec <memset>
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c92:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c9e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010caa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010cbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ccb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cce:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cda:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ce9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010cf5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cfe:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d08:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d0b:	e8 85 43 01 00       	call   c0025095 <CPU::readCR3()>
c0010d10:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d19:	83 ec 08             	sub    esp,0x8
c0010d1c:	50                   	push   eax
c0010d1d:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d20:	50                   	push   eax
c0010d21:	e8 16 dc ff ff       	call   c000e93c <GDTEntry::setBase(unsigned int)>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	83 ec 08             	sub    esp,0x8
c0010d2c:	6a 68                	push   0x68
c0010d2e:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d31:	50                   	push   eax
c0010d32:	e8 21 dc ff ff       	call   c000e958 <GDTEntry::setLimit(unsigned int)>
c0010d37:	83 c4 10             	add    esp,0x10
c0010d3a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d3e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d41:	83 e0 0f             	and    eax,0xf
c0010d44:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d47:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d4a:	83 c8 40             	or     eax,0x40
c0010d4d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d50:	e8 2f 6b 00 00       	call   c0017884 <thisCPU()>
c0010d55:	05 78 01 00 00       	add    eax,0x178
c0010d5a:	83 ec 04             	sub    esp,0x4
c0010d5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d60:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d63:	50                   	push   eax
c0010d64:	e8 23 dc ff ff       	call   c000e98c <GDT::addEntry(GDTEntry)>
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	89 c2                	mov    edx,eax
c0010d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d71:	89 10                	mov    DWORD PTR [eax],edx
c0010d73:	e8 0c 6b 00 00       	call   c0017884 <thisCPU()>
c0010d78:	05 78 01 00 00       	add    eax,0x178
c0010d7d:	83 ec 0c             	sub    esp,0xc
c0010d80:	50                   	push   eax
c0010d81:	e8 4a dc ff ff       	call   c000e9d0 <GDT::flush()>
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d8e:	83 ec 08             	sub    esp,0x8
c0010d91:	50                   	push   eax
c0010d92:	68 68 6d 02 c0       	push   0xc0026d68
c0010d97:	e8 bb 14 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010da2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010da4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010da7:	c9                   	leave  
c0010da8:	c3                   	ret    
c0010da9:	90                   	nop

c0010daa <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010db2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010db5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010dba:	75 08                	jne    c0010dc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010dbc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dc2:	eb 38                	jmp    c0010dfc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010dc4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010dc9:	75 17                	jne    c0010de2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010dcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dd3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ddf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010de2:	89 c1                	mov    ecx,eax
c0010de4:	83 e1 fd             	and    ecx,0xfffffffd
c0010de7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ded:	74 cd                	je     c0010dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010def:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010df4:	83 e0 ef             	and    eax,0xffffffef
c0010df7:	83 f8 08             	cmp    eax,0x8
c0010dfa:	76 c0                	jbe    c0010dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010dfc:	31 c0                	xor    eax,eax
c0010dfe:	c3                   	ret    
c0010dff:	90                   	nop

c0010e00 <ReservedFilename::isAtty()>:
c0010e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e07:	31 c0                	xor    eax,eax
c0010e09:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e0f:	74 09                	je     c0010e1a <ReservedFilename::isAtty()+0x1a>
c0010e11:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e17:	0f 94 c0             	sete   al
c0010e1a:	c3                   	ret    
c0010e1b:	90                   	nop

c0010e1c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e2b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e30:	75 08                	jne    c0010e3a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e32:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e38:	eb 3d                	jmp    c0010e77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e3a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e3f:	75 17                	jne    c0010e58 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e55:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e5d:	75 04                	jne    c0010e63 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e5f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e61:	eb 14                	jmp    c0010e77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e63:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e68:	74 c8                	je     c0010e32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e6a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e6f:	83 e0 ef             	and    eax,0xffffffef
c0010e72:	83 f8 08             	cmp    eax,0x8
c0010e75:	76 bb                	jbe    c0010e32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e77:	31 c0                	xor    eax,eax
c0010e79:	c3                   	ret    

c0010e7a <UnixFile::getFileDescriptor()>:
c0010e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e81:	c3                   	ret    

c0010e82 <UnixFile::UnixFile(int)>:
c0010e82:	53                   	push   ebx
c0010e83:	83 ec 18             	sub    esp,0x18
c0010e86:	ba 54 6e 02 c0       	mov    edx,0xc0026e54
c0010e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e8f:	89 10                	mov    DWORD PTR [eax],edx
c0010e91:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e99:	0f 8f 4d 01 00 00    	jg     c0010fec <UnixFile::UnixFile(int)+0x16a>
c0010e9f:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0010ea4:	8d 50 01             	lea    edx,[eax+0x1]
c0010ea7:	89 15 20 94 02 c0    	mov    DWORD PTR ds:0xc0029420,edx
c0010ead:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010eb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010eb4:	83 ec 08             	sub    esp,0x8
c0010eb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ebb:	68 58 a5 02 c0       	push   0xc002a558
c0010ec0:	e8 45 42 01 00       	call   c002510a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	a0 54 a5 02 c0       	mov    al,ds:0xc002a554
c0010ecd:	83 f0 01             	xor    eax,0x1
c0010ed0:	84 c0                	test   al,al
c0010ed2:	0f 84 15 01 00 00    	je     c0010fed <UnixFile::UnixFile(int)+0x16b>
c0010ed8:	c6 05 54 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a554,0x1
c0010edf:	83 ec 0c             	sub    esp,0xc
c0010ee2:	6a 0c                	push   0xc
c0010ee4:	e8 7f 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010ee9:	83 c4 10             	add    esp,0x10
c0010eec:	89 c3                	mov    ebx,eax
c0010eee:	83 ec 08             	sub    esp,0x8
c0010ef1:	68 03 ff ff 0f       	push   0xfffff03
c0010ef6:	53                   	push   ebx
c0010ef7:	e8 f6 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	89 1d 4c a5 02 c0    	mov    DWORD PTR ds:0xc002a54c,ebx
c0010f05:	83 ec 0c             	sub    esp,0xc
c0010f08:	6a 0c                	push   0xc
c0010f0a:	e8 59 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f0f:	83 c4 10             	add    esp,0x10
c0010f12:	89 c3                	mov    ebx,eax
c0010f14:	83 ec 08             	sub    esp,0x8
c0010f17:	68 01 ff ff 0f       	push   0xfffff01
c0010f1c:	53                   	push   ebx
c0010f1d:	e8 d0 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	89 1d 50 a5 02 c0    	mov    DWORD PTR ds:0xc002a550,ebx
c0010f2b:	83 ec 0c             	sub    esp,0xc
c0010f2e:	6a 0c                	push   0xc
c0010f30:	e8 33 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	89 c3                	mov    ebx,eax
c0010f3a:	83 ec 08             	sub    esp,0x8
c0010f3d:	68 00 ff ff 0f       	push   0xfffff00
c0010f42:	53                   	push   ebx
c0010f43:	e8 aa 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010f48:	83 c4 10             	add    esp,0x10
c0010f4b:	89 1d 44 a5 02 c0    	mov    DWORD PTR ds:0xc002a544,ebx
c0010f51:	83 ec 0c             	sub    esp,0xc
c0010f54:	6a 0c                	push   0xc
c0010f56:	e8 0d 12 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f5b:	83 c4 10             	add    esp,0x10
c0010f5e:	89 c3                	mov    ebx,eax
c0010f60:	83 ec 08             	sub    esp,0x8
c0010f63:	68 02 ff ff 0f       	push   0xfffff02
c0010f68:	53                   	push   ebx
c0010f69:	e8 84 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	89 1d 48 a5 02 c0    	mov    DWORD PTR ds:0xc002a548,ebx
c0010f77:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f7f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f84:	7f 67                	jg     c0010fed <UnixFile::UnixFile(int)+0x16b>
c0010f86:	83 ec 0c             	sub    esp,0xc
c0010f89:	6a 0c                	push   0xc
c0010f8b:	e8 d8 11 00 00       	call   c0012168 <operator new(unsigned long)>
c0010f90:	83 c4 10             	add    esp,0x10
c0010f93:	89 c3                	mov    ebx,eax
c0010f95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f99:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f9e:	83 ec 08             	sub    esp,0x8
c0010fa1:	50                   	push   eax
c0010fa2:	53                   	push   ebx
c0010fa3:	e8 4a 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010fa8:	83 c4 10             	add    esp,0x10
c0010fab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010faf:	89 1c 85 20 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ae0],ebx
c0010fb6:	83 ec 0c             	sub    esp,0xc
c0010fb9:	6a 0c                	push   0xc
c0010fbb:	e8 a8 11 00 00       	call   c0012168 <operator new(unsigned long)>
c0010fc0:	83 c4 10             	add    esp,0x10
c0010fc3:	89 c3                	mov    ebx,eax
c0010fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc9:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fce:	83 ec 08             	sub    esp,0x8
c0010fd1:	50                   	push   eax
c0010fd2:	53                   	push   ebx
c0010fd3:	e8 1a 00 00 00       	call   c0010ff2 <ReservedFilename::ReservedFilename(int)>
c0010fd8:	83 c4 10             	add    esp,0x10
c0010fdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fdf:	89 1c 85 e0 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5b20],ebx
c0010fe6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fea:	eb 93                	jmp    c0010f7f <UnixFile::UnixFile(int)+0xfd>
c0010fec:	90                   	nop
c0010fed:	83 c4 18             	add    esp,0x18
c0010ff0:	5b                   	pop    ebx
c0010ff1:	c3                   	ret    

c0010ff2 <ReservedFilename::ReservedFilename(int)>:
c0010ff2:	83 ec 0c             	sub    esp,0xc
c0010ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff9:	83 ec 08             	sub    esp,0x8
c0010ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011000:	50                   	push   eax
c0011001:	e8 7c fe ff ff       	call   c0010e82 <UnixFile::UnixFile(int)>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	ba 70 6e 02 c0       	mov    edx,0xc0026e70
c001100e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011012:	89 10                	mov    DWORD PTR [eax],edx
c0011014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001101c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001101f:	90                   	nop
c0011020:	83 c4 0c             	add    esp,0xc
c0011023:	c3                   	ret    

c0011024 <UnixFile::~UnixFile()>:
c0011024:	83 ec 1c             	sub    esp,0x1c
c0011027:	ba 54 6e 02 c0       	mov    edx,0xc0026e54
c001102c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011030:	89 10                	mov    DWORD PTR [eax],edx
c0011032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001103e:	7f 73                	jg     c00110b3 <UnixFile::~UnixFile()+0x8f>
c0011040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	68 58 a5 02 c0       	push   0xc002a558
c0011050:	e8 89 41 01 00       	call   c00251de <LinkedList<UnixFile>::getFirstElement()>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001105c:	83 ec 0c             	sub    esp,0xc
c001105f:	68 58 a5 02 c0       	push   0xc002a558
c0011064:	e8 7d 41 01 00       	call   c00251e6 <LinkedList<UnixFile>::removeFirst()>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011074:	74 40                	je     c00110b6 <UnixFile::~UnixFile()+0x92>
c0011076:	83 ec 08             	sub    esp,0x8
c0011079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001107d:	68 58 a5 02 c0       	push   0xc002a558
c0011082:	e8 83 40 01 00       	call   c002510a <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001108e:	8d 50 01             	lea    edx,[eax+0x1]
c0011091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011095:	3d 88 13 00 00       	cmp    eax,0x1388
c001109a:	0f 94 c0             	sete   al
c001109d:	84 c0                	test   al,al
c001109f:	74 a7                	je     c0011048 <UnixFile::~UnixFile()+0x24>
c00110a1:	83 ec 0c             	sub    esp,0xc
c00110a4:	68 2c 6e 02 c0       	push   0xc0026e2c
c00110a9:	e8 56 88 00 00       	call   c0019904 <Krnl::panic(char const*)>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	eb 95                	jmp    c0011048 <UnixFile::~UnixFile()+0x24>
c00110b3:	90                   	nop
c00110b4:	eb 01                	jmp    c00110b7 <UnixFile::~UnixFile()+0x93>
c00110b6:	90                   	nop
c00110b7:	90                   	nop
c00110b8:	83 c4 1c             	add    esp,0x1c
c00110bb:	c3                   	ret    

c00110bc <UnixFile::~UnixFile()>:
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	83 ec 0c             	sub    esp,0xc
c00110c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110c6:	e8 59 ff ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c00110cb:	83 c4 10             	add    esp,0x10
c00110ce:	83 ec 08             	sub    esp,0x8
c00110d1:	6a 0c                	push   0xc
c00110d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110d7:	e8 9b 10 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c00110dc:	83 c4 10             	add    esp,0x10
c00110df:	83 c4 0c             	add    esp,0xc
c00110e2:	c3                   	ret    
c00110e3:	90                   	nop

c00110e4 <ReservedFilename::~ReservedFilename()>:
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	ba 70 6e 02 c0       	mov    edx,0xc0026e70
c00110ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f0:	89 10                	mov    DWORD PTR [eax],edx
c00110f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f6:	83 ec 0c             	sub    esp,0xc
c00110f9:	50                   	push   eax
c00110fa:	e8 25 ff ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c00110ff:	83 c4 10             	add    esp,0x10
c0011102:	90                   	nop
c0011103:	83 c4 0c             	add    esp,0xc
c0011106:	c3                   	ret    
c0011107:	90                   	nop

c0011108 <ReservedFilename::~ReservedFilename()>:
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	83 ec 0c             	sub    esp,0xc
c001110e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011112:	e8 cd ff ff ff       	call   c00110e4 <ReservedFilename::~ReservedFilename()>
c0011117:	83 c4 10             	add    esp,0x10
c001111a:	83 ec 08             	sub    esp,0x8
c001111d:	6a 0c                	push   0xc
c001111f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011123:	e8 4f 10 00 00       	call   c0012177 <operator delete(void*, unsigned long)>
c0011128:	83 c4 10             	add    esp,0x10
c001112b:	83 c4 0c             	add    esp,0xc
c001112e:	c3                   	ret    

c001112f <getFromFileDescriptor(int)>:
c001112f:	53                   	push   ebx
c0011130:	83 ec 08             	sub    esp,0x8
c0011133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001113d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011143:	7f 2c                	jg     c0011171 <getFromFileDescriptor(int)+0x42>
c0011145:	83 ec 0c             	sub    esp,0xc
c0011148:	68 58 a5 02 c0       	push   0xc002a558
c001114d:	e8 8c 40 01 00       	call   c00251de <LinkedList<UnixFile>::getFirstElement()>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	85 c0                	test   eax,eax
c0011157:	75 04                	jne    c001115d <getFromFileDescriptor(int)+0x2e>
c0011159:	31 c0                	xor    eax,eax
c001115b:	eb 6e                	jmp    c00111cb <getFromFileDescriptor(int)+0x9c>
c001115d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011160:	74 69                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c0011162:	52                   	push   edx
c0011163:	52                   	push   edx
c0011164:	50                   	push   eax
c0011165:	68 58 a5 02 c0       	push   0xc002a558
c001116a:	e8 19 41 01 00       	call   c0025288 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001116f:	eb e1                	jmp    c0011152 <getFromFileDescriptor(int)+0x23>
c0011171:	a1 4c a5 02 c0       	mov    eax,ds:0xc002a54c
c0011176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001117c:	74 4d                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c001117e:	a1 50 a5 02 c0       	mov    eax,ds:0xc002a550
c0011183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011189:	74 40                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c001118b:	a1 48 a5 02 c0       	mov    eax,ds:0xc002a548
c0011190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011196:	74 33                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c0011198:	a1 44 a5 02 c0       	mov    eax,ds:0xc002a544
c001119d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00111a3:	74 26                	je     c00111cb <getFromFileDescriptor(int)+0x9c>
c00111a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111ab:	83 f8 08             	cmp    eax,0x8
c00111ae:	77 09                	ja     c00111b9 <getFromFileDescriptor(int)+0x8a>
c00111b0:	8b 04 85 20 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ae0]
c00111b7:	eb 12                	jmp    c00111cb <getFromFileDescriptor(int)+0x9c>
c00111b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111bf:	83 fb 08             	cmp    ebx,0x8
c00111c2:	77 95                	ja     c0011159 <getFromFileDescriptor(int)+0x2a>
c00111c4:	8b 04 9d e0 a4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5b20]
c00111cb:	83 c4 08             	add    esp,0x8
c00111ce:	5b                   	pop    ebx
c00111cf:	c3                   	ret    

c00111d0 <__static_initialization_and_destruction_0(int, int)>:
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111d8:	75 34                	jne    c001120e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111e2:	75 2a                	jne    c001120e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111e4:	83 ec 0c             	sub    esp,0xc
c00111e7:	68 58 a5 02 c0       	push   0xc002a558
c00111ec:	e8 c1 3e 01 00       	call   c00250b2 <LinkedList<UnixFile>::LinkedList()>
c00111f1:	83 c4 10             	add    esp,0x10
c00111f4:	83 ec 04             	sub    esp,0x4
c00111f7:	68 a8 93 02 c0       	push   0xc00293a8
c00111fc:	68 58 a5 02 c0       	push   0xc002a558
c0011201:	68 b0 50 02 c0       	push   0xc00250b0
c0011206:	e8 e8 0e 00 00       	call   c00120f3 <__cxa_atexit>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	90                   	nop
c001120f:	83 c4 0c             	add    esp,0xc
c0011212:	c3                   	ret    

c0011213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011213:	83 ec 0c             	sub    esp,0xc
c0011216:	83 ec 08             	sub    esp,0x8
c0011219:	68 ff ff 00 00       	push   0xffff
c001121e:	6a 01                	push   0x1
c0011220:	e8 ab ff ff ff       	call   c00111d0 <__static_initialization_and_destruction_0(int, int)>
c0011225:	83 c4 10             	add    esp,0x10
c0011228:	83 c4 0c             	add    esp,0xc
c001122b:	c3                   	ret    

c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001122c:	53                   	push   ebx
c001122d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001123b:	89 c8                	mov    eax,ecx
c001123d:	d1 e8                	shr    eax,1
c001123f:	03 05 28 94 02 c0    	add    eax,DWORD PTR ds:0xc0029428
c0011245:	83 e1 01             	and    ecx,0x1
c0011248:	8a 10                	mov    dl,BYTE PTR [eax]
c001124a:	75 09                	jne    c0011255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001124c:	83 e2 f0             	and    edx,0xfffffff0
c001124f:	09 da                	or     edx,ebx
c0011251:	88 10                	mov    BYTE PTR [eax],dl
c0011253:	5b                   	pop    ebx
c0011254:	c3                   	ret    
c0011255:	c1 e3 04             	shl    ebx,0x4
c0011258:	83 e2 0f             	and    edx,0xf
c001125b:	09 da                	or     edx,ebx
c001125d:	88 10                	mov    BYTE PTR [eax],dl
c001125f:	5b                   	pop    ebx
c0011260:	c3                   	ret    

c0011261 <Virt::getPageState(unsigned long)>:
c0011261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011265:	8b 0d 28 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029428
c001126b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011271:	89 d0                	mov    eax,edx
c0011273:	d1 e8                	shr    eax,1
c0011275:	83 e2 01             	and    edx,0x1
c0011278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001127b:	75 04                	jne    c0011281 <Virt::getPageState(unsigned long)+0x20>
c001127d:	83 e0 0f             	and    eax,0xf
c0011280:	c3                   	ret    
c0011281:	c0 e8 04             	shr    al,0x4
c0011284:	c3                   	ret    

c0011285 <Virt::allocateKernelVirtualPages(int)>:
c0011285:	55                   	push   ebp
c0011286:	31 ed                	xor    ebp,ebp
c0011288:	57                   	push   edi
c0011289:	56                   	push   esi
c001128a:	53                   	push   ebx
c001128b:	31 db                	xor    ebx,ebx
c001128d:	83 ec 1c             	sub    esp,0x1c
c0011290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011294:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c001129a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001129f:	57                   	push   edi
c00112a0:	e8 bc ff ff ff       	call   c0011261 <Virt::getPageState(unsigned long)>
c00112a5:	5a                   	pop    edx
c00112a6:	84 c0                	test   al,al
c00112a8:	75 3a                	jne    c00112e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112aa:	85 db                	test   ebx,ebx
c00112ac:	75 02                	jne    c00112b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112ae:	89 fd                	mov    ebp,edi
c00112b0:	43                   	inc    ebx
c00112b1:	39 f3                	cmp    ebx,esi
c00112b3:	74 5a                	je     c001130f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112b5:	47                   	inc    edi
c00112b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112bc:	76 31                	jbe    c00112ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112be:	c7 05 24 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029424,0xc8000
c00112c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112cd:	75 28                	jne    c00112f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00112cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112d9:	57                   	push   edi
c00112da:	e8 82 ff ff ff       	call   c0011261 <Virt::getPageState(unsigned long)>
c00112df:	5a                   	pop    edx
c00112e0:	84 c0                	test   al,al
c00112e2:	74 c6                	je     c00112aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00112e4:	31 db                	xor    ebx,ebx
c00112e6:	47                   	inc    edi
c00112e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112ed:	77 cf                	ja     c00112be <Virt::allocateKernelVirtualPages(int)+0x39>
c00112ef:	89 3d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edi
c00112f5:	eb a8                	jmp    c001129f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112f7:	83 ec 0c             	sub    esp,0xc
c00112fa:	68 84 6e 02 c0       	push   0xc0026e84
c00112ff:	e8 00 86 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0011304:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c001130a:	83 c4 10             	add    esp,0x10
c001130d:	eb 90                	jmp    c001129f <Virt::allocateKernelVirtualPages(int)+0x1a>
c001130f:	89 2d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebp
c0011315:	4b                   	dec    ebx
c0011316:	74 5f                	je     c0011377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011318:	85 f6                	test   esi,esi
c001131a:	74 3d                	je     c0011359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001131c:	89 e8                	mov    eax,ebp
c001131e:	31 db                	xor    ebx,ebx
c0011320:	8d 7e ff             	lea    edi,[esi-0x1]
c0011323:	eb 14                	jmp    c0011339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011325:	6a 01                	push   0x1
c0011327:	43                   	inc    ebx
c0011328:	50                   	push   eax
c0011329:	e8 fe fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001132e:	58                   	pop    eax
c001132f:	39 f3                	cmp    ebx,esi
c0011331:	5a                   	pop    edx
c0011332:	74 25                	je     c0011359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011334:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0011339:	8d 50 01             	lea    edx,[eax+0x1]
c001133c:	85 db                	test   ebx,ebx
c001133e:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c0011344:	74 20                	je     c0011366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011346:	39 df                	cmp    edi,ebx
c0011348:	75 db                	jne    c0011325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001134a:	6a 03                	push   0x3
c001134c:	43                   	inc    ebx
c001134d:	50                   	push   eax
c001134e:	e8 d9 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011353:	59                   	pop    ecx
c0011354:	39 f3                	cmp    ebx,esi
c0011356:	58                   	pop    eax
c0011357:	75 db                	jne    c0011334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011359:	83 c4 1c             	add    esp,0x1c
c001135c:	89 e8                	mov    eax,ebp
c001135e:	5b                   	pop    ebx
c001135f:	c1 e0 0c             	shl    eax,0xc
c0011362:	5e                   	pop    esi
c0011363:	5f                   	pop    edi
c0011364:	5d                   	pop    ebp
c0011365:	c3                   	ret    
c0011366:	6a 02                	push   0x2
c0011368:	bb 01 00 00 00       	mov    ebx,0x1
c001136d:	50                   	push   eax
c001136e:	e8 b9 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011373:	58                   	pop    eax
c0011374:	5a                   	pop    edx
c0011375:	eb bd                	jmp    c0011334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011377:	6a 04                	push   0x4
c0011379:	8d 45 01             	lea    eax,[ebp+0x1]
c001137c:	55                   	push   ebp
c001137d:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0011382:	e8 a5 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011387:	59                   	pop    ecx
c0011388:	89 e8                	mov    eax,ebp
c001138a:	5b                   	pop    ebx
c001138b:	c1 e0 0c             	shl    eax,0xc
c001138e:	83 c4 1c             	add    esp,0x1c
c0011391:	5b                   	pop    ebx
c0011392:	5e                   	pop    esi
c0011393:	5f                   	pop    edi
c0011394:	5d                   	pop    ebp
c0011395:	c3                   	ret    

c0011396 <Virt::virtualMemorySetup()>:
c0011396:	53                   	push   ebx
c0011397:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001139c:	83 ec 08             	sub    esp,0x8
c001139f:	6a 0f                	push   0xf
c00113a1:	53                   	push   ebx
c00113a2:	43                   	inc    ebx
c00113a3:	e8 84 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a8:	59                   	pop    ecx
c00113a9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113af:	58                   	pop    eax
c00113b0:	75 ed                	jne    c001139f <Virt::virtualMemorySetup()+0x9>
c00113b2:	83 ec 08             	sub    esp,0x8
c00113b5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113ba:	68 00 00 00 c8       	push   0xc8000000
c00113bf:	68 0b 70 02 c0       	push   0xc002700b
c00113c4:	e8 8e 0e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00113c9:	58                   	pop    eax
c00113ca:	5a                   	pop    edx
c00113cb:	68 00 f0 ff ef       	push   0xeffff000
c00113d0:	68 1f 70 02 c0       	push   0xc002701f
c00113d5:	e8 7d 0e 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	83 ec 08             	sub    esp,0x8
c00113e0:	6a 00                	push   0x0
c00113e2:	53                   	push   ebx
c00113e3:	43                   	inc    ebx
c00113e4:	e8 43 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e9:	83 c4 10             	add    esp,0x10
c00113ec:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f2:	75 e9                	jne    c00113dd <Virt::virtualMemorySetup()+0x47>
c00113f4:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f9:	83 ec 08             	sub    esp,0x8
c00113fc:	6a 0f                	push   0xf
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 27 fe ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001140e:	75 e9                	jne    c00113f9 <Virt::virtualMemorySetup()+0x63>
c0011410:	83 c4 08             	add    esp,0x8
c0011413:	5b                   	pop    ebx
c0011414:	c3                   	ret    

c0011415 <Virt::getAKernelVAS()>:
c0011415:	a1 64 a5 02 c0       	mov    eax,ds:0xc002a564
c001141a:	c3                   	ret    

c001141b <Virt::setupPageSwapping(int)>:
c001141b:	57                   	push   edi
c001141c:	56                   	push   esi
c001141d:	53                   	push   ebx
c001141e:	83 ec 1c             	sub    esp,0x1c
c0011421:	68 14 01 00 00       	push   0x114
c0011426:	e8 3d 0d 00 00       	call   c0012168 <operator new(unsigned long)>
c001142b:	83 c4 0c             	add    esp,0xc
c001142e:	89 c6                	mov    esi,eax
c0011430:	ff 35 b4 b8 02 c0    	push   DWORD PTR ds:0xc002b8b4
c0011436:	68 33 70 02 c0       	push   0xc0027033
c001143b:	50                   	push   eax
c001143c:	e8 45 13 00 00       	call   c0012786 <File::File(char const*, Process*)>
c0011441:	89 34 24             	mov    DWORD PTR [esp],esi
c0011444:	e8 19 15 00 00       	call   c0012962 <File::unlink()>
c0011449:	58                   	pop    eax
c001144a:	5a                   	pop    edx
c001144b:	6a 12                	push   0x12
c001144d:	56                   	push   esi
c001144e:	e8 97 13 00 00       	call   c00127ea <File::open(FileOpenMode)>
c0011453:	83 c4 10             	add    esp,0x10
c0011456:	85 c0                	test   eax,eax
c0011458:	0f 85 bf 00 00 00    	jne    c001151d <Virt::setupPageSwapping(int)+0x102>
c001145e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011462:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001146a:	c1 e3 08             	shl    ebx,0x8
c001146d:	83 ec 0c             	sub    esp,0xc
c0011470:	68 00 00 01 00       	push   0x10000
c0011475:	e8 ec dc ff ff       	call   c000f166 <malloc>
c001147a:	83 c4 0c             	add    esp,0xc
c001147d:	89 c7                	mov    edi,eax
c001147f:	68 00 00 01 00       	push   0x10000
c0011484:	6a 00                	push   0x0
c0011486:	50                   	push   eax
c0011487:	e8 60 f2 fe ff       	call   c00006ec <memset>
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	85 db                	test   ebx,ebx
c0011491:	79 03                	jns    c0011496 <Virt::setupPageSwapping(int)+0x7b>
c0011493:	83 c3 0f             	add    ebx,0xf
c0011496:	c1 fb 04             	sar    ebx,0x4
c0011499:	4b                   	dec    ebx
c001149a:	83 fb ff             	cmp    ebx,0xffffffff
c001149d:	74 4b                	je     c00114ea <Virt::setupPageSwapping(int)+0xcf>
c001149f:	83 ec 0c             	sub    esp,0xc
c00114a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114a4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a8:	52                   	push   edx
c00114a9:	57                   	push   edi
c00114aa:	6a 00                	push   0x0
c00114ac:	68 00 00 01 00       	push   0x10000
c00114b1:	56                   	push   esi
c00114b2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114b5:	83 c4 20             	add    esp,0x20
c00114b8:	85 c0                	test   eax,eax
c00114ba:	75 4e                	jne    c001150a <Virt::setupPageSwapping(int)+0xef>
c00114bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114c0:	3d 00 00 01 00       	cmp    eax,0x10000
c00114c5:	74 d2                	je     c0011499 <Virt::setupPageSwapping(int)+0x7e>
c00114c7:	83 ec 08             	sub    esp,0x8
c00114ca:	4b                   	dec    ebx
c00114cb:	50                   	push   eax
c00114cc:	68 86 70 02 c0       	push   0xc0027086
c00114d1:	e8 81 0d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00114d6:	c7 04 24 8f 70 02 c0 	mov    DWORD PTR [esp],0xc002708f
c00114dd:	e8 22 84 00 00       	call   c0019904 <Krnl::panic(char const*)>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	83 fb ff             	cmp    ebx,0xffffffff
c00114e8:	75 b5                	jne    c001149f <Virt::setupPageSwapping(int)+0x84>
c00114ea:	83 ec 0c             	sub    esp,0xc
c00114ed:	56                   	push   esi
c00114ee:	e8 55 13 00 00       	call   c0012848 <File::close()>
c00114f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f6:	e8 8b dc ff ff       	call   c000f186 <rfree>
c00114fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00114fe:	8b 06                	mov    eax,DWORD PTR [esi]
c0011500:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011503:	83 c4 20             	add    esp,0x20
c0011506:	5b                   	pop    ebx
c0011507:	5e                   	pop    esi
c0011508:	5f                   	pop    edi
c0011509:	c3                   	ret    
c001150a:	83 ec 08             	sub    esp,0x8
c001150d:	50                   	push   eax
c001150e:	68 6e 70 02 c0       	push   0xc002706e
c0011513:	e8 3f 0d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0011518:	83 c4 10             	add    esp,0x10
c001151b:	eb 9f                	jmp    c00114bc <Virt::setupPageSwapping(int)+0xa1>
c001151d:	83 ec 08             	sub    esp,0x8
c0011520:	50                   	push   eax
c0011521:	68 4a 70 02 c0       	push   0xc002704a
c0011526:	e8 2c 0d 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001152b:	c7 04 24 53 70 02 c0 	mov    DWORD PTR [esp],0xc0027053
c0011532:	e8 cd 83 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0011537:	83 c4 10             	add    esp,0x10
c001153a:	e9 1f ff ff ff       	jmp    c001145e <Virt::setupPageSwapping(int)+0x43>
c001153f:	90                   	nop

c0011540 <VAS::VAS()>:
c0011540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011544:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001154b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001154f:	a3 64 a5 02 c0       	mov    ds:0xc002a564,eax
c0011554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011558:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001155c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011560:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011567:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001156e:	90                   	nop
c001156f:	c3                   	ret    

c0011570 <VAS::VAS(VAS*)>:
c0011570:	83 ec 0c             	sub    esp,0xc
c0011573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011577:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001157e:	83 ec 0c             	sub    esp,0xc
c0011581:	68 a4 6e 02 c0       	push   0xc0026ea4
c0011586:	e8 79 83 00 00       	call   c0019904 <Krnl::panic(char const*)>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	90                   	nop
c001158f:	83 c4 0c             	add    esp,0xc
c0011592:	c3                   	ret    
c0011593:	90                   	nop

c0011594 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011594:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011598:	89 c2                	mov    edx,eax
c001159a:	c1 e8 0a             	shr    eax,0xa
c001159d:	c1 ea 16             	shr    edx,0x16
c00115a0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115a5:	19 c9                	sbb    ecx,ecx
c00115a7:	c1 e2 0c             	shl    edx,0xc
c00115aa:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115b0:	25 fc 0f 00 00       	and    eax,0xffc
c00115b5:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115bc:	01 d0                	add    eax,edx
c00115be:	c3                   	ret    
c00115bf:	90                   	nop

c00115c0 <VAS::getPageTableEntry(unsigned long)>:
c00115c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115c4:	89 ca                	mov    edx,ecx
c00115c6:	c1 e9 0a             	shr    ecx,0xa
c00115c9:	c1 ea 16             	shr    edx,0x16
c00115cc:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115d2:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115d8:	c1 e0 0c             	shl    eax,0xc
c00115db:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115de:	c3                   	ret    

c00115df <Virt::freeKernelVirtualPages(unsigned long)>:
c00115df:	57                   	push   edi
c00115e0:	56                   	push   esi
c00115e1:	be 01 00 00 00       	mov    esi,0x1
c00115e6:	53                   	push   ebx
c00115e7:	83 ec 10             	sub    esp,0x10
c00115ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115ee:	c1 eb 0c             	shr    ebx,0xc
c00115f1:	eb 3f                	jmp    c0011632 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115f3:	e8 1d fe ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c00115f8:	83 ec 08             	sub    esp,0x8
c00115fb:	57                   	push   edi
c00115fc:	50                   	push   eax
c00115fd:	e8 be ff ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011602:	83 c4 10             	add    esp,0x10
c0011605:	8b 00                	mov    eax,DWORD PTR [eax]
c0011607:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001160b:	f6 c4 04             	test   ah,0x4
c001160e:	75 5f                	jne    c001166f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011610:	80 fa 04             	cmp    dl,0x4
c0011613:	74 78                	je     c001168d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011615:	80 fa 02             	cmp    dl,0x2
c0011618:	0f 84 88 00 00 00    	je     c00116a6 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001161e:	80 fa 03             	cmp    dl,0x3
c0011621:	0f 84 ad 00 00 00    	je     c00116d4 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011627:	fe ca                	dec    dl
c0011629:	0f 84 92 00 00 00    	je     c00116c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001162f:	43                   	inc    ebx
c0011630:	31 f6                	xor    esi,esi
c0011632:	53                   	push   ebx
c0011633:	e8 29 fc ff ff       	call   c0011261 <Virt::getPageState(unsigned long)>
c0011638:	5f                   	pop    edi
c0011639:	89 df                	mov    edi,ebx
c001163b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001163f:	c1 e7 0c             	shl    edi,0xc
c0011642:	84 c0                	test   al,al
c0011644:	75 ad                	jne    c00115f3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011646:	83 ec 0c             	sub    esp,0xc
c0011649:	68 95 70 02 c0       	push   0xc0027095
c001164e:	e8 b1 82 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0011653:	e8 bd fd ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0011658:	5a                   	pop    edx
c0011659:	59                   	pop    ecx
c001165a:	57                   	push   edi
c001165b:	50                   	push   eax
c001165c:	e8 5f ff ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011661:	83 c4 10             	add    esp,0x10
c0011664:	8b 00                	mov    eax,DWORD PTR [eax]
c0011666:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001166a:	f6 c4 04             	test   ah,0x4
c001166d:	74 c0                	je     c001162f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001166f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011673:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011678:	83 ec 0c             	sub    esp,0xc
c001167b:	50                   	push   eax
c001167c:	e8 05 e0 ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c0011681:	83 c4 10             	add    esp,0x10
c0011684:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011688:	80 fa 04             	cmp    dl,0x4
c001168b:	75 88                	jne    c0011615 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c001168d:	89 f0                	mov    eax,esi
c001168f:	84 c0                	test   al,al
c0011691:	75 47                	jne    c00116da <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011693:	c7 44 24 20 c8 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ec8
c001169b:	83 c4 10             	add    esp,0x10
c001169e:	5b                   	pop    ebx
c001169f:	5e                   	pop    esi
c00116a0:	5f                   	pop    edi
c00116a1:	e9 5e 82 00 00       	jmp    c0019904 <Krnl::panic(char const*)>
c00116a6:	89 f0                	mov    eax,esi
c00116a8:	84 c0                	test   al,al
c00116aa:	75 15                	jne    c00116c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116ac:	83 ec 0c             	sub    esp,0xc
c00116af:	68 b1 70 02 c0       	push   0xc00270b1
c00116b4:	e8 4b 82 00 00       	call   c0019904 <Krnl::panic(char const*)>
c00116b9:	83 c4 10             	add    esp,0x10
c00116bc:	e9 6e ff ff ff       	jmp    c001162f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c1:	83 ec 08             	sub    esp,0x8
c00116c4:	6a 00                	push   0x0
c00116c6:	53                   	push   ebx
c00116c7:	e8 60 fb ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116cc:	83 c4 10             	add    esp,0x10
c00116cf:	e9 5b ff ff ff       	jmp    c001162f <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116d4:	89 f0                	mov    eax,esi
c00116d6:	84 c0                	test   al,al
c00116d8:	75 15                	jne    c00116ef <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116da:	83 ec 08             	sub    esp,0x8
c00116dd:	6a 00                	push   0x0
c00116df:	53                   	push   ebx
c00116e0:	e8 47 fb ff ff       	call   c001122c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	83 c4 10             	add    esp,0x10
c00116eb:	5b                   	pop    ebx
c00116ec:	5e                   	pop    esi
c00116ed:	5f                   	pop    edi
c00116ee:	c3                   	ret    
c00116ef:	c7 44 24 20 cd 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270cd
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	5b                   	pop    ebx
c00116fb:	5e                   	pop    esi
c00116fc:	5f                   	pop    edi
c00116fd:	e9 02 82 00 00       	jmp    c0019904 <Krnl::panic(char const*)>

c0011702 <VAS::freeAllocatedPages(unsigned long)>:
c0011702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001170a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001170e:	74 09                	je     c0011719 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011710:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011714:	e9 c6 fe ff ff       	jmp    c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c0011719:	c7 44 24 04 ec 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026eec
c0011721:	e9 31 0b 00 00       	jmp    c0012257 <Dbg::kprintf(char const*, ...)>

c0011726 <VAS::virtualToPhysical(unsigned long)>:
c0011726:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001172a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001172e:	e8 8d fe ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011733:	5a                   	pop    edx
c0011734:	8b 00                	mov    eax,DWORD PTR [eax]
c0011736:	59                   	pop    ecx
c0011737:	25 00 f0 ff ff       	and    eax,0xfffff000
c001173c:	c3                   	ret    
c001173d:	90                   	nop

c001173e <VAS::reflagRange(unsigned long, int, int, int)>:
c001173e:	55                   	push   ebp
c001173f:	57                   	push   edi
c0011740:	56                   	push   esi
c0011741:	53                   	push   ebx
c0011742:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011746:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001174a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001174e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011752:	85 db                	test   ebx,ebx
c0011754:	7e 22                	jle    c0011778 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011756:	c1 e3 0c             	shl    ebx,0xc
c0011759:	01 f3                	add    ebx,esi
c001175b:	56                   	push   esi
c001175c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011762:	55                   	push   ebp
c0011763:	e8 58 fe ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0011768:	5a                   	pop    edx
c0011769:	59                   	pop    ecx
c001176a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001176c:	21 f9                	and    ecx,edi
c001176e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011772:	39 f3                	cmp    ebx,esi
c0011774:	89 08                	mov    DWORD PTR [eax],ecx
c0011776:	75 e3                	jne    c001175b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011778:	5b                   	pop    ebx
c0011779:	5e                   	pop    esi
c001177a:	5f                   	pop    edi
c001177b:	5d                   	pop    ebp
c001177c:	c3                   	ret    
c001177d:	90                   	nop

c001177e <VAS::setToWriteCombining(unsigned long, int)>:
c001177e:	83 ec 0c             	sub    esp,0xc
c0011781:	e8 fe 60 00 00       	call   c0017884 <thisCPU()>
c0011786:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001178d:	75 04                	jne    c0011793 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001178f:	83 c4 0c             	add    esp,0xc
c0011792:	c3                   	ret    
c0011793:	83 ec 0c             	sub    esp,0xc
c0011796:	68 80 00 00 00       	push   0x80
c001179b:	6a ff                	push   0xffffffff
c001179d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a9:	e8 90 ff ff ff       	call   c001173e <VAS::reflagRange(unsigned long, int, int, int)>
c00117ae:	83 c4 20             	add    esp,0x20
c00117b1:	83 c4 0c             	add    esp,0xc
c00117b4:	c3                   	ret    
c00117b5:	90                   	nop

c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117cc:	19 c0                	sbb    eax,eax
c00117ce:	83 ca 03             	or     edx,0x3
c00117d1:	83 e0 fc             	and    eax,0xfffffffc
c00117d4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117db:	e8 b5 38 01 00       	call   c0025095 <CPU::readCR3()>
c00117e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117e4:	83 c4 0c             	add    esp,0xc
c00117e7:	e9 bb 38 01 00       	jmp    c00250a7 <CPU::writeCR3(unsigned long)>

c00117ec <VAS::~VAS()>:
c00117ec:	83 ec 2c             	sub    esp,0x2c
c00117ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117f7:	e8 5c b0 00 00       	call   c001c858 <lockScheduler()>
c00117fc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011801:	8b 00                	mov    eax,DWORD PTR [eax]
c0011803:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011806:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001180c:	83 ec 04             	sub    esp,0x4
c001180f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011813:	6a 01                	push   0x1
c0011815:	50                   	push   eax
c0011816:	e8 9b ff ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001181b:	83 c4 10             	add    esp,0x10
c001181e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011826:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001182e:	0f 8f d7 00 00 00    	jg     c001190b <VAS::~VAS()+0x11f>
c0011834:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011838:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001183b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001183f:	c1 e2 02             	shl    edx,0x2
c0011842:	01 d0                	add    eax,edx
c0011844:	8b 00                	mov    eax,DWORD PTR [eax]
c0011846:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001184a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184e:	83 e0 01             	and    eax,0x1
c0011851:	0f 84 ab 00 00 00    	je     c0011902 <VAS::~VAS()+0x116>
c0011857:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001185f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011867:	7f 75                	jg     c00118de <VAS::~VAS()+0xf2>
c0011869:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001186d:	c1 e0 0a             	shl    eax,0xa
c0011870:	89 c2                	mov    edx,eax
c0011872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011876:	01 d0                	add    eax,edx
c0011878:	c1 e0 0c             	shl    eax,0xc
c001187b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001187f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011884:	8b 00                	mov    eax,DWORD PTR [eax]
c0011886:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011889:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001188f:	83 ec 04             	sub    esp,0x4
c0011892:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011896:	6a 01                	push   0x1
c0011898:	50                   	push   eax
c0011899:	e8 f6 fc ff ff       	call   c0011594 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b3:	25 01 04 00 00       	and    eax,0x401
c00118b8:	3d 01 04 00 00       	cmp    eax,0x401
c00118bd:	75 19                	jne    c00118d8 <VAS::~VAS()+0xec>
c00118bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118c8:	83 ec 0c             	sub    esp,0xc
c00118cb:	50                   	push   eax
c00118cc:	e8 b5 dd ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118dc:	eb 81                	jmp    c001185f <VAS::~VAS()+0x73>
c00118de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e2:	25 00 04 00 00       	and    eax,0x400
c00118e7:	74 19                	je     c0011902 <VAS::~VAS()+0x116>
c00118e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118f2:	83 ec 0c             	sub    esp,0xc
c00118f5:	50                   	push   eax
c00118f6:	e8 8b dd ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c00118fb:	83 c4 10             	add    esp,0x10
c00118fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011902:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011906:	e9 1b ff ff ff       	jmp    c0011826 <VAS::~VAS()+0x3a>
c001190b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	50                   	push   eax
c0011916:	e8 c4 fc ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011922:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011925:	83 ec 0c             	sub    esp,0xc
c0011928:	50                   	push   eax
c0011929:	e8 58 dd ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c001192e:	83 c4 10             	add    esp,0x10
c0011931:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011939:	c1 e0 02             	shl    eax,0x2
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	50                   	push   eax
c0011940:	68 10 6f 02 c0       	push   0xc0026f10
c0011945:	e8 0d 09 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	e8 08 af 00 00       	call   c001c85a <unlockScheduler()>
c0011952:	90                   	nop
c0011953:	83 c4 2c             	add    esp,0x2c
c0011956:	c3                   	ret    
c0011957:	90                   	nop

c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011958:	55                   	push   ebp
c0011959:	57                   	push   edi
c001195a:	56                   	push   esi
c001195b:	53                   	push   ebx
c001195c:	83 ec 1c             	sub    esp,0x1c
c001195f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011967:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001196d:	77 08                	ja     c0011977 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001196f:	0f 20 d8             	mov    eax,cr3
c0011972:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011975:	75 47                	jne    c00119be <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011977:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001197b:	09 d8                	or     eax,ebx
c001197d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011982:	75 57                	jne    c00119db <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011984:	89 de                	mov    esi,ebx
c0011986:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011989:	c1 ee 16             	shr    esi,0x16
c001198c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011993:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011997:	74 54                	je     c00119ed <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011999:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001199d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a7:	c1 e6 0c             	shl    esi,0xc
c00119aa:	c1 eb 0a             	shr    ebx,0xa
c00119ad:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b6:	83 c4 1c             	add    esp,0x1c
c00119b9:	5b                   	pop    ebx
c00119ba:	5e                   	pop    esi
c00119bb:	5f                   	pop    edi
c00119bc:	5d                   	pop    ebp
c00119bd:	c3                   	ret    
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	68 30 6f 02 c0       	push   0xc0026f30
c00119c6:	e8 8c 08 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00119cb:	83 c4 10             	add    esp,0x10
c00119ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d2:	09 d8                	or     eax,ebx
c00119d4:	a9 ff 0f 00 00       	test   eax,0xfff
c00119d9:	74 a9                	je     c0011984 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	68 98 6f 02 c0       	push   0xc0026f98
c00119e3:	e8 1c 7f 00 00       	call   c0019904 <Krnl::panic(char const*)>
c00119e8:	83 c4 10             	add    esp,0x10
c00119eb:	eb 97                	jmp    c0011984 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f1:	e8 1a dd ff ff       	call   c000f710 <Phys::allocatePage()>
c00119f6:	89 c5                	mov    ebp,eax
c00119f8:	e8 18 fa ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a04:	6a 01                	push   0x1
c0011a06:	e8 7a f8 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011a0b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a12:	6a 01                	push   0x1
c0011a14:	50                   	push   eax
c0011a15:	55                   	push   ebp
c0011a16:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a20:	51                   	push   ecx
c0011a21:	e8 1e 02 00 00       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a26:	83 c4 1c             	add    esp,0x1c
c0011a29:	68 00 10 00 00       	push   0x1000
c0011a2e:	6a 00                	push   0x0
c0011a30:	50                   	push   eax
c0011a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a35:	e8 b2 ec fe ff       	call   c00006ec <memset>
c0011a3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a3e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a41:	e8 99 fb ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c0011a46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a4a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a53:	e9 41 ff ff ff       	jmp    c0011999 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a58 <VAS::allocatePages(int, int)>:
c0011a58:	55                   	push   ebp
c0011a59:	57                   	push   edi
c0011a5a:	56                   	push   esi
c0011a5b:	53                   	push   ebx
c0011a5c:	83 ec 1c             	sub    esp,0x1c
c0011a5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a63:	e8 1c 5e 00 00       	call   c0017884 <thisCPU()>
c0011a68:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a6e:	83 e0 01             	and    eax,0x1
c0011a71:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a75:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a79:	0f 85 d7 00 00 00    	jne    c0011b56 <VAS::allocatePages(int, int)+0xfe>
c0011a7f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a86:	85 c0                	test   eax,eax
c0011a88:	0f 84 ac 00 00 00    	je     c0011b3a <VAS::allocatePages(int, int)+0xe2>
c0011a8e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a96:	c1 e6 0c             	shl    esi,0xc
c0011a99:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a9d:	85 c0                	test   eax,eax
c0011a9f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011aa2:	7e 33                	jle    c0011ad7 <VAS::allocatePages(int, int)+0x7f>
c0011aa4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011aa8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aac:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ab2:	e8 59 dc ff ff       	call   c000f710 <Phys::allocatePage()>
c0011ab7:	55                   	push   ebp
c0011ab8:	53                   	push   ebx
c0011ab9:	50                   	push   eax
c0011aba:	57                   	push   edi
c0011abb:	e8 98 fe ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac8:	74 03                	je     c0011acd <VAS::allocatePages(int, int)+0x75>
c0011aca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011acd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ad3:	39 de                	cmp    esi,ebx
c0011ad5:	75 db                	jne    c0011ab2 <VAS::allocatePages(int, int)+0x5a>
c0011ad7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011adc:	74 3f                	je     c0011b1d <VAS::allocatePages(int, int)+0xc5>
c0011ade:	c1 ee 0a             	shr    esi,0xa
c0011ae1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ae5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011aeb:	c1 eb 0a             	shr    ebx,0xa
c0011aee:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011af4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011afa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b00:	39 f3                	cmp    ebx,esi
c0011b02:	77 0d                	ja     c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011b04:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b07:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b0d:	39 de                	cmp    esi,ebx
c0011b0f:	73 f3                	jae    c0011b04 <VAS::allocatePages(int, int)+0xac>
c0011b11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b15:	83 c4 1c             	add    esp,0x1c
c0011b18:	5b                   	pop    ebx
c0011b19:	5e                   	pop    esi
c0011b1a:	5f                   	pop    edi
c0011b1b:	5d                   	pop    ebp
c0011b1c:	c3                   	ret    
c0011b1d:	e8 73 35 01 00       	call   c0025095 <CPU::readCR3()>
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	50                   	push   eax
c0011b26:	e8 7c 35 01 00       	call   c00250a7 <CPU::writeCR3(unsigned long)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b32:	83 c4 1c             	add    esp,0x1c
c0011b35:	5b                   	pop    ebx
c0011b36:	5e                   	pop    esi
c0011b37:	5f                   	pop    edi
c0011b38:	5d                   	pop    ebp
c0011b39:	c3                   	ret    
c0011b3a:	83 ec 0c             	sub    esp,0xc
c0011b3d:	68 bc 6f 02 c0       	push   0xc0026fbc
c0011b42:	e8 bd 7d 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0011b47:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	e9 38 ff ff ff       	jmp    c0011a8e <VAS::allocatePages(int, int)+0x36>
c0011b56:	83 ec 0c             	sub    esp,0xc
c0011b59:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b5d:	e8 23 f7 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011b62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b6e:	0f 87 94 00 00 00    	ja     c0011c08 <VAS::allocatePages(int, int)+0x1b0>
c0011b74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b78:	85 d2                	test   edx,edx
c0011b7a:	7e 3c                	jle    c0011bb8 <VAS::allocatePages(int, int)+0x160>
c0011b7c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b80:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b88:	c1 e5 0c             	shl    ebp,0xc
c0011b8b:	81 ce 00 04 00 00    	or     esi,0x400
c0011b91:	01 dd                	add    ebp,ebx
c0011b93:	e8 78 db ff ff       	call   c000f710 <Phys::allocatePage()>
c0011b98:	56                   	push   esi
c0011b99:	53                   	push   ebx
c0011b9a:	50                   	push   eax
c0011b9b:	57                   	push   edi
c0011b9c:	e8 b7 fd ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba9:	74 03                	je     c0011bae <VAS::allocatePages(int, int)+0x156>
c0011bab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bae:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb4:	39 dd                	cmp    ebp,ebx
c0011bb6:	75 db                	jne    c0011b93 <VAS::allocatePages(int, int)+0x13b>
c0011bb8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bbd:	0f 84 5a ff ff ff    	je     c0011b1d <VAS::allocatePages(int, int)+0xc5>
c0011bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bcb:	89 d3                	mov    ebx,edx
c0011bcd:	c1 e0 0c             	shl    eax,0xc
c0011bd0:	c1 eb 0a             	shr    ebx,0xa
c0011bd3:	01 d0                	add    eax,edx
c0011bd5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bdb:	c1 e8 0a             	shr    eax,0xa
c0011bde:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be9:	2d 00 00 40 00       	sub    eax,0x400000
c0011bee:	39 c3                	cmp    ebx,eax
c0011bf0:	0f 87 1b ff ff ff    	ja     c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011bf6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bff:	39 d8                	cmp    eax,ebx
c0011c01:	73 f3                	jae    c0011bf6 <VAS::allocatePages(int, int)+0x19e>
c0011c03:	e9 09 ff ff ff       	jmp    c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011c08:	e8 77 5c 00 00       	call   c0017884 <thisCPU()>
c0011c0d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c14:	0f 84 5a ff ff ff    	je     c0011b74 <VAS::allocatePages(int, int)+0x11c>
c0011c1a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c22:	e9 4d ff ff ff       	jmp    c0011b74 <VAS::allocatePages(int, int)+0x11c>
c0011c27:	90                   	nop

c0011c28 <VAS::setCPUSpecific(unsigned long)>:
c0011c28:	83 ec 0c             	sub    esp,0xc
c0011c2b:	6a 05                	push   0x5
c0011c2d:	68 00 00 40 c2       	push   0xc2400000
c0011c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c3a:	e8 19 fd ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c3f:	83 c4 1c             	add    esp,0x1c
c0011c42:	c3                   	ret    
c0011c43:	90                   	nop

c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c44:	55                   	push   ebp
c0011c45:	57                   	push   edi
c0011c46:	56                   	push   esi
c0011c47:	53                   	push   ebx
c0011c48:	83 ec 1c             	sub    esp,0x1c
c0011c4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c4f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c53:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c57:	e8 28 5c 00 00       	call   c0017884 <thisCPU()>
c0011c5c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c62:	83 e0 01             	and    eax,0x1
c0011c65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6d:	85 c0                	test   eax,eax
c0011c6f:	7e 39                	jle    c0011caa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c75:	89 f3                	mov    ebx,esi
c0011c77:	c1 e0 0c             	shl    eax,0xc
c0011c7a:	01 f0                	add    eax,esi
c0011c7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c80:	55                   	push   ebp
c0011c81:	53                   	push   ebx
c0011c82:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c86:	29 f0                	sub    eax,esi
c0011c88:	01 d8                	add    eax,ebx
c0011c8a:	50                   	push   eax
c0011c8b:	57                   	push   edi
c0011c8c:	e8 c7 fc ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c91:	83 c4 10             	add    esp,0x10
c0011c94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c99:	74 03                	je     c0011c9e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c9b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c9e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ca4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ca8:	75 d6                	jne    c0011c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011caa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011caf:	74 42                	je     c0011cf3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cb1:	89 f3                	mov    ebx,esi
c0011cb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb7:	c1 eb 0a             	shr    ebx,0xa
c0011cba:	c1 e0 0c             	shl    eax,0xc
c0011cbd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cc3:	01 f0                	add    eax,esi
c0011cc5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ccb:	c1 e8 0a             	shr    eax,0xa
c0011cce:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd3:	2d 00 00 40 00       	sub    eax,0x400000
c0011cd8:	39 c3                	cmp    ebx,eax
c0011cda:	77 0d                	ja     c0011ce9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ce5:	39 d8                	cmp    eax,ebx
c0011ce7:	73 f3                	jae    c0011cdc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ce9:	83 c4 1c             	add    esp,0x1c
c0011cec:	89 f0                	mov    eax,esi
c0011cee:	5b                   	pop    ebx
c0011cef:	5e                   	pop    esi
c0011cf0:	5f                   	pop    edi
c0011cf1:	5d                   	pop    ebp
c0011cf2:	c3                   	ret    
c0011cf3:	e8 9d 33 01 00       	call   c0025095 <CPU::readCR3()>
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	50                   	push   eax
c0011cfc:	e8 a6 33 01 00       	call   c00250a7 <CPU::writeCR3(unsigned long)>
c0011d01:	89 f0                	mov    eax,esi
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	83 c4 1c             	add    esp,0x1c
c0011d09:	5b                   	pop    ebx
c0011d0a:	5e                   	pop    esi
c0011d0b:	5f                   	pop    edi
c0011d0c:	5d                   	pop    ebp
c0011d0d:	c3                   	ret    

c0011d0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d0e:	55                   	push   ebp
c0011d0f:	57                   	push   edi
c0011d10:	56                   	push   esi
c0011d11:	53                   	push   ebx
c0011d12:	83 ec 1c             	sub    esp,0x1c
c0011d15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d19:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d1d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d21:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d2a:	75 4a                	jne    c0011d76 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d2c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d30:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d33:	c1 eb 16             	shr    ebx,0x16
c0011d36:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d3d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d41:	74 4d                	je     c0011d90 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d43:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d47:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d4b:	c1 e8 0a             	shr    eax,0xa
c0011d4e:	80 fa 01             	cmp    dl,0x1
c0011d51:	19 d2                	sbb    edx,edx
c0011d53:	c1 e3 0c             	shl    ebx,0xc
c0011d56:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d5a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d60:	25 fc 0f 00 00       	and    eax,0xffc
c0011d65:	01 d8                	add    eax,ebx
c0011d67:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d6e:	83 c4 1c             	add    esp,0x1c
c0011d71:	5b                   	pop    ebx
c0011d72:	5e                   	pop    esi
c0011d73:	5f                   	pop    edi
c0011d74:	5d                   	pop    ebp
c0011d75:	c3                   	ret    
c0011d76:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d7a:	83 ec 0c             	sub    esp,0xc
c0011d7d:	68 e8 6f 02 c0       	push   0xc0026fe8
c0011d82:	e8 7d 7b 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0011d87:	83 c4 10             	add    esp,0x10
c0011d8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d8e:	eb 9c                	jmp    c0011d2c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d94:	e8 77 d9 ff ff       	call   c000f710 <Phys::allocatePage()>
c0011d99:	89 c5                	mov    ebp,eax
c0011d9b:	e8 75 f6 ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0011da0:	83 ec 0c             	sub    esp,0xc
c0011da3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011da7:	6a 01                	push   0x1
c0011da9:	e8 d7 f4 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011dae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011db5:	6a 01                	push   0x1
c0011db7:	50                   	push   eax
c0011db8:	55                   	push   ebp
c0011db9:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dbf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dc3:	51                   	push   ecx
c0011dc4:	e8 7b fe ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc9:	83 c4 1c             	add    esp,0x1c
c0011dcc:	68 00 10 00 00       	push   0x1000
c0011dd1:	6a 00                	push   0x0
c0011dd3:	50                   	push   eax
c0011dd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd8:	e8 0f e9 fe ff       	call   c00006ec <memset>
c0011ddd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011de1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011de4:	e8 f6 f7 ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c0011de9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011dec:	83 c4 10             	add    esp,0x10
c0011def:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011df2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011df6:	e9 48 ff ff ff       	jmp    c0011d43 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011dfb:	90                   	nop

c0011dfc <VAS::VAS(bool)>:
c0011dfc:	53                   	push   ebx
c0011dfd:	83 ec 28             	sub    esp,0x28
c0011e00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e17:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e1b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e1e:	e8 ed d8 ff ff       	call   c000f710 <Phys::allocatePage()>
c0011e23:	89 c2                	mov    edx,eax
c0011e25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e29:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e2c:	e8 e4 f5 ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c0011e31:	89 c3                	mov    ebx,eax
c0011e33:	83 ec 0c             	sub    esp,0xc
c0011e36:	6a 01                	push   0x1
c0011e38:	e8 48 f4 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0011e3d:	83 c4 10             	add    esp,0x10
c0011e40:	89 c2                	mov    edx,eax
c0011e42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e49:	83 ec 0c             	sub    esp,0xc
c0011e4c:	6a 03                	push   0x3
c0011e4e:	6a 01                	push   0x1
c0011e50:	52                   	push   edx
c0011e51:	50                   	push   eax
c0011e52:	53                   	push   ebx
c0011e53:	e8 ec fd ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e58:	83 c4 20             	add    esp,0x20
c0011e5b:	89 c2                	mov    edx,eax
c0011e5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e61:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e64:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e6c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e74:	7f 1c                	jg     c0011e92 <VAS::VAS(bool)+0x96>
c0011e76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e7a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e81:	c1 e2 02             	shl    edx,0x2
c0011e84:	01 d0                	add    eax,edx
c0011e86:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e8c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e90:	eb da                	jmp    c0011e6c <VAS::VAS(bool)+0x70>
c0011e92:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e9a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011ea2:	7f 71                	jg     c0011f15 <VAS::VAS(bool)+0x119>
c0011ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ea8:	2d 00 02 00 00       	sub    eax,0x200
c0011ead:	c1 e0 0c             	shl    eax,0xc
c0011eb0:	83 c8 03             	or     eax,0x3
c0011eb3:	89 c3                	mov    ebx,eax
c0011eb5:	e8 ca 59 00 00       	call   c0017884 <thisCPU()>
c0011eba:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ec0:	83 e0 10             	and    eax,0x10
c0011ec3:	84 c0                	test   al,al
c0011ec5:	74 07                	je     c0011ece <VAS::VAS(bool)+0xd2>
c0011ec7:	b8 00 01 00 00       	mov    eax,0x100
c0011ecc:	eb 05                	jmp    c0011ed3 <VAS::VAS(bool)+0xd7>
c0011ece:	b8 00 00 00 00       	mov    eax,0x0
c0011ed3:	09 d8                	or     eax,ebx
c0011ed5:	89 c1                	mov    ecx,eax
c0011ed7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011edb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ede:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ee2:	c1 e2 02             	shl    edx,0x2
c0011ee5:	01 d0                	add    eax,edx
c0011ee7:	89 ca                	mov    edx,ecx
c0011ee9:	89 10                	mov    DWORD PTR [eax],edx
c0011eeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eef:	2d 40 03 00 00       	sub    eax,0x340
c0011ef4:	83 f8 7f             	cmp    eax,0x7f
c0011ef7:	77 16                	ja     c0011f0f <VAS::VAS(bool)+0x113>
c0011ef9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011efd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f04:	c1 e2 02             	shl    edx,0x2
c0011f07:	01 d0                	add    eax,edx
c0011f09:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f0f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f13:	eb 85                	jmp    c0011e9a <VAS::VAS(bool)+0x9e>
c0011f15:	e8 6a 59 00 00       	call   c0017884 <thisCPU()>
c0011f1a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f20:	83 e0 10             	and    eax,0x10
c0011f23:	84 c0                	test   al,al
c0011f25:	74 07                	je     c0011f2e <VAS::VAS(bool)+0x132>
c0011f27:	b8 03 41 00 00       	mov    eax,0x4103
c0011f2c:	eb 05                	jmp    c0011f33 <VAS::VAS(bool)+0x137>
c0011f2e:	b8 03 40 00 00       	mov    eax,0x4003
c0011f33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f37:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f3a:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f40:	89 02                	mov    DWORD PTR [edx],eax
c0011f42:	e8 3d 59 00 00       	call   c0017884 <thisCPU()>
c0011f47:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f4d:	83 ec 08             	sub    esp,0x8
c0011f50:	50                   	push   eax
c0011f51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f55:	e8 ce fc ff ff       	call   c0011c28 <VAS::setCPUSpecific(unsigned long)>
c0011f5a:	83 c4 10             	add    esp,0x10
c0011f5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f61:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f64:	e8 1b 59 00 00       	call   c0017884 <thisCPU()>
c0011f69:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f6f:	83 e0 10             	and    eax,0x10
c0011f72:	84 c0                	test   al,al
c0011f74:	74 07                	je     c0011f7d <VAS::VAS(bool)+0x181>
c0011f76:	b8 00 01 00 00       	mov    eax,0x100
c0011f7b:	eb 05                	jmp    c0011f82 <VAS::VAS(bool)+0x186>
c0011f7d:	b8 00 00 00 00       	mov    eax,0x0
c0011f82:	09 d8                	or     eax,ebx
c0011f84:	89 c2                	mov    edx,eax
c0011f86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f8d:	05 fc 0f 00 00       	add    eax,0xffc
c0011f92:	83 ca 03             	or     edx,0x3
c0011f95:	89 10                	mov    DWORD PTR [eax],edx
c0011f97:	e8 e8 58 00 00       	call   c0017884 <thisCPU()>
c0011f9c:	83 ec 0c             	sub    esp,0xc
c0011f9f:	50                   	push   eax
c0011fa0:	e8 9f 19 00 00       	call   c0013944 <Device::getName()>
c0011fa5:	83 c4 10             	add    esp,0x10
c0011fa8:	83 ec 08             	sub    esp,0x8
c0011fab:	68 e7 70 02 c0       	push   0xc00270e7
c0011fb0:	50                   	push   eax
c0011fb1:	e8 26 e8 fe ff       	call   c00007dc <strcmp>
c0011fb6:	83 c4 10             	add    esp,0x10
c0011fb9:	85 c0                	test   eax,eax
c0011fbb:	0f 94 c0             	sete   al
c0011fbe:	84 c0                	test   al,al
c0011fc0:	74 64                	je     c0012026 <VAS::VAS(bool)+0x22a>
c0011fc2:	e8 74 a8 00 00       	call   c001c83b <disableIRQs()>
c0011fc7:	e8 b8 58 00 00       	call   c0017884 <thisCPU()>
c0011fcc:	05 7c 09 00 00       	add    eax,0x97c
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	50                   	push   eax
c0011fd5:	e8 fe cb ff ff       	call   c000ebd8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe2:	89 c3                	mov    ebx,eax
c0011fe4:	e8 9b 58 00 00       	call   c0017884 <thisCPU()>
c0011fe9:	05 7c 09 00 00       	add    eax,0x97c
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	50                   	push   eax
c0011ff2:	e8 e1 cb ff ff       	call   c000ebd8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	83 ec 08             	sub    esp,0x8
c0011ffd:	50                   	push   eax
c0011ffe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012002:	e8 b9 f5 ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	8b 00                	mov    eax,DWORD PTR [eax]
c001200c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012011:	6a 11                	push   0x11
c0012013:	53                   	push   ebx
c0012014:	50                   	push   eax
c0012015:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012019:	e8 3a f9 ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001201e:	83 c4 10             	add    esp,0x10
c0012021:	e8 23 a8 00 00       	call   c001c849 <enableIRQs()>
c0012026:	90                   	nop
c0012027:	83 c4 28             	add    esp,0x28
c001202a:	5b                   	pop    ebx
c001202b:	c3                   	ret    

c001202c <mapVASFirstTime>:
c001202c:	55                   	push   ebp
c001202d:	57                   	push   edi
c001202e:	56                   	push   esi
c001202f:	53                   	push   ebx
c0012030:	83 ec 0c             	sub    esp,0xc
c0012033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012038:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001203b:	4a                   	dec    edx
c001203c:	0f 84 99 00 00 00    	je     c00120db <mapVASFirstTime+0xaf>
c0012042:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012045:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012048:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001204d:	c1 e5 15             	shl    ebp,0x15
c0012050:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012055:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001205b:	29 eb                	sub    ebx,ebp
c001205d:	29 ee                	sub    esi,ebp
c001205f:	e8 ac d6 ff ff       	call   c000f710 <Phys::allocatePage()>
c0012064:	83 ec 0c             	sub    esp,0xc
c0012067:	68 03 04 00 00       	push   0x403
c001206c:	6a 01                	push   0x1
c001206e:	53                   	push   ebx
c001206f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012075:	50                   	push   eax
c0012076:	57                   	push   edi
c0012077:	e8 c8 fb ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001207c:	83 c4 20             	add    esp,0x20
c001207f:	39 f3                	cmp    ebx,esi
c0012081:	75 dc                	jne    c001205f <mapVASFirstTime+0x33>
c0012083:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012088:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001208d:	29 ee                	sub    esi,ebp
c001208f:	29 e8                	sub    eax,ebp
c0012091:	89 c5                	mov    ebp,eax
c0012093:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012097:	19 db                	sbb    ebx,ebx
c0012099:	e8 72 d6 ff ff       	call   c000f710 <Phys::allocatePage()>
c001209e:	83 e3 04             	and    ebx,0x4
c00120a1:	83 ec 0c             	sub    esp,0xc
c00120a4:	81 c3 03 04 00 00    	add    ebx,0x403
c00120aa:	53                   	push   ebx
c00120ab:	6a 01                	push   0x1
c00120ad:	56                   	push   esi
c00120ae:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120b4:	50                   	push   eax
c00120b5:	57                   	push   edi
c00120b6:	e8 89 fb ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120bb:	83 c4 20             	add    esp,0x20
c00120be:	39 f5                	cmp    ebp,esi
c00120c0:	75 d1                	jne    c0012093 <mapVASFirstTime+0x67>
c00120c2:	e8 ce 2f 01 00       	call   c0025095 <CPU::readCR3()>
c00120c7:	83 ec 0c             	sub    esp,0xc
c00120ca:	50                   	push   eax
c00120cb:	e8 d7 2f 01 00       	call   c00250a7 <CPU::writeCR3(unsigned long)>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	83 c4 0c             	add    esp,0xc
c00120d6:	5b                   	pop    ebx
c00120d7:	5e                   	pop    esi
c00120d8:	5f                   	pop    edi
c00120d9:	5d                   	pop    ebp
c00120da:	c3                   	ret    
c00120db:	83 ec 0c             	sub    esp,0xc
c00120de:	68 f5 70 02 c0       	push   0xc00270f5
c00120e3:	e8 6f 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00120e8:	83 c4 10             	add    esp,0x10
c00120eb:	83 c4 0c             	add    esp,0xc
c00120ee:	5b                   	pop    ebx
c00120ef:	5e                   	pop    esi
c00120f0:	5f                   	pop    edi
c00120f1:	5d                   	pop    ebp
c00120f2:	c3                   	ret    

c00120f3 <__cxa_atexit>:
c00120f3:	31 c0                	xor    eax,eax
c00120f5:	c3                   	ret    

c00120f6 <__cxa_finalize>:
c00120f6:	c3                   	ret    

c00120f7 <__stack_chk_fail>:
c00120f7:	55                   	push   ebp
c00120f8:	89 e5                	mov    ebp,esp
c00120fa:	83 ec 10             	sub    esp,0x10
c00120fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012100:	68 0e 71 02 c0       	push   0xc002710e
c0012105:	e8 4d 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001210a:	58                   	pop    eax
c001210b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001210e:	5a                   	pop    edx
c001210f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012112:	68 0e 71 02 c0       	push   0xc002710e
c0012117:	e8 3b 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001211c:	59                   	pop    ecx
c001211d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012120:	5a                   	pop    edx
c0012121:	8b 00                	mov    eax,DWORD PTR [eax]
c0012123:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012126:	68 0e 71 02 c0       	push   0xc002710e
c001212b:	e8 27 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0012130:	59                   	pop    ecx
c0012131:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012134:	5a                   	pop    edx
c0012135:	8b 00                	mov    eax,DWORD PTR [eax]
c0012137:	8b 00                	mov    eax,DWORD PTR [eax]
c0012139:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001213c:	68 0e 71 02 c0       	push   0xc002710e
c0012141:	e8 11 01 00 00       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0012146:	c7 04 24 16 71 02 c0 	mov    DWORD PTR [esp],0xc0027116
c001214d:	e8 b2 77 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0012152:	83 c4 10             	add    esp,0x10
c0012155:	c9                   	leave  
c0012156:	c3                   	ret    

c0012157 <__cxa_pure_virtual>:
c0012157:	83 ec 18             	sub    esp,0x18
c001215a:	68 2e 71 02 c0       	push   0xc002712e
c001215f:	e8 a0 77 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0012164:	83 c4 1c             	add    esp,0x1c
c0012167:	c3                   	ret    

c0012168 <operator new(unsigned long)>:
c0012168:	e9 f9 cf ff ff       	jmp    c000f166 <malloc>

c001216d <operator new[](unsigned long)>:
c001216d:	e9 f4 cf ff ff       	jmp    c000f166 <malloc>

c0012172 <operator delete(void*)>:
c0012172:	e9 0f d0 ff ff       	jmp    c000f186 <rfree>

c0012177 <operator delete(void*, unsigned long)>:
c0012177:	e9 0a d0 ff ff       	jmp    c000f186 <rfree>

c001217c <operator delete[](void*)>:
c001217c:	e9 05 d0 ff ff       	jmp    c000f186 <rfree>

c0012181 <operator delete[](void*, unsigned long)>:
c0012181:	e9 00 d0 ff ff       	jmp    c000f186 <rfree>

c0012186 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012186:	57                   	push   edi
c0012187:	b9 3f 00 00 00       	mov    ecx,0x3f
c001218c:	56                   	push   esi
c001218d:	be 44 71 02 c0       	mov    esi,0xc0027144
c0012192:	53                   	push   ebx
c0012193:	83 ec 40             	sub    esp,0x40
c0012196:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001219a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001219e:	fc                   	cld    
c001219f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121a1:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00121a5:	83 f9 3e             	cmp    ecx,0x3e
c00121a8:	7e 05                	jle    c00121af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121aa:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121af:	89 df                	mov    edi,ebx
c00121b1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121b5:	eb 02                	jmp    c00121b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121b7:	89 c7                	mov    edi,eax
c00121b9:	31 d2                	xor    edx,edx
c00121bb:	46                   	inc    esi
c00121bc:	89 f8                	mov    eax,edi
c00121be:	f7 f1                	div    ecx
c00121c0:	39 cf                	cmp    edi,ecx
c00121c2:	73 f3                	jae    c00121b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121c7:	eb 02                	jmp    c00121cb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121c9:	89 c3                	mov    ebx,eax
c00121cb:	31 d2                	xor    edx,edx
c00121cd:	4e                   	dec    esi
c00121ce:	89 d8                	mov    eax,ebx
c00121d0:	f7 f1                	div    ecx
c00121d2:	39 cb                	cmp    ebx,ecx
c00121d4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121d8:	88 16                	mov    BYTE PTR [esi],dl
c00121da:	73 ed                	jae    c00121c9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121dc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121e0:	83 c4 40             	add    esp,0x40
c00121e3:	5b                   	pop    ebx
c00121e4:	5e                   	pop    esi
c00121e5:	5f                   	pop    edi
c00121e6:	c3                   	ret    

c00121e7 <Dbg::logc(char)>:
c00121e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121eb:	ba fd 03 00 00       	mov    edx,0x3fd
c00121f0:	ec                   	in     al,dx
c00121f1:	a8 20                	test   al,0x20
c00121f3:	74 fb                	je     c00121f0 <Dbg::logc(char)+0x9>
c00121f5:	ba f8 03 00 00       	mov    edx,0x3f8
c00121fa:	88 c8                	mov    al,cl
c00121fc:	ee                   	out    dx,al
c00121fd:	c3                   	ret    

c00121fe <Dbg::logs(char*)>:
c00121fe:	53                   	push   ebx
c00121ff:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012203:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012206:	84 c0                	test   al,al
c0012208:	74 0f                	je     c0012219 <Dbg::logs(char*)+0x1b>
c001220a:	50                   	push   eax
c001220b:	43                   	inc    ebx
c001220c:	e8 d6 ff ff ff       	call   c00121e7 <Dbg::logc(char)>
c0012211:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012214:	5a                   	pop    edx
c0012215:	84 c0                	test   al,al
c0012217:	75 f1                	jne    c001220a <Dbg::logs(char*)+0xc>
c0012219:	5b                   	pop    ebx
c001221a:	c3                   	ret    

c001221b <Dbg::logWriteInt(unsigned int)>:
c001221b:	83 ec 10             	sub    esp,0x10
c001221e:	6a 0a                	push   0xa
c0012220:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012224:	50                   	push   eax
c0012225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012229:	e8 58 ff ff ff       	call   c0012186 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001222e:	50                   	push   eax
c001222f:	e8 ca ff ff ff       	call   c00121fe <Dbg::logs(char*)>
c0012234:	83 c4 20             	add    esp,0x20
c0012237:	c3                   	ret    

c0012238 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012238:	83 ec 10             	sub    esp,0x10
c001223b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001223f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012243:	50                   	push   eax
c0012244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012248:	e8 39 ff ff ff       	call   c0012186 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001224d:	50                   	push   eax
c001224e:	e8 ab ff ff ff       	call   c00121fe <Dbg::logs(char*)>
c0012253:	83 c4 20             	add    esp,0x20
c0012256:	c3                   	ret    

c0012257 <Dbg::kprintf(char const*, ...)>:
c0012257:	55                   	push   ebp
c0012258:	57                   	push   edi
c0012259:	56                   	push   esi
c001225a:	53                   	push   ebx
c001225b:	83 ec 0c             	sub    esp,0xc
c001225e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012262:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001226a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001226d:	84 c0                	test   al,al
c001226f:	74 4a                	je     c00122bb <Dbg::kprintf(char const*, ...)+0x64>
c0012271:	31 db                	xor    ebx,ebx
c0012273:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012276:	3c 25                	cmp    al,0x25
c0012278:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001227b:	0f 85 e4 00 00 00    	jne    c0012365 <Dbg::kprintf(char const*, ...)+0x10e>
c0012281:	83 c3 02             	add    ebx,0x2
c0012284:	8a 07                	mov    al,BYTE PTR [edi]
c0012286:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012289:	83 e8 25             	sub    eax,0x25
c001228c:	3c 53                	cmp    al,0x53
c001228e:	0f 87 ba 00 00 00    	ja     c001234e <Dbg::kprintf(char const*, ...)+0xf7>
c0012294:	0f b6 c0             	movzx  eax,al
c0012297:	ff 24 85 84 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e7c]
c001229e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122a2:	89 c8                	mov    eax,ecx
c00122a4:	83 c1 04             	add    ecx,0x4
c00122a7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122ab:	ff 30                	push   DWORD PTR [eax]
c00122ad:	e8 4c ff ff ff       	call   c00121fe <Dbg::logs(char*)>
c00122b2:	58                   	pop    eax
c00122b3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122b7:	84 c0                	test   al,al
c00122b9:	75 b8                	jne    c0012273 <Dbg::kprintf(char const*, ...)+0x1c>
c00122bb:	83 c4 0c             	add    esp,0xc
c00122be:	5b                   	pop    ebx
c00122bf:	5e                   	pop    esi
c00122c0:	5f                   	pop    edi
c00122c1:	5d                   	pop    ebp
c00122c2:	c3                   	ret    
c00122c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122c7:	89 d0                	mov    eax,edx
c00122c9:	83 c2 04             	add    edx,0x4
c00122cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122d0:	ff 30                	push   DWORD PTR [eax]
c00122d2:	e8 44 ff ff ff       	call   c001221b <Dbg::logWriteInt(unsigned int)>
c00122d7:	58                   	pop    eax
c00122d8:	eb d9                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122de:	89 d0                	mov    eax,edx
c00122e0:	83 c2 04             	add    edx,0x4
c00122e3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122ea:	50                   	push   eax
c00122eb:	e8 f7 fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c00122f0:	58                   	pop    eax
c00122f1:	eb c0                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c00122f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122f7:	89 c8                	mov    eax,ecx
c00122f9:	83 c1 04             	add    ecx,0x4
c00122fc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012300:	ff 30                	push   DWORD PTR [eax]
c0012302:	e8 14 ff ff ff       	call   c001221b <Dbg::logWriteInt(unsigned int)>
c0012307:	5f                   	pop    edi
c0012308:	eb a9                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c001230a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001230e:	89 c8                	mov    eax,ecx
c0012310:	83 c1 04             	add    ecx,0x4
c0012313:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012317:	6a 10                	push   0x10
c0012319:	ff 30                	push   DWORD PTR [eax]
c001231b:	e8 18 ff ff ff       	call   c0012238 <Dbg::logWriteIntBase(unsigned int, int)>
c0012320:	59                   	pop    ecx
c0012321:	5f                   	pop    edi
c0012322:	eb 8f                	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012324:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012328:	89 d0                	mov    eax,edx
c001232a:	83 c2 08             	add    edx,0x8
c001232d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012331:	6a 10                	push   0x10
c0012333:	ff 30                	push   DWORD PTR [eax]
c0012335:	e8 fe fe ff ff       	call   c0012238 <Dbg::logWriteIntBase(unsigned int, int)>
c001233a:	58                   	pop    eax
c001233b:	5a                   	pop    edx
c001233c:	e9 72 ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012341:	6a 25                	push   0x25
c0012343:	e8 9f fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c0012348:	58                   	pop    eax
c0012349:	e9 65 ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c001234e:	6a 25                	push   0x25
c0012350:	e8 92 fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c0012355:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012358:	50                   	push   eax
c0012359:	e8 89 fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c001235e:	5a                   	pop    edx
c001235f:	59                   	pop    ecx
c0012360:	e9 4e ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012365:	50                   	push   eax
c0012366:	89 eb                	mov    ebx,ebp
c0012368:	e8 7a fe ff ff       	call   c00121e7 <Dbg::logc(char)>
c001236d:	89 fd                	mov    ebp,edi
c001236f:	58                   	pop    eax
c0012370:	e9 3e ff ff ff       	jmp    c00122b3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012375:	90                   	nop

c0012376 <File::read(unsigned long long, void*, int*)>:
c0012376:	53                   	push   ebx
c0012377:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001237b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001237f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012386:	3c 19                	cmp    al,0x19
c0012388:	77 35                	ja     c00123bf <File::read(unsigned long long, void*, int*)+0x49>
c001238a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012391:	85 c0                	test   eax,eax
c0012393:	74 2a                	je     c00123bf <File::read(unsigned long long, void*, int*)+0x49>
c0012395:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001239b:	85 c0                	test   eax,eax
c001239d:	74 20                	je     c00123bf <File::read(unsigned long long, void*, int*)+0x49>
c001239f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123a3:	74 21                	je     c00123c6 <File::read(unsigned long long, void*, int*)+0x50>
c00123a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123ab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123b9:	5b                   	pop    ebx
c00123ba:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123bd:	ff e0                	jmp    eax
c00123bf:	b8 0b 00 00 00       	mov    eax,0xb
c00123c4:	eb 05                	jmp    c00123cb <File::read(unsigned long long, void*, int*)+0x55>
c00123c6:	b8 05 00 00 00       	mov    eax,0x5
c00123cb:	5b                   	pop    ebx
c00123cc:	c3                   	ret    
c00123cd:	90                   	nop

c00123ce <File::write(unsigned long long, void*, int*)>:
c00123ce:	53                   	push   ebx
c00123cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123de:	3c 19                	cmp    al,0x19
c00123e0:	77 35                	ja     c0012417 <File::write(unsigned long long, void*, int*)+0x49>
c00123e2:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c00123e9:	85 c0                	test   eax,eax
c00123eb:	74 2a                	je     c0012417 <File::write(unsigned long long, void*, int*)+0x49>
c00123ed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123f3:	85 c0                	test   eax,eax
c00123f5:	74 20                	je     c0012417 <File::write(unsigned long long, void*, int*)+0x49>
c00123f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123fb:	74 21                	je     c001241e <File::write(unsigned long long, void*, int*)+0x50>
c00123fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012403:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012409:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001240d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012411:	5b                   	pop    ebx
c0012412:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012415:	ff e0                	jmp    eax
c0012417:	b8 0b 00 00 00       	mov    eax,0xb
c001241c:	eb 05                	jmp    c0012423 <File::write(unsigned long long, void*, int*)+0x55>
c001241e:	b8 05 00 00 00       	mov    eax,0x5
c0012423:	5b                   	pop    ebx
c0012424:	c3                   	ret    
c0012425:	90                   	nop

c0012426 <Directory::read(unsigned long long, void*, int*)>:
c0012426:	53                   	push   ebx
c0012427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001242b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001242f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012436:	3c 19                	cmp    al,0x19
c0012438:	77 35                	ja     c001246f <Directory::read(unsigned long long, void*, int*)+0x49>
c001243a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012441:	85 c0                	test   eax,eax
c0012443:	74 2a                	je     c001246f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012445:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001244b:	85 c0                	test   eax,eax
c001244d:	74 20                	je     c001246f <Directory::read(unsigned long long, void*, int*)+0x49>
c001244f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012453:	74 21                	je     c0012476 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012455:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012457:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001245b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012461:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012465:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012469:	5b                   	pop    ebx
c001246a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001246d:	ff e0                	jmp    eax
c001246f:	b8 0b 00 00 00       	mov    eax,0xb
c0012474:	eb 05                	jmp    c001247b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012476:	b8 05 00 00 00       	mov    eax,0x5
c001247b:	5b                   	pop    ebx
c001247c:	c3                   	ret    
c001247d:	90                   	nop

c001247e <Directory::write(unsigned long long, void*, int*)>:
c001247e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012482:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012489:	b8 0b 00 00 00       	mov    eax,0xb
c001248e:	80 fa 19             	cmp    dl,0x19
c0012491:	77 18                	ja     c00124ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012493:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001249a:	85 d2                	test   edx,edx
c001249c:	74 0d                	je     c00124ab <Directory::write(unsigned long long, void*, int*)+0x2d>
c001249e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00124a5:	19 c0                	sbb    eax,eax
c00124a7:	83 e0 0a             	and    eax,0xa
c00124aa:	40                   	inc    eax
c00124ab:	c3                   	ret    

c00124ac <File::isAtty()>:
c00124ac:	31 c0                	xor    eax,eax
c00124ae:	c3                   	ret    
c00124af:	90                   	nop

c00124b0 <Directory::isAtty()>:
c00124b0:	31 c0                	xor    eax,eax
c00124b2:	c3                   	ret    
c00124b3:	90                   	nop

c00124b4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124b4:	b8 0a 00 00 00       	mov    eax,0xa
c00124b9:	c3                   	ret    

c00124ba <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124ba:	b8 0a 00 00 00       	mov    eax,0xa
c00124bf:	c3                   	ret    

c00124c0 <File::~File()>:
c00124c0:	83 ec 0c             	sub    esp,0xc
c00124c3:	ba 40 73 02 c0       	mov    edx,0xc0027340
c00124c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cc:	89 10                	mov    DWORD PTR [eax],edx
c00124ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124d2:	83 ec 0c             	sub    esp,0xc
c00124d5:	50                   	push   eax
c00124d6:	e8 49 eb ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c00124db:	83 c4 10             	add    esp,0x10
c00124de:	90                   	nop
c00124df:	83 c4 0c             	add    esp,0xc
c00124e2:	c3                   	ret    
c00124e3:	90                   	nop

c00124e4 <File::~File()>:
c00124e4:	83 ec 0c             	sub    esp,0xc
c00124e7:	83 ec 0c             	sub    esp,0xc
c00124ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ee:	e8 cd ff ff ff       	call   c00124c0 <File::~File()>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	83 ec 08             	sub    esp,0x8
c00124f9:	68 14 01 00 00       	push   0x114
c00124fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012502:	e8 70 fc ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012507:	83 c4 10             	add    esp,0x10
c001250a:	83 c4 0c             	add    esp,0xc
c001250d:	c3                   	ret    

c001250e <Directory::~Directory()>:
c001250e:	83 ec 0c             	sub    esp,0xc
c0012511:	ba 5c 73 02 c0       	mov    edx,0xc002735c
c0012516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251a:	89 10                	mov    DWORD PTR [eax],edx
c001251c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012520:	83 ec 0c             	sub    esp,0xc
c0012523:	50                   	push   eax
c0012524:	e8 fb ea ff ff       	call   c0011024 <UnixFile::~UnixFile()>
c0012529:	83 c4 10             	add    esp,0x10
c001252c:	90                   	nop
c001252d:	83 c4 0c             	add    esp,0xc
c0012530:	c3                   	ret    
c0012531:	90                   	nop

c0012532 <Directory::~Directory()>:
c0012532:	83 ec 0c             	sub    esp,0xc
c0012535:	83 ec 0c             	sub    esp,0xc
c0012538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001253c:	e8 cd ff ff ff       	call   c001250e <Directory::~Directory()>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	83 ec 08             	sub    esp,0x8
c0012547:	68 14 01 00 00       	push   0x114
c001254c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012550:	e8 22 fc ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	83 c4 0c             	add    esp,0xc
c001255b:	c3                   	ret    

c001255c <Filesystem::Filesystem()>:
c001255c:	ba dc 72 02 c0       	mov    edx,0xc00272dc
c0012561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012565:	89 10                	mov    DWORD PTR [eax],edx
c0012567:	8b 15 68 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a568
c001256d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012571:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012578:	a3 68 a5 02 c0       	mov    ds:0xc002a568,eax
c001257d:	90                   	nop
c001257e:	c3                   	ret    
c001257f:	90                   	nop

c0012580 <Filesystem::~Filesystem()>:
c0012580:	ba dc 72 02 c0       	mov    edx,0xc00272dc
c0012585:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012589:	89 10                	mov    DWORD PTR [eax],edx
c001258b:	90                   	nop
c001258c:	c3                   	ret    
c001258d:	90                   	nop

c001258e <Filesystem::~Filesystem()>:
c001258e:	83 ec 0c             	sub    esp,0xc
c0012591:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012595:	e8 e6 ff ff ff       	call   c0012580 <Filesystem::~Filesystem()>
c001259a:	83 c4 04             	add    esp,0x4
c001259d:	83 ec 08             	sub    esp,0x8
c00125a0:	6a 08                	push   0x8
c00125a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125a6:	e8 cc fb ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00125ab:	83 c4 10             	add    esp,0x10
c00125ae:	83 c4 0c             	add    esp,0xc
c00125b1:	c3                   	ret    

c00125b2 <initVFS()>:
c00125b2:	83 ec 18             	sub    esp,0x18
c00125b5:	6a 08                	push   0x8
c00125b7:	e8 ac fb ff ff       	call   c0012168 <operator new(unsigned long)>
c00125bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00125bf:	e8 76 c1 00 00       	call   c001e73a <FAT::FAT()>
c00125c4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125cb:	e8 98 fb ff ff       	call   c0012168 <operator new(unsigned long)>
c00125d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00125d3:	e8 d8 d3 00 00       	call   c001f9b0 <ISO9660::ISO9660()>
c00125d8:	83 c4 1c             	add    esp,0x1c
c00125db:	c3                   	ret    

c00125dc <standardiseFiles(char*, char const*, char const*)>:
c00125dc:	55                   	push   ebp
c00125dd:	57                   	push   edi
c00125de:	56                   	push   esi
c00125df:	53                   	push   ebx
c00125e0:	81 ec 10 04 00 00    	sub    esp,0x410
c00125e6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125ed:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125f4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125fb:	68 00 04 00 00       	push   0x400
c0012600:	6a 00                	push   0x0
c0012602:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012606:	56                   	push   esi
c0012607:	e8 e0 e0 fe ff       	call   c00006ec <memset>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012613:	75 0b                	jne    c0012620 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012615:	50                   	push   eax
c0012616:	50                   	push   eax
c0012617:	57                   	push   edi
c0012618:	56                   	push   esi
c0012619:	e8 6d e1 fe ff       	call   c000078b <strcpy>
c001261e:	eb 41                	jmp    c0012661 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012620:	8a 07                	mov    al,BYTE PTR [edi]
c0012622:	3c 5c                	cmp    al,0x5c
c0012624:	74 04                	je     c001262a <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012626:	3c 2f                	cmp    al,0x2f
c0012628:	75 18                	jne    c0012642 <standardiseFiles(char*, char const*, char const*)+0x66>
c001262a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001262d:	3c 60                	cmp    al,0x60
c001262f:	7e 03                	jle    c0012634 <standardiseFiles(char*, char const*, char const*)+0x58>
c0012631:	83 e8 20             	sub    eax,0x20
c0012634:	88 04 24             	mov    BYTE PTR [esp],al
c0012637:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001263e:	50                   	push   eax
c001263f:	50                   	push   eax
c0012640:	eb 18                	jmp    c001265a <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012642:	50                   	push   eax
c0012643:	50                   	push   eax
c0012644:	55                   	push   ebp
c0012645:	56                   	push   esi
c0012646:	e8 40 e1 fe ff       	call   c000078b <strcpy>
c001264b:	5a                   	pop    edx
c001264c:	59                   	pop    ecx
c001264d:	68 6c 86 02 c0       	push   0xc002866c
c0012652:	56                   	push   esi
c0012653:	e8 ea e1 fe ff       	call   c0000842 <strcat>
c0012658:	5d                   	pop    ebp
c0012659:	58                   	pop    eax
c001265a:	57                   	push   edi
c001265b:	56                   	push   esi
c001265c:	e8 e1 e1 fe ff       	call   c0000842 <strcat>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012667:	3c 60                	cmp    al,0x60
c0012669:	7e 03                	jle    c001266e <standardiseFiles(char*, char const*, char const*)+0x92>
c001266b:	83 e8 20             	sub    eax,0x20
c001266e:	88 04 24             	mov    BYTE PTR [esp],al
c0012671:	88 03                	mov    BYTE PTR [ebx],al
c0012673:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001267a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012680:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012684:	bf 03 00 00 00       	mov    edi,0x3
c0012689:	b8 03 00 00 00       	mov    eax,0x3
c001268e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012691:	84 d2                	test   dl,dl
c0012693:	0f 84 91 00 00 00    	je     c001272a <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012699:	8d 4f 01             	lea    ecx,[edi+0x1]
c001269c:	80 fa 5c             	cmp    dl,0x5c
c001269f:	74 05                	je     c00126a6 <standardiseFiles(char*, char const*, char const*)+0xca>
c00126a1:	80 fa 2f             	cmp    dl,0x2f
c00126a4:	75 12                	jne    c00126b8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a6:	89 c5                	mov    ebp,eax
c00126a8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126ad:	74 09                	je     c00126b8 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126af:	40                   	inc    eax
c00126b0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126b4:	89 cf                	mov    edi,ecx
c00126b6:	eb d6                	jmp    c001268e <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126b8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126bd:	75 5b                	jne    c001271a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126bf:	80 fa 2e             	cmp    dl,0x2e
c00126c2:	75 56                	jne    c001271a <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126c4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126c8:	74 19                	je     c00126e3 <standardiseFiles(char*, char const*, char const*)+0x107>
c00126ca:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126cf:	74 53                	je     c0012724 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126d1:	89 f9                	mov    ecx,edi
c00126d3:	41                   	inc    ecx
c00126d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126d7:	80 fa 2f             	cmp    dl,0x2f
c00126da:	74 f7                	je     c00126d3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126dc:	80 fa 5c             	cmp    dl,0x5c
c00126df:	74 f2                	je     c00126d3 <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126e1:	eb d1                	jmp    c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126e3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126e8:	74 3a                	je     c0012724 <standardiseFiles(char*, char const*, char const*)+0x148>
c00126ea:	83 f8 03             	cmp    eax,0x3
c00126ed:	74 c5                	je     c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126ef:	41                   	inc    ecx
c00126f0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126f3:	80 fa 2f             	cmp    dl,0x2f
c00126f6:	74 f7                	je     c00126ef <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f8:	80 fa 5c             	cmp    dl,0x5c
c00126fb:	74 f2                	je     c00126ef <standardiseFiles(char*, char const*, char const*)+0x113>
c00126fd:	48                   	dec    eax
c00126fe:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012702:	75 06                	jne    c001270a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012704:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012708:	eb f3                	jmp    c00126fd <standardiseFiles(char*, char const*, char const*)+0x121>
c001270a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001270e:	74 07                	je     c0012717 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012710:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012714:	48                   	dec    eax
c0012715:	eb f3                	jmp    c001270a <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012717:	40                   	inc    eax
c0012718:	eb 9a                	jmp    c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271a:	80 fa 2f             	cmp    dl,0x2f
c001271d:	74 95                	je     c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271f:	80 fa 5c             	cmp    dl,0x5c
c0012722:	74 90                	je     c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012724:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012727:	40                   	inc    eax
c0012728:	eb 8a                	jmp    c00126b4 <standardiseFiles(char*, char const*, char const*)+0xd8>
c001272a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001272e:	83 ec 0c             	sub    esp,0xc
c0012731:	53                   	push   ebx
c0012732:	e8 d2 df fe ff       	call   c0000709 <strlen>
c0012737:	83 c4 10             	add    esp,0x10
c001273a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001273f:	75 26                	jne    c0012767 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012741:	83 ec 0c             	sub    esp,0xc
c0012744:	53                   	push   ebx
c0012745:	e8 bf df fe ff       	call   c0000709 <strlen>
c001274a:	83 c4 10             	add    esp,0x10
c001274d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012752:	74 26                	je     c001277a <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012754:	83 ec 0c             	sub    esp,0xc
c0012757:	53                   	push   ebx
c0012758:	e8 ac df fe ff       	call   c0000709 <strlen>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012765:	eb c7                	jmp    c001272e <standardiseFiles(char*, char const*, char const*)+0x152>
c0012767:	83 ec 0c             	sub    esp,0xc
c001276a:	53                   	push   ebx
c001276b:	e8 99 df fe ff       	call   c0000709 <strlen>
c0012770:	83 c4 10             	add    esp,0x10
c0012773:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012778:	74 c7                	je     c0012741 <standardiseFiles(char*, char const*, char const*)+0x165>
c001277a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012780:	5b                   	pop    ebx
c0012781:	5e                   	pop    esi
c0012782:	5f                   	pop    edi
c0012783:	5d                   	pop    ebp
c0012784:	c3                   	ret    
c0012785:	90                   	nop

c0012786 <File::File(char const*, Process*)>:
c0012786:	83 ec 0c             	sub    esp,0xc
c0012789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001278d:	83 ec 08             	sub    esp,0x8
c0012790:	6a 00                	push   0x0
c0012792:	50                   	push   eax
c0012793:	e8 ea e6 ff ff       	call   c0010e82 <UnixFile::UnixFile(int)>
c0012798:	83 c4 10             	add    esp,0x10
c001279b:	ba 40 73 02 c0       	mov    edx,0xc0027340
c00127a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a4:	89 10                	mov    DWORD PTR [eax],edx
c00127a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127aa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b4:	83 c0 0d             	add    eax,0xd
c00127b7:	83 ec 04             	sub    esp,0x4
c00127ba:	52                   	push   edx
c00127bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127bf:	50                   	push   eax
c00127c0:	e8 17 fe ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c00127c5:	83 c4 10             	add    esp,0x10
c00127c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127cc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127cf:	8d 50 bf             	lea    edx,[eax-0x41]
c00127d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127e4:	90                   	nop
c00127e5:	83 c4 0c             	add    esp,0xc
c00127e8:	c3                   	ret    
c00127e9:	90                   	nop

c00127ea <File::open(FileOpenMode)>:
c00127ea:	53                   	push   ebx
c00127eb:	b8 0b 00 00 00       	mov    eax,0xb
c00127f0:	83 ec 08             	sub    esp,0x8
c00127f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127f7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127fe:	80 fa 19             	cmp    dl,0x19
c0012801:	77 40                	ja     c0012843 <File::open(FileOpenMode)+0x59>
c0012803:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001280a:	85 d2                	test   edx,edx
c001280c:	74 35                	je     c0012843 <File::open(FileOpenMode)+0x59>
c001280e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012814:	85 d2                	test   edx,edx
c0012816:	74 2b                	je     c0012843 <File::open(FileOpenMode)+0x59>
c0012818:	b8 06 00 00 00       	mov    eax,0x6
c001281d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012821:	75 20                	jne    c0012843 <File::open(FileOpenMode)+0x59>
c0012823:	8b 02                	mov    eax,DWORD PTR [edx]
c0012825:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001282b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001282f:	51                   	push   ecx
c0012830:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012833:	51                   	push   ecx
c0012834:	52                   	push   edx
c0012835:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012838:	83 c4 10             	add    esp,0x10
c001283b:	85 c0                	test   eax,eax
c001283d:	75 04                	jne    c0012843 <File::open(FileOpenMode)+0x59>
c001283f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012843:	83 c4 08             	add    esp,0x8
c0012846:	5b                   	pop    ebx
c0012847:	c3                   	ret    

c0012848 <File::close()>:
c0012848:	53                   	push   ebx
c0012849:	b8 0b 00 00 00       	mov    eax,0xb
c001284e:	83 ec 08             	sub    esp,0x8
c0012851:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012855:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001285c:	80 fa 19             	cmp    dl,0x19
c001285f:	77 41                	ja     c00128a2 <File::close()+0x5a>
c0012861:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012868:	85 db                	test   ebx,ebx
c001286a:	74 36                	je     c00128a2 <File::close()+0x5a>
c001286c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012873:	74 2d                	je     c00128a2 <File::close()+0x5a>
c0012875:	b8 05 00 00 00       	mov    eax,0x5
c001287a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001287e:	74 22                	je     c00128a2 <File::close()+0x5a>
c0012880:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012884:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c001288b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012891:	53                   	push   ebx
c0012892:	53                   	push   ebx
c0012893:	8b 10                	mov    edx,DWORD PTR [eax]
c0012895:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001289b:	50                   	push   eax
c001289c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	83 c4 08             	add    esp,0x8
c00128a5:	5b                   	pop    ebx
c00128a6:	c3                   	ret    
c00128a7:	90                   	nop

c00128a8 <File::seek(unsigned long long)>:
c00128a8:	56                   	push   esi
c00128a9:	53                   	push   ebx
c00128aa:	b8 0b 00 00 00       	mov    eax,0xb
c00128af:	51                   	push   ecx
c00128b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128b8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128c3:	80 fa 19             	cmp    dl,0x19
c00128c6:	77 31                	ja     c00128f9 <File::seek(unsigned long long)+0x51>
c00128c8:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c00128cf:	85 d2                	test   edx,edx
c00128d1:	74 26                	je     c00128f9 <File::seek(unsigned long long)+0x51>
c00128d3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128d9:	85 d2                	test   edx,edx
c00128db:	74 1c                	je     c00128f9 <File::seek(unsigned long long)+0x51>
c00128dd:	b8 05 00 00 00       	mov    eax,0x5
c00128e2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128e6:	74 11                	je     c00128f9 <File::seek(unsigned long long)+0x51>
c00128e8:	8b 02                	mov    eax,DWORD PTR [edx]
c00128ea:	53                   	push   ebx
c00128eb:	51                   	push   ecx
c00128ec:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128f2:	52                   	push   edx
c00128f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	5a                   	pop    edx
c00128fa:	5b                   	pop    ebx
c00128fb:	5e                   	pop    esi
c00128fc:	c3                   	ret    
c00128fd:	90                   	nop

c00128fe <File::tell(unsigned long long*)>:
c00128fe:	83 ec 0c             	sub    esp,0xc
c0012901:	b8 0b 00 00 00       	mov    eax,0xb
c0012906:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001290a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012911:	80 fa 19             	cmp    dl,0x19
c0012914:	77 34                	ja     c001294a <File::tell(unsigned long long*)+0x4c>
c0012916:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c001291d:	85 d2                	test   edx,edx
c001291f:	74 29                	je     c001294a <File::tell(unsigned long long*)+0x4c>
c0012921:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012927:	85 d2                	test   edx,edx
c0012929:	74 1f                	je     c001294a <File::tell(unsigned long long*)+0x4c>
c001292b:	b8 05 00 00 00       	mov    eax,0x5
c0012930:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012934:	74 14                	je     c001294a <File::tell(unsigned long long*)+0x4c>
c0012936:	50                   	push   eax
c0012937:	8b 02                	mov    eax,DWORD PTR [edx]
c0012939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001293d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012943:	52                   	push   edx
c0012944:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	83 c4 0c             	add    esp,0xc
c001294d:	c3                   	ret    

c001294e <File::rewind()>:
c001294e:	83 ec 10             	sub    esp,0x10
c0012951:	6a 00                	push   0x0
c0012953:	6a 00                	push   0x0
c0012955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012959:	e8 4a ff ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001295e:	83 c4 1c             	add    esp,0x1c
c0012961:	c3                   	ret    

c0012962 <File::unlink()>:
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	b8 0b 00 00 00       	mov    eax,0xb
c001296a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001296e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012975:	80 f9 19             	cmp    cl,0x19
c0012978:	77 2f                	ja     c00129a9 <File::unlink()+0x47>
c001297a:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012981:	85 c9                	test   ecx,ecx
c0012983:	74 24                	je     c00129a9 <File::unlink()+0x47>
c0012985:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001298b:	85 c9                	test   ecx,ecx
c001298d:	74 1a                	je     c00129a9 <File::unlink()+0x47>
c001298f:	b8 06 00 00 00       	mov    eax,0x6
c0012994:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012998:	75 0f                	jne    c00129a9 <File::unlink()+0x47>
c001299a:	83 c2 0d             	add    edx,0xd
c001299d:	50                   	push   eax
c001299e:	50                   	push   eax
c001299f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129a1:	52                   	push   edx
c00129a2:	51                   	push   ecx
c00129a3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00129a6:	83 c4 10             	add    esp,0x10
c00129a9:	83 c4 0c             	add    esp,0xc
c00129ac:	c3                   	ret    
c00129ad:	90                   	nop

c00129ae <File::rename(char const*)>:
c00129ae:	83 ec 0c             	sub    esp,0xc
c00129b1:	b8 0b 00 00 00       	mov    eax,0xb
c00129b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129c1:	80 f9 19             	cmp    cl,0x19
c00129c4:	77 32                	ja     c00129f8 <File::rename(char const*)+0x4a>
c00129c6:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c00129cd:	85 c9                	test   ecx,ecx
c00129cf:	74 27                	je     c00129f8 <File::rename(char const*)+0x4a>
c00129d1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129d7:	85 c9                	test   ecx,ecx
c00129d9:	74 1d                	je     c00129f8 <File::rename(char const*)+0x4a>
c00129db:	b8 06 00 00 00       	mov    eax,0x6
c00129e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129e4:	75 12                	jne    c00129f8 <File::rename(char const*)+0x4a>
c00129e6:	83 c2 0d             	add    edx,0xd
c00129e9:	50                   	push   eax
c00129ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129f0:	52                   	push   edx
c00129f1:	51                   	push   ecx
c00129f2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	83 c4 0c             	add    esp,0xc
c00129fb:	c3                   	ret    

c00129fc <File::chfatattr(unsigned char, unsigned char)>:
c00129fc:	57                   	push   edi
c00129fd:	b8 0b 00 00 00       	mov    eax,0xb
c0012a02:	56                   	push   esi
c0012a03:	53                   	push   ebx
c0012a04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a13:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a17:	80 f9 19             	cmp    cl,0x19
c0012a1a:	77 37                	ja     c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a1c:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a23:	85 c9                	test   ecx,ecx
c0012a25:	74 2c                	je     c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a27:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a2d:	85 c9                	test   ecx,ecx
c0012a2f:	74 22                	je     c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a31:	b8 06 00 00 00       	mov    eax,0x6
c0012a36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a3a:	75 17                	jne    c0012a53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a3c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a3e:	89 f0                	mov    eax,esi
c0012a40:	83 c2 0d             	add    edx,0xd
c0012a43:	0f b6 f0             	movzx  esi,al
c0012a46:	0f b6 db             	movzx  ebx,bl
c0012a49:	56                   	push   esi
c0012a4a:	53                   	push   ebx
c0012a4b:	52                   	push   edx
c0012a4c:	51                   	push   ecx
c0012a4d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	5b                   	pop    ebx
c0012a54:	5e                   	pop    esi
c0012a55:	5f                   	pop    edi
c0012a56:	c3                   	ret    
c0012a57:	90                   	nop

c0012a58 <File::exists()>:
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	31 c0                	xor    eax,eax
c0012a5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a61:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a68:	80 f9 19             	cmp    cl,0x19
c0012a6b:	77 24                	ja     c0012a91 <File::exists()+0x39>
c0012a6d:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a74:	85 c9                	test   ecx,ecx
c0012a76:	74 19                	je     c0012a91 <File::exists()+0x39>
c0012a78:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a7e:	85 c9                	test   ecx,ecx
c0012a80:	74 0f                	je     c0012a91 <File::exists()+0x39>
c0012a82:	83 c2 0d             	add    edx,0xd
c0012a85:	50                   	push   eax
c0012a86:	50                   	push   eax
c0012a87:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a89:	52                   	push   edx
c0012a8a:	51                   	push   ecx
c0012a8b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a8e:	83 c4 10             	add    esp,0x10
c0012a91:	83 c4 0c             	add    esp,0xc
c0012a94:	c3                   	ret    
c0012a95:	90                   	nop

c0012a96 <File::stat(unsigned long long*, bool*)>:
c0012a96:	56                   	push   esi
c0012a97:	53                   	push   ebx
c0012a98:	50                   	push   eax
c0012a99:	b8 0b 00 00 00       	mov    eax,0xb
c0012a9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012aa2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012aa6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ab1:	80 f9 19             	cmp    cl,0x19
c0012ab4:	77 3d                	ja     c0012af3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab6:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012abd:	85 c9                	test   ecx,ecx
c0012abf:	74 32                	je     c0012af3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ac1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ac7:	85 c9                	test   ecx,ecx
c0012ac9:	74 28                	je     c0012af3 <File::stat(unsigned long long*, bool*)+0x5d>
c0012acb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012acd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ad1:	74 13                	je     c0012ae6 <File::stat(unsigned long long*, bool*)+0x50>
c0012ad3:	83 ec 04             	sub    esp,0x4
c0012ad6:	56                   	push   esi
c0012ad7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012add:	51                   	push   ecx
c0012ade:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ae1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012ae4:	eb 0a                	jmp    c0012af0 <File::stat(unsigned long long*, bool*)+0x5a>
c0012ae6:	53                   	push   ebx
c0012ae7:	83 c2 0d             	add    edx,0xd
c0012aea:	56                   	push   esi
c0012aeb:	52                   	push   edx
c0012aec:	51                   	push   ecx
c0012aed:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012af0:	83 c4 10             	add    esp,0x10
c0012af3:	5a                   	pop    edx
c0012af4:	5b                   	pop    ebx
c0012af5:	5e                   	pop    esi
c0012af6:	c3                   	ret    

c0012af7 <getcwd(Process*, char*, int)>:
c0012af7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012afb:	31 c0                	xor    eax,eax
c0012afd:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b00:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b04:	7d 15                	jge    c0012b1b <getcwd(Process*, char*, int)+0x24>
c0012b06:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b0a:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b11:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b14:	84 c9                	test   cl,cl
c0012b16:	74 06                	je     c0012b1e <getcwd(Process*, char*, int)+0x27>
c0012b18:	40                   	inc    eax
c0012b19:	eb e2                	jmp    c0012afd <getcwd(Process*, char*, int)+0x6>
c0012b1b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b1e:	31 c0                	xor    eax,eax
c0012b20:	c3                   	ret    

c0012b21 <setcwd(Process*, char*)>:
c0012b21:	55                   	push   ebp
c0012b22:	57                   	push   edi
c0012b23:	56                   	push   esi
c0012b24:	53                   	push   ebx
c0012b25:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b2b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b32:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b38:	57                   	push   edi
c0012b39:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b40:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b44:	56                   	push   esi
c0012b45:	e8 92 fa ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c0012b4a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b4d:	e8 b7 db fe ff       	call   c0000709 <strlen>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	83 f8 02             	cmp    eax,0x2
c0012b58:	77 17                	ja     c0012b71 <setcwd(Process*, char*)+0x50>
c0012b5a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b5f:	83 e8 41             	sub    eax,0x41
c0012b62:	83 f8 19             	cmp    eax,0x19
c0012b65:	76 24                	jbe    c0012b8b <setcwd(Process*, char*)+0x6a>
c0012b67:	b8 03 00 00 00       	mov    eax,0x3
c0012b6c:	e9 cb 00 00 00       	jmp    c0012c3c <setcwd(Process*, char*)+0x11b>
c0012b71:	83 ec 0c             	sub    esp,0xc
c0012b74:	56                   	push   esi
c0012b75:	e8 8f db fe ff       	call   c0000709 <strlen>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	83 f8 03             	cmp    eax,0x3
c0012b80:	75 33                	jne    c0012bb5 <setcwd(Process*, char*)+0x94>
c0012b82:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b87:	75 2c                	jne    c0012bb5 <setcwd(Process*, char*)+0x94>
c0012b89:	eb cf                	jmp    c0012b5a <setcwd(Process*, char*)+0x39>
c0012b8b:	8b 14 85 00 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5600]
c0012b92:	b8 05 00 00 00       	mov    eax,0x5
c0012b97:	85 d2                	test   edx,edx
c0012b99:	0f 84 9d 00 00 00    	je     c0012c3c <setcwd(Process*, char*)+0x11b>
c0012b9f:	b8 06 00 00 00       	mov    eax,0x6
c0012ba4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012bab:	0f 84 8b 00 00 00    	je     c0012c3c <setcwd(Process*, char*)+0x11b>
c0012bb1:	51                   	push   ecx
c0012bb2:	51                   	push   ecx
c0012bb3:	eb 7b                	jmp    c0012c30 <setcwd(Process*, char*)+0x10f>
c0012bb5:	83 ec 0c             	sub    esp,0xc
c0012bb8:	68 14 01 00 00       	push   0x114
c0012bbd:	e8 a6 f5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0012bc2:	83 c4 0c             	add    esp,0xc
c0012bc5:	89 c3                	mov    ebx,eax
c0012bc7:	55                   	push   ebp
c0012bc8:	56                   	push   esi
c0012bc9:	50                   	push   eax
c0012bca:	e8 b7 fb ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0012bcf:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bd4:	83 c4 0c             	add    esp,0xc
c0012bd7:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bdb:	50                   	push   eax
c0012bdc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012be0:	50                   	push   eax
c0012be1:	53                   	push   ebx
c0012be2:	e8 af fe ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c0012be7:	83 c4 10             	add    esp,0x10
c0012bea:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bec:	83 f8 02             	cmp    eax,0x2
c0012bef:	75 09                	jne    c0012bfa <setcwd(Process*, char*)+0xd9>
c0012bf1:	83 ec 0c             	sub    esp,0xc
c0012bf4:	53                   	push   ebx
c0012bf5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bf8:	eb 0d                	jmp    c0012c07 <setcwd(Process*, char*)+0xe6>
c0012bfa:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bfd:	85 c0                	test   eax,eax
c0012bff:	74 10                	je     c0012c11 <setcwd(Process*, char*)+0xf0>
c0012c01:	83 ec 0c             	sub    esp,0xc
c0012c04:	53                   	push   ebx
c0012c05:	ff d2                	call   edx
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	b8 01 00 00 00       	mov    eax,0x1
c0012c0f:	eb 2b                	jmp    c0012c3c <setcwd(Process*, char*)+0x11b>
c0012c11:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c16:	75 10                	jne    c0012c28 <setcwd(Process*, char*)+0x107>
c0012c18:	83 ec 0c             	sub    esp,0xc
c0012c1b:	53                   	push   ebx
c0012c1c:	ff d2                	call   edx
c0012c1e:	83 c4 10             	add    esp,0x10
c0012c21:	b8 02 00 00 00       	mov    eax,0x2
c0012c26:	eb 14                	jmp    c0012c3c <setcwd(Process*, char*)+0x11b>
c0012c28:	83 ec 0c             	sub    esp,0xc
c0012c2b:	53                   	push   ebx
c0012c2c:	ff d2                	call   edx
c0012c2e:	58                   	pop    eax
c0012c2f:	5a                   	pop    edx
c0012c30:	56                   	push   esi
c0012c31:	57                   	push   edi
c0012c32:	e8 54 db fe ff       	call   c000078b <strcpy>
c0012c37:	83 c4 10             	add    esp,0x10
c0012c3a:	31 c0                	xor    eax,eax
c0012c3c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c42:	5b                   	pop    ebx
c0012c43:	5e                   	pop    esi
c0012c44:	5f                   	pop    edi
c0012c45:	5d                   	pop    ebp
c0012c46:	c3                   	ret    
c0012c47:	90                   	nop

c0012c48 <Directory::Directory(char const*, Process*)>:
c0012c48:	83 ec 0c             	sub    esp,0xc
c0012c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c4f:	83 ec 08             	sub    esp,0x8
c0012c52:	6a 00                	push   0x0
c0012c54:	50                   	push   eax
c0012c55:	e8 28 e2 ff ff       	call   c0010e82 <UnixFile::UnixFile(int)>
c0012c5a:	83 c4 10             	add    esp,0x10
c0012c5d:	ba 5c 73 02 c0       	mov    edx,0xc002735c
c0012c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c66:	89 10                	mov    DWORD PTR [eax],edx
c0012c68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c6c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c76:	83 c0 0d             	add    eax,0xd
c0012c79:	83 ec 04             	sub    esp,0x4
c0012c7c:	52                   	push   edx
c0012c7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c81:	50                   	push   eax
c0012c82:	e8 55 f9 ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c91:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c98:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ca2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ca6:	90                   	nop
c0012ca7:	83 c4 0c             	add    esp,0xc
c0012caa:	c3                   	ret    
c0012cab:	90                   	nop

c0012cac <Directory::open()>:
c0012cac:	53                   	push   ebx
c0012cad:	b8 0b 00 00 00       	mov    eax,0xb
c0012cb2:	83 ec 08             	sub    esp,0x8
c0012cb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cc0:	80 fa 19             	cmp    dl,0x19
c0012cc3:	77 3d                	ja     c0012d02 <Directory::open()+0x56>
c0012cc5:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012ccc:	85 d2                	test   edx,edx
c0012cce:	74 32                	je     c0012d02 <Directory::open()+0x56>
c0012cd0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cd6:	85 d2                	test   edx,edx
c0012cd8:	74 28                	je     c0012d02 <Directory::open()+0x56>
c0012cda:	b8 06 00 00 00       	mov    eax,0x6
c0012cdf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ce3:	75 1d                	jne    c0012d02 <Directory::open()+0x56>
c0012ce5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ceb:	50                   	push   eax
c0012cec:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cee:	51                   	push   ecx
c0012cef:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cf2:	51                   	push   ecx
c0012cf3:	52                   	push   edx
c0012cf4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	85 c0                	test   eax,eax
c0012cfc:	75 04                	jne    c0012d02 <Directory::open()+0x56>
c0012cfe:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012d02:	83 c4 08             	add    esp,0x8
c0012d05:	5b                   	pop    ebx
c0012d06:	c3                   	ret    
c0012d07:	90                   	nop

c0012d08 <Directory::close()>:
c0012d08:	53                   	push   ebx
c0012d09:	b8 0b 00 00 00       	mov    eax,0xb
c0012d0e:	83 ec 08             	sub    esp,0x8
c0012d11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d15:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d1c:	80 fa 19             	cmp    dl,0x19
c0012d1f:	77 41                	ja     c0012d62 <Directory::close()+0x5a>
c0012d21:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012d28:	85 db                	test   ebx,ebx
c0012d2a:	74 36                	je     c0012d62 <Directory::close()+0x5a>
c0012d2c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d33:	74 2d                	je     c0012d62 <Directory::close()+0x5a>
c0012d35:	b8 05 00 00 00       	mov    eax,0x5
c0012d3a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d3e:	74 22                	je     c0012d62 <Directory::close()+0x5a>
c0012d40:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d44:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c0012d4b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d51:	53                   	push   ebx
c0012d52:	53                   	push   ebx
c0012d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d55:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d5b:	50                   	push   eax
c0012d5c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d5f:	83 c4 10             	add    esp,0x10
c0012d62:	83 c4 08             	add    esp,0x8
c0012d65:	5b                   	pop    ebx
c0012d66:	c3                   	ret    
c0012d67:	90                   	nop

c0012d68 <Directory::unlink()>:
c0012d68:	83 ec 0c             	sub    esp,0xc
c0012d6b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d7b:	80 f9 19             	cmp    cl,0x19
c0012d7e:	77 2f                	ja     c0012daf <Directory::unlink()+0x47>
c0012d80:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012d87:	85 c9                	test   ecx,ecx
c0012d89:	74 24                	je     c0012daf <Directory::unlink()+0x47>
c0012d8b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d91:	85 c9                	test   ecx,ecx
c0012d93:	74 1a                	je     c0012daf <Directory::unlink()+0x47>
c0012d95:	b8 06 00 00 00       	mov    eax,0x6
c0012d9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d9e:	75 0f                	jne    c0012daf <Directory::unlink()+0x47>
c0012da0:	83 c2 0d             	add    edx,0xd
c0012da3:	50                   	push   eax
c0012da4:	50                   	push   eax
c0012da5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012da7:	52                   	push   edx
c0012da8:	51                   	push   ecx
c0012da9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012dac:	83 c4 10             	add    esp,0x10
c0012daf:	83 c4 0c             	add    esp,0xc
c0012db2:	c3                   	ret    
c0012db3:	90                   	nop

c0012db4 <Directory::rename(char const*)>:
c0012db4:	83 ec 0c             	sub    esp,0xc
c0012db7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dbc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dc0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dc7:	80 f9 19             	cmp    cl,0x19
c0012dca:	77 32                	ja     c0012dfe <Directory::rename(char const*)+0x4a>
c0012dcc:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012dd3:	85 c9                	test   ecx,ecx
c0012dd5:	74 27                	je     c0012dfe <Directory::rename(char const*)+0x4a>
c0012dd7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ddd:	85 c9                	test   ecx,ecx
c0012ddf:	74 1d                	je     c0012dfe <Directory::rename(char const*)+0x4a>
c0012de1:	b8 06 00 00 00       	mov    eax,0x6
c0012de6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dea:	75 12                	jne    c0012dfe <Directory::rename(char const*)+0x4a>
c0012dec:	83 c2 0d             	add    edx,0xd
c0012def:	50                   	push   eax
c0012df0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012df2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012df6:	52                   	push   edx
c0012df7:	51                   	push   ecx
c0012df8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012dfb:	83 c4 10             	add    esp,0x10
c0012dfe:	83 c4 0c             	add    esp,0xc
c0012e01:	c3                   	ret    

c0012e02 <Directory::exists()>:
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	31 c0                	xor    eax,eax
c0012e07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e0b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e12:	80 f9 19             	cmp    cl,0x19
c0012e15:	77 24                	ja     c0012e3b <Directory::exists()+0x39>
c0012e17:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012e1e:	85 c9                	test   ecx,ecx
c0012e20:	74 19                	je     c0012e3b <Directory::exists()+0x39>
c0012e22:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e28:	85 c9                	test   ecx,ecx
c0012e2a:	74 0f                	je     c0012e3b <Directory::exists()+0x39>
c0012e2c:	83 c2 0d             	add    edx,0xd
c0012e2f:	50                   	push   eax
c0012e30:	50                   	push   eax
c0012e31:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e33:	52                   	push   edx
c0012e34:	51                   	push   ecx
c0012e35:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e38:	83 c4 10             	add    esp,0x10
c0012e3b:	83 c4 0c             	add    esp,0xc
c0012e3e:	c3                   	ret    
c0012e3f:	90                   	nop

c0012e40 <Directory::read(dirent*)>:
c0012e40:	83 ec 1c             	sub    esp,0x1c
c0012e43:	b8 0b 00 00 00       	mov    eax,0xb
c0012e48:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e4c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e53:	80 fa 19             	cmp    dl,0x19
c0012e56:	77 30                	ja     c0012e88 <Directory::read(dirent*)+0x48>
c0012e58:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012e5f:	85 d2                	test   edx,edx
c0012e61:	74 25                	je     c0012e88 <Directory::read(dirent*)+0x48>
c0012e63:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e6a:	74 1c                	je     c0012e88 <Directory::read(dirent*)+0x48>
c0012e6c:	83 ec 0c             	sub    esp,0xc
c0012e6f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e71:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e75:	52                   	push   edx
c0012e76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e7a:	6a 00                	push   0x0
c0012e7c:	68 10 01 00 00       	push   0x110
c0012e81:	51                   	push   ecx
c0012e82:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e85:	83 c4 20             	add    esp,0x20
c0012e88:	83 c4 1c             	add    esp,0x1c
c0012e8b:	c3                   	ret    

c0012e8c <Directory::create()>:
c0012e8c:	83 ec 0c             	sub    esp,0xc
c0012e8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9f:	80 f9 19             	cmp    cl,0x19
c0012ea2:	77 2f                	ja     c0012ed3 <Directory::create()+0x47>
c0012ea4:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012eab:	85 c9                	test   ecx,ecx
c0012ead:	74 24                	je     c0012ed3 <Directory::create()+0x47>
c0012eaf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb5:	85 c9                	test   ecx,ecx
c0012eb7:	74 1a                	je     c0012ed3 <Directory::create()+0x47>
c0012eb9:	b8 06 00 00 00       	mov    eax,0x6
c0012ebe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ec2:	75 0f                	jne    c0012ed3 <Directory::create()+0x47>
c0012ec4:	83 c2 0d             	add    edx,0xd
c0012ec7:	50                   	push   eax
c0012ec8:	50                   	push   eax
c0012ec9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ecb:	52                   	push   edx
c0012ecc:	51                   	push   ecx
c0012ecd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	83 c4 0c             	add    esp,0xc
c0012ed6:	c3                   	ret    
c0012ed7:	90                   	nop

c0012ed8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ed8:	b8 0a 00 00 00       	mov    eax,0xa
c0012edd:	c3                   	ret    

c0012ede <Bus::Bus(char const*)>:
c0012ede:	83 ec 0c             	sub    esp,0xc
c0012ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee5:	83 ec 08             	sub    esp,0x8
c0012ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eec:	50                   	push   eax
c0012eed:	e8 60 09 00 00       	call   c0013852 <Device::Device(char const*)>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	ba 78 73 02 c0       	mov    edx,0xc0027378
c0012efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efe:	89 10                	mov    DWORD PTR [eax],edx
c0012f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f04:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f0e:	90                   	nop
c0012f0f:	83 c4 0c             	add    esp,0xc
c0012f12:	c3                   	ret    
c0012f13:	90                   	nop

c0012f14 <Bus::~Bus()>:
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	ba 78 73 02 c0       	mov    edx,0xc0027378
c0012f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f20:	89 10                	mov    DWORD PTR [eax],edx
c0012f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f26:	83 ec 0c             	sub    esp,0xc
c0012f29:	50                   	push   eax
c0012f2a:	e8 d5 05 00 00       	call   c0013504 <Device::~Device()>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	90                   	nop
c0012f33:	83 c4 0c             	add    esp,0xc
c0012f36:	c3                   	ret    
c0012f37:	90                   	nop

c0012f38 <Bus::~Bus()>:
c0012f38:	83 ec 0c             	sub    esp,0xc
c0012f3b:	83 ec 0c             	sub    esp,0xc
c0012f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f42:	e8 cd ff ff ff       	call   c0012f14 <Bus::~Bus()>
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 ec 08             	sub    esp,0x8
c0012f4d:	68 58 01 00 00       	push   0x158
c0012f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f56:	e8 1c f2 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012f5b:	83 c4 10             	add    esp,0x10
c0012f5e:	83 c4 0c             	add    esp,0xc
c0012f61:	c3                   	ret    

c0012f62 <Buzzer::Buzzer(char const*)>:
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f69:	83 ec 08             	sub    esp,0x8
c0012f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f70:	50                   	push   eax
c0012f71:	e8 dc 08 00 00       	call   c0013852 <Device::Device(char const*)>
c0012f76:	83 c4 10             	add    esp,0x10
c0012f79:	ba a4 73 02 c0       	mov    edx,0xc00273a4
c0012f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f82:	89 10                	mov    DWORD PTR [eax],edx
c0012f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f88:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f96:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012fa0:	90                   	nop
c0012fa1:	83 c4 0c             	add    esp,0xc
c0012fa4:	c3                   	ret    
c0012fa5:	90                   	nop

c0012fa6 <Buzzer::~Buzzer()>:
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	ba a4 73 02 c0       	mov    edx,0xc00273a4
c0012fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb2:	89 10                	mov    DWORD PTR [eax],edx
c0012fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb8:	83 ec 0c             	sub    esp,0xc
c0012fbb:	50                   	push   eax
c0012fbc:	e8 43 05 00 00       	call   c0013504 <Device::~Device()>
c0012fc1:	83 c4 10             	add    esp,0x10
c0012fc4:	90                   	nop
c0012fc5:	83 c4 0c             	add    esp,0xc
c0012fc8:	c3                   	ret    
c0012fc9:	90                   	nop

c0012fca <Buzzer::~Buzzer()>:
c0012fca:	83 ec 0c             	sub    esp,0xc
c0012fcd:	83 ec 0c             	sub    esp,0xc
c0012fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd4:	e8 cd ff ff ff       	call   c0012fa6 <Buzzer::~Buzzer()>
c0012fd9:	83 c4 10             	add    esp,0x10
c0012fdc:	83 ec 08             	sub    esp,0x8
c0012fdf:	68 5c 01 00 00       	push   0x15c
c0012fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe8:	e8 8a f1 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0012fed:	83 c4 10             	add    esp,0x10
c0012ff0:	83 c4 0c             	add    esp,0xc
c0012ff3:	c3                   	ret    

c0012ff4 <Buzzer::stop()>:
c0012ff4:	83 ec 14             	sub    esp,0x14
c0012ff7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ffb:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ffd:	6a 00                	push   0x0
c0012fff:	50                   	push   eax
c0013000:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013003:	83 c4 1c             	add    esp,0x1c
c0013006:	c3                   	ret    

c0013007 <beepThread(void*)>:
c0013007:	53                   	push   ebx
c0013008:	83 ec 08             	sub    esp,0x8
c001300b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001300f:	e8 46 98 00 00       	call   c001c85a <unlockScheduler()>
c0013014:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013019:	52                   	push   edx
c001301a:	52                   	push   edx
c001301b:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013021:	52                   	push   edx
c0013022:	50                   	push   eax
c0013023:	e8 78 9d 00 00       	call   c001cda0 <nanoSleep(unsigned long long)>
c0013028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001302b:	e8 c4 ff ff ff       	call   c0012ff4 <Buzzer::stop()>
c0013030:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013038:	83 c4 18             	add    esp,0x18
c001303b:	5b                   	pop    ebx
c001303c:	e9 a5 9c 00 00       	jmp    c001cce6 <blockTask(TaskState)>
c0013041:	90                   	nop

c0013042 <Buzzer::beep(int, int, bool)>:
c0013042:	57                   	push   edi
c0013043:	56                   	push   esi
c0013044:	53                   	push   ebx
c0013045:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013049:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001304d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013051:	52                   	push   edx
c0013052:	52                   	push   edx
c0013053:	8b 06                	mov    eax,DWORD PTR [esi]
c0013055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013059:	56                   	push   esi
c001305a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001305d:	83 c4 10             	add    esp,0x10
c0013060:	89 f8                	mov    eax,edi
c0013062:	84 c0                	test   al,al
c0013064:	74 1f                	je     c0013085 <Buzzer::beep(int, int, bool)+0x43>
c0013066:	50                   	push   eax
c0013067:	50                   	push   eax
c0013068:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001306e:	99                   	cdq    
c001306f:	52                   	push   edx
c0013070:	50                   	push   eax
c0013071:	e8 2a 9d 00 00       	call   c001cda0 <nanoSleep(unsigned long long)>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001307d:	5b                   	pop    ebx
c001307e:	5e                   	pop    esi
c001307f:	5f                   	pop    edi
c0013080:	e9 6f ff ff ff       	jmp    c0012ff4 <Buzzer::stop()>
c0013085:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001308b:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0013090:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013098:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001309c:	c7 44 24 14 07 30 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013007
c00130a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a8:	5b                   	pop    ebx
c00130a9:	5e                   	pop    esi
c00130aa:	5f                   	pop    edi
c00130ab:	e9 d2 98 00 00       	jmp    c001c982 <Process::createThread(void (*)(void*), void*, int)>

c00130b0 <loadClockSettings()>:
c00130b0:	c7 05 74 a5 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a574,0xa
c00130ba:	c6 05 71 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a571,0x0
c00130c1:	c6 05 70 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a570,0x1
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <Clock::Clock(char const*)>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d1:	83 ec 08             	sub    esp,0x8
c00130d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d8:	50                   	push   eax
c00130d9:	e8 74 07 00 00       	call   c0013852 <Device::Device(char const*)>
c00130de:	83 c4 10             	add    esp,0x10
c00130e1:	ba d4 73 02 c0       	mov    edx,0xc00273d4
c00130e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ea:	89 10                	mov    DWORD PTR [eax],edx
c00130ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130fa:	90                   	nop
c00130fb:	83 c4 0c             	add    esp,0xc
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <Clock::~Clock()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ba d4 73 02 c0       	mov    edx,0xc00273d4
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	89 10                	mov    DWORD PTR [eax],edx
c001310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	50                   	push   eax
c0013116:	e8 e9 03 00 00       	call   c0013504 <Device::~Device()>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	90                   	nop
c001311f:	83 c4 0c             	add    esp,0xc
c0013122:	c3                   	ret    
c0013123:	90                   	nop

c0013124 <Clock::~Clock()>:
c0013124:	83 ec 0c             	sub    esp,0xc
c0013127:	83 ec 0c             	sub    esp,0xc
c001312a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312e:	e8 cd ff ff ff       	call   c0013100 <Clock::~Clock()>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	83 ec 08             	sub    esp,0x8
c0013139:	68 58 01 00 00       	push   0x158
c001313e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013142:	e8 30 f0 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	83 c4 0c             	add    esp,0xc
c001314d:	c3                   	ret    

c001314e <Clock::timeInSecondsLocal()>:
c001314e:	53                   	push   ebx
c001314f:	83 ec 14             	sub    esp,0x14
c0013152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013156:	8b 10                	mov    edx,DWORD PTR [eax]
c0013158:	50                   	push   eax
c0013159:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001315c:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c0013163:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c0013169:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001316f:	89 cb                	mov    ebx,ecx
c0013171:	c1 fb 1f             	sar    ebx,0x1f
c0013174:	01 c8                	add    eax,ecx
c0013176:	11 da                	adc    edx,ebx
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	31 c9                	xor    ecx,ecx
c001317d:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c0013184:	74 05                	je     c001318b <Clock::timeInSecondsLocal()+0x3d>
c0013186:	b9 08 07 00 00       	mov    ecx,0x708
c001318b:	31 db                	xor    ebx,ebx
c001318d:	01 c8                	add    eax,ecx
c001318f:	11 da                	adc    edx,ebx
c0013191:	83 c4 08             	add    esp,0x8
c0013194:	5b                   	pop    ebx
c0013195:	c3                   	ret    

c0013196 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013196:	57                   	push   edi
c0013197:	56                   	push   esi
c0013198:	53                   	push   ebx
c0013199:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001319d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00131a7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131aa:	0f b6 05 70 a5 02 c0 	movzx  eax,BYTE PTR ds:0xc002a570
c00131b1:	03 05 74 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a574
c00131b7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131bd:	99                   	cdq    
c00131be:	29 c6                	sub    esi,eax
c00131c0:	19 d7                	sbb    edi,edx
c00131c2:	89 f0                	mov    eax,esi
c00131c4:	89 fa                	mov    edx,edi
c00131c6:	31 f6                	xor    esi,esi
c00131c8:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c00131cf:	74 05                	je     c00131d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131d1:	be 08 07 00 00       	mov    esi,0x708
c00131d6:	31 ff                	xor    edi,edi
c00131d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131dc:	29 f0                	sub    eax,esi
c00131de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131e2:	19 fa                	sbb    edx,edi
c00131e4:	89 d8                	mov    eax,ebx
c00131e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131ea:	5b                   	pop    ebx
c00131eb:	5e                   	pop    esi
c00131ec:	5f                   	pop    edi
c00131ed:	ff e0                	jmp    eax

c00131ef <datetimeToSeconds(datetime_t)>:
c00131ef:	55                   	push   ebp
c00131f0:	57                   	push   edi
c00131f1:	56                   	push   esi
c00131f2:	53                   	push   ebx
c00131f3:	83 ec 14             	sub    esp,0x14
c00131f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131fa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131fe:	89 d3                	mov    ebx,edx
c0013200:	0f b6 c6             	movzx  eax,dh
c0013203:	c1 eb 10             	shr    ebx,0x10
c0013206:	48                   	dec    eax
c0013207:	66 81 eb 6c 07       	sub    bx,0x76c
c001320c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013210:	0f b6 f5             	movzx  esi,ch
c0013213:	89 cf                	mov    edi,ecx
c0013215:	6b f6 3c             	imul   esi,esi,0x3c
c0013218:	c1 ef 10             	shr    edi,0x10
c001321b:	0f b6 c9             	movzx  ecx,cl
c001321e:	89 f8                	mov    eax,edi
c0013220:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013226:	0f b6 f8             	movzx  edi,al
c0013229:	0f b6 d2             	movzx  edx,dl
c001322c:	01 fe                	add    esi,edi
c001322e:	01 f1                	add    ecx,esi
c0013230:	0f b7 f3             	movzx  esi,bx
c0013233:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013237:	c1 f9 1f             	sar    ecx,0x1f
c001323a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001323f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013243:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013248:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001324f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013253:	76 29                	jbe    c001327e <datetimeToSeconds(datetime_t)+0x8f>
c0013255:	f6 c3 03             	test   bl,0x3
c0013258:	75 24                	jne    c001327e <datetimeToSeconds(datetime_t)+0x8f>
c001325a:	31 d2                	xor    edx,edx
c001325c:	bf 64 00 00 00       	mov    edi,0x64
c0013261:	89 d8                	mov    eax,ebx
c0013263:	66 f7 f7             	div    di
c0013266:	66 85 d2             	test   dx,dx
c0013269:	75 12                	jne    c001327d <datetimeToSeconds(datetime_t)+0x8e>
c001326b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013271:	bf 90 01 00 00       	mov    edi,0x190
c0013276:	99                   	cdq    
c0013277:	f7 ff                	idiv   edi
c0013279:	85 d2                	test   edx,edx
c001327b:	75 01                	jne    c001327e <datetimeToSeconds(datetime_t)+0x8f>
c001327d:	41                   	inc    ecx
c001327e:	66 83 fb 46          	cmp    bx,0x46
c0013282:	76 45                	jbe    c00132c9 <datetimeToSeconds(datetime_t)+0xda>
c0013284:	bb 46 00 00 00       	mov    ebx,0x46
c0013289:	bf 64 00 00 00       	mov    edi,0x64
c001328e:	bd 90 01 00 00       	mov    ebp,0x190
c0013293:	b8 6d 01 00 00       	mov    eax,0x16d
c0013298:	f6 c3 03             	test   bl,0x3
c001329b:	75 23                	jne    c00132c0 <datetimeToSeconds(datetime_t)+0xd1>
c001329d:	89 d8                	mov    eax,ebx
c001329f:	99                   	cdq    
c00132a0:	f7 ff                	idiv   edi
c00132a2:	b8 6e 01 00 00       	mov    eax,0x16e
c00132a7:	85 d2                	test   edx,edx
c00132a9:	75 15                	jne    c00132c0 <datetimeToSeconds(datetime_t)+0xd1>
c00132ab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132b1:	99                   	cdq    
c00132b2:	f7 fd                	idiv   ebp
c00132b4:	83 fa 01             	cmp    edx,0x1
c00132b7:	19 c0                	sbb    eax,eax
c00132b9:	f7 d0                	not    eax
c00132bb:	05 6e 01 00 00       	add    eax,0x16e
c00132c0:	01 c1                	add    ecx,eax
c00132c2:	43                   	inc    ebx
c00132c3:	39 f3                	cmp    ebx,esi
c00132c5:	7c cc                	jl     c0013293 <datetimeToSeconds(datetime_t)+0xa4>
c00132c7:	eb 35                	jmp    c00132fe <datetimeToSeconds(datetime_t)+0x10f>
c00132c9:	74 33                	je     c00132fe <datetimeToSeconds(datetime_t)+0x10f>
c00132cb:	b8 45 00 00 00       	mov    eax,0x45
c00132d0:	89 c2                	mov    edx,eax
c00132d2:	83 e2 03             	and    edx,0x3
c00132d5:	39 f0                	cmp    eax,esi
c00132d7:	7e 0f                	jle    c00132e8 <datetimeToSeconds(datetime_t)+0xf9>
c00132d9:	83 fa 01             	cmp    edx,0x1
c00132dc:	19 d2                	sbb    edx,edx
c00132de:	48                   	dec    eax
c00132df:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132e6:	eb e8                	jmp    c00132d0 <datetimeToSeconds(datetime_t)+0xe1>
c00132e8:	b8 6d 01 00 00       	mov    eax,0x16d
c00132ed:	85 d2                	test   edx,edx
c00132ef:	75 0b                	jne    c00132fc <datetimeToSeconds(datetime_t)+0x10d>
c00132f1:	66 83 fb 01          	cmp    bx,0x1
c00132f5:	19 c0                	sbb    eax,eax
c00132f7:	05 6e 01 00 00       	add    eax,0x16e
c00132fc:	29 c1                	sub    ecx,eax
c00132fe:	b8 80 51 01 00       	mov    eax,0x15180
c0013303:	f7 e9                	imul   ecx
c0013305:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013309:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001330d:	83 c4 14             	add    esp,0x14
c0013310:	5b                   	pop    ebx
c0013311:	5e                   	pop    esi
c0013312:	5f                   	pop    edi
c0013313:	5d                   	pop    ebp
c0013314:	c3                   	ret    
c0013315:	90                   	nop

c0013316 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013316:	57                   	push   edi
c0013317:	56                   	push   esi
c0013318:	53                   	push   ebx
c0013319:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001331d:	8b 06                	mov    eax,DWORD PTR [esi]
c001331f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001332a:	e8 c0 fe ff ff       	call   c00131ef <datetimeToSeconds(datetime_t)>
c001332f:	59                   	pop    ecx
c0013330:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c0013337:	5b                   	pop    ebx
c0013338:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c001333e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013344:	89 cb                	mov    ebx,ecx
c0013346:	c1 fb 1f             	sar    ebx,0x1f
c0013349:	29 c8                	sub    eax,ecx
c001334b:	19 da                	sbb    edx,ebx
c001334d:	31 c9                	xor    ecx,ecx
c001334f:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c0013356:	74 05                	je     c001335d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013358:	b9 08 07 00 00       	mov    ecx,0x708
c001335d:	31 db                	xor    ebx,ebx
c001335f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013363:	29 c8                	sub    eax,ecx
c0013365:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013369:	19 da                	sbb    edx,ebx
c001336b:	89 f8                	mov    eax,edi
c001336d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013371:	5b                   	pop    ebx
c0013372:	5e                   	pop    esi
c0013373:	5f                   	pop    edi
c0013374:	ff e0                	jmp    eax

c0013376 <secondsToDatetime(unsigned long long)>:
c0013376:	55                   	push   ebp
c0013377:	57                   	push   edi
c0013378:	56                   	push   esi
c0013379:	53                   	push   ebx
c001337a:	83 ec 1c             	sub    esp,0x1c
c001337d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013381:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013385:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013389:	6a 00                	push   0x0
c001338b:	68 80 51 01 00       	push   0x15180
c0013390:	55                   	push   ebp
c0013391:	57                   	push   edi
c0013392:	e8 e5 ff 00 00       	call   c002337c <__udivdi3>
c0013397:	83 c4 10             	add    esp,0x10
c001339a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00133a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133a4:	6a 00                	push   0x0
c00133a6:	68 80 51 01 00       	push   0x15180
c00133ab:	55                   	push   ebp
c00133ac:	57                   	push   edi
c00133ad:	bf 10 0e 00 00       	mov    edi,0xe10
c00133b2:	e8 c5 00 01 00       	call   c002347c <__umoddi3>
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	99                   	cdq    
c00133bb:	f7 ff                	idiv   edi
c00133bd:	bf 3c 00 00 00       	mov    edi,0x3c
c00133c2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133c5:	89 d0                	mov    eax,edx
c00133c7:	99                   	cdq    
c00133c8:	f7 ff                	idiv   edi
c00133ca:	85 db                	test   ebx,ebx
c00133cc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133cf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133d2:	79 11                	jns    c00133e5 <secondsToDatetime(unsigned long long)+0x6f>
c00133d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133d8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133de:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133e3:	eb 07                	jmp    c00133ec <secondsToDatetime(unsigned long long)+0x76>
c00133e5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133ea:	89 d8                	mov    eax,ebx
c00133ec:	bf b4 05 00 00       	mov    edi,0x5b4
c00133f1:	99                   	cdq    
c00133f2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133f7:	f7 f9                	idiv   ecx
c00133f9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013402:	31 d2                	xor    edx,edx
c0013404:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001340c:	01 c3                	add    ebx,eax
c001340e:	89 d8                	mov    eax,ebx
c0013410:	f7 f1                	div    ecx
c0013412:	31 d2                	xor    edx,edx
c0013414:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013417:	89 d8                	mov    eax,ebx
c0013419:	f7 f7                	div    edi
c001341b:	31 d2                	xor    edx,edx
c001341d:	29 c1                	sub    ecx,eax
c001341f:	89 d8                	mov    eax,ebx
c0013421:	f7 f5                	div    ebp
c0013423:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013428:	29 c1                	sub    ecx,eax
c001342a:	31 d2                	xor    edx,edx
c001342c:	89 c8                	mov    eax,ecx
c001342e:	f7 f5                	div    ebp
c0013430:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013435:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013439:	31 d2                	xor    edx,edx
c001343b:	89 c8                	mov    eax,ecx
c001343d:	f7 f5                	div    ebp
c001343f:	31 d2                	xor    edx,edx
c0013441:	01 c3                	add    ebx,eax
c0013443:	89 c8                	mov    eax,ecx
c0013445:	f7 f7                	div    edi
c0013447:	bf 99 00 00 00       	mov    edi,0x99
c001344c:	29 c3                	sub    ebx,eax
c001344e:	31 d2                	xor    edx,edx
c0013450:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013458:	29 c3                	sub    ebx,eax
c001345a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001345d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013460:	bb 05 00 00 00       	mov    ebx,0x5
c0013465:	83 c1 02             	add    ecx,0x2
c0013468:	89 c8                	mov    eax,ecx
c001346a:	f7 f7                	div    edi
c001346c:	31 d2                	xor    edx,edx
c001346e:	89 c7                	mov    edi,eax
c0013470:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013476:	83 c0 02             	add    eax,0x2
c0013479:	f7 f3                	div    ebx
c001347b:	89 eb                	mov    ebx,ebp
c001347d:	29 c3                	sub    ebx,eax
c001347f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013485:	88 1e                	mov    BYTE PTR [esi],bl
c0013487:	19 c0                	sbb    eax,eax
c0013489:	31 d2                	xor    edx,edx
c001348b:	83 e0 0c             	and    eax,0xc
c001348e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013492:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001349a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001349e:	83 f9 01             	cmp    ecx,0x1
c00134a1:	0f 96 c2             	setbe  dl
c00134a4:	41                   	inc    ecx
c00134a5:	01 d0                	add    eax,edx
c00134a7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134aa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134ae:	83 c4 1c             	add    esp,0x1c
c00134b1:	89 f0                	mov    eax,esi
c00134b3:	5b                   	pop    ebx
c00134b4:	5e                   	pop    esi
c00134b5:	5f                   	pop    edi
c00134b6:	5d                   	pop    ebp
c00134b7:	c2 04 00             	ret    0x4

c00134ba <Clock::timeInDatetimeLocal()>:
c00134ba:	53                   	push   ebx
c00134bb:	83 ec 14             	sub    esp,0x14
c00134be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134c6:	e8 83 fc ff ff       	call   c001314e <Clock::timeInSecondsLocal()>
c00134cb:	83 c4 0c             	add    esp,0xc
c00134ce:	52                   	push   edx
c00134cf:	50                   	push   eax
c00134d0:	53                   	push   ebx
c00134d1:	e8 a0 fe ff ff       	call   c0013376 <secondsToDatetime(unsigned long long)>
c00134d6:	89 d8                	mov    eax,ebx
c00134d8:	83 c4 14             	add    esp,0x14
c00134db:	5b                   	pop    ebx
c00134dc:	c2 04 00             	ret    0x4
c00134df:	90                   	nop

c00134e0 <Device::hibernate()>:
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <Device::wake()>:
c00134e2:	c3                   	ret    
c00134e3:	90                   	nop

c00134e4 <Device::detect()>:
c00134e4:	c3                   	ret    
c00134e5:	90                   	nop

c00134e6 <Device::disableLegacy()>:
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <Device::powerSaving(PowerSavingLevel)>:
c00134e8:	c3                   	ret    
c00134e9:	90                   	nop

c00134ea <DriverlessDevice::close(int, int, void*)>:
c00134ea:	31 c0                	xor    eax,eax
c00134ec:	c3                   	ret    
c00134ed:	90                   	nop

c00134ee <DriverlessDevice::detect()>:
c00134ee:	c3                   	ret    
c00134ef:	90                   	nop

c00134f0 <DriverlessDevice::open(int, int, void*)>:
c00134f0:	83 ec 18             	sub    esp,0x18
c00134f3:	68 50 74 02 c0       	push   0xc0027450
c00134f8:	e8 07 64 00 00       	call   c0019904 <Krnl::panic(char const*)>
c00134fd:	83 c8 ff             	or     eax,0xffffffff
c0013500:	83 c4 1c             	add    esp,0x1c
c0013503:	c3                   	ret    

c0013504 <Device::~Device()>:
c0013504:	ba 78 74 02 c0       	mov    edx,0xc0027478
c0013509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001350d:	89 10                	mov    DWORD PTR [eax],edx
c001350f:	90                   	nop
c0013510:	c3                   	ret    
c0013511:	90                   	nop

c0013512 <Device::~Device()>:
c0013512:	83 ec 0c             	sub    esp,0xc
c0013515:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013519:	e8 e6 ff ff ff       	call   c0013504 <Device::~Device()>
c001351e:	83 c4 04             	add    esp,0x4
c0013521:	83 ec 08             	sub    esp,0x8
c0013524:	68 58 01 00 00       	push   0x158
c0013529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352d:	e8 45 ec ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013532:	83 c4 10             	add    esp,0x10
c0013535:	83 c4 0c             	add    esp,0xc
c0013538:	c3                   	ret    
c0013539:	90                   	nop

c001353a <Device::findAndLoadDriver()>:
c001353a:	c3                   	ret    
c001353b:	90                   	nop

c001353c <Device::preOpenPCI(PCIDeviceInfo)>:
c001353c:	57                   	push   edi
c001353d:	b9 09 00 00 00       	mov    ecx,0x9
c0013542:	56                   	push   esi
c0013543:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013547:	8d 74 24 10          	lea    esi,[esp+0x10]
c001354b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013555:	81 c7 18 01 00 00    	add    edi,0x118
c001355b:	fc                   	cld    
c001355c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001355e:	5e                   	pop    esi
c001355f:	5f                   	pop    edi
c0013560:	c3                   	ret    
c0013561:	90                   	nop

c0013562 <Device::preOpenACPI(void*, char*, char*)>:
c0013562:	56                   	push   esi
c0013563:	53                   	push   ebx
c0013564:	83 ec 08             	sub    esp,0x8
c0013567:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001356b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001356f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001357d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013583:	6a 1e                	push   0x1e
c0013585:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001358b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001358f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013595:	50                   	push   eax
c0013596:	e8 1b d1 fe ff       	call   c00006b6 <memcpy>
c001359b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001359f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00135a3:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135ab:	83 c4 14             	add    esp,0x14
c00135ae:	5b                   	pop    ebx
c00135af:	5e                   	pop    esi
c00135b0:	e9 01 d1 fe ff       	jmp    c00006b6 <memcpy>
c00135b5:	90                   	nop

c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135b6:	55                   	push   ebp
c00135b7:	57                   	push   edi
c00135b8:	56                   	push   esi
c00135b9:	53                   	push   ebx
c00135ba:	83 ec 0c             	sub    esp,0xc
c00135bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135c1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135c5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135cd:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135d2:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135d9:	75 0b                	jne    c00135e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135db:	8b 00                	mov    eax,DWORD PTR [eax]
c00135dd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135e1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135e4:	eb 24                	jmp    c001360a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135e6:	e8 99 42 00 00       	call   c0017884 <thisCPU()>
c00135eb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00135f3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135f7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135fb:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135ff:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013603:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013607:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001360a:	83 c4 0c             	add    esp,0xc
c001360d:	5b                   	pop    ebx
c001360e:	5e                   	pop    esi
c001360f:	5f                   	pop    edi
c0013610:	5d                   	pop    ebp
c0013611:	ff e0                	jmp    eax
c0013613:	90                   	nop

c0013614 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013614:	57                   	push   edi
c0013615:	56                   	push   esi
c0013616:	53                   	push   ebx
c0013617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001361f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013623:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013628:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001362f:	75 0b                	jne    c001363c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013631:	8b 00                	mov    eax,DWORD PTR [eax]
c0013633:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013637:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001363a:	eb 20                	jmp    c001365c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c001363c:	e8 43 42 00 00       	call   c0017884 <thisCPU()>
c0013641:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013647:	8b 10                	mov    edx,DWORD PTR [eax]
c0013649:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001364d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013651:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0013655:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013659:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001365c:	5b                   	pop    ebx
c001365d:	5e                   	pop    esi
c001365e:	5f                   	pop    edi
c001365f:	ff e0                	jmp    eax
c0013661:	90                   	nop

c0013662 <Device::addChild(Device*)>:
c0013662:	53                   	push   ebx
c0013663:	83 ec 08             	sub    esp,0x8
c0013666:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001366a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001366e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013674:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001367a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001367c:	85 d2                	test   edx,edx
c001367e:	74 04                	je     c0013684 <Device::addChild(Device*)+0x22>
c0013680:	89 d3                	mov    ebx,edx
c0013682:	eb f6                	jmp    c001367a <Device::addChild(Device*)+0x18>
c0013684:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013687:	83 ec 0c             	sub    esp,0xc
c001368a:	6a 08                	push   0x8
c001368c:	e8 d7 ea ff ff       	call   c0012168 <operator new(unsigned long)>
c0013691:	89 03                	mov    DWORD PTR [ebx],eax
c0013693:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013699:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136a0:	83 c4 18             	add    esp,0x18
c00136a3:	5b                   	pop    ebx
c00136a4:	c3                   	ret    
c00136a5:	90                   	nop

c00136a6 <Device::removeAllChildren()>:
c00136a6:	56                   	push   esi
c00136a7:	53                   	push   ebx
c00136a8:	52                   	push   edx
c00136a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136ad:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136b6:	74 17                	je     c00136cf <Device::removeAllChildren()+0x29>
c00136b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136bb:	85 c0                	test   eax,eax
c00136bd:	74 0c                	je     c00136cb <Device::removeAllChildren()+0x25>
c00136bf:	83 ec 0c             	sub    esp,0xc
c00136c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00136c4:	50                   	push   eax
c00136c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136c8:	83 c4 10             	add    esp,0x10
c00136cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136cd:	eb e4                	jmp    c00136b3 <Device::removeAllChildren()+0xd>
c00136cf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e8:	58                   	pop    eax
c00136e9:	5b                   	pop    ebx
c00136ea:	5e                   	pop    esi
c00136eb:	c3                   	ret    

c00136ec <Device::hibernateAll()>:
c00136ec:	53                   	push   ebx
c00136ed:	83 ec 14             	sub    esp,0x14
c00136f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136f6:	53                   	push   ebx
c00136f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013700:	83 c4 10             	add    esp,0x10
c0013703:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013706:	74 0f                	je     c0013717 <Device::hibernateAll()+0x2b>
c0013708:	83 ec 0c             	sub    esp,0xc
c001370b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001370e:	e8 d9 ff ff ff       	call   c00136ec <Device::hibernateAll()>
c0013713:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013715:	eb e9                	jmp    c0013700 <Device::hibernateAll()+0x14>
c0013717:	83 c4 08             	add    esp,0x8
c001371a:	5b                   	pop    ebx
c001371b:	c3                   	ret    

c001371c <Device::wakeAll()>:
c001371c:	53                   	push   ebx
c001371d:	83 ec 14             	sub    esp,0x14
c0013720:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013726:	53                   	push   ebx
c0013727:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001372a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013730:	83 c4 10             	add    esp,0x10
c0013733:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013736:	74 0f                	je     c0013747 <Device::wakeAll()+0x2b>
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001373e:	e8 d9 ff ff ff       	call   c001371c <Device::wakeAll()>
c0013743:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013745:	eb e9                	jmp    c0013730 <Device::wakeAll()+0x14>
c0013747:	83 c4 08             	add    esp,0x8
c001374a:	5b                   	pop    ebx
c001374b:	c3                   	ret    

c001374c <Device::detectAll()>:
c001374c:	53                   	push   ebx
c001374d:	83 ec 14             	sub    esp,0x14
c0013750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013754:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013756:	53                   	push   ebx
c0013757:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001375a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013766:	74 0f                	je     c0013777 <Device::detectAll()+0x2b>
c0013768:	83 ec 0c             	sub    esp,0xc
c001376b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001376e:	e8 d9 ff ff ff       	call   c001374c <Device::detectAll()>
c0013773:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013775:	eb e9                	jmp    c0013760 <Device::detectAll()+0x14>
c0013777:	83 c4 08             	add    esp,0x8
c001377a:	5b                   	pop    ebx
c001377b:	c3                   	ret    

c001377c <Device::disableLegacyAll()>:
c001377c:	53                   	push   ebx
c001377d:	83 ec 14             	sub    esp,0x14
c0013780:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013784:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013786:	53                   	push   ebx
c0013787:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001378a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013790:	83 c4 10             	add    esp,0x10
c0013793:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013796:	74 0f                	je     c00137a7 <Device::disableLegacyAll()+0x2b>
c0013798:	83 ec 0c             	sub    esp,0xc
c001379b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001379e:	e8 d9 ff ff ff       	call   c001377c <Device::disableLegacyAll()>
c00137a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137a5:	eb e9                	jmp    c0013790 <Device::disableLegacyAll()+0x14>
c00137a7:	83 c4 08             	add    esp,0x8
c00137aa:	5b                   	pop    ebx
c00137ab:	c3                   	ret    

c00137ac <Device::loadDriversForAll()>:
c00137ac:	53                   	push   ebx
c00137ad:	83 ec 08             	sub    esp,0x8
c00137b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137ba:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137bc:	85 db                	test   ebx,ebx
c00137be:	74 12                	je     c00137d2 <Device::loadDriversForAll()+0x26>
c00137c0:	83 ec 0c             	sub    esp,0xc
c00137c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137c6:	e8 e1 ff ff ff       	call   c00137ac <Device::loadDriversForAll()>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	89 d8                	mov    eax,ebx
c00137d0:	eb e8                	jmp    c00137ba <Device::loadDriversForAll()+0xe>
c00137d2:	83 c4 08             	add    esp,0x8
c00137d5:	5b                   	pop    ebx
c00137d6:	c3                   	ret    
c00137d7:	90                   	nop

c00137d8 <Device::closeAll()>:
c00137d8:	53                   	push   ebx
c00137d9:	83 ec 08             	sub    esp,0x8
c00137dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137e2:	6a 00                	push   0x0
c00137e4:	6a 00                	push   0x0
c00137e6:	6a 00                	push   0x0
c00137e8:	53                   	push   ebx
c00137e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f8:	74 0f                	je     c0013809 <Device::closeAll()+0x31>
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013800:	e8 d3 ff ff ff       	call   c00137d8 <Device::closeAll()>
c0013805:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013807:	eb e9                	jmp    c00137f2 <Device::closeAll()+0x1a>
c0013809:	83 c4 08             	add    esp,0x8
c001380c:	5b                   	pop    ebx
c001380d:	c3                   	ret    

c001380e <Device::powerSavingAll(PowerSavingLevel)>:
c001380e:	56                   	push   esi
c001380f:	53                   	push   ebx
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013817:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001381b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001381d:	56                   	push   esi
c001381e:	53                   	push   ebx
c001381f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013822:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013828:	83 c4 10             	add    esp,0x10
c001382b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001382e:	74 0f                	je     c001383f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013830:	52                   	push   edx
c0013831:	52                   	push   edx
c0013832:	56                   	push   esi
c0013833:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013836:	e8 d3 ff ff ff       	call   c001380e <Device::powerSavingAll(PowerSavingLevel)>
c001383b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001383d:	eb e9                	jmp    c0013828 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001383f:	58                   	pop    eax
c0013840:	5b                   	pop    ebx
c0013841:	5e                   	pop    esi
c0013842:	c3                   	ret    
c0013843:	90                   	nop

c0013844 <Device::setName(char const*)>:
c0013844:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001384c:	e9 3a cf fe ff       	jmp    c000078b <strcpy>
c0013851:	90                   	nop

c0013852 <Device::Device(char const*)>:
c0013852:	83 ec 0c             	sub    esp,0xc
c0013855:	ba 78 74 02 c0       	mov    edx,0xc0027478
c001385a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385e:	89 10                	mov    DWORD PTR [eax],edx
c0013860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013864:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001386e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013872:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001387c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013880:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001388a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013898:	83 ec 08             	sub    esp,0x8
c001389b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a3:	e8 9c ff ff ff       	call   c0013844 <Device::setName(char const*)>
c00138a8:	83 c4 10             	add    esp,0x10
c00138ab:	83 ec 0c             	sub    esp,0xc
c00138ae:	6a 08                	push   0x8
c00138b0:	e8 b3 e8 ff ff       	call   c0012168 <operator new(unsigned long)>
c00138b5:	83 c4 10             	add    esp,0x10
c00138b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013918:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013926:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013934:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001393e:	90                   	nop
c001393f:	83 c4 0c             	add    esp,0xc
c0013942:	c3                   	ret    
c0013943:	90                   	nop

c0013944 <Device::getName()>:
c0013944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013948:	05 d0 00 00 00       	add    eax,0xd0
c001394d:	c3                   	ret    

c001394e <DriverlessDevice::DriverlessDevice(char const*)>:
c001394e:	83 ec 0c             	sub    esp,0xc
c0013951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001395c:	50                   	push   eax
c001395d:	e8 f0 fe ff ff       	call   c0013852 <Device::Device(char const*)>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	ba a4 74 02 c0       	mov    edx,0xc00274a4
c001396a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001396e:	89 10                	mov    DWORD PTR [eax],edx
c0013970:	90                   	nop
c0013971:	83 c4 0c             	add    esp,0xc
c0013974:	c3                   	ret    
c0013975:	90                   	nop

c0013976 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013976:	57                   	push   edi
c0013977:	56                   	push   esi
c0013978:	53                   	push   ebx
c0013979:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001397d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013981:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013985:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001398b:	75 0c                	jne    c0013999 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001398d:	52                   	push   edx
c001398e:	52                   	push   edx
c001398f:	53                   	push   ebx
c0013990:	56                   	push   esi
c0013991:	e8 3e 19 01 00       	call   c00252d4 <LinkedList<Device>::addElement(Device*)>
c0013996:	83 c4 10             	add    esp,0x10
c0013999:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001399f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139a2:	74 12                	je     c00139b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00139a4:	50                   	push   eax
c00139a5:	57                   	push   edi
c00139a6:	56                   	push   esi
c00139a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139aa:	e8 c7 ff ff ff       	call   c0013976 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	eb e9                	jmp    c001399f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139b6:	5b                   	pop    ebx
c00139b7:	5e                   	pop    esi
c00139b8:	5f                   	pop    edi
c00139b9:	c3                   	ret    

c00139ba <getDevicesOfType(DeviceType)>:
c00139ba:	53                   	push   ebx
c00139bb:	83 ec 14             	sub    esp,0x14
c00139be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139c2:	53                   	push   ebx
c00139c3:	e8 e8 19 01 00       	call   c00253b0 <LinkedList<Device>::LinkedList()>
c00139c8:	83 c4 0c             	add    esp,0xc
c00139cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139cf:	53                   	push   ebx
c00139d0:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00139d6:	e8 9b ff ff ff       	call   c0013976 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139db:	89 d8                	mov    eax,ebx
c00139dd:	83 c4 18             	add    esp,0x18
c00139e0:	5b                   	pop    ebx
c00139e1:	c2 04 00             	ret    0x4

c00139e4 <HardDiskController::HardDiskController(char const*)>:
c00139e4:	83 ec 0c             	sub    esp,0xc
c00139e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139eb:	83 ec 08             	sub    esp,0x8
c00139ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f2:	50                   	push   eax
c00139f3:	e8 5a fe ff ff       	call   c0013852 <Device::Device(char const*)>
c00139f8:	83 c4 10             	add    esp,0x10
c00139fb:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c0013a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a04:	89 10                	mov    DWORD PTR [eax],edx
c0013a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a14:	90                   	nop
c0013a15:	83 c4 0c             	add    esp,0xc
c0013a18:	c3                   	ret    
c0013a19:	90                   	nop

c0013a1a <HardDiskController::~HardDiskController()>:
c0013a1a:	83 ec 0c             	sub    esp,0xc
c0013a1d:	ba d0 74 02 c0       	mov    edx,0xc00274d0
c0013a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a26:	89 10                	mov    DWORD PTR [eax],edx
c0013a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	50                   	push   eax
c0013a30:	e8 cf fa ff ff       	call   c0013504 <Device::~Device()>
c0013a35:	83 c4 10             	add    esp,0x10
c0013a38:	90                   	nop
c0013a39:	83 c4 0c             	add    esp,0xc
c0013a3c:	c3                   	ret    
c0013a3d:	90                   	nop

c0013a3e <HardDiskController::~HardDiskController()>:
c0013a3e:	83 ec 0c             	sub    esp,0xc
c0013a41:	83 ec 0c             	sub    esp,0xc
c0013a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a48:	e8 cd ff ff ff       	call   c0013a1a <HardDiskController::~HardDiskController()>
c0013a4d:	83 c4 10             	add    esp,0x10
c0013a50:	83 ec 08             	sub    esp,0x8
c0013a53:	68 58 01 00 00       	push   0x158
c0013a58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a5c:	e8 16 e7 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	83 c4 0c             	add    esp,0xc
c0013a67:	c3                   	ret    

c0013a68 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6f:	83 ec 08             	sub    esp,0x8
c0013a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a76:	50                   	push   eax
c0013a77:	e8 d6 fd ff ff       	call   c0013852 <Device::Device(char const*)>
c0013a7c:	83 c4 10             	add    esp,0x10
c0013a7f:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c0013a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a88:	89 10                	mov    DWORD PTR [eax],edx
c0013a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a99:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aa4:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ab6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013aca:	90                   	nop
c0013acb:	83 c4 0c             	add    esp,0xc
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <PhysicalDisk::startCache()>:
c0013ad0:	56                   	push   esi
c0013ad1:	53                   	push   ebx
c0013ad2:	83 ec 10             	sub    esp,0x10
c0013ad5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ad9:	6a 30                	push   0x30
c0013adb:	e8 88 e6 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013ae0:	89 c6                	mov    esi,eax
c0013ae2:	58                   	pop    eax
c0013ae3:	5a                   	pop    edx
c0013ae4:	53                   	push   ebx
c0013ae5:	56                   	push   esi
c0013ae6:	e8 2f 25 00 00       	call   c001601a <VCache::VCache(PhysicalDisk*)>
c0013aeb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013af1:	83 c4 14             	add    esp,0x14
c0013af4:	5b                   	pop    ebx
c0013af5:	5e                   	pop    esi
c0013af6:	c3                   	ret    
c0013af7:	90                   	nop

c0013af8 <PhysicalDisk::~PhysicalDisk()>:
c0013af8:	83 ec 0c             	sub    esp,0xc
c0013afb:	ba fc 74 02 c0       	mov    edx,0xc00274fc
c0013b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b04:	89 10                	mov    DWORD PTR [eax],edx
c0013b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	50                   	push   eax
c0013b0e:	e8 f1 f9 ff ff       	call   c0013504 <Device::~Device()>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	90                   	nop
c0013b17:	83 c4 0c             	add    esp,0xc
c0013b1a:	c3                   	ret    
c0013b1b:	90                   	nop

c0013b1c <PhysicalDisk::~PhysicalDisk()>:
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	83 ec 0c             	sub    esp,0xc
c0013b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b26:	e8 cd ff ff ff       	call   c0013af8 <PhysicalDisk::~PhysicalDisk()>
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	83 ec 08             	sub    esp,0x8
c0013b31:	68 6c 01 00 00       	push   0x16c
c0013b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b3a:	e8 38 e6 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013b3f:	83 c4 10             	add    esp,0x10
c0013b42:	83 c4 0c             	add    esp,0xc
c0013b45:	c3                   	ret    

c0013b46 <FPU::FPU(char const*)>:
c0013b46:	83 ec 0c             	sub    esp,0xc
c0013b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b4d:	83 ec 08             	sub    esp,0x8
c0013b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b54:	50                   	push   eax
c0013b55:	e8 f8 fc ff ff       	call   c0013852 <Device::Device(char const*)>
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	ba 3c 75 02 c0       	mov    edx,0xc002753c
c0013b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b66:	89 10                	mov    DWORD PTR [eax],edx
c0013b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b76:	90                   	nop
c0013b77:	83 c4 0c             	add    esp,0xc
c0013b7a:	c3                   	ret    
c0013b7b:	90                   	nop

c0013b7c <FPU::~FPU()>:
c0013b7c:	83 ec 0c             	sub    esp,0xc
c0013b7f:	ba 3c 75 02 c0       	mov    edx,0xc002753c
c0013b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b88:	89 10                	mov    DWORD PTR [eax],edx
c0013b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8e:	83 ec 0c             	sub    esp,0xc
c0013b91:	50                   	push   eax
c0013b92:	e8 6d f9 ff ff       	call   c0013504 <Device::~Device()>
c0013b97:	83 c4 10             	add    esp,0x10
c0013b9a:	90                   	nop
c0013b9b:	83 c4 0c             	add    esp,0xc
c0013b9e:	c3                   	ret    
c0013b9f:	90                   	nop

c0013ba0 <FPU::~FPU()>:
c0013ba0:	83 ec 0c             	sub    esp,0xc
c0013ba3:	83 ec 0c             	sub    esp,0xc
c0013ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013baa:	e8 cd ff ff ff       	call   c0013b7c <FPU::~FPU()>
c0013baf:	83 c4 10             	add    esp,0x10
c0013bb2:	83 ec 08             	sub    esp,0x8
c0013bb5:	68 58 01 00 00       	push   0x158
c0013bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bbe:	e8 b4 e5 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0013bc3:	83 c4 10             	add    esp,0x10
c0013bc6:	83 c4 0c             	add    esp,0xc
c0013bc9:	c3                   	ret    

c0013bca <setupFPU()>:
c0013bca:	53                   	push   ebx
c0013bcb:	83 ec 08             	sub    esp,0x8
c0013bce:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0013bd4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bdb:	74 19                	je     c0013bf6 <setupFPU()+0x2c>
c0013bdd:	83 ec 0c             	sub    esp,0xc
c0013be0:	68 58 01 00 00       	push   0x158
c0013be5:	e8 7e e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013bea:	89 c3                	mov    ebx,eax
c0013bec:	89 04 24             	mov    DWORD PTR [esp],eax
c0013bef:	e8 54 e4 00 00       	call   c0022048 <AVX::AVX()>
c0013bf4:	eb 5b                	jmp    c0013c51 <setupFPU()+0x87>
c0013bf6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bfc:	84 c0                	test   al,al
c0013bfe:	79 19                	jns    c0013c19 <setupFPU()+0x4f>
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	68 58 01 00 00       	push   0x158
c0013c08:	e8 5b e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013c0d:	89 c3                	mov    ebx,eax
c0013c0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c12:	e8 57 e5 00 00       	call   c002216e <SSE::SSE()>
c0013c17:	eb 38                	jmp    c0013c51 <setupFPU()+0x87>
c0013c19:	a8 20                	test   al,0x20
c0013c1b:	74 19                	je     c0013c36 <setupFPU()+0x6c>
c0013c1d:	83 ec 0c             	sub    esp,0xc
c0013c20:	68 58 01 00 00       	push   0x158
c0013c25:	e8 3e e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013c2a:	89 c3                	mov    ebx,eax
c0013c2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c2f:	e8 a4 e4 00 00       	call   c00220d8 <MMX::MMX()>
c0013c34:	eb 1b                	jmp    c0013c51 <setupFPU()+0x87>
c0013c36:	a8 10                	test   al,0x10
c0013c38:	74 1c                	je     c0013c56 <setupFPU()+0x8c>
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	68 58 01 00 00       	push   0x158
c0013c42:	e8 21 e5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0013c47:	89 c3                	mov    ebx,eax
c0013c49:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c4c:	e8 ab e5 00 00       	call   c00221fc <x87::x87()>
c0013c51:	83 c4 10             	add    esp,0x10
c0013c54:	eb 35                	jmp    c0013c8b <setupFPU()+0xc1>
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	83 e0 ef             	and    eax,0xffffffef
c0013c5c:	31 db                	xor    ebx,ebx
c0013c5e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c64:	68 28 75 02 c0       	push   0xc0027528
c0013c69:	e8 e9 e5 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0013c6e:	e8 11 3c 00 00       	call   c0017884 <thisCPU()>
c0013c73:	e8 0c 3c 00 00       	call   c0017884 <thisCPU()>
c0013c78:	e8 8b 17 01 00       	call   c0025408 <CPU::readCR0()>
c0013c7d:	83 c8 04             	or     eax,0x4
c0013c80:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c83:	e8 92 17 01 00       	call   c002541a <CPU::writeCR0(unsigned long)>
c0013c88:	83 c4 10             	add    esp,0x10
c0013c8b:	89 d8                	mov    eax,ebx
c0013c8d:	83 c4 08             	add    esp,0x8
c0013c90:	5b                   	pop    ebx
c0013c91:	c3                   	ret    

c0013c92 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c9a:	c1 e0 04             	shl    eax,0x4
c0013c9d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013ca1:	8d 50 10             	lea    edx,[eax+0x10]
c0013ca4:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013caa:	74 08                	je     c0013cb4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013cac:	83 c0 04             	add    eax,0x4
c0013caf:	39 d0                	cmp    eax,edx
c0013cb1:	75 f1                	jne    c0013ca4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013cb3:	c3                   	ret    
c0013cb4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cbe:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013cc8:	eb e2                	jmp    c0013cac <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cca <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cca:	57                   	push   edi
c0013ccb:	31 c0                	xor    eax,eax
c0013ccd:	56                   	push   esi
c0013cce:	53                   	push   ebx
c0013ccf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013cd3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cd7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cdb:	89 da                	mov    edx,ebx
c0013cdd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ce1:	c1 e2 04             	shl    edx,0x4
c0013ce4:	01 ca                	add    edx,ecx
c0013ce6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013cee:	74 16                	je     c0013d06 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013cf0:	40                   	inc    eax
c0013cf1:	83 f8 04             	cmp    eax,0x4
c0013cf4:	75 f0                	jne    c0013ce6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013cf6:	c7 44 24 10 6c 75 02 c0 	mov    DWORD PTR [esp+0x10],0xc002756c
c0013cfe:	5b                   	pop    ebx
c0013cff:	5e                   	pop    esi
c0013d00:	5f                   	pop    edi
c0013d01:	e9 fe 5b 00 00       	jmp    c0019904 <Krnl::panic(char const*)>
c0013d06:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d09:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013d0c:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d12:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d18:	5b                   	pop    ebx
c0013d19:	5e                   	pop    esi
c0013d1a:	5f                   	pop    edi
c0013d1b:	c3                   	ret    

c0013d1c <doubleFault(regs*, void*)>:
c0013d1c:	55                   	push   ebp
c0013d1d:	89 e5                	mov    ebp,esp
c0013d1f:	83 ec 08             	sub    esp,0x8
c0013d22:	83 ec 0c             	sub    esp,0xc
c0013d25:	68 a7 75 02 c0       	push   0xc00275a7
c0013d2a:	e8 d5 5b 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0013d2f:	83 c4 10             	add    esp,0x10
c0013d32:	90                   	nop
c0013d33:	c9                   	leave  
c0013d34:	c3                   	ret    
c0013d35:	90                   	nop

c0013d36 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d36:	56                   	push   esi
c0013d37:	53                   	push   ebx
c0013d38:	50                   	push   eax
c0013d39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d3d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d41:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d46:	75 35                	jne    c0013d7d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d48:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d4b:	31 d2                	xor    edx,edx
c0013d4d:	89 c1                	mov    ecx,eax
c0013d4f:	c1 e1 04             	shl    ecx,0x4
c0013d52:	01 f1                	add    ecx,esi
c0013d54:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d5c:	74 3e                	je     c0013d9c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d5e:	42                   	inc    edx
c0013d5f:	83 fa 04             	cmp    edx,0x4
c0013d62:	75 f0                	jne    c0013d54 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	68 ec 75 02 c0       	push   0xc00275ec
c0013d6c:	e8 93 5b 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d79:	5a                   	pop    edx
c0013d7a:	5b                   	pop    ebx
c0013d7b:	5e                   	pop    esi
c0013d7c:	c3                   	ret    
c0013d7d:	83 ec 0c             	sub    esp,0xc
c0013d80:	56                   	push   esi
c0013d81:	e8 be fb ff ff       	call   c0013944 <Device::getName()>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d8c:	75 ba                	jne    c0013d48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d8e:	83 fb 0f             	cmp    ebx,0xf
c0013d91:	7f 29                	jg     c0013dbc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d93:	0f b6 9b e0 96 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6920]
c0013d9a:	eb ac                	jmp    c0013d48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d9c:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013da3:	8d 04 86             	lea    eax,[esi+eax*4]
c0013da6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013dac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013db0:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013db6:	89 d8                	mov    eax,ebx
c0013db8:	5a                   	pop    edx
c0013db9:	5b                   	pop    ebx
c0013dba:	5e                   	pop    esi
c0013dbb:	c3                   	ret    
c0013dbc:	83 ec 0c             	sub    esp,0xc
c0013dbf:	68 b4 75 02 c0       	push   0xc00275b4
c0013dc4:	e8 3b 5b 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0013dc9:	83 c4 10             	add    esp,0x10
c0013dcc:	e9 77 ff ff ff       	jmp    c0013d48 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dd1:	90                   	nop

c0013dd2 <InterruptController::clearAllHandlers(int, bool)>:
c0013dd2:	56                   	push   esi
c0013dd3:	53                   	push   ebx
c0013dd4:	52                   	push   edx
c0013dd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013ddd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013de2:	75 61                	jne    c0013e45 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013de4:	8d 46 20             	lea    eax,[esi+0x20]
c0013de7:	c1 e6 04             	shl    esi,0x4
c0013dea:	c1 e0 04             	shl    eax,0x4
c0013ded:	01 de                	add    esi,ebx
c0013def:	01 d8                	add    eax,ebx
c0013df1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013dfb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013e05:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e0f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e19:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e23:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e2d:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e37:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e41:	58                   	pop    eax
c0013e42:	5b                   	pop    ebx
c0013e43:	5e                   	pop    esi
c0013e44:	c3                   	ret    
c0013e45:	83 ec 0c             	sub    esp,0xc
c0013e48:	53                   	push   ebx
c0013e49:	e8 f6 fa ff ff       	call   c0013944 <Device::getName()>
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e54:	75 8e                	jne    c0013de4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e56:	83 fe 0f             	cmp    esi,0xf
c0013e59:	7f 09                	jg     c0013e64 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e5b:	0f b6 b6 e0 96 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6920]
c0013e62:	eb 80                	jmp    c0013de4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e64:	83 ec 0c             	sub    esp,0xc
c0013e67:	68 28 76 02 c0       	push   0xc0027628
c0013e6c:	e8 93 5a 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0013e71:	83 c4 10             	add    esp,0x10
c0013e74:	e9 6b ff ff ff       	jmp    c0013de4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e79:	90                   	nop

c0013e7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e7a:	56                   	push   esi
c0013e7b:	53                   	push   ebx
c0013e7c:	52                   	push   edx
c0013e7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e85:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e8a:	75 3a                	jne    c0013ec6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e90:	8d 50 20             	lea    edx,[eax+0x20]
c0013e93:	c1 e2 04             	shl    edx,0x4
c0013e96:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e99:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e9d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013ea3:	74 0b                	je     c0013eb0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013ea5:	83 c0 04             	add    eax,0x4
c0013ea8:	39 d0                	cmp    eax,edx
c0013eaa:	75 f1                	jne    c0013e9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013eac:	58                   	pop    eax
c0013ead:	5b                   	pop    ebx
c0013eae:	5e                   	pop    esi
c0013eaf:	c3                   	ret    
c0013eb0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eba:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ec4:	eb df                	jmp    c0013ea5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ec6:	83 ec 0c             	sub    esp,0xc
c0013ec9:	56                   	push   esi
c0013eca:	e8 75 fa ff ff       	call   c0013944 <Device::getName()>
c0013ecf:	83 c4 10             	add    esp,0x10
c0013ed2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ed5:	75 b5                	jne    c0013e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ed7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013edc:	7f 11                	jg     c0013eef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ede:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ee2:	0f b6 80 e0 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6920]
c0013ee9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eed:	eb 9d                	jmp    c0013e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013eef:	83 ec 0c             	sub    esp,0xc
c0013ef2:	68 28 76 02 c0       	push   0xc0027628
c0013ef7:	e8 08 5a 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	eb 8b                	jmp    c0013e8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013f01 <nmiHandler(regs*, void*)>:
c0013f01:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0013f06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f0a:	e9 9b a9 ff ff       	jmp    c000e8aa <Computer::handleNMI()>

c0013f0f <int_handler>:
c0013f0f:	55                   	push   ebp
c0013f10:	57                   	push   edi
c0013f11:	56                   	push   esi
c0013f12:	53                   	push   ebx
c0013f13:	83 ec 0c             	sub    esp,0xc
c0013f16:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f1a:	80 3d ac ae 02 c0 00 	cmp    BYTE PTR ds:0xc002aeac,0x0
c0013f21:	74 0b                	je     c0013f2e <int_handler+0x1f>
c0013f23:	fa                   	cli    
c0013f24:	f4                   	hlt    
c0013f25:	80 3d ac ae 02 c0 00 	cmp    BYTE PTR ds:0xc002aeac,0x0
c0013f2c:	75 f5                	jne    c0013f23 <int_handler+0x14>
c0013f2e:	e8 51 39 00 00       	call   c0017884 <thisCPU()>
c0013f33:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f36:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f3c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f3f:	83 f8 17             	cmp    eax,0x17
c0013f42:	77 13                	ja     c0013f57 <int_handler+0x48>
c0013f44:	83 ec 08             	sub    esp,0x8
c0013f47:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f49:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f4c:	0f b6 c0             	movzx  eax,al
c0013f4f:	50                   	push   eax
c0013f50:	57                   	push   edi
c0013f51:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f54:	83 c4 10             	add    esp,0x10
c0013f57:	83 c3 15             	add    ebx,0x15
c0013f5a:	c1 e3 04             	shl    ebx,0x4
c0013f5d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f61:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f68:	31 db                	xor    ebx,ebx
c0013f6a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f6e:	85 c0                	test   eax,eax
c0013f70:	74 13                	je     c0013f85 <int_handler+0x76>
c0013f72:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f75:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f79:	74 1c                	je     c0013f97 <int_handler+0x88>
c0013f7b:	83 ec 08             	sub    esp,0x8
c0013f7e:	52                   	push   edx
c0013f7f:	56                   	push   esi
c0013f80:	ff d0                	call   eax
c0013f82:	83 c4 10             	add    esp,0x10
c0013f85:	43                   	inc    ebx
c0013f86:	83 fb 04             	cmp    ebx,0x4
c0013f89:	75 df                	jne    c0013f6a <int_handler+0x5b>
c0013f8b:	83 c4 0c             	add    esp,0xc
c0013f8e:	31 c0                	xor    eax,eax
c0013f90:	5b                   	pop    ebx
c0013f91:	31 d2                	xor    edx,edx
c0013f93:	5e                   	pop    esi
c0013f94:	5f                   	pop    edi
c0013f95:	5d                   	pop    ebp
c0013f96:	c3                   	ret    
c0013f97:	83 ec 08             	sub    esp,0x8
c0013f9a:	52                   	push   edx
c0013f9b:	56                   	push   esi
c0013f9c:	ff d0                	call   eax
c0013f9e:	83 c4 10             	add    esp,0x10
c0013fa1:	83 c4 0c             	add    esp,0xc
c0013fa4:	5b                   	pop    ebx
c0013fa5:	5e                   	pop    esi
c0013fa6:	5f                   	pop    edi
c0013fa7:	5d                   	pop    ebp
c0013fa8:	c3                   	ret    
c0013fa9:	90                   	nop

c0013faa <InterruptController::InterruptController(char const*)>:
c0013faa:	83 ec 1c             	sub    esp,0x1c
c0013fad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb1:	83 ec 08             	sub    esp,0x8
c0013fb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fb8:	50                   	push   eax
c0013fb9:	e8 94 f8 ff ff       	call   c0013852 <Device::Device(char const*)>
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	ba 48 78 02 c0       	mov    edx,0xc0027848
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	89 10                	mov    DWORD PTR [eax],edx
c0013fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fe2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fea:	7f 5e                	jg     c001404a <InterruptController::InterruptController(char const*)+0xa0>
c0013fec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ff4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013ff9:	7f 49                	jg     c0014044 <InterruptController::InterruptController(char const*)+0x9a>
c0013ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014003:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001400a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001400e:	01 ca                	add    edx,ecx
c0014010:	83 c2 54             	add    edx,0x54
c0014013:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001401b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014023:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001402a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001402e:	01 ca                	add    edx,ecx
c0014030:	81 c2 54 04 00 00    	add    edx,0x454
c0014036:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001403e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014042:	eb b0                	jmp    c0013ff4 <InterruptController::InterruptController(char const*)+0x4a>
c0014044:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014048:	eb 98                	jmp    c0013fe2 <InterruptController::InterruptController(char const*)+0x38>
c001404a:	90                   	nop
c001404b:	83 c4 1c             	add    esp,0x1c
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <InterruptController::~InterruptController()>:
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	ba 48 78 02 c0       	mov    edx,0xc0027848
c0014058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405c:	89 10                	mov    DWORD PTR [eax],edx
c001405e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	50                   	push   eax
c0014066:	e8 99 f4 ff ff       	call   c0013504 <Device::~Device()>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	90                   	nop
c001406f:	83 c4 0c             	add    esp,0xc
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <InterruptController::~InterruptController()>:
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	83 ec 0c             	sub    esp,0xc
c001407a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407e:	e8 cd ff ff ff       	call   c0014050 <InterruptController::~InterruptController()>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	83 ec 08             	sub    esp,0x8
c0014089:	68 58 21 00 00       	push   0x2158
c001408e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014092:	e8 e0 e0 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	83 c4 0c             	add    esp,0xc
c001409d:	c3                   	ret    

c001409e <displayDebugInfo(regs*)>:
c001409e:	55                   	push   ebp
c001409f:	57                   	push   edi
c00140a0:	56                   	push   esi
c00140a1:	53                   	push   ebx
c00140a2:	83 ec 24             	sub    esp,0x24
c00140a5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00140a9:	0f 20 c2             	mov    edx,cr0
c00140ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140b0:	0f 20 d7             	mov    edi,cr2
c00140b3:	0f 20 de             	mov    esi,cr3
c00140b6:	0f 20 e5             	mov    ebp,cr4
c00140b9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140bc:	68 62 76 02 c0       	push   0xc0027662
c00140c1:	e8 91 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140c6:	58                   	pop    eax
c00140c7:	5a                   	pop    edx
c00140c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140cb:	68 6d 76 02 c0       	push   0xc002766d
c00140d0:	e8 82 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140d5:	59                   	pop    ecx
c00140d6:	58                   	pop    eax
c00140d7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140da:	68 78 76 02 c0       	push   0xc0027678
c00140df:	e8 73 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140e4:	58                   	pop    eax
c00140e5:	5a                   	pop    edx
c00140e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140e9:	68 83 76 02 c0       	push   0xc0027683
c00140ee:	e8 64 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00140f3:	59                   	pop    ecx
c00140f4:	58                   	pop    eax
c00140f5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140f8:	68 8e 76 02 c0       	push   0xc002768e
c00140fd:	e8 55 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014102:	58                   	pop    eax
c0014103:	5a                   	pop    edx
c0014104:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014107:	68 99 76 02 c0       	push   0xc0027699
c001410c:	e8 46 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014111:	59                   	pop    ecx
c0014112:	58                   	pop    eax
c0014113:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014116:	68 a4 76 02 c0       	push   0xc00276a4
c001411b:	e8 37 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014120:	58                   	pop    eax
c0014121:	5a                   	pop    edx
c0014122:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014125:	68 af 76 02 c0       	push   0xc00276af
c001412a:	e8 28 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001412f:	59                   	pop    ecx
c0014130:	58                   	pop    eax
c0014131:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014134:	68 ba 76 02 c0       	push   0xc00276ba
c0014139:	e8 19 e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001413e:	58                   	pop    eax
c001413f:	5a                   	pop    edx
c0014140:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014143:	68 c9 76 02 c0       	push   0xc00276c9
c0014148:	e8 0a e1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001414d:	59                   	pop    ecx
c001414e:	58                   	pop    eax
c001414f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014152:	68 d4 76 02 c0       	push   0xc00276d4
c0014157:	e8 fb e0 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001415c:	58                   	pop    eax
c001415d:	5a                   	pop    edx
c001415e:	57                   	push   edi
c001415f:	68 df 76 02 c0       	push   0xc00276df
c0014164:	e8 ee e0 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014169:	59                   	pop    ecx
c001416a:	58                   	pop    eax
c001416b:	56                   	push   esi
c001416c:	68 ea 76 02 c0       	push   0xc00276ea
c0014171:	e8 e1 e0 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014176:	58                   	pop    eax
c0014177:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001417c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014182:	e8 14 c3 ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c0014187:	58                   	pop    eax
c0014188:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001418b:	5a                   	pop    edx
c001418c:	c1 e0 05             	shl    eax,0x5
c001418f:	05 40 94 02 c0       	add    eax,0xc0029440
c0014194:	50                   	push   eax
c0014195:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001419a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141a0:	e8 15 c7 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141a5:	59                   	pop    ecx
c00141a6:	58                   	pop    eax
c00141a7:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00141ac:	68 f5 76 02 c0       	push   0xc00276f5
c00141b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141b7:	e8 fe c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141bc:	58                   	pop    eax
c00141bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141c2:	5a                   	pop    edx
c00141c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141c6:	83 c0 0c             	add    eax,0xc
c00141c9:	50                   	push   eax
c00141ca:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00141cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141d5:	e8 e0 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141da:	59                   	pop    ecx
c00141db:	58                   	pop    eax
c00141dc:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00141e1:	68 fe 76 02 c0       	push   0xc00276fe
c00141e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141ec:	e8 c9 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00141f1:	58                   	pop    eax
c00141f2:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00141f7:	5a                   	pop    edx
c00141f8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014201:	e8 da c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014206:	59                   	pop    ecx
c0014207:	58                   	pop    eax
c0014208:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001420d:	68 06 77 02 c0       	push   0xc0027706
c0014212:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014218:	e8 9d c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c001421d:	58                   	pop    eax
c001421e:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014223:	5a                   	pop    edx
c0014224:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014227:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001422d:	e8 ae c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014232:	59                   	pop    ecx
c0014233:	58                   	pop    eax
c0014234:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014239:	68 0e 77 02 c0       	push   0xc002770e
c001423e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014244:	e8 71 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014249:	58                   	pop    eax
c001424a:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001424f:	5a                   	pop    edx
c0014250:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014253:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014259:	e8 82 c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001425e:	59                   	pop    ecx
c001425f:	58                   	pop    eax
c0014260:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014265:	68 16 77 02 c0       	push   0xc0027716
c001426a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014270:	e8 45 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014275:	58                   	pop    eax
c0014276:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001427b:	5a                   	pop    edx
c001427c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001427f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014285:	e8 56 c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001428a:	59                   	pop    ecx
c001428b:	58                   	pop    eax
c001428c:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014291:	68 1e 77 02 c0       	push   0xc002771e
c0014296:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001429c:	e8 19 c6 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00142a1:	58                   	pop    eax
c00142a2:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00142a7:	5a                   	pop    edx
c00142a8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00142ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142b1:	e8 2a c6 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00142b6:	59                   	pop    ecx
c00142b7:	58                   	pop    eax
c00142b8:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00142bd:	68 26 77 02 c0       	push   0xc0027726
c00142c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142c8:	e8 ed c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00142cd:	58                   	pop    eax
c00142ce:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00142d3:	5a                   	pop    edx
c00142d4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142dd:	e8 fe c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00142e2:	59                   	pop    ecx
c00142e3:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00142e8:	5b                   	pop    ebx
c00142e9:	68 2e 77 02 c0       	push   0xc002772e
c00142ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f4:	e8 c1 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00142f9:	58                   	pop    eax
c00142fa:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00142ff:	5a                   	pop    edx
c0014300:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014304:	52                   	push   edx
c0014305:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430b:	e8 d0 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014310:	59                   	pop    ecx
c0014311:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014316:	5b                   	pop    ebx
c0014317:	68 37 77 02 c0       	push   0xc0027737
c001431c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014322:	e8 93 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014327:	58                   	pop    eax
c0014328:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001432d:	5a                   	pop    edx
c001432e:	57                   	push   edi
c001432f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014335:	e8 a6 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001433a:	59                   	pop    ecx
c001433b:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014340:	5b                   	pop    ebx
c0014341:	68 3f 77 02 c0       	push   0xc002773f
c0014346:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434c:	e8 69 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014351:	5f                   	pop    edi
c0014352:	58                   	pop    eax
c0014353:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014358:	56                   	push   esi
c0014359:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001435f:	e8 7c c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0014364:	58                   	pop    eax
c0014365:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001436a:	5a                   	pop    edx
c001436b:	68 47 77 02 c0       	push   0xc0027747
c0014370:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014376:	e8 3f c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c001437b:	59                   	pop    ecx
c001437c:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014381:	5b                   	pop    ebx
c0014382:	55                   	push   ebp
c0014383:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014389:	e8 52 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001438e:	5e                   	pop    esi
c001438f:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014394:	5f                   	pop    edi
c0014395:	68 4f 77 02 c0       	push   0xc002774f
c001439a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a0:	e8 15 c5 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00143a5:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00143aa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143b0:	e8 6e 10 01 00       	call   c0025423 <CPU::readDR0()>
c00143b5:	5d                   	pop    ebp
c00143b6:	5a                   	pop    edx
c00143b7:	50                   	push   eax
c00143b8:	53                   	push   ebx
c00143b9:	e8 22 c5 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00143be:	59                   	pop    ecx
c00143bf:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00143c4:	5b                   	pop    ebx
c00143c5:	68 58 77 02 c0       	push   0xc0027758
c00143ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d0:	e8 e5 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00143d5:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00143da:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143e0:	e8 50 10 01 00       	call   c0025435 <CPU::readDR1()>
c00143e5:	5e                   	pop    esi
c00143e6:	5f                   	pop    edi
c00143e7:	50                   	push   eax
c00143e8:	53                   	push   ebx
c00143e9:	e8 f2 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00143ee:	5d                   	pop    ebp
c00143ef:	58                   	pop    eax
c00143f0:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00143f5:	68 60 77 02 c0       	push   0xc0027760
c00143fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014400:	e8 b5 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014405:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001440a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014410:	e8 32 10 01 00       	call   c0025447 <CPU::readDR2()>
c0014415:	5a                   	pop    edx
c0014416:	59                   	pop    ecx
c0014417:	50                   	push   eax
c0014418:	53                   	push   ebx
c0014419:	e8 c2 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001441e:	5b                   	pop    ebx
c001441f:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014424:	5e                   	pop    esi
c0014425:	68 68 77 02 c0       	push   0xc0027768
c001442a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014430:	e8 85 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014435:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001443a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014440:	e8 14 10 01 00       	call   c0025459 <CPU::readDR3()>
c0014445:	5f                   	pop    edi
c0014446:	5d                   	pop    ebp
c0014447:	50                   	push   eax
c0014448:	53                   	push   ebx
c0014449:	e8 92 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001444e:	58                   	pop    eax
c001444f:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014454:	5a                   	pop    edx
c0014455:	68 70 77 02 c0       	push   0xc0027770
c001445a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014460:	e8 55 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014465:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001446a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014470:	e8 f6 0f 01 00       	call   c002546b <CPU::readDR6()>
c0014475:	59                   	pop    ecx
c0014476:	5e                   	pop    esi
c0014477:	50                   	push   eax
c0014478:	53                   	push   ebx
c0014479:	e8 62 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c001447e:	5f                   	pop    edi
c001447f:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0014484:	5d                   	pop    ebp
c0014485:	68 78 77 02 c0       	push   0xc0027778
c001448a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014490:	e8 25 c4 ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0014495:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001449a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144a0:	e8 d8 0f 01 00       	call   c002547d <CPU::readDR7()>
c00144a5:	5a                   	pop    edx
c00144a6:	59                   	pop    ecx
c00144a7:	50                   	push   eax
c00144a8:	53                   	push   ebx
c00144a9:	e8 32 c4 ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c00144ae:	fa                   	cli    
c00144af:	f4                   	hlt    
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	eb fe                	jmp    c00144b3 <displayDebugInfo(regs*)+0x415>

c00144b5 <x87EmulHandler(regs*, void*)>:
c00144b5:	83 ec 0c             	sub    esp,0xc
c00144b8:	a1 94 a5 02 c0       	mov    eax,ds:0xc002a594
c00144bd:	85 c0                	test   eax,eax
c00144bf:	74 14                	je     c00144d5 <x87EmulHandler(regs*, void*)+0x20>
c00144c1:	83 ec 0c             	sub    esp,0xc
c00144c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c8:	ff d0                	call   eax
c00144ca:	83 c4 10             	add    esp,0x10
c00144cd:	84 c0                	test   al,al
c00144cf:	74 15                	je     c00144e6 <x87EmulHandler(regs*, void*)+0x31>
c00144d1:	83 c4 0c             	add    esp,0xc
c00144d4:	c3                   	ret    
c00144d5:	c7 05 94 a5 02 c0 59 8e 01 c0 	mov    DWORD PTR ds:0xc002a594,0xc0018e59
c00144df:	b8 59 8e 01 c0       	mov    eax,0xc0018e59
c00144e4:	eb db                	jmp    c00144c1 <x87EmulHandler(regs*, void*)+0xc>
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	68 80 77 02 c0       	push   0xc0027780
c00144ee:	e8 64 dd ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00144f3:	58                   	pop    eax
c00144f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f8:	e8 a1 fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c00144fd <gpFault(regs*, void*)>:
c00144fd:	53                   	push   ebx
c00144fe:	83 ec 14             	sub    esp,0x14
c0014501:	c7 05 90 a5 02 c0 cb d6 01 c0 	mov    DWORD PTR ds:0xc002a590,0xc001d6cb
c001450b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001450f:	53                   	push   ebx
c0014510:	e8 b6 91 00 00       	call   c001d6cb <Vm::faultHandler(regs*)>
c0014515:	83 c4 10             	add    esp,0x10
c0014518:	84 c0                	test   al,al
c001451a:	74 05                	je     c0014521 <gpFault(regs*, void*)+0x24>
c001451c:	83 c4 08             	add    esp,0x8
c001451f:	5b                   	pop    ebx
c0014520:	c3                   	ret    
c0014521:	83 ec 0c             	sub    esp,0xc
c0014524:	68 80 77 02 c0       	push   0xc0027780
c0014529:	e8 29 dd ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001452e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014531:	e8 68 fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c0014536 <pgFault(regs*, void*)>:
c0014536:	83 ec 18             	sub    esp,0x18
c0014539:	68 9b 77 02 c0       	push   0xc002779b
c001453e:	e8 14 dd ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014543:	58                   	pop    eax
c0014544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014548:	e8 51 fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c001454d <otherISRHandler(regs*, void*)>:
c001454d:	53                   	push   ebx
c001454e:	83 ec 0c             	sub    esp,0xc
c0014551:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014555:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014558:	50                   	push   eax
c0014559:	50                   	push   eax
c001455a:	68 a8 77 02 c0       	push   0xc00277a8
c001455f:	e8 f3 dc ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014564:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014567:	e8 32 fb ff ff       	call   c001409e <displayDebugInfo(regs*)>

c001456c <opcodeFault(regs*, void*)>:
c001456c:	55                   	push   ebp
c001456d:	89 e5                	mov    ebp,esp
c001456f:	56                   	push   esi
c0014570:	53                   	push   ebx
c0014571:	83 ec 40             	sub    esp,0x40
c0014574:	e8 0b 33 00 00       	call   c0017884 <thisCPU()>
c0014579:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001457f:	84 c0                	test   al,al
c0014581:	74 24                	je     c00145a7 <opcodeFault(regs*, void*)+0x3b>
c0014583:	83 ec 0c             	sub    esp,0xc
c0014586:	68 c8 77 02 c0       	push   0xc00277c8
c001458b:	e8 c7 dc ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014590:	83 c4 10             	add    esp,0x10
c0014593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014596:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014599:	8d 50 19             	lea    edx,[eax+0x19]
c001459c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001459f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145a2:	e9 77 05 00 00       	jmp    c0014b1e <opcodeFault(regs*, void*)+0x5b2>
c00145a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00145b0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00145b4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00145b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145be:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00145c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145c4:	8a 00                	mov    al,BYTE PTR [eax]
c00145c6:	3c f0                	cmp    al,0xf0
c00145c8:	75 17                	jne    c00145e1 <opcodeFault(regs*, void*)+0x75>
c00145ca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145d3:	8d 50 01             	lea    edx,[eax+0x1]
c00145d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145dc:	e9 da 00 00 00       	jmp    c00146bb <opcodeFault(regs*, void*)+0x14f>
c00145e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145e4:	8a 00                	mov    al,BYTE PTR [eax]
c00145e6:	3c f2                	cmp    al,0xf2
c00145e8:	74 09                	je     c00145f3 <opcodeFault(regs*, void*)+0x87>
c00145ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145ed:	8a 00                	mov    al,BYTE PTR [eax]
c00145ef:	3c f3                	cmp    al,0xf3
c00145f1:	75 1b                	jne    c001460e <opcodeFault(regs*, void*)+0xa2>
c00145f3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014600:	8d 50 01             	lea    edx,[eax+0x1]
c0014603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014606:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014609:	e9 ad 00 00 00       	jmp    c00146bb <opcodeFault(regs*, void*)+0x14f>
c001460e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014611:	8a 00                	mov    al,BYTE PTR [eax]
c0014613:	3c 66                	cmp    al,0x66
c0014615:	75 1f                	jne    c0014636 <opcodeFault(regs*, void*)+0xca>
c0014617:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001461b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001461f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014625:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014628:	8d 50 01             	lea    edx,[eax+0x1]
c001462b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001462e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014631:	e9 85 00 00 00       	jmp    c00146bb <opcodeFault(regs*, void*)+0x14f>
c0014636:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014639:	8a 00                	mov    al,BYTE PTR [eax]
c001463b:	3c 67                	cmp    al,0x67
c001463d:	75 18                	jne    c0014657 <opcodeFault(regs*, void*)+0xeb>
c001463f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014643:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014649:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001464c:	8d 50 01             	lea    edx,[eax+0x1]
c001464f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014652:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014655:	eb 64                	jmp    c00146bb <opcodeFault(regs*, void*)+0x14f>
c0014657:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001465a:	8a 00                	mov    al,BYTE PTR [eax]
c001465c:	3c 2e                	cmp    al,0x2e
c001465e:	74 09                	je     c0014669 <opcodeFault(regs*, void*)+0xfd>
c0014660:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014663:	8a 00                	mov    al,BYTE PTR [eax]
c0014665:	3c 3e                	cmp    al,0x3e
c0014667:	75 18                	jne    c0014681 <opcodeFault(regs*, void*)+0x115>
c0014669:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001466d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014673:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014676:	8d 50 01             	lea    edx,[eax+0x1]
c0014679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001467c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001467f:	eb 3a                	jmp    c00146bb <opcodeFault(regs*, void*)+0x14f>
c0014681:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014684:	8a 00                	mov    al,BYTE PTR [eax]
c0014686:	3c 36                	cmp    al,0x36
c0014688:	74 1b                	je     c00146a5 <opcodeFault(regs*, void*)+0x139>
c001468a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001468d:	8a 00                	mov    al,BYTE PTR [eax]
c001468f:	3c 26                	cmp    al,0x26
c0014691:	74 12                	je     c00146a5 <opcodeFault(regs*, void*)+0x139>
c0014693:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014696:	8a 00                	mov    al,BYTE PTR [eax]
c0014698:	3c 64                	cmp    al,0x64
c001469a:	74 09                	je     c00146a5 <opcodeFault(regs*, void*)+0x139>
c001469c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001469f:	8a 00                	mov    al,BYTE PTR [eax]
c00146a1:	3c 65                	cmp    al,0x65
c00146a3:	75 16                	jne    c00146bb <opcodeFault(regs*, void*)+0x14f>
c00146a5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00146a9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146b2:	8d 50 01             	lea    edx,[eax+0x1]
c00146b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146be:	8a 00                	mov    al,BYTE PTR [eax]
c00146c0:	3c 0f                	cmp    al,0xf
c00146c2:	0f 85 ad 00 00 00    	jne    c0014775 <opcodeFault(regs*, void*)+0x209>
c00146c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146cb:	40                   	inc    eax
c00146cc:	8a 00                	mov    al,BYTE PTR [eax]
c00146ce:	3c c2                	cmp    al,0xc2
c00146d0:	74 0e                	je     c00146e0 <opcodeFault(regs*, void*)+0x174>
c00146d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146d5:	40                   	inc    eax
c00146d6:	8a 00                	mov    al,BYTE PTR [eax]
c00146d8:	3c c3                	cmp    al,0xc3
c00146da:	0f 85 95 00 00 00    	jne    c0014775 <opcodeFault(regs*, void*)+0x209>
c00146e0:	83 ec 0c             	sub    esp,0xc
c00146e3:	68 eb 77 02 c0       	push   0xc00277eb
c00146e8:	e8 6a db ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00146ed:	83 c4 10             	add    esp,0x10
c00146f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146f6:	8d 50 01             	lea    edx,[eax+0x1]
c00146f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146fc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014702:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014705:	8a 00                	mov    al,BYTE PTR [eax]
c0014707:	8d 50 fe             	lea    edx,[eax-0x2]
c001470a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001470d:	88 10                	mov    BYTE PTR [eax],dl
c001470f:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014712:	50                   	push   eax
c0014713:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014716:	50                   	push   eax
c0014717:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001471a:	50                   	push   eax
c001471b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001471e:	e8 e9 40 00 00       	call   c001880c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014723:	83 c4 10             	add    esp,0x10
c0014726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014729:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001472c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001472f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014732:	01 d0                	add    eax,edx
c0014734:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001473a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001473d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014740:	48                   	dec    eax
c0014741:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014747:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001474a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001474d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014750:	83 ec 04             	sub    esp,0x4
c0014753:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014756:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014759:	50                   	push   eax
c001475a:	e8 0a ba fe ff       	call   c0000169 <voodooXADD>
c001475f:	83 c4 10             	add    esp,0x10
c0014762:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014768:	01 c2                	add    edx,eax
c001476a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001476d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014770:	e9 a9 03 00 00       	jmp    c0014b1e <opcodeFault(regs*, void*)+0x5b2>
c0014775:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014778:	8a 00                	mov    al,BYTE PTR [eax]
c001477a:	3c 0f                	cmp    al,0xf
c001477c:	0f 85 8b 01 00 00    	jne    c001490d <opcodeFault(regs*, void*)+0x3a1>
c0014782:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014785:	40                   	inc    eax
c0014786:	8a 00                	mov    al,BYTE PTR [eax]
c0014788:	3c c7                	cmp    al,0xc7
c001478a:	0f 86 7d 01 00 00    	jbe    c001490d <opcodeFault(regs*, void*)+0x3a1>
c0014790:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014793:	40                   	inc    eax
c0014794:	8a 00                	mov    al,BYTE PTR [eax]
c0014796:	3c cf                	cmp    al,0xcf
c0014798:	0f 87 6f 01 00 00    	ja     c001490d <opcodeFault(regs*, void*)+0x3a1>
c001479e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00147a1:	40                   	inc    eax
c00147a2:	8a 00                	mov    al,BYTE PTR [eax]
c00147a4:	83 c0 38             	add    eax,0x38
c00147a7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00147aa:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00147ae:	75 0b                	jne    c00147bb <opcodeFault(regs*, void*)+0x24f>
c00147b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00147b6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147b9:	eb 75                	jmp    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c00147bb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00147bf:	75 0b                	jne    c00147cc <opcodeFault(regs*, void*)+0x260>
c00147c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00147c7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ca:	eb 64                	jmp    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c00147cc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147d0:	75 0b                	jne    c00147dd <opcodeFault(regs*, void*)+0x271>
c00147d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147d5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147d8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147db:	eb 53                	jmp    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c00147dd:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147e1:	75 0b                	jne    c00147ee <opcodeFault(regs*, void*)+0x282>
c00147e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ec:	eb 42                	jmp    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c00147ee:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147f2:	75 0b                	jne    c00147ff <opcodeFault(regs*, void*)+0x293>
c00147f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147f7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00147fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147fd:	eb 31                	jmp    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c00147ff:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014803:	75 0b                	jne    c0014810 <opcodeFault(regs*, void*)+0x2a4>
c0014805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014808:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001480b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001480e:	eb 20                	jmp    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c0014810:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014814:	75 0b                	jne    c0014821 <opcodeFault(regs*, void*)+0x2b5>
c0014816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014819:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001481c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001481f:	eb 0f                	jmp    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c0014821:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014825:	75 09                	jne    c0014830 <opcodeFault(regs*, void*)+0x2c4>
c0014827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001482a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001482d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014830:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014834:	74 10                	je     c0014846 <opcodeFault(regs*, void*)+0x2da>
c0014836:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001483d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014844:	eb 2d                	jmp    c0014873 <opcodeFault(regs*, void*)+0x307>
c0014846:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014849:	c1 e0 18             	shl    eax,0x18
c001484c:	89 c2                	mov    edx,eax
c001484e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014851:	c1 e0 08             	shl    eax,0x8
c0014854:	25 00 00 ff 00       	and    eax,0xff0000
c0014859:	09 c2                	or     edx,eax
c001485b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001485e:	c1 e8 08             	shr    eax,0x8
c0014861:	25 00 ff 00 00       	and    eax,0xff00
c0014866:	09 c2                	or     edx,eax
c0014868:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001486b:	c1 e8 18             	shr    eax,0x18
c001486e:	09 d0                	or     eax,edx
c0014870:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014873:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014877:	75 0b                	jne    c0014884 <opcodeFault(regs*, void*)+0x318>
c0014879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001487c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001487f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014882:	eb 75                	jmp    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c0014884:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014888:	75 0b                	jne    c0014895 <opcodeFault(regs*, void*)+0x329>
c001488a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001488d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014890:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014893:	eb 64                	jmp    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c0014895:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014899:	75 0b                	jne    c00148a6 <opcodeFault(regs*, void*)+0x33a>
c001489b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001489e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148a1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00148a4:	eb 53                	jmp    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c00148a6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00148aa:	75 0b                	jne    c00148b7 <opcodeFault(regs*, void*)+0x34b>
c00148ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148af:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148b2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00148b5:	eb 42                	jmp    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c00148b7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00148bb:	75 0b                	jne    c00148c8 <opcodeFault(regs*, void*)+0x35c>
c00148bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148c3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00148c6:	eb 31                	jmp    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c00148c8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148cc:	75 0b                	jne    c00148d9 <opcodeFault(regs*, void*)+0x36d>
c00148ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148d7:	eb 20                	jmp    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c00148d9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148dd:	75 0b                	jne    c00148ea <opcodeFault(regs*, void*)+0x37e>
c00148df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148e5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148e8:	eb 0f                	jmp    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c00148ea:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148ee:	75 09                	jne    c00148f9 <opcodeFault(regs*, void*)+0x38d>
c00148f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148f3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00148f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148fc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148ff:	8d 50 02             	lea    edx,[eax+0x2]
c0014902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014905:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014908:	e9 11 02 00 00       	jmp    c0014b1e <opcodeFault(regs*, void*)+0x5b2>
c001490d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014910:	8a 00                	mov    al,BYTE PTR [eax]
c0014912:	3c 0f                	cmp    al,0xf
c0014914:	0f 85 76 01 00 00    	jne    c0014a90 <opcodeFault(regs*, void*)+0x524>
c001491a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001491d:	40                   	inc    eax
c001491e:	8a 00                	mov    al,BYTE PTR [eax]
c0014920:	3c c7                	cmp    al,0xc7
c0014922:	0f 85 68 01 00 00    	jne    c0014a90 <opcodeFault(regs*, void*)+0x524>
c0014928:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001492b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001492e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014931:	8d 50 01             	lea    edx,[eax+0x1]
c0014934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014937:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001493a:	8d 45 ba             	lea    eax,[ebp-0x46]
c001493d:	50                   	push   eax
c001493e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014941:	50                   	push   eax
c0014942:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014945:	50                   	push   eax
c0014946:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014949:	e8 be 3e 00 00       	call   c001880c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001494e:	83 c4 10             	add    esp,0x10
c0014951:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014954:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014957:	83 f0 01             	xor    eax,0x1
c001495a:	84 c0                	test   al,al
c001495c:	0f 84 2e 01 00 00    	je     c0014a90 <opcodeFault(regs*, void*)+0x524>
c0014962:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014965:	3c 01                	cmp    al,0x1
c0014967:	0f 85 23 01 00 00    	jne    c0014a90 <opcodeFault(regs*, void*)+0x524>
c001496d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014970:	83 f0 01             	xor    eax,0x1
c0014973:	84 c0                	test   al,al
c0014975:	0f 84 15 01 00 00    	je     c0014a90 <opcodeFault(regs*, void*)+0x524>
c001497b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001497e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014981:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014984:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001498b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001498e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014991:	89 c2                	mov    edx,eax
c0014993:	b8 00 00 00 00       	mov    eax,0x0
c0014998:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001499b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001499e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149a1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00149a4:	ba 00 00 00 00       	mov    edx,0x0
c00149a9:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00149ac:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00149af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00149b5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149b8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00149bf:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149c2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149c5:	89 c2                	mov    edx,eax
c00149c7:	b8 00 00 00 00       	mov    eax,0x0
c00149cc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149cf:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149d8:	ba 00 00 00 00       	mov    edx,0x0
c00149dd:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149e0:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149e3:	e8 70 7e 00 00       	call   c001c858 <lockScheduler()>
c00149e8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149eb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00149f0:	89 c1                	mov    ecx,eax
c00149f2:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149f5:	89 cb                	mov    ebx,ecx
c00149f7:	89 d0                	mov    eax,edx
c00149f9:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00149fc:	89 c6                	mov    esi,eax
c00149fe:	89 f0                	mov    eax,esi
c0014a00:	09 d8                	or     eax,ebx
c0014a02:	85 c0                	test   eax,eax
c0014a04:	75 21                	jne    c0014a27 <opcodeFault(regs*, void*)+0x4bb>
c0014a06:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014a09:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014a0c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014a0f:	89 01                	mov    DWORD PTR [ecx],eax
c0014a11:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a17:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a1a:	83 c8 40             	or     eax,0x40
c0014a1d:	89 c2                	mov    edx,eax
c0014a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a22:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a25:	eb 3e                	jmp    c0014a65 <opcodeFault(regs*, void*)+0x4f9>
c0014a27:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a2a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a2f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a32:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a35:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a3e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a41:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a44:	89 d0                	mov    eax,edx
c0014a46:	31 d2                	xor    edx,edx
c0014a48:	89 c3                	mov    ebx,eax
c0014a4a:	89 d6                	mov    esi,edx
c0014a4c:	89 da                	mov    edx,ebx
c0014a4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a51:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a5a:	83 e0 bf             	and    eax,0xffffffbf
c0014a5d:	89 c2                	mov    edx,eax
c0014a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a62:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a65:	e8 f0 7d 00 00       	call   c001c85a <unlockScheduler()>
c0014a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a70:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a73:	01 c2                	add    edx,eax
c0014a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a78:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a7b:	83 ec 0c             	sub    esp,0xc
c0014a7e:	68 fa 77 02 c0       	push   0xc00277fa
c0014a83:	e8 cf d7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014a88:	83 c4 10             	add    esp,0x10
c0014a8b:	e9 8e 00 00 00       	jmp    c0014b1e <opcodeFault(regs*, void*)+0x5b2>
c0014a90:	83 ec 0c             	sub    esp,0xc
c0014a93:	68 0d 78 02 c0       	push   0xc002780d
c0014a98:	e8 ba d7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014aac:	c1 e0 04             	shl    eax,0x4
c0014aaf:	01 d0                	add    eax,edx
c0014ab1:	83 c0 03             	add    eax,0x3
c0014ab4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab6:	0f b6 d8             	movzx  ebx,al
c0014ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ac5:	c1 e0 04             	shl    eax,0x4
c0014ac8:	01 d0                	add    eax,edx
c0014aca:	83 c0 02             	add    eax,0x2
c0014acd:	8a 00                	mov    al,BYTE PTR [eax]
c0014acf:	0f b6 c8             	movzx  ecx,al
c0014ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014adb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ade:	c1 e0 04             	shl    eax,0x4
c0014ae1:	01 d0                	add    eax,edx
c0014ae3:	40                   	inc    eax
c0014ae4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae6:	0f b6 d0             	movzx  edx,al
c0014ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aec:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014af5:	c1 e0 04             	shl    eax,0x4
c0014af8:	01 f0                	add    eax,esi
c0014afa:	8a 00                	mov    al,BYTE PTR [eax]
c0014afc:	0f b6 c0             	movzx  eax,al
c0014aff:	83 ec 0c             	sub    esp,0xc
c0014b02:	53                   	push   ebx
c0014b03:	51                   	push   ecx
c0014b04:	52                   	push   edx
c0014b05:	50                   	push   eax
c0014b06:	68 20 78 02 c0       	push   0xc0027820
c0014b0b:	e8 47 d7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014b10:	83 c4 20             	add    esp,0x20
c0014b13:	83 ec 0c             	sub    esp,0xc
c0014b16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b19:	e8 80 f5 ff ff       	call   c001409e <displayDebugInfo(regs*)>
c0014b1e:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014b21:	5b                   	pop    ebx
c0014b22:	5e                   	pop    esi
c0014b23:	5d                   	pop    ebp
c0014b24:	c3                   	ret    

c0014b25 <displayProgramFault(char const*)>:
c0014b25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b33:	85 c0                	test   eax,eax
c0014b35:	74 15                	je     c0014b4c <displayProgramFault(char const*)+0x27>
c0014b37:	83 ec 0c             	sub    esp,0xc
c0014b3a:	6a 04                	push   0x4
c0014b3c:	6a 0f                	push   0xf
c0014b3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b42:	50                   	push   eax
c0014b43:	e8 34 ba ff ff       	call   c001057c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b48:	83 c4 1c             	add    esp,0x1c
c0014b4b:	c3                   	ret    
c0014b4c:	c3                   	ret    

c0014b4d <setupInterruptController()>:
c0014b4d:	55                   	push   ebp
c0014b4e:	89 e5                	mov    ebp,esp
c0014b50:	53                   	push   ebx
c0014b51:	83 ec 14             	sub    esp,0x14
c0014b54:	e8 28 2d 00 00       	call   c0017881 <getCPUNumber()>
c0014b59:	85 c0                	test   eax,eax
c0014b5b:	0f 95 c0             	setne  al
c0014b5e:	84 c0                	test   al,al
c0014b60:	74 56                	je     c0014bb8 <setupInterruptController()+0x6b>
c0014b62:	83 ec 0c             	sub    esp,0xc
c0014b65:	68 58 21 00 00       	push   0x2158
c0014b6a:	e8 f9 d5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0014b6f:	83 c4 10             	add    esp,0x10
c0014b72:	89 c3                	mov    ebx,eax
c0014b74:	83 ec 0c             	sub    esp,0xc
c0014b77:	53                   	push   ebx
c0014b78:	e8 29 d8 00 00       	call   c00223a6 <APIC::APIC()>
c0014b7d:	83 c4 10             	add    esp,0x10
c0014b80:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b83:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b8b:	83 c0 08             	add    eax,0x8
c0014b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b90:	6a 00                	push   0x0
c0014b92:	6a 00                	push   0x0
c0014b94:	6a 00                	push   0x0
c0014b96:	52                   	push   edx
c0014b97:	ff d0                	call   eax
c0014b99:	83 c4 10             	add    esp,0x10
c0014b9c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014ba1:	83 ec 08             	sub    esp,0x8
c0014ba4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014ba7:	50                   	push   eax
c0014ba8:	e8 b5 ea ff ff       	call   c0013662 <Device::addChild(Device*)>
c0014bad:	83 c4 10             	add    esp,0x10
c0014bb0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014bb3:	e9 48 03 00 00       	jmp    c0014f00 <setupInterruptController()+0x3b3>
c0014bb8:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014bbd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014bc3:	83 e0 01             	and    eax,0x1
c0014bc6:	84 c0                	test   al,al
c0014bc8:	0f 95 c0             	setne  al
c0014bcb:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014bce:	83 ec 0c             	sub    esp,0xc
c0014bd1:	68 58 21 00 00       	push   0x2158
c0014bd6:	e8 8d d5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	89 c3                	mov    ebx,eax
c0014be0:	83 ec 0c             	sub    esp,0xc
c0014be3:	53                   	push   ebx
c0014be4:	e8 7f dc 00 00       	call   c0022868 <PIC::PIC()>
c0014be9:	83 c4 10             	add    esp,0x10
c0014bec:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bf7:	83 c0 08             	add    eax,0x8
c0014bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfc:	6a 00                	push   0x0
c0014bfe:	6a 00                	push   0x0
c0014c00:	6a 00                	push   0x0
c0014c02:	52                   	push   edx
c0014c03:	ff d0                	call   eax
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014c0c:	74 6e                	je     c0014c7c <setupInterruptController()+0x12f>
c0014c0e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c16:	83 c0 0c             	add    eax,0xc
c0014c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c1b:	6a 00                	push   0x0
c0014c1d:	6a 00                	push   0x0
c0014c1f:	6a 00                	push   0x0
c0014c21:	52                   	push   edx
c0014c22:	ff d0                	call   eax
c0014c24:	83 c4 10             	add    esp,0x10
c0014c27:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c2b:	74 15                	je     c0014c42 <setupInterruptController()+0xf5>
c0014c2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c32:	83 c0 04             	add    eax,0x4
c0014c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c37:	83 ec 0c             	sub    esp,0xc
c0014c3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c3d:	ff d0                	call   eax
c0014c3f:	83 c4 10             	add    esp,0x10
c0014c42:	83 ec 0c             	sub    esp,0xc
c0014c45:	68 58 21 00 00       	push   0x2158
c0014c4a:	e8 19 d5 ff ff       	call   c0012168 <operator new(unsigned long)>
c0014c4f:	83 c4 10             	add    esp,0x10
c0014c52:	89 c3                	mov    ebx,eax
c0014c54:	83 ec 0c             	sub    esp,0xc
c0014c57:	53                   	push   ebx
c0014c58:	e8 49 d7 00 00       	call   c00223a6 <APIC::APIC()>
c0014c5d:	83 c4 10             	add    esp,0x10
c0014c60:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c63:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c69:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c6b:	83 c0 08             	add    eax,0x8
c0014c6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c70:	6a 00                	push   0x0
c0014c72:	6a 00                	push   0x0
c0014c74:	6a 00                	push   0x0
c0014c76:	52                   	push   edx
c0014c77:	ff d0                	call   eax
c0014c79:	83 c4 10             	add    esp,0x10
c0014c7c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014c81:	83 ec 08             	sub    esp,0x8
c0014c84:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c87:	50                   	push   eax
c0014c88:	e8 d5 e9 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0014c8d:	83 c4 10             	add    esp,0x10
c0014c90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c93:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c95:	83 c0 24             	add    eax,0x24
c0014c98:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c9a:	6a 00                	push   0x0
c0014c9c:	68 4d 45 01 c0       	push   0xc001454d
c0014ca1:	6a 00                	push   0x0
c0014ca3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ca6:	ff d0                	call   eax
c0014ca8:	83 c4 10             	add    esp,0x10
c0014cab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cae:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb0:	83 c0 24             	add    eax,0x24
c0014cb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cb5:	6a 00                	push   0x0
c0014cb7:	68 4d 45 01 c0       	push   0xc001454d
c0014cbc:	6a 01                	push   0x1
c0014cbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cc1:	ff d0                	call   eax
c0014cc3:	83 c4 10             	add    esp,0x10
c0014cc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ccb:	83 c0 24             	add    eax,0x24
c0014cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cd0:	6a 00                	push   0x0
c0014cd2:	68 01 3f 01 c0       	push   0xc0013f01
c0014cd7:	6a 02                	push   0x2
c0014cd9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cdc:	ff d0                	call   eax
c0014cde:	83 c4 10             	add    esp,0x10
c0014ce1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce6:	83 c0 24             	add    eax,0x24
c0014ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ceb:	6a 00                	push   0x0
c0014ced:	68 4d 45 01 c0       	push   0xc001454d
c0014cf2:	6a 03                	push   0x3
c0014cf4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cf7:	ff d0                	call   eax
c0014cf9:	83 c4 10             	add    esp,0x10
c0014cfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d01:	83 c0 24             	add    eax,0x24
c0014d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d06:	6a 00                	push   0x0
c0014d08:	68 4d 45 01 c0       	push   0xc001454d
c0014d0d:	6a 04                	push   0x4
c0014d0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d12:	ff d0                	call   eax
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d1c:	83 c0 24             	add    eax,0x24
c0014d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d21:	6a 00                	push   0x0
c0014d23:	68 4d 45 01 c0       	push   0xc001454d
c0014d28:	6a 05                	push   0x5
c0014d2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d2d:	ff d0                	call   eax
c0014d2f:	83 c4 10             	add    esp,0x10
c0014d32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d37:	83 c0 24             	add    eax,0x24
c0014d3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d3c:	6a 00                	push   0x0
c0014d3e:	68 6c 45 01 c0       	push   0xc001456c
c0014d43:	6a 06                	push   0x6
c0014d45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d48:	ff d0                	call   eax
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d50:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d52:	83 c0 24             	add    eax,0x24
c0014d55:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d57:	6a 00                	push   0x0
c0014d59:	68 b5 44 01 c0       	push   0xc00144b5
c0014d5e:	6a 07                	push   0x7
c0014d60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d63:	ff d0                	call   eax
c0014d65:	83 c4 10             	add    esp,0x10
c0014d68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d6d:	83 c0 24             	add    eax,0x24
c0014d70:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d72:	6a 00                	push   0x0
c0014d74:	68 1c 3d 01 c0       	push   0xc0013d1c
c0014d79:	6a 08                	push   0x8
c0014d7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d7e:	ff d0                	call   eax
c0014d80:	83 c4 10             	add    esp,0x10
c0014d83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d86:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d88:	83 c0 24             	add    eax,0x24
c0014d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8d:	6a 00                	push   0x0
c0014d8f:	68 4d 45 01 c0       	push   0xc001454d
c0014d94:	6a 09                	push   0x9
c0014d96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d99:	ff d0                	call   eax
c0014d9b:	83 c4 10             	add    esp,0x10
c0014d9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da3:	83 c0 24             	add    eax,0x24
c0014da6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da8:	6a 00                	push   0x0
c0014daa:	68 4d 45 01 c0       	push   0xc001454d
c0014daf:	6a 0a                	push   0xa
c0014db1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014db4:	ff d0                	call   eax
c0014db6:	83 c4 10             	add    esp,0x10
c0014db9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dbe:	83 c0 24             	add    eax,0x24
c0014dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dc3:	6a 00                	push   0x0
c0014dc5:	68 4d 45 01 c0       	push   0xc001454d
c0014dca:	6a 0b                	push   0xb
c0014dcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dcf:	ff d0                	call   eax
c0014dd1:	83 c4 10             	add    esp,0x10
c0014dd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd9:	83 c0 24             	add    eax,0x24
c0014ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dde:	6a 00                	push   0x0
c0014de0:	68 4d 45 01 c0       	push   0xc001454d
c0014de5:	6a 0c                	push   0xc
c0014de7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dea:	ff d0                	call   eax
c0014dec:	83 c4 10             	add    esp,0x10
c0014def:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df4:	83 c0 24             	add    eax,0x24
c0014df7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df9:	6a 00                	push   0x0
c0014dfb:	68 fd 44 01 c0       	push   0xc00144fd
c0014e00:	6a 0d                	push   0xd
c0014e02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e05:	ff d0                	call   eax
c0014e07:	83 c4 10             	add    esp,0x10
c0014e0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e0f:	83 c0 24             	add    eax,0x24
c0014e12:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e14:	6a 00                	push   0x0
c0014e16:	68 36 45 01 c0       	push   0xc0014536
c0014e1b:	6a 0e                	push   0xe
c0014e1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e20:	ff d0                	call   eax
c0014e22:	83 c4 10             	add    esp,0x10
c0014e25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e2a:	83 c0 24             	add    eax,0x24
c0014e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e2f:	6a 00                	push   0x0
c0014e31:	68 4d 45 01 c0       	push   0xc001454d
c0014e36:	6a 0f                	push   0xf
c0014e38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e3b:	ff d0                	call   eax
c0014e3d:	83 c4 10             	add    esp,0x10
c0014e40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e45:	83 c0 24             	add    eax,0x24
c0014e48:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e4a:	6a 00                	push   0x0
c0014e4c:	68 4d 45 01 c0       	push   0xc001454d
c0014e51:	6a 10                	push   0x10
c0014e53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e56:	ff d0                	call   eax
c0014e58:	83 c4 10             	add    esp,0x10
c0014e5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e60:	83 c0 24             	add    eax,0x24
c0014e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e65:	6a 00                	push   0x0
c0014e67:	68 4d 45 01 c0       	push   0xc001454d
c0014e6c:	6a 11                	push   0x11
c0014e6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e71:	ff d0                	call   eax
c0014e73:	83 c4 10             	add    esp,0x10
c0014e76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e79:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e7b:	83 c0 24             	add    eax,0x24
c0014e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e80:	6a 00                	push   0x0
c0014e82:	68 4d 45 01 c0       	push   0xc001454d
c0014e87:	6a 12                	push   0x12
c0014e89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e8c:	ff d0                	call   eax
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e94:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e96:	83 c0 24             	add    eax,0x24
c0014e99:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e9b:	6a 00                	push   0x0
c0014e9d:	68 4d 45 01 c0       	push   0xc001454d
c0014ea2:	6a 13                	push   0x13
c0014ea4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ea7:	ff d0                	call   eax
c0014ea9:	83 c4 10             	add    esp,0x10
c0014eac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb1:	83 c0 24             	add    eax,0x24
c0014eb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb6:	6a 00                	push   0x0
c0014eb8:	68 4d 45 01 c0       	push   0xc001454d
c0014ebd:	6a 14                	push   0x14
c0014ebf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ec2:	ff d0                	call   eax
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eca:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ecc:	83 c0 24             	add    eax,0x24
c0014ecf:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ed1:	6a 00                	push   0x0
c0014ed3:	68 4d 45 01 c0       	push   0xc001454d
c0014ed8:	6a 1e                	push   0x1e
c0014eda:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014edd:	ff d0                	call   eax
c0014edf:	83 c4 10             	add    esp,0x10
c0014ee2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ee5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ee7:	83 c0 24             	add    eax,0x24
c0014eea:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eec:	6a 00                	push   0x0
c0014eee:	68 6e b2 01 c0       	push   0xc001b26e
c0014ef3:	6a 60                	push   0x60
c0014ef5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ef8:	ff d0                	call   eax
c0014efa:	83 c4 10             	add    esp,0x10
c0014efd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f00:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014f03:	c9                   	leave  
c0014f04:	c3                   	ret    
c0014f05:	90                   	nop

c0014f06 <InterruptController::convertLegacyIRQNumber(int)>:
c0014f06:	55                   	push   ebp
c0014f07:	89 e5                	mov    ebp,esp
c0014f09:	83 ec 08             	sub    esp,0x8
c0014f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0f:	83 ec 0c             	sub    esp,0xc
c0014f12:	50                   	push   eax
c0014f13:	e8 2c ea ff ff       	call   c0013944 <Device::getName()>
c0014f18:	83 c4 10             	add    esp,0x10
c0014f1b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1d:	3c 41                	cmp    al,0x41
c0014f1f:	0f 94 c0             	sete   al
c0014f22:	84 c0                	test   al,al
c0014f24:	74 28                	je     c0014f4e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f26:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f2a:	7f 12                	jg     c0014f3e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f2f:	05 e0 96 02 c0       	add    eax,0xc00296e0
c0014f34:	8a 00                	mov    al,BYTE PTR [eax]
c0014f36:	0f b6 c0             	movzx  eax,al
c0014f39:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f3c:	eb 10                	jmp    c0014f4e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f3e:	83 ec 0c             	sub    esp,0xc
c0014f41:	68 b4 75 02 c0       	push   0xc00275b4
c0014f46:	e8 b9 49 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f51:	c9                   	leave  
c0014f52:	c3                   	ret    
c0014f53:	90                   	nop

c0014f54 <startGUI(void*)>:
c0014f54:	55                   	push   ebp
c0014f55:	89 e5                	mov    ebp,esp
c0014f57:	53                   	push   ebx
c0014f58:	83 ec 04             	sub    esp,0x4
c0014f5b:	e8 fa 78 00 00       	call   c001c85a <unlockScheduler()>
c0014f60:	e8 de 78 00 00       	call   c001c843 <getIRQNestingLevel()>
c0014f65:	83 ec 08             	sub    esp,0x8
c0014f68:	50                   	push   eax
c0014f69:	68 88 78 02 c0       	push   0xc0027888
c0014f6e:	e8 e4 d2 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f7c:	83 ec 08             	sub    esp,0x8
c0014f7f:	6a 01                	push   0x1
c0014f81:	68 a2 78 02 c0       	push   0xc00278a2
c0014f86:	e8 fc 72 00 00       	call   c001c287 <Thr::loadDLL(char const*, bool)>
c0014f8b:	83 c4 10             	add    esp,0x10
c0014f8e:	83 ec 08             	sub    esp,0x8
c0014f91:	53                   	push   ebx
c0014f92:	50                   	push   eax
c0014f93:	e8 b5 74 00 00       	call   c001c44d <Thr::executeDLL(unsigned long, void*)>
c0014f98:	83 c4 10             	add    esp,0x10
c0014f9b:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014fa1:	83 ec 08             	sub    esp,0x8
c0014fa4:	6a 01                	push   0x1
c0014fa6:	68 bc 78 02 c0       	push   0xc00278bc
c0014fab:	e8 d7 72 00 00       	call   c001c287 <Thr::loadDLL(char const*, bool)>
c0014fb0:	83 c4 10             	add    esp,0x10
c0014fb3:	83 ec 08             	sub    esp,0x8
c0014fb6:	53                   	push   ebx
c0014fb7:	50                   	push   eax
c0014fb8:	e8 90 74 00 00       	call   c001c44d <Thr::executeDLL(unsigned long, void*)>
c0014fbd:	83 c4 10             	add    esp,0x10
c0014fc0:	90                   	nop
c0014fc1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014fc4:	c9                   	leave  
c0014fc5:	c3                   	ret    

c0014fc6 <sendKeyToTerminal(unsigned char)>:
c0014fc6:	55                   	push   ebp
c0014fc7:	89 e5                	mov    ebp,esp
c0014fc9:	83 ec 28             	sub    esp,0x28
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fd2:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c0014fd7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fdb:	83 ec 08             	sub    esp,0x8
c0014fde:	52                   	push   edx
c0014fdf:	50                   	push   eax
c0014fe0:	e8 d3 ba ff ff       	call   c0010ab8 <VgaText::receiveKey(unsigned char)>
c0014fe5:	83 c4 10             	add    esp,0x10
c0014fe8:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014fec:	75 41                	jne    c001502f <sendKeyToTerminal(unsigned char)+0x69>
c0014fee:	e8 8c 78 00 00       	call   c001c87f <lockStuff()>
c0014ff3:	a1 a0 a5 02 c0       	mov    eax,ds:0xc002a5a0
c0014ff8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ffb:	c7 05 a0 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a5a0,0x0
c0015005:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015009:	74 1f                	je     c001502a <sendKeyToTerminal(unsigned char)+0x64>
c001500b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001500e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015011:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015014:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015017:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001501a:	83 ec 0c             	sub    esp,0xc
c001501d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015020:	e8 43 7e 00 00       	call   c001ce68 <unblockTask(ThreadControlBlock*)>
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	eb db                	jmp    c0015005 <sendKeyToTerminal(unsigned char)+0x3f>
c001502a:	e8 e2 7b 00 00       	call   c001cc11 <unlockStuff()>
c001502f:	90                   	nop
c0015030:	c9                   	leave  
c0015031:	c3                   	ret    

c0015032 <sendKeyboardToken(KeyboardToken)>:
c0015032:	55                   	push   ebp
c0015033:	89 e5                	mov    ebp,esp
c0015035:	83 ec 18             	sub    esp,0x18
c0015038:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001503b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503e:	0f b7 c0             	movzx  eax,ax
c0015041:	83 f2 01             	xor    edx,0x1
c0015044:	88 90 c0 a5 02 c0    	mov    BYTE PTR [eax-0x3ffd5a40],dl
c001504a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504d:	66 3d 03 02          	cmp    ax,0x203
c0015051:	75 07                	jne    c001505a <sendKeyboardToken(KeyboardToken)+0x28>
c0015053:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015058:	84 c0                	test   al,al
c001505a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001505e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015061:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c0015066:	38 c2                	cmp    dl,al
c0015068:	74 1c                	je     c0015086 <sendKeyboardToken(KeyboardToken)+0x54>
c001506a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001506d:	a2 c8 a9 02 c0       	mov    ds:0xc002a9c8,al
c0015072:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c0015077:	0f b6 c0             	movzx  eax,al
c001507a:	83 ec 0c             	sub    esp,0xc
c001507d:	50                   	push   eax
c001507e:	e8 a3 ac ff ff       	call   c000fd26 <setTerminalScrollLock(bool)>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015089:	84 c0                	test   al,al
c001508b:	0f 84 ae 00 00 00    	je     c001513f <sendKeyboardToken(KeyboardToken)+0x10d>
c0015091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015094:	66 3d 10 03          	cmp    ax,0x310
c0015098:	75 06                	jne    c00150a0 <sendKeyboardToken(KeyboardToken)+0x6e>
c001509a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	66 3d 11 03          	cmp    ax,0x311
c00150a7:	75 06                	jne    c00150af <sendKeyboardToken(KeyboardToken)+0x7d>
c00150a9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00150af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b2:	66 3d 12 03          	cmp    ax,0x312
c00150b6:	75 06                	jne    c00150be <sendKeyboardToken(KeyboardToken)+0x8c>
c00150b8:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00150be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c1:	66 3d 13 03          	cmp    ax,0x313
c00150c5:	75 06                	jne    c00150cd <sendKeyboardToken(KeyboardToken)+0x9b>
c00150c7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d0:	66 3d 14 03          	cmp    ax,0x314
c00150d4:	75 06                	jne    c00150dc <sendKeyboardToken(KeyboardToken)+0xaa>
c00150d6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150df:	66 3d 15 03          	cmp    ax,0x315
c00150e3:	75 06                	jne    c00150eb <sendKeyboardToken(KeyboardToken)+0xb9>
c00150e5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ee:	66 3d 16 03          	cmp    ax,0x316
c00150f2:	75 06                	jne    c00150fa <sendKeyboardToken(KeyboardToken)+0xc8>
c00150f4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00150fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150fd:	66 3d 17 03          	cmp    ax,0x317
c0015101:	75 06                	jne    c0015109 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015103:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001510c:	66 3d 18 03          	cmp    ax,0x318
c0015110:	75 06                	jne    c0015118 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015112:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511b:	66 3d 19 03          	cmp    ax,0x319
c001511f:	75 06                	jne    c0015127 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015121:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512a:	66 3d 1a 03          	cmp    ax,0x31a
c001512e:	0f 85 c9 00 00 00    	jne    c00151fd <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015134:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001513a:	e9 be 00 00 00       	jmp    c00151fd <sendKeyboardToken(KeyboardToken)+0x1cb>
c001513f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015142:	66 3d 10 03          	cmp    ax,0x310
c0015146:	75 0a                	jne    c0015152 <sendKeyboardToken(KeyboardToken)+0x120>
c0015148:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001514e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015155:	66 3d 11 03          	cmp    ax,0x311
c0015159:	75 0a                	jne    c0015165 <sendKeyboardToken(KeyboardToken)+0x133>
c001515b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015161:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015168:	66 3d 12 03          	cmp    ax,0x312
c001516c:	75 0a                	jne    c0015178 <sendKeyboardToken(KeyboardToken)+0x146>
c001516e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015174:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015178:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517b:	66 3d 13 03          	cmp    ax,0x313
c001517f:	75 0a                	jne    c001518b <sendKeyboardToken(KeyboardToken)+0x159>
c0015181:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015187:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001518b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518e:	66 3d 14 03          	cmp    ax,0x314
c0015192:	75 0a                	jne    c001519e <sendKeyboardToken(KeyboardToken)+0x16c>
c0015194:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001519a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001519e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a1:	66 3d 15 03          	cmp    ax,0x315
c00151a5:	75 0a                	jne    c00151b1 <sendKeyboardToken(KeyboardToken)+0x17f>
c00151a7:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00151ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b4:	66 3d 16 03          	cmp    ax,0x316
c00151b8:	75 0a                	jne    c00151c4 <sendKeyboardToken(KeyboardToken)+0x192>
c00151ba:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00151c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c7:	66 3d 17 03          	cmp    ax,0x317
c00151cb:	75 0a                	jne    c00151d7 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151cd:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151da:	66 3d 18 03          	cmp    ax,0x318
c00151de:	75 0a                	jne    c00151ea <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151e0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ed:	66 3d 19 03          	cmp    ax,0x319
c00151f1:	75 0a                	jne    c00151fd <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151f3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151f9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015200:	66 3d 00 02          	cmp    ax,0x200
c0015204:	75 2a                	jne    c0015230 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015206:	a0 c0 a9 02 c0       	mov    al,ds:0xc002a9c0
c001520b:	83 f0 01             	xor    eax,0x1
c001520e:	84 c0                	test   al,al
c0015210:	74 1e                	je     c0015230 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015212:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0015217:	6a 01                	push   0x1
c0015219:	6a 00                	push   0x0
c001521b:	68 54 4f 01 c0       	push   0xc0014f54
c0015220:	50                   	push   eax
c0015221:	e8 5c 77 00 00       	call   c001c982 <Process::createThread(void (*)(void*), void*, int)>
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	c6 05 c0 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a9c0,0x1
c0015230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015233:	66 3d 1d 03          	cmp    ax,0x31d
c0015237:	75 06                	jne    c001523f <sendKeyboardToken(KeyboardToken)+0x20d>
c0015239:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001523f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015242:	66 3d 1c 03          	cmp    ax,0x31c
c0015246:	75 06                	jne    c001524e <sendKeyboardToken(KeyboardToken)+0x21c>
c0015248:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001524e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015251:	66 3d 1b 03          	cmp    ax,0x31b
c0015255:	75 06                	jne    c001525d <sendKeyboardToken(KeyboardToken)+0x22b>
c0015257:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001525d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015260:	66 3d 1e 03          	cmp    ax,0x31e
c0015264:	75 06                	jne    c001526c <sendKeyboardToken(KeyboardToken)+0x23a>
c0015266:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001526c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526f:	66 3d 1f 03          	cmp    ax,0x31f
c0015273:	75 06                	jne    c001527b <sendKeyboardToken(KeyboardToken)+0x249>
c0015275:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001527b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527e:	66 3d 1a 03          	cmp    ax,0x31a
c0015282:	75 06                	jne    c001528a <sendKeyboardToken(KeyboardToken)+0x258>
c0015284:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001528a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001528e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015291:	83 f0 01             	xor    eax,0x1
c0015294:	84 c0                	test   al,al
c0015296:	74 77                	je     c001530f <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015298:	a0 c1 a6 02 c0       	mov    al,ds:0xc002a6c1
c001529d:	84 c0                	test   al,al
c001529f:	74 41                	je     c00152e2 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00152a1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152a5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00152a9:	74 2b                	je     c00152d6 <sendKeyboardToken(KeyboardToken)+0x2a4>
c00152ab:	8b 15 c4 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c4
c00152b1:	89 d0                	mov    eax,edx
c00152b3:	c1 e0 02             	shl    eax,0x2
c00152b6:	01 d0                	add    eax,edx
c00152b8:	01 c0                	add    eax,eax
c00152ba:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c00152bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c2:	0f b7 c0             	movzx  eax,ax
c00152c5:	8d 50 d0             	lea    edx,[eax-0x30]
c00152c8:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152cd:	01 d0                	add    eax,edx
c00152cf:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c00152d4:	eb 6d                	jmp    c0015343 <sendKeyboardToken(KeyboardToken)+0x311>
c00152d6:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152e0:	eb 61                	jmp    c0015343 <sendKeyboardToken(KeyboardToken)+0x311>
c00152e2:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152e7:	85 c0                	test   eax,eax
c00152e9:	74 18                	je     c0015303 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152eb:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152f0:	0f b6 c0             	movzx  eax,al
c00152f3:	83 ec 0c             	sub    esp,0xc
c00152f6:	50                   	push   eax
c00152f7:	e8 ca fc ff ff       	call   c0014fc6 <sendKeyToTerminal(unsigned char)>
c00152fc:	83 c4 10             	add    esp,0x10
c00152ff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015303:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c001530d:	eb 34                	jmp    c0015343 <sendKeyboardToken(KeyboardToken)+0x311>
c001530f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015312:	66 3d 01 01          	cmp    ax,0x101
c0015316:	75 2b                	jne    c0015343 <sendKeyboardToken(KeyboardToken)+0x311>
c0015318:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c001531d:	85 c0                	test   eax,eax
c001531f:	74 18                	je     c0015339 <sendKeyboardToken(KeyboardToken)+0x307>
c0015321:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c0015326:	0f b6 c0             	movzx  eax,al
c0015329:	83 ec 0c             	sub    esp,0xc
c001532c:	50                   	push   eax
c001532d:	e8 94 fc ff ff       	call   c0014fc6 <sendKeyToTerminal(unsigned char)>
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015339:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c0015343:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015346:	83 f0 01             	xor    eax,0x1
c0015349:	84 c0                	test   al,al
c001534b:	74 4c                	je     c0015399 <sendKeyboardToken(KeyboardToken)+0x367>
c001534d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015350:	83 f0 01             	xor    eax,0x1
c0015353:	84 c0                	test   al,al
c0015355:	74 42                	je     c0015399 <sendKeyboardToken(KeyboardToken)+0x367>
c0015357:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c001535c:	83 f0 01             	xor    eax,0x1
c001535f:	84 c0                	test   al,al
c0015361:	74 36                	je     c0015399 <sendKeyboardToken(KeyboardToken)+0x367>
c0015363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015366:	66 83 f8 1f          	cmp    ax,0x1f
c001536a:	76 09                	jbe    c0015375 <sendKeyboardToken(KeyboardToken)+0x343>
c001536c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536f:	66 83 f8 7e          	cmp    ax,0x7e
c0015373:	76 12                	jbe    c0015387 <sendKeyboardToken(KeyboardToken)+0x355>
c0015375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015378:	66 83 f8 0a          	cmp    ax,0xa
c001537c:	74 09                	je     c0015387 <sendKeyboardToken(KeyboardToken)+0x355>
c001537e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015381:	66 83 f8 08          	cmp    ax,0x8
c0015385:	75 12                	jne    c0015399 <sendKeyboardToken(KeyboardToken)+0x367>
c0015387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538a:	0f b6 c0             	movzx  eax,al
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	50                   	push   eax
c0015391:	e8 30 fc ff ff       	call   c0014fc6 <sendKeyToTerminal(unsigned char)>
c0015396:	83 c4 10             	add    esp,0x10
c0015399:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001539c:	83 f0 01             	xor    eax,0x1
c001539f:	84 c0                	test   al,al
c00153a1:	74 4f                	je     c00153f2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153a3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153a6:	83 f0 01             	xor    eax,0x1
c00153a9:	84 c0                	test   al,al
c00153ab:	74 45                	je     c00153f2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153ad:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c00153b2:	84 c0                	test   al,al
c00153b4:	74 3c                	je     c00153f2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b9:	66 83 f8 3f          	cmp    ax,0x3f
c00153bd:	76 33                	jbe    c00153f2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c2:	66 83 f8 7f          	cmp    ax,0x7f
c00153c6:	77 2a                	ja     c00153f2 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cb:	88 c2                	mov    dl,al
c00153cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d0:	66 83 f8 5f          	cmp    ax,0x5f
c00153d4:	76 04                	jbe    c00153da <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153d6:	b0 20                	mov    al,0x20
c00153d8:	eb 02                	jmp    c00153dc <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153da:	b0 00                	mov    al,0x0
c00153dc:	29 c2                	sub    edx,eax
c00153de:	88 d0                	mov    al,dl
c00153e0:	83 e8 40             	sub    eax,0x40
c00153e3:	0f b6 c0             	movzx  eax,al
c00153e6:	83 ec 0c             	sub    esp,0xc
c00153e9:	50                   	push   eax
c00153ea:	e8 d7 fb ff ff       	call   c0014fc6 <sendKeyToTerminal(unsigned char)>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f5:	66 3d 00 03          	cmp    ax,0x300
c00153f9:	75 0f                	jne    c001540a <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153fb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153fe:	83 f0 01             	xor    eax,0x1
c0015401:	84 c0                	test   al,al
c0015403:	74 05                	je     c001540a <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015405:	e8 43 b1 ff ff       	call   c001054d <doTerminalCycle()>
c001540a:	90                   	nop
c001540b:	c9                   	leave  
c001540c:	c3                   	ret    

c001540d <clearInternalKeybuffer(VgaText*)>:
c001540d:	55                   	push   ebp
c001540e:	89 e5                	mov    ebp,esp
c0015410:	83 ec 08             	sub    esp,0x8
c0015413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015416:	05 34 11 00 00       	add    eax,0x1134
c001541b:	83 ec 0c             	sub    esp,0xc
c001541e:	50                   	push   eax
c001541f:	e8 e5 b2 fe ff       	call   c0000709 <strlen>
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001542a:	81 c2 34 11 00 00    	add    edx,0x1134
c0015430:	83 ec 04             	sub    esp,0x4
c0015433:	50                   	push   eax
c0015434:	6a 00                	push   0x0
c0015436:	52                   	push   edx
c0015437:	e8 b0 b2 fe ff       	call   c00006ec <memset>
c001543c:	83 c4 10             	add    esp,0x10
c001543f:	90                   	nop
c0015440:	c9                   	leave  
c0015441:	c3                   	ret    

c0015442 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015442:	55                   	push   ebp
c0015443:	89 e5                	mov    ebp,esp
c0015445:	83 ec 18             	sub    esp,0x18
c0015448:	fb                   	sti    
c0015449:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015450:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015454:	0f 84 8a 00 00 00    	je     c00154e4 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001545a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015463:	84 c0                	test   al,al
c0015465:	75 11                	jne    c0015478 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015467:	e8 ec 73 00 00       	call   c001c858 <lockScheduler()>
c001546c:	e8 1b 77 00 00       	call   c001cb8c <schedule()>
c0015471:	e8 e4 73 00 00       	call   c001c85a <unlockScheduler()>
c0015476:	eb e2                	jmp    c001545a <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015478:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001547b:	8d 50 01             	lea    edx,[eax+0x1]
c001547e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015481:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015484:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001548a:	88 10                	mov    BYTE PTR [eax],dl
c001548c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015495:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549b:	05 34 11 00 00       	add    eax,0x1134
c00154a0:	83 ec 0c             	sub    esp,0xc
c00154a3:	50                   	push   eax
c00154a4:	e8 60 b2 fe ff       	call   c0000709 <strlen>
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154af:	81 c2 34 11 00 00    	add    edx,0x1134
c00154b5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00154b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00154bb:	81 c2 34 11 00 00    	add    edx,0x1134
c00154c1:	83 ec 04             	sub    esp,0x4
c00154c4:	50                   	push   eax
c00154c5:	51                   	push   ecx
c00154c6:	52                   	push   edx
c00154c7:	e8 b2 b1 fe ff       	call   c000067e <memmove>
c00154cc:	83 c4 10             	add    esp,0x10
c00154cf:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154d2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154d5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154d9:	0f 85 71 ff ff ff    	jne    c0015450 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e2:	eb 03                	jmp    c00154e7 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e7:	c9                   	leave  
c00154e8:	c3                   	ret    
c00154e9:	90                   	nop

c00154ea <Keyboard::Keyboard(char const*)>:
c00154ea:	83 ec 0c             	sub    esp,0xc
c00154ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f1:	83 ec 08             	sub    esp,0x8
c00154f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154f8:	50                   	push   eax
c00154f9:	e8 54 e3 ff ff       	call   c0013852 <Device::Device(char const*)>
c00154fe:	83 c4 10             	add    esp,0x10
c0015501:	ba e0 78 02 c0       	mov    edx,0xc00278e0
c0015506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001550a:	89 10                	mov    DWORD PTR [eax],edx
c001550c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015510:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001551a:	c6 05 a4 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5a4,0x1
c0015521:	90                   	nop
c0015522:	83 c4 0c             	add    esp,0xc
c0015525:	c3                   	ret    

c0015526 <Keyboard::~Keyboard()>:
c0015526:	83 ec 0c             	sub    esp,0xc
c0015529:	ba e0 78 02 c0       	mov    edx,0xc00278e0
c001552e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015532:	89 10                	mov    DWORD PTR [eax],edx
c0015534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015538:	83 ec 0c             	sub    esp,0xc
c001553b:	50                   	push   eax
c001553c:	e8 c3 df ff ff       	call   c0013504 <Device::~Device()>
c0015541:	83 c4 10             	add    esp,0x10
c0015544:	90                   	nop
c0015545:	83 c4 0c             	add    esp,0xc
c0015548:	c3                   	ret    
c0015549:	90                   	nop

c001554a <Keyboard::~Keyboard()>:
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015554:	e8 cd ff ff ff       	call   c0015526 <Keyboard::~Keyboard()>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	83 ec 08             	sub    esp,0x8
c001555f:	68 5c 01 00 00       	push   0x15c
c0015564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015568:	e8 0a cc ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001556d:	83 c4 10             	add    esp,0x10
c0015570:	83 c4 0c             	add    esp,0xc
c0015573:	c3                   	ret    

c0015574 <LogicalDisk::close(int, int, void*)>:
c0015574:	83 c8 ff             	or     eax,0xffffffff
c0015577:	c3                   	ret    

c0015578 <LogicalDisk::~LogicalDisk()>:
c0015578:	83 ec 0c             	sub    esp,0xc
c001557b:	ba 90 79 02 c0       	mov    edx,0xc0027990
c0015580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015584:	89 10                	mov    DWORD PTR [eax],edx
c0015586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001558a:	83 ec 0c             	sub    esp,0xc
c001558d:	50                   	push   eax
c001558e:	e8 71 df ff ff       	call   c0013504 <Device::~Device()>
c0015593:	83 c4 10             	add    esp,0x10
c0015596:	90                   	nop
c0015597:	83 c4 0c             	add    esp,0xc
c001559a:	c3                   	ret    
c001559b:	90                   	nop

c001559c <LogicalDisk::~LogicalDisk()>:
c001559c:	83 ec 0c             	sub    esp,0xc
c001559f:	83 ec 0c             	sub    esp,0xc
c00155a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155a6:	e8 cd ff ff ff       	call   c0015578 <LogicalDisk::~LogicalDisk()>
c00155ab:	83 c4 10             	add    esp,0x10
c00155ae:	83 ec 08             	sub    esp,0x8
c00155b1:	68 74 01 00 00       	push   0x174
c00155b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00155ba:	e8 b8 cb ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00155bf:	83 c4 10             	add    esp,0x10
c00155c2:	83 c4 0c             	add    esp,0xc
c00155c5:	c3                   	ret    

c00155c6 <LogicalDisk::open(int, int, void*)>:
c00155c6:	83 ec 18             	sub    esp,0x18
c00155c9:	68 0c 79 02 c0       	push   0xc002790c
c00155ce:	e8 31 43 00 00       	call   c0019904 <Krnl::panic(char const*)>
c00155d3:	83 c8 ff             	or     eax,0xffffffff
c00155d6:	83 c4 1c             	add    esp,0x1c
c00155d9:	c3                   	ret    

c00155da <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155da:	53                   	push   ebx
c00155db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155e7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155ed:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155f3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155f9:	77 10                	ja     c001560b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00155fb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015601:	89 d3                	mov    ebx,edx
c0015603:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015609:	72 05                	jb     c0015610 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001560b:	83 c8 ff             	or     eax,0xffffffff
c001560e:	89 c2                	mov    edx,eax
c0015610:	5b                   	pop    ebx
c0015611:	c3                   	ret    

c0015612 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015612:	56                   	push   esi
c0015613:	83 c8 ff             	or     eax,0xffffffff
c0015616:	53                   	push   ebx
c0015617:	89 c2                	mov    edx,eax
c0015619:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001561d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015621:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015625:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001562b:	77 27                	ja     c0015654 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001562d:	89 d8                	mov    eax,ebx
c001562f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015635:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001563b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015640:	89 c2                	mov    edx,eax
c0015642:	73 10                	jae    c0015654 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015644:	89 c8                	mov    eax,ecx
c0015646:	89 da                	mov    edx,ebx
c0015648:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001564e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015654:	5b                   	pop    ebx
c0015655:	5e                   	pop    esi
c0015656:	c3                   	ret    
c0015657:	90                   	nop

c0015658 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015658:	83 ec 1c             	sub    esp,0x1c
c001565b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001565f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015667:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001566b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001566f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015676:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001567a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567e:	83 ec 08             	sub    esp,0x8
c0015681:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015685:	50                   	push   eax
c0015686:	e8 c7 e1 ff ff       	call   c0013852 <Device::Device(char const*)>
c001568b:	83 c4 10             	add    esp,0x10
c001568e:	ba 90 79 02 c0       	mov    edx,0xc0027990
c0015693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015697:	89 10                	mov    DWORD PTR [eax],edx
c0015699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00156af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00156bd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156c9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156cf:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156d5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156e0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156e6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156f4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00156fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156fe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015708:	90                   	nop
c0015709:	83 c4 1c             	add    esp,0x1c
c001570c:	c3                   	ret    
c001570d:	90                   	nop

c001570e <LogicalDisk::assignDriveLetter()>:
c001570e:	55                   	push   ebp
c001570f:	57                   	push   edi
c0015710:	56                   	push   esi
c0015711:	53                   	push   ebx
c0015712:	83 ec 14             	sub    esp,0x14
c0015715:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015719:	8b 3d e0 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e0
c001571f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015725:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015729:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001572f:	8b 3d e4 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e4
c0015735:	3c 01                	cmp    al,0x1
c0015737:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001573b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001573f:	19 c0                	sbb    eax,eax
c0015741:	83 e0 02             	and    eax,0x2
c0015744:	83 c0 41             	add    eax,0x41
c0015747:	0f be e8             	movsx  ebp,al
c001574a:	3c 43                	cmp    al,0x43
c001574c:	75 10                	jne    c001575e <LogicalDisk::assignDriveLetter()+0x50>
c001574e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015755:	75 5d                	jne    c00157b4 <LogicalDisk::assignDriveLetter()+0xa6>
c0015757:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001575c:	75 56                	jne    c00157b4 <LogicalDisk::assignDriveLetter()+0xa6>
c001575e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015761:	ba 01 00 00 00       	mov    edx,0x1
c0015766:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001576a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001576e:	d3 e2                	shl    edx,cl
c0015770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015774:	89 d7                	mov    edi,edx
c0015776:	89 d6                	mov    esi,edx
c0015778:	c1 ff 1f             	sar    edi,0x1f
c001577b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001577f:	21 f9                	and    ecx,edi
c0015781:	09 d1                	or     ecx,edx
c0015783:	75 2f                	jne    c00157b4 <LogicalDisk::assignDriveLetter()+0xa6>
c0015785:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001578d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015793:	09 f2                	or     edx,esi
c0015795:	89 15 e0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e0,edx
c001579b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001579f:	09 fa                	or     edx,edi
c00157a1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00157a5:	89 15 e4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e4,edx
c00157ab:	89 1c bd 00 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5600],ebx
c00157b2:	eb 08                	jmp    c00157bc <LogicalDisk::assignDriveLetter()+0xae>
c00157b4:	45                   	inc    ebp
c00157b5:	40                   	inc    eax
c00157b6:	3c 5b                	cmp    al,0x5b
c00157b8:	75 90                	jne    c001574a <LogicalDisk::assignDriveLetter()+0x3c>
c00157ba:	31 c0                	xor    eax,eax
c00157bc:	83 c4 14             	add    esp,0x14
c00157bf:	5b                   	pop    ebx
c00157c0:	5e                   	pop    esi
c00157c1:	5f                   	pop    edi
c00157c2:	5d                   	pop    ebp
c00157c3:	c3                   	ret    

c00157c4 <LogicalDisk::mount()>:
c00157c4:	56                   	push   esi
c00157c5:	53                   	push   ebx
c00157c6:	51                   	push   ecx
c00157c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157cb:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c00157d1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157db:	85 db                	test   ebx,ebx
c00157dd:	74 50                	je     c001582f <LogicalDisk::mount()+0x6b>
c00157df:	e8 5f 70 00 00       	call   c001c843 <getIRQNestingLevel()>
c00157e4:	52                   	push   edx
c00157e5:	52                   	push   edx
c00157e6:	50                   	push   eax
c00157e7:	68 30 79 02 c0       	push   0xc0027930
c00157ec:	e8 66 ca ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00157f1:	83 c4 0c             	add    esp,0xc
c00157f4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00157fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157fd:	83 e8 41             	sub    eax,0x41
c0015800:	50                   	push   eax
c0015801:	56                   	push   esi
c0015802:	53                   	push   ebx
c0015803:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015806:	83 c4 10             	add    esp,0x10
c0015809:	84 c0                	test   al,al
c001580b:	74 08                	je     c0015815 <LogicalDisk::mount()+0x51>
c001580d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015813:	eb 1c                	jmp    c0015831 <LogicalDisk::mount()+0x6d>
c0015815:	e8 29 70 00 00       	call   c001c843 <getIRQNestingLevel()>
c001581a:	51                   	push   ecx
c001581b:	51                   	push   ecx
c001581c:	50                   	push   eax
c001581d:	68 4b 79 02 c0       	push   0xc002794b
c0015822:	e8 30 ca ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0015827:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	eb ac                	jmp    c00157db <LogicalDisk::mount()+0x17>
c001582f:	31 c0                	xor    eax,eax
c0015831:	5a                   	pop    edx
c0015832:	5b                   	pop    ebx
c0015833:	5e                   	pop    esi
c0015834:	c3                   	ret    
c0015835:	90                   	nop

c0015836 <LogicalDisk::unmount()>:
c0015836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001583a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015844:	c3                   	ret    
c0015845:	90                   	nop

c0015846 <LogicalDisk::unassignDriveLetter()>:
c0015846:	57                   	push   edi
c0015847:	56                   	push   esi
c0015848:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001584c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015853:	84 c9                	test   cl,cl
c0015855:	75 0f                	jne    c0015866 <LogicalDisk::unassignDriveLetter()+0x20>
c0015857:	c7 44 24 0c 66 79 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027966
c001585f:	5e                   	pop    esi
c0015860:	5f                   	pop    edi
c0015861:	e9 9e 40 00 00       	jmp    c0019904 <Krnl::panic(char const*)>
c0015866:	83 e9 41             	sub    ecx,0x41
c0015869:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015870:	b8 01 00 00 00       	mov    eax,0x1
c0015875:	c7 04 8d 00 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5600],0x0
c0015880:	d3 e0                	shl    eax,cl
c0015882:	89 c7                	mov    edi,eax
c0015884:	f7 d0                	not    eax
c0015886:	c1 ff 1f             	sar    edi,0x1f
c0015889:	21 05 e0 a9 02 c0    	and    DWORD PTR ds:0xc002a9e0,eax
c001588f:	89 fe                	mov    esi,edi
c0015891:	f7 d6                	not    esi
c0015893:	21 35 e4 a9 02 c0    	and    DWORD PTR ds:0xc002a9e4,esi
c0015899:	5e                   	pop    esi
c001589a:	5f                   	pop    edi
c001589b:	c3                   	ret    

c001589c <LogicalDisk::read(unsigned long long, int, void*)>:
c001589c:	57                   	push   edi
c001589d:	56                   	push   esi
c001589e:	53                   	push   ebx
c001589f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158af:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158b5:	77 41                	ja     c00158f8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00158b7:	99                   	cdq    
c00158b8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00158be:	01 c8                	add    eax,ecx
c00158c0:	11 da                	adc    edx,ebx
c00158c2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158c8:	19 d7                	sbb    edi,edx
c00158ca:	72 33                	jb     c00158ff <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158cc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158d2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158dc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158e0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158f0:	5b                   	pop    ebx
c00158f1:	5e                   	pop    esi
c00158f2:	5f                   	pop    edi
c00158f3:	e9 9a 09 00 00       	jmp    c0016292 <VCache::read(unsigned long long, int, void*)>
c00158f8:	b8 05 00 00 00       	mov    eax,0x5
c00158fd:	eb 05                	jmp    c0015904 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00158ff:	b8 07 00 00 00       	mov    eax,0x7
c0015904:	5b                   	pop    ebx
c0015905:	5e                   	pop    esi
c0015906:	5f                   	pop    edi
c0015907:	c3                   	ret    

c0015908 <LogicalDisk::write(unsigned long long, int, void*)>:
c0015908:	57                   	push   edi
c0015909:	56                   	push   esi
c001590a:	53                   	push   ebx
c001590b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001590f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015913:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015917:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001591b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015921:	77 41                	ja     c0015964 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015923:	99                   	cdq    
c0015924:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001592a:	01 c8                	add    eax,ecx
c001592c:	11 da                	adc    edx,ebx
c001592e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015934:	19 d7                	sbb    edi,edx
c0015936:	72 33                	jb     c001596b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015938:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001593e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015944:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015948:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001594c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015952:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015958:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001595c:	5b                   	pop    ebx
c001595d:	5e                   	pop    esi
c001595e:	5f                   	pop    edi
c001595f:	e9 4a 08 00 00       	jmp    c00161ae <VCache::write(unsigned long long, int, void*)>
c0015964:	b8 05 00 00 00       	mov    eax,0x5
c0015969:	eb 05                	jmp    c0015970 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001596b:	b8 07 00 00 00       	mov    eax,0x7
c0015970:	5b                   	pop    ebx
c0015971:	5e                   	pop    esi
c0015972:	5f                   	pop    edi
c0015973:	c3                   	ret    

c0015974 <Mouse::Mouse(char const*)>:
c0015974:	83 ec 0c             	sub    esp,0xc
c0015977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001597b:	83 ec 08             	sub    esp,0x8
c001597e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015982:	50                   	push   eax
c0015983:	e8 ca de ff ff       	call   c0013852 <Device::Device(char const*)>
c0015988:	83 c4 10             	add    esp,0x10
c001598b:	ba bc 79 02 c0       	mov    edx,0xc00279bc
c0015990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015994:	89 10                	mov    DWORD PTR [eax],edx
c0015996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00159a4:	90                   	nop
c00159a5:	83 c4 0c             	add    esp,0xc
c00159a8:	c3                   	ret    
c00159a9:	90                   	nop

c00159aa <Mouse::~Mouse()>:
c00159aa:	83 ec 0c             	sub    esp,0xc
c00159ad:	ba bc 79 02 c0       	mov    edx,0xc00279bc
c00159b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b6:	89 10                	mov    DWORD PTR [eax],edx
c00159b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159bc:	83 ec 0c             	sub    esp,0xc
c00159bf:	50                   	push   eax
c00159c0:	e8 3f db ff ff       	call   c0013504 <Device::~Device()>
c00159c5:	83 c4 10             	add    esp,0x10
c00159c8:	90                   	nop
c00159c9:	83 c4 0c             	add    esp,0xc
c00159cc:	c3                   	ret    
c00159cd:	90                   	nop

c00159ce <Mouse::~Mouse()>:
c00159ce:	83 ec 0c             	sub    esp,0xc
c00159d1:	83 ec 0c             	sub    esp,0xc
c00159d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159d8:	e8 cd ff ff ff       	call   c00159aa <Mouse::~Mouse()>
c00159dd:	83 c4 10             	add    esp,0x10
c00159e0:	83 ec 08             	sub    esp,0x8
c00159e3:	68 58 01 00 00       	push   0x158
c00159e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159ec:	e8 86 c7 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00159f1:	83 c4 10             	add    esp,0x10
c00159f4:	83 c4 0c             	add    esp,0xc
c00159f7:	c3                   	ret    

c00159f8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159f8:	55                   	push   ebp
c00159f9:	57                   	push   edi
c00159fa:	56                   	push   esi
c00159fb:	53                   	push   ebx
c00159fc:	81 ec 28 01 00 00    	sub    esp,0x128
c0015a02:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015a09:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015a10:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015a17:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015a1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a22:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015a26:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a2d:	e8 12 df ff ff       	call   c0013944 <Device::getName()>
c0015a32:	5a                   	pop    edx
c0015a33:	59                   	pop    ecx
c0015a34:	50                   	push   eax
c0015a35:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a39:	55                   	push   ebp
c0015a3a:	e8 4c ad fe ff       	call   c000078b <strcpy>
c0015a3f:	5b                   	pop    ebx
c0015a40:	58                   	pop    eax
c0015a41:	68 e0 79 02 c0       	push   0xc00279e0
c0015a46:	55                   	push   ebp
c0015a47:	e8 f6 ad fe ff       	call   c0000842 <strcat>
c0015a4c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a53:	e8 10 c7 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015a58:	83 c4 0c             	add    esp,0xc
c0015a5b:	89 c3                	mov    ebx,eax
c0015a5d:	57                   	push   edi
c0015a5e:	56                   	push   esi
c0015a5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a67:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a6e:	55                   	push   ebp
c0015a6f:	50                   	push   eax
c0015a70:	e8 e3 fb ff ff       	call   c0015658 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a75:	83 c4 14             	add    esp,0x14
c0015a78:	53                   	push   ebx
c0015a79:	e8 90 fc ff ff       	call   c001570e <LogicalDisk::assignDriveLetter()>
c0015a7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a81:	e8 3e fd ff ff       	call   c00157c4 <LogicalDisk::mount()>
c0015a86:	58                   	pop    eax
c0015a87:	5a                   	pop    edx
c0015a88:	53                   	push   ebx
c0015a89:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a90:	e8 cd db ff ff       	call   c0013662 <Device::addChild(Device*)>
c0015a95:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a9b:	5b                   	pop    ebx
c0015a9c:	5e                   	pop    esi
c0015a9d:	5f                   	pop    edi
c0015a9e:	5d                   	pop    ebp
c0015a9f:	c3                   	ret    

c0015aa0 <createPartitionsForDisk(PhysicalDisk*)>:
c0015aa0:	55                   	push   ebp
c0015aa1:	57                   	push   edi
c0015aa2:	56                   	push   esi
c0015aa3:	53                   	push   ebx
c0015aa4:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015aaa:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015ab1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015ab7:	3d 00 02 00 00       	cmp    eax,0x200
c0015abc:	74 27                	je     c0015ae5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015abe:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015ac4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015aca:	83 ec 10             	sub    esp,0x10
c0015acd:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015ad1:	99                   	cdq    
c0015ad2:	c1 e6 0a             	shl    esi,0xa
c0015ad5:	52                   	push   edx
c0015ad6:	89 fd                	mov    ebp,edi
c0015ad8:	50                   	push   eax
c0015ad9:	55                   	push   ebp
c0015ada:	56                   	push   esi
c0015adb:	e8 9c d8 00 00       	call   c002337c <__udivdi3>
c0015ae0:	e9 b1 00 00 00       	jmp    c0015b96 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ae5:	83 ec 0c             	sub    esp,0xc
c0015ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015aea:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015aee:	56                   	push   esi
c0015aef:	6a 01                	push   0x1
c0015af1:	6a 00                	push   0x0
c0015af3:	6a 00                	push   0x0
c0015af5:	53                   	push   ebx
c0015af6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015af9:	83 c4 20             	add    esp,0x20
c0015afc:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015b04:	75 0a                	jne    c0015b10 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015b06:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015b0e:	74 2c                	je     c0015b3c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015b10:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b16:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b1c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b22:	83 ec 10             	sub    esp,0x10
c0015b25:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b29:	89 f7                	mov    edi,esi
c0015b2b:	c1 e0 0a             	shl    eax,0xa
c0015b2e:	c1 ff 1f             	sar    edi,0x1f
c0015b31:	57                   	push   edi
c0015b32:	56                   	push   esi
c0015b33:	52                   	push   edx
c0015b34:	50                   	push   eax
c0015b35:	e8 42 d8 00 00       	call   c002337c <__udivdi3>
c0015b3a:	eb 5a                	jmp    c0015b96 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b3c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b43:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b4a:	83 e1 7f             	and    ecx,0x7f
c0015b4d:	83 e0 7f             	and    eax,0x7f
c0015b50:	01 c1                	add    ecx,eax
c0015b52:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b59:	83 e0 7f             	and    eax,0x7f
c0015b5c:	01 c1                	add    ecx,eax
c0015b5e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b65:	83 e0 7f             	and    eax,0x7f
c0015b68:	00 c1                	add    cl,al
c0015b6a:	74 41                	je     c0015bad <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b6c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b72:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b78:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b7e:	83 ec 10             	sub    esp,0x10
c0015b81:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b85:	89 f7                	mov    edi,esi
c0015b87:	c1 e0 0a             	shl    eax,0xa
c0015b8a:	c1 ff 1f             	sar    edi,0x1f
c0015b8d:	57                   	push   edi
c0015b8e:	56                   	push   esi
c0015b8f:	52                   	push   edx
c0015b90:	50                   	push   eax
c0015b91:	e8 e6 d7 00 00       	call   c002337c <__udivdi3>
c0015b96:	83 c4 14             	add    esp,0x14
c0015b99:	52                   	push   edx
c0015b9a:	50                   	push   eax
c0015b9b:	6a 00                	push   0x0
c0015b9d:	6a 00                	push   0x0
c0015b9f:	53                   	push   ebx
c0015ba0:	e8 53 fe ff ff       	call   c00159f8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015ba5:	83 c4 20             	add    esp,0x20
c0015ba8:	e9 79 01 00 00       	jmp    c0015d26 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015bad:	89 f0                	mov    eax,esi
c0015baf:	31 f6                	xor    esi,esi
c0015bb1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015bb8:	75 02                	jne    c0015bbc <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015bba:	89 f1                	mov    ecx,esi
c0015bbc:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015bc3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015bca:	c1 e2 08             	shl    edx,0x8
c0015bcd:	c1 e7 10             	shl    edi,0x10
c0015bd0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015bd8:	09 fa                	or     edx,edi
c0015bda:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015be2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015be9:	83 c0 10             	add    eax,0x10
c0015bec:	09 fa                	or     edx,edi
c0015bee:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bf5:	c1 e7 18             	shl    edi,0x18
c0015bf8:	09 fa                	or     edx,edi
c0015bfa:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015c01:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015c05:	c1 e7 10             	shl    edi,0x10
c0015c08:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015c0f:	c1 e2 08             	shl    edx,0x8
c0015c12:	09 fa                	or     edx,edi
c0015c14:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015c1b:	09 fa                	or     edx,edi
c0015c1d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015c24:	c1 e7 18             	shl    edi,0x18
c0015c27:	09 fa                	or     edx,edi
c0015c29:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c2d:	46                   	inc    esi
c0015c2e:	83 fe 04             	cmp    esi,0x4
c0015c31:	0f 85 7a ff ff ff    	jne    c0015bb1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c3b:	83 f0 01             	xor    eax,0x1
c0015c3e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c42:	75 57                	jne    c0015c9b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c48:	83 f0 01             	xor    eax,0x1
c0015c4b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c4f:	75 4a                	jne    c0015c9b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c51:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c65:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c6b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c71:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c77:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c7b:	89 f7                	mov    edi,esi
c0015c7d:	c1 e0 0a             	shl    eax,0xa
c0015c80:	c1 ff 1f             	sar    edi,0x1f
c0015c83:	57                   	push   edi
c0015c84:	56                   	push   esi
c0015c85:	52                   	push   edx
c0015c86:	50                   	push   eax
c0015c87:	e8 f0 d6 00 00       	call   c002337c <__udivdi3>
c0015c8c:	83 c4 10             	add    esp,0x10
c0015c8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c97:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c9b:	84 c9                	test   cl,cl
c0015c9d:	74 53                	je     c0015cf2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c9f:	0f b6 c9             	movzx  ecx,cl
c0015ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ca6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015caa:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015cae:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015cba:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015cbe:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015cc6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015cca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cd2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015cd6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015cda:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015cde:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015ce2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ce6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cea:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015cee:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cf2:	31 ed                	xor    ebp,ebp
c0015cf4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cf8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015cfc:	89 f8                	mov    eax,edi
c0015cfe:	09 f0                	or     eax,esi
c0015d00:	74 1e                	je     c0015d20 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015d06:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015d0a:	89 d1                	mov    ecx,edx
c0015d0c:	09 c1                	or     ecx,eax
c0015d0e:	74 10                	je     c0015d20 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015d10:	83 ec 0c             	sub    esp,0xc
c0015d13:	57                   	push   edi
c0015d14:	56                   	push   esi
c0015d15:	52                   	push   edx
c0015d16:	50                   	push   eax
c0015d17:	53                   	push   ebx
c0015d18:	e8 db fc ff ff       	call   c00159f8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015d1d:	83 c4 20             	add    esp,0x20
c0015d20:	45                   	inc    ebp
c0015d21:	83 fd 04             	cmp    ebp,0x4
c0015d24:	75 ce                	jne    c0015cf4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015d26:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d2c:	5b                   	pop    ebx
c0015d2d:	5e                   	pop    esi
c0015d2e:	5f                   	pop    edi
c0015d2f:	5d                   	pop    ebp
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <Timer::Timer(char const*)>:
c0015d32:	83 ec 0c             	sub    esp,0xc
c0015d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d39:	83 ec 08             	sub    esp,0x8
c0015d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d40:	50                   	push   eax
c0015d41:	e8 0c db ff ff       	call   c0013852 <Device::Device(char const*)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	ba f4 79 02 c0       	mov    edx,0xc00279f4
c0015d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d52:	89 10                	mov    DWORD PTR [eax],edx
c0015d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d58:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d62:	90                   	nop
c0015d63:	83 c4 0c             	add    esp,0xc
c0015d66:	c3                   	ret    
c0015d67:	90                   	nop

c0015d68 <Timer::~Timer()>:
c0015d68:	83 ec 0c             	sub    esp,0xc
c0015d6b:	ba f4 79 02 c0       	mov    edx,0xc00279f4
c0015d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d74:	89 10                	mov    DWORD PTR [eax],edx
c0015d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7a:	83 ec 0c             	sub    esp,0xc
c0015d7d:	50                   	push   eax
c0015d7e:	e8 81 d7 ff ff       	call   c0013504 <Device::~Device()>
c0015d83:	83 c4 10             	add    esp,0x10
c0015d86:	90                   	nop
c0015d87:	83 c4 0c             	add    esp,0xc
c0015d8a:	c3                   	ret    
c0015d8b:	90                   	nop

c0015d8c <Timer::~Timer()>:
c0015d8c:	83 ec 0c             	sub    esp,0xc
c0015d8f:	83 ec 0c             	sub    esp,0xc
c0015d92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d96:	e8 cd ff ff ff       	call   c0015d68 <Timer::~Timer()>
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	83 ec 08             	sub    esp,0x8
c0015da1:	68 5c 01 00 00       	push   0x15c
c0015da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015daa:	e8 c8 c3 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0015daf:	83 c4 10             	add    esp,0x10
c0015db2:	83 c4 0c             	add    esp,0xc
c0015db5:	c3                   	ret    

c0015db6 <Timer::read()>:
c0015db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015dc0:	c3                   	ret    

c0015dc1 <timerHandler(unsigned long long)>:
c0015dc1:	55                   	push   ebp
c0015dc2:	57                   	push   edi
c0015dc3:	56                   	push   esi
c0015dc4:	53                   	push   ebx
c0015dc5:	83 ec 0c             	sub    esp,0xc
c0015dc8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015dcc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015dd0:	01 35 70 aa 02 c0    	add    DWORD PTR ds:0xc002aa70,esi
c0015dd6:	11 3d 74 aa 02 c0    	adc    DWORD PTR ds:0xc002aa74,edi
c0015ddc:	80 3d 0d a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40d,0x0
c0015de3:	0f 84 07 01 00 00    	je     c0015ef0 <timerHandler(unsigned long long)+0x12f>
c0015de9:	e8 91 6a 00 00       	call   c001c87f <lockStuff()>
c0015dee:	83 ec 0c             	sub    esp,0xc
c0015df1:	68 9c b8 02 c0       	push   0xc002b89c
c0015df6:	e8 95 f6 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015dfb:	c7 04 24 9c b8 02 c0 	mov    DWORD PTR [esp],0xc002b89c
c0015e02:	89 c3                	mov    ebx,eax
c0015e04:	e8 8f f6 00 00       	call   c0025498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	84 c0                	test   al,al
c0015e0e:	74 60                	je     c0015e70 <timerHandler(unsigned long long)+0xaf>
c0015e10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e16:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015e19:	85 c0                	test   eax,eax
c0015e1b:	0f 85 91 00 00 00    	jne    c0015eb2 <timerHandler(unsigned long long)+0xf1>
c0015e21:	e9 be 00 00 00       	jmp    c0015ee4 <timerHandler(unsigned long long)+0x123>
c0015e26:	83 ec 0c             	sub    esp,0xc
c0015e29:	55                   	push   ebp
c0015e2a:	e8 39 70 00 00       	call   c001ce68 <unblockTask(ThreadControlBlock*)>
c0015e2f:	83 c4 10             	add    esp,0x10
c0015e32:	39 eb                	cmp    ebx,ebp
c0015e34:	75 12                	jne    c0015e48 <timerHandler(unsigned long long)+0x87>
c0015e36:	83 ec 0c             	sub    esp,0xc
c0015e39:	68 9c b8 02 c0       	push   0xc002b89c
c0015e3e:	e8 4d f6 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e43:	89 c3                	mov    ebx,eax
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	83 ec 0c             	sub    esp,0xc
c0015e4b:	68 9c b8 02 c0       	push   0xc002b89c
c0015e50:	e8 43 f6 00 00       	call   c0025498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	84 c0                	test   al,al
c0015e5a:	75 b4                	jne    c0015e10 <timerHandler(unsigned long long)+0x4f>
c0015e5c:	83 ec 0c             	sub    esp,0xc
c0015e5f:	68 9c b8 02 c0       	push   0xc002b89c
c0015e64:	e8 27 f6 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e69:	83 c4 10             	add    esp,0x10
c0015e6c:	39 d8                	cmp    eax,ebx
c0015e6e:	74 a0                	je     c0015e10 <timerHandler(unsigned long long)+0x4f>
c0015e70:	83 ec 0c             	sub    esp,0xc
c0015e73:	68 9c b8 02 c0       	push   0xc002b89c
c0015e78:	e8 13 f6 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e7d:	c7 04 24 9c b8 02 c0 	mov    DWORD PTR [esp],0xc002b89c
c0015e84:	89 c5                	mov    ebp,eax
c0015e86:	e8 29 f6 00 00       	call   c00254b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e8b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e8e:	83 c4 10             	add    esp,0x10
c0015e91:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e94:	39 15 70 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa70,edx
c0015e9a:	a1 74 aa 02 c0       	mov    eax,ds:0xc002aa74
c0015e9f:	19 c8                	sbb    eax,ecx
c0015ea1:	73 83                	jae    c0015e26 <timerHandler(unsigned long long)+0x65>
c0015ea3:	50                   	push   eax
c0015ea4:	50                   	push   eax
c0015ea5:	55                   	push   ebp
c0015ea6:	68 9c b8 02 c0       	push   0xc002b89c
c0015eab:	e8 b2 f6 00 00       	call   c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015eb0:	eb 93                	jmp    c0015e45 <timerHandler(unsigned long long)+0x84>
c0015eb2:	80 3d 0c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40c,0x0
c0015eb9:	74 29                	je     c0015ee4 <timerHandler(unsigned long long)+0x123>
c0015ebb:	39 c6                	cmp    esi,eax
c0015ebd:	bb 00 00 00 00       	mov    ebx,0x0
c0015ec2:	19 df                	sbb    edi,ebx
c0015ec4:	72 19                	jb     c0015edf <timerHandler(unsigned long long)+0x11e>
c0015ec6:	e8 8d 69 00 00       	call   c001c858 <lockScheduler()>
c0015ecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015ed3:	e8 b4 6c 00 00       	call   c001cb8c <schedule()>
c0015ed8:	e8 7d 69 00 00       	call   c001c85a <unlockScheduler()>
c0015edd:	eb 05                	jmp    c0015ee4 <timerHandler(unsigned long long)+0x123>
c0015edf:	29 f0                	sub    eax,esi
c0015ee1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015ee4:	83 c4 0c             	add    esp,0xc
c0015ee7:	5b                   	pop    ebx
c0015ee8:	5e                   	pop    esi
c0015ee9:	5f                   	pop    edi
c0015eea:	5d                   	pop    ebp
c0015eeb:	e9 21 6d 00 00       	jmp    c001cc11 <unlockStuff()>
c0015ef0:	83 c4 0c             	add    esp,0xc
c0015ef3:	5b                   	pop    ebx
c0015ef4:	5e                   	pop    esi
c0015ef5:	5f                   	pop    edi
c0015ef6:	5d                   	pop    ebp
c0015ef7:	c3                   	ret    

c0015ef8 <setupTimer(int)>:
c0015ef8:	57                   	push   edi
c0015ef9:	56                   	push   esi
c0015efa:	53                   	push   ebx
c0015efb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015eff:	e8 7d 19 00 00       	call   c0017881 <getCPUNumber()>
c0015f04:	85 c0                	test   eax,eax
c0015f06:	74 32                	je     c0015f3a <setupTimer(int)+0x42>
c0015f08:	83 ec 0c             	sub    esp,0xc
c0015f0b:	68 60 01 00 00       	push   0x160
c0015f10:	e8 53 c2 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015f15:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f18:	89 c3                	mov    ebx,eax
c0015f1a:	e8 f7 ce 00 00       	call   c0022e16 <APICTimer::APICTimer()>
c0015f1f:	6a 00                	push   0x0
c0015f21:	6a 00                	push   0x0
c0015f23:	56                   	push   esi
c0015f24:	53                   	push   ebx
c0015f25:	e8 f4 cd 00 00       	call   c0022d1e <APICTimer::open(int, int, void*)>
c0015f2a:	83 c4 20             	add    esp,0x20
c0015f2d:	e8 52 19 00 00       	call   c0017884 <thisCPU()>
c0015f32:	56                   	push   esi
c0015f33:	56                   	push   esi
c0015f34:	53                   	push   ebx
c0015f35:	e9 96 00 00 00       	jmp    c0015fd0 <setupTimer(int)+0xd8>
c0015f3a:	e8 45 19 00 00       	call   c0017884 <thisCPU()>
c0015f3f:	83 ec 0c             	sub    esp,0xc
c0015f42:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f48:	e8 f7 d9 ff ff       	call   c0013944 <Device::getName()>
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f53:	0f 85 87 00 00 00    	jne    c0015fe0 <setupTimer(int)+0xe8>
c0015f59:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0015f5e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f65:	74 79                	je     c0015fe0 <setupTimer(int)+0xe8>
c0015f67:	83 ec 0c             	sub    esp,0xc
c0015f6a:	68 5c 01 00 00       	push   0x15c
c0015f6f:	e8 f4 c1 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015f74:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f77:	89 c3                	mov    ebx,eax
c0015f79:	e8 e8 cf 00 00       	call   c0022f66 <PIT::PIT()>
c0015f7e:	59                   	pop    ecx
c0015f7f:	5f                   	pop    edi
c0015f80:	53                   	push   ebx
c0015f81:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015f87:	e8 d6 d6 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0015f8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f8e:	6a 00                	push   0x0
c0015f90:	6a 00                	push   0x0
c0015f92:	56                   	push   esi
c0015f93:	53                   	push   ebx
c0015f94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f97:	83 c4 14             	add    esp,0x14
c0015f9a:	68 60 01 00 00       	push   0x160
c0015f9f:	e8 c4 c1 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015fa4:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fa7:	89 c7                	mov    edi,eax
c0015fa9:	e8 68 ce 00 00       	call   c0022e16 <APICTimer::APICTimer()>
c0015fae:	6a 00                	push   0x0
c0015fb0:	6a 00                	push   0x0
c0015fb2:	56                   	push   esi
c0015fb3:	57                   	push   edi
c0015fb4:	e8 65 cd 00 00       	call   c0022d1e <APICTimer::open(int, int, void*)>
c0015fb9:	83 c4 20             	add    esp,0x20
c0015fbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fbe:	6a 00                	push   0x0
c0015fc0:	6a 00                	push   0x0
c0015fc2:	6a 00                	push   0x0
c0015fc4:	53                   	push   ebx
c0015fc5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fc8:	e8 b7 18 00 00       	call   c0017884 <thisCPU()>
c0015fcd:	5a                   	pop    edx
c0015fce:	59                   	pop    ecx
c0015fcf:	57                   	push   edi
c0015fd0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fd6:	e8 87 d6 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0015fdb:	83 c4 10             	add    esp,0x10
c0015fde:	eb 33                	jmp    c0016013 <setupTimer(int)+0x11b>
c0015fe0:	83 ec 0c             	sub    esp,0xc
c0015fe3:	68 5c 01 00 00       	push   0x15c
c0015fe8:	e8 7b c1 ff ff       	call   c0012168 <operator new(unsigned long)>
c0015fed:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ff0:	89 c3                	mov    ebx,eax
c0015ff2:	e8 6f cf 00 00       	call   c0022f66 <PIT::PIT()>
c0015ff7:	58                   	pop    eax
c0015ff8:	5a                   	pop    edx
c0015ff9:	53                   	push   ebx
c0015ffa:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0016000:	e8 5d d6 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0016005:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016007:	6a 00                	push   0x0
c0016009:	6a 00                	push   0x0
c001600b:	56                   	push   esi
c001600c:	53                   	push   ebx
c001600d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016010:	83 c4 20             	add    esp,0x20
c0016013:	89 d8                	mov    eax,ebx
c0016015:	5b                   	pop    ebx
c0016016:	5e                   	pop    esi
c0016017:	5f                   	pop    edi
c0016018:	c3                   	ret    
c0016019:	90                   	nop

c001601a <VCache::VCache(PhysicalDisk*)>:
c001601a:	53                   	push   ebx
c001601b:	83 ec 08             	sub    esp,0x8
c001601e:	ba 24 7a 02 c0       	mov    edx,0xc0027a24
c0016023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016027:	89 10                	mov    DWORD PTR [eax],edx
c0016029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001602d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016038:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001603f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016043:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001604a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016055:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001605c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016067:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016072:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016076:	83 ec 0c             	sub    esp,0xc
c0016079:	6a 10                	push   0x10
c001607b:	e8 e8 c0 ff ff       	call   c0012168 <operator new(unsigned long)>
c0016080:	83 c4 10             	add    esp,0x10
c0016083:	89 c3                	mov    ebx,eax
c0016085:	83 ec 0c             	sub    esp,0xc
c0016088:	53                   	push   ebx
c0016089:	e8 e2 68 00 00       	call   c001c970 <Mutex::Mutex()>
c001608e:	83 c4 10             	add    esp,0x10
c0016091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016095:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00160a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a7:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00160ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160b2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00160b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160bc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00160bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160c3:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00160c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160d3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160d6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160dd:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160eb:	c1 e0 06             	shl    eax,0x6
c00160ee:	83 ec 0c             	sub    esp,0xc
c00160f1:	50                   	push   eax
c00160f2:	e8 6f 90 ff ff       	call   c000f166 <malloc>
c00160f7:	83 c4 10             	add    esp,0x10
c00160fa:	89 c2                	mov    edx,eax
c00160fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016100:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016103:	90                   	nop
c0016104:	83 c4 08             	add    esp,0x8
c0016107:	5b                   	pop    ebx
c0016108:	c3                   	ret    
c0016109:	90                   	nop

c001610a <VCache::writeWriteBuffer()>:
c001610a:	53                   	push   ebx
c001610b:	83 ec 14             	sub    esp,0x14
c001610e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016112:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016115:	8b 10                	mov    edx,DWORD PTR [eax]
c0016117:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001611a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001611d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016120:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016123:	50                   	push   eax
c0016124:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016127:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001612e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016135:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016139:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016140:	83 c4 28             	add    esp,0x28
c0016143:	5b                   	pop    ebx
c0016144:	c3                   	ret    
c0016145:	90                   	nop

c0016146 <VCache::~VCache()>:
c0016146:	83 ec 0c             	sub    esp,0xc
c0016149:	ba 24 7a 02 c0       	mov    edx,0xc0027a24
c001614e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016152:	89 10                	mov    DWORD PTR [eax],edx
c0016154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016158:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001615b:	84 c0                	test   al,al
c001615d:	74 0f                	je     c001616e <VCache::~VCache()+0x28>
c001615f:	83 ec 0c             	sub    esp,0xc
c0016162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016166:	e8 9f ff ff ff       	call   c001610a <VCache::writeWriteBuffer()>
c001616b:	83 c4 10             	add    esp,0x10
c001616e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016172:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016175:	83 ec 0c             	sub    esp,0xc
c0016178:	50                   	push   eax
c0016179:	e8 f8 8f ff ff       	call   c000f176 <free>
c001617e:	83 c4 10             	add    esp,0x10
c0016181:	90                   	nop
c0016182:	83 c4 0c             	add    esp,0xc
c0016185:	c3                   	ret    

c0016186 <VCache::~VCache()>:
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	83 ec 0c             	sub    esp,0xc
c001618c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016190:	e8 b1 ff ff ff       	call   c0016146 <VCache::~VCache()>
c0016195:	83 c4 10             	add    esp,0x10
c0016198:	83 ec 08             	sub    esp,0x8
c001619b:	6a 30                	push   0x30
c001619d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161a1:	e8 d1 bf ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	83 c4 0c             	add    esp,0xc
c00161ac:	c3                   	ret    
c00161ad:	90                   	nop

c00161ae <VCache::write(unsigned long long, int, void*)>:
c00161ae:	55                   	push   ebp
c00161af:	57                   	push   edi
c00161b0:	56                   	push   esi
c00161b1:	53                   	push   ebx
c00161b2:	83 ec 28             	sub    esp,0x28
c00161b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00161b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00161bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00161c1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00161c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161c8:	e8 05 6c 00 00       	call   c001cdd2 <Semaphore::acquire()>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161d4:	74 66                	je     c001623c <VCache::write(unsigned long long, int, void*)+0x8e>
c00161d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161d9:	99                   	cdq    
c00161da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161de:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161e1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161e4:	89 c1                	mov    ecx,eax
c00161e6:	89 d0                	mov    eax,edx
c00161e8:	31 f1                	xor    ecx,esi
c00161ea:	31 f8                	xor    eax,edi
c00161ec:	89 ca                	mov    edx,ecx
c00161ee:	09 c2                	or     edx,eax
c00161f0:	75 3e                	jne    c0016230 <VCache::write(unsigned long long, int, void*)+0x82>
c00161f2:	83 fd 01             	cmp    ebp,0x1
c00161f5:	75 39                	jne    c0016230 <VCache::write(unsigned long long, int, void*)+0x82>
c00161f7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016200:	51                   	push   ecx
c0016201:	50                   	push   eax
c0016202:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016206:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001620a:	0f af c8             	imul   ecx,eax
c001620d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016210:	51                   	push   ecx
c0016211:	e8 a0 a4 fe ff       	call   c00006b6 <memcpy>
c0016216:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016219:	83 c4 10             	add    esp,0x10
c001621c:	40                   	inc    eax
c001621d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016220:	83 f8 40             	cmp    eax,0x40
c0016223:	75 57                	jne    c001627c <VCache::write(unsigned long long, int, void*)+0xce>
c0016225:	83 ec 0c             	sub    esp,0xc
c0016228:	53                   	push   ebx
c0016229:	e8 dc fe ff ff       	call   c001610a <VCache::writeWriteBuffer()>
c001622e:	eb 34                	jmp    c0016264 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016230:	83 ec 0c             	sub    esp,0xc
c0016233:	53                   	push   ebx
c0016234:	e8 d1 fe ff ff       	call   c001610a <VCache::writeWriteBuffer()>
c0016239:	83 c4 10             	add    esp,0x10
c001623c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001623f:	83 fd 3f             	cmp    ebp,0x3f
c0016242:	7f 25                	jg     c0016269 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016244:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016247:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001624a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001624d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016251:	52                   	push   edx
c0016252:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016258:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001625c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001625f:	e8 52 a4 fe ff       	call   c00006b6 <memcpy>
c0016264:	83 c4 10             	add    esp,0x10
c0016267:	eb 13                	jmp    c001627c <VCache::write(unsigned long long, int, void*)+0xce>
c0016269:	83 ec 0c             	sub    esp,0xc
c001626c:	8b 10                	mov    edx,DWORD PTR [eax]
c001626e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016272:	55                   	push   ebp
c0016273:	57                   	push   edi
c0016274:	56                   	push   esi
c0016275:	50                   	push   eax
c0016276:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016279:	83 c4 20             	add    esp,0x20
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016282:	e8 d3 70 00 00       	call   c001d35a <Semaphore::release()>
c0016287:	83 c4 2c             	add    esp,0x2c
c001628a:	31 c0                	xor    eax,eax
c001628c:	5b                   	pop    ebx
c001628d:	5e                   	pop    esi
c001628e:	5f                   	pop    edi
c001628f:	5d                   	pop    ebp
c0016290:	c3                   	ret    
c0016291:	90                   	nop

c0016292 <VCache::read(unsigned long long, int, void*)>:
c0016292:	57                   	push   edi
c0016293:	56                   	push   esi
c0016294:	53                   	push   ebx
c0016295:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016299:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001629d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00162a1:	83 ec 0c             	sub    esp,0xc
c00162a4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162a7:	e8 26 6b 00 00       	call   c001cdd2 <Semaphore::acquire()>
c00162ac:	83 c4 10             	add    esp,0x10
c00162af:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00162b3:	74 0c                	je     c00162c1 <VCache::read(unsigned long long, int, void*)+0x2f>
c00162b5:	83 ec 0c             	sub    esp,0xc
c00162b8:	53                   	push   ebx
c00162b9:	e8 4c fe ff ff       	call   c001610a <VCache::writeWriteBuffer()>
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00162c4:	83 ec 0c             	sub    esp,0xc
c00162c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00162c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162d1:	57                   	push   edi
c00162d2:	56                   	push   esi
c00162d3:	50                   	push   eax
c00162d4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162d7:	83 c4 14             	add    esp,0x14
c00162da:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162dd:	e8 78 70 00 00       	call   c001d35a <Semaphore::release()>
c00162e2:	83 c4 10             	add    esp,0x10
c00162e5:	31 c0                	xor    eax,eax
c00162e7:	5b                   	pop    ebx
c00162e8:	5e                   	pop    esi
c00162e9:	5f                   	pop    edi
c00162ea:	c3                   	ret    
c00162eb:	90                   	nop

c00162ec <Video::putrect(int, int, int, int, unsigned int)>:
c00162ec:	55                   	push   ebp
c00162ed:	57                   	push   edi
c00162ee:	56                   	push   esi
c00162ef:	53                   	push   ebx
c00162f0:	83 ec 1c             	sub    esp,0x1c
c00162f3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00162fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162ff:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016303:	01 e8                	add    eax,ebp
c0016305:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001630d:	01 df                	add    edi,ebx
c001630f:	39 fb                	cmp    ebx,edi
c0016311:	7d 1b                	jge    c001632e <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016313:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016317:	7d 12                	jge    c001632b <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0016319:	8b 16                	mov    edx,DWORD PTR [esi]
c001631b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001631f:	53                   	push   ebx
c0016320:	55                   	push   ebp
c0016321:	45                   	inc    ebp
c0016322:	56                   	push   esi
c0016323:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	eb e8                	jmp    c0016313 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001632b:	43                   	inc    ebx
c001632c:	eb e1                	jmp    c001630f <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001632e:	83 c4 1c             	add    esp,0x1c
c0016331:	5b                   	pop    ebx
c0016332:	5e                   	pop    esi
c0016333:	5f                   	pop    edi
c0016334:	5d                   	pop    ebp
c0016335:	c3                   	ret    

c0016336 <Video::blit(unsigned int*, int, int, int, int)>:
c0016336:	55                   	push   ebp
c0016337:	57                   	push   edi
c0016338:	56                   	push   esi
c0016339:	53                   	push   ebx
c001633a:	83 ec 1c             	sub    esp,0x1c
c001633d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016341:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016345:	85 c0                	test   eax,eax
c0016347:	79 02                	jns    c001634b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016349:	31 c0                	xor    eax,eax
c001634b:	c1 e0 02             	shl    eax,0x2
c001634e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016352:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016356:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001635a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001635e:	39 d8                	cmp    eax,ebx
c0016360:	7e 49                	jle    c00163ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016362:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016368:	7c 41                	jl     c00163ab <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001636a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001636e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016372:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016376:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001637a:	39 f9                	cmp    ecx,edi
c001637c:	7e 22                	jle    c00163a0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001637e:	83 c5 04             	add    ebp,0x4
c0016381:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016387:	7c 14                	jl     c001639d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016389:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001638b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001638e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016392:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016396:	56                   	push   esi
c0016397:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001639a:	83 c4 10             	add    esp,0x10
c001639d:	47                   	inc    edi
c001639e:	eb d2                	jmp    c0016372 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00163a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163a4:	43                   	inc    ebx
c00163a5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00163a9:	eb ab                	jmp    c0016356 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00163ab:	83 c4 1c             	add    esp,0x1c
c00163ae:	5b                   	pop    ebx
c00163af:	5e                   	pop    esi
c00163b0:	5f                   	pop    edi
c00163b1:	5d                   	pop    ebp
c00163b2:	c3                   	ret    
c00163b3:	90                   	nop

c00163b4 <Video::clearScreen(unsigned int)>:
c00163b4:	57                   	push   edi
c00163b5:	56                   	push   esi
c00163b6:	53                   	push   ebx
c00163b7:	31 db                	xor    ebx,ebx
c00163b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163bd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00163c3:	7e 1f                	jle    c00163e4 <Video::clearScreen(unsigned int)+0x30>
c00163c5:	31 ff                	xor    edi,edi
c00163c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163cd:	7e 12                	jle    c00163e1 <Video::clearScreen(unsigned int)+0x2d>
c00163cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00163d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163d5:	53                   	push   ebx
c00163d6:	57                   	push   edi
c00163d7:	47                   	inc    edi
c00163d8:	56                   	push   esi
c00163d9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163dc:	83 c4 10             	add    esp,0x10
c00163df:	eb e6                	jmp    c00163c7 <Video::clearScreen(unsigned int)+0x13>
c00163e1:	43                   	inc    ebx
c00163e2:	eb d9                	jmp    c00163bd <Video::clearScreen(unsigned int)+0x9>
c00163e4:	5b                   	pop    ebx
c00163e5:	5e                   	pop    esi
c00163e6:	5f                   	pop    edi
c00163e7:	c3                   	ret    

c00163e8 <Video::putpixel(int, int, unsigned int)>:
c00163e8:	c7 44 24 04 2c 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a2c
c00163f0:	e9 62 be ff ff       	jmp    c0012257 <Dbg::kprintf(char const*, ...)>
c00163f5:	90                   	nop

c00163f6 <Video::Video(char const*)>:
c00163f6:	83 ec 0c             	sub    esp,0xc
c00163f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fd:	83 ec 08             	sub    esp,0x8
c0016400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016404:	50                   	push   eax
c0016405:	e8 48 d4 ff ff       	call   c0013852 <Device::Device(char const*)>
c001640a:	83 c4 10             	add    esp,0x10
c001640d:	ba 44 7a 02 c0       	mov    edx,0xc0027a44
c0016412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016416:	89 10                	mov    DWORD PTR [eax],edx
c0016418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016426:	90                   	nop
c0016427:	83 c4 0c             	add    esp,0xc
c001642a:	c3                   	ret    
c001642b:	90                   	nop

c001642c <Video::~Video()>:
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	ba 44 7a 02 c0       	mov    edx,0xc0027a44
c0016434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016438:	89 10                	mov    DWORD PTR [eax],edx
c001643a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643e:	83 ec 0c             	sub    esp,0xc
c0016441:	50                   	push   eax
c0016442:	e8 bd d0 ff ff       	call   c0013504 <Device::~Device()>
c0016447:	83 c4 10             	add    esp,0x10
c001644a:	90                   	nop
c001644b:	83 c4 0c             	add    esp,0xc
c001644e:	c3                   	ret    
c001644f:	90                   	nop

c0016450 <Video::~Video()>:
c0016450:	83 ec 0c             	sub    esp,0xc
c0016453:	83 ec 0c             	sub    esp,0xc
c0016456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001645a:	e8 cd ff ff ff       	call   c001642c <Video::~Video()>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	83 ec 08             	sub    esp,0x8
c0016465:	68 64 01 00 00       	push   0x164
c001646a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001646e:	e8 04 bd ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	83 c4 0c             	add    esp,0xc
c0016479:	c3                   	ret    

c001647a <Video::isMonochrome()>:
c001647a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001647e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016484:	c3                   	ret    
c0016485:	90                   	nop

c0016486 <Video::getWidth()>:
c0016486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001648a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016490:	c3                   	ret    
c0016491:	90                   	nop

c0016492 <Video::getHeight()>:
c0016492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016496:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001649c:	c3                   	ret    
c001649d:	90                   	nop

c001649e <Video::drawCursor(int, int, unsigned char*, int)>:
c001649e:	55                   	push   ebp
c001649f:	57                   	push   edi
c00164a0:	56                   	push   esi
c00164a1:	53                   	push   ebx
c00164a2:	83 ec 2c             	sub    esp,0x2c
c00164a5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00164a9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00164ad:	83 f8 01             	cmp    eax,0x1
c00164b0:	19 c9                	sbb    ecx,ecx
c00164b2:	31 db                	xor    ebx,ebx
c00164b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00164b8:	89 cd                	mov    ebp,ecx
c00164ba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00164c2:	f7 d5                	not    ebp
c00164c4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164ca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164ce:	01 d8                	add    eax,ebx
c00164d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164d4:	56                   	push   esi
c00164d5:	e8 b8 ff ff ff       	call   c0016492 <Video::getHeight()>
c00164da:	59                   	pop    ecx
c00164db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164df:	7e 70                	jle    c0016551 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164e5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164e9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164f4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00164fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164ff:	89 f8                	mov    eax,edi
c0016501:	83 c0 20             	add    eax,0x20
c0016504:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016508:	56                   	push   esi
c0016509:	e8 78 ff ff ff       	call   c0016486 <Video::getWidth()>
c001650e:	5a                   	pop    edx
c001650f:	39 c7                	cmp    edi,eax
c0016511:	7d 34                	jge    c0016547 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016513:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016518:	74 05                	je     c001651f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001651a:	8b 06                	mov    eax,DWORD PTR [esi]
c001651c:	55                   	push   ebp
c001651d:	eb 0d                	jmp    c001652c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001651f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016524:	74 12                	je     c0016538 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016526:	8b 06                	mov    eax,DWORD PTR [esi]
c0016528:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001652c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016530:	57                   	push   edi
c0016531:	56                   	push   esi
c0016532:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016535:	83 c4 10             	add    esp,0x10
c0016538:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001653c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016540:	47                   	inc    edi
c0016541:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016545:	75 c1                	jne    c0016508 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016547:	43                   	inc    ebx
c0016548:	83 fb 20             	cmp    ebx,0x20
c001654b:	0f 85 79 ff ff ff    	jne    c00164ca <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016551:	83 c4 2c             	add    esp,0x2c
c0016554:	5b                   	pop    ebx
c0016555:	5e                   	pop    esi
c0016556:	5f                   	pop    edi
c0016557:	5d                   	pop    ebp
c0016558:	c3                   	ret    
c0016559:	90                   	nop

c001655a <ACPI::close(int, int, void*)>:
c001655a:	83 ec 1c             	sub    esp,0x1c
c001655d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016565:	74 0a                	je     c0016571 <ACPI::close(int, int, void*)+0x17>
c0016567:	b8 00 00 00 00       	mov    eax,0x0
c001656c:	e9 9a 00 00 00       	jmp    c001660b <ACPI::close(int, int, void*)+0xb1>
c0016571:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016576:	75 37                	jne    c00165af <ACPI::close(int, int, void*)+0x55>
c0016578:	83 ec 0c             	sub    esp,0xc
c001657b:	68 7c 7a 02 c0       	push   0xc0027a7c
c0016580:	e8 d2 bc ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0016585:	83 c4 10             	add    esp,0x10
c0016588:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001658d:	85 c0                	test   eax,eax
c001658f:	74 07                	je     c0016598 <ACPI::close(int, int, void*)+0x3e>
c0016591:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016596:	ff d0                	call   eax
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	68 30 7b 02 c0       	push   0xc0027b30
c00165a0:	e8 5f 33 00 00       	call   c0019904 <Krnl::panic(char const*)>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165ad:	eb 5c                	jmp    c001660b <ACPI::close(int, int, void*)+0xb1>
c00165af:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00165b4:	75 50                	jne    c0016606 <ACPI::close(int, int, void*)+0xac>
c00165b6:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c00165bb:	85 c0                	test   eax,eax
c00165bd:	74 07                	je     c00165c6 <ACPI::close(int, int, void*)+0x6c>
c00165bf:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c00165c4:	ff d0                	call   eax
c00165c6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165cb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165d0:	83 e0 02             	and    eax,0x2
c00165d3:	74 1c                	je     c00165f1 <ACPI::close(int, int, void*)+0x97>
c00165d5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165e0:	89 c2                	mov    edx,eax
c00165e2:	ec                   	in     al,dx
c00165e3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165e7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165ef:	eb da                	jmp    c00165cb <ACPI::close(int, int, void*)+0x71>
c00165f1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165f8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00165fd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016601:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016605:	ee                   	out    dx,al
c0016606:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001660b:	83 c4 1c             	add    esp,0x1c
c001660e:	c3                   	ret    

c001660f <findRSDP()>:
c001660f:	83 ec 1c             	sub    esp,0x1c
c0016612:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016617:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001661d:	83 e0 04             	and    eax,0x4
c0016620:	84 c0                	test   al,al
c0016622:	75 07                	jne    c001662b <findRSDP()+0x1c>
c0016624:	b8 00 00 00 00       	mov    eax,0x0
c0016629:	eb 6a                	jmp    c0016695 <findRSDP()+0x86>
c001662b:	a1 50 a4 02 c0       	mov    eax,ds:0xc002a450
c0016630:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016635:	7f 1b                	jg     c0016652 <findRSDP()+0x43>
c0016637:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001663c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016642:	83 e2 fb             	and    edx,0xfffffffb
c0016645:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001664b:	b8 00 00 00 00       	mov    eax,0x0
c0016650:	eb 43                	jmp    c0016695 <findRSDP()+0x86>
c0016652:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001665a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016662:	77 2c                	ja     c0016690 <findRSDP()+0x81>
c0016664:	83 ec 04             	sub    esp,0x4
c0016667:	6a 08                	push   0x8
c0016669:	68 89 7a 02 c0       	push   0xc0027a89
c001666e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016672:	e8 dc 9f fe ff       	call   c0000653 <memcmp>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	85 c0                	test   eax,eax
c001667c:	0f 94 c0             	sete   al
c001667f:	84 c0                	test   al,al
c0016681:	74 06                	je     c0016689 <findRSDP()+0x7a>
c0016683:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016687:	eb 0c                	jmp    c0016695 <findRSDP()+0x86>
c0016689:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001668e:	eb ca                	jmp    c001665a <findRSDP()+0x4b>
c0016690:	b8 00 00 00 00       	mov    eax,0x0
c0016695:	83 c4 1c             	add    esp,0x1c
c0016698:	c3                   	ret    

c0016699 <loadACPITables(unsigned char*)>:
c0016699:	56                   	push   esi
c001669a:	53                   	push   ebx
c001669b:	83 ec 44             	sub    esp,0x44
c001669e:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00166a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00166a9:	83 e0 04             	and    eax,0x4
c00166ac:	84 c0                	test   al,al
c00166ae:	0f 84 05 02 00 00    	je     c00168b9 <loadACPITables(unsigned char*)+0x220>
c00166b4:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c00166b9:	84 c0                	test   al,al
c00166bb:	74 75                	je     c0016732 <loadACPITables(unsigned char*)+0x99>
c00166bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166c1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166cc:	83 e8 24             	sub    eax,0x24
c00166cf:	c1 e8 03             	shr    eax,0x3
c00166d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166d6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166e2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166e6:	0f 8d b2 00 00 00    	jge    c001679e <loadACPITables(unsigned char*)+0x105>
c00166ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166f0:	83 c0 24             	add    eax,0x24
c00166f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166fb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00166ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016703:	c1 e0 03             	shl    eax,0x3
c0016706:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001670a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001670e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016711:	8b 00                	mov    eax,DWORD PTR [eax]
c0016713:	89 c1                	mov    ecx,eax
c0016715:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c001671a:	8d 50 01             	lea    edx,[eax+0x1]
c001671d:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c0016723:	89 ca                	mov    edx,ecx
c0016725:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c001672c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016730:	eb ac                	jmp    c00166de <loadACPITables(unsigned char*)+0x45>
c0016732:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016736:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001673a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001673e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016741:	83 e8 24             	sub    eax,0x24
c0016744:	c1 e8 02             	shr    eax,0x2
c0016747:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001674b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016753:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016757:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001675b:	7d 41                	jge    c001679e <loadACPITables(unsigned char*)+0x105>
c001675d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016761:	83 c0 24             	add    eax,0x24
c0016764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016768:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001676c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016770:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016774:	c1 e0 02             	shl    eax,0x2
c0016777:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001677b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001677f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016781:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016786:	8d 50 01             	lea    edx,[eax+0x1]
c0016789:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c001678f:	89 ca                	mov    edx,ecx
c0016791:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016798:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001679c:	eb b5                	jmp    c0016753 <loadACPITables(unsigned char*)+0xba>
c001679e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00167a6:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00167ab:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00167af:	0f 8d 05 01 00 00    	jge    c00168ba <loadACPITables(unsigned char*)+0x221>
c00167b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167b9:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c00167c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d0:	25 ff 0f 00 00       	and    eax,0xfff
c00167d5:	89 c6                	mov    esi,eax
c00167d7:	e8 39 ac ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c00167dc:	89 c3                	mov    ebx,eax
c00167de:	83 ec 0c             	sub    esp,0xc
c00167e1:	6a 01                	push   0x1
c00167e3:	e8 9d aa ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c00167e8:	83 c4 10             	add    esp,0x10
c00167eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167ef:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167f5:	83 ec 0c             	sub    esp,0xc
c00167f8:	6a 01                	push   0x1
c00167fa:	6a 01                	push   0x1
c00167fc:	50                   	push   eax
c00167fd:	52                   	push   edx
c00167fe:	53                   	push   ebx
c00167ff:	e8 40 b4 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016804:	83 c4 20             	add    esp,0x20
c0016807:	09 f0                	or     eax,esi
c0016809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001680d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016811:	c1 e0 03             	shl    eax,0x3
c0016814:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c0016819:	83 ec 04             	sub    esp,0x4
c001681c:	6a 04                	push   0x4
c001681e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016822:	50                   	push   eax
c0016823:	e8 8e 9e fe ff       	call   c00006b6 <memcpy>
c0016828:	83 c4 10             	add    esp,0x10
c001682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016832:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001683a:	05 00 10 00 00       	add    eax,0x1000
c001683f:	c1 e8 0c             	shr    eax,0xc
c0016842:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684a:	89 04 24             	mov    DWORD PTR [esp],eax
c001684d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016851:	25 ff 0f 00 00       	and    eax,0xfff
c0016856:	89 c6                	mov    esi,eax
c0016858:	e8 b8 ab ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c001685d:	89 c3                	mov    ebx,eax
c001685f:	83 ec 0c             	sub    esp,0xc
c0016862:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016866:	e8 1a aa ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c001686b:	83 c4 10             	add    esp,0x10
c001686e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016872:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	6a 01                	push   0x1
c001687d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016881:	50                   	push   eax
c0016882:	52                   	push   edx
c0016883:	53                   	push   ebx
c0016884:	e8 bb b3 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016889:	83 c4 20             	add    esp,0x20
c001688c:	09 f0                	or     eax,esi
c001688e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016892:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016895:	83 ec 0c             	sub    esp,0xc
c0016898:	50                   	push   eax
c0016899:	e8 41 ad ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00168a9:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c00168b0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00168b4:	e9 ed fe ff ff       	jmp    c00167a6 <loadACPITables(unsigned char*)+0x10d>
c00168b9:	90                   	nop
c00168ba:	83 c4 44             	add    esp,0x44
c00168bd:	5b                   	pop    ebx
c00168be:	5e                   	pop    esi
c00168bf:	c3                   	ret    

c00168c0 <findRSDT(unsigned char*)>:
c00168c0:	56                   	push   esi
c00168c1:	53                   	push   ebx
c00168c2:	83 ec 44             	sub    esp,0x44
c00168c5:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00168ca:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168d0:	83 e0 04             	and    eax,0x4
c00168d3:	84 c0                	test   al,al
c00168d5:	75 0a                	jne    c00168e1 <findRSDT(unsigned char*)+0x21>
c00168d7:	b8 00 00 00 00       	mov    eax,0x0
c00168dc:	e9 f7 00 00 00       	jmp    c00169d8 <findRSDT(unsigned char*)+0x118>
c00168e1:	83 ec 04             	sub    esp,0x4
c00168e4:	6a 24                	push   0x24
c00168e6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168ee:	50                   	push   eax
c00168ef:	e8 c2 9d fe ff       	call   c00006b6 <memcpy>
c00168f4:	83 c4 10             	add    esp,0x10
c00168f7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168fb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00168ff:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016907:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001690b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001690f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016917:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001691b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001691f:	25 ff 0f 00 00       	and    eax,0xfff
c0016924:	89 c6                	mov    esi,eax
c0016926:	e8 ea aa ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c001692b:	89 c3                	mov    ebx,eax
c001692d:	83 ec 0c             	sub    esp,0xc
c0016930:	6a 02                	push   0x2
c0016932:	e8 4e a9 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001693e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	6a 01                	push   0x1
c0016949:	6a 02                	push   0x2
c001694b:	50                   	push   eax
c001694c:	52                   	push   edx
c001694d:	53                   	push   ebx
c001694e:	e8 f1 b2 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016953:	83 c4 20             	add    esp,0x20
c0016956:	09 f0                	or     eax,esi
c0016958:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001695c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016960:	25 ff 0f 00 00       	and    eax,0xfff
c0016965:	89 c6                	mov    esi,eax
c0016967:	e8 a9 aa ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c001696c:	89 c3                	mov    ebx,eax
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	6a 02                	push   0x2
c0016973:	e8 0d a9 ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c0016978:	83 c4 10             	add    esp,0x10
c001697b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001697f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016985:	83 ec 0c             	sub    esp,0xc
c0016988:	6a 01                	push   0x1
c001698a:	6a 02                	push   0x2
c001698c:	50                   	push   eax
c001698d:	52                   	push   edx
c001698e:	53                   	push   ebx
c001698f:	e8 b0 b2 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016994:	83 c4 20             	add    esp,0x20
c0016997:	09 f0                	or     eax,esi
c0016999:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001699d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00169a2:	75 11                	jne    c00169b5 <findRSDT(unsigned char*)+0xf5>
c00169a4:	c6 05 a0 ac 02 c0 00 	mov    BYTE PTR ds:0xc002aca0,0x0
c00169ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169b3:	eb 1f                	jmp    c00169d4 <findRSDT(unsigned char*)+0x114>
c00169b5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00169ba:	75 11                	jne    c00169cd <findRSDT(unsigned char*)+0x10d>
c00169bc:	c6 05 a0 ac 02 c0 01 	mov    BYTE PTR ds:0xc002aca0,0x1
c00169c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169c7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169cb:	eb 07                	jmp    c00169d4 <findRSDT(unsigned char*)+0x114>
c00169cd:	b8 00 00 00 00       	mov    eax,0x0
c00169d2:	eb 04                	jmp    c00169d8 <findRSDT(unsigned char*)+0x118>
c00169d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169d8:	83 c4 44             	add    esp,0x44
c00169db:	5b                   	pop    ebx
c00169dc:	5e                   	pop    esi
c00169dd:	c3                   	ret    

c00169de <findDataTable(unsigned char*, char*)>:
c00169de:	83 ec 1c             	sub    esp,0x1c
c00169e1:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00169e6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169ec:	83 e0 04             	and    eax,0x4
c00169ef:	84 c0                	test   al,al
c00169f1:	75 07                	jne    c00169fa <findDataTable(unsigned char*, char*)+0x1c>
c00169f3:	b8 00 00 00 00       	mov    eax,0x0
c00169f8:	eb 7c                	jmp    c0016a76 <findDataTable(unsigned char*, char*)+0x98>
c00169fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a02:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016a07:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016a0b:	7d 3a                	jge    c0016a47 <findDataTable(unsigned char*, char*)+0x69>
c0016a0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a11:	c1 e0 03             	shl    eax,0x3
c0016a14:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c0016a19:	83 ec 04             	sub    esp,0x4
c0016a1c:	6a 04                	push   0x4
c0016a1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a22:	50                   	push   eax
c0016a23:	e8 2b 9c fe ff       	call   c0000653 <memcmp>
c0016a28:	83 c4 10             	add    esp,0x10
c0016a2b:	85 c0                	test   eax,eax
c0016a2d:	0f 94 c0             	sete   al
c0016a30:	84 c0                	test   al,al
c0016a32:	74 0d                	je     c0016a41 <findDataTable(unsigned char*, char*)+0x63>
c0016a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a38:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c0016a3f:	eb 35                	jmp    c0016a76 <findDataTable(unsigned char*, char*)+0x98>
c0016a41:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a45:	eb bb                	jmp    c0016a02 <findDataTable(unsigned char*, char*)+0x24>
c0016a47:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c0016a4c:	84 c0                	test   al,al
c0016a4e:	74 07                	je     c0016a57 <findDataTable(unsigned char*, char*)+0x79>
c0016a50:	b8 58 00 00 00       	mov    eax,0x58
c0016a55:	eb 05                	jmp    c0016a5c <findDataTable(unsigned char*, char*)+0x7e>
c0016a57:	b8 52 00 00 00       	mov    eax,0x52
c0016a5c:	83 ec 04             	sub    esp,0x4
c0016a5f:	50                   	push   eax
c0016a60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a64:	68 54 7b 02 c0       	push   0xc0027b54
c0016a69:	e8 e9 b7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	b8 00 00 00 00       	mov    eax,0x0
c0016a76:	83 c4 1c             	add    esp,0x1c
c0016a79:	c3                   	ret    

c0016a7a <scanMADT()>:
c0016a7a:	83 ec 2c             	sub    esp,0x2c
c0016a7d:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a82:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a88:	83 e0 04             	and    eax,0x4
c0016a8b:	84 c0                	test   al,al
c0016a8d:	0f 84 73 03 00 00    	je     c0016e06 <scanMADT()+0x38c>
c0016a93:	e8 77 fb ff ff       	call   c001660f <findRSDP()>
c0016a98:	a3 ac ac 02 c0       	mov    ds:0xc002acac,eax
c0016a9d:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016aa2:	85 c0                	test   eax,eax
c0016aa4:	75 19                	jne    c0016abf <scanMADT()+0x45>
c0016aa6:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016aab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ab1:	83 e2 fb             	and    edx,0xfffffffb
c0016ab4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016aba:	e9 4b 03 00 00       	jmp    c0016e0a <scanMADT()+0x390>
c0016abf:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	50                   	push   eax
c0016ac8:	e8 f3 fd ff ff       	call   c00168c0 <findRSDT(unsigned char*)>
c0016acd:	83 c4 10             	add    esp,0x10
c0016ad0:	a3 a8 ac 02 c0       	mov    ds:0xc002aca8,eax
c0016ad5:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ada:	85 c0                	test   eax,eax
c0016adc:	75 19                	jne    c0016af7 <scanMADT()+0x7d>
c0016ade:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016ae3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ae9:	83 e2 fb             	and    edx,0xfffffffb
c0016aec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016af2:	e9 13 03 00 00       	jmp    c0016e0a <scanMADT()+0x390>
c0016af7:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016afc:	83 ec 0c             	sub    esp,0xc
c0016aff:	50                   	push   eax
c0016b00:	e8 94 fb ff ff       	call   c0016699 <loadACPITables(unsigned char*)>
c0016b05:	83 c4 10             	add    esp,0x10
c0016b08:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016b0d:	83 ec 08             	sub    esp,0x8
c0016b10:	68 92 7a 02 c0       	push   0xc0027a92
c0016b15:	50                   	push   eax
c0016b16:	e8 c3 fe ff ff       	call   c00169de <findDataTable(unsigned char*, char*)>
c0016b1b:	83 c4 10             	add    esp,0x10
c0016b1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b22:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016b27:	75 19                	jne    c0016b42 <scanMADT()+0xc8>
c0016b29:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016b2e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b34:	83 e2 fe             	and    edx,0xfffffffe
c0016b37:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b3d:	e9 c8 02 00 00       	jmp    c0016e0a <scanMADT()+0x390>
c0016b42:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b51:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b55:	0f 87 af 02 00 00    	ja     c0016e0a <scanMADT()+0x390>
c0016b5b:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b63:	0f 87 a1 02 00 00    	ja     c0016e0a <scanMADT()+0x390>
c0016b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b75:	8d 50 01             	lea    edx,[eax+0x1]
c0016b78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b80:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b84:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b8c:	8d 50 01             	lea    edx,[eax+0x1]
c0016b8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b97:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b9b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016b9f:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016ba4:	0f 86 5f 02 00 00    	jbe    c0016e09 <scanMADT()+0x38f>
c0016baa:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016baf:	75 57                	jne    c0016c08 <scanMADT()+0x18e>
c0016bb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bb5:	8d 50 01             	lea    edx,[eax+0x1]
c0016bb8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bbc:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016bc2:	0f b6 d2             	movzx  edx,dl
c0016bc5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bc9:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bcd:	88 82 20 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd51e0],al
c0016bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bd7:	8d 50 01             	lea    edx,[eax+0x1]
c0016bda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bde:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016be4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016be7:	88 0d e0 ad 02 c0    	mov    BYTE PTR ds:0xc002ade0,cl
c0016bed:	0f b6 d2             	movzx  edx,dl
c0016bf0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bf4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bf8:	88 82 00 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd5200],al
c0016bfe:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c03:	e9 ea 01 00 00       	jmp    c0016df2 <scanMADT()+0x378>
c0016c08:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016c0d:	0f 85 14 01 00 00    	jne    c0016d27 <scanMADT()+0x2ad>
c0016c13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c17:	8d 50 01             	lea    edx,[eax+0x1]
c0016c1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c1e:	8a 15 b0 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002acb0
c0016c24:	0f b6 d2             	movzx  edx,dl
c0016c27:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c2b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c2f:	88 82 c0 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd5340],al
c0016c35:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016c39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c41:	01 d0                	add    eax,edx
c0016c43:	83 c0 2c             	add    eax,0x2c
c0016c46:	8a 00                	mov    al,BYTE PTR [eax]
c0016c48:	0f b6 d0             	movzx  edx,al
c0016c4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c56:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c5a:	0f b6 c0             	movzx  eax,al
c0016c5d:	c1 e0 08             	shl    eax,0x8
c0016c60:	89 d1                	mov    ecx,edx
c0016c62:	09 c1                	or     ecx,eax
c0016c64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c68:	8d 50 02             	lea    edx,[eax+0x2]
c0016c6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c6f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c73:	0f b6 c0             	movzx  eax,al
c0016c76:	c1 e0 10             	shl    eax,0x10
c0016c79:	09 c1                	or     ecx,eax
c0016c7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c7f:	8d 50 03             	lea    edx,[eax+0x3]
c0016c82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c8a:	0f b6 c0             	movzx  eax,al
c0016c8d:	c1 e0 18             	shl    eax,0x18
c0016c90:	09 c1                	or     ecx,eax
c0016c92:	89 ca                	mov    edx,ecx
c0016c94:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016c99:	0f b6 c0             	movzx  eax,al
c0016c9c:	89 14 85 e0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5320],edx
c0016ca3:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016ca8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cb0:	01 d0                	add    eax,edx
c0016cb2:	83 c0 2c             	add    eax,0x2c
c0016cb5:	8a 00                	mov    al,BYTE PTR [eax]
c0016cb7:	0f b6 d0             	movzx  edx,al
c0016cba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cbe:	8d 48 01             	lea    ecx,[eax+0x1]
c0016cc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cc5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016cc9:	0f b6 c0             	movzx  eax,al
c0016ccc:	c1 e0 08             	shl    eax,0x8
c0016ccf:	89 d1                	mov    ecx,edx
c0016cd1:	09 c1                	or     ecx,eax
c0016cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cd7:	8d 50 02             	lea    edx,[eax+0x2]
c0016cda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cde:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016ce2:	0f b6 c0             	movzx  eax,al
c0016ce5:	c1 e0 10             	shl    eax,0x10
c0016ce8:	09 c1                	or     ecx,eax
c0016cea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cee:	8d 50 03             	lea    edx,[eax+0x3]
c0016cf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cf5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cf9:	0f b6 c0             	movzx  eax,al
c0016cfc:	c1 e0 18             	shl    eax,0x18
c0016cff:	09 c1                	or     ecx,eax
c0016d01:	89 ca                	mov    edx,ecx
c0016d03:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016d08:	0f b6 c0             	movzx  eax,al
c0016d0b:	89 14 85 60 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd52a0],edx
c0016d12:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016d17:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016d1c:	40                   	inc    eax
c0016d1d:	a2 b0 ac 02 c0       	mov    ds:0xc002acb0,al
c0016d22:	e9 cb 00 00 00       	jmp    c0016df2 <scanMADT()+0x378>
c0016d27:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016d2c:	0f 85 a6 00 00 00    	jne    c0016dd8 <scanMADT()+0x35e>
c0016d32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d36:	8d 50 01             	lea    edx,[eax+0x1]
c0016d39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d41:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d45:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d4d:	8d 50 01             	lea    edx,[eax+0x1]
c0016d50:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d58:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d5c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d68:	01 d0                	add    eax,edx
c0016d6a:	83 c0 2c             	add    eax,0x2c
c0016d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0016d6f:	0f b6 d0             	movzx  edx,al
c0016d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d76:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d7d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d81:	0f b6 c0             	movzx  eax,al
c0016d84:	c1 e0 08             	shl    eax,0x8
c0016d87:	89 d1                	mov    ecx,edx
c0016d89:	09 c1                	or     ecx,eax
c0016d8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d8f:	8d 50 02             	lea    edx,[eax+0x2]
c0016d92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d96:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d9a:	0f b6 c0             	movzx  eax,al
c0016d9d:	c1 e0 10             	shl    eax,0x10
c0016da0:	09 c1                	or     ecx,eax
c0016da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016da6:	8d 50 03             	lea    edx,[eax+0x3]
c0016da9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016dad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016db1:	0f b6 c0             	movzx  eax,al
c0016db4:	c1 e0 18             	shl    eax,0x18
c0016db7:	09 c8                	or     eax,ecx
c0016db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dbd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dc2:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016dc7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016dcc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016dd0:	88 90 e0 96 02 c0    	mov    BYTE PTR [eax-0x3ffd6920],dl
c0016dd6:	eb 1a                	jmp    c0016df2 <scanMADT()+0x378>
c0016dd8:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016ddd:	75 07                	jne    c0016de6 <scanMADT()+0x36c>
c0016ddf:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016de4:	eb 0c                	jmp    c0016df2 <scanMADT()+0x378>
c0016de6:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016deb:	75 05                	jne    c0016df2 <scanMADT()+0x378>
c0016ded:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016df2:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016df7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dfb:	01 d0                	add    eax,edx
c0016dfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e01:	e9 44 fd ff ff       	jmp    c0016b4a <scanMADT()+0xd0>
c0016e06:	90                   	nop
c0016e07:	eb 01                	jmp    c0016e0a <scanMADT()+0x390>
c0016e09:	90                   	nop
c0016e0a:	83 c4 2c             	add    esp,0x2c
c0016e0d:	c3                   	ret    

c0016e0e <ACPI::ACPI()>:
c0016e0e:	83 ec 0c             	sub    esp,0xc
c0016e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e15:	83 ec 08             	sub    esp,0x8
c0016e18:	68 97 7a 02 c0       	push   0xc0027a97
c0016e1d:	50                   	push   eax
c0016e1e:	e8 2f ca ff ff       	call   c0013852 <Device::Device(char const*)>
c0016e23:	83 c4 10             	add    esp,0x10
c0016e26:	ba 20 7c 02 c0       	mov    edx,0xc0027c20
c0016e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2f:	89 10                	mov    DWORD PTR [eax],edx
c0016e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e35:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e40:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e4e:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e5c:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016e63:	e8 12 fc ff ff       	call   c0016a7a <scanMADT()>
c0016e68:	90                   	nop
c0016e69:	83 c4 0c             	add    esp,0xc
c0016e6c:	c3                   	ret    
c0016e6d:	90                   	nop

c0016e6e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016e6e:	83 ec 2c             	sub    esp,0x2c
c0016e71:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e75:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e79:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e7d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e81:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016e86:	88 d0                	mov    al,dl
c0016e88:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e8c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016e91:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e9d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016ea3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016ea7:	0f 8d 97 00 00 00    	jge    c0016f44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016ead:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eb1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016eb5:	83 c2 2a             	add    edx,0x2a
c0016eb8:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016ebc:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016ec1:	75 78                	jne    c0016f3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ec3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ec7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ecb:	83 c2 2a             	add    edx,0x2a
c0016ece:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016ed2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016ed6:	75 63                	jne    c0016f3b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ed8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016edd:	74 3a                	je     c0016f19 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016edf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ee3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ee7:	83 c2 2a             	add    edx,0x2a
c0016eea:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016eee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ef2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ef5:	39 c2                	cmp    edx,eax
c0016ef7:	74 10                	je     c0016f09 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016ef9:	83 ec 0c             	sub    esp,0xc
c0016efc:	68 84 7b 02 c0       	push   0xc0027b84
c0016f01:	e8 fe 29 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0016f06:	83 c4 10             	add    esp,0x10
c0016f09:	83 ec 0c             	sub    esp,0xc
c0016f0c:	68 9c 7a 02 c0       	push   0xc0027a9c
c0016f11:	e8 ee 29 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0016f16:	83 c4 10             	add    esp,0x10
c0016f19:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016f1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f21:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f25:	83 c2 2a             	add    edx,0x2a
c0016f28:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f2c:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f2e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f31:	89 01                	mov    DWORD PTR [ecx],eax
c0016f33:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f3b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f3f:	e9 55 ff ff ff       	jmp    c0016e99 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016f44:	90                   	nop
c0016f45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f49:	83 c4 2c             	add    esp,0x2c
c0016f4c:	c2 04 00             	ret    0x4
c0016f4f:	90                   	nop

c0016f50 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016f50:	56                   	push   esi
c0016f51:	53                   	push   ebx
c0016f52:	83 ec 14             	sub    esp,0x14
c0016f55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f59:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016f5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f61:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f66:	88 c8                	mov    al,cl
c0016f68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f6c:	88 d0                	mov    al,dl
c0016f6e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f76:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f80:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016f86:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016f8b:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f90:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016f95:	83 ec 04             	sub    esp,0x4
c0016f98:	56                   	push   esi
c0016f99:	53                   	push   ebx
c0016f9a:	51                   	push   ecx
c0016f9b:	52                   	push   edx
c0016f9c:	50                   	push   eax
c0016f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016fa1:	68 b4 7b 02 c0       	push   0xc0027bb4
c0016fa6:	e8 ac b2 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0016fab:	83 c4 20             	add    esp,0x20
c0016fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fb2:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016fbf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016fc3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fcb:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016fd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fd5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fdc:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe5:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016feb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016fef:	8d 48 01             	lea    ecx,[eax+0x1]
c0016ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff6:	83 c2 2a             	add    edx,0x2a
c0016ff9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016ffd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017001:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001700e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017012:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701a:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017020:	8d 50 01             	lea    edx,[eax+0x1]
c0017023:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017027:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001702d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017031:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017037:	3d 00 08 00 00       	cmp    eax,0x800
c001703c:	75 10                	jne    c001704e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001703e:	83 ec 0c             	sub    esp,0xc
c0017041:	68 ab 7a 02 c0       	push   0xc0027aab
c0017046:	e8 b9 28 00 00       	call   c0019904 <Krnl::panic(char const*)>
c001704b:	83 c4 10             	add    esp,0x10
c001704e:	90                   	nop
c001704f:	83 c4 14             	add    esp,0x14
c0017052:	5b                   	pop    ebx
c0017053:	5e                   	pop    esi
c0017054:	c3                   	ret    
c0017055:	90                   	nop

c0017056 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017056:	b8 00 00 00 00       	mov    eax,0x0
c001705b:	c3                   	ret    

c001705c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001705c:	83 ec 1c             	sub    esp,0x1c
c001705f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017063:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017066:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001706a:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001706f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017074:	83 ec 08             	sub    esp,0x8
c0017077:	52                   	push   edx
c0017078:	50                   	push   eax
c0017079:	e8 f8 76 ff ff       	call   c000e776 <Computer::readCMOS(unsigned char)>
c001707e:	83 c4 10             	add    esp,0x10
c0017081:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017085:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001708a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001708f:	83 ec 04             	sub    esp,0x4
c0017092:	6a 01                	push   0x1
c0017094:	52                   	push   edx
c0017095:	50                   	push   eax
c0017096:	e8 f1 77 ff ff       	call   c000e88c <Computer::writeCMOS(unsigned char, unsigned char)>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	90                   	nop
c001709f:	83 c4 1c             	add    esp,0x1c
c00170a2:	c3                   	ret    
c00170a3:	90                   	nop

c00170a4 <ACPI::open(int, int, void*)>:
c00170a4:	53                   	push   ebx
c00170a5:	83 ec 18             	sub    esp,0x18
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00170b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b7:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00170bd:	84 c0                	test   al,al
c00170bf:	74 60                	je     c0017121 <ACPI::open(int, int, void*)+0x7d>
c00170c1:	83 ec 0c             	sub    esp,0xc
c00170c4:	68 58 01 00 00       	push   0x158
c00170c9:	e8 9a b0 ff ff       	call   c0012168 <operator new(unsigned long)>
c00170ce:	83 c4 10             	add    esp,0x10
c00170d1:	89 c3                	mov    ebx,eax
c00170d3:	83 ec 0c             	sub    esp,0xc
c00170d6:	53                   	push   ebx
c00170d7:	e8 0c 90 00 00       	call   c00200e8 <PCI::PCI()>
c00170dc:	83 c4 10             	add    esp,0x10
c00170df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e7:	83 ec 08             	sub    esp,0x8
c00170ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170ee:	50                   	push   eax
c00170ef:	e8 6e c5 ff ff       	call   c0013662 <Device::addChild(Device*)>
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00170fd:	83 c0 08             	add    eax,0x8
c0017100:	8b 00                	mov    eax,DWORD PTR [eax]
c0017102:	6a 00                	push   0x0
c0017104:	6a 00                	push   0x0
c0017106:	6a 00                	push   0x0
c0017108:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001710c:	ff d0                	call   eax
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	83 ec 0c             	sub    esp,0xc
c0017114:	68 c8 7a 02 c0       	push   0xc0027ac8
c0017119:	e8 39 b1 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001711e:	83 c4 10             	add    esp,0x10
c0017121:	83 ec 0c             	sub    esp,0xc
c0017124:	68 d3 7a 02 c0       	push   0xc0027ad3
c0017129:	e8 77 46 00 00       	call   c001b7a5 <Thr::loadKernelSymbolTable(char const*)>
c001712e:	83 c4 10             	add    esp,0x10
c0017131:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0017137:	83 ec 08             	sub    esp,0x8
c001713a:	6a 01                	push   0x1
c001713c:	68 f1 7a 02 c0       	push   0xc0027af1
c0017141:	e8 41 51 00 00       	call   c001c287 <Thr::loadDLL(char const*, bool)>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	83 ec 08             	sub    esp,0x8
c001714c:	53                   	push   ebx
c001714d:	50                   	push   eax
c001714e:	e8 fa 52 00 00       	call   c001c44d <Thr::executeDLL(unsigned long, void*)>
c0017153:	83 c4 10             	add    esp,0x10
c0017156:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001715b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017161:	83 e0 04             	and    eax,0x4
c0017164:	84 c0                	test   al,al
c0017166:	0f 84 cf 00 00 00    	je     c001723b <ACPI::open(int, int, void*)+0x197>
c001716c:	83 ec 0c             	sub    esp,0xc
c001716f:	68 14 01 00 00       	push   0x114
c0017174:	e8 ef af ff ff       	call   c0012168 <operator new(unsigned long)>
c0017179:	83 c4 10             	add    esp,0x10
c001717c:	89 c3                	mov    ebx,eax
c001717e:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0017183:	83 ec 04             	sub    esp,0x4
c0017186:	50                   	push   eax
c0017187:	68 0e 7b 02 c0       	push   0xc0027b0e
c001718c:	53                   	push   ebx
c001718d:	e8 f4 b5 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0017192:	83 c4 10             	add    esp,0x10
c0017195:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017199:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001719e:	74 17                	je     c00171b7 <ACPI::open(int, int, void*)+0x113>
c00171a0:	83 ec 0c             	sub    esp,0xc
c00171a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171a7:	e8 ac b8 ff ff       	call   c0012a58 <File::exists()>
c00171ac:	83 c4 10             	add    esp,0x10
c00171af:	84 c0                	test   al,al
c00171b1:	74 04                	je     c00171b7 <ACPI::open(int, int, void*)+0x113>
c00171b3:	b0 01                	mov    al,0x1
c00171b5:	eb 02                	jmp    c00171b9 <ACPI::open(int, int, void*)+0x115>
c00171b7:	b0 00                	mov    al,0x0
c00171b9:	84 c0                	test   al,al
c00171bb:	74 25                	je     c00171e2 <ACPI::open(int, int, void*)+0x13e>
c00171bd:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c00171c3:	83 ec 08             	sub    esp,0x8
c00171c6:	6a 01                	push   0x1
c00171c8:	68 0e 7b 02 c0       	push   0xc0027b0e
c00171cd:	e8 b5 50 00 00       	call   c001c287 <Thr::loadDLL(char const*, bool)>
c00171d2:	83 c4 10             	add    esp,0x10
c00171d5:	83 ec 08             	sub    esp,0x8
c00171d8:	53                   	push   ebx
c00171d9:	50                   	push   eax
c00171da:	e8 6e 52 00 00       	call   c001c44d <Thr::executeDLL(unsigned long, void*)>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171e7:	74 1e                	je     c0017207 <ACPI::open(int, int, void*)+0x163>
c00171e9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171ee:	74 17                	je     c0017207 <ACPI::open(int, int, void*)+0x163>
c00171f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00171f6:	83 c0 08             	add    eax,0x8
c00171f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017202:	ff d0                	call   eax
c0017204:	83 c4 10             	add    esp,0x10
c0017207:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c001720c:	83 ec 08             	sub    esp,0x8
c001720f:	68 2b 7b 02 c0       	push   0xc0027b2b
c0017214:	50                   	push   eax
c0017215:	e8 c4 f7 ff ff       	call   c00169de <findDataTable(unsigned char*, char*)>
c001721a:	83 c4 10             	add    esp,0x10
c001721d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017221:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0017226:	74 13                	je     c001723b <ACPI::open(int, int, void*)+0x197>
c0017228:	83 ec 08             	sub    esp,0x8
c001722b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001722f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017233:	e8 24 fe ff ff       	call   c001705c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017238:	83 c4 10             	add    esp,0x10
c001723b:	b8 00 00 00 00       	mov    eax,0x0
c0017240:	83 c4 18             	add    esp,0x18
c0017243:	5b                   	pop    ebx
c0017244:	c3                   	ret    
c0017245:	90                   	nop

c0017246 <ACPI::sleep()>:
c0017246:	83 ec 0c             	sub    esp,0xc
c0017249:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c001724e:	85 c0                	test   eax,eax
c0017250:	74 07                	je     c0017259 <ACPI::sleep()+0x13>
c0017252:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c0017257:	ff d0                	call   eax
c0017259:	90                   	nop
c001725a:	83 c4 0c             	add    esp,0xc
c001725d:	c3                   	ret    

c001725e <CPU::close(int, int, void*)>:
c001725e:	31 c0                	xor    eax,eax
c0017260:	c3                   	ret    

c0017261 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0017261:	55                   	push   ebp
c0017262:	57                   	push   edi
c0017263:	56                   	push   esi
c0017264:	53                   	push   ebx
c0017265:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017269:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001726d:	89 ce                	mov    esi,ecx
c001726f:	89 d5                	mov    ebp,edx
c0017271:	80 f9 04             	cmp    cl,0x4
c0017274:	75 28                	jne    c001729e <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0017276:	8d 42 f9             	lea    eax,[edx-0x7]
c0017279:	3c 03                	cmp    al,0x3
c001727b:	0f 86 63 01 00 00    	jbe    c00173e4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0017281:	80 fa 03             	cmp    dl,0x3
c0017284:	0f 84 5a 01 00 00    	je     c00173e4 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c001728a:	8d 7a f2             	lea    edi,[edx-0xe]
c001728d:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017292:	89 fb                	mov    ebx,edi
c0017294:	80 fb 01             	cmp    bl,0x1
c0017297:	77 4e                	ja     c00172e7 <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0017299:	e9 52 01 00 00       	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001729e:	80 f9 05             	cmp    cl,0x5
c00172a1:	75 4d                	jne    c00172f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c00172a3:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c00172a8:	80 fa 03             	cmp    dl,0x3
c00172ab:	0f 86 3f 01 00 00    	jbe    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172b1:	8d 7a fa             	lea    edi,[edx-0x6]
c00172b4:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c00172b9:	89 fb                	mov    ebx,edi
c00172bb:	80 fb 01             	cmp    bl,0x1
c00172be:	0f 86 2c 01 00 00    	jbe    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172c4:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00172c9:	80 fa 08             	cmp    dl,0x8
c00172cc:	0f 84 1e 01 00 00    	je     c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172d2:	89 d7                	mov    edi,edx
c00172d4:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00172d9:	83 e7 fb             	and    edi,0xfffffffb
c00172dc:	89 fb                	mov    ebx,edi
c00172de:	80 fb 09             	cmp    bl,0x9
c00172e1:	0f 84 09 01 00 00    	je     c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00172e7:	31 c0                	xor    eax,eax
c00172e9:	89 eb                	mov    ebx,ebp
c00172eb:	0f b6 fb             	movzx  edi,bl
c00172ee:	eb 30                	jmp    c0017320 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00172f0:	31 c0                	xor    eax,eax
c00172f2:	80 f9 06             	cmp    cl,0x6
c00172f5:	75 f2                	jne    c00172e9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172f7:	80 fa 0a             	cmp    dl,0xa
c00172fa:	77 ed                	ja     c00172e9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00172fc:	bf de 05 00 00       	mov    edi,0x5de
c0017301:	0f a3 d7             	bt     edi,edx
c0017304:	73 e3                	jae    c00172e9 <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0017306:	b8 00 99 02 c0       	mov    eax,0xc0029900
c001730b:	e9 e0 00 00 00       	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017310:	39 c7                	cmp    edi,eax
c0017312:	0f 84 d3 00 00 00    	je     c00173eb <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0017318:	40                   	inc    eax
c0017319:	3d d0 00 00 00       	cmp    eax,0xd0
c001731e:	74 09                	je     c0017329 <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0017320:	89 f3                	mov    ebx,esi
c0017322:	80 fb 0f             	cmp    bl,0xf
c0017325:	75 f1                	jne    c0017318 <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0017327:	eb e7                	jmp    c0017310 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0017329:	80 f9 10             	cmp    cl,0x10
c001732c:	75 14                	jne    c0017342 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c001732e:	8d 42 fc             	lea    eax,[edx-0x4]
c0017331:	83 e0 fb             	and    eax,0xfffffffb
c0017334:	3c 02                	cmp    al,0x2
c0017336:	76 34                	jbe    c001736c <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0017338:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c001733d:	80 fa 02             	cmp    dl,0x2
c0017340:	eb 24                	jmp    c0017366 <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0017342:	80 f9 11             	cmp    cl,0x11
c0017345:	75 13                	jne    c001735a <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0017347:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c001734c:	80 fa 03             	cmp    dl,0x3
c001734f:	0f 85 9b 00 00 00    	jne    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017355:	e9 91 00 00 00       	jmp    c00173eb <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c001735a:	80 f9 12             	cmp    cl,0x12
c001735d:	75 14                	jne    c0017373 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c001735f:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c0017364:	fe ca                	dec    dl
c0017366:	0f 85 84 00 00 00    	jne    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001736c:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017371:	eb 7d                	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017373:	80 f9 14             	cmp    cl,0x14
c0017376:	75 12                	jne    c001738a <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0017378:	4a                   	dec    edx
c0017379:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c001737e:	80 fa 01             	cmp    dl,0x1
c0017381:	77 6d                	ja     c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017383:	b8 30 99 02 c0       	mov    eax,0xc0029930
c0017388:	eb 66                	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c001738a:	80 f9 15             	cmp    cl,0x15
c001738d:	75 31                	jne    c00173c0 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c001738f:	b8 40 99 02 c0       	mov    eax,0xc0029940
c0017394:	80 fa 01             	cmp    dl,0x1
c0017397:	74 57                	je     c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0017399:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c001739e:	80 fa 13             	cmp    dl,0x13
c00173a1:	76 0c                	jbe    c00173af <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c00173a3:	80 fa 30             	cmp    dl,0x30
c00173a6:	75 48                	jne    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173a8:	b8 60 99 02 c0       	mov    eax,0xc0029960
c00173ad:	eb 41                	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173af:	b9 04 00 09 00       	mov    ecx,0x90004
c00173b4:	0f a3 d1             	bt     ecx,edx
c00173b7:	73 37                	jae    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173b9:	b8 50 99 02 c0       	mov    eax,0xc0029950
c00173be:	eb 30                	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173c0:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c00173c5:	80 f9 16             	cmp    cl,0x16
c00173c8:	75 26                	jne    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173ca:	b8 70 99 02 c0       	mov    eax,0xc0029970
c00173cf:	84 d2                	test   dl,dl
c00173d1:	74 1d                	je     c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173d3:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c00173d8:	80 fa 30             	cmp    dl,0x30
c00173db:	75 13                	jne    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173dd:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00173e2:	eb 0c                	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173e4:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c00173e9:	eb 05                	jmp    c00173f0 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00173eb:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00173f0:	5b                   	pop    ebx
c00173f1:	5e                   	pop    esi
c00173f2:	5f                   	pop    edi
c00173f3:	5d                   	pop    ebp
c00173f4:	c3                   	ret    

c00173f5 <lookupIntelCPUName(unsigned char, unsigned char)>:
c00173f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00173f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173fd:	80 f9 04             	cmp    cl,0x4
c0017400:	75 6b                	jne    c001746d <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0017402:	b8 00 97 02 c0       	mov    eax,0xc0029700
c0017407:	80 fa 01             	cmp    dl,0x1
c001740a:	0f 86 92 02 00 00    	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017410:	b8 10 97 02 c0       	mov    eax,0xc0029710
c0017415:	80 fa 02             	cmp    dl,0x2
c0017418:	0f 84 84 02 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001741e:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0017423:	80 fa 03             	cmp    dl,0x3
c0017426:	0f 84 76 02 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001742c:	b8 30 97 02 c0       	mov    eax,0xc0029730
c0017431:	80 fa 04             	cmp    dl,0x4
c0017434:	0f 84 68 02 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001743a:	b8 40 97 02 c0       	mov    eax,0xc0029740
c001743f:	80 fa 05             	cmp    dl,0x5
c0017442:	0f 84 5a 02 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017448:	b8 20 97 02 c0       	mov    eax,0xc0029720
c001744d:	80 fa 07             	cmp    dl,0x7
c0017450:	0f 84 4c 02 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017456:	83 ea 08             	sub    edx,0x8
c0017459:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c001745e:	80 fa 01             	cmp    dl,0x1
c0017461:	0f 87 3b 02 00 00    	ja     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017467:	b8 50 97 02 c0       	mov    eax,0xc0029750
c001746c:	c3                   	ret    
c001746d:	80 f9 05             	cmp    cl,0x5
c0017470:	75 45                	jne    c00174b7 <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0017472:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017475:	b8 60 97 02 c0       	mov    eax,0xc0029760
c001747a:	80 f9 02             	cmp    cl,0x2
c001747d:	0f 86 1f 02 00 00    	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017483:	80 fa 04             	cmp    dl,0x4
c0017486:	0f 84 f3 01 00 00    	je     c001767f <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c001748c:	80 fa 07             	cmp    dl,0x7
c001748f:	0f 84 0d 02 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017495:	b8 70 97 02 c0       	mov    eax,0xc0029770
c001749a:	80 fa 08             	cmp    dl,0x8
c001749d:	0f 84 ff 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174a3:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c00174a8:	80 fa 09             	cmp    dl,0x9
c00174ab:	0f 85 f1 01 00 00    	jne    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174b1:	b8 80 97 02 c0       	mov    eax,0xc0029780
c00174b6:	c3                   	ret    
c00174b7:	80 f9 06             	cmp    cl,0x6
c00174ba:	0f 85 85 01 00 00    	jne    c0017645 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c00174c0:	b8 90 97 02 c0       	mov    eax,0xc0029790
c00174c5:	80 fa 01             	cmp    dl,0x1
c00174c8:	0f 84 d4 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174ce:	8d 42 fb             	lea    eax,[edx-0x5]
c00174d1:	3c 01                	cmp    al,0x1
c00174d3:	0f 86 ac 01 00 00    	jbe    c0017685 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00174d9:	80 fa 03             	cmp    dl,0x3
c00174dc:	0f 84 a3 01 00 00    	je     c0017685 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c00174e2:	8d 4a f9             	lea    ecx,[edx-0x7]
c00174e5:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174ea:	80 f9 01             	cmp    cl,0x1
c00174ed:	0f 86 af 01 00 00    	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00174f3:	80 fa 09             	cmp    dl,0x9
c00174f6:	0f 84 8f 01 00 00    	je     c001768b <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c00174fc:	8d 4a f6             	lea    ecx,[edx-0xa]
c00174ff:	80 f9 01             	cmp    cl,0x1
c0017502:	0f 86 9a 01 00 00    	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017508:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c001750d:	80 fa 0d             	cmp    dl,0xd
c0017510:	0f 84 8c 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017516:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c001751b:	80 fa 0e             	cmp    dl,0xe
c001751e:	0f 84 7e 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017524:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017529:	80 fa 0f             	cmp    dl,0xf
c001752c:	0f 84 70 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017532:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017537:	80 fa 15             	cmp    dl,0x15
c001753a:	0f 84 62 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017540:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017543:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017548:	80 f9 01             	cmp    cl,0x1
c001754b:	0f 86 51 01 00 00    	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017551:	80 fa 1a             	cmp    dl,0x1a
c0017554:	0f 84 37 01 00 00    	je     c0017691 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c001755a:	80 fa 1c             	cmp    dl,0x1c
c001755d:	0f 84 34 01 00 00    	je     c0017697 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0017563:	80 fa 1d             	cmp    dl,0x1d
c0017566:	0f 84 36 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001756c:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017571:	80 fa 25             	cmp    dl,0x25
c0017574:	0f 84 28 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001757a:	8d 4a da             	lea    ecx,[edx-0x26]
c001757d:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017582:	80 f9 01             	cmp    cl,0x1
c0017585:	0f 86 17 01 00 00    	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001758b:	b8 20 98 02 c0       	mov    eax,0xc0029820
c0017590:	80 fa 2a             	cmp    dl,0x2a
c0017593:	0f 84 09 01 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017599:	b8 10 98 02 c0       	mov    eax,0xc0029810
c001759e:	80 fa 2c             	cmp    dl,0x2c
c00175a1:	0f 84 fb 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175a7:	b8 20 98 02 c0       	mov    eax,0xc0029820
c00175ac:	80 fa 2d             	cmp    dl,0x2d
c00175af:	0f 84 ed 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175b5:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c00175ba:	80 fa 2e             	cmp    dl,0x2e
c00175bd:	0f 84 df 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175c3:	b8 10 98 02 c0       	mov    eax,0xc0029810
c00175c8:	80 fa 2f             	cmp    dl,0x2f
c00175cb:	0f 84 d1 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175d1:	8d 4a cb             	lea    ecx,[edx-0x35]
c00175d4:	b8 00 98 02 c0       	mov    eax,0xc0029800
c00175d9:	80 f9 01             	cmp    cl,0x1
c00175dc:	0f 86 c0 00 00 00    	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175e2:	b8 30 98 02 c0       	mov    eax,0xc0029830
c00175e7:	80 fa 37             	cmp    dl,0x37
c00175ea:	0f 84 b2 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175f0:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175f5:	80 fa 3a             	cmp    dl,0x3a
c00175f8:	0f 84 a4 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c00175fe:	b8 50 98 02 c0       	mov    eax,0xc0029850
c0017603:	80 fa 3c             	cmp    dl,0x3c
c0017606:	0f 84 96 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001760c:	b8 60 98 02 c0       	mov    eax,0xc0029860
c0017611:	80 fa 3d             	cmp    dl,0x3d
c0017614:	0f 84 88 00 00 00    	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001761a:	b8 40 98 02 c0       	mov    eax,0xc0029840
c001761f:	80 fa 3e             	cmp    dl,0x3e
c0017622:	74 7e                	je     c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017624:	8d 42 bb             	lea    eax,[edx-0x45]
c0017627:	3c 01                	cmp    al,0x1
c0017629:	76 72                	jbe    c001769d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c001762b:	80 fa 3f             	cmp    dl,0x3f
c001762e:	74 6d                	je     c001769d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0017630:	80 fa 4a             	cmp    dl,0x4a
c0017633:	74 0a                	je     c001763f <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0017635:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c001763a:	80 fa 4d             	cmp    dl,0x4d
c001763d:	75 63                	jne    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001763f:	b8 30 98 02 c0       	mov    eax,0xc0029830
c0017644:	c3                   	ret    
c0017645:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c001764a:	80 f9 0b             	cmp    cl,0xb
c001764d:	75 0a                	jne    c0017659 <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c001764f:	fe ca                	dec    dl
c0017651:	75 4f                	jne    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017653:	b8 70 98 02 c0       	mov    eax,0xc0029870
c0017658:	c3                   	ret    
c0017659:	80 f9 0f             	cmp    cl,0xf
c001765c:	75 44                	jne    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c001765e:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0017663:	80 fa 02             	cmp    dl,0x2
c0017666:	76 3a                	jbe    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017668:	8d 42 fd             	lea    eax,[edx-0x3]
c001766b:	3c 01                	cmp    al,0x1
c001766d:	76 0a                	jbe    c0017679 <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c001766f:	b8 36 7f 02 c0       	mov    eax,0xc0027f36
c0017674:	80 fa 06             	cmp    dl,0x6
c0017677:	75 29                	jne    c00176a2 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0017679:	b8 90 98 02 c0       	mov    eax,0xc0029890
c001767e:	c3                   	ret    
c001767f:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017684:	c3                   	ret    
c0017685:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c001768a:	c3                   	ret    
c001768b:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017690:	c3                   	ret    
c0017691:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017696:	c3                   	ret    
c0017697:	b8 00 98 02 c0       	mov    eax,0xc0029800
c001769c:	c3                   	ret    
c001769d:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00176a2:	c3                   	ret    

c00176a3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00176a3:	60                   	pusha  
c00176a4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176b0:	9c                   	pushf  
c00176b1:	fa                   	cli    
c00176b2:	0f 09                	wbinvd 
c00176b4:	0f 30                	wrmsr  
c00176b6:	9d                   	popf   
c00176b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176bb:	89 02                	mov    DWORD PTR [edx],eax
c00176bd:	61                   	popa   
c00176be:	c3                   	ret    

c00176bf <AMD_K6_read_msr(unsigned int, REGS*)>:
c00176bf:	60                   	pusha  
c00176c0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176c4:	9c                   	pushf  
c00176c5:	fa                   	cli    
c00176c6:	0f 09                	wbinvd 
c00176c8:	31 c0                	xor    eax,eax
c00176ca:	31 d2                	xor    edx,edx
c00176cc:	0f 32                	rdmsr  
c00176ce:	9d                   	popf   
c00176cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176d3:	89 02                	mov    DWORD PTR [edx],eax
c00176d5:	61                   	popa   
c00176d6:	c3                   	ret    

c00176d7 <AMD_K6_writeback(int, int, int)>:
c00176d7:	56                   	push   esi
c00176d8:	53                   	push   ebx
c00176d9:	83 ec 10             	sub    esp,0x10
c00176dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e0:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00176e5:	75 5d                	jne    c0017744 <AMD_K6_writeback(int, int, int)+0x6d>
c00176e7:	83 f8 08             	cmp    eax,0x8
c00176ea:	75 09                	jne    c00176f5 <AMD_K6_writeback(int, int, int)+0x1e>
c00176ec:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00176f1:	7e 13                	jle    c0017706 <AMD_K6_writeback(int, int, int)+0x2f>
c00176f3:	eb 30                	jmp    c0017725 <AMD_K6_writeback(int, int, int)+0x4e>
c00176f5:	83 f8 06             	cmp    eax,0x6
c00176f8:	7c 4a                	jl     c0017744 <AMD_K6_writeback(int, int, int)+0x6d>
c00176fa:	83 f8 07             	cmp    eax,0x7
c00176fd:	7e 07                	jle    c0017706 <AMD_K6_writeback(int, int, int)+0x2f>
c00176ff:	83 f8 09             	cmp    eax,0x9
c0017702:	74 21                	je     c0017725 <AMD_K6_writeback(int, int, int)+0x4e>
c0017704:	eb 3e                	jmp    c0017744 <AMD_K6_writeback(int, int, int)+0x6d>
c0017706:	89 e6                	mov    esi,esp
c0017708:	8b 1d 44 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a444
c001770e:	56                   	push   esi
c001770f:	c1 eb 15             	shr    ebx,0x15
c0017712:	68 82 00 00 c0       	push   0xc0000082
c0017717:	83 e3 7e             	and    ebx,0x7e
c001771a:	e8 a0 ff ff ff       	call   c00176bf <AMD_K6_read_msr(unsigned int, REGS*)>
c001771f:	56                   	push   esi
c0017720:	6a 00                	push   0x0
c0017722:	53                   	push   ebx
c0017723:	eb 12                	jmp    c0017737 <AMD_K6_writeback(int, int, int)+0x60>
c0017725:	89 e3                	mov    ebx,esp
c0017727:	53                   	push   ebx
c0017728:	68 82 00 00 c0       	push   0xc0000082
c001772d:	e8 8d ff ff ff       	call   c00176bf <AMD_K6_read_msr(unsigned int, REGS*)>
c0017732:	53                   	push   ebx
c0017733:	6a 00                	push   0x0
c0017735:	6a 00                	push   0x0
c0017737:	68 82 00 00 c0       	push   0xc0000082
c001773c:	e8 62 ff ff ff       	call   c00176a3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017741:	83 c4 18             	add    esp,0x18
c0017744:	83 c4 10             	add    esp,0x10
c0017747:	5b                   	pop    ebx
c0017748:	5e                   	pop    esi
c0017749:	c3                   	ret    

c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001774a:	55                   	push   ebp
c001774b:	57                   	push   edi
c001774c:	56                   	push   esi
c001774d:	53                   	push   ebx
c001774e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017752:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017756:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001775a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001775e:	39 05 a0 99 02 c0    	cmp    DWORD PTR ds:0xc00299a0,eax
c0017764:	75 23                	jne    c0017789 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017766:	a1 4c ae 02 c0       	mov    eax,ds:0xc002ae4c
c001776b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001776f:	89 06                	mov    DWORD PTR [esi],eax
c0017771:	a1 48 ae 02 c0       	mov    eax,ds:0xc002ae48
c0017776:	89 07                	mov    DWORD PTR [edi],eax
c0017778:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c001777d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017780:	a1 40 ae 02 c0       	mov    eax,ds:0xc002ae40
c0017785:	89 02                	mov    DWORD PTR [edx],eax
c0017787:	eb 3f                	jmp    c00177c8 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017789:	31 c9                	xor    ecx,ecx
c001778b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001778f:	0f a2                	cpuid  
c0017791:	89 06                	mov    DWORD PTR [esi],eax
c0017793:	89 1f                	mov    DWORD PTR [edi],ebx
c0017795:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017799:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001779c:	89 10                	mov    DWORD PTR [eax],edx
c001779e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177a2:	a3 a0 99 02 c0       	mov    ds:0xc00299a0,eax
c00177a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00177a9:	a3 4c ae 02 c0       	mov    ds:0xc002ae4c,eax
c00177ae:	8b 07                	mov    eax,DWORD PTR [edi]
c00177b0:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c00177b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00177b8:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c00177bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00177c3:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c00177c8:	5b                   	pop    ebx
c00177c9:	5e                   	pop    esi
c00177ca:	5f                   	pop    edi
c00177cb:	5d                   	pop    ebp
c00177cc:	c3                   	ret    

c00177cd <cpuidCheckEDX(unsigned int)>:
c00177cd:	83 ec 10             	sub    esp,0x10
c00177d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177d4:	50                   	push   eax
c00177d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177d9:	50                   	push   eax
c00177da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177de:	50                   	push   eax
c00177df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e3:	50                   	push   eax
c00177e4:	6a 01                	push   0x1
c00177e6:	e8 5f ff ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177ef:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00177f3:	0f 95 c0             	setne  al
c00177f6:	83 c4 24             	add    esp,0x24
c00177f9:	c3                   	ret    

c00177fa <cpuidCheckECX(unsigned int)>:
c00177fa:	83 ec 10             	sub    esp,0x10
c00177fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017801:	50                   	push   eax
c0017802:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017806:	50                   	push   eax
c0017807:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001780b:	50                   	push   eax
c001780c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017810:	50                   	push   eax
c0017811:	6a 01                	push   0x1
c0017813:	e8 32 ff ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017818:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001781c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017820:	0f 95 c0             	setne  al
c0017823:	83 c4 24             	add    esp,0x24
c0017826:	c3                   	ret    

c0017827 <cpuidCheckExtendedEBX(unsigned int)>:
c0017827:	83 ec 10             	sub    esp,0x10
c001782a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001782e:	50                   	push   eax
c001782f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017833:	50                   	push   eax
c0017834:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017838:	50                   	push   eax
c0017839:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001783d:	50                   	push   eax
c001783e:	6a 07                	push   0x7
c0017840:	e8 05 ff ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017845:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017849:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001784d:	0f 95 c0             	setne  al
c0017850:	83 c4 24             	add    esp,0x24
c0017853:	c3                   	ret    

c0017854 <cpuidCheckExtendedECX(unsigned int)>:
c0017854:	83 ec 10             	sub    esp,0x10
c0017857:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001785b:	50                   	push   eax
c001785c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017860:	50                   	push   eax
c0017861:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017865:	50                   	push   eax
c0017866:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001786a:	50                   	push   eax
c001786b:	6a 07                	push   0x7
c001786d:	e8 d8 fe ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017872:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017876:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001787a:	0f 95 c0             	setne  al
c001787d:	83 c4 24             	add    esp,0x24
c0017880:	c3                   	ret    

c0017881 <getCPUNumber()>:
c0017881:	31 c0                	xor    eax,eax
c0017883:	c3                   	ret    

c0017884 <thisCPU()>:
c0017884:	e8 f8 ff ff ff       	call   c0017881 <getCPUNumber()>
c0017889:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c001788f:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0017896:	c3                   	ret    
c0017897:	90                   	nop

c0017898 <CPU::CPU()>:
c0017898:	83 ec 0c             	sub    esp,0xc
c001789b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001789f:	83 ec 08             	sub    esp,0x8
c00178a2:	68 36 7f 02 c0       	push   0xc0027f36
c00178a7:	50                   	push   eax
c00178a8:	e8 a5 bf ff ff       	call   c0013852 <Device::Device(char const*)>
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	ba 10 80 02 c0       	mov    edx,0xc0028010
c00178b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b9:	89 10                	mov    DWORD PTR [eax],edx
c00178bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178bf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00178c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178cd:	05 78 01 00 00       	add    eax,0x178
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	50                   	push   eax
c00178d6:	e8 9b 70 ff ff       	call   c000e976 <GDT::GDT()>
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e2:	05 7c 09 00 00       	add    eax,0x97c
c00178e7:	83 ec 0c             	sub    esp,0xc
c00178ea:	50                   	push   eax
c00178eb:	e8 e6 72 ff ff       	call   c000ebd6 <IDT::IDT()>
c00178f0:	83 c4 10             	add    esp,0x10
c00178f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f7:	05 7c 11 00 00       	add    eax,0x117c
c00178fc:	83 ec 0c             	sub    esp,0xc
c00178ff:	50                   	push   eax
c0017900:	e8 15 93 ff ff       	call   c0010c1a <TSS::TSS()>
c0017905:	83 c4 10             	add    esp,0x10
c0017908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017917:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017921:	90                   	nop
c0017922:	83 c4 0c             	add    esp,0xc
c0017925:	c3                   	ret    

c0017926 <CPU::displayFeatures()>:
c0017926:	53                   	push   ebx
c0017927:	83 ec 10             	sub    esp,0x10
c001792a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001792e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0017934:	68 44 7c 02 c0       	push   0xc0027c44
c0017939:	e8 19 a9 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001793e:	59                   	pop    ecx
c001793f:	58                   	pop    eax
c0017940:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0017946:	50                   	push   eax
c0017947:	68 55 7c 02 c0       	push   0xc0027c55
c001794c:	e8 06 a9 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017951:	58                   	pop    eax
c0017952:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017958:	5a                   	pop    edx
c0017959:	c1 e8 0e             	shr    eax,0xe
c001795c:	0f b6 c0             	movzx  eax,al
c001795f:	50                   	push   eax
c0017960:	68 66 7c 02 c0       	push   0xc0027c66
c0017965:	e8 ed a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001796a:	59                   	pop    ecx
c001796b:	58                   	pop    eax
c001796c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017972:	66 c1 e8 06          	shr    ax,0x6
c0017976:	0f b6 c0             	movzx  eax,al
c0017979:	50                   	push   eax
c001797a:	68 77 7c 02 c0       	push   0xc0027c77
c001797f:	e8 d3 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017984:	c7 04 24 1e 81 02 c0 	mov    DWORD PTR [esp],0xc002811e
c001798b:	e8 c7 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017998:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001799f:	74 05                	je     c00179a6 <CPU::displayFeatures()+0x80>
c00179a1:	b8 78 69 02 c0       	mov    eax,0xc0026978
c00179a6:	52                   	push   edx
c00179a7:	52                   	push   edx
c00179a8:	50                   	push   eax
c00179a9:	68 88 7c 02 c0       	push   0xc0027c88
c00179ae:	e8 a4 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00179b3:	83 c4 10             	add    esp,0x10
c00179b6:	b8 78 69 02 c0       	mov    eax,0xc0026978
c00179bb:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00179c2:	78 05                	js     c00179c9 <CPU::displayFeatures()+0xa3>
c00179c4:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c00179c9:	51                   	push   ecx
c00179ca:	51                   	push   ecx
c00179cb:	50                   	push   eax
c00179cc:	68 9f 7c 02 c0       	push   0xc0027c9f
c00179d1:	e8 81 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00179d6:	83 c4 10             	add    esp,0x10
c00179d9:	b8 78 69 02 c0       	mov    eax,0xc0026978
c00179de:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00179e5:	75 05                	jne    c00179ec <CPU::displayFeatures()+0xc6>
c00179e7:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c00179ec:	52                   	push   edx
c00179ed:	52                   	push   edx
c00179ee:	50                   	push   eax
c00179ef:	68 b6 7c 02 c0       	push   0xc0027cb6
c00179f4:	e8 5e a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00179f9:	83 c4 10             	add    esp,0x10
c00179fc:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a01:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0017a08:	75 05                	jne    c0017a0f <CPU::displayFeatures()+0xe9>
c0017a0a:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a0f:	51                   	push   ecx
c0017a10:	51                   	push   ecx
c0017a11:	50                   	push   eax
c0017a12:	68 cd 7c 02 c0       	push   0xc0027ccd
c0017a17:	e8 3b a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a24:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a2b:	75 05                	jne    c0017a32 <CPU::displayFeatures()+0x10c>
c0017a2d:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a32:	52                   	push   edx
c0017a33:	52                   	push   edx
c0017a34:	50                   	push   eax
c0017a35:	68 e4 7c 02 c0       	push   0xc0027ce4
c0017a3a:	e8 18 a8 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a3f:	83 c4 10             	add    esp,0x10
c0017a42:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a47:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a4e:	75 05                	jne    c0017a55 <CPU::displayFeatures()+0x12f>
c0017a50:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a55:	51                   	push   ecx
c0017a56:	51                   	push   ecx
c0017a57:	50                   	push   eax
c0017a58:	68 fb 7c 02 c0       	push   0xc0027cfb
c0017a5d:	e8 f5 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a6a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017a71:	75 05                	jne    c0017a78 <CPU::displayFeatures()+0x152>
c0017a73:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a78:	52                   	push   edx
c0017a79:	52                   	push   edx
c0017a7a:	50                   	push   eax
c0017a7b:	68 12 7d 02 c0       	push   0xc0027d12
c0017a80:	e8 d2 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017a85:	83 c4 10             	add    esp,0x10
c0017a88:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017a8d:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a94:	75 05                	jne    c0017a9b <CPU::displayFeatures()+0x175>
c0017a96:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017a9b:	51                   	push   ecx
c0017a9c:	51                   	push   ecx
c0017a9d:	50                   	push   eax
c0017a9e:	68 29 7d 02 c0       	push   0xc0027d29
c0017aa3:	e8 af a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017aa8:	83 c4 10             	add    esp,0x10
c0017aab:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017ab0:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017ab7:	75 05                	jne    c0017abe <CPU::displayFeatures()+0x198>
c0017ab9:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017abe:	52                   	push   edx
c0017abf:	52                   	push   edx
c0017ac0:	50                   	push   eax
c0017ac1:	68 40 7d 02 c0       	push   0xc0027d40
c0017ac6:	e8 8c a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017acb:	83 c4 10             	add    esp,0x10
c0017ace:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017ad3:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017ada:	75 05                	jne    c0017ae1 <CPU::displayFeatures()+0x1bb>
c0017adc:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017ae1:	51                   	push   ecx
c0017ae2:	51                   	push   ecx
c0017ae3:	50                   	push   eax
c0017ae4:	68 57 7d 02 c0       	push   0xc0027d57
c0017ae9:	e8 69 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017aee:	83 c4 10             	add    esp,0x10
c0017af1:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017af6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017afd:	75 05                	jne    c0017b04 <CPU::displayFeatures()+0x1de>
c0017aff:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b04:	52                   	push   edx
c0017b05:	52                   	push   edx
c0017b06:	50                   	push   eax
c0017b07:	68 6e 7d 02 c0       	push   0xc0027d6e
c0017b0c:	e8 46 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b19:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017b20:	75 05                	jne    c0017b27 <CPU::displayFeatures()+0x201>
c0017b22:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b27:	51                   	push   ecx
c0017b28:	51                   	push   ecx
c0017b29:	50                   	push   eax
c0017b2a:	68 85 7d 02 c0       	push   0xc0027d85
c0017b2f:	e8 23 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b34:	83 c4 10             	add    esp,0x10
c0017b37:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b3c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b43:	75 05                	jne    c0017b4a <CPU::displayFeatures()+0x224>
c0017b45:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b4a:	52                   	push   edx
c0017b4b:	52                   	push   edx
c0017b4c:	50                   	push   eax
c0017b4d:	68 9c 7d 02 c0       	push   0xc0027d9c
c0017b52:	e8 00 a7 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b57:	83 c4 10             	add    esp,0x10
c0017b5a:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b5f:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017b66:	78 05                	js     c0017b6d <CPU::displayFeatures()+0x247>
c0017b68:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b6d:	51                   	push   ecx
c0017b6e:	51                   	push   ecx
c0017b6f:	50                   	push   eax
c0017b70:	68 b3 7d 02 c0       	push   0xc0027db3
c0017b75:	e8 dd a6 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	b8 78 69 02 c0       	mov    eax,0xc0026978
c0017b82:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017b89:	75 05                	jne    c0017b90 <CPU::displayFeatures()+0x26a>
c0017b8b:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c0017b90:	52                   	push   edx
c0017b91:	52                   	push   edx
c0017b92:	50                   	push   eax
c0017b93:	68 ca 7d 02 c0       	push   0xc0027dca
c0017b98:	e8 ba a6 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0017b9d:	83 c4 18             	add    esp,0x18
c0017ba0:	5b                   	pop    ebx
c0017ba1:	c3                   	ret    

c0017ba2 <CPU::detectFeatures()>:
c0017ba2:	55                   	push   ebp
c0017ba3:	57                   	push   edi
c0017ba4:	56                   	push   esi
c0017ba5:	53                   	push   ebx
c0017ba6:	83 ec 50             	sub    esp,0x50
c0017ba9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017bad:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017bb7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017bbe:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017bc4:	6a 0d                	push   0xd
c0017bc6:	6a 00                	push   0x0
c0017bc8:	57                   	push   edi
c0017bc9:	e8 1e 8b fe ff       	call   c00006ec <memset>
c0017bce:	83 c4 10             	add    esp,0x10
c0017bd1:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017bd6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017bdd:	0f 84 20 09 00 00    	je     c0018503 <CPU::detectFeatures()+0x961>
c0017be3:	83 ec 0c             	sub    esp,0xc
c0017be6:	6a 10                	push   0x10
c0017be8:	e8 e0 fb ff ff       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c0017bed:	83 e0 01             	and    eax,0x1
c0017bf0:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bf3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017bf9:	83 e0 fd             	and    eax,0xfffffffd
c0017bfc:	09 d0                	or     eax,edx
c0017bfe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c04:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017c0b:	e8 bd fb ff ff       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c0017c10:	83 e0 01             	and    eax,0x1
c0017c13:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017c1a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c20:	83 e0 fb             	and    eax,0xfffffffb
c0017c23:	09 d0                	or     eax,edx
c0017c25:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c2b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c32:	e8 96 fb ff ff       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c0017c37:	83 e0 01             	and    eax,0x1
c0017c3a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c41:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c47:	83 e0 f7             	and    eax,0xfffffff7
c0017c4a:	09 d0                	or     eax,edx
c0017c4c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c52:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c59:	e8 6f fb ff ff       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c0017c5e:	83 e0 01             	and    eax,0x1
c0017c61:	c1 e0 04             	shl    eax,0x4
c0017c64:	88 c2                	mov    dl,al
c0017c66:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c6c:	83 e0 ef             	and    eax,0xffffffef
c0017c6f:	09 d0                	or     eax,edx
c0017c71:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c77:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017c7e:	e8 4a fb ff ff       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c0017c83:	83 e0 01             	and    eax,0x1
c0017c86:	c1 e0 05             	shl    eax,0x5
c0017c89:	88 c2                	mov    dl,al
c0017c8b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c91:	83 e0 df             	and    eax,0xffffffdf
c0017c94:	09 d0                	or     eax,edx
c0017c96:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c9c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017ca3:	e8 25 fb ff ff       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c0017ca8:	83 e0 01             	and    eax,0x1
c0017cab:	8d 14 00             	lea    edx,[eax+eax*1]
c0017cae:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017cb4:	83 e0 fd             	and    eax,0xfffffffd
c0017cb7:	09 d0                	or     eax,edx
c0017cb9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017cbf:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017cc6:	e8 02 fb ff ff       	call   c00177cd <cpuidCheckEDX(unsigned int)>
c0017ccb:	83 e0 01             	and    eax,0x1
c0017cce:	c1 e0 06             	shl    eax,0x6
c0017cd1:	88 c2                	mov    dl,al
c0017cd3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017cd9:	83 e0 bf             	and    eax,0xffffffbf
c0017cdc:	09 d0                	or     eax,edx
c0017cde:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017ce4:	58                   	pop    eax
c0017ce5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017ce9:	56                   	push   esi
c0017cea:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017cee:	55                   	push   ebp
c0017cef:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017cf3:	50                   	push   eax
c0017cf4:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017cf8:	52                   	push   edx
c0017cf9:	6a 00                	push   0x0
c0017cfb:	e8 4a fa ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017d00:	83 c4 1c             	add    esp,0x1c
c0017d03:	6a 04                	push   0x4
c0017d05:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d09:	50                   	push   eax
c0017d0a:	57                   	push   edi
c0017d0b:	e8 a6 89 fe ff       	call   c00006b6 <memcpy>
c0017d10:	83 c4 0c             	add    esp,0xc
c0017d13:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017d19:	6a 04                	push   0x4
c0017d1b:	56                   	push   esi
c0017d1c:	50                   	push   eax
c0017d1d:	e8 94 89 fe ff       	call   c00006b6 <memcpy>
c0017d22:	83 c4 0c             	add    esp,0xc
c0017d25:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d2b:	6a 04                	push   0x4
c0017d2d:	55                   	push   ebp
c0017d2e:	50                   	push   eax
c0017d2f:	e8 82 89 fe ff       	call   c00006b6 <memcpy>
c0017d34:	58                   	pop    eax
c0017d35:	5a                   	pop    edx
c0017d36:	68 e1 7d 02 c0       	push   0xc0027de1
c0017d3b:	57                   	push   edi
c0017d3c:	e8 9b 8a fe ff       	call   c00007dc <strcmp>
c0017d41:	83 c4 10             	add    esp,0x10
c0017d44:	85 c0                	test   eax,eax
c0017d46:	75 0f                	jne    c0017d57 <CPU::detectFeatures()+0x1b5>
c0017d48:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d52:	e9 22 02 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017d57:	50                   	push   eax
c0017d58:	50                   	push   eax
c0017d59:	68 ee 7d 02 c0       	push   0xc0027dee
c0017d5e:	57                   	push   edi
c0017d5f:	e8 78 8a fe ff       	call   c00007dc <strcmp>
c0017d64:	83 c4 10             	add    esp,0x10
c0017d67:	85 c0                	test   eax,eax
c0017d69:	74 dd                	je     c0017d48 <CPU::detectFeatures()+0x1a6>
c0017d6b:	51                   	push   ecx
c0017d6c:	51                   	push   ecx
c0017d6d:	68 fb 7d 02 c0       	push   0xc0027dfb
c0017d72:	57                   	push   edi
c0017d73:	e8 64 8a fe ff       	call   c00007dc <strcmp>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	85 c0                	test   eax,eax
c0017d7d:	74 2a                	je     c0017da9 <CPU::detectFeatures()+0x207>
c0017d7f:	52                   	push   edx
c0017d80:	52                   	push   edx
c0017d81:	68 08 7e 02 c0       	push   0xc0027e08
c0017d86:	57                   	push   edi
c0017d87:	e8 50 8a fe ff       	call   c00007dc <strcmp>
c0017d8c:	83 c4 10             	add    esp,0x10
c0017d8f:	85 c0                	test   eax,eax
c0017d91:	74 16                	je     c0017da9 <CPU::detectFeatures()+0x207>
c0017d93:	50                   	push   eax
c0017d94:	50                   	push   eax
c0017d95:	68 15 7e 02 c0       	push   0xc0027e15
c0017d9a:	57                   	push   edi
c0017d9b:	e8 3c 8a fe ff       	call   c00007dc <strcmp>
c0017da0:	83 c4 10             	add    esp,0x10
c0017da3:	85 c0                	test   eax,eax
c0017da5:	74 48                	je     c0017def <CPU::detectFeatures()+0x24d>
c0017da7:	eb 0f                	jmp    c0017db8 <CPU::detectFeatures()+0x216>
c0017da9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017db3:	e9 c1 01 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017db8:	50                   	push   eax
c0017db9:	50                   	push   eax
c0017dba:	68 22 7e 02 c0       	push   0xc0027e22
c0017dbf:	57                   	push   edi
c0017dc0:	e8 17 8a fe ff       	call   c00007dc <strcmp>
c0017dc5:	83 c4 10             	add    esp,0x10
c0017dc8:	85 c0                	test   eax,eax
c0017dca:	74 23                	je     c0017def <CPU::detectFeatures()+0x24d>
c0017dcc:	50                   	push   eax
c0017dcd:	50                   	push   eax
c0017dce:	68 2f 7e 02 c0       	push   0xc0027e2f
c0017dd3:	57                   	push   edi
c0017dd4:	e8 03 8a fe ff       	call   c00007dc <strcmp>
c0017dd9:	83 c4 10             	add    esp,0x10
c0017ddc:	85 c0                	test   eax,eax
c0017dde:	75 1e                	jne    c0017dfe <CPU::detectFeatures()+0x25c>
c0017de0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017dea:	e9 8a 01 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017def:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017df9:	e9 7b 01 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017dfe:	50                   	push   eax
c0017dff:	50                   	push   eax
c0017e00:	68 3c 7e 02 c0       	push   0xc0027e3c
c0017e05:	57                   	push   edi
c0017e06:	e8 d1 89 fe ff       	call   c00007dc <strcmp>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	85 c0                	test   eax,eax
c0017e10:	75 0f                	jne    c0017e21 <CPU::detectFeatures()+0x27f>
c0017e12:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017e1c:	e9 58 01 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017e21:	50                   	push   eax
c0017e22:	50                   	push   eax
c0017e23:	68 fb 7d 02 c0       	push   0xc0027dfb
c0017e28:	57                   	push   edi
c0017e29:	e8 ae 89 fe ff       	call   c00007dc <strcmp>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	85 c0                	test   eax,eax
c0017e33:	75 0f                	jne    c0017e44 <CPU::detectFeatures()+0x2a2>
c0017e35:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e3f:	e9 35 01 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017e44:	50                   	push   eax
c0017e45:	50                   	push   eax
c0017e46:	68 49 7e 02 c0       	push   0xc0027e49
c0017e4b:	57                   	push   edi
c0017e4c:	e8 8b 89 fe ff       	call   c00007dc <strcmp>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	85 c0                	test   eax,eax
c0017e56:	75 0f                	jne    c0017e67 <CPU::detectFeatures()+0x2c5>
c0017e58:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017e62:	e9 12 01 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017e67:	51                   	push   ecx
c0017e68:	51                   	push   ecx
c0017e69:	68 56 7e 02 c0       	push   0xc0027e56
c0017e6e:	57                   	push   edi
c0017e6f:	e8 68 89 fe ff       	call   c00007dc <strcmp>
c0017e74:	83 c4 10             	add    esp,0x10
c0017e77:	85 c0                	test   eax,eax
c0017e79:	75 0f                	jne    c0017e8a <CPU::detectFeatures()+0x2e8>
c0017e7b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017e85:	e9 ef 00 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017e8a:	52                   	push   edx
c0017e8b:	52                   	push   edx
c0017e8c:	68 63 7e 02 c0       	push   0xc0027e63
c0017e91:	57                   	push   edi
c0017e92:	e8 45 89 fe ff       	call   c00007dc <strcmp>
c0017e97:	83 c4 10             	add    esp,0x10
c0017e9a:	85 c0                	test   eax,eax
c0017e9c:	75 0f                	jne    c0017ead <CPU::detectFeatures()+0x30b>
c0017e9e:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017ea8:	e9 cc 00 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017ead:	50                   	push   eax
c0017eae:	50                   	push   eax
c0017eaf:	68 70 7e 02 c0       	push   0xc0027e70
c0017eb4:	57                   	push   edi
c0017eb5:	e8 22 89 fe ff       	call   c00007dc <strcmp>
c0017eba:	83 c4 10             	add    esp,0x10
c0017ebd:	85 c0                	test   eax,eax
c0017ebf:	75 0f                	jne    c0017ed0 <CPU::detectFeatures()+0x32e>
c0017ec1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017ecb:	e9 a9 00 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017ed0:	50                   	push   eax
c0017ed1:	50                   	push   eax
c0017ed2:	68 7d 7e 02 c0       	push   0xc0027e7d
c0017ed7:	57                   	push   edi
c0017ed8:	e8 ff 88 fe ff       	call   c00007dc <strcmp>
c0017edd:	83 c4 10             	add    esp,0x10
c0017ee0:	85 c0                	test   eax,eax
c0017ee2:	75 0f                	jne    c0017ef3 <CPU::detectFeatures()+0x351>
c0017ee4:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017eee:	e9 86 00 00 00       	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017ef3:	50                   	push   eax
c0017ef4:	50                   	push   eax
c0017ef5:	68 8a 7e 02 c0       	push   0xc0027e8a
c0017efa:	57                   	push   edi
c0017efb:	e8 dc 88 fe ff       	call   c00007dc <strcmp>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	85 c0                	test   eax,eax
c0017f05:	75 0c                	jne    c0017f13 <CPU::detectFeatures()+0x371>
c0017f07:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017f11:	eb 66                	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017f13:	50                   	push   eax
c0017f14:	50                   	push   eax
c0017f15:	68 97 7e 02 c0       	push   0xc0027e97
c0017f1a:	57                   	push   edi
c0017f1b:	e8 bc 88 fe ff       	call   c00007dc <strcmp>
c0017f20:	83 c4 10             	add    esp,0x10
c0017f23:	85 c0                	test   eax,eax
c0017f25:	75 0c                	jne    c0017f33 <CPU::detectFeatures()+0x391>
c0017f27:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f31:	eb 46                	jmp    c0017f79 <CPU::detectFeatures()+0x3d7>
c0017f33:	50                   	push   eax
c0017f34:	50                   	push   eax
c0017f35:	68 a4 7e 02 c0       	push   0xc0027ea4
c0017f3a:	57                   	push   edi
c0017f3b:	e8 9c 88 fe ff       	call   c00007dc <strcmp>
c0017f40:	83 c4 10             	add    esp,0x10
c0017f43:	85 c0                	test   eax,eax
c0017f45:	74 e0                	je     c0017f27 <CPU::detectFeatures()+0x385>
c0017f47:	50                   	push   eax
c0017f48:	50                   	push   eax
c0017f49:	68 b1 7e 02 c0       	push   0xc0027eb1
c0017f4e:	57                   	push   edi
c0017f4f:	e8 88 88 fe ff       	call   c00007dc <strcmp>
c0017f54:	83 c4 10             	add    esp,0x10
c0017f57:	85 c0                	test   eax,eax
c0017f59:	74 cc                	je     c0017f27 <CPU::detectFeatures()+0x385>
c0017f5b:	51                   	push   ecx
c0017f5c:	51                   	push   ecx
c0017f5d:	68 be 7e 02 c0       	push   0xc0027ebe
c0017f62:	57                   	push   edi
c0017f63:	e8 74 88 fe ff       	call   c00007dc <strcmp>
c0017f68:	83 c4 10             	add    esp,0x10
c0017f6b:	85 c0                	test   eax,eax
c0017f6d:	74 b8                	je     c0017f27 <CPU::detectFeatures()+0x385>
c0017f6f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017f79:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017f7e:	0f 86 be 00 00 00    	jbe    c0018042 <CPU::detectFeatures()+0x4a0>
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	68 80 00 00 00       	push   0x80
c0017f8c:	e8 96 f8 ff ff       	call   c0017827 <cpuidCheckExtendedEBX(unsigned int)>
c0017f91:	83 e0 01             	and    eax,0x1
c0017f94:	c1 e0 06             	shl    eax,0x6
c0017f97:	88 c2                	mov    dl,al
c0017f99:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017f9f:	83 e0 bf             	and    eax,0xffffffbf
c0017fa2:	09 d0                	or     eax,edx
c0017fa4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017faa:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017fb1:	e8 71 f8 ff ff       	call   c0017827 <cpuidCheckExtendedEBX(unsigned int)>
c0017fb6:	83 e0 01             	and    eax,0x1
c0017fb9:	c1 e0 04             	shl    eax,0x4
c0017fbc:	88 c2                	mov    dl,al
c0017fbe:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017fc4:	83 e0 ef             	and    eax,0xffffffef
c0017fc7:	09 d0                	or     eax,edx
c0017fc9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017fcf:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017fd6:	e8 4c f8 ff ff       	call   c0017827 <cpuidCheckExtendedEBX(unsigned int)>
c0017fdb:	c1 e0 07             	shl    eax,0x7
c0017fde:	88 c2                	mov    dl,al
c0017fe0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fe6:	83 e0 7f             	and    eax,0x7f
c0017fe9:	09 d0                	or     eax,edx
c0017feb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017ff1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017ff8:	e8 57 f8 ff ff       	call   c0017854 <cpuidCheckExtendedECX(unsigned int)>
c0017ffd:	83 e0 01             	and    eax,0x1
c0018000:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018007:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001800d:	83 e0 f7             	and    eax,0xfffffff7
c0018010:	09 d0                	or     eax,edx
c0018012:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018018:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001801f:	e8 30 f8 ff ff       	call   c0017854 <cpuidCheckExtendedECX(unsigned int)>
c0018024:	83 c4 10             	add    esp,0x10
c0018027:	83 e0 01             	and    eax,0x1
c001802a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018031:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018037:	83 e0 fb             	and    eax,0xfffffffb
c001803a:	09 d0                	or     eax,edx
c001803c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018042:	83 ec 0c             	sub    esp,0xc
c0018045:	56                   	push   esi
c0018046:	55                   	push   ebp
c0018047:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001804b:	57                   	push   edi
c001804c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018050:	50                   	push   eax
c0018051:	6a 01                	push   0x1
c0018053:	e8 f2 f6 ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018058:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001805c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018062:	88 ca                	mov    dl,cl
c0018064:	83 e0 f0             	and    eax,0xfffffff0
c0018067:	83 e2 0f             	and    edx,0xf
c001806a:	09 d0                	or     eax,edx
c001806c:	88 ca                	mov    dl,cl
c001806e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018074:	c0 ea 04             	shr    dl,0x4
c0018077:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001807b:	0f b6 c2             	movzx  eax,dl
c001807e:	83 c4 20             	add    esp,0x20
c0018081:	c1 e0 06             	shl    eax,0x6
c0018084:	89 c5                	mov    ebp,eax
c0018086:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001808c:	66 25 3f c0          	and    ax,0xc03f
c0018090:	09 e8                	or     eax,ebp
c0018092:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018099:	89 c8                	mov    eax,ecx
c001809b:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00180a1:	c1 e8 08             	shr    eax,0x8
c00180a4:	83 e2 3f             	and    edx,0x3f
c00180a7:	83 e0 0f             	and    eax,0xf
c00180aa:	89 c5                	mov    ebp,eax
c00180ac:	c1 e5 06             	shl    ebp,0x6
c00180af:	09 d5                	or     ebp,edx
c00180b1:	89 ea                	mov    edx,ebp
c00180b3:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00180b9:	88 c2                	mov    dl,al
c00180bb:	c0 ea 02             	shr    dl,0x2
c00180be:	89 d5                	mov    ebp,edx
c00180c0:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00180c6:	83 e2 c0             	and    edx,0xffffffc0
c00180c9:	09 d5                	or     ebp,edx
c00180cb:	89 ea                	mov    edx,ebp
c00180cd:	89 cd                	mov    ebp,ecx
c00180cf:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00180d5:	c1 ed 0c             	shr    ebp,0xc
c00180d8:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00180de:	83 e5 03             	and    ebp,0x3
c00180e1:	83 e2 cf             	and    edx,0xffffffcf
c00180e4:	c1 e5 04             	shl    ebp,0x4
c00180e7:	09 d5                	or     ebp,edx
c00180e9:	3c 06                	cmp    al,0x6
c00180eb:	89 ea                	mov    edx,ebp
c00180ed:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00180f3:	74 04                	je     c00180f9 <CPU::detectFeatures()+0x557>
c00180f5:	3c 0f                	cmp    al,0xf
c00180f7:	75 5c                	jne    c0018155 <CPU::detectFeatures()+0x5b3>
c00180f9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00180fd:	89 cd                	mov    ebp,ecx
c00180ff:	c1 ed 10             	shr    ebp,0x10
c0018102:	c1 e5 04             	shl    ebp,0x4
c0018105:	09 ea                	or     edx,ebp
c0018107:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001810d:	0f b6 d2             	movzx  edx,dl
c0018110:	66 81 e5 3f c0       	and    bp,0xc03f
c0018115:	c1 e2 06             	shl    edx,0x6
c0018118:	09 ea                	or     edx,ebp
c001811a:	3c 0f                	cmp    al,0xf
c001811c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018123:	75 30                	jne    c0018155 <CPU::detectFeatures()+0x5b3>
c0018125:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001812b:	c1 e9 14             	shr    ecx,0x14
c001812e:	83 e0 3f             	and    eax,0x3f
c0018131:	83 c1 0f             	add    ecx,0xf
c0018134:	88 ca                	mov    dl,cl
c0018136:	c0 e9 02             	shr    cl,0x2
c0018139:	c1 e2 06             	shl    edx,0x6
c001813c:	09 d0                	or     eax,edx
c001813e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018144:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001814a:	83 e0 c0             	and    eax,0xffffffc0
c001814d:	09 c1                	or     ecx,eax
c001814f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001815f:	56                   	push   esi
c0018160:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018164:	50                   	push   eax
c0018165:	57                   	push   edi
c0018166:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001816a:	55                   	push   ebp
c001816b:	68 00 00 00 80       	push   0x80000000
c0018170:	e8 d5 f5 ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018175:	83 c4 20             	add    esp,0x20
c0018178:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018180:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018184:	76 1e                	jbe    c00181a4 <CPU::detectFeatures()+0x602>
c0018186:	83 ec 0c             	sub    esp,0xc
c0018189:	56                   	push   esi
c001818a:	50                   	push   eax
c001818b:	57                   	push   edi
c001818c:	55                   	push   ebp
c001818d:	68 01 00 00 80       	push   0x80000001
c0018192:	e8 b3 f5 ff ff       	call   c001774a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018197:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00181a1:	83 c4 20             	add    esp,0x20
c00181a4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00181aa:	83 f8 01             	cmp    eax,0x1
c00181ad:	75 6f                	jne    c001821e <CPU::detectFeatures()+0x67c>
c00181af:	51                   	push   ecx
c00181b0:	51                   	push   ecx
c00181b1:	68 ca 7e 02 c0       	push   0xc0027eca
c00181b6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00181ba:	56                   	push   esi
c00181bb:	e8 cb 85 fe ff       	call   c000078b <strcpy>
c00181c0:	5f                   	pop    edi
c00181c1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181c7:	5d                   	pop    ebp
c00181c8:	66 c1 e8 06          	shr    ax,0x6
c00181cc:	0f b6 c0             	movzx  eax,al
c00181cf:	50                   	push   eax
c00181d0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181d6:	c1 e8 0e             	shr    eax,0xe
c00181d9:	0f b6 c0             	movzx  eax,al
c00181dc:	50                   	push   eax
c00181dd:	e8 13 f2 ff ff       	call   c00173f5 <lookupIntelCPUName(unsigned char, unsigned char)>
c00181e2:	5a                   	pop    edx
c00181e3:	59                   	pop    ecx
c00181e4:	50                   	push   eax
c00181e5:	56                   	push   esi
c00181e6:	e8 57 86 fe ff       	call   c0000842 <strcat>
c00181eb:	5f                   	pop    edi
c00181ec:	5d                   	pop    ebp
c00181ed:	56                   	push   esi
c00181ee:	53                   	push   ebx
c00181ef:	e8 50 b6 ff ff       	call   c0013844 <Device::setName(char const*)>
c00181f4:	58                   	pop    eax
c00181f5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00181fb:	5a                   	pop    edx
c00181fc:	68 d1 7e 02 c0       	push   0xc0027ed1
c0018201:	50                   	push   eax
c0018202:	e8 d5 85 fe ff       	call   c00007dc <strcmp>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	85 c0                	test   eax,eax
c001820c:	0f 85 73 03 00 00    	jne    c0018585 <CPU::detectFeatures()+0x9e3>
c0018212:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018219:	e9 67 03 00 00       	jmp    c0018585 <CPU::detectFeatures()+0x9e3>
c001821e:	83 f8 02             	cmp    eax,0x2
c0018221:	0f 85 b5 00 00 00    	jne    c00182dc <CPU::detectFeatures()+0x73a>
c0018227:	57                   	push   edi
c0018228:	57                   	push   edi
c0018229:	68 e3 7e 02 c0       	push   0xc0027ee3
c001822e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018232:	56                   	push   esi
c0018233:	e8 53 85 fe ff       	call   c000078b <strcpy>
c0018238:	5d                   	pop    ebp
c0018239:	58                   	pop    eax
c001823a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018240:	66 c1 e8 06          	shr    ax,0x6
c0018244:	0f b6 c0             	movzx  eax,al
c0018247:	50                   	push   eax
c0018248:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001824e:	c1 e8 0e             	shr    eax,0xe
c0018251:	0f b6 c0             	movzx  eax,al
c0018254:	50                   	push   eax
c0018255:	e8 07 f0 ff ff       	call   c0017261 <lookupAMDCPUName(unsigned char, unsigned char)>
c001825a:	5a                   	pop    edx
c001825b:	59                   	pop    ecx
c001825c:	50                   	push   eax
c001825d:	56                   	push   esi
c001825e:	e8 df 85 fe ff       	call   c0000842 <strcat>
c0018263:	5f                   	pop    edi
c0018264:	5d                   	pop    ebp
c0018265:	56                   	push   esi
c0018266:	53                   	push   ebx
c0018267:	e8 d8 b5 ff ff       	call   c0013844 <Device::setName(char const*)>
c001826c:	58                   	pop    eax
c001826d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018273:	5a                   	pop    edx
c0018274:	68 e8 7e 02 c0       	push   0xc0027ee8
c0018279:	50                   	push   eax
c001827a:	e8 5d 85 fe ff       	call   c00007dc <strcmp>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	85 c0                	test   eax,eax
c0018284:	75 20                	jne    c00182a6 <CPU::detectFeatures()+0x704>
c0018286:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c001828c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018292:	a8 01                	test   al,0x1
c0018294:	74 10                	je     c00182a6 <CPU::detectFeatures()+0x704>
c0018296:	83 e0 fe             	and    eax,0xfffffffe
c0018299:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001829f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00182a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182ac:	c1 e8 0e             	shr    eax,0xe
c00182af:	3c 05                	cmp    al,0x5
c00182b1:	0f 85 ce 02 00 00    	jne    c0018585 <CPU::detectFeatures()+0x9e3>
c00182b7:	56                   	push   esi
c00182b8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00182be:	83 e0 0f             	and    eax,0xf
c00182c1:	50                   	push   eax
c00182c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182c8:	66 c1 e8 06          	shr    ax,0x6
c00182cc:	0f b6 c0             	movzx  eax,al
c00182cf:	50                   	push   eax
c00182d0:	6a 05                	push   0x5
c00182d2:	e8 00 f4 ff ff       	call   c00176d7 <AMD_K6_writeback(int, int, int)>
c00182d7:	e9 1f 02 00 00       	jmp    c00184fb <CPU::detectFeatures()+0x959>
c00182dc:	8d 50 fd             	lea    edx,[eax-0x3]
c00182df:	83 fa 01             	cmp    edx,0x1
c00182e2:	76 09                	jbe    c00182ed <CPU::detectFeatures()+0x74b>
c00182e4:	83 f8 06             	cmp    eax,0x6
c00182e7:	0f 85 91 01 00 00    	jne    c001847e <CPU::detectFeatures()+0x8dc>
c00182ed:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182f3:	c1 ea 0e             	shr    edx,0xe
c00182f6:	80 fa 05             	cmp    dl,0x5
c00182f9:	75 7b                	jne    c0018376 <CPU::detectFeatures()+0x7d4>
c00182fb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018301:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018306:	66 81 fa 00 01       	cmp    dx,0x100
c001830b:	75 0c                	jne    c0018319 <CPU::detectFeatures()+0x777>
c001830d:	51                   	push   ecx
c001830e:	51                   	push   ecx
c001830f:	68 ef 7e 02 c0       	push   0xc0027eef
c0018314:	e9 dc 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c0018319:	66 81 fa 00 02       	cmp    dx,0x200
c001831e:	75 0c                	jne    c001832c <CPU::detectFeatures()+0x78a>
c0018320:	52                   	push   edx
c0018321:	52                   	push   edx
c0018322:	68 02 7f 02 c0       	push   0xc0027f02
c0018327:	e9 c9 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c001832c:	66 81 fa 40 02       	cmp    dx,0x240
c0018331:	75 0c                	jne    c001833f <CPU::detectFeatures()+0x79d>
c0018333:	50                   	push   eax
c0018334:	50                   	push   eax
c0018335:	68 14 7f 02 c0       	push   0xc0027f14
c001833a:	e9 b6 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c001833f:	83 f8 06             	cmp    eax,0x6
c0018342:	75 0c                	jne    c0018350 <CPU::detectFeatures()+0x7ae>
c0018344:	50                   	push   eax
c0018345:	50                   	push   eax
c0018346:	68 26 7f 02 c0       	push   0xc0027f26
c001834b:	e9 a5 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c0018350:	83 f8 04             	cmp    eax,0x4
c0018353:	75 0c                	jne    c0018361 <CPU::detectFeatures()+0x7bf>
c0018355:	50                   	push   eax
c0018356:	50                   	push   eax
c0018357:	68 32 7f 02 c0       	push   0xc0027f32
c001835c:	e9 94 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c0018361:	83 f8 03             	cmp    eax,0x3
c0018364:	0f 85 1b 02 00 00    	jne    c0018585 <CPU::detectFeatures()+0x9e3>
c001836a:	50                   	push   eax
c001836b:	50                   	push   eax
c001836c:	68 3a 7f 02 c0       	push   0xc0027f3a
c0018371:	e9 7f 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c0018376:	80 fa 06             	cmp    dl,0x6
c0018379:	0f 85 db 00 00 00    	jne    c001845a <CPU::detectFeatures()+0x8b8>
c001837f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018385:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001838a:	66 81 fa 80 01       	cmp    dx,0x180
c001838f:	75 0c                	jne    c001839d <CPU::detectFeatures()+0x7fb>
c0018391:	50                   	push   eax
c0018392:	50                   	push   eax
c0018393:	68 45 7f 02 c0       	push   0xc0027f45
c0018398:	e9 58 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c001839d:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00183a3:	66 f7 c1 80 ff       	test   cx,0xff80
c00183a8:	75 0c                	jne    c00183b6 <CPU::detectFeatures()+0x814>
c00183aa:	50                   	push   eax
c00183ab:	50                   	push   eax
c00183ac:	68 55 7f 02 c0       	push   0xc0027f55
c00183b1:	e9 3f 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00183b6:	66 81 fa 40 02       	cmp    dx,0x240
c00183bb:	75 0c                	jne    c00183c9 <CPU::detectFeatures()+0x827>
c00183bd:	55                   	push   ebp
c00183be:	55                   	push   ebp
c00183bf:	68 5c 7f 02 c0       	push   0xc0027f5c
c00183c4:	e9 2c 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00183c9:	66 81 fa 80 02       	cmp    dx,0x280
c00183ce:	75 0c                	jne    c00183dc <CPU::detectFeatures()+0x83a>
c00183d0:	57                   	push   edi
c00183d1:	57                   	push   edi
c00183d2:	68 65 7f 02 c0       	push   0xc0027f65
c00183d7:	e9 19 01 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00183dc:	66 81 fa 40 03       	cmp    dx,0x340
c00183e1:	74 ed                	je     c00183d0 <CPU::detectFeatures()+0x82e>
c00183e3:	66 81 fa c0 03       	cmp    dx,0x3c0
c00183e8:	75 0c                	jne    c00183f6 <CPU::detectFeatures()+0x854>
c00183ea:	56                   	push   esi
c00183eb:	56                   	push   esi
c00183ec:	68 6c 7f 02 c0       	push   0xc0027f6c
c00183f1:	e9 ff 00 00 00       	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00183f6:	83 f8 06             	cmp    eax,0x6
c00183f9:	0f 84 45 ff ff ff    	je     c0018344 <CPU::detectFeatures()+0x7a2>
c00183ff:	83 f8 04             	cmp    eax,0x4
c0018402:	0f 84 4d ff ff ff    	je     c0018355 <CPU::detectFeatures()+0x7b3>
c0018408:	83 f8 03             	cmp    eax,0x3
c001840b:	0f 85 74 01 00 00    	jne    c0018585 <CPU::detectFeatures()+0x9e3>
c0018411:	51                   	push   ecx
c0018412:	51                   	push   ecx
c0018413:	68 75 7f 02 c0       	push   0xc0027f75
c0018418:	53                   	push   ebx
c0018419:	e8 26 b4 ff ff       	call   c0013844 <Device::setName(char const*)>
c001841e:	b1 c1                	mov    cl,0xc1
c0018420:	88 c8                	mov    al,cl
c0018422:	e6 22                	out    0x22,al
c0018424:	e4 23                	in     al,0x23
c0018426:	88 c2                	mov    dl,al
c0018428:	88 c8                	mov    al,cl
c001842a:	e6 22                	out    0x22,al
c001842c:	88 d0                	mov    al,dl
c001842e:	83 c8 10             	or     eax,0x10
c0018431:	e6 23                	out    0x23,al
c0018433:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001843a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001843d:	89 d0                	mov    eax,edx
c001843f:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018445:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018449:	40                   	inc    eax
c001844a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018450:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018455:	e9 a1 00 00 00       	jmp    c00184fb <CPU::detectFeatures()+0x959>
c001845a:	83 f8 06             	cmp    eax,0x6
c001845d:	0f 84 e1 fe ff ff    	je     c0018344 <CPU::detectFeatures()+0x7a2>
c0018463:	83 f8 04             	cmp    eax,0x4
c0018466:	0f 84 e9 fe ff ff    	je     c0018355 <CPU::detectFeatures()+0x7b3>
c001846c:	83 f8 03             	cmp    eax,0x3
c001846f:	0f 85 10 01 00 00    	jne    c0018585 <CPU::detectFeatures()+0x9e3>
c0018475:	52                   	push   edx
c0018476:	52                   	push   edx
c0018477:	68 80 7f 02 c0       	push   0xc0027f80
c001847c:	eb 77                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c001847e:	83 f8 07             	cmp    eax,0x7
c0018481:	75 09                	jne    c001848c <CPU::detectFeatures()+0x8ea>
c0018483:	50                   	push   eax
c0018484:	50                   	push   eax
c0018485:	68 8a 7f 02 c0       	push   0xc0027f8a
c001848a:	eb 69                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c001848c:	83 f8 0a             	cmp    eax,0xa
c001848f:	75 09                	jne    c001849a <CPU::detectFeatures()+0x8f8>
c0018491:	50                   	push   eax
c0018492:	50                   	push   eax
c0018493:	68 95 7f 02 c0       	push   0xc0027f95
c0018498:	eb 5b                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c001849a:	83 f8 0b             	cmp    eax,0xb
c001849d:	75 09                	jne    c00184a8 <CPU::detectFeatures()+0x906>
c001849f:	50                   	push   eax
c00184a0:	50                   	push   eax
c00184a1:	68 9d 7f 02 c0       	push   0xc0027f9d
c00184a6:	eb 4d                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00184a8:	83 f8 08             	cmp    eax,0x8
c00184ab:	75 09                	jne    c00184b6 <CPU::detectFeatures()+0x914>
c00184ad:	50                   	push   eax
c00184ae:	50                   	push   eax
c00184af:	68 a6 7f 02 c0       	push   0xc0027fa6
c00184b4:	eb 3f                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00184b6:	83 f8 09             	cmp    eax,0x9
c00184b9:	75 09                	jne    c00184c4 <CPU::detectFeatures()+0x922>
c00184bb:	50                   	push   eax
c00184bc:	50                   	push   eax
c00184bd:	68 ae 7f 02 c0       	push   0xc0027fae
c00184c2:	eb 31                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00184c4:	83 f8 05             	cmp    eax,0x5
c00184c7:	75 09                	jne    c00184d2 <CPU::detectFeatures()+0x930>
c00184c9:	50                   	push   eax
c00184ca:	50                   	push   eax
c00184cb:	68 b6 7f 02 c0       	push   0xc0027fb6
c00184d0:	eb 23                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00184d2:	83 f8 0c             	cmp    eax,0xc
c00184d5:	75 09                	jne    c00184e0 <CPU::detectFeatures()+0x93e>
c00184d7:	55                   	push   ebp
c00184d8:	55                   	push   ebp
c00184d9:	68 c4 7f 02 c0       	push   0xc0027fc4
c00184de:	eb 15                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00184e0:	83 f8 0d             	cmp    eax,0xd
c00184e3:	75 09                	jne    c00184ee <CPU::detectFeatures()+0x94c>
c00184e5:	57                   	push   edi
c00184e6:	57                   	push   edi
c00184e7:	68 cf 7f 02 c0       	push   0xc0027fcf
c00184ec:	eb 07                	jmp    c00184f5 <CPU::detectFeatures()+0x953>
c00184ee:	56                   	push   esi
c00184ef:	56                   	push   esi
c00184f0:	68 e3 7f 02 c0       	push   0xc0027fe3
c00184f5:	53                   	push   ebx
c00184f6:	e8 49 b3 ff ff       	call   c0013844 <Device::setName(char const*)>
c00184fb:	83 c4 10             	add    esp,0x10
c00184fe:	e9 82 00 00 00       	jmp    c0018585 <CPU::detectFeatures()+0x9e3>
c0018503:	51                   	push   ecx
c0018504:	51                   	push   ecx
c0018505:	68 2f 7e 02 c0       	push   0xc0027e2f
c001850a:	57                   	push   edi
c001850b:	e8 7b 82 fe ff       	call   c000078b <strcpy>
c0018510:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001851a:	e8 44 7d fe ff       	call   c0000263 <is486>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	85 c0                	test   eax,eax
c0018524:	74 2d                	je     c0018553 <CPU::detectFeatures()+0x9b1>
c0018526:	52                   	push   edx
c0018527:	52                   	push   edx
c0018528:	68 ef 7f 02 c0       	push   0xc0027fef
c001852d:	53                   	push   ebx
c001852e:	e8 11 b3 ff ff       	call   c0013844 <Device::setName(char const*)>
c0018533:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001853a:	e8 c9 ce 00 00       	call   c0025408 <CPU::readCR0()>
c001853f:	83 c4 10             	add    esp,0x10
c0018542:	83 e0 14             	and    eax,0x14
c0018545:	83 f8 04             	cmp    eax,0x4
c0018548:	75 1f                	jne    c0018569 <CPU::detectFeatures()+0x9c7>
c001854a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018551:	eb 32                	jmp    c0018585 <CPU::detectFeatures()+0x9e3>
c0018553:	50                   	push   eax
c0018554:	50                   	push   eax
c0018555:	68 fa 7f 02 c0       	push   0xc0027ffa
c001855a:	53                   	push   ebx
c001855b:	e8 e4 b2 ff ff       	call   c0013844 <Device::setName(char const*)>
c0018560:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018567:	eb d1                	jmp    c001853a <CPU::detectFeatures()+0x998>
c0018569:	e8 d0 7c fe ff       	call   c000023e <hasLegacyFPU>
c001856e:	83 e0 01             	and    eax,0x1
c0018571:	8d 14 00             	lea    edx,[eax+eax*1]
c0018574:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001857a:	83 e0 fd             	and    eax,0xfffffffd
c001857d:	09 d0                	or     eax,edx
c001857f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018585:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001858c:	83 c4 4c             	add    esp,0x4c
c001858f:	5b                   	pop    ebx
c0018590:	5e                   	pop    esi
c0018591:	5f                   	pop    edi
c0018592:	5d                   	pop    ebp
c0018593:	c3                   	ret    

c0018594 <CPU::setupSMEP()>:
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	e8 36 d1 00 00       	call   c00256d2 <CPU::readCR4()>
c001859c:	0d 00 00 10 00       	or     eax,0x100000
c00185a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185a5:	83 c4 0c             	add    esp,0xc
c00185a8:	e9 40 d1 00 00       	jmp    c00256ed <CPU::writeCR4(unsigned long)>
c00185ad:	90                   	nop

c00185ae <CPU::setupUMIP()>:
c00185ae:	83 ec 0c             	sub    esp,0xc
c00185b1:	e8 1c d1 00 00       	call   c00256d2 <CPU::readCR4()>
c00185b6:	80 cc 08             	or     ah,0x8
c00185b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185bd:	83 c4 0c             	add    esp,0xc
c00185c0:	e9 28 d1 00 00       	jmp    c00256ed <CPU::writeCR4(unsigned long)>
c00185c5:	90                   	nop

c00185c6 <CPU::setupTSC()>:
c00185c6:	83 ec 0c             	sub    esp,0xc
c00185c9:	e8 04 d1 00 00       	call   c00256d2 <CPU::readCR4()>
c00185ce:	83 c8 04             	or     eax,0x4
c00185d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185d5:	83 c4 0c             	add    esp,0xc
c00185d8:	e9 10 d1 00 00       	jmp    c00256ed <CPU::writeCR4(unsigned long)>
c00185dd:	90                   	nop

c00185de <CPU::setupLargePages()>:
c00185de:	83 ec 0c             	sub    esp,0xc
c00185e1:	e8 ec d0 00 00       	call   c00256d2 <CPU::readCR4()>
c00185e6:	83 c8 10             	or     eax,0x10
c00185e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185ed:	83 c4 0c             	add    esp,0xc
c00185f0:	e9 f8 d0 00 00       	jmp    c00256ed <CPU::writeCR4(unsigned long)>
c00185f5:	90                   	nop

c00185f6 <CPU::setupPAT()>:
c00185f6:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00185fb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018602:	74 2c                	je     c0018630 <CPU::setupPAT()+0x3a>
c0018604:	53                   	push   ebx
c0018605:	83 ec 10             	sub    esp,0x10
c0018608:	68 77 02 00 00       	push   0x277
c001860d:	50                   	push   eax
c001860e:	e8 f3 60 ff ff       	call   c000e706 <Computer::rdmsr(unsigned int)>
c0018613:	83 e2 f8             	and    edx,0xfffffff8
c0018616:	83 ca 01             	or     edx,0x1
c0018619:	52                   	push   edx
c001861a:	50                   	push   eax
c001861b:	68 77 02 00 00       	push   0x277
c0018620:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0018626:	e8 07 61 ff ff       	call   c000e732 <Computer::wrmsr(unsigned int, unsigned long long)>
c001862b:	83 c4 28             	add    esp,0x28
c001862e:	5b                   	pop    ebx
c001862f:	c3                   	ret    
c0018630:	c3                   	ret    
c0018631:	90                   	nop

c0018632 <CPU::setupMTRR()>:
c0018632:	c3                   	ret    
c0018633:	90                   	nop

c0018634 <CPU::setupGlobalPages()>:
c0018634:	83 ec 0c             	sub    esp,0xc
c0018637:	e8 96 d0 00 00       	call   c00256d2 <CPU::readCR4()>
c001863c:	0c 80                	or     al,0x80
c001863e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018642:	83 c4 0c             	add    esp,0xc
c0018645:	e9 a3 d0 00 00       	jmp    c00256ed <CPU::writeCR4(unsigned long)>

c001864a <CPU::allowUsermodeDataAccess()>:
c001864a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001864e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018655:	74 03                	je     c001865a <CPU::allowUsermodeDataAccess()+0x10>
c0018657:	0f 01 cb             	stac   
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <CPU::prohibitUsermodeDataAccess()>:
c001865c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018660:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018667:	74 03                	je     c001866c <CPU::prohibitUsermodeDataAccess()+0x10>
c0018669:	0f 01 ca             	clac   
c001866c:	c3                   	ret    
c001866d:	90                   	nop

c001866e <CPU::setupSMAP()>:
c001866e:	53                   	push   ebx
c001866f:	83 ec 08             	sub    esp,0x8
c0018672:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018676:	e8 57 d0 00 00       	call   c00256d2 <CPU::readCR4()>
c001867b:	83 ec 0c             	sub    esp,0xc
c001867e:	0d 00 00 20 00       	or     eax,0x200000
c0018683:	50                   	push   eax
c0018684:	e8 64 d0 00 00       	call   c00256ed <CPU::writeCR4(unsigned long)>
c0018689:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001868d:	83 c4 18             	add    esp,0x18
c0018690:	5b                   	pop    ebx
c0018691:	eb c9                	jmp    c001865c <CPU::prohibitUsermodeDataAccess()>
c0018693:	90                   	nop

c0018694 <CPU::setupFeatures()>:
c0018694:	53                   	push   ebx
c0018695:	83 ec 08             	sub    esp,0x8
c0018698:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001869c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00186a3:	74 0c                	je     c00186b1 <CPU::setupFeatures()+0x1d>
c00186a5:	83 ec 0c             	sub    esp,0xc
c00186a8:	53                   	push   ebx
c00186a9:	e8 e6 fe ff ff       	call   c0018594 <CPU::setupSMEP()>
c00186ae:	83 c4 10             	add    esp,0x10
c00186b1:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00186b8:	74 0c                	je     c00186c6 <CPU::setupFeatures()+0x32>
c00186ba:	83 ec 0c             	sub    esp,0xc
c00186bd:	53                   	push   ebx
c00186be:	e8 ab ff ff ff       	call   c001866e <CPU::setupSMAP()>
c00186c3:	83 c4 10             	add    esp,0x10
c00186c6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00186cd:	74 0c                	je     c00186db <CPU::setupFeatures()+0x47>
c00186cf:	83 ec 0c             	sub    esp,0xc
c00186d2:	53                   	push   ebx
c00186d3:	e8 d6 fe ff ff       	call   c00185ae <CPU::setupUMIP()>
c00186d8:	83 c4 10             	add    esp,0x10
c00186db:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186e2:	74 0c                	je     c00186f0 <CPU::setupFeatures()+0x5c>
c00186e4:	83 ec 0c             	sub    esp,0xc
c00186e7:	53                   	push   ebx
c00186e8:	e8 d9 fe ff ff       	call   c00185c6 <CPU::setupTSC()>
c00186ed:	83 c4 10             	add    esp,0x10
c00186f0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00186f7:	74 0c                	je     c0018705 <CPU::setupFeatures()+0x71>
c00186f9:	83 ec 0c             	sub    esp,0xc
c00186fc:	53                   	push   ebx
c00186fd:	e8 dc fe ff ff       	call   c00185de <CPU::setupLargePages()>
c0018702:	83 c4 10             	add    esp,0x10
c0018705:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001870c:	74 0c                	je     c001871a <CPU::setupFeatures()+0x86>
c001870e:	83 ec 0c             	sub    esp,0xc
c0018711:	53                   	push   ebx
c0018712:	e8 1d ff ff ff       	call   c0018634 <CPU::setupGlobalPages()>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018721:	74 0d                	je     c0018730 <CPU::setupFeatures()+0x9c>
c0018723:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018727:	83 c4 08             	add    esp,0x8
c001872a:	5b                   	pop    ebx
c001872b:	e9 c6 fe ff ff       	jmp    c00185f6 <CPU::setupPAT()>
c0018730:	83 c4 08             	add    esp,0x8
c0018733:	5b                   	pop    ebx
c0018734:	c3                   	ret    
c0018735:	90                   	nop

c0018736 <CPU::open(int, int, void*)>:
c0018736:	57                   	push   edi
c0018737:	56                   	push   esi
c0018738:	53                   	push   ebx
c0018739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001873d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018741:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018747:	83 ec 0c             	sub    esp,0xc
c001874a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018750:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018756:	50                   	push   eax
c0018757:	e8 96 62 ff ff       	call   c000e9f2 <GDT::setup()>
c001875c:	83 c4 0c             	add    esp,0xc
c001875f:	6a 00                	push   0x0
c0018761:	68 ef be ad de       	push   0xdeadbeef
c0018766:	57                   	push   edi
c0018767:	e8 ee 84 ff ff       	call   c0010c5a <TSS::setup(unsigned long, unsigned long)>
c001876c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001876f:	e8 c6 84 ff ff       	call   c0010c3a <TSS::flush()>
c0018774:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001877a:	89 04 24             	mov    DWORD PTR [esp],eax
c001877d:	e8 ca 64 ff ff       	call   c000ec4c <IDT::setup()>
c0018782:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0018789:	e8 56 cf 00 00       	call   c00256e4 <CPU::writeDR7(unsigned long)>
c001878e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018798:	e8 73 6f ff ff       	call   c000f710 <Phys::allocatePage()>
c001879d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00187a3:	89 30                	mov    DWORD PTR [eax],esi
c00187a5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00187ab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00187ae:	58                   	pop    eax
c00187af:	5a                   	pop    edx
c00187b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00187b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00187ba:	e8 69 94 ff ff       	call   c0011c28 <VAS::setCPUSpecific(unsigned long)>
c00187bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187c2:	e8 db f3 ff ff       	call   c0017ba2 <CPU::detectFeatures()>
c00187c7:	e8 81 c3 ff ff       	call   c0014b4d <setupInterruptController()>
c00187cc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00187d2:	a1 20 a4 02 c0       	mov    eax,ds:0xc002a420
c00187d7:	83 e0 10             	and    eax,0x10
c00187da:	83 f8 01             	cmp    eax,0x1
c00187dd:	19 c0                	sbb    eax,eax
c00187df:	83 e0 46             	and    eax,0x46
c00187e2:	83 c0 1e             	add    eax,0x1e
c00187e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00187e8:	e8 0b d7 ff ff       	call   c0015ef8 <setupTimer(int)>
c00187ed:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187f6:	e8 99 fe ff ff       	call   c0018694 <CPU::setupFeatures()>
c00187fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187fe:	e8 23 f1 ff ff       	call   c0017926 <CPU::displayFeatures()>
c0018803:	83 c4 10             	add    esp,0x10
c0018806:	31 c0                	xor    eax,eax
c0018808:	5b                   	pop    ebx
c0018809:	5e                   	pop    esi
c001880a:	5f                   	pop    edi
c001880b:	c3                   	ret    

c001880c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001880c:	57                   	push   edi
c001880d:	56                   	push   esi
c001880e:	53                   	push   ebx
c001880f:	51                   	push   ecx
c0018810:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018814:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018817:	0f 02 c0             	lar    eax,ax
c001881a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001881d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018821:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018824:	88 ca                	mov    dl,cl
c0018826:	c0 ea 06             	shr    dl,0x6
c0018829:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001882d:	89 ca                	mov    edx,ecx
c001882f:	66 c1 ea 03          	shr    dx,0x3
c0018833:	83 e2 07             	and    edx,0x7
c0018836:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001883b:	88 17                	mov    BYTE PTR [edi],dl
c001883d:	0f 84 a6 01 00 00    	je     c00189e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018843:	83 e1 07             	and    ecx,0x7
c0018846:	80 f9 04             	cmp    cl,0x4
c0018849:	0f 84 98 00 00 00    	je     c00188e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001884f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018854:	0f 95 c0             	setne  al
c0018857:	80 f9 05             	cmp    cl,0x5
c001885a:	0f 95 c2             	setne  dl
c001885d:	08 c2                	or     dl,al
c001885f:	74 79                	je     c00188da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018861:	84 c9                	test   cl,cl
c0018863:	75 05                	jne    c001886a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018865:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018868:	eb 3c                	jmp    c00188a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001886a:	80 f9 01             	cmp    cl,0x1
c001886d:	75 05                	jne    c0018874 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001886f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018872:	eb 32                	jmp    c00188a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018874:	80 f9 02             	cmp    cl,0x2
c0018877:	75 05                	jne    c001887e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018879:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001887c:	eb 28                	jmp    c00188a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001887e:	31 c0                	xor    eax,eax
c0018880:	80 f9 03             	cmp    cl,0x3
c0018883:	75 05                	jne    c001888a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018885:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018888:	eb 1c                	jmp    c00188a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001888a:	80 f9 05             	cmp    cl,0x5
c001888d:	75 05                	jne    c0018894 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001888f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018892:	eb 12                	jmp    c00188a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018894:	80 f9 06             	cmp    cl,0x6
c0018897:	75 05                	jne    c001889e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018899:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001889c:	eb 08                	jmp    c00188a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001889e:	80 f9 07             	cmp    cl,0x7
c00188a1:	75 03                	jne    c00188a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00188a3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00188a6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00188ab:	75 10                	jne    c00188bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00188ad:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00188b1:	b9 03 00 00 00       	mov    ecx,0x3
c00188b6:	01 d0                	add    eax,edx
c00188b8:	e9 37 01 00 00       	jmp    c00189f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188bd:	b9 02 00 00 00       	mov    ecx,0x2
c00188c2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00188c7:	0f 85 27 01 00 00    	jne    c00189f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188cd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00188d0:	b9 06 00 00 00       	mov    ecx,0x6
c00188d5:	e9 1a 01 00 00       	jmp    c00189f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188da:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00188dd:	b9 06 00 00 00       	mov    ecx,0x6
c00188e2:	e9 0f 01 00 00       	jmp    c00189f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00188e7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188ea:	88 ca                	mov    dl,cl
c00188ec:	c0 ea 06             	shr    dl,0x6
c00188ef:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188f3:	89 ca                	mov    edx,ecx
c00188f5:	66 c1 ea 03          	shr    dx,0x3
c00188f9:	83 e2 07             	and    edx,0x7
c00188fc:	80 e1 07             	and    cl,0x7
c00188ff:	75 05                	jne    c0018906 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0018901:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0018904:	eb 4c                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018906:	80 f9 01             	cmp    cl,0x1
c0018909:	75 05                	jne    c0018910 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001890b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001890e:	eb 42                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018910:	80 f9 02             	cmp    cl,0x2
c0018913:	75 05                	jne    c001891a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0018915:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0018918:	eb 38                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001891a:	80 f9 03             	cmp    cl,0x3
c001891d:	75 05                	jne    c0018924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001891f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018922:	eb 2e                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018924:	80 f9 04             	cmp    cl,0x4
c0018927:	75 12                	jne    c001893b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0018929:	f6 c4 60             	test   ah,0x60
c001892c:	75 08                	jne    c0018936 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001892e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018931:	8d 78 14             	lea    edi,[eax+0x14]
c0018934:	eb 1c                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018936:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0018939:	eb 17                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001893b:	80 f9 05             	cmp    cl,0x5
c001893e:	75 05                	jne    c0018945 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018940:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018943:	eb 0d                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018945:	80 f9 06             	cmp    cl,0x6
c0018948:	75 05                	jne    c001894f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001894a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001894d:	eb 03                	jmp    c0018952 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001894f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018952:	84 d2                	test   dl,dl
c0018954:	75 05                	jne    c001895b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0018956:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018959:	eb 3c                	jmp    c0018997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001895b:	80 fa 01             	cmp    dl,0x1
c001895e:	75 05                	jne    c0018965 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018960:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018963:	eb 32                	jmp    c0018997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018965:	80 fa 02             	cmp    dl,0x2
c0018968:	75 05                	jne    c001896f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001896a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001896d:	eb 28                	jmp    c0018997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001896f:	80 fa 03             	cmp    dl,0x3
c0018972:	75 05                	jne    c0018979 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0018974:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018977:	eb 1e                	jmp    c0018997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018979:	31 c0                	xor    eax,eax
c001897b:	80 fa 04             	cmp    dl,0x4
c001897e:	74 17                	je     c0018997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018980:	80 fa 05             	cmp    dl,0x5
c0018983:	75 05                	jne    c001898a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0018985:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018988:	eb 0d                	jmp    c0018997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001898a:	80 fa 06             	cmp    dl,0x6
c001898d:	75 05                	jne    c0018994 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001898f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018992:	eb 03                	jmp    c0018997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018994:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018997:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001899c:	0f 94 c2             	sete   dl
c001899f:	80 f9 05             	cmp    cl,0x5
c00189a2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00189a6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00189ab:	d3 e0                	shl    eax,cl
c00189ad:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00189b1:	74 0a                	je     c00189bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00189b3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189b6:	b9 07 00 00 00       	mov    ecx,0x7
c00189bb:	eb 37                	jmp    c00189f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189bd:	01 f8                	add    eax,edi
c00189bf:	b9 03 00 00 00       	mov    ecx,0x3
c00189c4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00189c9:	74 2b                	je     c00189f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189cb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00189d0:	75 0d                	jne    c00189df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00189d2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00189d6:	01 c8                	add    eax,ecx
c00189d8:	b9 04 00 00 00       	mov    ecx,0x4
c00189dd:	eb 17                	jmp    c00189f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189df:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189e2:	b9 07 00 00 00       	mov    ecx,0x7
c00189e7:	eb 0d                	jmp    c00189f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189e9:	b9 02 00 00 00       	mov    ecx,0x2
c00189ee:	b2 01                	mov    dl,0x1
c00189f0:	31 c0                	xor    eax,eax
c00189f2:	eb 02                	jmp    c00189f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189f4:	31 d2                	xor    edx,edx
c00189f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189fa:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a00:	88 11                	mov    BYTE PTR [ecx],dl
c0018a02:	5a                   	pop    edx
c0018a03:	5b                   	pop    ebx
c0018a04:	5e                   	pop    esi
c0018a05:	5f                   	pop    edi
c0018a06:	c3                   	ret    

c0018a07 <fpuInternalTo32(unsigned long long)>:
c0018a07:	57                   	push   edi
c0018a08:	56                   	push   esi
c0018a09:	53                   	push   ebx
c0018a0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a12:	89 d6                	mov    esi,edx
c0018a14:	89 d7                	mov    edi,edx
c0018a16:	89 c1                	mov    ecx,eax
c0018a18:	c1 ef 14             	shr    edi,0x14
c0018a1b:	89 d3                	mov    ebx,edx
c0018a1d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0018a23:	31 d2                	xor    edx,edx
c0018a25:	89 f8                	mov    eax,edi
c0018a27:	81 e6 00 00 00 80    	and    esi,0x80000000
c0018a2d:	bf ff 00 00 00       	mov    edi,0xff
c0018a32:	05 80 fc ff ff       	add    eax,0xfffffc80
c0018a37:	83 d2 ff             	adc    edx,0xffffffff
c0018a3a:	39 c7                	cmp    edi,eax
c0018a3c:	bf 00 00 00 00       	mov    edi,0x0
c0018a41:	19 d7                	sbb    edi,edx
c0018a43:	72 15                	jb     c0018a5a <fpuInternalTo32(unsigned long long)+0x53>
c0018a45:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0018a49:	c1 e0 17             	shl    eax,0x17
c0018a4c:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0018a52:	09 f1                	or     ecx,esi
c0018a54:	09 c1                	or     ecx,eax
c0018a56:	89 cf                	mov    edi,ecx
c0018a58:	eb 02                	jmp    c0018a5c <fpuInternalTo32(unsigned long long)+0x55>
c0018a5a:	31 ff                	xor    edi,edi
c0018a5c:	89 f8                	mov    eax,edi
c0018a5e:	5b                   	pop    ebx
c0018a5f:	5e                   	pop    esi
c0018a60:	5f                   	pop    edi
c0018a61:	c3                   	ret    

c0018a62 <fpuInternalTo64(unsigned long long)>:
c0018a62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a6a:	c3                   	ret    

c0018a6b <fpu32ToInternal(unsigned int)>:
c0018a6b:	57                   	push   edi
c0018a6c:	31 ff                	xor    edi,edi
c0018a6e:	56                   	push   esi
c0018a6f:	53                   	push   ebx
c0018a70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018a74:	89 cb                	mov    ebx,ecx
c0018a76:	89 ce                	mov    esi,ecx
c0018a78:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0018a7e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0018a84:	c1 e9 17             	shr    ecx,0x17
c0018a87:	89 f0                	mov    eax,esi
c0018a89:	0f b6 d1             	movzx  edx,cl
c0018a8c:	81 c2 80 03 00 00    	add    edx,0x380
c0018a92:	89 d1                	mov    ecx,edx
c0018a94:	89 fa                	mov    edx,edi
c0018a96:	c1 e1 14             	shl    ecx,0x14
c0018a99:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0018a9d:	c1 e0 1d             	shl    eax,0x1d
c0018aa0:	89 d7                	mov    edi,edx
c0018aa2:	89 c6                	mov    esi,eax
c0018aa4:	89 ca                	mov    edx,ecx
c0018aa6:	89 f0                	mov    eax,esi
c0018aa8:	09 fa                	or     edx,edi
c0018aaa:	09 da                	or     edx,ebx
c0018aac:	5b                   	pop    ebx
c0018aad:	5e                   	pop    esi
c0018aae:	5f                   	pop    edi
c0018aaf:	c3                   	ret    

c0018ab0 <fpu64ToInternal(unsigned long long)>:
c0018ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ab4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ab8:	c3                   	ret    

c0018ab9 <fpuFloatToLong(unsigned long long)>:
c0018ab9:	57                   	push   edi
c0018aba:	31 c0                	xor    eax,eax
c0018abc:	56                   	push   esi
c0018abd:	31 d2                	xor    edx,edx
c0018abf:	53                   	push   ebx
c0018ac0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018ac4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018ac8:	89 d9                	mov    ecx,ebx
c0018aca:	c1 e9 14             	shr    ecx,0x14
c0018acd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0018ad3:	89 cf                	mov    edi,ecx
c0018ad5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0018adb:	78 33                	js     c0018b10 <fpuFloatToLong(unsigned long long)+0x57>
c0018add:	89 d9                	mov    ecx,ebx
c0018adf:	89 f0                	mov    eax,esi
c0018ae1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0018ae7:	81 c9 00 00 10 00    	or     ecx,0x100000
c0018aed:	89 ca                	mov    edx,ecx
c0018aef:	b9 34 00 00 00       	mov    ecx,0x34
c0018af4:	29 f9                	sub    ecx,edi
c0018af6:	0f ad d0             	shrd   eax,edx,cl
c0018af9:	d3 fa                	sar    edx,cl
c0018afb:	f6 c1 20             	test   cl,0x20
c0018afe:	74 05                	je     c0018b05 <fpuFloatToLong(unsigned long long)+0x4c>
c0018b00:	89 d0                	mov    eax,edx
c0018b02:	c1 fa 1f             	sar    edx,0x1f
c0018b05:	85 db                	test   ebx,ebx
c0018b07:	79 07                	jns    c0018b10 <fpuFloatToLong(unsigned long long)+0x57>
c0018b09:	f7 d8                	neg    eax
c0018b0b:	83 d2 00             	adc    edx,0x0
c0018b0e:	f7 da                	neg    edx
c0018b10:	5b                   	pop    ebx
c0018b11:	5e                   	pop    esi
c0018b12:	5f                   	pop    edi
c0018b13:	c3                   	ret    

c0018b14 <fpuULongToFloat(unsigned long long)>:
c0018b14:	57                   	push   edi
c0018b15:	31 c9                	xor    ecx,ecx
c0018b17:	56                   	push   esi
c0018b18:	53                   	push   ebx
c0018b19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018b21:	0f ba e7 14          	bt     edi,0x14
c0018b25:	72 07                	jb     c0018b2e <fpuULongToFloat(unsigned long long)+0x1a>
c0018b27:	01 f6                	add    esi,esi
c0018b29:	11 ff                	adc    edi,edi
c0018b2b:	41                   	inc    ecx
c0018b2c:	eb f3                	jmp    c0018b21 <fpuULongToFloat(unsigned long long)+0xd>
c0018b2e:	89 fa                	mov    edx,edi
c0018b30:	89 f0                	mov    eax,esi
c0018b32:	bb 33 04 00 00       	mov    ebx,0x433
c0018b37:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0018b3d:	29 cb                	sub    ebx,ecx
c0018b3f:	89 d9                	mov    ecx,ebx
c0018b41:	5b                   	pop    ebx
c0018b42:	c1 e1 14             	shl    ecx,0x14
c0018b45:	5e                   	pop    esi
c0018b46:	09 ca                	or     edx,ecx
c0018b48:	5f                   	pop    edi
c0018b49:	c3                   	ret    

c0018b4a <fpuLongToFloat(long long)>:
c0018b4a:	56                   	push   esi
c0018b4b:	31 c0                	xor    eax,eax
c0018b4d:	53                   	push   ebx
c0018b4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018b56:	39 c8                	cmp    eax,ecx
c0018b58:	19 d8                	sbb    eax,ebx
c0018b5a:	7d 04                	jge    c0018b60 <fpuLongToFloat(long long)+0x16>
c0018b5c:	31 f6                	xor    esi,esi
c0018b5e:	eb 0c                	jmp    c0018b6c <fpuLongToFloat(long long)+0x22>
c0018b60:	f7 d9                	neg    ecx
c0018b62:	be 01 00 00 00       	mov    esi,0x1
c0018b67:	83 d3 00             	adc    ebx,0x0
c0018b6a:	f7 db                	neg    ebx
c0018b6c:	31 c0                	xor    eax,eax
c0018b6e:	0f ba e3 14          	bt     ebx,0x14
c0018b72:	72 07                	jb     c0018b7b <fpuLongToFloat(long long)+0x31>
c0018b74:	01 c9                	add    ecx,ecx
c0018b76:	11 db                	adc    ebx,ebx
c0018b78:	40                   	inc    eax
c0018b79:	eb f3                	jmp    c0018b6e <fpuLongToFloat(long long)+0x24>
c0018b7b:	ba 33 04 00 00       	mov    edx,0x433
c0018b80:	29 c2                	sub    edx,eax
c0018b82:	89 c8                	mov    eax,ecx
c0018b84:	c1 e2 14             	shl    edx,0x14
c0018b87:	89 d9                	mov    ecx,ebx
c0018b89:	89 f3                	mov    ebx,esi
c0018b8b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0018b91:	09 ca                	or     edx,ecx
c0018b93:	84 db                	test   bl,bl
c0018b95:	74 06                	je     c0018b9d <fpuLongToFloat(long long)+0x53>
c0018b97:	81 ca 00 00 00 80    	or     edx,0x80000000
c0018b9d:	5b                   	pop    ebx
c0018b9e:	5e                   	pop    esi
c0018b9f:	c3                   	ret    

c0018ba0 <fpuGet0()>:
c0018ba0:	31 c0                	xor    eax,eax
c0018ba2:	31 d2                	xor    edx,edx
c0018ba4:	c3                   	ret    

c0018ba5 <fpuGet1()>:
c0018ba5:	b8 01 00 00 00       	mov    eax,0x1
c0018baa:	31 d2                	xor    edx,edx
c0018bac:	c3                   	ret    

c0018bad <fpuGetPi()>:
c0018bad:	b8 03 00 00 00       	mov    eax,0x3
c0018bb2:	31 d2                	xor    edx,edx
c0018bb4:	c3                   	ret    

c0018bb5 <fpuGetLog2E()>:
c0018bb5:	83 ec 18             	sub    esp,0x18
c0018bb8:	68 34 80 02 c0       	push   0xc0028034
c0018bbd:	e8 42 0d 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0018bc2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018bc7:	31 d2                	xor    edx,edx
c0018bc9:	83 c4 1c             	add    esp,0x1c
c0018bcc:	c3                   	ret    

c0018bcd <fpuGetLogE2()>:
c0018bcd:	83 ec 18             	sub    esp,0x18
c0018bd0:	68 40 80 02 c0       	push   0xc0028040
c0018bd5:	e8 2a 0d 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0018bda:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018bdf:	31 d2                	xor    edx,edx
c0018be1:	83 c4 1c             	add    esp,0x1c
c0018be4:	c3                   	ret    

c0018be5 <fpuGetLog210()>:
c0018be5:	83 ec 18             	sub    esp,0x18
c0018be8:	68 4c 80 02 c0       	push   0xc002804c
c0018bed:	e8 12 0d 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0018bf2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018bf7:	31 d2                	xor    edx,edx
c0018bf9:	83 c4 1c             	add    esp,0x1c
c0018bfc:	c3                   	ret    

c0018bfd <fpuGetLog102()>:
c0018bfd:	83 ec 18             	sub    esp,0x18
c0018c00:	68 59 80 02 c0       	push   0xc0028059
c0018c05:	e8 fa 0c 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0018c0a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018c0f:	31 d2                	xor    edx,edx
c0018c11:	83 c4 1c             	add    esp,0x1c
c0018c14:	c3                   	ret    

c0018c15 <fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0018c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c19:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0018c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c21:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0018c25:	0f 92 c0             	setb   al
c0018c28:	c3                   	ret    

c0018c29 <fpuAreEqual(unsigned long long, unsigned long long)>:
c0018c29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c31:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0018c35:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0018c39:	09 c2                	or     edx,eax
c0018c3b:	0f 94 c0             	sete   al
c0018c3e:	c3                   	ret    

c0018c3f <fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0018c3f:	57                   	push   edi
c0018c40:	56                   	push   esi
c0018c41:	53                   	push   ebx
c0018c42:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018c46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018c4a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018c4e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018c52:	57                   	push   edi
c0018c53:	56                   	push   esi
c0018c54:	53                   	push   ebx
c0018c55:	51                   	push   ecx
c0018c56:	e8 ce ff ff ff       	call   c0018c29 <fpuAreEqual(unsigned long long, unsigned long long)>
c0018c5b:	83 c4 10             	add    esp,0x10
c0018c5e:	88 c2                	mov    dl,al
c0018c60:	31 c0                	xor    eax,eax
c0018c62:	84 d2                	test   dl,dl
c0018c64:	75 0c                	jne    c0018c72 <fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c0018c66:	57                   	push   edi
c0018c67:	56                   	push   esi
c0018c68:	53                   	push   ebx
c0018c69:	51                   	push   ecx
c0018c6a:	e8 a6 ff ff ff       	call   c0018c15 <fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0018c6f:	83 c4 10             	add    esp,0x10
c0018c72:	83 e0 01             	and    eax,0x1
c0018c75:	5b                   	pop    ebx
c0018c76:	88 c1                	mov    cl,al
c0018c78:	83 e2 01             	and    edx,0x1
c0018c7b:	a0 61 ae 02 c0       	mov    al,ds:0xc002ae61
c0018c80:	c1 e2 06             	shl    edx,0x6
c0018c83:	83 e0 ba             	and    eax,0xffffffba
c0018c86:	5e                   	pop    esi
c0018c87:	09 c8                	or     eax,ecx
c0018c89:	5f                   	pop    edi
c0018c8a:	09 d0                	or     eax,edx
c0018c8c:	a2 61 ae 02 c0       	mov    ds:0xc002ae61,al
c0018c91:	c3                   	ret    

c0018c92 <fpuAdd(unsigned long long, unsigned long long)>:
c0018c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c9a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0018c9e:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0018ca2:	c3                   	ret    

c0018ca3 <fpuAbs(unsigned long long)>:
c0018ca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ca7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cab:	c3                   	ret    

c0018cac <fpuChs(unsigned long long)>:
c0018cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018cb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cb4:	f7 d8                	neg    eax
c0018cb6:	83 d2 00             	adc    edx,0x0
c0018cb9:	f7 da                	neg    edx
c0018cbb:	c3                   	ret    

c0018cbc <fpuSub(unsigned long long, unsigned long long)>:
c0018cbc:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0018cc0:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0018cc5:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0018cc9:	eb c7                	jmp    c0018c92 <fpuAdd(unsigned long long, unsigned long long)>

c0018ccb <fpuMultiply(unsigned long long, unsigned long long)>:
c0018ccb:	53                   	push   ebx
c0018ccc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018cd8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018cdc:	0f af ca             	imul   ecx,edx
c0018cdf:	0f af d8             	imul   ebx,eax
c0018ce2:	f7 e2                	mul    edx
c0018ce4:	01 d9                	add    ecx,ebx
c0018ce6:	5b                   	pop    ebx
c0018ce7:	01 ca                	add    edx,ecx
c0018ce9:	c3                   	ret    

c0018cea <fpuDivide(unsigned long long, unsigned long long)>:
c0018cea:	83 ec 0c             	sub    esp,0xc
c0018ced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cfd:	e8 7a a6 00 00       	call   c002337c <__udivdi3>
c0018d02:	83 c4 1c             	add    esp,0x1c
c0018d05:	c3                   	ret    

c0018d06 <fpuSquare(unsigned long long)>:
c0018d06:	50                   	push   eax
c0018d07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d0f:	52                   	push   edx
c0018d10:	50                   	push   eax
c0018d11:	52                   	push   edx
c0018d12:	50                   	push   eax
c0018d13:	e8 b3 ff ff ff       	call   c0018ccb <fpuMultiply(unsigned long long, unsigned long long)>
c0018d18:	83 c4 14             	add    esp,0x14
c0018d1b:	c3                   	ret    

c0018d1c <fpuGetReg(int)>:
c0018d1c:	83 ec 0c             	sub    esp,0xc
c0018d1f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0018d24:	76 10                	jbe    c0018d36 <fpuGetReg(int)+0x1a>
c0018d26:	83 ec 0c             	sub    esp,0xc
c0018d29:	68 66 80 02 c0       	push   0xc0028066
c0018d2e:	e8 d1 0b 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0018d33:	83 c4 10             	add    esp,0x10
c0018d36:	a0 61 ae 02 c0       	mov    al,ds:0xc002ae61
c0018d3b:	b9 08 00 00 00       	mov    ecx,0x8
c0018d40:	c0 e8 03             	shr    al,0x3
c0018d43:	83 e0 07             	and    eax,0x7
c0018d46:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0018d4a:	99                   	cdq    
c0018d4b:	f7 f9                	idiv   ecx
c0018d4d:	8b 04 d5 64 ae 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd519c]
c0018d54:	8b 14 d5 68 ae 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5198]
c0018d5b:	83 c4 0c             	add    esp,0xc
c0018d5e:	c3                   	ret    

c0018d5f <fpuSetReg(int, unsigned long long)>:
c0018d5f:	57                   	push   edi
c0018d60:	56                   	push   esi
c0018d61:	52                   	push   edx
c0018d62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018d66:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018d6a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0018d6f:	76 10                	jbe    c0018d81 <fpuSetReg(int, unsigned long long)+0x22>
c0018d71:	83 ec 0c             	sub    esp,0xc
c0018d74:	68 79 80 02 c0       	push   0xc0028079
c0018d79:	e8 86 0b 00 00       	call   c0019904 <Krnl::panic(char const*)>
c0018d7e:	83 c4 10             	add    esp,0x10
c0018d81:	a0 61 ae 02 c0       	mov    al,ds:0xc002ae61
c0018d86:	b9 08 00 00 00       	mov    ecx,0x8
c0018d8b:	c0 e8 03             	shr    al,0x3
c0018d8e:	83 e0 07             	and    eax,0x7
c0018d91:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0018d95:	99                   	cdq    
c0018d96:	f7 f9                	idiv   ecx
c0018d98:	89 34 d5 64 ae 02 c0 	mov    DWORD PTR [edx*8-0x3ffd519c],esi
c0018d9f:	89 3c d5 68 ae 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5198],edi
c0018da6:	58                   	pop    eax
c0018da7:	5e                   	pop    esi
c0018da8:	5f                   	pop    edi
c0018da9:	c3                   	ret    

c0018daa <fpuPush(unsigned long long)>:
c0018daa:	a0 61 ae 02 c0       	mov    al,ds:0xc002ae61
c0018daf:	c0 e8 03             	shr    al,0x3
c0018db2:	83 e0 07             	and    eax,0x7
c0018db5:	83 c0 07             	add    eax,0x7
c0018db8:	88 c2                	mov    dl,al
c0018dba:	83 e0 07             	and    eax,0x7
c0018dbd:	83 e2 07             	and    edx,0x7
c0018dc0:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0018dc7:	8a 15 61 ae 02 c0    	mov    dl,BYTE PTR ds:0xc002ae61
c0018dcd:	83 e2 c7             	and    edx,0xffffffc7
c0018dd0:	09 ca                	or     edx,ecx
c0018dd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018dd6:	88 15 61 ae 02 c0    	mov    BYTE PTR ds:0xc002ae61,dl
c0018ddc:	89 0c c5 68 ae 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5198],ecx
c0018de3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018de7:	89 14 c5 64 ae 02 c0 	mov    DWORD PTR [eax*8-0x3ffd519c],edx
c0018dee:	a1 a4 ae 02 c0       	mov    eax,ds:0xc002aea4
c0018df3:	83 f8 08             	cmp    eax,0x8
c0018df6:	75 08                	jne    c0018e00 <fpuPush(unsigned long long)+0x56>
c0018df8:	80 0d 60 ae 02 c0 40 	or     BYTE PTR ds:0xc002ae60,0x40
c0018dff:	c3                   	ret    
c0018e00:	40                   	inc    eax
c0018e01:	a3 a4 ae 02 c0       	mov    ds:0xc002aea4,eax
c0018e06:	c3                   	ret    

c0018e07 <fpuPop()>:
c0018e07:	8a 0d 61 ae 02 c0    	mov    cl,BYTE PTR ds:0xc002ae61
c0018e0d:	53                   	push   ebx
c0018e0e:	c0 e9 03             	shr    cl,0x3
c0018e11:	8a 1d 61 ae 02 c0    	mov    bl,BYTE PTR ds:0xc002ae61
c0018e17:	83 e1 07             	and    ecx,0x7
c0018e1a:	83 e3 c7             	and    ebx,0xffffffc7
c0018e1d:	8b 04 cd 64 ae 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd519c]
c0018e24:	8b 14 cd 68 ae 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5198]
c0018e2b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0018e32:	83 e1 38             	and    ecx,0x38
c0018e35:	09 d9                	or     ecx,ebx
c0018e37:	88 0d 61 ae 02 c0    	mov    BYTE PTR ds:0xc002ae61,cl
c0018e3d:	8b 0d a4 ae 02 c0    	mov    ecx,DWORD PTR ds:0xc002aea4
c0018e43:	85 c9                	test   ecx,ecx
c0018e45:	74 09                	je     c0018e50 <fpuPop()+0x49>
c0018e47:	49                   	dec    ecx
c0018e48:	89 0d a4 ae 02 c0    	mov    DWORD PTR ds:0xc002aea4,ecx
c0018e4e:	eb 07                	jmp    c0018e57 <fpuPop()+0x50>
c0018e50:	80 0d 60 ae 02 c0 40 	or     BYTE PTR ds:0xc002ae60,0x40
c0018e57:	5b                   	pop    ebx
c0018e58:	c3                   	ret    

c0018e59 <x87Handler(regs*)>:
c0018e59:	55                   	push   ebp
c0018e5a:	57                   	push   edi
c0018e5b:	56                   	push   esi
c0018e5c:	53                   	push   ebx
c0018e5d:	83 ec 1c             	sub    esp,0x1c
c0018e60:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e64:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0018e69:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018e6c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0018e74:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0018e78:	50                   	push   eax
c0018e79:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0018e7d:	50                   	push   eax
c0018e7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e82:	50                   	push   eax
c0018e83:	53                   	push   ebx
c0018e84:	e8 83 f9 ff ff       	call   c001880c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0018e89:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0018e8c:	83 c4 10             	add    esp,0x10
c0018e8f:	89 c6                	mov    esi,eax
c0018e91:	80 fa d9             	cmp    dl,0xd9
c0018e94:	0f 85 52 01 00 00    	jne    c0018fec <x87Handler(regs*)+0x193>
c0018e9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018e9e:	8d 50 20             	lea    edx,[eax+0x20]
c0018ea1:	80 fa 0e             	cmp    dl,0xe
c0018ea4:	0f 87 86 00 00 00    	ja     c0018f30 <x87Handler(regs*)+0xd7>
c0018eaa:	0f b6 d2             	movzx  edx,dl
c0018ead:	ff 24 95 8c 80 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7f74]
c0018eb4:	e8 e7 fc ff ff       	call   c0018ba0 <fpuGet0()>
c0018eb9:	eb 05                	jmp    c0018ec0 <x87Handler(regs*)+0x67>
c0018ebb:	e8 e5 fc ff ff       	call   c0018ba5 <fpuGet1()>
c0018ec0:	57                   	push   edi
c0018ec1:	57                   	push   edi
c0018ec2:	52                   	push   edx
c0018ec3:	50                   	push   eax
c0018ec4:	e8 e1 fe ff ff       	call   c0018daa <fpuPush(unsigned long long)>
c0018ec9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	b0 01                	mov    al,0x1
c0018ed2:	e9 e3 09 00 00       	jmp    c00198ba <x87Handler(regs*)+0xa61>
c0018ed7:	83 ec 0c             	sub    esp,0xc
c0018eda:	6a 00                	push   0x0
c0018edc:	e8 3b fe ff ff       	call   c0018d1c <fpuGetReg(int)>
c0018ee1:	59                   	pop    ecx
c0018ee2:	5e                   	pop    esi
c0018ee3:	52                   	push   edx
c0018ee4:	50                   	push   eax
c0018ee5:	e8 c2 fd ff ff       	call   c0018cac <fpuChs(unsigned long long)>
c0018eea:	eb 13                	jmp    c0018eff <x87Handler(regs*)+0xa6>
c0018eec:	83 ec 0c             	sub    esp,0xc
c0018eef:	6a 00                	push   0x0
c0018ef1:	e8 26 fe ff ff       	call   c0018d1c <fpuGetReg(int)>
c0018ef6:	5f                   	pop    edi
c0018ef7:	5d                   	pop    ebp
c0018ef8:	52                   	push   edx
c0018ef9:	50                   	push   eax
c0018efa:	e8 a4 fd ff ff       	call   c0018ca3 <fpuAbs(unsigned long long)>
c0018eff:	83 c4 0c             	add    esp,0xc
c0018f02:	52                   	push   edx
c0018f03:	50                   	push   eax
c0018f04:	6a 00                	push   0x0
c0018f06:	e8 54 fe ff ff       	call   c0018d5f <fpuSetReg(int, unsigned long long)>
c0018f0b:	eb bc                	jmp    c0018ec9 <x87Handler(regs*)+0x70>
c0018f0d:	e8 d3 fc ff ff       	call   c0018be5 <fpuGetLog210()>
c0018f12:	eb ac                	jmp    c0018ec0 <x87Handler(regs*)+0x67>
c0018f14:	e8 9c fc ff ff       	call   c0018bb5 <fpuGetLog2E()>
c0018f19:	eb a5                	jmp    c0018ec0 <x87Handler(regs*)+0x67>
c0018f1b:	e8 8d fc ff ff       	call   c0018bad <fpuGetPi()>
c0018f20:	eb 9e                	jmp    c0018ec0 <x87Handler(regs*)+0x67>
c0018f22:	e8 d6 fc ff ff       	call   c0018bfd <fpuGetLog102()>
c0018f27:	eb 97                	jmp    c0018ec0 <x87Handler(regs*)+0x67>
c0018f29:	e8 9f fc ff ff       	call   c0018bcd <fpuGetLogE2()>
c0018f2e:	eb 90                	jmp    c0018ec0 <x87Handler(regs*)+0x67>
c0018f30:	8d 50 40             	lea    edx,[eax+0x40]
c0018f33:	80 fa 07             	cmp    dl,0x7
c0018f36:	77 15                	ja     c0018f4d <x87Handler(regs*)+0xf4>
c0018f38:	83 ec 0c             	sub    esp,0xc
c0018f3b:	2d c0 00 00 00       	sub    eax,0xc0
c0018f40:	50                   	push   eax
c0018f41:	e8 d6 fd ff ff       	call   c0018d1c <fpuGetReg(int)>
c0018f46:	59                   	pop    ecx
c0018f47:	5e                   	pop    esi
c0018f48:	e9 75 ff ff ff       	jmp    c0018ec2 <x87Handler(regs*)+0x69>
c0018f4d:	8d 50 38             	lea    edx,[eax+0x38]
c0018f50:	80 fa 07             	cmp    dl,0x7
c0018f53:	77 3c                	ja     c0018f91 <x87Handler(regs*)+0x138>
c0018f55:	83 ec 0c             	sub    esp,0xc
c0018f58:	2d c8 00 00 00       	sub    eax,0xc8
c0018f5d:	50                   	push   eax
c0018f5e:	e8 b9 fd ff ff       	call   c0018d1c <fpuGetReg(int)>
c0018f63:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018f6a:	89 c6                	mov    esi,eax
c0018f6c:	89 d7                	mov    edi,edx
c0018f6e:	e8 a9 fd ff ff       	call   c0018d1c <fpuGetReg(int)>
c0018f73:	83 c4 0c             	add    esp,0xc
c0018f76:	52                   	push   edx
c0018f77:	50                   	push   eax
c0018f78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018f7c:	2d c8 00 00 00       	sub    eax,0xc8
c0018f81:	50                   	push   eax
c0018f82:	e8 d8 fd ff ff       	call   c0018d5f <fpuSetReg(int, unsigned long long)>
c0018f87:	83 c4 0c             	add    esp,0xc
c0018f8a:	57                   	push   edi
c0018f8b:	56                   	push   esi
c0018f8c:	e9 73 ff ff ff       	jmp    c0018f04 <x87Handler(regs*)+0xab>
c0018f91:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018f95:	84 d2                	test   dl,dl
c0018f97:	75 0f                	jne    c0018fa8 <x87Handler(regs*)+0x14f>
c0018f99:	83 ec 0c             	sub    esp,0xc
c0018f9c:	ff 36                	push   DWORD PTR [esi]
c0018f9e:	e8 c8 fa ff ff       	call   c0018a6b <fpu32ToInternal(unsigned int)>
c0018fa3:	e9 bf 00 00 00       	jmp    c0019067 <x87Handler(regs*)+0x20e>
c0018fa8:	80 fa 03             	cmp    dl,0x3
c0018fab:	75 13                	jne    c0018fc0 <x87Handler(regs*)+0x167>
c0018fad:	e8 55 fe ff ff       	call   c0018e07 <fpuPop()>
c0018fb2:	55                   	push   ebp
c0018fb3:	55                   	push   ebp
c0018fb4:	52                   	push   edx
c0018fb5:	50                   	push   eax
c0018fb6:	e8 4c fa ff ff       	call   c0018a07 <fpuInternalTo32(unsigned long long)>
c0018fbb:	e9 88 00 00 00       	jmp    c0019048 <x87Handler(regs*)+0x1ef>
c0018fc0:	80 fa 05             	cmp    dl,0x5
c0018fc3:	75 0e                	jne    c0018fd3 <x87Handler(regs*)+0x17a>
c0018fc5:	66 8b 06             	mov    ax,WORD PTR [esi]
c0018fc8:	66 a3 62 ae 02 c0    	mov    ds:0xc002ae62,ax
c0018fce:	e9 df 00 00 00       	jmp    c00190b2 <x87Handler(regs*)+0x259>
c0018fd3:	31 c0                	xor    eax,eax
c0018fd5:	80 fa 07             	cmp    dl,0x7
c0018fd8:	0f 85 dc 08 00 00    	jne    c00198ba <x87Handler(regs*)+0xa61>
c0018fde:	66 a1 62 ae 02 c0    	mov    ax,ds:0xc002ae62
c0018fe4:	66 89 06             	mov    WORD PTR [esi],ax
c0018fe7:	e9 c6 00 00 00       	jmp    c00190b2 <x87Handler(regs*)+0x259>
c0018fec:	80 fa d8             	cmp    dl,0xd8
c0018fef:	0f 84 c9 00 00 00    	je     c00190be <x87Handler(regs*)+0x265>
c0018ff5:	80 fa dc             	cmp    dl,0xdc
c0018ff8:	0f 84 0d 02 00 00    	je     c001920b <x87Handler(regs*)+0x3b2>
c0018ffe:	80 fa de             	cmp    dl,0xde
c0019001:	0f 84 cd 02 00 00    	je     c00192d4 <x87Handler(regs*)+0x47b>
c0019007:	80 fa dd             	cmp    dl,0xdd
c001900a:	0f 84 5f 04 00 00    	je     c001946f <x87Handler(regs*)+0x616>
c0019010:	80 fa da             	cmp    dl,0xda
c0019013:	0f 84 24 05 00 00    	je     c001953d <x87Handler(regs*)+0x6e4>
c0019019:	80 fa df             	cmp    dl,0xdf
c001901c:	0f 84 68 05 00 00    	je     c001958a <x87Handler(regs*)+0x731>
c0019022:	31 c0                	xor    eax,eax
c0019024:	80 fa db             	cmp    dl,0xdb
c0019027:	0f 85 8d 08 00 00    	jne    c00198ba <x87Handler(regs*)+0xa61>
c001902d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019031:	80 fa 03             	cmp    dl,0x3
c0019034:	0f 85 70 06 00 00    	jne    c00196aa <x87Handler(regs*)+0x851>
c001903a:	e8 c8 fd ff ff       	call   c0018e07 <fpuPop()>
c001903f:	55                   	push   ebp
c0019040:	55                   	push   ebp
c0019041:	52                   	push   edx
c0019042:	50                   	push   eax
c0019043:	e8 71 fa ff ff       	call   c0018ab9 <fpuFloatToLong(unsigned long long)>
c0019048:	83 c4 10             	add    esp,0x10
c001904b:	89 06                	mov    DWORD PTR [esi],eax
c001904d:	eb 63                	jmp    c00190b2 <x87Handler(regs*)+0x259>
c001904f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019053:	84 d2                	test   dl,dl
c0019055:	0f 85 e6 05 00 00    	jne    c0019641 <x87Handler(regs*)+0x7e8>
c001905b:	57                   	push   edi
c001905c:	57                   	push   edi
c001905d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019060:	ff 36                	push   DWORD PTR [esi]
c0019062:	e8 49 fa ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c0019067:	5e                   	pop    esi
c0019068:	5f                   	pop    edi
c0019069:	52                   	push   edx
c001906a:	50                   	push   eax
c001906b:	e8 3a fd ff ff       	call   c0018daa <fpuPush(unsigned long long)>
c0019070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019074:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019077:	e9 51 fe ff ff       	jmp    c0018ecd <x87Handler(regs*)+0x74>
c001907c:	80 fa 03             	cmp    dl,0x3
c001907f:	0f 85 d7 06 00 00    	jne    c001975c <x87Handler(regs*)+0x903>
c0019085:	57                   	push   edi
c0019086:	57                   	push   edi
c0019087:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001908a:	ff 36                	push   DWORD PTR [esi]
c001908c:	e8 1f fa ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c0019091:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019098:	89 c6                	mov    esi,eax
c001909a:	89 d7                	mov    edi,edx
c001909c:	e8 7b fc ff ff       	call   c0018d1c <fpuGetReg(int)>
c00190a1:	57                   	push   edi
c00190a2:	56                   	push   esi
c00190a3:	52                   	push   edx
c00190a4:	50                   	push   eax
c00190a5:	e8 95 fb ff ff       	call   c0018c3f <fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00190aa:	83 c4 20             	add    esp,0x20
c00190ad:	e8 55 fd ff ff       	call   c0018e07 <fpuPop()>
c00190b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190b6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00190b9:	e9 12 fe ff ff       	jmp    c0018ed0 <x87Handler(regs*)+0x77>
c00190be:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00190c2:	8d 50 40             	lea    edx,[eax+0x40]
c00190c5:	80 fa 07             	cmp    dl,0x7
c00190c8:	77 29                	ja     c00190f3 <x87Handler(regs*)+0x29a>
c00190ca:	83 ec 0c             	sub    esp,0xc
c00190cd:	2d c0 00 00 00       	sub    eax,0xc0
c00190d2:	50                   	push   eax
c00190d3:	e8 44 fc ff ff       	call   c0018d1c <fpuGetReg(int)>
c00190d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00190df:	89 c6                	mov    esi,eax
c00190e1:	89 d7                	mov    edi,edx
c00190e3:	e8 34 fc ff ff       	call   c0018d1c <fpuGetReg(int)>
c00190e8:	57                   	push   edi
c00190e9:	56                   	push   esi
c00190ea:	52                   	push   edx
c00190eb:	50                   	push   eax
c00190ec:	e8 a1 fb ff ff       	call   c0018c92 <fpuAdd(unsigned long long, unsigned long long)>
c00190f1:	eb 2f                	jmp    c0019122 <x87Handler(regs*)+0x2c9>
c00190f3:	8d 50 38             	lea    edx,[eax+0x38]
c00190f6:	80 fa 07             	cmp    dl,0x7
c00190f9:	77 2f                	ja     c001912a <x87Handler(regs*)+0x2d1>
c00190fb:	83 ec 0c             	sub    esp,0xc
c00190fe:	2d c8 00 00 00       	sub    eax,0xc8
c0019103:	50                   	push   eax
c0019104:	e8 13 fc ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019109:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019110:	89 c6                	mov    esi,eax
c0019112:	89 d7                	mov    edi,edx
c0019114:	e8 03 fc ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019119:	57                   	push   edi
c001911a:	56                   	push   esi
c001911b:	52                   	push   edx
c001911c:	50                   	push   eax
c001911d:	e8 a9 fb ff ff       	call   c0018ccb <fpuMultiply(unsigned long long, unsigned long long)>
c0019122:	83 c4 1c             	add    esp,0x1c
c0019125:	e9 d8 fd ff ff       	jmp    c0018f02 <x87Handler(regs*)+0xa9>
c001912a:	8d 50 30             	lea    edx,[eax+0x30]
c001912d:	80 fa 07             	cmp    dl,0x7
c0019130:	77 0d                	ja     c001913f <x87Handler(regs*)+0x2e6>
c0019132:	83 ec 0c             	sub    esp,0xc
c0019135:	2d d0 00 00 00       	sub    eax,0xd0
c001913a:	e9 99 03 00 00       	jmp    c00194d8 <x87Handler(regs*)+0x67f>
c001913f:	8d 50 28             	lea    edx,[eax+0x28]
c0019142:	80 fa 07             	cmp    dl,0x7
c0019145:	77 0d                	ja     c0019154 <x87Handler(regs*)+0x2fb>
c0019147:	83 ec 0c             	sub    esp,0xc
c001914a:	2d d8 00 00 00       	sub    eax,0xd8
c001914f:	e9 c0 03 00 00       	jmp    c0019514 <x87Handler(regs*)+0x6bb>
c0019154:	8d 50 20             	lea    edx,[eax+0x20]
c0019157:	80 fa 07             	cmp    dl,0x7
c001915a:	77 1b                	ja     c0019177 <x87Handler(regs*)+0x31e>
c001915c:	83 ec 0c             	sub    esp,0xc
c001915f:	2d e0 00 00 00       	sub    eax,0xe0
c0019164:	50                   	push   eax
c0019165:	e8 b2 fb ff ff       	call   c0018d1c <fpuGetReg(int)>
c001916a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019171:	89 c6                	mov    esi,eax
c0019173:	89 d7                	mov    edi,edx
c0019175:	eb 22                	jmp    c0019199 <x87Handler(regs*)+0x340>
c0019177:	8d 50 18             	lea    edx,[eax+0x18]
c001917a:	80 fa 07             	cmp    dl,0x7
c001917d:	77 2d                	ja     c00191ac <x87Handler(regs*)+0x353>
c001917f:	83 ec 0c             	sub    esp,0xc
c0019182:	6a 00                	push   0x0
c0019184:	e8 93 fb ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019189:	89 c6                	mov    esi,eax
c001918b:	89 d7                	mov    edi,edx
c001918d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019191:	2d e8 00 00 00       	sub    eax,0xe8
c0019196:	89 04 24             	mov    DWORD PTR [esp],eax
c0019199:	e8 7e fb ff ff       	call   c0018d1c <fpuGetReg(int)>
c001919e:	57                   	push   edi
c001919f:	56                   	push   esi
c00191a0:	52                   	push   edx
c00191a1:	50                   	push   eax
c00191a2:	e8 15 fb ff ff       	call   c0018cbc <fpuSub(unsigned long long, unsigned long long)>
c00191a7:	e9 76 ff ff ff       	jmp    c0019122 <x87Handler(regs*)+0x2c9>
c00191ac:	8d 50 10             	lea    edx,[eax+0x10]
c00191af:	80 fa 07             	cmp    dl,0x7
c00191b2:	77 1b                	ja     c00191cf <x87Handler(regs*)+0x376>
c00191b4:	83 ec 0c             	sub    esp,0xc
c00191b7:	2d f0 00 00 00       	sub    eax,0xf0
c00191bc:	50                   	push   eax
c00191bd:	e8 5a fb ff ff       	call   c0018d1c <fpuGetReg(int)>
c00191c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00191c9:	89 c6                	mov    esi,eax
c00191cb:	89 d7                	mov    edi,edx
c00191cd:	eb 22                	jmp    c00191f1 <x87Handler(regs*)+0x398>
c00191cf:	3c f7                	cmp    al,0xf7
c00191d1:	0f 86 d1 03 00 00    	jbe    c00195a8 <x87Handler(regs*)+0x74f>
c00191d7:	83 ec 0c             	sub    esp,0xc
c00191da:	6a 00                	push   0x0
c00191dc:	e8 3b fb ff ff       	call   c0018d1c <fpuGetReg(int)>
c00191e1:	89 c6                	mov    esi,eax
c00191e3:	89 d7                	mov    edi,edx
c00191e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00191e9:	2d f8 00 00 00       	sub    eax,0xf8
c00191ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00191f1:	e8 26 fb ff ff       	call   c0018d1c <fpuGetReg(int)>
c00191f6:	57                   	push   edi
c00191f7:	56                   	push   esi
c00191f8:	52                   	push   edx
c00191f9:	50                   	push   eax
c00191fa:	e8 eb fa ff ff       	call   c0018cea <fpuDivide(unsigned long long, unsigned long long)>
c00191ff:	83 c4 1c             	add    esp,0x1c
c0019202:	52                   	push   edx
c0019203:	50                   	push   eax
c0019204:	6a 00                	push   0x0
c0019206:	e9 51 02 00 00       	jmp    c001945c <x87Handler(regs*)+0x603>
c001920b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001920f:	8d 50 40             	lea    edx,[eax+0x40]
c0019212:	80 fa 07             	cmp    dl,0x7
c0019215:	77 37                	ja     c001924e <x87Handler(regs*)+0x3f5>
c0019217:	83 ec 0c             	sub    esp,0xc
c001921a:	2d c0 00 00 00       	sub    eax,0xc0
c001921f:	50                   	push   eax
c0019220:	e8 f7 fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019225:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001922c:	89 c6                	mov    esi,eax
c001922e:	89 d7                	mov    edi,edx
c0019230:	e8 e7 fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019235:	57                   	push   edi
c0019236:	56                   	push   esi
c0019237:	52                   	push   edx
c0019238:	50                   	push   eax
c0019239:	e8 54 fa ff ff       	call   c0018c92 <fpuAdd(unsigned long long, unsigned long long)>
c001923e:	83 c4 1c             	add    esp,0x1c
c0019241:	52                   	push   edx
c0019242:	50                   	push   eax
c0019243:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019247:	2d c0 00 00 00       	sub    eax,0xc0
c001924c:	eb 3d                	jmp    c001928b <x87Handler(regs*)+0x432>
c001924e:	8d 50 38             	lea    edx,[eax+0x38]
c0019251:	80 fa 07             	cmp    dl,0x7
c0019254:	77 3b                	ja     c0019291 <x87Handler(regs*)+0x438>
c0019256:	83 ec 0c             	sub    esp,0xc
c0019259:	2d c8 00 00 00       	sub    eax,0xc8
c001925e:	50                   	push   eax
c001925f:	e8 b8 fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019264:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001926b:	89 c6                	mov    esi,eax
c001926d:	89 d7                	mov    edi,edx
c001926f:	e8 a8 fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019274:	57                   	push   edi
c0019275:	56                   	push   esi
c0019276:	52                   	push   edx
c0019277:	50                   	push   eax
c0019278:	e8 4e fa ff ff       	call   c0018ccb <fpuMultiply(unsigned long long, unsigned long long)>
c001927d:	83 c4 1c             	add    esp,0x1c
c0019280:	52                   	push   edx
c0019281:	50                   	push   eax
c0019282:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019286:	2d c8 00 00 00       	sub    eax,0xc8
c001928b:	50                   	push   eax
c001928c:	e9 75 fc ff ff       	jmp    c0018f06 <x87Handler(regs*)+0xad>
c0019291:	83 c0 18             	add    eax,0x18
c0019294:	3c 07                	cmp    al,0x7
c0019296:	0f 87 3b 04 00 00    	ja     c00196d7 <x87Handler(regs*)+0x87e>
c001929c:	83 ec 0c             	sub    esp,0xc
c001929f:	6a 00                	push   0x0
c00192a1:	e8 76 fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c00192a6:	89 c6                	mov    esi,eax
c00192a8:	89 d7                	mov    edi,edx
c00192aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00192ae:	2d e8 00 00 00       	sub    eax,0xe8
c00192b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00192b6:	e8 61 fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c00192bb:	57                   	push   edi
c00192bc:	56                   	push   esi
c00192bd:	52                   	push   edx
c00192be:	50                   	push   eax
c00192bf:	e8 f8 f9 ff ff       	call   c0018cbc <fpuSub(unsigned long long, unsigned long long)>
c00192c4:	83 c4 1c             	add    esp,0x1c
c00192c7:	52                   	push   edx
c00192c8:	50                   	push   eax
c00192c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00192cd:	2d e8 00 00 00       	sub    eax,0xe8
c00192d2:	eb b7                	jmp    c001928b <x87Handler(regs*)+0x432>
c00192d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00192d8:	8d 50 40             	lea    edx,[eax+0x40]
c00192db:	80 fa 07             	cmp    dl,0x7
c00192de:	77 3a                	ja     c001931a <x87Handler(regs*)+0x4c1>
c00192e0:	83 ec 0c             	sub    esp,0xc
c00192e3:	2d c0 00 00 00       	sub    eax,0xc0
c00192e8:	50                   	push   eax
c00192e9:	e8 2e fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c00192ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00192f5:	89 c6                	mov    esi,eax
c00192f7:	89 d7                	mov    edi,edx
c00192f9:	e8 1e fa ff ff       	call   c0018d1c <fpuGetReg(int)>
c00192fe:	57                   	push   edi
c00192ff:	56                   	push   esi
c0019300:	52                   	push   edx
c0019301:	50                   	push   eax
c0019302:	e8 8b f9 ff ff       	call   c0018c92 <fpuAdd(unsigned long long, unsigned long long)>
c0019307:	83 c4 1c             	add    esp,0x1c
c001930a:	52                   	push   edx
c001930b:	50                   	push   eax
c001930c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019310:	2d c0 00 00 00       	sub    eax,0xc0
c0019315:	e9 9e 01 00 00       	jmp    c00194b8 <x87Handler(regs*)+0x65f>
c001931a:	8d 50 20             	lea    edx,[eax+0x20]
c001931d:	80 fa 07             	cmp    dl,0x7
c0019320:	77 3a                	ja     c001935c <x87Handler(regs*)+0x503>
c0019322:	83 ec 0c             	sub    esp,0xc
c0019325:	2d e0 00 00 00       	sub    eax,0xe0
c001932a:	50                   	push   eax
c001932b:	e8 ec f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019330:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019337:	89 c6                	mov    esi,eax
c0019339:	89 d7                	mov    edi,edx
c001933b:	e8 dc f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019340:	57                   	push   edi
c0019341:	56                   	push   esi
c0019342:	52                   	push   edx
c0019343:	50                   	push   eax
c0019344:	e8 73 f9 ff ff       	call   c0018cbc <fpuSub(unsigned long long, unsigned long long)>
c0019349:	83 c4 1c             	add    esp,0x1c
c001934c:	52                   	push   edx
c001934d:	50                   	push   eax
c001934e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019352:	2d e0 00 00 00       	sub    eax,0xe0
c0019357:	e9 5c 01 00 00       	jmp    c00194b8 <x87Handler(regs*)+0x65f>
c001935c:	8d 50 18             	lea    edx,[eax+0x18]
c001935f:	80 fa 07             	cmp    dl,0x7
c0019362:	77 3b                	ja     c001939f <x87Handler(regs*)+0x546>
c0019364:	83 ec 0c             	sub    esp,0xc
c0019367:	6a 00                	push   0x0
c0019369:	e8 ae f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c001936e:	89 c6                	mov    esi,eax
c0019370:	89 d7                	mov    edi,edx
c0019372:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019376:	2d e8 00 00 00       	sub    eax,0xe8
c001937b:	89 04 24             	mov    DWORD PTR [esp],eax
c001937e:	e8 99 f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019383:	57                   	push   edi
c0019384:	56                   	push   esi
c0019385:	52                   	push   edx
c0019386:	50                   	push   eax
c0019387:	e8 30 f9 ff ff       	call   c0018cbc <fpuSub(unsigned long long, unsigned long long)>
c001938c:	83 c4 1c             	add    esp,0x1c
c001938f:	52                   	push   edx
c0019390:	50                   	push   eax
c0019391:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019395:	2d e8 00 00 00       	sub    eax,0xe8
c001939a:	e9 19 01 00 00       	jmp    c00194b8 <x87Handler(regs*)+0x65f>
c001939f:	8d 50 38             	lea    edx,[eax+0x38]
c00193a2:	80 fa 07             	cmp    dl,0x7
c00193a5:	77 37                	ja     c00193de <x87Handler(regs*)+0x585>
c00193a7:	83 ec 0c             	sub    esp,0xc
c00193aa:	2d c8 00 00 00       	sub    eax,0xc8
c00193af:	50                   	push   eax
c00193b0:	e8 67 f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00193b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00193bc:	89 c6                	mov    esi,eax
c00193be:	89 d7                	mov    edi,edx
c00193c0:	e8 57 f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00193c5:	57                   	push   edi
c00193c6:	56                   	push   esi
c00193c7:	52                   	push   edx
c00193c8:	50                   	push   eax
c00193c9:	e8 fd f8 ff ff       	call   c0018ccb <fpuMultiply(unsigned long long, unsigned long long)>
c00193ce:	83 c4 1c             	add    esp,0x1c
c00193d1:	52                   	push   edx
c00193d2:	50                   	push   eax
c00193d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00193d7:	2d c8 00 00 00       	sub    eax,0xc8
c00193dc:	eb 7d                	jmp    c001945b <x87Handler(regs*)+0x602>
c00193de:	3c f7                	cmp    al,0xf7
c00193e0:	76 38                	jbe    c001941a <x87Handler(regs*)+0x5c1>
c00193e2:	83 ec 0c             	sub    esp,0xc
c00193e5:	6a 00                	push   0x0
c00193e7:	e8 30 f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00193ec:	89 c6                	mov    esi,eax
c00193ee:	89 d7                	mov    edi,edx
c00193f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00193f4:	2d f8 00 00 00       	sub    eax,0xf8
c00193f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00193fc:	e8 1b f9 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019401:	57                   	push   edi
c0019402:	56                   	push   esi
c0019403:	52                   	push   edx
c0019404:	50                   	push   eax
c0019405:	e8 e0 f8 ff ff       	call   c0018cea <fpuDivide(unsigned long long, unsigned long long)>
c001940a:	83 c4 1c             	add    esp,0x1c
c001940d:	52                   	push   edx
c001940e:	50                   	push   eax
c001940f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019413:	2d f8 00 00 00       	sub    eax,0xf8
c0019418:	eb 41                	jmp    c001945b <x87Handler(regs*)+0x602>
c001941a:	8d 50 10             	lea    edx,[eax+0x10]
c001941d:	80 fa 07             	cmp    dl,0x7
c0019420:	0f 87 5a 01 00 00    	ja     c0019580 <x87Handler(regs*)+0x727>
c0019426:	83 ec 0c             	sub    esp,0xc
c0019429:	2d f0 00 00 00       	sub    eax,0xf0
c001942e:	50                   	push   eax
c001942f:	e8 e8 f8 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019434:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001943b:	89 c6                	mov    esi,eax
c001943d:	89 d7                	mov    edi,edx
c001943f:	e8 d8 f8 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019444:	57                   	push   edi
c0019445:	56                   	push   esi
c0019446:	52                   	push   edx
c0019447:	50                   	push   eax
c0019448:	e8 9d f8 ff ff       	call   c0018cea <fpuDivide(unsigned long long, unsigned long long)>
c001944d:	83 c4 1c             	add    esp,0x1c
c0019450:	52                   	push   edx
c0019451:	50                   	push   eax
c0019452:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019456:	2d f0 00 00 00       	sub    eax,0xf0
c001945b:	50                   	push   eax
c001945c:	e8 fe f8 ff ff       	call   c0018d5f <fpuSetReg(int, unsigned long long)>
c0019461:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019465:	e8 9d f9 ff ff       	call   c0018e07 <fpuPop()>
c001946a:	e9 5e fa ff ff       	jmp    c0018ecd <x87Handler(regs*)+0x74>
c001946f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019473:	8d 50 30             	lea    edx,[eax+0x30]
c0019476:	80 fa 07             	cmp    dl,0x7
c0019479:	77 1d                	ja     c0019498 <x87Handler(regs*)+0x63f>
c001947b:	83 ec 0c             	sub    esp,0xc
c001947e:	6a 00                	push   0x0
c0019480:	e8 97 f8 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019485:	83 c4 0c             	add    esp,0xc
c0019488:	52                   	push   edx
c0019489:	50                   	push   eax
c001948a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001948e:	2d d0 00 00 00       	sub    eax,0xd0
c0019493:	e9 f3 fd ff ff       	jmp    c001928b <x87Handler(regs*)+0x432>
c0019498:	8d 50 28             	lea    edx,[eax+0x28]
c001949b:	80 fa 07             	cmp    dl,0x7
c001949e:	77 28                	ja     c00194c8 <x87Handler(regs*)+0x66f>
c00194a0:	83 ec 0c             	sub    esp,0xc
c00194a3:	6a 00                	push   0x0
c00194a5:	e8 72 f8 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00194aa:	83 c4 0c             	add    esp,0xc
c00194ad:	52                   	push   edx
c00194ae:	50                   	push   eax
c00194af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00194b3:	2d d8 00 00 00       	sub    eax,0xd8
c00194b8:	50                   	push   eax
c00194b9:	e8 a1 f8 ff ff       	call   c0018d5f <fpuSetReg(int, unsigned long long)>
c00194be:	e8 44 f9 ff ff       	call   c0018e07 <fpuPop()>
c00194c3:	e9 01 fa ff ff       	jmp    c0018ec9 <x87Handler(regs*)+0x70>
c00194c8:	8d 50 20             	lea    edx,[eax+0x20]
c00194cb:	80 fa 07             	cmp    dl,0x7
c00194ce:	77 30                	ja     c0019500 <x87Handler(regs*)+0x6a7>
c00194d0:	83 ec 0c             	sub    esp,0xc
c00194d3:	2d e0 00 00 00       	sub    eax,0xe0
c00194d8:	50                   	push   eax
c00194d9:	e8 3e f8 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00194de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00194e5:	89 c6                	mov    esi,eax
c00194e7:	89 d7                	mov    edi,edx
c00194e9:	e8 2e f8 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00194ee:	57                   	push   edi
c00194ef:	56                   	push   esi
c00194f0:	52                   	push   edx
c00194f1:	50                   	push   eax
c00194f2:	e8 48 f7 ff ff       	call   c0018c3f <fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00194f7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00194fb:	e9 54 02 00 00       	jmp    c0019754 <x87Handler(regs*)+0x8fb>
c0019500:	8d 50 18             	lea    edx,[eax+0x18]
c0019503:	80 fa 07             	cmp    dl,0x7
c0019506:	0f 87 43 fb ff ff    	ja     c001904f <x87Handler(regs*)+0x1f6>
c001950c:	83 ec 0c             	sub    esp,0xc
c001950f:	2d e8 00 00 00       	sub    eax,0xe8
c0019514:	50                   	push   eax
c0019515:	e8 02 f8 ff ff       	call   c0018d1c <fpuGetReg(int)>
c001951a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019521:	89 c6                	mov    esi,eax
c0019523:	89 d7                	mov    edi,edx
c0019525:	e8 f2 f7 ff ff       	call   c0018d1c <fpuGetReg(int)>
c001952a:	57                   	push   edi
c001952b:	56                   	push   esi
c001952c:	52                   	push   edx
c001952d:	50                   	push   eax
c001952e:	e8 0c f7 ff ff       	call   c0018c3f <fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019533:	83 c4 20             	add    esp,0x20
c0019536:	e8 cc f8 ff ff       	call   c0018e07 <fpuPop()>
c001953b:	eb 62                	jmp    c001959f <x87Handler(regs*)+0x746>
c001953d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0019541:	0f 85 0f 01 00 00    	jne    c0019656 <x87Handler(regs*)+0x7fd>
c0019547:	83 ec 0c             	sub    esp,0xc
c001954a:	6a 01                	push   0x1
c001954c:	e8 cb f7 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019551:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019558:	89 c6                	mov    esi,eax
c001955a:	89 d7                	mov    edi,edx
c001955c:	e8 bb f7 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019561:	57                   	push   edi
c0019562:	56                   	push   esi
c0019563:	52                   	push   edx
c0019564:	50                   	push   eax
c0019565:	e8 d5 f6 ff ff       	call   c0018c3f <fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001956a:	83 c4 20             	add    esp,0x20
c001956d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019571:	e8 91 f8 ff ff       	call   c0018e07 <fpuPop()>
c0019576:	e8 8c f8 ff ff       	call   c0018e07 <fpuPop()>
c001957b:	e9 50 f9 ff ff       	jmp    c0018ed0 <x87Handler(regs*)+0x77>
c0019580:	3c d9                	cmp    al,0xd9
c0019582:	0f 85 b5 02 00 00    	jne    c001983d <x87Handler(regs*)+0x9e4>
c0019588:	eb bd                	jmp    c0019547 <x87Handler(regs*)+0x6ee>
c001958a:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001958e:	0f 85 ea 02 00 00    	jne    c001987e <x87Handler(regs*)+0xa25>
c0019594:	0f b7 05 60 ae 02 c0 	movzx  eax,WORD PTR ds:0xc002ae60
c001959b:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001959f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00195a3:	e9 28 f9 ff ff       	jmp    c0018ed0 <x87Handler(regs*)+0x77>
c00195a8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00195ac:	84 d2                	test   dl,dl
c00195ae:	75 0f                	jne    c00195bf <x87Handler(regs*)+0x766>
c00195b0:	83 ec 0c             	sub    esp,0xc
c00195b3:	ff 36                	push   DWORD PTR [esi]
c00195b5:	e8 b1 f4 ff ff       	call   c0018a6b <fpu32ToInternal(unsigned int)>
c00195ba:	e9 2c 01 00 00       	jmp    c00196eb <x87Handler(regs*)+0x892>
c00195bf:	80 fa 01             	cmp    dl,0x1
c00195c2:	75 0f                	jne    c00195d3 <x87Handler(regs*)+0x77a>
c00195c4:	83 ec 0c             	sub    esp,0xc
c00195c7:	ff 36                	push   DWORD PTR [esi]
c00195c9:	e8 9d f4 ff ff       	call   c0018a6b <fpu32ToInternal(unsigned int)>
c00195ce:	e9 81 02 00 00       	jmp    c0019854 <x87Handler(regs*)+0x9fb>
c00195d3:	80 fa 04             	cmp    dl,0x4
c00195d6:	75 0f                	jne    c00195e7 <x87Handler(regs*)+0x78e>
c00195d8:	83 ec 0c             	sub    esp,0xc
c00195db:	ff 36                	push   DWORD PTR [esi]
c00195dd:	e8 89 f4 ff ff       	call   c0018a6b <fpu32ToInternal(unsigned int)>
c00195e2:	e9 86 01 00 00       	jmp    c001976d <x87Handler(regs*)+0x914>
c00195e7:	80 fa 05             	cmp    dl,0x5
c00195ea:	75 1b                	jne    c0019607 <x87Handler(regs*)+0x7ae>
c00195ec:	83 ec 0c             	sub    esp,0xc
c00195ef:	6a 00                	push   0x0
c00195f1:	e8 26 f7 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00195f6:	89 c7                	mov    edi,eax
c00195f8:	89 d5                	mov    ebp,edx
c00195fa:	58                   	pop    eax
c00195fb:	ff 36                	push   DWORD PTR [esi]
c00195fd:	e8 69 f4 ff ff       	call   c0018a6b <fpu32ToInternal(unsigned int)>
c0019602:	e9 a3 01 00 00       	jmp    c00197aa <x87Handler(regs*)+0x951>
c0019607:	80 fa 06             	cmp    dl,0x6
c001960a:	75 0f                	jne    c001961b <x87Handler(regs*)+0x7c2>
c001960c:	83 ec 0c             	sub    esp,0xc
c001960f:	ff 36                	push   DWORD PTR [esi]
c0019611:	e8 55 f4 ff ff       	call   c0018a6b <fpu32ToInternal(unsigned int)>
c0019616:	e9 ae 01 00 00       	jmp    c00197c9 <x87Handler(regs*)+0x970>
c001961b:	31 c0                	xor    eax,eax
c001961d:	80 fa 07             	cmp    dl,0x7
c0019620:	0f 85 94 02 00 00    	jne    c00198ba <x87Handler(regs*)+0xa61>
c0019626:	83 ec 0c             	sub    esp,0xc
c0019629:	6a 00                	push   0x0
c001962b:	e8 ec f6 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019630:	89 c7                	mov    edi,eax
c0019632:	89 d5                	mov    ebp,edx
c0019634:	58                   	pop    eax
c0019635:	ff 36                	push   DWORD PTR [esi]
c0019637:	e8 2f f4 ff ff       	call   c0018a6b <fpu32ToInternal(unsigned int)>
c001963c:	e9 cb 01 00 00       	jmp    c001980c <x87Handler(regs*)+0x9b3>
c0019641:	80 fa 03             	cmp    dl,0x3
c0019644:	0f 85 d3 01 00 00    	jne    c001981d <x87Handler(regs*)+0x9c4>
c001964a:	e8 b8 f7 ff ff       	call   c0018e07 <fpuPop()>
c001964f:	51                   	push   ecx
c0019650:	51                   	push   ecx
c0019651:	e9 de 01 00 00       	jmp    c0019834 <x87Handler(regs*)+0x9db>
c0019656:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001965a:	80 fa 01             	cmp    dl,0x1
c001965d:	75 09                	jne    c0019668 <x87Handler(regs*)+0x80f>
c001965f:	57                   	push   edi
c0019660:	57                   	push   edi
c0019661:	8b 06                	mov    eax,DWORD PTR [esi]
c0019663:	e9 e3 01 00 00       	jmp    c001984b <x87Handler(regs*)+0x9f2>
c0019668:	80 fa 04             	cmp    dl,0x4
c001966b:	75 12                	jne    c001967f <x87Handler(regs*)+0x826>
c001966d:	31 d2                	xor    edx,edx
c001966f:	51                   	push   ecx
c0019670:	51                   	push   ecx
c0019671:	8b 06                	mov    eax,DWORD PTR [esi]
c0019673:	52                   	push   edx
c0019674:	50                   	push   eax
c0019675:	e8 d0 f4 ff ff       	call   c0018b4a <fpuLongToFloat(long long)>
c001967a:	e9 ee 00 00 00       	jmp    c001976d <x87Handler(regs*)+0x914>
c001967f:	31 c0                	xor    eax,eax
c0019681:	80 fa 07             	cmp    dl,0x7
c0019684:	0f 85 30 02 00 00    	jne    c00198ba <x87Handler(regs*)+0xa61>
c001968a:	83 ec 0c             	sub    esp,0xc
c001968d:	6a 00                	push   0x0
c001968f:	e8 88 f6 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019694:	89 c7                	mov    edi,eax
c0019696:	89 d5                	mov    ebp,edx
c0019698:	58                   	pop    eax
c0019699:	8b 06                	mov    eax,DWORD PTR [esi]
c001969b:	5a                   	pop    edx
c001969c:	31 d2                	xor    edx,edx
c001969e:	52                   	push   edx
c001969f:	50                   	push   eax
c00196a0:	e8 a5 f4 ff ff       	call   c0018b4a <fpuLongToFloat(long long)>
c00196a5:	e9 62 01 00 00       	jmp    c001980c <x87Handler(regs*)+0x9b3>
c00196aa:	84 d2                	test   dl,dl
c00196ac:	75 0d                	jne    c00196bb <x87Handler(regs*)+0x862>
c00196ae:	31 d2                	xor    edx,edx
c00196b0:	55                   	push   ebp
c00196b1:	55                   	push   ebp
c00196b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00196b4:	52                   	push   edx
c00196b5:	50                   	push   eax
c00196b6:	e9 d3 01 00 00       	jmp    c001988e <x87Handler(regs*)+0xa35>
c00196bb:	31 c0                	xor    eax,eax
c00196bd:	80 fa 02             	cmp    dl,0x2
c00196c0:	0f 85 f4 01 00 00    	jne    c00198ba <x87Handler(regs*)+0xa61>
c00196c6:	83 ec 0c             	sub    esp,0xc
c00196c9:	6a 00                	push   0x0
c00196cb:	e8 4c f6 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00196d0:	59                   	pop    ecx
c00196d1:	5f                   	pop    edi
c00196d2:	e9 6a f9 ff ff       	jmp    c0019041 <x87Handler(regs*)+0x1e8>
c00196d7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00196db:	84 d2                	test   dl,dl
c00196dd:	75 2a                	jne    c0019709 <x87Handler(regs*)+0x8b0>
c00196df:	50                   	push   eax
c00196e0:	50                   	push   eax
c00196e1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00196e4:	ff 36                	push   DWORD PTR [esi]
c00196e6:	e8 c5 f3 ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c00196eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00196f2:	89 c6                	mov    esi,eax
c00196f4:	89 d7                	mov    edi,edx
c00196f6:	e8 21 f6 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00196fb:	57                   	push   edi
c00196fc:	56                   	push   esi
c00196fd:	52                   	push   edx
c00196fe:	50                   	push   eax
c00196ff:	e8 8e f5 ff ff       	call   c0018c92 <fpuAdd(unsigned long long, unsigned long long)>
c0019704:	e9 64 01 00 00       	jmp    c001986d <x87Handler(regs*)+0xa14>
c0019709:	80 fa 01             	cmp    dl,0x1
c001970c:	75 11                	jne    c001971f <x87Handler(regs*)+0x8c6>
c001970e:	50                   	push   eax
c001970f:	50                   	push   eax
c0019710:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019713:	ff 36                	push   DWORD PTR [esi]
c0019715:	e8 96 f3 ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c001971a:	e9 35 01 00 00       	jmp    c0019854 <x87Handler(regs*)+0x9fb>
c001971f:	80 fa 02             	cmp    dl,0x2
c0019722:	0f 85 54 f9 ff ff    	jne    c001907c <x87Handler(regs*)+0x223>
c0019728:	55                   	push   ebp
c0019729:	55                   	push   ebp
c001972a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001972d:	ff 36                	push   DWORD PTR [esi]
c001972f:	e8 7c f3 ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c0019734:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001973b:	89 c6                	mov    esi,eax
c001973d:	89 d7                	mov    edi,edx
c001973f:	e8 d8 f5 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019744:	57                   	push   edi
c0019745:	56                   	push   esi
c0019746:	52                   	push   edx
c0019747:	50                   	push   eax
c0019748:	e8 f2 f4 ff ff       	call   c0018c3f <fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001974d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019751:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019754:	83 c4 20             	add    esp,0x20
c0019757:	e9 74 f7 ff ff       	jmp    c0018ed0 <x87Handler(regs*)+0x77>
c001975c:	80 fa 04             	cmp    dl,0x4
c001975f:	75 2a                	jne    c001978b <x87Handler(regs*)+0x932>
c0019761:	51                   	push   ecx
c0019762:	51                   	push   ecx
c0019763:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019766:	ff 36                	push   DWORD PTR [esi]
c0019768:	e8 43 f3 ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c001976d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019774:	89 c6                	mov    esi,eax
c0019776:	89 d7                	mov    edi,edx
c0019778:	e8 9f f5 ff ff       	call   c0018d1c <fpuGetReg(int)>
c001977d:	57                   	push   edi
c001977e:	56                   	push   esi
c001977f:	52                   	push   edx
c0019780:	50                   	push   eax
c0019781:	e8 36 f5 ff ff       	call   c0018cbc <fpuSub(unsigned long long, unsigned long long)>
c0019786:	e9 e2 00 00 00       	jmp    c001986d <x87Handler(regs*)+0xa14>
c001978b:	80 fa 05             	cmp    dl,0x5
c001978e:	75 28                	jne    c00197b8 <x87Handler(regs*)+0x95f>
c0019790:	83 ec 0c             	sub    esp,0xc
c0019793:	6a 00                	push   0x0
c0019795:	e8 82 f5 ff ff       	call   c0018d1c <fpuGetReg(int)>
c001979a:	89 c7                	mov    edi,eax
c001979c:	89 d5                	mov    ebp,edx
c001979e:	58                   	pop    eax
c001979f:	5a                   	pop    edx
c00197a0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00197a3:	ff 36                	push   DWORD PTR [esi]
c00197a5:	e8 06 f3 ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c00197aa:	83 c4 10             	add    esp,0x10
c00197ad:	55                   	push   ebp
c00197ae:	57                   	push   edi
c00197af:	52                   	push   edx
c00197b0:	50                   	push   eax
c00197b1:	e8 06 f5 ff ff       	call   c0018cbc <fpuSub(unsigned long long, unsigned long long)>
c00197b6:	eb 60                	jmp    c0019818 <x87Handler(regs*)+0x9bf>
c00197b8:	80 fa 06             	cmp    dl,0x6
c00197bb:	75 2a                	jne    c00197e7 <x87Handler(regs*)+0x98e>
c00197bd:	51                   	push   ecx
c00197be:	51                   	push   ecx
c00197bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00197c2:	ff 36                	push   DWORD PTR [esi]
c00197c4:	e8 e7 f2 ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c00197c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00197d0:	89 c6                	mov    esi,eax
c00197d2:	89 d7                	mov    edi,edx
c00197d4:	e8 43 f5 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00197d9:	57                   	push   edi
c00197da:	56                   	push   esi
c00197db:	52                   	push   edx
c00197dc:	50                   	push   eax
c00197dd:	e8 08 f5 ff ff       	call   c0018cea <fpuDivide(unsigned long long, unsigned long long)>
c00197e2:	e9 86 00 00 00       	jmp    c001986d <x87Handler(regs*)+0xa14>
c00197e7:	31 c0                	xor    eax,eax
c00197e9:	80 fa 07             	cmp    dl,0x7
c00197ec:	0f 85 c8 00 00 00    	jne    c00198ba <x87Handler(regs*)+0xa61>
c00197f2:	83 ec 0c             	sub    esp,0xc
c00197f5:	6a 00                	push   0x0
c00197f7:	e8 20 f5 ff ff       	call   c0018d1c <fpuGetReg(int)>
c00197fc:	89 c7                	mov    edi,eax
c00197fe:	89 d5                	mov    ebp,edx
c0019800:	58                   	pop    eax
c0019801:	5a                   	pop    edx
c0019802:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019805:	ff 36                	push   DWORD PTR [esi]
c0019807:	e8 a4 f2 ff ff       	call   c0018ab0 <fpu64ToInternal(unsigned long long)>
c001980c:	83 c4 10             	add    esp,0x10
c001980f:	55                   	push   ebp
c0019810:	57                   	push   edi
c0019811:	52                   	push   edx
c0019812:	50                   	push   eax
c0019813:	e8 d2 f4 ff ff       	call   c0018cea <fpuDivide(unsigned long long, unsigned long long)>
c0019818:	83 c4 0c             	add    esp,0xc
c001981b:	eb 53                	jmp    c0019870 <x87Handler(regs*)+0xa17>
c001981d:	31 c0                	xor    eax,eax
c001981f:	80 fa 02             	cmp    dl,0x2
c0019822:	0f 85 92 00 00 00    	jne    c00198ba <x87Handler(regs*)+0xa61>
c0019828:	83 ec 0c             	sub    esp,0xc
c001982b:	6a 00                	push   0x0
c001982d:	e8 ea f4 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019832:	59                   	pop    ecx
c0019833:	5f                   	pop    edi
c0019834:	52                   	push   edx
c0019835:	50                   	push   eax
c0019836:	e8 27 f2 ff ff       	call   c0018a62 <fpuInternalTo64(unsigned long long)>
c001983b:	eb 70                	jmp    c00198ad <x87Handler(regs*)+0xa54>
c001983d:	31 c0                	xor    eax,eax
c001983f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0019844:	75 74                	jne    c00198ba <x87Handler(regs*)+0xa61>
c0019846:	50                   	push   eax
c0019847:	50                   	push   eax
c0019848:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001984b:	31 d2                	xor    edx,edx
c001984d:	52                   	push   edx
c001984e:	50                   	push   eax
c001984f:	e8 f6 f2 ff ff       	call   c0018b4a <fpuLongToFloat(long long)>
c0019854:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001985b:	89 c6                	mov    esi,eax
c001985d:	89 d7                	mov    edi,edx
c001985f:	e8 b8 f4 ff ff       	call   c0018d1c <fpuGetReg(int)>
c0019864:	57                   	push   edi
c0019865:	56                   	push   esi
c0019866:	52                   	push   edx
c0019867:	50                   	push   eax
c0019868:	e8 5e f4 ff ff       	call   c0018ccb <fpuMultiply(unsigned long long, unsigned long long)>
c001986d:	83 c4 1c             	add    esp,0x1c
c0019870:	52                   	push   edx
c0019871:	50                   	push   eax
c0019872:	6a 00                	push   0x0
c0019874:	e8 e6 f4 ff ff       	call   c0018d5f <fpuSetReg(int, unsigned long long)>
c0019879:	e9 f2 f7 ff ff       	jmp    c0019070 <x87Handler(regs*)+0x217>
c001987e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019882:	80 fa 05             	cmp    dl,0x5
c0019885:	75 11                	jne    c0019898 <x87Handler(regs*)+0xa3f>
c0019887:	55                   	push   ebp
c0019888:	55                   	push   ebp
c0019889:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001988c:	ff 36                	push   DWORD PTR [esi]
c001988e:	e8 81 f2 ff ff       	call   c0018b14 <fpuULongToFloat(unsigned long long)>
c0019893:	e9 cf f7 ff ff       	jmp    c0019067 <x87Handler(regs*)+0x20e>
c0019898:	31 c0                	xor    eax,eax
c001989a:	80 fa 07             	cmp    dl,0x7
c001989d:	75 1b                	jne    c00198ba <x87Handler(regs*)+0xa61>
c001989f:	e8 63 f5 ff ff       	call   c0018e07 <fpuPop()>
c00198a4:	51                   	push   ecx
c00198a5:	51                   	push   ecx
c00198a6:	52                   	push   edx
c00198a7:	50                   	push   eax
c00198a8:	e8 0c f2 ff ff       	call   c0018ab9 <fpuFloatToLong(unsigned long long)>
c00198ad:	83 c4 10             	add    esp,0x10
c00198b0:	89 06                	mov    DWORD PTR [esi],eax
c00198b2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00198b5:	e9 f8 f7 ff ff       	jmp    c00190b2 <x87Handler(regs*)+0x259>
c00198ba:	83 c4 1c             	add    esp,0x1c
c00198bd:	5b                   	pop    ebx
c00198be:	5e                   	pop    esi
c00198bf:	5f                   	pop    edi
c00198c0:	5d                   	pop    ebp
c00198c1:	c3                   	ret    

c00198c2 <__static_initialization_and_destruction_0(int, int)>:
c00198c2:	83 ec 0c             	sub    esp,0xc
c00198c5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00198ca:	75 1a                	jne    c00198e6 <__static_initialization_and_destruction_0(int, int)+0x24>
c00198cc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00198d4:	75 10                	jne    c00198e6 <__static_initialization_and_destruction_0(int, int)+0x24>
c00198d6:	83 ec 0c             	sub    esp,0xc
c00198d9:	68 60 ae 02 c0       	push   0xc002ae60
c00198de:	e8 13 be 00 00       	call   c00256f6 <_FPUState::_FPUState()>
c00198e3:	83 c4 10             	add    esp,0x10
c00198e6:	90                   	nop
c00198e7:	83 c4 0c             	add    esp,0xc
c00198ea:	c3                   	ret    

c00198eb <_GLOBAL__sub_I_fpuState>:
c00198eb:	83 ec 0c             	sub    esp,0xc
c00198ee:	83 ec 08             	sub    esp,0x8
c00198f1:	68 ff ff 00 00       	push   0xffff
c00198f6:	6a 01                	push   0x1
c00198f8:	e8 c5 ff ff ff       	call   c00198c2 <__static_initialization_and_destruction_0(int, int)>
c00198fd:	83 c4 10             	add    esp,0x10
c0019900:	83 c4 0c             	add    esp,0xc
c0019903:	c3                   	ret    

c0019904 <Krnl::panic(char const*)>:
c0019904:	55                   	push   ebp
c0019905:	89 e5                	mov    ebp,esp
c0019907:	53                   	push   ebx
c0019908:	50                   	push   eax
c0019909:	a1 a8 ae 02 c0       	mov    eax,ds:0xc002aea8
c001990e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019911:	85 c0                	test   eax,eax
c0019913:	74 02                	je     c0019917 <Krnl::panic(char const*)+0x13>
c0019915:	ff d0                	call   eax
c0019917:	fa                   	cli    
c0019918:	c6 05 ac ae 02 c0 01 	mov    BYTE PTR ds:0xc002aeac,0x1
c001991f:	83 ec 08             	sub    esp,0x8
c0019922:	c6 05 c0 93 02 c0 00 	mov    BYTE PTR ds:0xc00293c0,0x0
c0019929:	53                   	push   ebx
c001992a:	68 c8 80 02 c0       	push   0xc00280c8
c001992f:	e8 23 89 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0019934:	58                   	pop    eax
c0019935:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001993a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019940:	e8 56 6b ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c0019945:	83 c4 0c             	add    esp,0xc
c0019948:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001994d:	6a 01                	push   0x1
c001994f:	6a 0f                	push   0xf
c0019951:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019957:	e8 7e 65 ff ff       	call   c000feda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001995c:	5a                   	pop    edx
c001995d:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019968:	e8 cf 6d ff ff       	call   c001073c <VgaText::clearScreen()>
c001996d:	59                   	pop    ecx
c001996e:	58                   	pop    eax
c001996f:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019974:	68 e1 80 02 c0       	push   0xc00280e1
c0019979:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001997f:	e8 36 6f ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019984:	58                   	pop    eax
c0019985:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c001998a:	5a                   	pop    edx
c001998b:	68 88 81 02 c0       	push   0xc0028188
c0019990:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019996:	e8 1f 6f ff ff       	call   c00108ba <VgaText::puts(char const*)>
c001999b:	59                   	pop    ecx
c001999c:	58                   	pop    eax
c001999d:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00199a2:	68 fd 80 02 c0       	push   0xc00280fd
c00199a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ad:	e8 08 6f ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00199b2:	58                   	pop    eax
c00199b3:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00199b8:	5a                   	pop    edx
c00199b9:	53                   	push   ebx
c00199ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c0:	e8 f5 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00199c5:	59                   	pop    ecx
c00199c6:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00199cb:	5b                   	pop    ebx
c00199cc:	68 1d 81 02 c0       	push   0xc002811d
c00199d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199d7:	e8 de 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00199dc:	58                   	pop    eax
c00199dd:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00199e2:	5a                   	pop    edx
c00199e3:	68 c4 81 02 c0       	push   0xc00281c4
c00199e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ee:	e8 c7 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c00199f3:	59                   	pop    ecx
c00199f4:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c00199f9:	5b                   	pop    ebx
c00199fa:	68 fd 80 02 c0       	push   0xc00280fd
c00199ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a05:	e8 b0 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019a0a:	58                   	pop    eax
c0019a0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a10:	5a                   	pop    edx
c0019a11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019a14:	83 c0 0c             	add    eax,0xc
c0019a17:	50                   	push   eax
c0019a18:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019a1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a23:	e8 92 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019a28:	59                   	pop    ecx
c0019a29:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019a2e:	5b                   	pop    ebx
c0019a2f:	68 1c 81 02 c0       	push   0xc002811c
c0019a34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a3a:	e8 7b 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019a3f:	58                   	pop    eax
c0019a40:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019a45:	5a                   	pop    edx
c0019a46:	68 f0 81 02 c0       	push   0xc00281f0
c0019a4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a51:	e8 64 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019a56:	59                   	pop    ecx
c0019a57:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019a5c:	5b                   	pop    ebx
c0019a5d:	68 30 82 02 c0       	push   0xc0028230
c0019a62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a68:	e8 4d 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019a6d:	58                   	pop    eax
c0019a6e:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019a73:	5a                   	pop    edx
c0019a74:	68 08 81 02 c0       	push   0xc0028108
c0019a79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a7f:	e8 36 6e ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019a84:	59                   	pop    ecx
c0019a85:	5b                   	pop    ebx
c0019a86:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a89:	68 20 81 02 c0       	push   0xc0028120
c0019a8e:	e8 c4 87 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0019a93:	58                   	pop    eax
c0019a94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a97:	5a                   	pop    edx
c0019a98:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a9b:	68 29 81 02 c0       	push   0xc0028129
c0019aa0:	e8 b2 87 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0019aa5:	59                   	pop    ecx
c0019aa6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019aa9:	5b                   	pop    ebx
c0019aaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0019aac:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019aaf:	68 32 81 02 c0       	push   0xc0028132
c0019ab4:	e8 9e 87 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0019ab9:	58                   	pop    eax
c0019aba:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019abf:	5a                   	pop    edx
c0019ac0:	68 74 82 02 c0       	push   0xc0028274
c0019ac5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019acb:	e8 ea 6d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019ad0:	59                   	pop    ecx
c0019ad1:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019ad6:	5b                   	pop    ebx
c0019ad7:	68 3b 81 02 c0       	push   0xc002813b
c0019adc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ae2:	e8 d3 6d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019ae7:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019aec:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019af2:	e8 11 b9 00 00       	call   c0025408 <CPU::readCR0()>
c0019af7:	5a                   	pop    edx
c0019af8:	59                   	pop    ecx
c0019af9:	50                   	push   eax
c0019afa:	53                   	push   ebx
c0019afb:	e8 e0 6d ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0019b00:	5b                   	pop    ebx
c0019b01:	58                   	pop    eax
c0019b02:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019b07:	68 45 81 02 c0       	push   0xc0028145
c0019b0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b12:	e8 a3 6d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019b17:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019b1c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019b22:	e8 dc bb 00 00       	call   c0025703 <CPU::readCR2()>
c0019b27:	5a                   	pop    edx
c0019b28:	59                   	pop    ecx
c0019b29:	50                   	push   eax
c0019b2a:	53                   	push   ebx
c0019b2b:	e8 b0 6d ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0019b30:	5b                   	pop    ebx
c0019b31:	58                   	pop    eax
c0019b32:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019b37:	68 4f 81 02 c0       	push   0xc002814f
c0019b3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b42:	e8 73 6d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019b47:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019b4c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019b52:	e8 3e b5 00 00       	call   c0025095 <CPU::readCR3()>
c0019b57:	5a                   	pop    edx
c0019b58:	59                   	pop    ecx
c0019b59:	50                   	push   eax
c0019b5a:	53                   	push   ebx
c0019b5b:	e8 80 6d ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0019b60:	5b                   	pop    ebx
c0019b61:	58                   	pop    eax
c0019b62:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019b67:	68 62 81 02 c0       	push   0xc0028162
c0019b6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b72:	e8 43 6d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019b77:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019b7c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019b82:	e8 4b bb 00 00       	call   c00256d2 <CPU::readCR4()>
c0019b87:	5a                   	pop    edx
c0019b88:	59                   	pop    ecx
c0019b89:	50                   	push   eax
c0019b8a:	53                   	push   ebx
c0019b8b:	e8 50 6d ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0019b90:	5b                   	pop    ebx
c0019b91:	58                   	pop    eax
c0019b92:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019b97:	68 6c 81 02 c0       	push   0xc002816c
c0019b9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ba2:	e8 13 6d ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019ba7:	5a                   	pop    edx
c0019ba8:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019bad:	59                   	pop    ecx
c0019bae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019bb4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019bb7:	50                   	push   eax
c0019bb8:	e8 23 6d ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0019bbd:	5b                   	pop    ebx
c0019bbe:	58                   	pop    eax
c0019bbf:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019bc4:	68 83 81 02 c0       	push   0xc0028183
c0019bc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bcf:	e8 e6 6c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019bd4:	5a                   	pop    edx
c0019bd5:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019bda:	59                   	pop    ecx
c0019bdb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019be1:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019be4:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019be7:	50                   	push   eax
c0019be8:	e8 f3 6c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0019bed:	5b                   	pop    ebx
c0019bee:	58                   	pop    eax
c0019bef:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019bf4:	68 83 81 02 c0       	push   0xc0028183
c0019bf9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bff:	e8 b6 6c ff ff       	call   c00108ba <VgaText::puts(char const*)>
c0019c04:	59                   	pop    ecx
c0019c05:	a1 b4 b8 02 c0       	mov    eax,ds:0xc002b8b4
c0019c0a:	5b                   	pop    ebx
c0019c0b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019c11:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019c14:	8b 12                	mov    edx,DWORD PTR [edx]
c0019c16:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019c19:	50                   	push   eax
c0019c1a:	e8 c1 6c ff ff       	call   c00108e0 <VgaText::putx(unsigned int)>
c0019c1f:	83 c4 10             	add    esp,0x10
c0019c22:	b2 fe                	mov    dl,0xfe
c0019c24:	e4 60                	in     al,0x60
c0019c26:	3c 1c                	cmp    al,0x1c
c0019c28:	74 04                	je     c0019c2e <Krnl::panic(char const*)+0x32a>
c0019c2a:	3c 5a                	cmp    al,0x5a
c0019c2c:	75 f6                	jne    c0019c24 <Krnl::panic(char const*)+0x320>
c0019c2e:	e4 64                	in     al,0x64
c0019c30:	a8 02                	test   al,0x2
c0019c32:	75 fa                	jne    c0019c2e <Krnl::panic(char const*)+0x32a>
c0019c34:	88 d0                	mov    al,dl
c0019c36:	e6 64                	out    0x64,al
c0019c38:	fa                   	cli    
c0019c39:	f4                   	hlt    
c0019c3a:	eb e8                	jmp    c0019c24 <Krnl::panic(char const*)+0x320>

c0019c3c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019c3c:	55                   	push   ebp
c0019c3d:	57                   	push   edi
c0019c3e:	56                   	push   esi
c0019c3f:	53                   	push   ebx
c0019c40:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019c46:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019c4d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019c4f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019c52:	80 fb 40             	cmp    bl,0x40
c0019c55:	75 1b                	jne    c0019c72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019c57:	8a 16                	mov    dl,BYTE PTR [esi]
c0019c59:	84 d2                	test   dl,dl
c0019c5b:	0f 84 f1 00 00 00    	je     c0019d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019c61:	8d 46 01             	lea    eax,[esi+0x1]
c0019c64:	80 fa 3a             	cmp    dl,0x3a
c0019c67:	74 04                	je     c0019c6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019c69:	89 c6                	mov    esi,eax
c0019c6b:	eb ea                	jmp    c0019c57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019c6d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019c70:	89 c6                	mov    esi,eax
c0019c72:	50                   	push   eax
c0019c73:	6a 40                	push   0x40
c0019c75:	6a 00                	push   0x0
c0019c77:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c7b:	50                   	push   eax
c0019c7c:	e8 6b 6a fe ff       	call   c00006ec <memset>
c0019c81:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0019c88:	31 c0                	xor    eax,eax
c0019c8a:	83 c4 10             	add    esp,0x10
c0019c8d:	8a 0f                	mov    cl,BYTE PTR [edi]
c0019c8f:	84 c9                	test   cl,cl
c0019c91:	0f 84 bb 00 00 00    	je     c0019d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019c97:	3d c7 00 00 00       	cmp    eax,0xc7
c0019c9c:	0f 8f b0 00 00 00    	jg     c0019d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ca2:	80 f9 0a             	cmp    cl,0xa
c0019ca5:	0f 85 98 00 00 00    	jne    c0019d43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0019cab:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0019cb0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0019cb4:	a8 df                	test   al,0xdf
c0019cb6:	0f 94 c1             	sete   cl
c0019cb9:	3c 23                	cmp    al,0x23
c0019cbb:	0f 94 c2             	sete   dl
c0019cbe:	08 d1                	or     cl,dl
c0019cc0:	75 4a                	jne    c0019d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019cc2:	8d 50 f7             	lea    edx,[eax-0x9]
c0019cc5:	80 fa 01             	cmp    dl,0x1
c0019cc8:	76 42                	jbe    c0019d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019cca:	3c 5b                	cmp    al,0x5b
c0019ccc:	75 42                	jne    c0019d10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019cce:	80 fb 40             	cmp    bl,0x40
c0019cd1:	75 39                	jne    c0019d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019cd3:	83 ec 0c             	sub    esp,0xc
c0019cd6:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019cda:	52                   	push   edx
c0019cdb:	e8 29 6a fe ff       	call   c0000709 <strlen>
c0019ce0:	83 c4 10             	add    esp,0x10
c0019ce3:	83 f8 3f             	cmp    eax,0x3f
c0019ce6:	77 6a                	ja     c0019d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019ce8:	50                   	push   eax
c0019ce9:	50                   	push   eax
c0019cea:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019cee:	52                   	push   edx
c0019cef:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019cf3:	52                   	push   edx
c0019cf4:	e8 92 6a fe ff       	call   c000078b <strcpy>
c0019cf9:	58                   	pop    eax
c0019cfa:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019cfe:	52                   	push   edx
c0019cff:	e8 05 6a fe ff       	call   c0000709 <strlen>
c0019d04:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019d09:	83 c4 10             	add    esp,0x10
c0019d0c:	31 d2                	xor    edx,edx
c0019d0e:	eb 3a                	jmp    c0019d4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019d10:	80 fb 40             	cmp    bl,0x40
c0019d13:	74 06                	je     c0019d1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0019d15:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019d19:	eb 20                	jmp    c0019d3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019d1b:	50                   	push   eax
c0019d1c:	50                   	push   eax
c0019d1d:	55                   	push   ebp
c0019d1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019d22:	50                   	push   eax
c0019d23:	e8 b4 6a fe ff       	call   c00007dc <strcmp>
c0019d28:	83 c4 10             	add    esp,0x10
c0019d2b:	85 c0                	test   eax,eax
c0019d2d:	75 dd                	jne    c0019d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019d2f:	eb e4                	jmp    c0019d15 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019d31:	8d 50 01             	lea    edx,[eax+0x1]
c0019d34:	80 f9 3d             	cmp    cl,0x3d
c0019d37:	74 1d                	je     c0019d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019d39:	89 d0                	mov    eax,edx
c0019d3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0019d3d:	84 c9                	test   cl,cl
c0019d3f:	75 f0                	jne    c0019d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019d41:	eb 0f                	jmp    c0019d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019d43:	8d 50 01             	lea    edx,[eax+0x1]
c0019d46:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019d4a:	47                   	inc    edi
c0019d4b:	89 d0                	mov    eax,edx
c0019d4d:	e9 3b ff ff ff       	jmp    c0019c8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019d52:	31 c0                	xor    eax,eax
c0019d54:	eb 33                	jmp    c0019d89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0019d56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019d5d:	50                   	push   eax
c0019d5e:	50                   	push   eax
c0019d5f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0019d63:	50                   	push   eax
c0019d64:	56                   	push   esi
c0019d65:	e8 72 6a fe ff       	call   c00007dc <strcmp>
c0019d6a:	83 c4 10             	add    esp,0x10
c0019d6d:	85 c0                	test   eax,eax
c0019d6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d73:	75 97                	jne    c0019d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019d75:	51                   	push   ecx
c0019d76:	51                   	push   ecx
c0019d77:	52                   	push   edx
c0019d78:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0019d7f:	e8 07 6a fe ff       	call   c000078b <strcpy>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	b0 01                	mov    al,0x1
c0019d89:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d8f:	5b                   	pop    ebx
c0019d90:	5e                   	pop    esi
c0019d91:	5f                   	pop    edi
c0019d92:	5d                   	pop    ebp
c0019d93:	c3                   	ret    

c0019d94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0019d94:	57                   	push   edi
c0019d95:	56                   	push   esi
c0019d96:	53                   	push   ebx
c0019d97:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d9d:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0019da4:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0019dab:	53                   	push   ebx
c0019dac:	e8 58 69 fe ff       	call   c0000709 <strlen>
c0019db1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019db4:	89 c7                	mov    edi,eax
c0019db6:	e8 4e 69 fe ff       	call   c0000709 <strlen>
c0019dbb:	83 c4 10             	add    esp,0x10
c0019dbe:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0019dc2:	31 ff                	xor    edi,edi
c0019dc4:	3d ff 00 00 00       	cmp    eax,0xff
c0019dc9:	0f 87 18 01 00 00    	ja     c0019ee7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0019dcf:	51                   	push   ecx
c0019dd0:	51                   	push   ecx
c0019dd1:	56                   	push   esi
c0019dd2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0019dd6:	56                   	push   esi
c0019dd7:	e8 af 69 fe ff       	call   c000078b <strcpy>
c0019ddc:	58                   	pop    eax
c0019ddd:	5a                   	pop    edx
c0019dde:	68 6c 86 02 c0       	push   0xc002866c
c0019de3:	56                   	push   esi
c0019de4:	e8 59 6a fe ff       	call   c0000842 <strcat>
c0019de9:	59                   	pop    ecx
c0019dea:	58                   	pop    eax
c0019deb:	53                   	push   ebx
c0019dec:	56                   	push   esi
c0019ded:	e8 50 6a fe ff       	call   c0000842 <strcat>
c0019df2:	58                   	pop    eax
c0019df3:	5a                   	pop    edx
c0019df4:	68 9a 82 02 c0       	push   0xc002829a
c0019df9:	56                   	push   esi
c0019dfa:	e8 43 6a fe ff       	call   c0000842 <strcat>
c0019dff:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019e06:	e8 5d 83 ff ff       	call   c0012168 <operator new(unsigned long)>
c0019e0b:	83 c4 0c             	add    esp,0xc
c0019e0e:	89 c3                	mov    ebx,eax
c0019e10:	ff 35 b4 b8 02 c0    	push   DWORD PTR ds:0xc002b8b4
c0019e16:	56                   	push   esi
c0019e17:	50                   	push   eax
c0019e18:	e8 69 89 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c0019e1d:	59                   	pop    ecx
c0019e1e:	5e                   	pop    esi
c0019e1f:	6a 01                	push   0x1
c0019e21:	53                   	push   ebx
c0019e22:	e8 c3 89 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c0019e27:	83 c4 10             	add    esp,0x10
c0019e2a:	85 c0                	test   eax,eax
c0019e2c:	74 08                	je     c0019e36 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0019e2e:	83 ec 0c             	sub    esp,0xc
c0019e31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e33:	53                   	push   ebx
c0019e34:	eb 2e                	jmp    c0019e64 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0019e36:	52                   	push   edx
c0019e37:	8d 44 24 07          	lea    eax,[esp+0x7]
c0019e3b:	50                   	push   eax
c0019e3c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e40:	50                   	push   eax
c0019e41:	53                   	push   ebx
c0019e42:	e8 4f 8c ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c0019e47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e4b:	83 c4 10             	add    esp,0x10
c0019e4e:	89 c1                	mov    ecx,eax
c0019e50:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0019e54:	75 13                	jne    c0019e69 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	53                   	push   ebx
c0019e5a:	e8 e9 89 ff ff       	call   c0012848 <File::close()>
c0019e5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e67:	eb 7b                	jmp    c0019ee4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0019e69:	83 ec 0c             	sub    esp,0xc
c0019e6c:	50                   	push   eax
c0019e6d:	e8 f4 52 ff ff       	call   c000f166 <malloc>
c0019e72:	89 c6                	mov    esi,eax
c0019e74:	58                   	pop    eax
c0019e75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e77:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019e7b:	52                   	push   edx
c0019e7c:	56                   	push   esi
c0019e7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e85:	53                   	push   ebx
c0019e86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e89:	83 c4 20             	add    esp,0x20
c0019e8c:	85 c0                	test   eax,eax
c0019e8e:	75 0a                	jne    c0019e9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e94:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0019e98:	74 18                	je     c0019eb2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0019e9a:	83 ec 0c             	sub    esp,0xc
c0019e9d:	31 ff                	xor    edi,edi
c0019e9f:	53                   	push   ebx
c0019ea0:	e8 a3 89 ff ff       	call   c0012848 <File::close()>
c0019ea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ea7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eaa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ead:	83 c4 10             	add    esp,0x10
c0019eb0:	eb 35                	jmp    c0019ee7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0019eb2:	83 ec 0c             	sub    esp,0xc
c0019eb5:	53                   	push   ebx
c0019eb6:	e8 8d 89 ff ff       	call   c0012848 <File::close()>
c0019ebb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ebd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ec0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ec3:	83 c4 0c             	add    esp,0xc
c0019ec6:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0019ecd:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0019ed4:	56                   	push   esi
c0019ed5:	e8 62 fd ff ff       	call   c0019c3c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0019eda:	89 34 24             	mov    DWORD PTR [esp],esi
c0019edd:	89 c7                	mov    edi,eax
c0019edf:	e8 92 52 ff ff       	call   c000f176 <free>
c0019ee4:	83 c4 10             	add    esp,0x10
c0019ee7:	81 c4 10 01 00 00    	add    esp,0x110
c0019eed:	89 f8                	mov    eax,edi
c0019eef:	5b                   	pop    ebx
c0019ef0:	5e                   	pop    esi
c0019ef1:	5f                   	pop    edi
c0019ef2:	c3                   	ret    

c0019ef3 <Reg::getLine(char*, char*, char*)>:
c0019ef3:	57                   	push   edi
c0019ef4:	56                   	push   esi
c0019ef5:	53                   	push   ebx
c0019ef6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019efa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019efe:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019f02:	57                   	push   edi
c0019f03:	56                   	push   esi
c0019f04:	53                   	push   ebx
c0019f05:	68 9f 82 02 c0       	push   0xc002829f
c0019f0a:	e8 85 fe ff ff       	call   c0019d94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019f0f:	83 c4 10             	add    esp,0x10
c0019f12:	84 c0                	test   al,al
c0019f14:	75 10                	jne    c0019f26 <Reg::getLine(char*, char*, char*)+0x33>
c0019f16:	57                   	push   edi
c0019f17:	56                   	push   esi
c0019f18:	53                   	push   ebx
c0019f19:	68 c4 82 02 c0       	push   0xc00282c4
c0019f1e:	e8 71 fe ff ff       	call   c0019d94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019f23:	83 c4 10             	add    esp,0x10
c0019f26:	5b                   	pop    ebx
c0019f27:	5e                   	pop    esi
c0019f28:	5f                   	pop    edi
c0019f29:	c3                   	ret    

c0019f2a <Reg::readInt(char*, char*, int*)>:
c0019f2a:	55                   	push   ebp
c0019f2b:	57                   	push   edi
c0019f2c:	56                   	push   esi
c0019f2d:	53                   	push   ebx
c0019f2e:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019f34:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019f38:	57                   	push   edi
c0019f39:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019f40:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019f47:	e8 a7 ff ff ff       	call   c0019ef3 <Reg::getLine(char*, char*, char*)>
c0019f4c:	83 c4 10             	add    esp,0x10
c0019f4f:	84 c0                	test   al,al
c0019f51:	0f 84 b3 00 00 00    	je     c001a00a <Reg::readInt(char*, char*, int*)+0xe0>
c0019f57:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019f5b:	80 fa 2b             	cmp    dl,0x2b
c0019f5e:	74 0c                	je     c0019f6c <Reg::readInt(char*, char*, int*)+0x42>
c0019f60:	80 fa 2d             	cmp    dl,0x2d
c0019f63:	75 0e                	jne    c0019f73 <Reg::readInt(char*, char*, int*)+0x49>
c0019f65:	ba 01 00 00 00       	mov    edx,0x1
c0019f6a:	eb 0b                	jmp    c0019f77 <Reg::readInt(char*, char*, int*)+0x4d>
c0019f6c:	ba 01 00 00 00       	mov    edx,0x1
c0019f71:	eb 02                	jmp    c0019f75 <Reg::readInt(char*, char*, int*)+0x4b>
c0019f73:	31 d2                	xor    edx,edx
c0019f75:	31 c0                	xor    eax,eax
c0019f77:	be 0a 00 00 00       	mov    esi,0xa
c0019f7c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0019f81:	75 20                	jne    c0019fa3 <Reg::readInt(char*, char*, int*)+0x79>
c0019f83:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019f87:	80 f9 78             	cmp    cl,0x78
c0019f8a:	75 0a                	jne    c0019f96 <Reg::readInt(char*, char*, int*)+0x6c>
c0019f8c:	83 c2 02             	add    edx,0x2
c0019f8f:	be 10 00 00 00       	mov    esi,0x10
c0019f94:	eb 0d                	jmp    c0019fa3 <Reg::readInt(char*, char*, int*)+0x79>
c0019f96:	80 f9 62             	cmp    cl,0x62
c0019f99:	75 08                	jne    c0019fa3 <Reg::readInt(char*, char*, int*)+0x79>
c0019f9b:	83 c2 02             	add    edx,0x2
c0019f9e:	be 02 00 00 00       	mov    esi,0x2
c0019fa3:	01 d7                	add    edi,edx
c0019fa5:	31 d2                	xor    edx,edx
c0019fa7:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019fa9:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019fad:	80 fb 0d             	cmp    bl,0xd
c0019fb0:	0f 94 c3             	sete   bl
c0019fb3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019fb8:	0f 94 c1             	sete   cl
c0019fbb:	08 cb                	or     bl,cl
c0019fbd:	75 3a                	jne    c0019ff9 <Reg::readInt(char*, char*, int*)+0xcf>
c0019fbf:	0f af d6             	imul   edx,esi
c0019fc2:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0019fc7:	83 fe 10             	cmp    esi,0x10
c0019fca:	75 26                	jne    c0019ff2 <Reg::readInt(char*, char*, int*)+0xc8>
c0019fcc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019fd0:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019fd3:	89 e9                	mov    ecx,ebp
c0019fd5:	80 f9 05             	cmp    cl,0x5
c0019fd8:	77 06                	ja     c0019fe0 <Reg::readInt(char*, char*, int*)+0xb6>
c0019fda:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0019fde:	eb 16                	jmp    c0019ff6 <Reg::readInt(char*, char*, int*)+0xcc>
c0019fe0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019fe4:	83 e9 61             	sub    ecx,0x61
c0019fe7:	80 f9 05             	cmp    cl,0x5
c0019fea:	77 06                	ja     c0019ff2 <Reg::readInt(char*, char*, int*)+0xc8>
c0019fec:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0019ff0:	eb 04                	jmp    c0019ff6 <Reg::readInt(char*, char*, int*)+0xcc>
c0019ff2:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019ff6:	47                   	inc    edi
c0019ff7:	eb ae                	jmp    c0019fa7 <Reg::readInt(char*, char*, int*)+0x7d>
c0019ff9:	84 c0                	test   al,al
c0019ffb:	74 02                	je     c0019fff <Reg::readInt(char*, char*, int*)+0xd5>
c0019ffd:	f7 da                	neg    edx
c0019fff:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a006:	89 10                	mov    DWORD PTR [eax],edx
c001a008:	88 d8                	mov    al,bl
c001a00a:	81 c4 ec 00 00 00    	add    esp,0xec
c001a010:	5b                   	pop    ebx
c001a011:	5e                   	pop    esi
c001a012:	5f                   	pop    edi
c001a013:	5d                   	pop    ebp
c001a014:	c3                   	ret    

c001a015 <Reg::readString(char*, char*, char*, int)>:
c001a015:	57                   	push   edi
c001a016:	56                   	push   esi
c001a017:	53                   	push   ebx
c001a018:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a01e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a025:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a029:	57                   	push   edi
c001a02a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a031:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a038:	e8 b6 fe ff ff       	call   c0019ef3 <Reg::getLine(char*, char*, char*)>
c001a03d:	83 c4 10             	add    esp,0x10
c001a040:	89 c6                	mov    esi,eax
c001a042:	84 c0                	test   al,al
c001a044:	74 44                	je     c001a08a <Reg::readString(char*, char*, char*, int)+0x75>
c001a046:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a04d:	31 c0                	xor    eax,eax
c001a04f:	4a                   	dec    edx
c001a050:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a053:	84 c9                	test   cl,cl
c001a055:	74 0f                	je     c001a066 <Reg::readString(char*, char*, char*, int)+0x51>
c001a057:	39 c2                	cmp    edx,eax
c001a059:	7e 0b                	jle    c001a066 <Reg::readString(char*, char*, char*, int)+0x51>
c001a05b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a05e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a063:	40                   	inc    eax
c001a064:	eb ea                	jmp    c001a050 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a066:	83 ec 0c             	sub    esp,0xc
c001a069:	53                   	push   ebx
c001a06a:	e8 9a 66 fe ff       	call   c0000709 <strlen>
c001a06f:	83 c4 10             	add    esp,0x10
c001a072:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a077:	75 11                	jne    c001a08a <Reg::readString(char*, char*, char*, int)+0x75>
c001a079:	83 ec 0c             	sub    esp,0xc
c001a07c:	53                   	push   ebx
c001a07d:	e8 87 66 fe ff       	call   c0000709 <strlen>
c001a082:	83 c4 10             	add    esp,0x10
c001a085:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a08a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a090:	89 f0                	mov    eax,esi
c001a092:	5b                   	pop    ebx
c001a093:	5e                   	pop    esi
c001a094:	5f                   	pop    edi
c001a095:	c3                   	ret    

c001a096 <Reg::readBool(char*, char*, bool*)>:
c001a096:	83 ec 20             	sub    esp,0x20
c001a099:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a09d:	50                   	push   eax
c001a09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0a6:	e8 7f fe ff ff       	call   c0019f2a <Reg::readInt(char*, char*, int*)>
c001a0ab:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a0b0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a0b4:	0f 95 02             	setne  BYTE PTR [edx]
c001a0b7:	83 c4 2c             	add    esp,0x2c
c001a0ba:	c3                   	ret    

c001a0bb <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a0bb:	53                   	push   ebx
c001a0bc:	83 ec 1c             	sub    esp,0x1c
c001a0bf:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a0c3:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a0c7:	50                   	push   eax
c001a0c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0d0:	e8 c1 ff ff ff       	call   c001a096 <Reg::readBool(char*, char*, bool*)>
c001a0d5:	83 c4 10             	add    esp,0x10
c001a0d8:	84 c0                	test   al,al
c001a0da:	74 04                	je     c001a0e0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a0dc:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a0e0:	88 d8                	mov    al,bl
c001a0e2:	83 c4 18             	add    esp,0x18
c001a0e5:	5b                   	pop    ebx
c001a0e6:	c3                   	ret    

c001a0e7 <Reg::readIntWithDefault(char*, char*, int)>:
c001a0e7:	53                   	push   ebx
c001a0e8:	83 ec 1c             	sub    esp,0x1c
c001a0eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a0ef:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a0f3:	50                   	push   eax
c001a0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a0fc:	e8 29 fe ff ff       	call   c0019f2a <Reg::readInt(char*, char*, int*)>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	84 c0                	test   al,al
c001a106:	74 04                	je     c001a10c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a108:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a10c:	89 d8                	mov    eax,ebx
c001a10e:	83 c4 18             	add    esp,0x18
c001a111:	5b                   	pop    ebx
c001a112:	c3                   	ret    

c001a113 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a113:	56                   	push   esi
c001a114:	53                   	push   ebx
c001a115:	51                   	push   ecx
c001a116:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a11a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a122:	56                   	push   esi
c001a123:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a12b:	e8 e5 fe ff ff       	call   c001a015 <Reg::readString(char*, char*, char*, int)>
c001a130:	83 c4 10             	add    esp,0x10
c001a133:	84 c0                	test   al,al
c001a135:	74 02                	je     c001a139 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001a137:	89 f3                	mov    ebx,esi
c001a139:	89 d8                	mov    eax,ebx
c001a13b:	5a                   	pop    edx
c001a13c:	5b                   	pop    ebx
c001a13d:	5e                   	pop    esi
c001a13e:	c3                   	ret    

c001a13f <Sys::exit(regs*)>:
c001a13f:	83 ec 18             	sub    esp,0x18
c001a142:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a146:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a149:	e8 20 31 00 00       	call   c001d26e <terminateTask(int)>
c001a14e:	83 c8 ff             	or     eax,0xffffffff
c001a151:	83 c4 1c             	add    esp,0x1c
c001a154:	89 c2                	mov    edx,eax
c001a156:	c3                   	ret    

c001a157 <Sys::loadDLL(regs*)>:
c001a157:	56                   	push   esi
c001a158:	53                   	push   ebx
c001a159:	31 d2                	xor    edx,edx
c001a15b:	51                   	push   ecx
c001a15c:	b8 01 00 00 00       	mov    eax,0x1
c001a161:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a165:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a169:	74 7d                	je     c001a1e8 <Sys::loadDLL(regs*)+0x91>
c001a16b:	83 ec 0c             	sub    esp,0xc
c001a16e:	68 14 01 00 00       	push   0x114
c001a173:	e8 f0 7f ff ff       	call   c0012168 <operator new(unsigned long)>
c001a178:	83 c4 0c             	add    esp,0xc
c001a17b:	89 c3                	mov    ebx,eax
c001a17d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a182:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a188:	53                   	push   ebx
c001a189:	e8 f8 85 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001a18e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a191:	e8 c2 88 ff ff       	call   c0012a58 <File::exists()>
c001a196:	83 c4 10             	add    esp,0x10
c001a199:	84 c0                	test   al,al
c001a19b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a19d:	75 11                	jne    c001a1b0 <Sys::loadDLL(regs*)+0x59>
c001a19f:	83 ec 0c             	sub    esp,0xc
c001a1a2:	53                   	push   ebx
c001a1a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	b8 03 00 00 00       	mov    eax,0x3
c001a1ae:	eb 36                	jmp    c001a1e6 <Sys::loadDLL(regs*)+0x8f>
c001a1b0:	83 ec 0c             	sub    esp,0xc
c001a1b3:	53                   	push   ebx
c001a1b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a1b7:	58                   	pop    eax
c001a1b8:	5a                   	pop    edx
c001a1b9:	6a 00                	push   0x0
c001a1bb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a1be:	e8 c4 20 00 00       	call   c001c287 <Thr::loadDLL(char const*, bool)>
c001a1c3:	83 c4 10             	add    esp,0x10
c001a1c6:	89 c1                	mov    ecx,eax
c001a1c8:	31 d2                	xor    edx,edx
c001a1ca:	b8 04 00 00 00       	mov    eax,0x4
c001a1cf:	85 c9                	test   ecx,ecx
c001a1d1:	74 15                	je     c001a1e8 <Sys::loadDLL(regs*)+0x91>
c001a1d3:	53                   	push   ebx
c001a1d4:	53                   	push   ebx
c001a1d5:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c001a1db:	51                   	push   ecx
c001a1dc:	e8 6c 22 00 00       	call   c001c44d <Thr::executeDLL(unsigned long, void*)>
c001a1e1:	83 c4 10             	add    esp,0x10
c001a1e4:	31 c0                	xor    eax,eax
c001a1e6:	31 d2                	xor    edx,edx
c001a1e8:	59                   	pop    ecx
c001a1e9:	5b                   	pop    ebx
c001a1ea:	5e                   	pop    esi
c001a1eb:	c3                   	ret    

c001a1ec <Sys::read(regs*)>:
c001a1ec:	57                   	push   edi
c001a1ed:	56                   	push   esi
c001a1ee:	53                   	push   ebx
c001a1ef:	83 ec 10             	sub    esp,0x10
c001a1f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a1f9:	83 f8 02             	cmp    eax,0x2
c001a1fc:	77 10                	ja     c001a20e <Sys::read(regs*)+0x22>
c001a1fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a203:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a206:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a20c:	eb 0e                	jmp    c001a21c <Sys::read(regs*)+0x30>
c001a20e:	83 ec 0c             	sub    esp,0xc
c001a211:	50                   	push   eax
c001a212:	e8 18 6f ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	89 c1                	mov    ecx,eax
c001a21c:	83 c8 ff             	or     eax,0xffffffff
c001a21f:	85 c9                	test   ecx,ecx
c001a221:	89 c2                	mov    edx,eax
c001a223:	74 28                	je     c001a24d <Sys::read(regs*)+0x61>
c001a225:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a22d:	31 ff                	xor    edi,edi
c001a22f:	83 ec 0c             	sub    esp,0xc
c001a232:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a234:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a238:	52                   	push   edx
c001a239:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a23c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a23f:	57                   	push   edi
c001a240:	56                   	push   esi
c001a241:	51                   	push   ecx
c001a242:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a245:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a249:	83 c4 20             	add    esp,0x20
c001a24c:	99                   	cdq    
c001a24d:	83 c4 10             	add    esp,0x10
c001a250:	5b                   	pop    ebx
c001a251:	5e                   	pop    esi
c001a252:	5f                   	pop    edi
c001a253:	c3                   	ret    

c001a254 <Sys::sbrk(regs*)>:
c001a254:	56                   	push   esi
c001a255:	53                   	push   ebx
c001a256:	50                   	push   eax
c001a257:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a25c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a260:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a263:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a266:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a26c:	85 db                	test   ebx,ebx
c001a26e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a271:	74 02                	je     c001a275 <Sys::sbrk(regs*)+0x21>
c001a273:	79 06                	jns    c001a27b <Sys::sbrk(regs*)+0x27>
c001a275:	89 f0                	mov    eax,esi
c001a277:	31 d2                	xor    edx,edx
c001a279:	eb 2a                	jmp    c001a2a5 <Sys::sbrk(regs*)+0x51>
c001a27b:	83 c8 ff             	or     eax,0xffffffff
c001a27e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a284:	89 c2                	mov    edx,eax
c001a286:	77 1d                	ja     c001a2a5 <Sys::sbrk(regs*)+0x51>
c001a288:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a28e:	50                   	push   eax
c001a28f:	c1 ea 0c             	shr    edx,0xc
c001a292:	68 07 04 00 00       	push   0x407
c001a297:	52                   	push   edx
c001a298:	51                   	push   ecx
c001a299:	e8 ba 77 ff ff       	call   c0011a58 <VAS::allocatePages(int, int)>
c001a29e:	89 f0                	mov    eax,esi
c001a2a0:	31 d2                	xor    edx,edx
c001a2a2:	83 c4 10             	add    esp,0x10
c001a2a5:	59                   	pop    ecx
c001a2a6:	5b                   	pop    ebx
c001a2a7:	5e                   	pop    esi
c001a2a8:	c3                   	ret    

c001a2a9 <Sys::write(regs*)>:
c001a2a9:	57                   	push   edi
c001a2aa:	56                   	push   esi
c001a2ab:	53                   	push   ebx
c001a2ac:	83 ec 10             	sub    esp,0x10
c001a2af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a2b6:	83 f8 02             	cmp    eax,0x2
c001a2b9:	77 10                	ja     c001a2cb <Sys::write(regs*)+0x22>
c001a2bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a2c3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a2c9:	eb 0e                	jmp    c001a2d9 <Sys::write(regs*)+0x30>
c001a2cb:	83 ec 0c             	sub    esp,0xc
c001a2ce:	50                   	push   eax
c001a2cf:	e8 5b 6e ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a2d4:	83 c4 10             	add    esp,0x10
c001a2d7:	89 c1                	mov    ecx,eax
c001a2d9:	83 c8 ff             	or     eax,0xffffffff
c001a2dc:	85 c9                	test   ecx,ecx
c001a2de:	89 c2                	mov    edx,eax
c001a2e0:	74 28                	je     c001a30a <Sys::write(regs*)+0x61>
c001a2e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a2ea:	31 ff                	xor    edi,edi
c001a2ec:	83 ec 0c             	sub    esp,0xc
c001a2ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a2f1:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a2f5:	52                   	push   edx
c001a2f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a2f9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a2fc:	57                   	push   edi
c001a2fd:	56                   	push   esi
c001a2fe:	51                   	push   ecx
c001a2ff:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a302:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a306:	83 c4 20             	add    esp,0x20
c001a309:	99                   	cdq    
c001a30a:	83 c4 10             	add    esp,0x10
c001a30d:	5b                   	pop    ebx
c001a30e:	5e                   	pop    esi
c001a30f:	5f                   	pop    edi
c001a310:	c3                   	ret    

c001a311 <Sys::yield(regs*)>:
c001a311:	83 ec 0c             	sub    esp,0xc
c001a314:	e8 3f 25 00 00       	call   c001c858 <lockScheduler()>
c001a319:	e8 6e 28 00 00       	call   c001cb8c <schedule()>
c001a31e:	e8 37 25 00 00       	call   c001c85a <unlockScheduler()>
c001a323:	31 c0                	xor    eax,eax
c001a325:	31 d2                	xor    edx,edx
c001a327:	83 c4 0c             	add    esp,0xc
c001a32a:	c3                   	ret    

c001a32b <sysCallGetPID(regs*)>:
c001a32b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a330:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a333:	8b 00                	mov    eax,DWORD PTR [eax]
c001a335:	99                   	cdq    
c001a336:	c3                   	ret    

c001a337 <sysCallSeekDir(regs*)>:
c001a337:	31 c0                	xor    eax,eax
c001a339:	31 d2                	xor    edx,edx
c001a33b:	c3                   	ret    

c001a33c <sysCallTellDir(regs*)>:
c001a33c:	31 c0                	xor    eax,eax
c001a33e:	31 d2                	xor    edx,edx
c001a340:	c3                   	ret    

c001a341 <sysCallVerify(regs*)>:
c001a341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a345:	31 d2                	xor    edx,edx
c001a347:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a34a:	c3                   	ret    

c001a34b <sysCallFork(regs*)>:
c001a34b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a350:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a355:	c3                   	ret    

c001a356 <sysCallExecve(regs*)>:
c001a356:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a35b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a360:	c3                   	ret    

c001a361 <sysCallGetArgc(regs*)>:
c001a361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a366:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a369:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a36f:	99                   	cdq    
c001a370:	c3                   	ret    

c001a371 <sysFormatDisk(regs*)>:
c001a371:	56                   	push   esi
c001a372:	53                   	push   ebx
c001a373:	53                   	push   ebx
c001a374:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a378:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c001a37e:	eb 25                	jmp    c001a3a5 <sysFormatDisk(regs*)+0x34>
c001a380:	83 ec 0c             	sub    esp,0xc
c001a383:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a386:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a388:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a38b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a38e:	50                   	push   eax
c001a38f:	ff 34 85 00 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd5600]
c001a396:	53                   	push   ebx
c001a397:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a39a:	83 c4 20             	add    esp,0x20
c001a39d:	83 f8 08             	cmp    eax,0x8
c001a3a0:	75 12                	jne    c001a3b4 <sysFormatDisk(regs*)+0x43>
c001a3a2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a3a5:	85 db                	test   ebx,ebx
c001a3a7:	75 d7                	jne    c001a380 <sysFormatDisk(regs*)+0xf>
c001a3a9:	59                   	pop    ecx
c001a3aa:	b8 03 00 00 00       	mov    eax,0x3
c001a3af:	31 d2                	xor    edx,edx
c001a3b1:	5b                   	pop    ebx
c001a3b2:	5e                   	pop    esi
c001a3b3:	c3                   	ret    
c001a3b4:	85 c0                	test   eax,eax
c001a3b6:	74 1b                	je     c001a3d3 <sysFormatDisk(regs*)+0x62>
c001a3b8:	83 f8 09             	cmp    eax,0x9
c001a3bb:	74 0b                	je     c001a3c8 <sysFormatDisk(regs*)+0x57>
c001a3bd:	59                   	pop    ecx
c001a3be:	b8 02 00 00 00       	mov    eax,0x2
c001a3c3:	31 d2                	xor    edx,edx
c001a3c5:	5b                   	pop    ebx
c001a3c6:	5e                   	pop    esi
c001a3c7:	c3                   	ret    
c001a3c8:	59                   	pop    ecx
c001a3c9:	b8 01 00 00 00       	mov    eax,0x1
c001a3ce:	31 d2                	xor    edx,edx
c001a3d0:	5b                   	pop    ebx
c001a3d1:	5e                   	pop    esi
c001a3d2:	c3                   	ret    
c001a3d3:	59                   	pop    ecx
c001a3d4:	31 c0                	xor    eax,eax
c001a3d6:	31 d2                	xor    edx,edx
c001a3d8:	5b                   	pop    ebx
c001a3d9:	5e                   	pop    esi
c001a3da:	c3                   	ret    

c001a3db <sysSetDiskVolumeLabel(regs*)>:
c001a3db:	56                   	push   esi
c001a3dc:	53                   	push   ebx
c001a3dd:	53                   	push   ebx
c001a3de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a3e2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a3e5:	83 f8 19             	cmp    eax,0x19
c001a3e8:	77 29                	ja     c001a413 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a3ea:	8b 0c 85 00 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5600]
c001a3f1:	85 c9                	test   ecx,ecx
c001a3f3:	74 1e                	je     c001a413 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a3f5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a3f8:	85 d2                	test   edx,edx
c001a3fa:	74 17                	je     c001a413 <sysSetDiskVolumeLabel(regs*)+0x38>
c001a3fc:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a402:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a404:	52                   	push   edx
c001a405:	50                   	push   eax
c001a406:	51                   	push   ecx
c001a407:	53                   	push   ebx
c001a408:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a40b:	83 c4 10             	add    esp,0x10
c001a40e:	99                   	cdq    
c001a40f:	59                   	pop    ecx
c001a410:	5b                   	pop    ebx
c001a411:	5e                   	pop    esi
c001a412:	c3                   	ret    
c001a413:	59                   	pop    ecx
c001a414:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a419:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a41e:	5b                   	pop    ebx
c001a41f:	5e                   	pop    esi
c001a420:	c3                   	ret    

c001a421 <sysGetDiskVolumeLabel(regs*)>:
c001a421:	57                   	push   edi
c001a422:	56                   	push   esi
c001a423:	53                   	push   ebx
c001a424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a428:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a42b:	83 fa 19             	cmp    edx,0x19
c001a42e:	77 34                	ja     c001a464 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a430:	8b 0c 95 00 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5600]
c001a437:	85 c9                	test   ecx,ecx
c001a439:	74 29                	je     c001a464 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a43b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a43e:	85 db                	test   ebx,ebx
c001a440:	74 22                	je     c001a464 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a442:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a445:	85 c0                	test   eax,eax
c001a447:	74 1b                	je     c001a464 <sysGetDiskVolumeLabel(regs*)+0x43>
c001a449:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a44f:	83 ec 0c             	sub    esp,0xc
c001a452:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a454:	50                   	push   eax
c001a455:	53                   	push   ebx
c001a456:	52                   	push   edx
c001a457:	51                   	push   ecx
c001a458:	56                   	push   esi
c001a459:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a45c:	83 c4 20             	add    esp,0x20
c001a45f:	99                   	cdq    
c001a460:	5b                   	pop    ebx
c001a461:	5e                   	pop    esi
c001a462:	5f                   	pop    edi
c001a463:	c3                   	ret    
c001a464:	5b                   	pop    ebx
c001a465:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a46a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a46f:	5e                   	pop    esi
c001a470:	5f                   	pop    edi
c001a471:	c3                   	ret    

c001a472 <sysShutdown(regs*)>:
c001a472:	83 ec 0c             	sub    esp,0xc
c001a475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a479:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a47c:	85 c0                	test   eax,eax
c001a47e:	74 18                	je     c001a498 <sysShutdown(regs*)+0x26>
c001a480:	83 f8 01             	cmp    eax,0x1
c001a483:	74 38                	je     c001a4bd <sysShutdown(regs*)+0x4b>
c001a485:	83 f8 02             	cmp    eax,0x2
c001a488:	74 24                	je     c001a4ae <sysShutdown(regs*)+0x3c>
c001a48a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a48f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a494:	83 c4 0c             	add    esp,0xc
c001a497:	c3                   	ret    
c001a498:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001a49d:	8b 10                	mov    edx,DWORD PTR [eax]
c001a49f:	6a 00                	push   0x0
c001a4a1:	6a 00                	push   0x0
c001a4a3:	6a 00                	push   0x0
c001a4a5:	50                   	push   eax
c001a4a6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a4a9:	83 c4 10             	add    esp,0x10
c001a4ac:	eb dc                	jmp    c001a48a <sysShutdown(regs*)+0x18>
c001a4ae:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001a4b3:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4b5:	6a 00                	push   0x0
c001a4b7:	6a 00                	push   0x0
c001a4b9:	6a 01                	push   0x1
c001a4bb:	eb e8                	jmp    c001a4a5 <sysShutdown(regs*)+0x33>
c001a4bd:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c001a4c2:	85 c0                	test   eax,eax
c001a4c4:	74 02                	je     c001a4c8 <sysShutdown(regs*)+0x56>
c001a4c6:	ff d0                	call   eax
c001a4c8:	31 c0                	xor    eax,eax
c001a4ca:	31 d2                	xor    edx,edx
c001a4cc:	83 c4 0c             	add    esp,0xc
c001a4cf:	c3                   	ret    

c001a4d0 <sysCallGetCwd(regs*)>:
c001a4d0:	83 ec 10             	sub    esp,0x10
c001a4d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4d7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4da:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4e2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4e5:	e8 0d 86 ff ff       	call   c0012af7 <getcwd(Process*, char*, int)>
c001a4ea:	83 c4 1c             	add    esp,0x1c
c001a4ed:	99                   	cdq    
c001a4ee:	c3                   	ret    

c001a4ef <sysCallSetCwd(regs*)>:
c001a4ef:	83 ec 14             	sub    esp,0x14
c001a4f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4fe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a501:	e8 1b 86 ff ff       	call   c0012b21 <setcwd(Process*, char*)>
c001a506:	83 c4 1c             	add    esp,0x1c
c001a509:	99                   	cdq    
c001a50a:	c3                   	ret    

c001a50b <sysCallRealpath(regs*)>:
c001a50b:	83 ec 0c             	sub    esp,0xc
c001a50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a512:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a515:	85 d2                	test   edx,edx
c001a517:	74 07                	je     c001a520 <sysCallRealpath(regs*)+0x15>
c001a519:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a51c:	85 c0                	test   eax,eax
c001a51e:	75 0b                	jne    c001a52b <sysCallRealpath(regs*)+0x20>
c001a520:	b8 01 00 00 00       	mov    eax,0x1
c001a525:	31 d2                	xor    edx,edx
c001a527:	83 c4 0c             	add    esp,0xc
c001a52a:	c3                   	ret    
c001a52b:	51                   	push   ecx
c001a52c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a532:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a535:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a53b:	51                   	push   ecx
c001a53c:	52                   	push   edx
c001a53d:	50                   	push   eax
c001a53e:	e8 99 80 ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	31 c0                	xor    eax,eax
c001a548:	31 d2                	xor    edx,edx
c001a54a:	83 c4 0c             	add    esp,0xc
c001a54d:	c3                   	ret    

c001a54e <sysCallReadDir(regs*)>:
c001a54e:	53                   	push   ebx
c001a54f:	83 ec 18             	sub    esp,0x18
c001a552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a556:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a559:	83 f8 02             	cmp    eax,0x2
c001a55c:	76 53                	jbe    c001a5b1 <sysCallReadDir(regs*)+0x63>
c001a55e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a561:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a567:	77 4f                	ja     c001a5b8 <sysCallReadDir(regs*)+0x6a>
c001a569:	83 ec 0c             	sub    esp,0xc
c001a56c:	50                   	push   eax
c001a56d:	e8 bd 6b ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a572:	83 c4 10             	add    esp,0x10
c001a575:	85 c0                	test   eax,eax
c001a577:	74 50                	je     c001a5c9 <sysCallReadDir(regs*)+0x7b>
c001a579:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a581:	83 ec 0c             	sub    esp,0xc
c001a584:	8b 10                	mov    edx,DWORD PTR [eax]
c001a586:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a58a:	51                   	push   ecx
c001a58b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a58e:	6a 00                	push   0x0
c001a590:	68 10 01 00 00       	push   0x110
c001a595:	50                   	push   eax
c001a596:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a599:	83 c4 20             	add    esp,0x20
c001a59c:	85 c0                	test   eax,eax
c001a59e:	74 38                	je     c001a5d8 <sysCallReadDir(regs*)+0x8a>
c001a5a0:	83 f8 07             	cmp    eax,0x7
c001a5a3:	74 0c                	je     c001a5b1 <sysCallReadDir(regs*)+0x63>
c001a5a5:	b8 02 00 00 00       	mov    eax,0x2
c001a5aa:	31 d2                	xor    edx,edx
c001a5ac:	83 c4 18             	add    esp,0x18
c001a5af:	5b                   	pop    ebx
c001a5b0:	c3                   	ret    
c001a5b1:	b8 01 00 00 00       	mov    eax,0x1
c001a5b6:	eb f2                	jmp    c001a5aa <sysCallReadDir(regs*)+0x5c>
c001a5b8:	83 ec 08             	sub    esp,0x8
c001a5bb:	52                   	push   edx
c001a5bc:	68 e0 82 02 c0       	push   0xc00282e0
c001a5c1:	e8 91 7c ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a5c6:	83 c4 10             	add    esp,0x10
c001a5c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a5ce:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a5d3:	83 c4 18             	add    esp,0x18
c001a5d6:	5b                   	pop    ebx
c001a5d7:	c3                   	ret    
c001a5d8:	31 c0                	xor    eax,eax
c001a5da:	eb ce                	jmp    c001a5aa <sysCallReadDir(regs*)+0x5c>

c001a5dc <sysCallIsATTY(regs*)>:
c001a5dc:	83 ec 0c             	sub    esp,0xc
c001a5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a5e6:	83 f8 02             	cmp    eax,0x2
c001a5e9:	76 07                	jbe    c001a5f2 <sysCallIsATTY(regs*)+0x16>
c001a5eb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a5f0:	75 26                	jne    c001a618 <sysCallIsATTY(regs*)+0x3c>
c001a5f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5fa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a600:	85 c0                	test   eax,eax
c001a602:	74 24                	je     c001a628 <sysCallIsATTY(regs*)+0x4c>
c001a604:	83 ec 0c             	sub    esp,0xc
c001a607:	8b 10                	mov    edx,DWORD PTR [eax]
c001a609:	50                   	push   eax
c001a60a:	ff 12                	call   DWORD PTR [edx]
c001a60c:	31 d2                	xor    edx,edx
c001a60e:	0f b6 c0             	movzx  eax,al
c001a611:	83 c4 10             	add    esp,0x10
c001a614:	83 c4 0c             	add    esp,0xc
c001a617:	c3                   	ret    
c001a618:	83 ec 0c             	sub    esp,0xc
c001a61b:	50                   	push   eax
c001a61c:	e8 0e 6b ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a621:	83 c4 10             	add    esp,0x10
c001a624:	85 c0                	test   eax,eax
c001a626:	75 dc                	jne    c001a604 <sysCallIsATTY(regs*)+0x28>
c001a628:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a62d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a632:	83 c4 0c             	add    esp,0xc
c001a635:	c3                   	ret    

c001a636 <sysCallSeek(regs*)>:
c001a636:	53                   	push   ebx
c001a637:	83 ec 08             	sub    esp,0x8
c001a63a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a63e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a641:	83 f8 02             	cmp    eax,0x2
c001a644:	76 4a                	jbe    c001a690 <sysCallSeek(regs*)+0x5a>
c001a646:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a64b:	77 32                	ja     c001a67f <sysCallSeek(regs*)+0x49>
c001a64d:	83 ec 0c             	sub    esp,0xc
c001a650:	50                   	push   eax
c001a651:	e8 d9 6a ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a656:	83 c4 0c             	add    esp,0xc
c001a659:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001a65c:	31 db                	xor    ebx,ebx
c001a65e:	53                   	push   ebx
c001a65f:	51                   	push   ecx
c001a660:	50                   	push   eax
c001a661:	e8 42 82 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001a666:	83 c4 10             	add    esp,0x10
c001a669:	85 c0                	test   eax,eax
c001a66b:	0f 95 c0             	setne  al
c001a66e:	31 d2                	xor    edx,edx
c001a670:	0f b6 c0             	movzx  eax,al
c001a673:	f7 d8                	neg    eax
c001a675:	83 d2 00             	adc    edx,0x0
c001a678:	83 c4 08             	add    esp,0x8
c001a67b:	f7 da                	neg    edx
c001a67d:	5b                   	pop    ebx
c001a67e:	c3                   	ret    
c001a67f:	83 ec 08             	sub    esp,0x8
c001a682:	50                   	push   eax
c001a683:	68 9c 83 02 c0       	push   0xc002839c
c001a688:	e8 ca 7b ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a68d:	83 c4 10             	add    esp,0x10
c001a690:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a695:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a69a:	83 c4 08             	add    esp,0x8
c001a69d:	5b                   	pop    ebx
c001a69e:	c3                   	ret    

c001a69f <sysCallTell(regs*)>:
c001a69f:	53                   	push   ebx
c001a6a0:	83 ec 08             	sub    esp,0x8
c001a6a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a6a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a6aa:	83 f8 02             	cmp    eax,0x2
c001a6ad:	76 5e                	jbe    c001a70d <sysCallTell(regs*)+0x6e>
c001a6af:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a6b4:	77 2d                	ja     c001a6e3 <sysCallTell(regs*)+0x44>
c001a6b6:	83 ec 0c             	sub    esp,0xc
c001a6b9:	50                   	push   eax
c001a6ba:	e8 70 6a ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a6bf:	5a                   	pop    edx
c001a6c0:	59                   	pop    ecx
c001a6c1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a6c4:	50                   	push   eax
c001a6c5:	e8 34 82 ff ff       	call   c00128fe <File::tell(unsigned long long*)>
c001a6ca:	83 c4 10             	add    esp,0x10
c001a6cd:	85 c0                	test   eax,eax
c001a6cf:	0f 95 c0             	setne  al
c001a6d2:	31 d2                	xor    edx,edx
c001a6d4:	0f b6 c0             	movzx  eax,al
c001a6d7:	f7 d8                	neg    eax
c001a6d9:	83 d2 00             	adc    edx,0x0
c001a6dc:	83 c4 08             	add    esp,0x8
c001a6df:	f7 da                	neg    edx
c001a6e1:	5b                   	pop    ebx
c001a6e2:	c3                   	ret    
c001a6e3:	83 ec 08             	sub    esp,0x8
c001a6e6:	50                   	push   eax
c001a6e7:	68 b6 83 02 c0       	push   0xc00283b6
c001a6ec:	e8 66 7b ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a6f1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a6f4:	83 c4 10             	add    esp,0x10
c001a6f7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a6fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a704:	31 d2                	xor    edx,edx
c001a706:	31 c0                	xor    eax,eax
c001a708:	83 c4 08             	add    esp,0x8
c001a70b:	5b                   	pop    ebx
c001a70c:	c3                   	ret    
c001a70d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a712:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a717:	83 c4 08             	add    esp,0x8
c001a71a:	5b                   	pop    ebx
c001a71b:	c3                   	ret    

c001a71c <sysCallSizeFromFilename(regs*)>:
c001a71c:	57                   	push   edi
c001a71d:	56                   	push   esi
c001a71e:	53                   	push   ebx
c001a71f:	83 ec 10             	sub    esp,0x10
c001a722:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a726:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001a729:	83 fb 02             	cmp    ebx,0x2
c001a72c:	0f 86 8a 00 00 00    	jbe    c001a7bc <sysCallSizeFromFilename(regs*)+0xa0>
c001a732:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001a738:	77 56                	ja     c001a790 <sysCallSizeFromFilename(regs*)+0x74>
c001a73a:	83 ec 0c             	sub    esp,0xc
c001a73d:	68 14 01 00 00       	push   0x114
c001a742:	e8 21 7a ff ff       	call   c0012168 <operator new(unsigned long)>
c001a747:	83 c4 0c             	add    esp,0xc
c001a74a:	89 c7                	mov    edi,eax
c001a74c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a751:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a754:	53                   	push   ebx
c001a755:	57                   	push   edi
c001a756:	e8 2b 80 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001a75b:	83 c4 0c             	add    esp,0xc
c001a75e:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a762:	50                   	push   eax
c001a763:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a766:	57                   	push   edi
c001a767:	e8 2a 83 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c001a76c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a76f:	89 c3                	mov    ebx,eax
c001a771:	8b 07                	mov    eax,DWORD PTR [edi]
c001a773:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a776:	83 c4 10             	add    esp,0x10
c001a779:	31 c0                	xor    eax,eax
c001a77b:	85 db                	test   ebx,ebx
c001a77d:	0f 95 c0             	setne  al
c001a780:	31 d2                	xor    edx,edx
c001a782:	f7 d8                	neg    eax
c001a784:	83 d2 00             	adc    edx,0x0
c001a787:	83 c4 10             	add    esp,0x10
c001a78a:	f7 da                	neg    edx
c001a78c:	5b                   	pop    ebx
c001a78d:	5e                   	pop    esi
c001a78e:	5f                   	pop    edi
c001a78f:	c3                   	ret    
c001a790:	83 ec 08             	sub    esp,0x8
c001a793:	53                   	push   ebx
c001a794:	68 d0 83 02 c0       	push   0xc00283d0
c001a799:	e8 b9 7a ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a79e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a7a1:	83 c4 10             	add    esp,0x10
c001a7a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a7aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a7b1:	31 d2                	xor    edx,edx
c001a7b3:	83 c4 10             	add    esp,0x10
c001a7b6:	31 c0                	xor    eax,eax
c001a7b8:	5b                   	pop    ebx
c001a7b9:	5e                   	pop    esi
c001a7ba:	5f                   	pop    edi
c001a7bb:	c3                   	ret    
c001a7bc:	83 c4 10             	add    esp,0x10
c001a7bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a7c4:	5b                   	pop    ebx
c001a7c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a7ca:	5e                   	pop    esi
c001a7cb:	5f                   	pop    edi
c001a7cc:	c3                   	ret    

c001a7cd <sysCallSize(regs*)>:
c001a7cd:	53                   	push   ebx
c001a7ce:	83 ec 18             	sub    esp,0x18
c001a7d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a7d8:	83 f8 02             	cmp    eax,0x2
c001a7db:	76 64                	jbe    c001a841 <sysCallSize(regs*)+0x74>
c001a7dd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a7e2:	77 33                	ja     c001a817 <sysCallSize(regs*)+0x4a>
c001a7e4:	83 ec 0c             	sub    esp,0xc
c001a7e7:	50                   	push   eax
c001a7e8:	e8 42 69 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a7ed:	83 c4 0c             	add    esp,0xc
c001a7f0:	8d 54 24 13          	lea    edx,[esp+0x13]
c001a7f4:	52                   	push   edx
c001a7f5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a7f8:	50                   	push   eax
c001a7f9:	e8 98 82 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c001a7fe:	83 c4 10             	add    esp,0x10
c001a801:	85 c0                	test   eax,eax
c001a803:	0f 95 c0             	setne  al
c001a806:	31 d2                	xor    edx,edx
c001a808:	0f b6 c0             	movzx  eax,al
c001a80b:	f7 d8                	neg    eax
c001a80d:	83 d2 00             	adc    edx,0x0
c001a810:	83 c4 18             	add    esp,0x18
c001a813:	f7 da                	neg    edx
c001a815:	5b                   	pop    ebx
c001a816:	c3                   	ret    
c001a817:	83 ec 08             	sub    esp,0x8
c001a81a:	50                   	push   eax
c001a81b:	68 d0 83 02 c0       	push   0xc00283d0
c001a820:	e8 32 7a ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a825:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a831:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a838:	31 d2                	xor    edx,edx
c001a83a:	31 c0                	xor    eax,eax
c001a83c:	83 c4 18             	add    esp,0x18
c001a83f:	5b                   	pop    ebx
c001a840:	c3                   	ret    
c001a841:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a846:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a84b:	83 c4 18             	add    esp,0x18
c001a84e:	5b                   	pop    ebx
c001a84f:	c3                   	ret    

c001a850 <sysCallClose(regs*)>:
c001a850:	53                   	push   ebx
c001a851:	83 ec 08             	sub    esp,0x8
c001a854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a858:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a85b:	83 f8 02             	cmp    eax,0x2
c001a85e:	76 50                	jbe    c001a8b0 <sysCallClose(regs*)+0x60>
c001a860:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a865:	74 58                	je     c001a8bf <sysCallClose(regs*)+0x6f>
c001a867:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a86c:	74 60                	je     c001a8ce <sysCallClose(regs*)+0x7e>
c001a86e:	77 2f                	ja     c001a89f <sysCallClose(regs*)+0x4f>
c001a870:	83 ec 0c             	sub    esp,0xc
c001a873:	50                   	push   eax
c001a874:	e8 b6 68 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a879:	89 c3                	mov    ebx,eax
c001a87b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a87e:	e8 c5 7f ff ff       	call   c0012848 <File::close()>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	85 db                	test   ebx,ebx
c001a888:	74 0c                	je     c001a896 <sysCallClose(regs*)+0x46>
c001a88a:	83 ec 0c             	sub    esp,0xc
c001a88d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a88f:	53                   	push   ebx
c001a890:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a893:	83 c4 10             	add    esp,0x10
c001a896:	31 c0                	xor    eax,eax
c001a898:	31 d2                	xor    edx,edx
c001a89a:	83 c4 08             	add    esp,0x8
c001a89d:	5b                   	pop    ebx
c001a89e:	c3                   	ret    
c001a89f:	83 ec 08             	sub    esp,0x8
c001a8a2:	50                   	push   eax
c001a8a3:	68 04 83 02 c0       	push   0xc0028304
c001a8a8:	e8 aa 79 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a8ad:	83 c4 10             	add    esp,0x10
c001a8b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a8b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a8ba:	83 c4 08             	add    esp,0x8
c001a8bd:	5b                   	pop    ebx
c001a8be:	c3                   	ret    
c001a8bf:	83 ec 0c             	sub    esp,0xc
c001a8c2:	68 eb 83 02 c0       	push   0xc00283eb
c001a8c7:	e8 8b 79 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a8cc:	eb c5                	jmp    c001a893 <sysCallClose(regs*)+0x43>
c001a8ce:	83 ec 0c             	sub    esp,0xc
c001a8d1:	68 f9 83 02 c0       	push   0xc00283f9
c001a8d6:	eb ef                	jmp    c001a8c7 <sysCallClose(regs*)+0x77>

c001a8d8 <sysCallOpenDir(regs*)>:
c001a8d8:	56                   	push   esi
c001a8d9:	53                   	push   ebx
c001a8da:	53                   	push   ebx
c001a8db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8df:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001a8e2:	85 f6                	test   esi,esi
c001a8e4:	74 51                	je     c001a937 <sysCallOpenDir(regs*)+0x5f>
c001a8e6:	83 ec 0c             	sub    esp,0xc
c001a8e9:	68 14 01 00 00       	push   0x114
c001a8ee:	e8 75 78 ff ff       	call   c0012168 <operator new(unsigned long)>
c001a8f3:	83 c4 0c             	add    esp,0xc
c001a8f6:	89 c6                	mov    esi,eax
c001a8f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a900:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a903:	56                   	push   esi
c001a904:	e8 3f 83 ff ff       	call   c0012c48 <Directory::Directory(char const*, Process*)>
c001a909:	89 34 24             	mov    DWORD PTR [esp],esi
c001a90c:	e8 9b 83 ff ff       	call   c0012cac <Directory::open()>
c001a911:	83 c4 10             	add    esp,0x10
c001a914:	85 c0                	test   eax,eax
c001a916:	75 1f                	jne    c001a937 <sysCallOpenDir(regs*)+0x5f>
c001a918:	83 ec 0c             	sub    esp,0xc
c001a91b:	56                   	push   esi
c001a91c:	e8 59 65 ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c001a921:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	89 02                	mov    DWORD PTR [edx],eax
c001a929:	c1 f8 1f             	sar    eax,0x1f
c001a92c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a92f:	31 c0                	xor    eax,eax
c001a931:	59                   	pop    ecx
c001a932:	31 d2                	xor    edx,edx
c001a934:	5b                   	pop    ebx
c001a935:	5e                   	pop    esi
c001a936:	c3                   	ret    
c001a937:	59                   	pop    ecx
c001a938:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a93d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a942:	5b                   	pop    ebx
c001a943:	5e                   	pop    esi
c001a944:	c3                   	ret    

c001a945 <sysCallMakeDir(regs*)>:
c001a945:	56                   	push   esi
c001a946:	53                   	push   ebx
c001a947:	83 ec 10             	sub    esp,0x10
c001a94a:	68 14 01 00 00       	push   0x114
c001a94f:	e8 14 78 ff ff       	call   c0012168 <operator new(unsigned long)>
c001a954:	83 c4 0c             	add    esp,0xc
c001a957:	89 c3                	mov    ebx,eax
c001a959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a95e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a961:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a965:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a968:	53                   	push   ebx
c001a969:	e8 da 82 ff ff       	call   c0012c48 <Directory::Directory(char const*, Process*)>
c001a96e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a971:	e8 16 85 ff ff       	call   c0012e8c <Directory::create()>
c001a976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a979:	89 c6                	mov    esi,eax
c001a97b:	e8 88 83 ff ff       	call   c0012d08 <Directory::close()>
c001a980:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a982:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a985:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a988:	31 c0                	xor    eax,eax
c001a98a:	85 f6                	test   esi,esi
c001a98c:	0f 95 c0             	setne  al
c001a98f:	31 d2                	xor    edx,edx
c001a991:	f7 d8                	neg    eax
c001a993:	83 d2 00             	adc    edx,0x0
c001a996:	83 c4 14             	add    esp,0x14
c001a999:	f7 da                	neg    edx
c001a99b:	5b                   	pop    ebx
c001a99c:	5e                   	pop    esi
c001a99d:	c3                   	ret    

c001a99e <sysCallCloseDir(regs*)>:
c001a99e:	53                   	push   ebx
c001a99f:	83 ec 08             	sub    esp,0x8
c001a9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a9a9:	83 f8 02             	cmp    eax,0x2
c001a9ac:	76 47                	jbe    c001a9f5 <sysCallCloseDir(regs*)+0x57>
c001a9ae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9b3:	77 2f                	ja     c001a9e4 <sysCallCloseDir(regs*)+0x46>
c001a9b5:	83 ec 0c             	sub    esp,0xc
c001a9b8:	50                   	push   eax
c001a9b9:	e8 71 67 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001a9be:	89 c3                	mov    ebx,eax
c001a9c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9c3:	e8 40 83 ff ff       	call   c0012d08 <Directory::close()>
c001a9c8:	83 c4 10             	add    esp,0x10
c001a9cb:	85 db                	test   ebx,ebx
c001a9cd:	74 0c                	je     c001a9db <sysCallCloseDir(regs*)+0x3d>
c001a9cf:	83 ec 0c             	sub    esp,0xc
c001a9d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d4:	53                   	push   ebx
c001a9d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9d8:	83 c4 10             	add    esp,0x10
c001a9db:	31 c0                	xor    eax,eax
c001a9dd:	31 d2                	xor    edx,edx
c001a9df:	83 c4 08             	add    esp,0x8
c001a9e2:	5b                   	pop    ebx
c001a9e3:	c3                   	ret    
c001a9e4:	83 ec 08             	sub    esp,0x8
c001a9e7:	50                   	push   eax
c001a9e8:	68 2c 83 02 c0       	push   0xc002832c
c001a9ed:	e8 65 78 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001a9f2:	83 c4 10             	add    esp,0x10
c001a9f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9ff:	83 c4 08             	add    esp,0x8
c001aa02:	5b                   	pop    ebx
c001aa03:	c3                   	ret    

c001aa04 <sysCallWait(regs*)>:
c001aa04:	83 ec 10             	sub    esp,0x10
c001aa07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa0b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aa0e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001aa11:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aa14:	e8 ee 22 00 00       	call   c001cd07 <waitTask(int, int*, int)>
c001aa19:	83 c4 1c             	add    esp,0x1c
c001aa1c:	99                   	cdq    
c001aa1d:	c3                   	ret    

c001aa1e <sysCallRmdir(regs*)>:
c001aa1e:	56                   	push   esi
c001aa1f:	53                   	push   ebx
c001aa20:	83 ec 10             	sub    esp,0x10
c001aa23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa27:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001aa2a:	68 14 01 00 00       	push   0x114
c001aa2f:	e8 34 77 ff ff       	call   c0012168 <operator new(unsigned long)>
c001aa34:	83 c4 0c             	add    esp,0xc
c001aa37:	89 c3                	mov    ebx,eax
c001aa39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa3e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa41:	56                   	push   esi
c001aa42:	53                   	push   ebx
c001aa43:	e8 3e 7d ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001aa48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa4b:	e8 12 7f ff ff       	call   c0012962 <File::unlink()>
c001aa50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa53:	89 c6                	mov    esi,eax
c001aa55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa5a:	31 c0                	xor    eax,eax
c001aa5c:	85 f6                	test   esi,esi
c001aa5e:	0f 95 c0             	setne  al
c001aa61:	31 d2                	xor    edx,edx
c001aa63:	f7 d8                	neg    eax
c001aa65:	83 d2 00             	adc    edx,0x0
c001aa68:	83 c4 14             	add    esp,0x14
c001aa6b:	f7 da                	neg    edx
c001aa6d:	5b                   	pop    ebx
c001aa6e:	5e                   	pop    esi
c001aa6f:	c3                   	ret    

c001aa70 <sysCallUnlink(regs*)>:
c001aa70:	56                   	push   esi
c001aa71:	53                   	push   ebx
c001aa72:	83 ec 10             	sub    esp,0x10
c001aa75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa79:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001aa7c:	68 14 01 00 00       	push   0x114
c001aa81:	e8 e2 76 ff ff       	call   c0012168 <operator new(unsigned long)>
c001aa86:	83 c4 0c             	add    esp,0xc
c001aa89:	89 c3                	mov    ebx,eax
c001aa8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa90:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa93:	56                   	push   esi
c001aa94:	53                   	push   ebx
c001aa95:	e8 ec 7c ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001aa9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa9d:	e8 c0 7e ff ff       	call   c0012962 <File::unlink()>
c001aaa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaa5:	89 c6                	mov    esi,eax
c001aaa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaa9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aaac:	31 c0                	xor    eax,eax
c001aaae:	85 f6                	test   esi,esi
c001aab0:	0f 95 c0             	setne  al
c001aab3:	31 d2                	xor    edx,edx
c001aab5:	f7 d8                	neg    eax
c001aab7:	83 d2 00             	adc    edx,0x0
c001aaba:	83 c4 14             	add    esp,0x14
c001aabd:	f7 da                	neg    edx
c001aabf:	5b                   	pop    ebx
c001aac0:	5e                   	pop    esi
c001aac1:	c3                   	ret    

c001aac2 <sysCallGetArgv(regs*)>:
c001aac2:	83 ec 0c             	sub    esp,0xc
c001aac5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aac9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001aacc:	85 c0                	test   eax,eax
c001aace:	78 2b                	js     c001aafb <sysCallGetArgv(regs*)+0x39>
c001aad0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001aad6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001aad9:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001aadf:	7d 1a                	jge    c001aafb <sysCallGetArgv(regs*)+0x39>
c001aae1:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001aae8:	85 c0                	test   eax,eax
c001aaea:	74 17                	je     c001ab03 <sysCallGetArgv(regs*)+0x41>
c001aaec:	83 ec 08             	sub    esp,0x8
c001aaef:	50                   	push   eax
c001aaf0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001aaf3:	e8 93 5c fe ff       	call   c000078b <strcpy>
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	31 c0                	xor    eax,eax
c001aafd:	31 d2                	xor    edx,edx
c001aaff:	83 c4 0c             	add    esp,0xc
c001ab02:	c3                   	ret    
c001ab03:	b8 01 00 00 00       	mov    eax,0x1
c001ab08:	31 d2                	xor    edx,edx
c001ab0a:	83 c4 0c             	add    esp,0xc
c001ab0d:	c3                   	ret    

c001ab0e <sysCallTTYName(regs*)>:
c001ab0e:	56                   	push   esi
c001ab0f:	53                   	push   ebx
c001ab10:	53                   	push   ebx
c001ab11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab15:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001ab18:	85 c0                	test   eax,eax
c001ab1a:	74 5f                	je     c001ab7b <sysCallTTYName(regs*)+0x6d>
c001ab1c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ab1f:	83 f8 02             	cmp    eax,0x2
c001ab22:	77 3e                	ja     c001ab62 <sysCallTTYName(regs*)+0x54>
c001ab24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab2c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001ab32:	85 db                	test   ebx,ebx
c001ab34:	74 45                	je     c001ab7b <sysCallTTYName(regs*)+0x6d>
c001ab36:	83 ec 0c             	sub    esp,0xc
c001ab39:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab3b:	53                   	push   ebx
c001ab3c:	ff 10                	call   DWORD PTR [eax]
c001ab3e:	83 c4 10             	add    esp,0x10
c001ab41:	84 c0                	test   al,al
c001ab43:	74 41                	je     c001ab86 <sysCallTTYName(regs*)+0x78>
c001ab45:	83 ec 08             	sub    esp,0x8
c001ab48:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001ab4e:	53                   	push   ebx
c001ab4f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ab52:	e8 34 5c fe ff       	call   c000078b <strcpy>
c001ab57:	83 c4 10             	add    esp,0x10
c001ab5a:	31 c0                	xor    eax,eax
c001ab5c:	59                   	pop    ecx
c001ab5d:	31 d2                	xor    edx,edx
c001ab5f:	5b                   	pop    ebx
c001ab60:	5e                   	pop    esi
c001ab61:	c3                   	ret    
c001ab62:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ab67:	74 bb                	je     c001ab24 <sysCallTTYName(regs*)+0x16>
c001ab69:	83 ec 0c             	sub    esp,0xc
c001ab6c:	50                   	push   eax
c001ab6d:	e8 bd 65 ff ff       	call   c001112f <getFromFileDescriptor(int)>
c001ab72:	83 c4 10             	add    esp,0x10
c001ab75:	89 c3                	mov    ebx,eax
c001ab77:	85 db                	test   ebx,ebx
c001ab79:	75 bb                	jne    c001ab36 <sysCallTTYName(regs*)+0x28>
c001ab7b:	59                   	pop    ecx
c001ab7c:	b8 01 00 00 00       	mov    eax,0x1
c001ab81:	31 d2                	xor    edx,edx
c001ab83:	5b                   	pop    ebx
c001ab84:	5e                   	pop    esi
c001ab85:	c3                   	ret    
c001ab86:	59                   	pop    ecx
c001ab87:	b8 02 00 00 00       	mov    eax,0x2
c001ab8c:	31 d2                	xor    edx,edx
c001ab8e:	5b                   	pop    ebx
c001ab8f:	5e                   	pop    esi
c001ab90:	c3                   	ret    

c001ab91 <sysCallGetEnv(regs*)>:
c001ab91:	83 ec 0c             	sub    esp,0xc
c001ab94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab98:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001ab9b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ab9e:	85 c9                	test   ecx,ecx
c001aba0:	75 22                	jne    c001abc4 <sysCallGetEnv(regs*)+0x33>
c001aba2:	85 d2                	test   edx,edx
c001aba4:	74 08                	je     c001abae <sysCallGetEnv(regs*)+0x1d>
c001aba6:	31 c0                	xor    eax,eax
c001aba8:	31 d2                	xor    edx,edx
c001abaa:	83 c4 0c             	add    esp,0xc
c001abad:	c3                   	ret    
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	68 50 83 02 c0       	push   0xc0028350
c001abb6:	e8 4e 5b fe ff       	call   c0000709 <strlen>
c001abbb:	83 c4 10             	add    esp,0x10
c001abbe:	31 d2                	xor    edx,edx
c001abc0:	83 c4 0c             	add    esp,0xc
c001abc3:	c3                   	ret    
c001abc4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001abc7:	85 d2                	test   edx,edx
c001abc9:	74 05                	je     c001abd0 <sysCallGetEnv(regs*)+0x3f>
c001abcb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001abce:	eb d6                	jmp    c001aba6 <sysCallGetEnv(regs*)+0x15>
c001abd0:	83 ec 08             	sub    esp,0x8
c001abd3:	68 50 83 02 c0       	push   0xc0028350
c001abd8:	50                   	push   eax
c001abd9:	e8 ad 5b fe ff       	call   c000078b <strcpy>
c001abde:	83 c4 10             	add    esp,0x10
c001abe1:	eb c3                	jmp    c001aba6 <sysCallGetEnv(regs*)+0x15>

c001abe3 <sysCallUSleep(regs*)>:
c001abe3:	83 ec 14             	sub    esp,0x14
c001abe6:	b8 e8 03 00 00       	mov    eax,0x3e8
c001abeb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001abef:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001abf6:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001abf9:	01 ca                	add    edx,ecx
c001abfb:	52                   	push   edx
c001abfc:	50                   	push   eax
c001abfd:	e8 9e 21 00 00       	call   c001cda0 <nanoSleep(unsigned long long)>
c001ac02:	31 c0                	xor    eax,eax
c001ac04:	31 d2                	xor    edx,edx
c001ac06:	83 c4 1c             	add    esp,0x1c
c001ac09:	c3                   	ret    

c001ac0a <sysCallSpawn(regs*)>:
c001ac0a:	56                   	push   esi
c001ac0b:	53                   	push   ebx
c001ac0c:	53                   	push   ebx
c001ac0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac11:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001ac14:	85 f6                	test   esi,esi
c001ac16:	75 08                	jne    c001ac20 <sysCallSpawn(regs*)+0x16>
c001ac18:	59                   	pop    ecx
c001ac19:	31 c0                	xor    eax,eax
c001ac1b:	31 d2                	xor    edx,edx
c001ac1d:	5b                   	pop    ebx
c001ac1e:	5e                   	pop    esi
c001ac1f:	c3                   	ret    
c001ac20:	83 ec 0c             	sub    esp,0xc
c001ac23:	68 3b 07 00 00       	push   0x73b
c001ac28:	e8 3b 75 ff ff       	call   c0012168 <operator new(unsigned long)>
c001ac2d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ac30:	89 c6                	mov    esi,eax
c001ac32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac37:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac3a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ac3d:	56                   	push   esi
c001ac3e:	e8 bd 18 00 00       	call   c001c500 <Process::Process(char const*, Process*, char**)>
c001ac43:	83 c4 20             	add    esp,0x20
c001ac46:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001ac4d:	75 c9                	jne    c001ac18 <sysCallSpawn(regs*)+0xe>
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	56                   	push   esi
c001ac53:	e8 0e 1e 00 00       	call   c001ca66 <Process::createUserThread()>
c001ac58:	8b 06                	mov    eax,DWORD PTR [esi]
c001ac5a:	83 c4 10             	add    esp,0x10
c001ac5d:	99                   	cdq    
c001ac5e:	59                   	pop    ecx
c001ac5f:	5b                   	pop    ebx
c001ac60:	5e                   	pop    esi
c001ac61:	c3                   	ret    

c001ac62 <sysAppSettings(regs*)>:
c001ac62:	53                   	push   ebx
c001ac63:	83 ec 08             	sub    esp,0x8
c001ac66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac6a:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ac6d:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001ac73:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ac78:	66 3d c0 09          	cmp    ax,0x9c0
c001ac7c:	75 2f                	jne    c001acad <sysAppSettings(regs*)+0x4b>
c001ac7e:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001ac84:	83 e0 1f             	and    eax,0x1f
c001ac87:	3c 01                	cmp    al,0x1
c001ac89:	74 2e                	je     c001acb9 <sysAppSettings(regs*)+0x57>
c001ac8b:	3c 07                	cmp    al,0x7
c001ac8d:	0f 84 bd 00 00 00    	je     c001ad50 <sysAppSettings(regs*)+0xee>
c001ac93:	84 c0                	test   al,al
c001ac95:	0f 84 dc 00 00 00    	je     c001ad77 <sysAppSettings(regs*)+0x115>
c001ac9b:	3c 08                	cmp    al,0x8
c001ac9d:	74 6d                	je     c001ad0c <sysAppSettings(regs*)+0xaa>
c001ac9f:	0f b6 c0             	movzx  eax,al
c001aca2:	83 c4 08             	add    esp,0x8
c001aca5:	05 e8 03 00 00       	add    eax,0x3e8
c001acaa:	5b                   	pop    ebx
c001acab:	99                   	cdq    
c001acac:	c3                   	ret    
c001acad:	b8 01 00 00 00       	mov    eax,0x1
c001acb2:	31 d2                	xor    edx,edx
c001acb4:	83 c4 08             	add    esp,0x8
c001acb7:	5b                   	pop    ebx
c001acb8:	c3                   	ret    
c001acb9:	51                   	push   ecx
c001acba:	68 00 01 00 00       	push   0x100
c001acbf:	6a 00                	push   0x0
c001acc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acc9:	83 c0 0c             	add    eax,0xc
c001accc:	50                   	push   eax
c001accd:	e8 1a 5a fe ff       	call   c00006ec <memset>
c001acd2:	83 c4 0c             	add    esp,0xc
c001acd5:	68 ff 00 00 00       	push   0xff
c001acda:	53                   	push   ebx
c001acdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ace0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ace3:	83 c0 0c             	add    eax,0xc
c001ace6:	50                   	push   eax
c001ace7:	e8 ca 59 fe ff       	call   c00006b6 <memcpy>
c001acec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acf1:	5b                   	pop    ebx
c001acf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acf5:	5a                   	pop    edx
c001acf6:	8d 50 0c             	lea    edx,[eax+0xc]
c001acf9:	52                   	push   edx
c001acfa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ad00:	e8 09 56 ff ff       	call   c001030e <VgaText::setTitle(char*)>
c001ad05:	83 c4 10             	add    esp,0x10
c001ad08:	31 c0                	xor    eax,eax
c001ad0a:	eb a6                	jmp    c001acb2 <sysAppSettings(regs*)+0x50>
c001ad0c:	83 ec 08             	sub    esp,0x8
c001ad0f:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001ad15:	83 e0 0f             	and    eax,0xf
c001ad18:	50                   	push   eax
c001ad19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ad27:	e8 d2 55 ff ff       	call   c00102fe <VgaText::setTitleColour(VgaColour)>
c001ad2c:	58                   	pop    eax
c001ad2d:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001ad33:	5a                   	pop    edx
c001ad34:	c1 e8 04             	shr    eax,0x4
c001ad37:	83 e0 0f             	and    eax,0xf
c001ad3a:	50                   	push   eax
c001ad3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ad49:	e8 a0 55 ff ff       	call   c00102ee <VgaText::setTitleTextColour(VgaColour)>
c001ad4e:	eb b5                	jmp    c001ad05 <sysAppSettings(regs*)+0xa3>
c001ad50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad58:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ad5e:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001ad64:	c0 e8 06             	shr    al,0x6
c001ad67:	83 e0 01             	and    eax,0x1
c001ad6a:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001ad70:	31 c0                	xor    eax,eax
c001ad72:	e9 3b ff ff ff       	jmp    c001acb2 <sysAppSettings(regs*)+0x50>
c001ad77:	b8 02 00 00 00       	mov    eax,0x2
c001ad7c:	e9 31 ff ff ff       	jmp    c001acb2 <sysAppSettings(regs*)+0x50>

c001ad81 <sysSetFatAttrib(regs*)>:
c001ad81:	57                   	push   edi
c001ad82:	56                   	push   esi
c001ad83:	53                   	push   ebx
c001ad84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad88:	83 ec 0c             	sub    esp,0xc
c001ad8b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001ad8e:	68 14 01 00 00       	push   0x114
c001ad93:	e8 d0 73 ff ff       	call   c0012168 <operator new(unsigned long)>
c001ad98:	83 c4 0c             	add    esp,0xc
c001ad9b:	89 c3                	mov    ebx,eax
c001ad9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ada2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ada5:	57                   	push   edi
c001ada6:	53                   	push   ebx
c001ada7:	e8 da 79 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001adac:	83 c4 0c             	add    esp,0xc
c001adaf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001adb2:	0f b6 d4             	movzx  edx,ah
c001adb5:	0f b6 c0             	movzx  eax,al
c001adb8:	52                   	push   edx
c001adb9:	50                   	push   eax
c001adba:	53                   	push   ebx
c001adbb:	e8 3c 7c ff ff       	call   c00129fc <File::chfatattr(unsigned char, unsigned char)>
c001adc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adc3:	89 c6                	mov    esi,eax
c001adc5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adc7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adca:	83 c4 10             	add    esp,0x10
c001adcd:	31 c0                	xor    eax,eax
c001adcf:	5b                   	pop    ebx
c001add0:	85 f6                	test   esi,esi
c001add2:	5e                   	pop    esi
c001add3:	0f 95 c0             	setne  al
c001add6:	5f                   	pop    edi
c001add7:	31 d2                	xor    edx,edx
c001add9:	f7 d8                	neg    eax
c001addb:	83 d2 00             	adc    edx,0x0
c001adde:	f7 da                	neg    edx
c001ade0:	c3                   	ret    

c001ade1 <sysPanic(regs*)>:
c001ade1:	83 ec 18             	sub    esp,0x18
c001ade4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ade8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adeb:	e8 14 eb ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001adf0:	c7 04 24 07 84 02 c0 	mov    DWORD PTR [esp],0xc0028407
c001adf7:	e8 08 eb ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001adfc:	b8 01 00 00 00       	mov    eax,0x1
c001ae01:	31 d2                	xor    edx,edx
c001ae03:	83 c4 1c             	add    esp,0x1c
c001ae06:	c3                   	ret    

c001ae07 <sysPipe(regs*)>:
c001ae07:	57                   	push   edi
c001ae08:	56                   	push   esi
c001ae09:	53                   	push   ebx
c001ae0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0e:	83 ec 0c             	sub    esp,0xc
c001ae11:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ae14:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ae17:	6a 20                	push   0x20
c001ae19:	e8 4a 73 ff ff       	call   c0012168 <operator new(unsigned long)>
c001ae1e:	89 c3                	mov    ebx,eax
c001ae20:	58                   	pop    eax
c001ae21:	5a                   	pop    edx
c001ae22:	68 00 50 00 00       	push   0x5000
c001ae27:	53                   	push   ebx
c001ae28:	e8 1f 4e ff ff       	call   c000fc4c <Pipe::Pipe(int)>
c001ae2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae30:	e8 45 60 ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c001ae35:	89 07                	mov    DWORD PTR [edi],eax
c001ae37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae3a:	e8 3b 60 ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c001ae3f:	83 c4 10             	add    esp,0x10
c001ae42:	89 06                	mov    DWORD PTR [esi],eax
c001ae44:	31 d2                	xor    edx,edx
c001ae46:	5b                   	pop    ebx
c001ae47:	31 c0                	xor    eax,eax
c001ae49:	5e                   	pop    esi
c001ae4a:	5f                   	pop    edi
c001ae4b:	c3                   	ret    

c001ae4c <sysGetUnixTime(regs*)>:
c001ae4c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001ae51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ae57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae5b:	e9 ee 82 ff ff       	jmp    c001314e <Clock::timeInSecondsLocal()>

c001ae60 <string_ends_with(char const*, char const*)>:
c001ae60:	57                   	push   edi
c001ae61:	56                   	push   esi
c001ae62:	53                   	push   ebx
c001ae63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae67:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ae6b:	83 ec 0c             	sub    esp,0xc
c001ae6e:	53                   	push   ebx
c001ae6f:	e8 95 58 fe ff       	call   c0000709 <strlen>
c001ae74:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ae77:	89 c6                	mov    esi,eax
c001ae79:	e8 8b 58 fe ff       	call   c0000709 <strlen>
c001ae7e:	83 c4 10             	add    esp,0x10
c001ae81:	39 c6                	cmp    esi,eax
c001ae83:	7d 06                	jge    c001ae8b <string_ends_with(char const*, char const*)+0x2b>
c001ae85:	5b                   	pop    ebx
c001ae86:	31 c0                	xor    eax,eax
c001ae88:	5e                   	pop    esi
c001ae89:	5f                   	pop    edi
c001ae8a:	c3                   	ret    
c001ae8b:	83 ec 08             	sub    esp,0x8
c001ae8e:	29 c6                	sub    esi,eax
c001ae90:	57                   	push   edi
c001ae91:	01 f3                	add    ebx,esi
c001ae93:	53                   	push   ebx
c001ae94:	e8 43 59 fe ff       	call   c00007dc <strcmp>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	85 c0                	test   eax,eax
c001ae9e:	5b                   	pop    ebx
c001ae9f:	0f 94 c0             	sete   al
c001aea2:	5e                   	pop    esi
c001aea3:	0f b6 c0             	movzx  eax,al
c001aea6:	5f                   	pop    edi
c001aea7:	c3                   	ret    

c001aea8 <sysCallOpen(regs*)>:
c001aea8:	56                   	push   esi
c001aea9:	53                   	push   ebx
c001aeaa:	81 ec 04 01 00 00    	sub    esp,0x104
c001aeb0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001aeb7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001aeba:	85 c9                	test   ecx,ecx
c001aebc:	0f 84 b3 00 00 00    	je     c001af75 <sysCallOpen(regs*)+0xcd>
c001aec2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001aec5:	85 c0                	test   eax,eax
c001aec7:	0f 84 a8 00 00 00    	je     c001af75 <sysCallOpen(regs*)+0xcd>
c001aecd:	52                   	push   edx
c001aece:	68 16 84 02 c0       	push   0xc0028416
c001aed3:	50                   	push   eax
c001aed4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001aed8:	56                   	push   esi
c001aed9:	e8 fe 76 ff ff       	call   c00125dc <standardiseFiles(char*, char const*, char const*)>
c001aede:	89 34 24             	mov    DWORD PTR [esp],esi
c001aee1:	e8 23 58 fe ff       	call   c0000709 <strlen>
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	48                   	dec    eax
c001aeea:	74 1d                	je     c001af09 <sysCallOpen(regs*)+0x61>
c001aeec:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001aeef:	eb 0f                	jmp    c001af00 <sysCallOpen(regs*)+0x58>
c001aef1:	80 fa 3a             	cmp    dl,0x3a
c001aef4:	74 0f                	je     c001af05 <sysCallOpen(regs*)+0x5d>
c001aef6:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001aefa:	48                   	dec    eax
c001aefb:	74 0c                	je     c001af09 <sysCallOpen(regs*)+0x61>
c001aefd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001af00:	80 fa 2e             	cmp    dl,0x2e
c001af03:	75 ec                	jne    c001aef1 <sysCallOpen(regs*)+0x49>
c001af05:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001af09:	83 ec 08             	sub    esp,0x8
c001af0c:	68 1a 84 02 c0       	push   0xc002841a
c001af11:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af14:	e8 47 ff ff ff       	call   c001ae60 <string_ends_with(char const*, char const*)>
c001af19:	83 c4 10             	add    esp,0x10
c001af1c:	85 c0                	test   eax,eax
c001af1e:	75 17                	jne    c001af37 <sysCallOpen(regs*)+0x8f>
c001af20:	83 ec 08             	sub    esp,0x8
c001af23:	68 3b 84 02 c0       	push   0xc002843b
c001af28:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af2b:	e8 30 ff ff ff       	call   c001ae60 <string_ends_with(char const*, char const*)>
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	85 c0                	test   eax,eax
c001af35:	74 51                	je     c001af88 <sysCallOpen(regs*)+0xe0>
c001af37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af3a:	83 ec 08             	sub    esp,0x8
c001af3d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001af43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001af4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af4d:	ff 30                	push   DWORD PTR [eax]
c001af4f:	68 1f 84 02 c0       	push   0xc002841f
c001af54:	e8 fe 72 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001af59:	c7 04 24 2e 84 02 c0 	mov    DWORD PTR [esp],0xc002842e
c001af60:	e8 f2 72 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001af65:	83 c4 10             	add    esp,0x10
c001af68:	81 c4 04 01 00 00    	add    esp,0x104
c001af6e:	31 c0                	xor    eax,eax
c001af70:	31 d2                	xor    edx,edx
c001af72:	5b                   	pop    ebx
c001af73:	5e                   	pop    esi
c001af74:	c3                   	ret    
c001af75:	81 c4 04 01 00 00    	add    esp,0x104
c001af7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af80:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af85:	5b                   	pop    ebx
c001af86:	5e                   	pop    esi
c001af87:	c3                   	ret    
c001af88:	83 ec 08             	sub    esp,0x8
c001af8b:	68 1b 84 02 c0       	push   0xc002841b
c001af90:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af93:	e8 44 58 fe ff       	call   c00007dc <strcmp>
c001af98:	83 c4 10             	add    esp,0x10
c001af9b:	85 c0                	test   eax,eax
c001af9d:	74 98                	je     c001af37 <sysCallOpen(regs*)+0x8f>
c001af9f:	83 ec 08             	sub    esp,0x8
c001afa2:	68 1a 84 02 c0       	push   0xc002841a
c001afa7:	56                   	push   esi
c001afa8:	e8 b3 fe ff ff       	call   c001ae60 <string_ends_with(char const*, char const*)>
c001afad:	83 c4 10             	add    esp,0x10
c001afb0:	85 c0                	test   eax,eax
c001afb2:	75 83                	jne    c001af37 <sysCallOpen(regs*)+0x8f>
c001afb4:	83 ec 08             	sub    esp,0x8
c001afb7:	68 40 84 02 c0       	push   0xc0028440
c001afbc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afbf:	e8 9c fe ff ff       	call   c001ae60 <string_ends_with(char const*, char const*)>
c001afc4:	83 c4 10             	add    esp,0x10
c001afc7:	85 c0                	test   eax,eax
c001afc9:	0f 85 d1 00 00 00    	jne    c001b0a0 <sysCallOpen(regs*)+0x1f8>
c001afcf:	83 ec 08             	sub    esp,0x8
c001afd2:	68 45 84 02 c0       	push   0xc0028445
c001afd7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afda:	e8 81 fe ff ff       	call   c001ae60 <string_ends_with(char const*, char const*)>
c001afdf:	83 c4 10             	add    esp,0x10
c001afe2:	85 c0                	test   eax,eax
c001afe4:	0f 85 b6 00 00 00    	jne    c001b0a0 <sysCallOpen(regs*)+0x1f8>
c001afea:	83 ec 08             	sub    esp,0x8
c001afed:	68 41 84 02 c0       	push   0xc0028441
c001aff2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001aff5:	e8 e2 57 fe ff       	call   c00007dc <strcmp>
c001affa:	83 c4 10             	add    esp,0x10
c001affd:	85 c0                	test   eax,eax
c001afff:	0f 84 9b 00 00 00    	je     c001b0a0 <sysCallOpen(regs*)+0x1f8>
c001b005:	83 ec 08             	sub    esp,0x8
c001b008:	68 40 84 02 c0       	push   0xc0028440
c001b00d:	56                   	push   esi
c001b00e:	e8 4d fe ff ff       	call   c001ae60 <string_ends_with(char const*, char const*)>
c001b013:	83 c4 10             	add    esp,0x10
c001b016:	85 c0                	test   eax,eax
c001b018:	0f 85 82 00 00 00    	jne    c001b0a0 <sysCallOpen(regs*)+0x1f8>
c001b01e:	83 ec 0c             	sub    esp,0xc
c001b021:	68 14 01 00 00       	push   0x114
c001b026:	e8 3d 71 ff ff       	call   c0012168 <operator new(unsigned long)>
c001b02b:	83 c4 0c             	add    esp,0xc
c001b02e:	89 c6                	mov    esi,eax
c001b030:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b035:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b038:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b03b:	56                   	push   esi
c001b03c:	e8 45 77 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001b041:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	0f b6 c2             	movzx  eax,dl
c001b04a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b04d:	89 d0                	mov    eax,edx
c001b04f:	83 e0 01             	and    eax,0x1
c001b052:	f6 c2 02             	test   dl,0x2
c001b055:	74 03                	je     c001b05a <sysCallOpen(regs*)+0x1b2>
c001b057:	83 c8 02             	or     eax,0x2
c001b05a:	f6 c2 04             	test   dl,0x4
c001b05d:	74 03                	je     c001b062 <sysCallOpen(regs*)+0x1ba>
c001b05f:	83 c8 04             	or     eax,0x4
c001b062:	f6 c2 08             	test   dl,0x8
c001b065:	74 03                	je     c001b06a <sysCallOpen(regs*)+0x1c2>
c001b067:	83 c8 0a             	or     eax,0xa
c001b06a:	83 e2 10             	and    edx,0x10
c001b06d:	74 03                	je     c001b072 <sysCallOpen(regs*)+0x1ca>
c001b06f:	83 c8 12             	or     eax,0x12
c001b072:	83 ec 08             	sub    esp,0x8
c001b075:	50                   	push   eax
c001b076:	56                   	push   esi
c001b077:	e8 6e 77 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001b07c:	83 c4 10             	add    esp,0x10
c001b07f:	85 c0                	test   eax,eax
c001b081:	0f 85 ee fe ff ff    	jne    c001af75 <sysCallOpen(regs*)+0xcd>
c001b087:	83 ec 0c             	sub    esp,0xc
c001b08a:	56                   	push   esi
c001b08b:	e8 ea 5d ff ff       	call   c0010e7a <UnixFile::getFileDescriptor()>
c001b090:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b093:	89 02                	mov    DWORD PTR [edx],eax
c001b095:	c1 f8 1f             	sar    eax,0x1f
c001b098:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b09b:	e9 c5 fe ff ff       	jmp    c001af65 <sysCallOpen(regs*)+0xbd>
c001b0a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b0a3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b0a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b0b0:	e9 b3 fe ff ff       	jmp    c001af68 <sysCallOpen(regs*)+0xc0>

c001b0b5 <setupSystemCalls()>:
c001b0b5:	c7 05 c0 ae 02 c0 11 a3 01 c0 	mov    DWORD PTR ds:0xc002aec0,0xc001a311
c001b0bf:	c7 05 c4 ae 02 c0 3f a1 01 c0 	mov    DWORD PTR ds:0xc002aec4,0xc001a13f
c001b0c9:	c7 05 c8 ae 02 c0 54 a2 01 c0 	mov    DWORD PTR ds:0xc002aec8,0xc001a254
c001b0d3:	c7 05 cc ae 02 c0 a9 a2 01 c0 	mov    DWORD PTR ds:0xc002aecc,0xc001a2a9
c001b0dd:	c7 05 d0 ae 02 c0 ec a1 01 c0 	mov    DWORD PTR ds:0xc002aed0,0xc001a1ec
c001b0e7:	c7 05 d4 ae 02 c0 2b a3 01 c0 	mov    DWORD PTR ds:0xc002aed4,0xc001a32b
c001b0f1:	c7 05 d8 ae 02 c0 d0 a4 01 c0 	mov    DWORD PTR ds:0xc002aed8,0xc001a4d0
c001b0fb:	c7 05 dc ae 02 c0 ef a4 01 c0 	mov    DWORD PTR ds:0xc002aedc,0xc001a4ef
c001b105:	c7 05 e4 ae 02 c0 50 a8 01 c0 	mov    DWORD PTR ds:0xc002aee4,0xc001a850
c001b10f:	c7 05 e0 ae 02 c0 a8 ae 01 c0 	mov    DWORD PTR ds:0xc002aee0,0xc001aea8
c001b119:	c7 05 e8 ae 02 c0 d8 a8 01 c0 	mov    DWORD PTR ds:0xc002aee8,0xc001a8d8
c001b123:	c7 05 ec ae 02 c0 4e a5 01 c0 	mov    DWORD PTR ds:0xc002aeec,0xc001a54e
c001b12d:	c7 05 f0 ae 02 c0 37 a3 01 c0 	mov    DWORD PTR ds:0xc002aef0,0xc001a337
c001b137:	c7 05 f4 ae 02 c0 3c a3 01 c0 	mov    DWORD PTR ds:0xc002aef4,0xc001a33c
c001b141:	c7 05 f8 ae 02 c0 45 a9 01 c0 	mov    DWORD PTR ds:0xc002aef8,0xc001a945
c001b14b:	c7 05 fc ae 02 c0 9e a9 01 c0 	mov    DWORD PTR ds:0xc002aefc,0xc001a99e
c001b155:	c7 05 00 af 02 c0 36 a6 01 c0 	mov    DWORD PTR ds:0xc002af00,0xc001a636
c001b15f:	c7 05 04 af 02 c0 9f a6 01 c0 	mov    DWORD PTR ds:0xc002af04,0xc001a69f
c001b169:	c7 05 08 af 02 c0 cd a7 01 c0 	mov    DWORD PTR ds:0xc002af08,0xc001a7cd
c001b173:	c7 05 0c af 02 c0 41 a3 01 c0 	mov    DWORD PTR ds:0xc002af0c,0xc001a341
c001b17d:	c7 05 10 af 02 c0 04 aa 01 c0 	mov    DWORD PTR ds:0xc002af10,0xc001aa04
c001b187:	c7 05 14 af 02 c0 4b a3 01 c0 	mov    DWORD PTR ds:0xc002af14,0xc001a34b
c001b191:	c7 05 18 af 02 c0 56 a3 01 c0 	mov    DWORD PTR ds:0xc002af18,0xc001a356
c001b19b:	c7 05 1c af 02 c0 1e aa 01 c0 	mov    DWORD PTR ds:0xc002af1c,0xc001aa1e
c001b1a5:	c7 05 20 af 02 c0 70 aa 01 c0 	mov    DWORD PTR ds:0xc002af20,0xc001aa70
c001b1af:	c7 05 24 af 02 c0 61 a3 01 c0 	mov    DWORD PTR ds:0xc002af24,0xc001a361
c001b1b9:	c7 05 28 af 02 c0 c2 aa 01 c0 	mov    DWORD PTR ds:0xc002af28,0xc001aac2
c001b1c3:	c7 05 2c af 02 c0 0b a5 01 c0 	mov    DWORD PTR ds:0xc002af2c,0xc001a50b
c001b1cd:	c7 05 30 af 02 c0 0e ab 01 c0 	mov    DWORD PTR ds:0xc002af30,0xc001ab0e
c001b1d7:	c7 05 34 af 02 c0 dc a5 01 c0 	mov    DWORD PTR ds:0xc002af34,0xc001a5dc
c001b1e1:	c7 05 38 af 02 c0 e3 ab 01 c0 	mov    DWORD PTR ds:0xc002af38,0xc001abe3
c001b1eb:	c7 05 3c af 02 c0 1c a7 01 c0 	mov    DWORD PTR ds:0xc002af3c,0xc001a71c
c001b1f5:	c7 05 40 af 02 c0 0a ac 01 c0 	mov    DWORD PTR ds:0xc002af40,0xc001ac0a
c001b1ff:	c7 05 44 af 02 c0 91 ab 01 c0 	mov    DWORD PTR ds:0xc002af44,0xc001ab91
c001b209:	c7 05 48 af 02 c0 62 ac 01 c0 	mov    DWORD PTR ds:0xc002af48,0xc001ac62
c001b213:	c7 05 4c af 02 c0 71 a3 01 c0 	mov    DWORD PTR ds:0xc002af4c,0xc001a371
c001b21d:	c7 05 50 af 02 c0 db a3 01 c0 	mov    DWORD PTR ds:0xc002af50,0xc001a3db
c001b227:	c7 05 54 af 02 c0 21 a4 01 c0 	mov    DWORD PTR ds:0xc002af54,0xc001a421
c001b231:	c7 05 58 af 02 c0 81 ad 01 c0 	mov    DWORD PTR ds:0xc002af58,0xc001ad81
c001b23b:	c7 05 5c af 02 c0 e1 ad 01 c0 	mov    DWORD PTR ds:0xc002af5c,0xc001ade1
c001b245:	c7 05 60 af 02 c0 72 a4 01 c0 	mov    DWORD PTR ds:0xc002af60,0xc001a472
c001b24f:	c7 05 64 af 02 c0 07 ae 01 c0 	mov    DWORD PTR ds:0xc002af64,0xc001ae07
c001b259:	c7 05 68 af 02 c0 4c ae 01 c0 	mov    DWORD PTR ds:0xc002af68,0xc001ae4c
c001b263:	c7 05 6c af 02 c0 57 a1 01 c0 	mov    DWORD PTR ds:0xc002af6c,0xc001a157
c001b26d:	c3                   	ret    

c001b26e <systemCall(regs*, void*)>:
c001b26e:	53                   	push   ebx
c001b26f:	83 ec 08             	sub    esp,0x8
c001b272:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b276:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b279:	83 f8 7f             	cmp    eax,0x7f
c001b27c:	77 16                	ja     c001b294 <systemCall(regs*, void*)+0x26>
c001b27e:	8b 14 85 c0 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5140]
c001b285:	85 d2                	test   edx,edx
c001b287:	74 0b                	je     c001b294 <systemCall(regs*, void*)+0x26>
c001b289:	83 ec 0c             	sub    esp,0xc
c001b28c:	53                   	push   ebx
c001b28d:	ff d2                	call   edx
c001b28f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b292:	eb 0d                	jmp    c001b2a1 <systemCall(regs*, void*)+0x33>
c001b294:	52                   	push   edx
c001b295:	52                   	push   edx
c001b296:	50                   	push   eax
c001b297:	68 4a 84 02 c0       	push   0xc002844a
c001b29c:	e8 b6 6f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b2a1:	83 c4 10             	add    esp,0x10
c001b2a4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b2a9:	31 d2                	xor    edx,edx
c001b2ab:	83 c4 08             	add    esp,0x8
c001b2ae:	5b                   	pop    ebx
c001b2af:	c3                   	ret    

c001b2b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b2b0:	55                   	push   ebp
c001b2b1:	89 e5                	mov    ebp,esp
c001b2b3:	57                   	push   edi
c001b2b4:	56                   	push   esi
c001b2b5:	53                   	push   ebx
c001b2b6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b2bc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b2bf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b2c2:	85 c0                	test   eax,eax
c001b2c4:	0f 95 c1             	setne  cl
c001b2c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b2cb:	0f 94 c2             	sete   dl
c001b2ce:	84 d1                	test   cl,dl
c001b2d0:	74 26                	je     c001b2f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b2d2:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b2d9:	74 1d                	je     c001b2f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b2db:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b2de:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b2e4:	89 d6                	mov    esi,edx
c001b2e6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b2ec:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b2f2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b2f5:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b2f8:	83 ec 0c             	sub    esp,0xc
c001b2fb:	05 ff 0f 00 00       	add    eax,0xfff
c001b300:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b303:	6a 01                	push   0x1
c001b305:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b30b:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b311:	e8 6f 5f ff ff       	call   c0011285 <Virt::allocateKernelVirtualPages(int)>
c001b316:	83 c4 10             	add    esp,0x10
c001b319:	89 c6                	mov    esi,eax
c001b31b:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b321:	0f 86 21 01 00 00    	jbe    c001b448 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b327:	c1 eb 0c             	shr    ebx,0xc
c001b32a:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b334:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b33a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b33d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b340:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b346:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b349:	29 d8                	sub    eax,ebx
c001b34b:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b351:	0f 83 f4 00 00 00    	jae    c001b44b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b357:	83 ec 0c             	sub    esp,0xc
c001b35a:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b360:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b363:	3d 00 10 00 00       	cmp    eax,0x1000
c001b368:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b36a:	52                   	push   edx
c001b36b:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b371:	52                   	push   edx
c001b372:	76 05                	jbe    c001b379 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b374:	b8 00 10 00 00       	mov    eax,0x1000
c001b379:	31 d2                	xor    edx,edx
c001b37b:	52                   	push   edx
c001b37c:	50                   	push   eax
c001b37d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b380:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b383:	83 c4 20             	add    esp,0x20
c001b386:	85 c0                	test   eax,eax
c001b388:	74 1f                	je     c001b3a9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b38a:	51                   	push   ecx
c001b38b:	51                   	push   ecx
c001b38c:	50                   	push   eax
c001b38d:	68 5e 84 02 c0       	push   0xc002845e
c001b392:	e8 c0 6e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b397:	89 34 24             	mov    DWORD PTR [esp],esi
c001b39a:	e8 40 62 ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c001b39f:	83 c4 10             	add    esp,0x10
c001b3a2:	31 c0                	xor    eax,eax
c001b3a4:	e9 7c 01 00 00       	jmp    c001b525 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b3a9:	e8 aa 14 00 00       	call   c001c858 <lockScheduler()>
c001b3ae:	e8 5d 43 ff ff       	call   c000f710 <Phys::allocatePage()>
c001b3b3:	6a 07                	push   0x7
c001b3b5:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b3bb:	56                   	push   esi
c001b3bc:	50                   	push   eax
c001b3bd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b3c3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b3c6:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b3cc:	e8 87 65 ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b3d1:	83 c4 0c             	add    esp,0xc
c001b3d4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b3da:	6a 00                	push   0x0
c001b3dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b3e2:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b3e5:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b3eb:	e8 c6 63 ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001b3f0:	58                   	pop    eax
c001b3f1:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b3f7:	5a                   	pop    edx
c001b3f8:	68 07 04 00 00       	push   0x407
c001b3fd:	53                   	push   ebx
c001b3fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b404:	50                   	push   eax
c001b405:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b40b:	6a 00                	push   0x0
c001b40d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b412:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b415:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b41b:	e8 ee 68 ff ff       	call   c0011d0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b420:	83 c4 1c             	add    esp,0x1c
c001b423:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b429:	68 00 10 00 00       	push   0x1000
c001b42e:	50                   	push   eax
c001b42f:	56                   	push   esi
c001b430:	e8 81 52 fe ff       	call   c00006b6 <memcpy>
c001b435:	e8 20 14 00 00       	call   c001c85a <unlockScheduler()>
c001b43a:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b440:	83 c4 10             	add    esp,0x10
c001b443:	e9 f5 fe ff ff       	jmp    c001b33d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b448:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b44b:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b455:	0f 86 bc 00 00 00    	jbe    c001b517 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b45b:	e8 f8 13 00 00       	call   c001c858 <lockScheduler()>
c001b460:	51                   	push   ecx
c001b461:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b467:	6a 00                	push   0x0
c001b469:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b46e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b471:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b477:	e8 3a 63 ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001b47c:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b482:	83 c4 10             	add    esp,0x10
c001b485:	c1 e8 0c             	shr    eax,0xc
c001b488:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b492:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b498:	e8 73 42 ff ff       	call   c000f710 <Phys::allocatePage()>
c001b49d:	6a 07                	push   0x7
c001b49f:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b4a5:	56                   	push   esi
c001b4a6:	50                   	push   eax
c001b4a7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b4ad:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b4b0:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b4b6:	e8 9d 64 ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b4bb:	58                   	pop    eax
c001b4bc:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b4c2:	5a                   	pop    edx
c001b4c3:	68 07 04 00 00       	push   0x407
c001b4c8:	53                   	push   ebx
c001b4c9:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b4cf:	50                   	push   eax
c001b4d0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b4d6:	6a 00                	push   0x0
c001b4d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4e0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b4e6:	e8 23 68 ff ff       	call   c0011d0e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b4eb:	83 c4 1c             	add    esp,0x1c
c001b4ee:	68 00 10 00 00       	push   0x1000
c001b4f3:	6a 00                	push   0x0
c001b4f5:	56                   	push   esi
c001b4f6:	e8 f1 51 fe ff       	call   c00006ec <memset>
c001b4fb:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b501:	83 c4 10             	add    esp,0x10
c001b504:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b50a:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b510:	77 86                	ja     c001b498 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b512:	e8 43 13 00 00       	call   c001c85a <unlockScheduler()>
c001b517:	83 ec 0c             	sub    esp,0xc
c001b51a:	56                   	push   esi
c001b51b:	e8 bf 60 ff ff       	call   c00115df <Virt::freeKernelVirtualPages(unsigned long)>
c001b520:	83 c4 10             	add    esp,0x10
c001b523:	b0 01                	mov    al,0x1
c001b525:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b528:	5b                   	pop    ebx
c001b529:	5e                   	pop    esi
c001b52a:	5f                   	pop    edi
c001b52b:	5d                   	pop    ebp
c001b52c:	c3                   	ret    

c001b52d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b52d:	55                   	push   ebp
c001b52e:	57                   	push   edi
c001b52f:	56                   	push   esi
c001b530:	53                   	push   ebx
c001b531:	83 ec 48             	sub    esp,0x48
c001b534:	68 14 01 00 00       	push   0x114
c001b539:	e8 2a 6c ff ff       	call   c0012168 <operator new(unsigned long)>
c001b53e:	83 c4 0c             	add    esp,0xc
c001b541:	89 c6                	mov    esi,eax
c001b543:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b547:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b54b:	50                   	push   eax
c001b54c:	e8 35 72 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001b551:	58                   	pop    eax
c001b552:	5a                   	pop    edx
c001b553:	6a 01                	push   0x1
c001b555:	56                   	push   esi
c001b556:	e8 8f 72 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001b55b:	83 c4 10             	add    esp,0x10
c001b55e:	85 c0                	test   eax,eax
c001b560:	0f 85 47 01 00 00    	jne    c001b6ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b566:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b56e:	83 ec 0c             	sub    esp,0xc
c001b571:	6a 34                	push   0x34
c001b573:	e8 ee 3b ff ff       	call   c000f166 <malloc>
c001b578:	89 c3                	mov    ebx,eax
c001b57a:	58                   	pop    eax
c001b57b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b57d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001b581:	57                   	push   edi
c001b582:	53                   	push   ebx
c001b583:	6a 00                	push   0x0
c001b585:	6a 34                	push   0x34
c001b587:	56                   	push   esi
c001b588:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b58b:	83 c4 20             	add    esp,0x20
c001b58e:	85 c0                	test   eax,eax
c001b590:	0f 85 17 01 00 00    	jne    c001b6ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b596:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001b59c:	0f 85 0b 01 00 00    	jne    c001b6ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b5a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5a5:	85 c0                	test   eax,eax
c001b5a7:	0f 84 00 01 00 00    	je     c001b6ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b5ad:	31 d2                	xor    edx,edx
c001b5af:	55                   	push   ebp
c001b5b0:	52                   	push   edx
c001b5b1:	50                   	push   eax
c001b5b2:	56                   	push   esi
c001b5b3:	e8 f0 72 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	85 c0                	test   eax,eax
c001b5bd:	0f 85 ea 00 00 00    	jne    c001b6ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b5c3:	83 ec 0c             	sub    esp,0xc
c001b5c6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001b5c9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b5cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b5d1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b5d5:	0f af c2             	imul   eax,edx
c001b5d8:	50                   	push   eax
c001b5d9:	e8 88 3b ff ff       	call   c000f166 <malloc>
c001b5de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b5e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5e5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b5e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b5eb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001b5ef:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001b5f3:	0f af c2             	imul   eax,edx
c001b5f6:	99                   	cdq    
c001b5f7:	52                   	push   edx
c001b5f8:	50                   	push   eax
c001b5f9:	56                   	push   esi
c001b5fa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b5fd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b600:	83 c4 20             	add    esp,0x20
c001b603:	85 c0                	test   eax,eax
c001b605:	0f 84 a2 00 00 00    	je     c001b6ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b60b:	31 d2                	xor    edx,edx
c001b60d:	51                   	push   ecx
c001b60e:	52                   	push   edx
c001b60f:	50                   	push   eax
c001b610:	56                   	push   esi
c001b611:	e8 92 72 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001b616:	83 c4 10             	add    esp,0x10
c001b619:	85 c0                	test   eax,eax
c001b61b:	0f 85 8c 00 00 00    	jne    c001b6ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b621:	83 ec 0c             	sub    esp,0xc
c001b624:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b628:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b62c:	31 ed                	xor    ebp,ebp
c001b62e:	0f af c2             	imul   eax,edx
c001b631:	50                   	push   eax
c001b632:	e8 2f 3b ff ff       	call   c000f166 <malloc>
c001b637:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b63a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b63e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001b640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b644:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001b648:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001b64c:	0f af c2             	imul   eax,edx
c001b64f:	99                   	cdq    
c001b650:	52                   	push   edx
c001b651:	50                   	push   eax
c001b652:	56                   	push   esi
c001b653:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b656:	83 c4 20             	add    esp,0x20
c001b659:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b661:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001b665:	0f 86 80 00 00 00    	jbe    c001b6eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001b66b:	0f b7 fd             	movzx  edi,bp
c001b66e:	c1 e7 05             	shl    edi,0x5
c001b671:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001b675:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001b678:	75 6b                	jne    c001b6e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b67a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001b67d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b681:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001b684:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b688:	52                   	push   edx
c001b689:	31 d2                	xor    edx,edx
c001b68b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001b68e:	52                   	push   edx
c001b68f:	50                   	push   eax
c001b690:	56                   	push   esi
c001b691:	e8 12 72 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001b696:	83 c4 10             	add    esp,0x10
c001b699:	85 c0                	test   eax,eax
c001b69b:	74 17                	je     c001b6b4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001b69d:	83 ec 0c             	sub    esp,0xc
c001b6a0:	68 89 84 02 c0       	push   0xc0028489
c001b6a5:	e8 ad 6b ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b6aa:	83 c4 10             	add    esp,0x10
c001b6ad:	31 c0                	xor    eax,eax
c001b6af:	e9 87 00 00 00       	jmp    c001b73b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001b6b4:	83 ec 0c             	sub    esp,0xc
c001b6b7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001b6ba:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001b6bd:	50                   	push   eax
c001b6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b6c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6c6:	56                   	push   esi
c001b6c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001b6cb:	e8 e0 fb ff ff       	call   c001b2b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001b6d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b6d4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001b6d8:	83 c4 20             	add    esp,0x20
c001b6db:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b6df:	73 04                	jae    c001b6e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001b6e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b6e5:	45                   	inc    ebp
c001b6e6:	e9 76 ff ff ff       	jmp    c001b661 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001b6eb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001b6ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6f7:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001b6fd:	83 ec 0c             	sub    esp,0xc
c001b700:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001b706:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b70b:	05 00 10 00 00       	add    eax,0x1000
c001b710:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b713:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b717:	e8 5a 3a ff ff       	call   c000f176 <free>
c001b71c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b71f:	e8 52 3a ff ff       	call   c000f176 <free>
c001b724:	58                   	pop    eax
c001b725:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b729:	e8 48 3a ff ff       	call   c000f176 <free>
c001b72e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b731:	e8 12 71 ff ff       	call   c0012848 <File::close()>
c001b736:	83 c4 10             	add    esp,0x10
c001b739:	b0 01                	mov    al,0x1
c001b73b:	83 c4 3c             	add    esp,0x3c
c001b73e:	5b                   	pop    ebx
c001b73f:	5e                   	pop    esi
c001b740:	5f                   	pop    edi
c001b741:	5d                   	pop    ebp
c001b742:	c3                   	ret    

c001b743 <Thr::runtimeReferenceHelper()>:
c001b743:	83 ec 18             	sub    esp,0x18
c001b746:	68 91 84 02 c0       	push   0xc0028491
c001b74b:	e8 07 6b ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001b750:	fa                   	cli    
c001b751:	83 c4 10             	add    esp,0x10
c001b754:	eb fe                	jmp    c001b754 <Thr::runtimeReferenceHelper()+0x11>

c001b756 <Thr::getAddressOfKernelSymbol(char const*)>:
c001b756:	57                   	push   edi
c001b757:	56                   	push   esi
c001b758:	53                   	push   ebx
c001b759:	31 db                	xor    ebx,ebx
c001b75b:	39 1d 60 b8 02 c0    	cmp    DWORD PTR ds:0xc002b860,ebx
c001b761:	7e 3c                	jle    c001b79f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001b763:	8b 34 9d e0 b7 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4820]
c001b76a:	31 ff                	xor    edi,edi
c001b76c:	39 3c 9d e0 b6 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4920],edi
c001b773:	7e 27                	jle    c001b79c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001b775:	50                   	push   eax
c001b776:	50                   	push   eax
c001b777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b77b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b77d:	03 04 9d 60 b7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd48a0]
c001b784:	50                   	push   eax
c001b785:	e8 52 50 fe ff       	call   c00007dc <strcmp>
c001b78a:	83 c4 10             	add    esp,0x10
c001b78d:	85 c0                	test   eax,eax
c001b78f:	75 05                	jne    c001b796 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001b791:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b794:	eb 0b                	jmp    c001b7a1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001b796:	83 c6 10             	add    esi,0x10
c001b799:	47                   	inc    edi
c001b79a:	eb d0                	jmp    c001b76c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001b79c:	43                   	inc    ebx
c001b79d:	eb bc                	jmp    c001b75b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001b79f:	31 c0                	xor    eax,eax
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	5f                   	pop    edi
c001b7a4:	c3                   	ret    

c001b7a5 <Thr::loadKernelSymbolTable(char const*)>:
c001b7a5:	55                   	push   ebp
c001b7a6:	57                   	push   edi
c001b7a7:	56                   	push   esi
c001b7a8:	53                   	push   ebx
c001b7a9:	83 ec 68             	sub    esp,0x68
c001b7ac:	8b 35 b4 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b8b4
c001b7b2:	68 14 01 00 00       	push   0x114
c001b7b7:	e8 ac 69 ff ff       	call   c0012168 <operator new(unsigned long)>
c001b7bc:	83 c4 0c             	add    esp,0xc
c001b7bf:	89 c3                	mov    ebx,eax
c001b7c1:	56                   	push   esi
c001b7c2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b7c6:	50                   	push   eax
c001b7c7:	e8 ba 6f ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001b7cc:	5e                   	pop    esi
c001b7cd:	5f                   	pop    edi
c001b7ce:	6a 01                	push   0x1
c001b7d0:	53                   	push   ebx
c001b7d1:	e8 14 70 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001b7d6:	83 c4 10             	add    esp,0x10
c001b7d9:	31 d2                	xor    edx,edx
c001b7db:	85 c0                	test   eax,eax
c001b7dd:	0f 85 79 02 00 00    	jne    c001ba5c <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001b7e3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b7eb:	83 ec 0c             	sub    esp,0xc
c001b7ee:	6a 34                	push   0x34
c001b7f0:	e8 71 39 ff ff       	call   c000f166 <malloc>
c001b7f5:	59                   	pop    ecx
c001b7f6:	89 c7                	mov    edi,eax
c001b7f8:	8d 74 24 34          	lea    esi,[esp+0x34]
c001b7fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7fe:	56                   	push   esi
c001b7ff:	57                   	push   edi
c001b800:	6a 00                	push   0x0
c001b802:	6a 34                	push   0x34
c001b804:	53                   	push   ebx
c001b805:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b808:	83 c4 20             	add    esp,0x20
c001b80b:	85 c0                	test   eax,eax
c001b80d:	74 17                	je     c001b826 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001b80f:	83 ec 0c             	sub    esp,0xc
c001b812:	68 b3 84 02 c0       	push   0xc00284b3
c001b817:	e8 e8 e0 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001b81c:	83 c4 10             	add    esp,0x10
c001b81f:	31 d2                	xor    edx,edx
c001b821:	e9 36 02 00 00       	jmp    c001ba5c <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001b826:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b82c:	75 e1                	jne    c001b80f <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b82e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b831:	85 c0                	test   eax,eax
c001b833:	74 da                	je     c001b80f <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b835:	52                   	push   edx
c001b836:	31 d2                	xor    edx,edx
c001b838:	52                   	push   edx
c001b839:	50                   	push   eax
c001b83a:	53                   	push   ebx
c001b83b:	e8 68 70 ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001b840:	83 c4 10             	add    esp,0x10
c001b843:	85 c0                	test   eax,eax
c001b845:	75 c8                	jne    c001b80f <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b847:	83 ec 0c             	sub    esp,0xc
c001b84a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b84e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b852:	31 ed                	xor    ebp,ebp
c001b854:	0f af c2             	imul   eax,edx
c001b857:	50                   	push   eax
c001b858:	e8 09 39 ff ff       	call   c000f166 <malloc>
c001b85d:	89 34 24             	mov    DWORD PTR [esp],esi
c001b860:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b864:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b866:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b86a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b86e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b872:	0f af c2             	imul   eax,edx
c001b875:	99                   	cdq    
c001b876:	52                   	push   edx
c001b877:	50                   	push   eax
c001b878:	53                   	push   ebx
c001b879:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b87c:	83 c4 20             	add    esp,0x20
c001b87f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b887:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b88f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b897:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b89f:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001b8a3:	0f 86 aa 00 00 00    	jbe    c001b953 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001b8a9:	0f b7 f5             	movzx  esi,bp
c001b8ac:	6b f6 28             	imul   esi,esi,0x28
c001b8af:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001b8b3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b8b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8ba:	50                   	push   eax
c001b8bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8bf:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001b8c3:	8b 16                	mov    edx,DWORD PTR [esi]
c001b8c5:	6b c0 28             	imul   eax,eax,0x28
c001b8c8:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001b8cc:	89 d0                	mov    eax,edx
c001b8ce:	31 d2                	xor    edx,edx
c001b8d0:	52                   	push   edx
c001b8d1:	50                   	push   eax
c001b8d2:	53                   	push   ebx
c001b8d3:	e8 d0 6f ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001b8d8:	83 c4 0c             	add    esp,0xc
c001b8db:	6a 20                	push   0x20
c001b8dd:	6a 00                	push   0x0
c001b8df:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b8e3:	52                   	push   edx
c001b8e4:	e8 03 4e fe ff       	call   c00006ec <memset>
c001b8e9:	58                   	pop    eax
c001b8ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8ec:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001b8f0:	51                   	push   ecx
c001b8f1:	8d 54 24 40          	lea    edx,[esp+0x40]
c001b8f5:	52                   	push   edx
c001b8f6:	6a 00                	push   0x0
c001b8f8:	6a 1f                	push   0x1f
c001b8fa:	53                   	push   ebx
c001b8fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b8fe:	83 c4 18             	add    esp,0x18
c001b901:	68 ca 84 02 c0       	push   0xc00284ca
c001b906:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b90a:	52                   	push   edx
c001b90b:	e8 cc 4e fe ff       	call   c00007dc <strcmp>
c001b910:	83 c4 10             	add    esp,0x10
c001b913:	85 c0                	test   eax,eax
c001b915:	75 0f                	jne    c001b926 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001b917:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b91a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b91e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b922:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b926:	50                   	push   eax
c001b927:	50                   	push   eax
c001b928:	68 d2 84 02 c0       	push   0xc00284d2
c001b92d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b931:	50                   	push   eax
c001b932:	e8 a5 4e fe ff       	call   c00007dc <strcmp>
c001b937:	83 c4 10             	add    esp,0x10
c001b93a:	85 c0                	test   eax,eax
c001b93c:	75 0f                	jne    c001b94d <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001b93e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b945:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b949:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b94d:	45                   	inc    ebp
c001b94e:	e9 4c ff ff ff       	jmp    c001b89f <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001b953:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b958:	75 10                	jne    c001b96a <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	68 da 84 02 c0       	push   0xc00284da
c001b962:	e8 9d df ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001b967:	83 c4 10             	add    esp,0x10
c001b96a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b96f:	75 10                	jne    c001b981 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001b971:	83 ec 0c             	sub    esp,0xc
c001b974:	68 da 84 02 c0       	push   0xc00284da
c001b979:	e8 86 df ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	31 d2                	xor    edx,edx
c001b983:	50                   	push   eax
c001b984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b988:	52                   	push   edx
c001b989:	50                   	push   eax
c001b98a:	53                   	push   ebx
c001b98b:	e8 18 6f ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001b990:	5a                   	pop    edx
c001b991:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b995:	e8 cc 37 ff ff       	call   c000f166 <malloc>
c001b99a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b9a2:	89 c1                	mov    ecx,eax
c001b9a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9ac:	5e                   	pop    esi
c001b9ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9af:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001b9b3:	55                   	push   ebp
c001b9b4:	51                   	push   ecx
c001b9b5:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001b9b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9c1:	53                   	push   ebx
c001b9c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9c5:	83 c4 14             	add    esp,0x14
c001b9c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b9cc:	e8 95 37 ff ff       	call   c000f166 <malloc>
c001b9d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b9d4:	89 c6                	mov    esi,eax
c001b9d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9d8:	56                   	push   esi
c001b9d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9e1:	53                   	push   ebx
c001b9e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b9e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9e9:	8b 15 60 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b860
c001b9ef:	83 c4 1c             	add    esp,0x1c
c001b9f2:	c1 e8 04             	shr    eax,0x4
c001b9f5:	89 04 95 e0 b6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4920],eax
c001b9fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba00:	31 d2                	xor    edx,edx
c001ba02:	52                   	push   edx
c001ba03:	50                   	push   eax
c001ba04:	53                   	push   ebx
c001ba05:	e8 9e 6e ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001ba0a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ba0d:	31 d2                	xor    edx,edx
c001ba0f:	56                   	push   esi
c001ba10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba14:	52                   	push   edx
c001ba15:	50                   	push   eax
c001ba16:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba18:	53                   	push   ebx
c001ba19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ba1c:	83 c4 14             	add    esp,0x14
c001ba1f:	53                   	push   ebx
c001ba20:	e8 23 6e ff ff       	call   c0012848 <File::close()>
c001ba25:	5d                   	pop    ebp
c001ba26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba2a:	e8 47 37 ff ff       	call   c000f176 <free>
c001ba2f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba32:	e8 3f 37 ff ff       	call   c000f176 <free>
c001ba37:	a1 60 b8 02 c0       	mov    eax,ds:0xc002b860
c001ba3c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ba40:	8d 50 01             	lea    edx,[eax+0x1]
c001ba43:	89 0c 85 e0 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4820],ecx
c001ba4a:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c001ba50:	89 34 85 60 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd48a0],esi
c001ba57:	83 c4 10             	add    esp,0x10
c001ba5a:	b2 01                	mov    dl,0x1
c001ba5c:	83 c4 5c             	add    esp,0x5c
c001ba5f:	88 d0                	mov    al,dl
c001ba61:	5b                   	pop    ebx
c001ba62:	5e                   	pop    esi
c001ba63:	5f                   	pop    edi
c001ba64:	5d                   	pop    ebp
c001ba65:	c3                   	ret    

c001ba66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ba66:	55                   	push   ebp
c001ba67:	57                   	push   edi
c001ba68:	56                   	push   esi
c001ba69:	53                   	push   ebx
c001ba6a:	81 ec 68 03 00 00    	sub    esp,0x368
c001ba70:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ba77:	8b 1d b4 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8b4
c001ba7d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ba81:	68 14 01 00 00       	push   0x114
c001ba86:	e8 dd 66 ff ff       	call   c0012168 <operator new(unsigned long)>
c001ba8b:	83 c4 0c             	add    esp,0xc
c001ba8e:	89 c7                	mov    edi,eax
c001ba90:	53                   	push   ebx
c001ba91:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ba98:	50                   	push   eax
c001ba99:	e8 e8 6c ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001ba9e:	5e                   	pop    esi
c001ba9f:	5d                   	pop    ebp
c001baa0:	6a 01                	push   0x1
c001baa2:	57                   	push   edi
c001baa3:	e8 42 6d ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001baa8:	83 c4 10             	add    esp,0x10
c001baab:	85 c0                	test   eax,eax
c001baad:	0f 85 10 07 00 00    	jne    c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bab3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001babb:	83 ec 0c             	sub    esp,0xc
c001babe:	6a 34                	push   0x34
c001bac0:	e8 a1 36 ff ff       	call   c000f166 <malloc>
c001bac5:	5b                   	pop    ebx
c001bac6:	89 c5                	mov    ebp,eax
c001bac8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bacc:	8b 07                	mov    eax,DWORD PTR [edi]
c001bace:	53                   	push   ebx
c001bacf:	55                   	push   ebp
c001bad0:	6a 00                	push   0x0
c001bad2:	6a 34                	push   0x34
c001bad4:	57                   	push   edi
c001bad5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bad8:	83 c4 20             	add    esp,0x20
c001badb:	85 c0                	test   eax,eax
c001badd:	0f 85 e0 06 00 00    	jne    c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bae3:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001baea:	0f 85 d3 06 00 00    	jne    c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001baf0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001baf3:	85 c0                	test   eax,eax
c001baf5:	0f 84 c8 06 00 00    	je     c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bafb:	31 d2                	xor    edx,edx
c001bafd:	51                   	push   ecx
c001bafe:	52                   	push   edx
c001baff:	50                   	push   eax
c001bb00:	57                   	push   edi
c001bb01:	e8 a2 6d ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001bb06:	83 c4 10             	add    esp,0x10
c001bb09:	85 c0                	test   eax,eax
c001bb0b:	0f 85 b2 06 00 00    	jne    c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bb11:	83 ec 0c             	sub    esp,0xc
c001bb14:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bb17:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001bb1b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bb1f:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001bb23:	0f af c2             	imul   eax,edx
c001bb26:	50                   	push   eax
c001bb27:	e8 3a 36 ff ff       	call   c000f166 <malloc>
c001bb2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bb33:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001bb35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb39:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001bb3d:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001bb41:	0f af c2             	imul   eax,edx
c001bb44:	99                   	cdq    
c001bb45:	52                   	push   edx
c001bb46:	50                   	push   eax
c001bb47:	57                   	push   edi
c001bb48:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bb4b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001bb4e:	83 c4 20             	add    esp,0x20
c001bb51:	85 c0                	test   eax,eax
c001bb53:	0f 84 6a 06 00 00    	je     c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bb59:	52                   	push   edx
c001bb5a:	31 d2                	xor    edx,edx
c001bb5c:	52                   	push   edx
c001bb5d:	50                   	push   eax
c001bb5e:	57                   	push   edi
c001bb5f:	e8 44 6d ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001bb64:	83 c4 10             	add    esp,0x10
c001bb67:	85 c0                	test   eax,eax
c001bb69:	0f 85 54 06 00 00    	jne    c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bb6f:	83 ec 0c             	sub    esp,0xc
c001bb72:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001bb76:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001bb7a:	31 f6                	xor    esi,esi
c001bb7c:	0f af c2             	imul   eax,edx
c001bb7f:	50                   	push   eax
c001bb80:	e8 e1 35 ff ff       	call   c000f166 <malloc>
c001bb85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb88:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bb8c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001bb8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb92:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001bb96:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001bb9a:	0f af c2             	imul   eax,edx
c001bb9d:	99                   	cdq    
c001bb9e:	52                   	push   edx
c001bb9f:	50                   	push   eax
c001bba0:	57                   	push   edi
c001bba1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bba4:	83 c4 20             	add    esp,0x20
c001bba7:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001bbab:	0f 86 af 00 00 00    	jbe    c001bc60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001bbb1:	0f b7 de             	movzx  ebx,si
c001bbb4:	c1 e3 05             	shl    ebx,0x5
c001bbb7:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001bbbb:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001bbbe:	0f 85 96 00 00 00    	jne    c001bc5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001bbc4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bbc7:	31 d2                	xor    edx,edx
c001bbc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbcd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bbd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbd4:	50                   	push   eax
c001bbd5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001bbd8:	52                   	push   edx
c001bbd9:	50                   	push   eax
c001bbda:	57                   	push   edi
c001bbdb:	e8 c8 6c ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001bbe0:	83 c4 10             	add    esp,0x10
c001bbe3:	85 c0                	test   eax,eax
c001bbe5:	0f 85 d8 05 00 00    	jne    c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001bbeb:	52                   	push   edx
c001bbec:	52                   	push   edx
c001bbed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001bbf1:	68 f4 84 02 c0       	push   0xc00284f4
c001bbf6:	e8 5c 66 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bbfb:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001bc02:	31 d2                	xor    edx,edx
c001bc04:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001bc08:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001bc0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bc10:	59                   	pop    ecx
c001bc11:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001bc13:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bc1a:	50                   	push   eax
c001bc1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc23:	52                   	push   edx
c001bc24:	50                   	push   eax
c001bc25:	57                   	push   edi
c001bc26:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc29:	83 c4 18             	add    esp,0x18
c001bc2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bc2f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001bc32:	50                   	push   eax
c001bc33:	68 18 85 02 c0       	push   0xc0028518
c001bc38:	e8 1a 66 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bc3d:	83 c4 0c             	add    esp,0xc
c001bc40:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bc43:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001bc46:	50                   	push   eax
c001bc47:	6a 00                	push   0x0
c001bc49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc4d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001bc51:	50                   	push   eax
c001bc52:	e8 95 4a fe ff       	call   c00006ec <memset>
c001bc57:	83 c4 10             	add    esp,0x10
c001bc5a:	46                   	inc    esi
c001bc5b:	e9 47 ff ff ff       	jmp    c001bba7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001bc60:	31 db                	xor    ebx,ebx
c001bc62:	50                   	push   eax
c001bc63:	68 00 01 00 00       	push   0x100
c001bc68:	6a 00                	push   0x0
c001bc6a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bc6e:	50                   	push   eax
c001bc6f:	e8 78 4a fe ff       	call   c00006ec <memset>
c001bc74:	83 c4 0c             	add    esp,0xc
c001bc77:	68 00 01 00 00       	push   0x100
c001bc7c:	6a 00                	push   0x0
c001bc7e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001bc85:	50                   	push   eax
c001bc86:	e8 61 4a fe ff       	call   c00006ec <memset>
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bc96:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001bc9e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bca6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bcae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001bcb6:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001bcba:	0f 86 2f 01 00 00    	jbe    c001bdef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001bcc0:	0f b7 f3             	movzx  esi,bx
c001bcc3:	6b f6 28             	imul   esi,esi,0x28
c001bcc6:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001bcca:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bccd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bcd1:	50                   	push   eax
c001bcd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bcd6:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001bcda:	8b 06                	mov    eax,DWORD PTR [esi]
c001bcdc:	6b d2 28             	imul   edx,edx,0x28
c001bcdf:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001bce3:	31 d2                	xor    edx,edx
c001bce5:	52                   	push   edx
c001bce6:	50                   	push   eax
c001bce7:	57                   	push   edi
c001bce8:	e8 bb 6b ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001bced:	83 c4 0c             	add    esp,0xc
c001bcf0:	6a 20                	push   0x20
c001bcf2:	6a 00                	push   0x0
c001bcf4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001bcfb:	51                   	push   ecx
c001bcfc:	e8 eb 49 fe ff       	call   c00006ec <memset>
c001bd01:	58                   	pop    eax
c001bd02:	8b 07                	mov    eax,DWORD PTR [edi]
c001bd04:	8d 54 24 58          	lea    edx,[esp+0x58]
c001bd08:	52                   	push   edx
c001bd09:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001bd10:	51                   	push   ecx
c001bd11:	6a 00                	push   0x0
c001bd13:	6a 1f                	push   0x1f
c001bd15:	57                   	push   edi
c001bd16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd19:	83 c4 1c             	add    esp,0x1c
c001bd1c:	6a 09                	push   0x9
c001bd1e:	68 35 85 02 c0       	push   0xc0028535
c001bd23:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001bd2a:	51                   	push   ecx
c001bd2b:	e8 23 49 fe ff       	call   c0000653 <memcmp>
c001bd30:	83 c4 10             	add    esp,0x10
c001bd33:	85 c0                	test   eax,eax
c001bd35:	75 21                	jne    c001bd58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001bd37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bd3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd43:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001bd47:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd4a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001bd51:	89 c8                	mov    eax,ecx
c001bd53:	40                   	inc    eax
c001bd54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd58:	50                   	push   eax
c001bd59:	6a 09                	push   0x9
c001bd5b:	68 3f 85 02 c0       	push   0xc002853f
c001bd60:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bd67:	50                   	push   eax
c001bd68:	e8 e6 48 fe ff       	call   c0000653 <memcmp>
c001bd6d:	83 c4 10             	add    esp,0x10
c001bd70:	85 c0                	test   eax,eax
c001bd72:	75 21                	jne    c001bd95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001bd74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd78:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001bd7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bd80:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001bd84:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bd87:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001bd8e:	89 c8                	mov    eax,ecx
c001bd90:	40                   	inc    eax
c001bd91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bd95:	50                   	push   eax
c001bd96:	50                   	push   eax
c001bd97:	68 ca 84 02 c0       	push   0xc00284ca
c001bd9c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bda3:	50                   	push   eax
c001bda4:	e8 33 4a fe ff       	call   c00007dc <strcmp>
c001bda9:	83 c4 10             	add    esp,0x10
c001bdac:	85 c0                	test   eax,eax
c001bdae:	75 0f                	jne    c001bdbf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001bdb0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bdb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bdb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bdbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bdbf:	50                   	push   eax
c001bdc0:	50                   	push   eax
c001bdc1:	68 d2 84 02 c0       	push   0xc00284d2
c001bdc6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001bdcd:	50                   	push   eax
c001bdce:	e8 09 4a fe ff       	call   c00007dc <strcmp>
c001bdd3:	83 c4 10             	add    esp,0x10
c001bdd6:	85 c0                	test   eax,eax
c001bdd8:	75 0f                	jne    c001bde9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001bdda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bddd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bde1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bde5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bde9:	43                   	inc    ebx
c001bdea:	e9 c7 fe ff ff       	jmp    c001bcb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001bdef:	31 d2                	xor    edx,edx
c001bdf1:	50                   	push   eax
c001bdf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bdf6:	52                   	push   edx
c001bdf7:	50                   	push   eax
c001bdf8:	57                   	push   edi
c001bdf9:	e8 aa 6a ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001bdfe:	5a                   	pop    edx
c001bdff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be03:	e8 5e 33 ff ff       	call   c000f166 <malloc>
c001be08:	31 d2                	xor    edx,edx
c001be0a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001be0e:	59                   	pop    ecx
c001be0f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001be11:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001be15:	53                   	push   ebx
c001be16:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001be1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be1e:	52                   	push   edx
c001be1f:	50                   	push   eax
c001be20:	57                   	push   edi
c001be21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be24:	83 c4 14             	add    esp,0x14
c001be27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be2b:	e8 36 33 ff ff       	call   c000f166 <malloc>
c001be30:	31 d2                	xor    edx,edx
c001be32:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001be36:	83 c4 0c             	add    esp,0xc
c001be39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be3d:	52                   	push   edx
c001be3e:	50                   	push   eax
c001be3f:	57                   	push   edi
c001be40:	e8 63 6a ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001be45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be48:	31 d2                	xor    edx,edx
c001be4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be4e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001be50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be54:	52                   	push   edx
c001be55:	50                   	push   eax
c001be56:	57                   	push   edi
c001be57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001be5a:	83 c4 20             	add    esp,0x20
c001be5d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001be65:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be69:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001be6d:	0f 84 54 03 00 00    	je     c001c1c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001be73:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001be7a:	31 d2                	xor    edx,edx
c001be7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be80:	c1 e8 03             	shr    eax,0x3
c001be83:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001be87:	50                   	push   eax
c001be88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be8c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001be90:	52                   	push   edx
c001be91:	50                   	push   eax
c001be92:	57                   	push   edi
c001be93:	e8 10 6a ff ff       	call   c00128a8 <File::seek(unsigned long long)>
c001be98:	58                   	pop    eax
c001be99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be9d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001bea4:	e8 bd 32 ff ff       	call   c000f166 <malloc>
c001bea9:	31 d2                	xor    edx,edx
c001beab:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001beaf:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001beb1:	58                   	pop    eax
c001beb2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001beb6:	50                   	push   eax
c001beb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bebf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001bec6:	52                   	push   edx
c001bec7:	50                   	push   eax
c001bec8:	57                   	push   edi
c001bec9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001becc:	83 c4 20             	add    esp,0x20
c001becf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bed7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001bedb:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001bedf:	0f 8d c6 02 00 00    	jge    c001c1ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001bee5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001beed:	31 db                	xor    ebx,ebx
c001beef:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001bef2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bef6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001befa:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001befe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf02:	c1 e8 08             	shr    eax,0x8
c001bf05:	89 c6                	mov    esi,eax
c001bf07:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001bf0b:	c1 e6 04             	shl    esi,0x4
c001bf0e:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001bf12:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bf15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bf19:	85 c0                	test   eax,eax
c001bf1b:	0f 85 17 01 00 00    	jne    c001c038 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001bf21:	83 ec 0c             	sub    esp,0xc
c001bf24:	b3 01                	mov    bl,0x1
c001bf26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf2a:	03 06                	add    eax,DWORD PTR [esi]
c001bf2c:	50                   	push   eax
c001bf2d:	e8 24 f8 ff ff       	call   c001b756 <Thr::getAddressOfKernelSymbol(char const*)>
c001bf32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf36:	83 c4 10             	add    esp,0x10
c001bf39:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001bf3e:	0f 85 f4 00 00 00    	jne    c001c038 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001bf44:	50                   	push   eax
c001bf45:	50                   	push   eax
c001bf46:	68 49 85 02 c0       	push   0xc0028549
c001bf4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf4f:	03 06                	add    eax,DWORD PTR [esi]
c001bf51:	50                   	push   eax
c001bf52:	e8 85 48 fe ff       	call   c00007dc <strcmp>
c001bf57:	83 c4 10             	add    esp,0x10
c001bf5a:	85 c0                	test   eax,eax
c001bf5c:	75 0a                	jne    c001bf68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001bf5e:	b8 7c 33 02 c0       	mov    eax,0xc002337c
c001bf63:	e9 ca 00 00 00       	jmp    c001c032 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001bf68:	50                   	push   eax
c001bf69:	50                   	push   eax
c001bf6a:	68 53 85 02 c0       	push   0xc0028553
c001bf6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf73:	03 06                	add    eax,DWORD PTR [esi]
c001bf75:	50                   	push   eax
c001bf76:	e8 61 48 fe ff       	call   c00007dc <strcmp>
c001bf7b:	83 c4 10             	add    esp,0x10
c001bf7e:	85 c0                	test   eax,eax
c001bf80:	75 0a                	jne    c001bf8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001bf82:	b8 b0 30 02 c0       	mov    eax,0xc00230b0
c001bf87:	e9 a6 00 00 00       	jmp    c001c032 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001bf8c:	53                   	push   ebx
c001bf8d:	53                   	push   ebx
c001bf8e:	68 5c 85 02 c0       	push   0xc002855c
c001bf93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf97:	03 06                	add    eax,DWORD PTR [esi]
c001bf99:	50                   	push   eax
c001bf9a:	e8 3d 48 fe ff       	call   c00007dc <strcmp>
c001bf9f:	83 c4 10             	add    esp,0x10
c001bfa2:	85 c0                	test   eax,eax
c001bfa4:	75 0a                	jne    c001bfb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001bfa6:	b8 7c 34 02 c0       	mov    eax,0xc002347c
c001bfab:	e9 82 00 00 00       	jmp    c001c032 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001bfb0:	51                   	push   ecx
c001bfb1:	51                   	push   ecx
c001bfb2:	68 66 85 02 c0       	push   0xc0028566
c001bfb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bfbb:	03 06                	add    eax,DWORD PTR [esi]
c001bfbd:	50                   	push   eax
c001bfbe:	e8 19 48 fe ff       	call   c00007dc <strcmp>
c001bfc3:	83 c4 10             	add    esp,0x10
c001bfc6:	85 c0                	test   eax,eax
c001bfc8:	74 63                	je     c001c02d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001bfca:	50                   	push   eax
c001bfcb:	50                   	push   eax
c001bfcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfd0:	03 06                	add    eax,DWORD PTR [esi]
c001bfd2:	50                   	push   eax
c001bfd3:	68 6f 85 02 c0       	push   0xc002856f
c001bfd8:	e8 7a 62 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001bfdd:	58                   	pop    eax
c001bfde:	5a                   	pop    edx
c001bfdf:	68 89 85 02 c0       	push   0xc0028589
c001bfe4:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001bfeb:	53                   	push   ebx
c001bfec:	e8 9a 47 fe ff       	call   c000078b <strcpy>
c001bff1:	59                   	pop    ecx
c001bff2:	58                   	pop    eax
c001bff3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bff7:	03 06                	add    eax,DWORD PTR [esi]
c001bff9:	50                   	push   eax
c001bffa:	53                   	push   ebx
c001bffb:	e8 42 48 fe ff       	call   c0000842 <strcat>
c001c000:	58                   	pop    eax
c001c001:	5a                   	pop    edx
c001c002:	68 1f 86 02 c0       	push   0xc002861f
c001c007:	53                   	push   ebx
c001c008:	e8 35 48 fe ff       	call   c0000842 <strcat>
c001c00d:	83 c4 10             	add    esp,0x10
c001c010:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c015:	0f 84 4b 01 00 00    	je     c001c166 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001c01b:	83 ec 0c             	sub    esp,0xc
c001c01e:	53                   	push   ebx
c001c01f:	e8 e0 d8 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001c024:	83 c4 10             	add    esp,0x10
c001c027:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c02b:	eb 0b                	jmp    c001c038 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001c02d:	b8 fc 31 02 c0       	mov    eax,0xc00231fc
c001c032:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c036:	b3 01                	mov    bl,0x1
c001c038:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c03d:	0f 85 80 00 00 00    	jne    c001c0c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001c043:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c04a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c04e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c052:	01 ce                	add    esi,ecx
c001c054:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c05c:	8b 06                	mov    eax,DWORD PTR [esi]
c001c05e:	0f 94 c2             	sete   dl
c001c061:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c069:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c06e:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c072:	84 db                	test   bl,bl
c001c074:	74 31                	je     c001c0a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001c076:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c07a:	01 c3                	add    ebx,eax
c001c07c:	84 d2                	test   dl,dl
c001c07e:	75 0a                	jne    c001c08a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001c080:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001c084:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c088:	76 32                	jbe    c001c0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001c08a:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c08f:	0f 84 d1 00 00 00    	je     c001c166 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001c095:	83 ec 0c             	sub    esp,0xc
c001c098:	68 a0 85 02 c0       	push   0xc00285a0
c001c09d:	e8 62 d8 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001c0a2:	83 c4 10             	add    esp,0x10
c001c0a5:	eb 15                	jmp    c001c0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001c0a7:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c0aa:	84 d2                	test   dl,dl
c001c0ac:	75 0e                	jne    c001c0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001c0ae:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001c0b2:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c0b6:	77 04                	ja     c001c0bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001c0b8:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c0bc:	89 1e                	mov    DWORD PTR [esi],ebx
c001c0be:	e9 df 00 00 00       	jmp    c001c1a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001c0c3:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c0c8:	75 6e                	jne    c001c138 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001c0ca:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c0d1:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c0d5:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c0d9:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c0e1:	74 17                	je     c001c0fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001c0e3:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c0eb:	74 0d                	je     c001c0fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001c0ed:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001c0f1:	83 e8 04             	sub    eax,0x4
c001c0f4:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c0f8:	76 17                	jbe    c001c111 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c0fa:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c0ff:	74 65                	je     c001c166 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001c101:	83 ec 0c             	sub    esp,0xc
c001c104:	68 bc 85 02 c0       	push   0xc00285bc
c001c109:	e8 f6 d7 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001c10e:	83 c4 10             	add    esp,0x10
c001c111:	8b 16                	mov    edx,DWORD PTR [esi]
c001c113:	84 db                	test   bl,bl
c001c115:	74 13                	je     c001c12a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001c117:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c11b:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c122:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c126:	01 d0                	add    eax,edx
c001c128:	eb 06                	jmp    c001c130 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001c12a:	89 d0                	mov    eax,edx
c001c12c:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c130:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c134:	89 06                	mov    DWORD PTR [esi],eax
c001c136:	eb 6a                	jmp    c001c1a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001c138:	50                   	push   eax
c001c139:	50                   	push   eax
c001c13a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c13f:	50                   	push   eax
c001c140:	68 d8 85 02 c0       	push   0xc00285d8
c001c145:	e8 0d 61 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c14a:	83 c4 10             	add    esp,0x10
c001c14d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c152:	74 12                	je     c001c166 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001c154:	83 ec 0c             	sub    esp,0xc
c001c157:	68 e3 85 02 c0       	push   0xc00285e3
c001c15c:	e8 a3 d7 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001c161:	83 c4 10             	add    esp,0x10
c001c164:	eb 3c                	jmp    c001c1a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001c166:	83 ec 0c             	sub    esp,0xc
c001c169:	57                   	push   edi
c001c16a:	e8 d9 66 ff ff       	call   c0012848 <File::close()>
c001c16f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c172:	8b 07                	mov    eax,DWORD PTR [edi]
c001c174:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c177:	59                   	pop    ecx
c001c178:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c17c:	e8 f5 2f ff ff       	call   c000f176 <free>
c001c181:	5b                   	pop    ebx
c001c182:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c186:	e8 eb 2f ff ff       	call   c000f176 <free>
c001c18b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c18e:	e8 e3 2f ff ff       	call   c000f176 <free>
c001c193:	5e                   	pop    esi
c001c194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c198:	e8 d9 2f ff ff       	call   c000f176 <free>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	eb 21                	jmp    c001c1c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001c1a2:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c1a6:	e9 2c fd ff ff       	jmp    c001bed7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001c1ab:	83 ec 0c             	sub    esp,0xc
c001c1ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c1b2:	e8 bf 2f ff ff       	call   c000f176 <free>
c001c1b7:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c1bb:	83 c4 10             	add    esp,0x10
c001c1be:	e9 a2 fc ff ff       	jmp    c001be65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001c1c3:	31 c0                	xor    eax,eax
c001c1c5:	eb 32                	jmp    c001c1f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001c1c7:	83 ec 0c             	sub    esp,0xc
c001c1ca:	57                   	push   edi
c001c1cb:	e8 78 66 ff ff       	call   c0012848 <File::close()>
c001c1d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1d3:	8b 07                	mov    eax,DWORD PTR [edi]
c001c1d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1d8:	58                   	pop    eax
c001c1d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1dd:	e8 94 2f ff ff       	call   c000f176 <free>
c001c1e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1e5:	e8 8c 2f ff ff       	call   c000f176 <free>
c001c1ea:	5a                   	pop    edx
c001c1eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c1ef:	e8 82 2f ff ff       	call   c000f176 <free>
c001c1f4:	83 c4 10             	add    esp,0x10
c001c1f7:	b0 01                	mov    al,0x1
c001c1f9:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c1ff:	5b                   	pop    ebx
c001c200:	5e                   	pop    esi
c001c201:	5f                   	pop    edi
c001c202:	5d                   	pop    ebp
c001c203:	c3                   	ret    

c001c204 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c204:	56                   	push   esi
c001c205:	31 d2                	xor    edx,edx
c001c207:	53                   	push   ebx
c001c208:	8b 1d c0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c0
c001c20e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c212:	39 d3                	cmp    ebx,edx
c001c214:	7e 1b                	jle    c001c231 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c216:	8b 04 95 e0 b2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4d20]
c001c21d:	39 c8                	cmp    eax,ecx
c001c21f:	77 0d                	ja     c001c22e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c221:	8b 34 95 e0 b0 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4f20]
c001c228:	01 c6                	add    esi,eax
c001c22a:	39 ce                	cmp    esi,ecx
c001c22c:	77 05                	ja     c001c233 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c22e:	42                   	inc    edx
c001c22f:	eb e1                	jmp    c001c212 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c231:	31 c0                	xor    eax,eax
c001c233:	5b                   	pop    ebx
c001c234:	5e                   	pop    esi
c001c235:	c3                   	ret    

c001c236 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c236:	53                   	push   ebx
c001c237:	31 c0                	xor    eax,eax
c001c239:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c23d:	8b 1d c0 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b0c0
c001c243:	39 c3                	cmp    ebx,eax
c001c245:	7e 22                	jle    c001c269 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c247:	8b 14 85 e0 b2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4d20]
c001c24e:	39 ca                	cmp    edx,ecx
c001c250:	77 14                	ja     c001c266 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c252:	03 14 85 e0 b0 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4f20]
c001c259:	39 ca                	cmp    edx,ecx
c001c25b:	76 09                	jbe    c001c266 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c25d:	8b 04 85 e0 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4b20]
c001c264:	eb 05                	jmp    c001c26b <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c266:	40                   	inc    eax
c001c267:	eb da                	jmp    c001c243 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c269:	31 c0                	xor    eax,eax
c001c26b:	5b                   	pop    ebx
c001c26c:	c3                   	ret    

c001c26d <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c26d:	53                   	push   ebx
c001c26e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c272:	53                   	push   ebx
c001c273:	e8 8c ff ff ff       	call   c001c204 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c278:	5a                   	pop    edx
c001c279:	31 d2                	xor    edx,edx
c001c27b:	85 c0                	test   eax,eax
c001c27d:	74 04                	je     c001c283 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c27f:	89 da                	mov    edx,ebx
c001c281:	29 c2                	sub    edx,eax
c001c283:	89 d0                	mov    eax,edx
c001c285:	5b                   	pop    ebx
c001c286:	c3                   	ret    

c001c287 <Thr::loadDLL(char const*, bool)>:
c001c287:	55                   	push   ebp
c001c288:	57                   	push   edi
c001c289:	56                   	push   esi
c001c28a:	53                   	push   ebx
c001c28b:	81 ec 34 01 00 00    	sub    esp,0x134
c001c291:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c298:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c29f:	56                   	push   esi
c001c2a0:	68 fb 85 02 c0       	push   0xc00285fb
c001c2a5:	e8 ad 5f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c2aa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c2b1:	e8 b2 5e ff ff       	call   c0012168 <operator new(unsigned long)>
c001c2b6:	83 c4 0c             	add    esp,0xc
c001c2b9:	89 c3                	mov    ebx,eax
c001c2bb:	ff 35 b4 b8 02 c0    	push   DWORD PTR ds:0xc002b8b4
c001c2c1:	56                   	push   esi
c001c2c2:	50                   	push   eax
c001c2c3:	e8 be 64 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001c2c8:	83 c4 0c             	add    esp,0xc
c001c2cb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c2cf:	50                   	push   eax
c001c2d0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c2d4:	50                   	push   eax
c001c2d5:	53                   	push   ebx
c001c2d6:	e8 bb 67 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c001c2db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2e3:	83 c4 10             	add    esp,0x10
c001c2e6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c2eb:	75 0a                	jne    c001c2f7 <Thr::loadDLL(char const*, bool)+0x70>
c001c2ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2f1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c2f5:	75 3c                	jne    c001c333 <Thr::loadDLL(char const*, bool)+0xac>
c001c2f7:	89 e8                	mov    eax,ebp
c001c2f9:	84 c0                	test   al,al
c001c2fb:	0f 84 3d 01 00 00    	je     c001c43e <Thr::loadDLL(char const*, bool)+0x1b7>
c001c301:	50                   	push   eax
c001c302:	50                   	push   eax
c001c303:	68 0c 86 02 c0       	push   0xc002860c
c001c308:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c30c:	53                   	push   ebx
c001c30d:	e8 79 44 fe ff       	call   c000078b <strcpy>
c001c312:	58                   	pop    eax
c001c313:	5a                   	pop    edx
c001c314:	56                   	push   esi
c001c315:	53                   	push   ebx
c001c316:	e8 27 45 fe ff       	call   c0000842 <strcat>
c001c31b:	59                   	pop    ecx
c001c31c:	5f                   	pop    edi
c001c31d:	68 1f 86 02 c0       	push   0xc002861f
c001c322:	53                   	push   ebx
c001c323:	e8 1a 45 fe ff       	call   c0000842 <strcat>
c001c328:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c32b:	e8 d4 d5 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001c330:	83 c4 10             	add    esp,0x10
c001c333:	e8 dd 50 ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c001c338:	51                   	push   ecx
c001c339:	6a 03                	push   0x3
c001c33b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c33f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c343:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c349:	83 d3 00             	adc    ebx,0x0
c001c34c:	89 ca                	mov    edx,ecx
c001c34e:	89 d1                	mov    ecx,edx
c001c350:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c354:	51                   	push   ecx
c001c355:	50                   	push   eax
c001c356:	e8 fd 56 ff ff       	call   c0011a58 <VAS::allocatePages(int, int)>
c001c35b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c35e:	89 c3                	mov    ebx,eax
c001c360:	e8 a4 43 fe ff       	call   c0000709 <strlen>
c001c365:	8b 3d c0 b0 02 c0    	mov    edi,DWORD PTR ds:0xc002b0c0
c001c36b:	40                   	inc    eax
c001c36c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c36f:	e8 f2 2d ff ff       	call   c000f166 <malloc>
c001c374:	89 04 bd e0 b4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4b20],eax
c001c37b:	5f                   	pop    edi
c001c37c:	58                   	pop    eax
c001c37d:	a1 c0 b0 02 c0       	mov    eax,ds:0xc002b0c0
c001c382:	56                   	push   esi
c001c383:	ff 34 85 e0 b4 02 c0 	push   DWORD PTR [eax*4-0x3ffd4b20]
c001c38a:	e8 fc 43 fe ff       	call   c000078b <strcpy>
c001c38f:	a1 c0 b0 02 c0       	mov    eax,ds:0xc002b0c0
c001c394:	8d 50 01             	lea    edx,[eax+0x1]
c001c397:	89 1c 85 e0 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4d20],ebx
c001c39e:	89 15 c0 b0 02 c0    	mov    DWORD PTR ds:0xc002b0c0,edx
c001c3a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c3a8:	83 c4 0c             	add    esp,0xc
c001c3ab:	89 14 85 e0 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f20],edx
c001c3b2:	6a 01                	push   0x1
c001c3b4:	53                   	push   ebx
c001c3b5:	56                   	push   esi
c001c3b6:	e8 ab f6 ff ff       	call   c001ba66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c3bb:	83 c4 10             	add    esp,0x10
c001c3be:	89 c7                	mov    edi,eax
c001c3c0:	fe c8                	dec    al
c001c3c2:	74 16                	je     c001c3da <Thr::loadDLL(char const*, bool)+0x153>
c001c3c4:	89 e8                	mov    eax,ebp
c001c3c6:	84 c0                	test   al,al
c001c3c8:	74 10                	je     c001c3da <Thr::loadDLL(char const*, bool)+0x153>
c001c3ca:	83 ec 0c             	sub    esp,0xc
c001c3cd:	68 21 86 02 c0       	push   0xc0028621
c001c3d2:	e8 2d d5 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001c3d7:	83 c4 10             	add    esp,0x10
c001c3da:	31 f6                	xor    esi,esi
c001c3dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c3e4:	05 ff 0f 00 00       	add    eax,0xfff
c001c3e9:	83 d2 00             	adc    edx,0x0
c001c3ec:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c3f0:	c1 ea 0c             	shr    edx,0xc
c001c3f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c3fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c3ff:	ba 00 00 00 00       	mov    edx,0x0
c001c404:	89 d0                	mov    eax,edx
c001c406:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c40a:	73 2c                	jae    c001c438 <Thr::loadDLL(char const*, bool)+0x1b1>
c001c40c:	e8 04 50 ff ff       	call   c0011415 <Virt::getAKernelVAS()>
c001c411:	89 f5                	mov    ebp,esi
c001c413:	c1 e5 0c             	shl    ebp,0xc
c001c416:	52                   	push   edx
c001c417:	01 dd                	add    ebp,ebx
c001c419:	52                   	push   edx
c001c41a:	55                   	push   ebp
c001c41b:	50                   	push   eax
c001c41c:	e8 9f 51 ff ff       	call   c00115c0 <VAS::getPageTableEntry(unsigned long)>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c427:	75 0c                	jne    c001c435 <Thr::loadDLL(char const*, bool)+0x1ae>
c001c429:	83 ec 0c             	sub    esp,0xc
c001c42c:	55                   	push   ebp
c001c42d:	e8 54 32 ff ff       	call   c000f686 <Phys::freePage(unsigned long)>
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	46                   	inc    esi
c001c436:	eb a4                	jmp    c001c3dc <Thr::loadDLL(char const*, bool)+0x155>
c001c438:	89 f8                	mov    eax,edi
c001c43a:	84 c0                	test   al,al
c001c43c:	75 02                	jne    c001c440 <Thr::loadDLL(char const*, bool)+0x1b9>
c001c43e:	31 db                	xor    ebx,ebx
c001c440:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c446:	89 d8                	mov    eax,ebx
c001c448:	5b                   	pop    ebx
c001c449:	5e                   	pop    esi
c001c44a:	5f                   	pop    edi
c001c44b:	5d                   	pop    ebp
c001c44c:	c3                   	ret    

c001c44d <Thr::executeDLL(unsigned long, void*)>:
c001c44d:	56                   	push   esi
c001c44e:	53                   	push   ebx
c001c44f:	51                   	push   ecx
c001c450:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c454:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c458:	85 db                	test   ebx,ebx
c001c45a:	75 10                	jne    c001c46c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	68 40 86 02 c0       	push   0xc0028640
c001c464:	e8 9b d4 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001c469:	83 c4 10             	add    esp,0x10
c001c46c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c470:	89 d8                	mov    eax,ebx
c001c472:	5a                   	pop    edx
c001c473:	5b                   	pop    ebx
c001c474:	5e                   	pop    esi
c001c475:	ff e0                	jmp    eax
c001c477:	90                   	nop

c001c478 <changeTSS>:
c001c478:	83 ec 0c             	sub    esp,0xc
c001c47b:	e8 04 b4 ff ff       	call   c0017884 <thisCPU()>
c001c480:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c486:	83 ec 08             	sub    esp,0x8
c001c489:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001c48c:	05 7c 11 00 00       	add    eax,0x117c
c001c491:	c1 e1 15             	shl    ecx,0x15
c001c494:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001c499:	29 ca                	sub    edx,ecx
c001c49b:	52                   	push   edx
c001c49c:	50                   	push   eax
c001c49d:	e8 86 47 ff ff       	call   c0010c28 <TSS::setESP(unsigned long)>
c001c4a2:	83 c4 1c             	add    esp,0x1c
c001c4a5:	c3                   	ret    

c001c4a6 <Process::addArgs(char**)>:
c001c4a6:	57                   	push   edi
c001c4a7:	56                   	push   esi
c001c4a8:	53                   	push   ebx
c001c4a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c4b1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c4bb:	85 ff                	test   edi,edi
c001c4bd:	74 3d                	je     c001c4fc <Process::addArgs(char**)+0x56>
c001c4bf:	8b 07                	mov    eax,DWORD PTR [edi]
c001c4c1:	85 c0                	test   eax,eax
c001c4c3:	74 37                	je     c001c4fc <Process::addArgs(char**)+0x56>
c001c4c5:	31 db                	xor    ebx,ebx
c001c4c7:	83 ec 0c             	sub    esp,0xc
c001c4ca:	50                   	push   eax
c001c4cb:	e8 39 42 fe ff       	call   c0000709 <strlen>
c001c4d0:	40                   	inc    eax
c001c4d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4d4:	e8 8d 2c ff ff       	call   c000f166 <malloc>
c001c4d9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c4e0:	5a                   	pop    edx
c001c4e1:	59                   	pop    ecx
c001c4e2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c4e5:	43                   	inc    ebx
c001c4e6:	50                   	push   eax
c001c4e7:	e8 9f 42 fe ff       	call   c000078b <strcpy>
c001c4ec:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c4f8:	85 c0                	test   eax,eax
c001c4fa:	75 cb                	jne    c001c4c7 <Process::addArgs(char**)+0x21>
c001c4fc:	5b                   	pop    ebx
c001c4fd:	5e                   	pop    esi
c001c4fe:	5f                   	pop    edi
c001c4ff:	c3                   	ret    

c001c500 <Process::Process(char const*, Process*, char**)>:
c001c500:	56                   	push   esi
c001c501:	53                   	push   ebx
c001c502:	83 ec 14             	sub    esp,0x14
c001c505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c509:	05 0c 02 00 00       	add    eax,0x20c
c001c50e:	bb 07 00 00 00       	mov    ebx,0x7
c001c513:	89 c6                	mov    esi,eax
c001c515:	85 db                	test   ebx,ebx
c001c517:	78 12                	js     c001c52b <Process::Process(char const*, Process*, char**)+0x2b>
c001c519:	83 ec 0c             	sub    esp,0xc
c001c51c:	56                   	push   esi
c001c51d:	e8 f6 91 00 00       	call   c0025718 <ThreadControlBlock::ThreadControlBlock()>
c001c522:	83 c4 10             	add    esp,0x10
c001c525:	83 c6 63             	add    esi,0x63
c001c528:	4b                   	dec    ebx
c001c529:	eb ea                	jmp    c001c515 <Process::Process(char const*, Process*, char**)+0x15>
c001c52b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c52f:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001c536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c53a:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c543:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001c548:	8d 50 01             	lea    edx,[eax+0x1]
c001c54b:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001c551:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c555:	89 02                	mov    DWORD PTR [edx],eax
c001c557:	83 ec 0c             	sub    esp,0xc
c001c55a:	6a 10                	push   0x10
c001c55c:	e8 07 5c ff ff       	call   c0012168 <operator new(unsigned long)>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	89 c3                	mov    ebx,eax
c001c566:	83 ec 08             	sub    esp,0x8
c001c569:	6a 00                	push   0x0
c001c56b:	53                   	push   ebx
c001c56c:	e8 8b 58 ff ff       	call   c0011dfc <VAS::VAS(bool)>
c001c571:	83 c4 10             	add    esp,0x10
c001c574:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c578:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c582:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c58c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c590:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c594:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c59e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c5a4:	85 c0                	test   eax,eax
c001c5a6:	74 42                	je     c001c5ea <Process::Process(char const*, Process*, char**)+0xea>
c001c5a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5ac:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c5b2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c5b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5bc:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5c6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c5cc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c5d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5d6:	05 0c 01 00 00       	add    eax,0x10c
c001c5db:	83 ec 08             	sub    esp,0x8
c001c5de:	52                   	push   edx
c001c5df:	50                   	push   eax
c001c5e0:	e8 a6 41 fe ff       	call   c000078b <strcpy>
c001c5e5:	83 c4 10             	add    esp,0x10
c001c5e8:	eb 5c                	jmp    c001c646 <Process::Process(char const*, Process*, char**)+0x146>
c001c5ea:	83 ec 0c             	sub    esp,0xc
c001c5ed:	68 60 12 00 00       	push   0x1260
c001c5f2:	e8 71 5b ff ff       	call   c0012168 <operator new(unsigned long)>
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	89 c3                	mov    ebx,eax
c001c5fc:	83 ec 08             	sub    esp,0x8
c001c5ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c603:	53                   	push   ebx
c001c604:	e8 1d 43 ff ff       	call   c0010926 <VgaText::VgaText(char const*)>
c001c609:	83 c4 10             	add    esp,0x10
c001c60c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c610:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c61a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c620:	83 ec 0c             	sub    esp,0xc
c001c623:	50                   	push   eax
c001c624:	e8 fe 36 ff ff       	call   c000fd27 <addToTerminalCycle(VgaText*)>
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c630:	05 0c 01 00 00       	add    eax,0x10c
c001c635:	83 ec 08             	sub    esp,0x8
c001c638:	68 6a 86 02 c0       	push   0xc002866a
c001c63d:	50                   	push   eax
c001c63e:	e8 48 41 fe ff       	call   c000078b <strcpy>
c001c643:	83 c4 10             	add    esp,0x10
c001c646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c64a:	83 c0 0c             	add    eax,0xc
c001c64d:	83 ec 08             	sub    esp,0x8
c001c650:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c654:	50                   	push   eax
c001c655:	e8 31 41 fe ff       	call   c000078b <strcpy>
c001c65a:	83 c4 10             	add    esp,0x10
c001c65d:	83 ec 08             	sub    esp,0x8
c001c660:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c664:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c668:	e8 39 fe ff ff       	call   c001c4a6 <Process::addArgs(char**)>
c001c66d:	83 c4 10             	add    esp,0x10
c001c670:	83 ec 08             	sub    esp,0x8
c001c673:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c677:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c67b:	e8 ad ee ff ff       	call   c001b52d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001c680:	83 c4 10             	add    esp,0x10
c001c683:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c687:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c68b:	83 f0 01             	xor    eax,0x1
c001c68e:	88 c2                	mov    dl,al
c001c690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c694:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001c69a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c69f:	83 ec 08             	sub    esp,0x8
c001c6a2:	50                   	push   eax
c001c6a3:	68 68 87 02 c0       	push   0xc0028768
c001c6a8:	e8 aa 5b ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001c6ad:	83 c4 10             	add    esp,0x10
c001c6b0:	90                   	nop
c001c6b1:	83 c4 14             	add    esp,0x14
c001c6b4:	5b                   	pop    ebx
c001c6b5:	5e                   	pop    esi
c001c6b6:	c3                   	ret    
c001c6b7:	90                   	nop

c001c6b8 <Process::Process(bool, char const*, Process*, char**)>:
c001c6b8:	56                   	push   esi
c001c6b9:	53                   	push   ebx
c001c6ba:	83 ec 14             	sub    esp,0x14
c001c6bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6c1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6c9:	05 0c 02 00 00       	add    eax,0x20c
c001c6ce:	bb 07 00 00 00       	mov    ebx,0x7
c001c6d3:	89 c6                	mov    esi,eax
c001c6d5:	85 db                	test   ebx,ebx
c001c6d7:	78 12                	js     c001c6eb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001c6d9:	83 ec 0c             	sub    esp,0xc
c001c6dc:	56                   	push   esi
c001c6dd:	e8 36 90 00 00       	call   c0025718 <ThreadControlBlock::ThreadControlBlock()>
c001c6e2:	83 c4 10             	add    esp,0x10
c001c6e5:	83 c6 63             	add    esi,0x63
c001c6e8:	4b                   	dec    ebx
c001c6e9:	eb ea                	jmp    c001c6d5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001c6eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6ef:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001c6f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6fa:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c703:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001c708:	8d 50 01             	lea    edx,[eax+0x1]
c001c70b:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001c711:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c715:	89 02                	mov    DWORD PTR [edx],eax
c001c717:	83 ec 0c             	sub    esp,0xc
c001c71a:	6a 10                	push   0x10
c001c71c:	e8 47 5a ff ff       	call   c0012168 <operator new(unsigned long)>
c001c721:	83 c4 10             	add    esp,0x10
c001c724:	89 c3                	mov    ebx,eax
c001c726:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c72b:	83 ec 08             	sub    esp,0x8
c001c72e:	50                   	push   eax
c001c72f:	53                   	push   ebx
c001c730:	e8 c7 56 ff ff       	call   c0011dfc <VAS::VAS(bool)>
c001c735:	83 c4 10             	add    esp,0x10
c001c738:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c73c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c746:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c754:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c758:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c75e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c762:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c768:	85 c0                	test   eax,eax
c001c76a:	74 42                	je     c001c7ae <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001c76c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c770:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c776:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c780:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c78a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c790:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c79a:	05 0c 01 00 00       	add    eax,0x10c
c001c79f:	83 ec 08             	sub    esp,0x8
c001c7a2:	52                   	push   edx
c001c7a3:	50                   	push   eax
c001c7a4:	e8 e2 3f fe ff       	call   c000078b <strcpy>
c001c7a9:	83 c4 10             	add    esp,0x10
c001c7ac:	eb 5c                	jmp    c001c80a <Process::Process(bool, char const*, Process*, char**)+0x152>
c001c7ae:	83 ec 0c             	sub    esp,0xc
c001c7b1:	68 60 12 00 00       	push   0x1260
c001c7b6:	e8 ad 59 ff ff       	call   c0012168 <operator new(unsigned long)>
c001c7bb:	83 c4 10             	add    esp,0x10
c001c7be:	89 c3                	mov    ebx,eax
c001c7c0:	83 ec 08             	sub    esp,0x8
c001c7c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c7c7:	53                   	push   ebx
c001c7c8:	e8 59 41 ff ff       	call   c0010926 <VgaText::VgaText(char const*)>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7d4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c7da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7de:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c7e4:	83 ec 0c             	sub    esp,0xc
c001c7e7:	50                   	push   eax
c001c7e8:	e8 3a 35 ff ff       	call   c000fd27 <addToTerminalCycle(VgaText*)>
c001c7ed:	83 c4 10             	add    esp,0x10
c001c7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7f4:	05 0c 01 00 00       	add    eax,0x10c
c001c7f9:	83 ec 08             	sub    esp,0x8
c001c7fc:	68 6a 86 02 c0       	push   0xc002866a
c001c801:	50                   	push   eax
c001c802:	e8 84 3f fe ff       	call   c000078b <strcpy>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c80e:	83 c0 0c             	add    eax,0xc
c001c811:	83 ec 08             	sub    esp,0x8
c001c814:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c818:	50                   	push   eax
c001c819:	e8 6d 3f fe ff       	call   c000078b <strcpy>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	83 ec 08             	sub    esp,0x8
c001c824:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c828:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c82c:	e8 75 fc ff ff       	call   c001c4a6 <Process::addArgs(char**)>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	90                   	nop
c001c835:	83 c4 14             	add    esp,0x14
c001c838:	5b                   	pop    ebx
c001c839:	5e                   	pop    esi
c001c83a:	c3                   	ret    

c001c83b <disableIRQs()>:
c001c83b:	fa                   	cli    
c001c83c:	ff 05 8c b8 02 c0    	inc    DWORD PTR ds:0xc002b88c
c001c842:	c3                   	ret    

c001c843 <getIRQNestingLevel()>:
c001c843:	a1 8c b8 02 c0       	mov    eax,ds:0xc002b88c
c001c848:	c3                   	ret    

c001c849 <enableIRQs()>:
c001c849:	a1 8c b8 02 c0       	mov    eax,ds:0xc002b88c
c001c84e:	48                   	dec    eax
c001c84f:	a3 8c b8 02 c0       	mov    ds:0xc002b88c,eax
c001c854:	75 01                	jne    c001c857 <enableIRQs()+0xe>
c001c856:	fb                   	sti    
c001c857:	c3                   	ret    

c001c858 <lockScheduler()>:
c001c858:	eb e1                	jmp    c001c83b <disableIRQs()>

c001c85a <unlockScheduler()>:
c001c85a:	eb ed                	jmp    c001c849 <enableIRQs()>

c001c85c <userModeEntryPoint(void*)>:
c001c85c:	83 ec 0c             	sub    esp,0xc
c001c85f:	e8 f6 ff ff ff       	call   c001c85a <unlockScheduler()>
c001c864:	fb                   	sti    
c001c865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c86a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c86d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001c873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c877:	83 c4 0c             	add    esp,0xc
c001c87a:	e9 4b 3a fe ff       	jmp    c00002ca <goToUsermode>

c001c87f <lockStuff()>:
c001c87f:	e8 b7 ff ff ff       	call   c001c83b <disableIRQs()>
c001c884:	ff 05 88 b8 02 c0    	inc    DWORD PTR ds:0xc002b888
c001c88a:	c3                   	ret    

c001c88b <taskStartupFunction>:
c001c88b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c890:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001c893:	c3                   	ret    

c001c894 <updateTimeUsed()>:
c001c894:	57                   	push   edi
c001c895:	56                   	push   esi
c001c896:	53                   	push   ebx
c001c897:	e8 e8 af ff ff       	call   c0017884 <thisCPU()>
c001c89c:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001c8a3:	74 49                	je     c001c8ee <updateTimeUsed()+0x5a>
c001c8a5:	0f 31                	rdtsc  
c001c8a7:	89 c1                	mov    ecx,eax
c001c8a9:	a3 c8 b8 02 c0       	mov    ds:0xc002b8c8,eax
c001c8ae:	2b 0d b8 b8 02 c0    	sub    ecx,DWORD PTR ds:0xc002b8b8
c001c8b4:	89 d3                	mov    ebx,edx
c001c8b6:	89 0d c0 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c0,ecx
c001c8bc:	1b 1d bc b8 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b8bc
c001c8c2:	a3 b8 b8 02 c0       	mov    ds:0xc002b8b8,eax
c001c8c7:	89 1d c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,ebx
c001c8cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8d2:	89 15 cc b8 02 c0    	mov    DWORD PTR ds:0xc002b8cc,edx
c001c8d8:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001c8db:	89 15 bc b8 02 c0    	mov    DWORD PTR ds:0xc002b8bc,edx
c001c8e1:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001c8e4:	01 f1                	add    ecx,esi
c001c8e6:	11 fb                	adc    ebx,edi
c001c8e8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001c8eb:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001c8ee:	5b                   	pop    ebx
c001c8ef:	5e                   	pop    esi
c001c8f0:	5f                   	pop    edi
c001c8f1:	c3                   	ret    

c001c8f2 <switchToThread(ThreadControlBlock*)>:
c001c8f2:	53                   	push   ebx
c001c8f3:	83 ec 08             	sub    esp,0x8
c001c8f6:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c001c8fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8ff:	85 c0                	test   eax,eax
c001c901:	75 30                	jne    c001c933 <switchToThread(ThreadControlBlock*)+0x41>
c001c903:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001c906:	3c ff                	cmp    al,0xff
c001c908:	74 25                	je     c001c92f <switchToThread(ThreadControlBlock*)+0x3d>
c001c90a:	0f b6 d0             	movzx  edx,al
c001c90d:	b8 84 03 00 00       	mov    eax,0x384
c001c912:	29 d0                	sub    eax,edx
c001c914:	c1 e0 10             	shl    eax,0x10
c001c917:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001c91a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001c91d:	e8 72 ff ff ff       	call   c001c894 <updateTimeUsed()>
c001c922:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c926:	83 c4 08             	add    esp,0x8
c001c929:	5b                   	pop    ebx
c001c92a:	e9 d4 39 fe ff       	jmp    c0000303 <switchToThreadASM>
c001c92f:	31 c0                	xor    eax,eax
c001c931:	eb e7                	jmp    c001c91a <switchToThread(ThreadControlBlock*)+0x28>
c001c933:	c7 05 84 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b884,0x1
c001c93d:	83 c4 08             	add    esp,0x8
c001c940:	5b                   	pop    ebx
c001c941:	c3                   	ret    

c001c942 <Semaphore::Semaphore(int)>:
c001c942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c946:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c94a:	89 10                	mov    DWORD PTR [eax],edx
c001c94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c950:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c957:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c95b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c966:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c96d:	90                   	nop
c001c96e:	c3                   	ret    
c001c96f:	90                   	nop

c001c970 <Mutex::Mutex()>:
c001c970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c974:	6a 01                	push   0x1
c001c976:	50                   	push   eax
c001c977:	e8 c6 ff ff ff       	call   c001c942 <Semaphore::Semaphore(int)>
c001c97c:	83 c4 08             	add    esp,0x8
c001c97f:	90                   	nop
c001c980:	c3                   	ret    
c001c981:	90                   	nop

c001c982 <Process::createThread(void (*)(void*), void*, int)>:
c001c982:	55                   	push   ebp
c001c983:	31 c9                	xor    ecx,ecx
c001c985:	57                   	push   edi
c001c986:	56                   	push   esi
c001c987:	53                   	push   ebx
c001c988:	83 ec 1c             	sub    esp,0x1c
c001c98b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c98f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001c996:	89 f2                	mov    edx,esi
c001c998:	0f b7 c2             	movzx  eax,dx
c001c99b:	83 e2 01             	and    edx,0x1
c001c99e:	74 14                	je     c001c9b4 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001c9a0:	d1 f8                	sar    eax,1
c001c9a2:	41                   	inc    ecx
c001c9a3:	89 c2                	mov    edx,eax
c001c9a5:	83 f9 10             	cmp    ecx,0x10
c001c9a8:	75 ee                	jne    c001c998 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001c9aa:	83 c4 1c             	add    esp,0x1c
c001c9ad:	31 c0                	xor    eax,eax
c001c9af:	5b                   	pop    ebx
c001c9b0:	5e                   	pop    esi
c001c9b1:	5f                   	pop    edi
c001c9b2:	5d                   	pop    ebp
c001c9b3:	c3                   	ret    
c001c9b4:	83 ec 08             	sub    esp,0x8
c001c9b7:	b8 01 00 00 00       	mov    eax,0x1
c001c9bc:	d3 e0                	shl    eax,cl
c001c9be:	09 c6                	or     esi,eax
c001c9c0:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c9c6:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001c9cd:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001c9d0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c9d3:	01 ce                	add    esi,ecx
c001c9d5:	89 f0                	mov    eax,esi
c001c9d7:	c1 e0 05             	shl    eax,0x5
c001c9da:	01 c6                	add    esi,eax
c001c9dc:	8d 04 33             	lea    eax,[ebx+esi*1]
c001c9df:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001c9e5:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001c9eb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c9ef:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001c9f5:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001c9fb:	89 ca                	mov    edx,ecx
c001c9fd:	f7 da                	neg    edx
c001c9ff:	c1 e2 15             	shl    edx,0x15
c001ca02:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001ca08:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001ca0e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ca12:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001ca1c:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001ca22:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ca26:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001ca2c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001ca36:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001ca40:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001ca47:	50                   	push   eax
c001ca48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca4c:	68 a8 b8 02 c0       	push   0xc002b8a8
c001ca51:	e8 0c 8b 00 00       	call   c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ca56:	83 c4 10             	add    esp,0x10
c001ca59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca5d:	83 c4 1c             	add    esp,0x1c
c001ca60:	5b                   	pop    ebx
c001ca61:	5e                   	pop    esi
c001ca62:	5f                   	pop    edi
c001ca63:	5d                   	pop    ebp
c001ca64:	c3                   	ret    
c001ca65:	90                   	nop

c001ca66 <Process::createUserThread()>:
c001ca66:	83 ec 0c             	sub    esp,0xc
c001ca69:	68 80 00 00 00       	push   0x80
c001ca6e:	6a 00                	push   0x0
c001ca70:	68 5c c8 01 c0       	push   0xc001c85c
c001ca75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca79:	e8 04 ff ff ff       	call   c001c982 <Process::createThread(void (*)(void*), void*, int)>
c001ca7e:	83 c4 1c             	add    esp,0x1c
c001ca81:	c3                   	ret    

c001ca82 <setupMultitasking(void (*)())>:
c001ca82:	56                   	push   esi
c001ca83:	53                   	push   ebx
c001ca84:	53                   	push   ebx
c001ca85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca89:	eb 10                	jmp    c001ca9b <setupMultitasking(void (*)())+0x19>
c001ca8b:	83 ec 0c             	sub    esp,0xc
c001ca8e:	68 a8 b8 02 c0       	push   0xc002b8a8
c001ca93:	e8 1c 8a 00 00       	call   c00254b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ca98:	83 c4 10             	add    esp,0x10
c001ca9b:	83 ec 0c             	sub    esp,0xc
c001ca9e:	68 a8 b8 02 c0       	push   0xc002b8a8
c001caa3:	e8 f0 89 00 00       	call   c0025498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001caa8:	83 c4 10             	add    esp,0x10
c001caab:	84 c0                	test   al,al
c001caad:	74 dc                	je     c001ca8b <setupMultitasking(void (*)())+0x9>
c001caaf:	83 ec 0c             	sub    esp,0xc
c001cab2:	68 3b 07 00 00       	push   0x73b
c001cab7:	e8 ac 56 ff ff       	call   c0012168 <operator new(unsigned long)>
c001cabc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cac3:	89 c3                	mov    ebx,eax
c001cac5:	6a 00                	push   0x0
c001cac7:	68 6e 86 02 c0       	push   0xc002866e
c001cacc:	6a 01                	push   0x1
c001cace:	50                   	push   eax
c001cacf:	e8 e4 fb ff ff       	call   c001c6b8 <Process::Process(bool, char const*, Process*, char**)>
c001cad4:	83 c4 18             	add    esp,0x18
c001cad7:	89 1d b4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8b4,ebx
c001cadd:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cae3:	68 90 87 02 c0       	push   0xc0028790
c001cae8:	e8 6a 57 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001caed:	58                   	pop    eax
c001caee:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001caf4:	e8 a2 39 ff ff       	call   c001049b <setActiveTerminal(VgaText*)>
c001caf9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001cb01:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cb07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cb0a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001cb14:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001cb1a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001cb20:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001cb2a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001cb34:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001cb3e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001cb44:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001cb4a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001cb54:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001cb5a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001cb64:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001cb6a:	5a                   	pop    edx
c001cb6b:	59                   	pop    ecx
c001cb6c:	68 6a 86 02 c0       	push   0xc002866a
c001cb71:	50                   	push   eax
c001cb72:	e8 14 3c fe ff       	call   c000078b <strcpy>
c001cb77:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001cb7e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001cb82:	83 c4 14             	add    esp,0x14
c001cb85:	5b                   	pop    ebx
c001cb86:	5e                   	pop    esi
c001cb87:	e9 69 37 fe ff       	jmp    c00002f5 <switchToThreadASMFirstTime>

c001cb8c <schedule()>:
c001cb8c:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c001cb91:	85 c0                	test   eax,eax
c001cb93:	74 0b                	je     c001cba0 <schedule()+0x14>
c001cb95:	c7 05 84 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b884,0x1
c001cb9f:	c3                   	ret    
c001cba0:	53                   	push   ebx
c001cba1:	83 ec 14             	sub    esp,0x14
c001cba4:	68 a8 b8 02 c0       	push   0xc002b8a8
c001cba9:	e8 ea 88 00 00       	call   c0025498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cbae:	83 c4 10             	add    esp,0x10
c001cbb1:	84 c0                	test   al,al
c001cbb3:	75 38                	jne    c001cbed <schedule()+0x61>
c001cbb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001cbbd:	4a                   	dec    edx
c001cbbe:	74 32                	je     c001cbf2 <schedule()+0x66>
c001cbc0:	83 ec 0c             	sub    esp,0xc
c001cbc3:	68 a8 b8 02 c0       	push   0xc002b8a8
c001cbc8:	e8 c3 88 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cbcd:	c7 04 24 a8 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a8
c001cbd4:	89 c3                	mov    ebx,eax
c001cbd6:	e8 d9 88 00 00       	call   c00254b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cbdb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001cbe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbe5:	e8 08 fd ff ff       	call   c001c8f2 <switchToThread(ThreadControlBlock*)>
c001cbea:	83 c4 10             	add    esp,0x10
c001cbed:	83 c4 08             	add    esp,0x8
c001cbf0:	5b                   	pop    ebx
c001cbf1:	c3                   	ret    
c001cbf2:	83 ec 08             	sub    esp,0x8
c001cbf5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cbfc:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001cc02:	68 a8 b8 02 c0       	push   0xc002b8a8
c001cc07:	e8 56 89 00 00       	call   c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cc0c:	83 c4 10             	add    esp,0x10
c001cc0f:	eb af                	jmp    c001cbc0 <schedule()+0x34>

c001cc11 <unlockStuff()>:
c001cc11:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c001cc16:	48                   	dec    eax
c001cc17:	a3 88 b8 02 c0       	mov    ds:0xc002b888,eax
c001cc1c:	75 09                	jne    c001cc27 <unlockStuff()+0x16>
c001cc1e:	a1 84 b8 02 c0       	mov    eax,ds:0xc002b884
c001cc23:	85 c0                	test   eax,eax
c001cc25:	75 05                	jne    c001cc2c <unlockStuff()+0x1b>
c001cc27:	e9 1d fc ff ff       	jmp    c001c849 <enableIRQs()>
c001cc2c:	83 ec 0c             	sub    esp,0xc
c001cc2f:	c7 05 84 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b884,0x0
c001cc39:	e8 4e ff ff ff       	call   c001cb8c <schedule()>
c001cc3e:	83 c4 0c             	add    esp,0xc
c001cc41:	e9 03 fc ff ff       	jmp    c001c849 <enableIRQs()>

c001cc46 <Semaphore::tryAcquire()>:
c001cc46:	83 ec 0c             	sub    esp,0xc
c001cc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4d:	e8 2d fc ff ff       	call   c001c87f <lockStuff()>
c001cc52:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cc55:	3b 10                	cmp    edx,DWORD PTR [eax]
c001cc57:	7c 0b                	jl     c001cc64 <Semaphore::tryAcquire()+0x1e>
c001cc59:	e8 b3 ff ff ff       	call   c001cc11 <unlockStuff()>
c001cc5e:	31 c0                	xor    eax,eax
c001cc60:	83 c4 0c             	add    esp,0xc
c001cc63:	c3                   	ret    
c001cc64:	42                   	inc    edx
c001cc65:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cc68:	e8 a4 ff ff ff       	call   c001cc11 <unlockStuff()>
c001cc6d:	b0 01                	mov    al,0x1
c001cc6f:	83 c4 0c             	add    esp,0xc
c001cc72:	c3                   	ret    
c001cc73:	90                   	nop

c001cc74 <Semaphore::assertLocked(char const*)>:
c001cc74:	83 ec 0c             	sub    esp,0xc
c001cc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc7f:	e8 fb fb ff ff       	call   c001c87f <lockStuff()>
c001cc84:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc86:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001cc89:	7c 05                	jl     c001cc90 <Semaphore::assertLocked(char const*)+0x1c>
c001cc8b:	83 c4 0c             	add    esp,0xc
c001cc8e:	eb 81                	jmp    c001cc11 <unlockStuff()>
c001cc90:	83 ec 0c             	sub    esp,0xc
c001cc93:	52                   	push   edx
c001cc94:	e8 6b cc ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001cc99:	83 c4 10             	add    esp,0x10
c001cc9c:	83 c4 0c             	add    esp,0xc
c001cc9f:	e9 6d ff ff ff       	jmp    c001cc11 <unlockStuff()>

c001cca4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001cca4:	83 ec 0c             	sub    esp,0xc
c001cca7:	e8 97 fb ff ff       	call   c001c843 <getIRQNestingLevel()>
c001ccac:	83 ec 08             	sub    esp,0x8
c001ccaf:	50                   	push   eax
c001ccb0:	68 c4 87 02 c0       	push   0xc00287c4
c001ccb5:	e8 9d 55 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001ccba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ccbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccc3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ccc6:	e8 c1 fe ff ff       	call   c001cb8c <schedule()>
c001cccb:	e8 8a fb ff ff       	call   c001c85a <unlockScheduler()>
c001ccd0:	e8 6e fb ff ff       	call   c001c843 <getIRQNestingLevel()>
c001ccd5:	5a                   	pop    edx
c001ccd6:	59                   	pop    ecx
c001ccd7:	50                   	push   eax
c001ccd8:	68 f8 87 02 c0       	push   0xc00287f8
c001ccdd:	e8 75 55 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001cce2:	83 c4 1c             	add    esp,0x1c
c001cce5:	c3                   	ret    

c001cce6 <blockTask(TaskState)>:
c001cce6:	83 ec 0c             	sub    esp,0xc
c001cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cced:	e8 66 fb ff ff       	call   c001c858 <lockScheduler()>
c001ccf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccf7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ccfa:	e8 8d fe ff ff       	call   c001cb8c <schedule()>
c001ccff:	83 c4 0c             	add    esp,0xc
c001cd02:	e9 53 fb ff ff       	jmp    c001c85a <unlockScheduler()>

c001cd07 <waitTask(int, int*, int)>:
c001cd07:	83 ec 18             	sub    esp,0x18
c001cd0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd0f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd13:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001cd16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cd1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd1f:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001cd22:	6a 07                	push   0x7
c001cd24:	e8 bd ff ff ff       	call   c001cce6 <blockTask(TaskState)>
c001cd29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd2e:	83 c4 10             	add    esp,0x10
c001cd31:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001cd34:	85 d2                	test   edx,edx
c001cd36:	74 0a                	je     c001cd42 <waitTask(int, int*, int)+0x3b>
c001cd38:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001cd3b:	89 02                	mov    DWORD PTR [edx],eax
c001cd3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd42:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001cd45:	83 c4 0c             	add    esp,0xc
c001cd48:	c3                   	ret    

c001cd49 <nanoSleepUntil(unsigned long long)>:
c001cd49:	83 ec 0c             	sub    esp,0xc
c001cd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd54:	3b 05 70 aa 02 c0    	cmp    eax,DWORD PTR ds:0xc002aa70
c001cd5a:	89 d1                	mov    ecx,edx
c001cd5c:	1b 0d 74 aa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002aa74
c001cd62:	73 04                	jae    c001cd68 <nanoSleepUntil(unsigned long long)+0x1f>
c001cd64:	83 c4 0c             	add    esp,0xc
c001cd67:	c3                   	ret    
c001cd68:	e8 12 fb ff ff       	call   c001c87f <lockStuff()>
c001cd6d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001cd73:	83 ec 08             	sub    esp,0x8
c001cd76:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001cd79:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001cd7c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001cd82:	68 9c b8 02 c0       	push   0xc002b89c
c001cd87:	e8 d6 87 00 00       	call   c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cd8c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001cd93:	e8 4e ff ff ff       	call   c001cce6 <blockTask(TaskState)>
c001cd98:	83 c4 1c             	add    esp,0x1c
c001cd9b:	e9 71 fe ff ff       	jmp    c001cc11 <unlockStuff()>

c001cda0 <nanoSleep(unsigned long long)>:
c001cda0:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c001cda5:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c001cdab:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001cdaf:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001cdb3:	eb 94                	jmp    c001cd49 <nanoSleepUntil(unsigned long long)>

c001cdb5 <sleep(unsigned long long)>:
c001cdb5:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001cdbd:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001cdc2:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001cdc6:	01 ca                	add    edx,ecx
c001cdc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cdcc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cdd0:	eb ce                	jmp    c001cda0 <nanoSleep(unsigned long long)>

c001cdd2 <Semaphore::acquire()>:
c001cdd2:	83 ec 0c             	sub    esp,0xc
c001cdd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdd9:	e8 a1 fa ff ff       	call   c001c87f <lockStuff()>
c001cdde:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001cde1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001cde3:	7d 0c                	jge    c001cdf1 <Semaphore::acquire()+0x1f>
c001cde5:	42                   	inc    edx
c001cde6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cde9:	83 c4 0c             	add    esp,0xc
c001cdec:	e9 20 fe ff ff       	jmp    c001cc11 <unlockStuff()>
c001cdf1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001cdf7:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001cdfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ce01:	85 d2                	test   edx,edx
c001ce03:	74 2a                	je     c001ce2f <Semaphore::acquire()+0x5d>
c001ce05:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ce08:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ce0e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001ce11:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ce17:	83 ec 0c             	sub    esp,0xc
c001ce1a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce1d:	6a 05                	push   0x5
c001ce1f:	e8 c2 fe ff ff       	call   c001cce6 <blockTask(TaskState)>
c001ce24:	83 c4 10             	add    esp,0x10
c001ce27:	83 c4 0c             	add    esp,0xc
c001ce2a:	e9 e2 fd ff ff       	jmp    c001cc11 <unlockStuff()>
c001ce2f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ce35:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce38:	eb d7                	jmp    c001ce11 <Semaphore::acquire()+0x3f>

c001ce3a <taskReturned>:
c001ce3a:	83 ec 18             	sub    esp,0x18
c001ce3d:	68 2c 88 02 c0       	push   0xc002882c
c001ce42:	e8 bd ca ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	83 ec 0c             	sub    esp,0xc
c001ce4d:	6a 02                	push   0x2
c001ce4f:	e8 92 fe ff ff       	call   c001cce6 <blockTask(TaskState)>
c001ce54:	e8 ff f9 ff ff       	call   c001c858 <lockScheduler()>
c001ce59:	e8 2e fd ff ff       	call   c001cb8c <schedule()>
c001ce5e:	e8 f7 f9 ff ff       	call   c001c85a <unlockScheduler()>
c001ce63:	83 c4 10             	add    esp,0x10
c001ce66:	eb e2                	jmp    c001ce4a <taskReturned+0x10>

c001ce68 <unblockTask(ThreadControlBlock*)>:
c001ce68:	53                   	push   ebx
c001ce69:	83 ec 08             	sub    esp,0x8
c001ce6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce70:	e8 e3 f9 ff ff       	call   c001c858 <lockScheduler()>
c001ce75:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce78:	85 c0                	test   eax,eax
c001ce7a:	74 5c                	je     c001ced8 <unblockTask(ThreadControlBlock*)+0x70>
c001ce7c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce7f:	48                   	dec    eax
c001ce80:	74 31                	je     c001ceb3 <unblockTask(ThreadControlBlock*)+0x4b>
c001ce82:	83 ec 0c             	sub    esp,0xc
c001ce85:	68 a8 b8 02 c0       	push   0xc002b8a8
c001ce8a:	e8 01 86 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce8f:	83 c4 10             	add    esp,0x10
c001ce92:	85 c0                	test   eax,eax
c001ce94:	75 17                	jne    c001cead <unblockTask(ThreadControlBlock*)+0x45>
c001ce96:	eb 65                	jmp    c001cefd <unblockTask(ThreadControlBlock*)+0x95>
c001ce98:	83 ec 08             	sub    esp,0x8
c001ce9b:	50                   	push   eax
c001ce9c:	68 a8 b8 02 c0       	push   0xc002b8a8
c001cea1:	e8 08 89 00 00       	call   c00257ae <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001cea6:	83 c4 10             	add    esp,0x10
c001cea9:	85 c0                	test   eax,eax
c001ceab:	74 50                	je     c001cefd <unblockTask(ThreadControlBlock*)+0x95>
c001cead:	39 c3                	cmp    ebx,eax
c001ceaf:	75 e7                	jne    c001ce98 <unblockTask(ThreadControlBlock*)+0x30>
c001ceb1:	eb 1c                	jmp    c001cecf <unblockTask(ThreadControlBlock*)+0x67>
c001ceb3:	83 ec 0c             	sub    esp,0xc
c001ceb6:	68 1c 89 02 c0       	push   0xc002891c
c001cebb:	e8 97 53 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001cec0:	c7 04 24 a8 88 02 c0 	mov    DWORD PTR [esp],0xc00288a8
c001cec7:	e8 8b 53 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001cecc:	83 c4 10             	add    esp,0x10
c001cecf:	83 c4 08             	add    esp,0x8
c001ced2:	5b                   	pop    ebx
c001ced3:	e9 82 f9 ff ff       	jmp    c001c85a <unlockScheduler()>
c001ced8:	83 ec 0c             	sub    esp,0xc
c001cedb:	68 60 88 02 c0       	push   0xc0028860
c001cee0:	e8 72 53 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001cee5:	c7 04 24 a8 88 02 c0 	mov    DWORD PTR [esp],0xc00288a8
c001ceec:	e8 66 53 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001cef1:	83 c4 10             	add    esp,0x10
c001cef4:	83 c4 08             	add    esp,0x8
c001cef7:	5b                   	pop    ebx
c001cef8:	e9 5d f9 ff ff       	jmp    c001c85a <unlockScheduler()>
c001cefd:	83 ec 08             	sub    esp,0x8
c001cf00:	53                   	push   ebx
c001cf01:	68 a8 b8 02 c0       	push   0xc002b8a8
c001cf06:	e8 57 86 00 00       	call   c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf0b:	83 c4 10             	add    esp,0x10
c001cf0e:	83 c4 08             	add    esp,0x8
c001cf11:	5b                   	pop    ebx
c001cf12:	e9 43 f9 ff ff       	jmp    c001c85a <unlockScheduler()>

c001cf17 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001cf17:	55                   	push   ebp
c001cf18:	57                   	push   edi
c001cf19:	56                   	push   esi
c001cf1a:	53                   	push   ebx
c001cf1b:	83 ec 1c             	sub    esp,0x1c
c001cf1e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cf22:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cf25:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001cf2b:	85 c9                	test   ecx,ecx
c001cf2d:	7e 20                	jle    c001cf4f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001cf2f:	31 f6                	xor    esi,esi
c001cf31:	83 ec 0c             	sub    esp,0xc
c001cf34:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001cf3b:	46                   	inc    esi
c001cf3c:	e8 35 22 ff ff       	call   c000f176 <free>
c001cf41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001cf4d:	7f e2                	jg     c001cf31 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001cf4f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cf59:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001cf5e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001cf61:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001cf64:	d3 c0                	rol    eax,cl
c001cf66:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001cf6d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001cf70:	89 f7                	mov    edi,esi
c001cf72:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001cf7a:	0f 85 4f 01 00 00    	jne    c001d0cf <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001cf80:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cf86:	85 c0                	test   eax,eax
c001cf88:	0f 84 aa 00 00 00    	je     c001d038 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001cf8e:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001cf91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cf95:	31 c9                	xor    ecx,ecx
c001cf97:	eb 10                	jmp    c001cfa9 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001cf99:	41                   	inc    ecx
c001cf9a:	83 f9 10             	cmp    ecx,0x10
c001cf9d:	0f 84 95 00 00 00    	je     c001d038 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001cfa3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cfa9:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001cfb0:	d3 fa                	sar    edx,cl
c001cfb2:	83 e2 01             	and    edx,0x1
c001cfb5:	74 e2                	je     c001cf99 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001cfb7:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001cfba:	01 ca                	add    edx,ecx
c001cfbc:	89 d5                	mov    ebp,edx
c001cfbe:	c1 e5 05             	shl    ebp,0x5
c001cfc1:	01 ea                	add    edx,ebp
c001cfc3:	01 d0                	add    eax,edx
c001cfc5:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001cfcb:	83 fd 07             	cmp    ebp,0x7
c001cfce:	75 c9                	jne    c001cf99 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001cfd0:	05 40 02 00 00       	add    eax,0x240
c001cfd5:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001cfd8:	83 fd ff             	cmp    ebp,0xffffffff
c001cfdb:	0f 8c 08 01 00 00    	jl     c001d0e9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001cfe1:	0f 84 b9 01 00 00    	je     c001d1a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001cfe7:	85 ed                	test   ebp,ebp
c001cfe9:	0f 84 a0 01 00 00    	je     c001d18f <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001cfef:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001cff1:	75 a6                	jne    c001cf99 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001cff3:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001cff9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cffd:	01 d0                	add    eax,edx
c001cfff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d003:	83 ec 0c             	sub    esp,0xc
c001d006:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d00c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d00f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d015:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d01c:	50                   	push   eax
c001d01d:	e8 46 fe ff ff       	call   c001ce68 <unblockTask(ThreadControlBlock*)>
c001d022:	83 c4 10             	add    esp,0x10
c001d025:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d028:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d02c:	89 f7                	mov    edi,esi
c001d02e:	41                   	inc    ecx
c001d02f:	83 f9 10             	cmp    ecx,0x10
c001d032:	0f 85 6b ff ff ff    	jne    c001cfa3 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001d038:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d03e:	85 c0                	test   eax,eax
c001d040:	74 5d                	je     c001d09f <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001d042:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d048:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d04e:	74 4f                	je     c001d09f <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001d050:	83 ec 0c             	sub    esp,0xc
c001d053:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d058:	e8 33 84 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d05d:	c7 04 24 a8 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a8
c001d064:	89 c7                	mov    edi,eax
c001d066:	e8 2d 84 00 00       	call   c0025498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d06b:	83 c4 10             	add    esp,0x10
c001d06e:	84 c0                	test   al,al
c001d070:	0f 84 e4 00 00 00    	je     c001d15a <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d076:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d079:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d07f:	85 d2                	test   edx,edx
c001d081:	74 0f                	je     c001d092 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001d083:	83 ec 0c             	sub    esp,0xc
c001d086:	8b 02                	mov    eax,DWORD PTR [edx]
c001d088:	52                   	push   edx
c001d089:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d08c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d09c:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d09f:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d0a5:	85 db                	test   ebx,ebx
c001d0a7:	74 16                	je     c001d0bf <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001d0a9:	83 ec 0c             	sub    esp,0xc
c001d0ac:	53                   	push   ebx
c001d0ad:	e8 3a 47 ff ff       	call   c00117ec <VAS::~VAS()>
c001d0b2:	58                   	pop    eax
c001d0b3:	5a                   	pop    edx
c001d0b4:	6a 10                	push   0x10
c001d0b6:	53                   	push   ebx
c001d0b7:	e8 bb 50 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001d0bc:	83 c4 10             	add    esp,0x10
c001d0bf:	83 ec 0c             	sub    esp,0xc
c001d0c2:	68 75 86 02 c0       	push   0xc0028675
c001d0c7:	e8 8b 51 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	83 ec 08             	sub    esp,0x8
c001d0d2:	68 3b 07 00 00       	push   0x73b
c001d0d7:	68 83 86 02 c0       	push   0xc0028683
c001d0dc:	e8 76 51 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d0e1:	83 c4 2c             	add    esp,0x2c
c001d0e4:	5b                   	pop    ebx
c001d0e5:	5e                   	pop    esi
c001d0e6:	5f                   	pop    edi
c001d0e7:	5d                   	pop    ebp
c001d0e8:	c3                   	ret    
c001d0e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d0ed:	83 ec 0c             	sub    esp,0xc
c001d0f0:	68 60 89 02 c0       	push   0xc0028960
c001d0f5:	e8 0a c8 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001d0fa:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d0fd:	83 c4 10             	add    esp,0x10
c001d100:	89 f7                	mov    edi,esi
c001d102:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d106:	e9 8e fe ff ff       	jmp    c001cf99 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001d10b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d111:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d117:	75 1c                	jne    c001d135 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001d119:	83 ec 0c             	sub    esp,0xc
c001d11c:	68 c8 89 02 c0       	push   0xc00289c8
c001d121:	e8 31 51 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d126:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d12d:	e8 b4 fb ff ff       	call   c001cce6 <blockTask(TaskState)>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	83 ec 08             	sub    esp,0x8
c001d138:	56                   	push   esi
c001d139:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d13e:	e8 1f 84 00 00       	call   c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d143:	c7 04 24 a8 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a8
c001d14a:	e8 41 83 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d14f:	83 c4 10             	add    esp,0x10
c001d152:	39 f8                	cmp    eax,edi
c001d154:	0f 84 1c ff ff ff    	je     c001d076 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001d15a:	83 ec 0c             	sub    esp,0xc
c001d15d:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d162:	e8 29 83 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d167:	c7 04 24 a8 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8a8
c001d16e:	89 c6                	mov    esi,eax
c001d170:	e8 3f 83 00 00       	call   c00254b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d175:	83 c4 10             	add    esp,0x10
c001d178:	39 f3                	cmp    ebx,esi
c001d17a:	74 b9                	je     c001d135 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001d17c:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d17f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d182:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d188:	75 ab                	jne    c001d135 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001d18a:	e9 7c ff ff ff       	jmp    c001d10b <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001d18f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d193:	83 ec 0c             	sub    esp,0xc
c001d196:	68 94 89 02 c0       	push   0xc0028994
c001d19b:	e9 55 ff ff ff       	jmp    c001d0f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001d1a0:	8b 36                	mov    esi,DWORD PTR [esi]
c001d1a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d1a6:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d1a9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d1ac:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d1b2:	01 d7                	add    edi,edx
c001d1b4:	89 f8                	mov    eax,edi
c001d1b6:	e9 44 fe ff ff       	jmp    c001cfff <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001d1bb <cleanerTaskFunction(void*)>:
c001d1bb:	53                   	push   ebx
c001d1bc:	83 ec 08             	sub    esp,0x8
c001d1bf:	e8 96 f6 ff ff       	call   c001c85a <unlockScheduler()>
c001d1c4:	e8 8f f6 ff ff       	call   c001c858 <lockScheduler()>
c001d1c9:	80 3d 6c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b86c,0x0
c001d1d0:	0f 85 8e 00 00 00    	jne    c001d264 <cleanerTaskFunction(void*)+0xa9>
c001d1d6:	83 ec 0c             	sub    esp,0xc
c001d1d9:	6a 02                	push   0x2
c001d1db:	e8 c4 fa ff ff       	call   c001cca4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	c6 05 6c b8 02 c0 00 	mov    BYTE PTR ds:0xc002b86c,0x0
c001d1ea:	e8 90 f6 ff ff       	call   c001c87f <lockStuff()>
c001d1ef:	e8 64 f6 ff ff       	call   c001c858 <lockScheduler()>
c001d1f4:	83 ec 0c             	sub    esp,0xc
c001d1f7:	68 90 b8 02 c0       	push   0xc002b890
c001d1fc:	e8 97 82 00 00       	call   c0025498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d201:	83 c4 10             	add    esp,0x10
c001d204:	84 c0                	test   al,al
c001d206:	75 40                	jne    c001d248 <cleanerTaskFunction(void*)+0x8d>
c001d208:	83 ec 0c             	sub    esp,0xc
c001d20b:	68 90 b8 02 c0       	push   0xc002b890
c001d210:	e8 7b 82 00 00       	call   c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d215:	c7 04 24 90 b8 02 c0 	mov    DWORD PTR [esp],0xc002b890
c001d21c:	89 c3                	mov    ebx,eax
c001d21e:	e8 91 82 00 00       	call   c00254b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d223:	c7 04 24 99 86 02 c0 	mov    DWORD PTR [esp],0xc0028699
c001d22a:	e8 28 50 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d22f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d232:	e8 e0 fc ff ff       	call   c001cf17 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d237:	c7 04 24 b2 86 02 c0 	mov    DWORD PTR [esp],0xc00286b2
c001d23e:	e8 14 50 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	eb ac                	jmp    c001d1f4 <cleanerTaskFunction(void*)+0x39>
c001d248:	e8 0d f6 ff ff       	call   c001c85a <unlockScheduler()>
c001d24d:	e8 bf f9 ff ff       	call   c001cc11 <unlockStuff()>
c001d252:	e8 01 f6 ff ff       	call   c001c858 <lockScheduler()>
c001d257:	80 3d 6c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b86c,0x0
c001d25e:	0f 84 72 ff ff ff    	je     c001d1d6 <cleanerTaskFunction(void*)+0x1b>
c001d264:	e8 f1 f5 ff ff       	call   c001c85a <unlockScheduler()>
c001d269:	e9 75 ff ff ff       	jmp    c001d1e3 <cleanerTaskFunction(void*)+0x28>

c001d26e <terminateTask(int)>:
c001d26e:	83 ec 14             	sub    esp,0x14
c001d271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d276:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d279:	83 c0 0c             	add    eax,0xc
c001d27c:	50                   	push   eax
c001d27d:	68 f0 89 02 c0       	push   0xc00289f0
c001d282:	e8 d0 4f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d287:	e8 f3 f5 ff ff       	call   c001c87f <lockStuff()>
c001d28c:	e8 c7 f5 ff ff       	call   c001c858 <lockScheduler()>
c001d291:	c7 04 24 c5 86 02 c0 	mov    DWORD PTR [esp],0xc00286c5
c001d298:	e8 ba 4f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d29d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d2a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2a6:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d2a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d2b1:	5a                   	pop    edx
c001d2b2:	59                   	pop    ecx
c001d2b3:	50                   	push   eax
c001d2b4:	68 90 b8 02 c0       	push   0xc002b890
c001d2b9:	e8 a4 82 00 00       	call   c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d2be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2c3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d2ca:	c7 04 24 df 86 02 c0 	mov    DWORD PTR [esp],0xc00286df
c001d2d1:	e8 81 4f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d2d6:	83 c4 10             	add    esp,0x10
c001d2d9:	a1 68 b8 02 c0       	mov    eax,ds:0xc002b868
c001d2de:	85 c0                	test   eax,eax
c001d2e0:	74 5a                	je     c001d33c <terminateTask(int)+0xce>
c001d2e2:	83 ec 0c             	sub    esp,0xc
c001d2e5:	68 f9 86 02 c0       	push   0xc00286f9
c001d2ea:	e8 68 4f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d2ef:	58                   	pop    eax
c001d2f0:	c6 05 6c b8 02 c0 01 	mov    BYTE PTR ds:0xc002b86c,0x1
c001d2f7:	ff 35 68 b8 02 c0    	push   DWORD PTR ds:0xc002b868
c001d2fd:	e8 66 fb ff ff       	call   c001ce68 <unblockTask(ThreadControlBlock*)>
c001d302:	c7 04 24 13 87 02 c0 	mov    DWORD PTR [esp],0xc0028713
c001d309:	e8 49 4f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d30e:	83 c4 10             	add    esp,0x10
c001d311:	e8 44 f5 ff ff       	call   c001c85a <unlockScheduler()>
c001d316:	e8 f6 f8 ff ff       	call   c001cc11 <unlockStuff()>
c001d31b:	83 ec 0c             	sub    esp,0xc
c001d31e:	68 4b 87 02 c0       	push   0xc002874b
c001d323:	e8 2f 4f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d328:	83 c4 10             	add    esp,0x10
c001d32b:	e8 28 f5 ff ff       	call   c001c858 <lockScheduler()>
c001d330:	e8 57 f8 ff ff       	call   c001cb8c <schedule()>
c001d335:	e8 20 f5 ff ff       	call   c001c85a <unlockScheduler()>
c001d33a:	eb ef                	jmp    c001d32b <terminateTask(int)+0xbd>
c001d33c:	83 ec 0c             	sub    esp,0xc
c001d33f:	68 2d 87 02 c0       	push   0xc002872d
c001d344:	e8 0e 4f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001d349:	83 c4 10             	add    esp,0x10
c001d34c:	eb c3                	jmp    c001d311 <terminateTask(int)+0xa3>

c001d34e <Thr::terminateFromIRQ(int)>:
c001d34e:	83 ec 18             	sub    esp,0x18
c001d351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d355:	e8 14 ff ff ff       	call   c001d26e <terminateTask(int)>

c001d35a <Semaphore::release()>:
c001d35a:	83 ec 0c             	sub    esp,0xc
c001d35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d361:	e8 19 f5 ff ff       	call   c001c87f <lockStuff()>
c001d366:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d369:	85 d2                	test   edx,edx
c001d36b:	74 1a                	je     c001d387 <Semaphore::release()+0x2d>
c001d36d:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d370:	83 ec 0c             	sub    esp,0xc
c001d373:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d376:	52                   	push   edx
c001d377:	e8 ec fa ff ff       	call   c001ce68 <unblockTask(ThreadControlBlock*)>
c001d37c:	83 c4 10             	add    esp,0x10
c001d37f:	83 c4 0c             	add    esp,0xc
c001d382:	e9 8a f8 ff ff       	jmp    c001cc11 <unlockStuff()>
c001d387:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d38a:	83 c4 0c             	add    esp,0xc
c001d38d:	e9 7f f8 ff ff       	jmp    c001cc11 <unlockStuff()>

c001d392 <__static_initialization_and_destruction_0(int, int)>:
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d39a:	0f 85 88 00 00 00    	jne    c001d428 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d3a0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d3a8:	75 7e                	jne    c001d428 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d3aa:	83 ec 0c             	sub    esp,0xc
c001d3ad:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d3b2:	e8 9f 83 00 00       	call   c0025756 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d3b7:	83 c4 10             	add    esp,0x10
c001d3ba:	83 ec 04             	sub    esp,0x4
c001d3bd:	68 a8 93 02 c0       	push   0xc00293a8
c001d3c2:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d3c7:	68 16 57 02 c0       	push   0xc0025716
c001d3cc:	e8 22 4d ff ff       	call   c00120f3 <__cxa_atexit>
c001d3d1:	83 c4 10             	add    esp,0x10
c001d3d4:	83 ec 0c             	sub    esp,0xc
c001d3d7:	68 9c b8 02 c0       	push   0xc002b89c
c001d3dc:	e8 75 83 00 00       	call   c0025756 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d3e1:	83 c4 10             	add    esp,0x10
c001d3e4:	83 ec 04             	sub    esp,0x4
c001d3e7:	68 a8 93 02 c0       	push   0xc00293a8
c001d3ec:	68 9c b8 02 c0       	push   0xc002b89c
c001d3f1:	68 16 57 02 c0       	push   0xc0025716
c001d3f6:	e8 f8 4c ff ff       	call   c00120f3 <__cxa_atexit>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	83 ec 0c             	sub    esp,0xc
c001d401:	68 90 b8 02 c0       	push   0xc002b890
c001d406:	e8 4b 83 00 00       	call   c0025756 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d40b:	83 c4 10             	add    esp,0x10
c001d40e:	83 ec 04             	sub    esp,0x4
c001d411:	68 a8 93 02 c0       	push   0xc00293a8
c001d416:	68 90 b8 02 c0       	push   0xc002b890
c001d41b:	68 16 57 02 c0       	push   0xc0025716
c001d420:	e8 ce 4c ff ff       	call   c00120f3 <__cxa_atexit>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	90                   	nop
c001d429:	83 c4 0c             	add    esp,0xc
c001d42c:	c3                   	ret    

c001d42d <_GLOBAL__sub_I_kernelProcess>:
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	83 ec 08             	sub    esp,0x8
c001d433:	68 ff ff 00 00       	push   0xffff
c001d438:	6a 01                	push   0x1
c001d43a:	e8 53 ff ff ff       	call   c001d392 <__static_initialization_and_destruction_0(int, int)>
c001d43f:	83 c4 10             	add    esp,0x10
c001d442:	83 c4 0c             	add    esp,0xc
c001d445:	c3                   	ret    

c001d446 <Vm::vm8086EntryPoint(void*)>:
c001d446:	83 ec 0c             	sub    esp,0xc
c001d449:	e8 0c f4 ff ff       	call   c001c85a <unlockScheduler()>
c001d44e:	fb                   	sti    
c001d44f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d454:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001d458:	52                   	push   edx
c001d459:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001d45d:	52                   	push   edx
c001d45e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001d462:	52                   	push   edx
c001d463:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001d467:	50                   	push   eax
c001d468:	e8 2c 2e fe ff       	call   c0000299 <goToVM86>
c001d46d:	83 c4 1c             	add    esp,0x1c
c001d470:	c3                   	ret    

c001d471 <Vm::inbv(unsigned short)>:
c001d471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d475:	ec                   	in     al,dx
c001d476:	c3                   	ret    

c001d477 <Vm::outbv(unsigned short, unsigned char)>:
c001d477:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d47b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d47f:	ee                   	out    dx,al
c001d480:	c3                   	ret    

c001d481 <Vm::realToLinear(unsigned short, unsigned short)>:
c001d481:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d486:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d48b:	c1 e0 04             	shl    eax,0x4
c001d48e:	01 d0                	add    eax,edx
c001d490:	c3                   	ret    

c001d491 <Vm::getSegment(unsigned int)>:
c001d491:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d495:	c1 e8 10             	shr    eax,0x10
c001d498:	c3                   	ret    

c001d499 <Vm::getOffset(unsigned int)>:
c001d499:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d49d:	c3                   	ret    

c001d49e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001d49e:	55                   	push   ebp
c001d49f:	57                   	push   edi
c001d4a0:	56                   	push   esi
c001d4a1:	53                   	push   ebx
c001d4a2:	83 ec 2c             	sub    esp,0x2c
c001d4a5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001d4a9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d4ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d4b1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d4b5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d4b9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d4bd:	e8 96 f3 ff ff       	call   c001c858 <lockScheduler()>
c001d4c2:	68 80 00 00 00       	push   0x80
c001d4c7:	6a 00                	push   0x0
c001d4c9:	68 46 d4 01 c0       	push   0xc001d446
c001d4ce:	55                   	push   ebp
c001d4cf:	e8 ae f4 ff ff       	call   c001c982 <Process::createThread(void (*)(void*), void*, int)>
c001d4d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d4d8:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001d4dc:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001d4e0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001d4e4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001d4e8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001d4ec:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d4f3:	e8 70 4c ff ff       	call   c0012168 <operator new(unsigned long)>
c001d4f8:	83 c4 0c             	add    esp,0xc
c001d4fb:	89 c3                	mov    ebx,eax
c001d4fd:	55                   	push   ebp
c001d4fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d502:	50                   	push   eax
c001d503:	e8 7e 52 ff ff       	call   c0012786 <File::File(char const*, Process*)>
c001d508:	83 c4 0c             	add    esp,0xc
c001d50b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001d50f:	50                   	push   eax
c001d510:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d514:	50                   	push   eax
c001d515:	53                   	push   ebx
c001d516:	e8 7b 55 ff ff       	call   c0012a96 <File::stat(unsigned long long*, bool*)>
c001d51b:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001d51f:	83 c4 10             	add    esp,0x10
c001d522:	84 d2                	test   dl,dl
c001d524:	74 1c                	je     c001d542 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001d526:	83 ec 0c             	sub    esp,0xc
c001d529:	68 0f 8a 02 c0       	push   0xc0028a0f
c001d52e:	e8 d1 c3 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001d533:	e8 22 f3 ff ff       	call   c001c85a <unlockScheduler()>
c001d538:	83 c4 10             	add    esp,0x10
c001d53b:	31 d2                	xor    edx,edx
c001d53d:	e9 81 00 00 00       	jmp    c001d5c3 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001d542:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001d546:	51                   	push   ecx
c001d547:	51                   	push   ecx
c001d548:	6a 01                	push   0x1
c001d54a:	53                   	push   ebx
c001d54b:	e8 9a 52 ff ff       	call   c00127ea <File::open(FileOpenMode)>
c001d550:	83 c4 10             	add    esp,0x10
c001d553:	85 c0                	test   eax,eax
c001d555:	74 1b                	je     c001d572 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001d557:	83 ec 0c             	sub    esp,0xc
c001d55a:	68 28 8a 02 c0       	push   0xc0028a28
c001d55f:	e8 a0 c3 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001d564:	e8 f1 f2 ff ff       	call   c001c85a <unlockScheduler()>
c001d569:	83 c4 10             	add    esp,0x10
c001d56c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001d570:	eb 51                	jmp    c001d5c3 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001d572:	83 ec 0c             	sub    esp,0xc
c001d575:	0f b7 ff             	movzx  edi,di
c001d578:	6a 07                	push   0x7
c001d57a:	0f b7 f6             	movzx  esi,si
c001d57d:	68 00 01 00 00       	push   0x100
c001d582:	6a 00                	push   0x0
c001d584:	6a 00                	push   0x0
c001d586:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001d58c:	e8 b3 46 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d591:	83 c4 18             	add    esp,0x18
c001d594:	57                   	push   edi
c001d595:	56                   	push   esi
c001d596:	e8 e6 fe ff ff       	call   c001d481 <Vm::realToLinear(unsigned short, unsigned short)>
c001d59b:	5a                   	pop    edx
c001d59c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d59e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001d5a2:	51                   	push   ecx
c001d5a3:	50                   	push   eax
c001d5a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d5a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d5ac:	53                   	push   ebx
c001d5ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d5b0:	83 c4 14             	add    esp,0x14
c001d5b3:	53                   	push   ebx
c001d5b4:	e8 8f 52 ff ff       	call   c0012848 <File::close()>
c001d5b9:	e8 9c f2 ff ff       	call   c001c85a <unlockScheduler()>
c001d5be:	83 c4 10             	add    esp,0x10
c001d5c1:	b2 01                	mov    dl,0x1
c001d5c3:	83 c4 2c             	add    esp,0x2c
c001d5c6:	88 d0                	mov    al,dl
c001d5c8:	5b                   	pop    ebx
c001d5c9:	5e                   	pop    esi
c001d5ca:	5f                   	pop    edi
c001d5cb:	5d                   	pop    ebp
c001d5cc:	c3                   	ret    

c001d5cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001d5cd:	57                   	push   edi
c001d5ce:	56                   	push   esi
c001d5cf:	53                   	push   ebx
c001d5d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d5d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d5dc:	83 e8 06             	sub    eax,0x6
c001d5df:	0f b7 c0             	movzx  eax,ax
c001d5e2:	50                   	push   eax
c001d5e3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001d5e8:	50                   	push   eax
c001d5e9:	e8 93 fe ff ff       	call   c001d481 <Vm::realToLinear(unsigned short, unsigned short)>
c001d5ee:	5a                   	pop    edx
c001d5ef:	5e                   	pop    esi
c001d5f0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001d5f3:	8d 56 fa             	lea    edx,[esi-0x6]
c001d5f6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d5fc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001d5ff:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001d602:	83 c2 02             	add    edx,0x2
c001d605:	66 89 10             	mov    WORD PTR [eax],dx
c001d608:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001d60b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001d60f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001d612:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001d616:	89 d6                	mov    esi,edx
c001d618:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001d61e:	66 81 e6 ff fd       	and    si,0xfdff
c001d623:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001d627:	74 07                	je     c001d630 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001d629:	89 d6                	mov    esi,edx
c001d62b:	66 81 ce 00 02       	or     si,0x200
c001d630:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001d634:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d639:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d63d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001d645:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001d648:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001d650:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d653:	5b                   	pop    ebx
c001d654:	5e                   	pop    esi
c001d655:	5f                   	pop    edi
c001d656:	c3                   	ret    

c001d657 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001d657:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d65c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d661:	c1 e0 04             	shl    eax,0x4
c001d664:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001d667:	c3                   	ret    

c001d668 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001d668:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d66d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d672:	c1 e0 04             	shl    eax,0x4
c001d675:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001d679:	c3                   	ret    

c001d67a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001d67a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d67f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d684:	c1 e0 04             	shl    eax,0x4
c001d687:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001d68a:	c3                   	ret    

c001d68b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001d68b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d690:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d695:	c1 e0 04             	shl    eax,0x4
c001d698:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d69c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001d69f:	c3                   	ret    

c001d6a0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001d6a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d6a5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d6aa:	c1 e0 04             	shl    eax,0x4
c001d6ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6b1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001d6b5:	c3                   	ret    

c001d6b6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001d6b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d6bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d6c0:	c1 e0 04             	shl    eax,0x4
c001d6c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d6c7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001d6ca:	c3                   	ret    

c001d6cb <Vm::faultHandler(regs*)>:
c001d6cb:	55                   	push   ebp
c001d6cc:	57                   	push   edi
c001d6cd:	56                   	push   esi
c001d6ce:	53                   	push   ebx
c001d6cf:	83 ec 1c             	sub    esp,0x1c
c001d6d2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d6d6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001d6d9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001d6dd:	0f b7 f0             	movzx  esi,ax
c001d6e0:	52                   	push   edx
c001d6e1:	0f b7 c0             	movzx  eax,ax
c001d6e4:	50                   	push   eax
c001d6e5:	e8 97 fd ff ff       	call   c001d481 <Vm::realToLinear(unsigned short, unsigned short)>
c001d6ea:	5a                   	pop    edx
c001d6eb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001d6ee:	59                   	pop    ecx
c001d6ef:	89 c7                	mov    edi,eax
c001d6f1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d6f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d6fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d701:	0f b7 c5             	movzx  eax,bp
c001d704:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d708:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001d70c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d710:	e8 6c fd ff ff       	call   c001d481 <Vm::realToLinear(unsigned short, unsigned short)>
c001d715:	5a                   	pop    edx
c001d716:	59                   	pop    ecx
c001d717:	b1 06                	mov    cl,0x6
c001d719:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001d71e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001d723:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001d726:	80 fa 9d             	cmp    dl,0x9d
c001d729:	0f 84 1d 02 00 00    	je     c001d94c <Vm::faultHandler(regs*)+0x281>
c001d72f:	0f 87 8e 00 00 00    	ja     c001d7c3 <Vm::faultHandler(regs*)+0xf8>
c001d735:	80 fa 66             	cmp    dl,0x66
c001d738:	0f 84 89 01 00 00    	je     c001d8c7 <Vm::faultHandler(regs*)+0x1fc>
c001d73e:	77 44                	ja     c001d784 <Vm::faultHandler(regs*)+0xb9>
c001d740:	80 fa 36             	cmp    dl,0x36
c001d743:	0f 84 74 01 00 00    	je     c001d8bd <Vm::faultHandler(regs*)+0x1f2>
c001d749:	77 1a                	ja     c001d765 <Vm::faultHandler(regs*)+0x9a>
c001d74b:	80 fa 26             	cmp    dl,0x26
c001d74e:	0f 84 4b 01 00 00    	je     c001d89f <Vm::faultHandler(regs*)+0x1d4>
c001d754:	80 fa 2e             	cmp    dl,0x2e
c001d757:	0f 85 4a 05 00 00    	jne    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d75d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d760:	31 c9                	xor    ecx,ecx
c001d762:	47                   	inc    edi
c001d763:	eb be                	jmp    c001d723 <Vm::faultHandler(regs*)+0x58>
c001d765:	80 fa 64             	cmp    dl,0x64
c001d768:	0f 84 3b 01 00 00    	je     c001d8a9 <Vm::faultHandler(regs*)+0x1de>
c001d76e:	0f 87 3f 01 00 00    	ja     c001d8b3 <Vm::faultHandler(regs*)+0x1e8>
c001d774:	80 fa 3e             	cmp    dl,0x3e
c001d777:	0f 85 2a 05 00 00    	jne    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d77d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d780:	b1 01                	mov    cl,0x1
c001d782:	eb de                	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d784:	80 fa 6d             	cmp    dl,0x6d
c001d787:	0f 84 bf 02 00 00    	je     c001da4c <Vm::faultHandler(regs*)+0x381>
c001d78d:	77 17                	ja     c001d7a6 <Vm::faultHandler(regs*)+0xdb>
c001d78f:	80 fa 67             	cmp    dl,0x67
c001d792:	0f 84 3c 01 00 00    	je     c001d8d4 <Vm::faultHandler(regs*)+0x209>
c001d798:	80 fa 6c             	cmp    dl,0x6c
c001d79b:	0f 84 5d 02 00 00    	je     c001d9fe <Vm::faultHandler(regs*)+0x333>
c001d7a1:	e9 01 05 00 00       	jmp    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d7a6:	80 fa 6f             	cmp    dl,0x6f
c001d7a9:	0f 84 8b 03 00 00    	je     c001db3a <Vm::faultHandler(regs*)+0x46f>
c001d7af:	0f 82 0f 03 00 00    	jb     c001dac4 <Vm::faultHandler(regs*)+0x3f9>
c001d7b5:	80 fa 9c             	cmp    dl,0x9c
c001d7b8:	0f 84 23 01 00 00    	je     c001d8e1 <Vm::faultHandler(regs*)+0x216>
c001d7be:	e9 e4 04 00 00       	jmp    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d7c3:	80 fa ec             	cmp    dl,0xec
c001d7c6:	0f 84 7f 04 00 00    	je     c001dc4b <Vm::faultHandler(regs*)+0x580>
c001d7cc:	77 7b                	ja     c001d849 <Vm::faultHandler(regs*)+0x17e>
c001d7ce:	80 fa e4             	cmp    dl,0xe4
c001d7d1:	0f 84 fe 03 00 00    	je     c001dbd5 <Vm::faultHandler(regs*)+0x50a>
c001d7d7:	77 53                	ja     c001d82c <Vm::faultHandler(regs*)+0x161>
c001d7d9:	80 fa cd             	cmp    dl,0xcd
c001d7dc:	0f 84 cd 01 00 00    	je     c001d9af <Vm::faultHandler(regs*)+0x2e4>
c001d7e2:	80 fa cf             	cmp    dl,0xcf
c001d7e5:	0f 85 bc 04 00 00    	jne    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d7eb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d7ee:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001d7f1:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001d7f5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001d7f8:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001d7fc:	81 ca 00 02 02 00    	or     edx,0x20200
c001d802:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d805:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001d809:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d80f:	66 c1 e8 09          	shr    ax,0x9
c001d813:	83 e0 01             	and    eax,0x1
c001d816:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d819:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d81c:	83 c0 06             	add    eax,0x6
c001d81f:	25 ff ff 00 00       	and    eax,0xffff
c001d824:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d827:	e9 77 04 00 00       	jmp    c001dca3 <Vm::faultHandler(regs*)+0x5d8>
c001d82c:	80 fa e6             	cmp    dl,0xe6
c001d82f:	0f 84 ea 03 00 00    	je     c001dc1f <Vm::faultHandler(regs*)+0x554>
c001d835:	0f 82 b6 03 00 00    	jb     c001dbf1 <Vm::faultHandler(regs*)+0x526>
c001d83b:	80 fa e7             	cmp    dl,0xe7
c001d83e:	0f 84 f2 03 00 00    	je     c001dc36 <Vm::faultHandler(regs*)+0x56b>
c001d844:	e9 5e 04 00 00       	jmp    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d849:	80 fa ef             	cmp    dl,0xef
c001d84c:	0f 84 3c 04 00 00    	je     c001dc8e <Vm::faultHandler(regs*)+0x5c3>
c001d852:	77 28                	ja     c001d87c <Vm::faultHandler(regs*)+0x1b1>
c001d854:	80 fa ed             	cmp    dl,0xed
c001d857:	0f 84 0a 04 00 00    	je     c001dc67 <Vm::faultHandler(regs*)+0x59c>
c001d85d:	80 fa ee             	cmp    dl,0xee
c001d860:	0f 85 41 04 00 00    	jne    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d866:	50                   	push   eax
c001d867:	50                   	push   eax
c001d868:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001d86c:	50                   	push   eax
c001d86d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001d871:	50                   	push   eax
c001d872:	e8 00 fc ff ff       	call   c001d477 <Vm::outbv(unsigned short, unsigned char)>
c001d877:	e9 0a 04 00 00       	jmp    c001dc86 <Vm::faultHandler(regs*)+0x5bb>
c001d87c:	80 fa fa             	cmp    dl,0xfa
c001d87f:	0f 84 5d 01 00 00    	je     c001d9e2 <Vm::faultHandler(regs*)+0x317>
c001d885:	80 fa fb             	cmp    dl,0xfb
c001d888:	0f 84 62 01 00 00    	je     c001d9f0 <Vm::faultHandler(regs*)+0x325>
c001d88e:	80 fa f3             	cmp    dl,0xf3
c001d891:	0f 85 10 04 00 00    	jne    c001dca7 <Vm::faultHandler(regs*)+0x5dc>
c001d897:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d89a:	e9 c3 fe ff ff       	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d89f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d8a2:	b1 02                	mov    cl,0x2
c001d8a4:	e9 b9 fe ff ff       	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d8a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d8ac:	b1 03                	mov    cl,0x3
c001d8ae:	e9 af fe ff ff       	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d8b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d8b6:	b1 04                	mov    cl,0x4
c001d8b8:	e9 a5 fe ff ff       	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d8bd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d8c0:	b1 05                	mov    cl,0x5
c001d8c2:	e9 9b fe ff ff       	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d8c7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d8ca:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001d8cf:	e9 8e fe ff ff       	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d8d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001d8d7:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001d8dc:	e9 81 fe ff ff       	jmp    c001d762 <Vm::faultHandler(regs*)+0x97>
c001d8e1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d8e8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d8ed:	74 30                	je     c001d91f <Vm::faultHandler(regs*)+0x254>
c001d8ef:	83 e9 04             	sub    ecx,0x4
c001d8f2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d8f8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d8fe:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d901:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d904:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d90a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d90e:	0f 84 8c 03 00 00    	je     c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001d914:	80 ce 02             	or     dh,0x2
c001d917:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001d91a:	e9 81 03 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001d91f:	83 e9 02             	sub    ecx,0x2
c001d922:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001d928:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001d92b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d92f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d935:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001d939:	74 05                	je     c001d940 <Vm::faultHandler(regs*)+0x275>
c001d93b:	80 ce 02             	or     dh,0x2
c001d93e:	eb 03                	jmp    c001d943 <Vm::faultHandler(regs*)+0x278>
c001d940:	80 e6 fd             	and    dh,0xfd
c001d943:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001d947:	e9 54 03 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001d94c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001d951:	74 2a                	je     c001d97d <Vm::faultHandler(regs*)+0x2b2>
c001d953:	8b 10                	mov    edx,DWORD PTR [eax]
c001d955:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001d95b:	81 ca 00 02 02 00    	or     edx,0x20200
c001d961:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d964:	8b 00                	mov    eax,DWORD PTR [eax]
c001d966:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d96c:	c1 e8 09             	shr    eax,0x9
c001d96f:	83 e0 01             	and    eax,0x1
c001d972:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d975:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d978:	83 c0 04             	add    eax,0x4
c001d97b:	eb 25                	jmp    c001d9a2 <Vm::faultHandler(regs*)+0x2d7>
c001d97d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001d980:	81 ca 00 02 02 00    	or     edx,0x20200
c001d986:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001d989:	66 8b 00             	mov    ax,WORD PTR [eax]
c001d98c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d992:	66 c1 e8 09          	shr    ax,0x9
c001d996:	83 e0 01             	and    eax,0x1
c001d999:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d99c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001d99f:	83 c0 02             	add    eax,0x2
c001d9a2:	25 ff ff 00 00       	and    eax,0xffff
c001d9a7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001d9aa:	e9 f1 02 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001d9af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001d9b3:	3c ff                	cmp    al,0xff
c001d9b5:	75 10                	jne    c001d9c7 <Vm::faultHandler(regs*)+0x2fc>
c001d9b7:	83 ec 0c             	sub    esp,0xc
c001d9ba:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001d9bd:	e8 8c f9 ff ff       	call   c001d34e <Thr::terminateFromIRQ(int)>
c001d9c2:	e9 c2 02 00 00       	jmp    c001dc89 <Vm::faultHandler(regs*)+0x5be>
c001d9c7:	83 ec 0c             	sub    esp,0xc
c001d9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9d2:	57                   	push   edi
c001d9d3:	50                   	push   eax
c001d9d4:	53                   	push   ebx
c001d9d5:	e8 f3 fb ff ff       	call   c001d5cd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d9da:	83 c4 20             	add    esp,0x20
c001d9dd:	e9 c1 02 00 00       	jmp    c001dca3 <Vm::faultHandler(regs*)+0x5d8>
c001d9e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9e7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d9eb:	e9 b0 02 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001d9f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9f5:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d9f9:	e9 a2 02 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001d9fe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001da03:	74 0d                	je     c001da12 <Vm::faultHandler(regs*)+0x347>
c001da05:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001da0c:	0f 87 e9 02 00 00    	ja     c001dcfb <Vm::faultHandler(regs*)+0x630>
c001da12:	83 ec 0c             	sub    esp,0xc
c001da15:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001da18:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001da1c:	50                   	push   eax
c001da1d:	e8 4f fa ff ff       	call   c001d471 <Vm::inbv(unsigned short)>
c001da22:	83 c4 0c             	add    esp,0xc
c001da25:	0f b6 c0             	movzx  eax,al
c001da28:	0f b7 c9             	movzx  ecx,cx
c001da2b:	50                   	push   eax
c001da2c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001da30:	50                   	push   eax
c001da31:	51                   	push   ecx
c001da32:	e8 54 fc ff ff       	call   c001d68b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001da37:	83 c4 10             	add    esp,0x10
c001da3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da3d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001da41:	74 03                	je     c001da46 <Vm::faultHandler(regs*)+0x37b>
c001da43:	48                   	dec    eax
c001da44:	eb 01                	jmp    c001da47 <Vm::faultHandler(regs*)+0x37c>
c001da46:	40                   	inc    eax
c001da47:	0f b7 c0             	movzx  eax,ax
c001da4a:	eb 70                	jmp    c001dabc <Vm::faultHandler(regs*)+0x3f1>
c001da4c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001da4f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001da52:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001da57:	74 0c                	je     c001da65 <Vm::faultHandler(regs*)+0x39a>
c001da59:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001da5f:	0f 87 96 02 00 00    	ja     c001dcfb <Vm::faultHandler(regs*)+0x630>
c001da65:	0f b7 c9             	movzx  ecx,cx
c001da68:	0f b7 f6             	movzx  esi,si
c001da6b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001da6e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001da73:	74 20                	je     c001da95 <Vm::faultHandler(regs*)+0x3ca>
c001da75:	ed                   	in     eax,dx
c001da76:	55                   	push   ebp
c001da77:	50                   	push   eax
c001da78:	51                   	push   ecx
c001da79:	56                   	push   esi
c001da7a:	e8 37 fc ff ff       	call   c001d6b6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001da7f:	83 c4 10             	add    esp,0x10
c001da82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da85:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001da89:	74 05                	je     c001da90 <Vm::faultHandler(regs*)+0x3c5>
c001da8b:	83 e8 04             	sub    eax,0x4
c001da8e:	eb 27                	jmp    c001dab7 <Vm::faultHandler(regs*)+0x3ec>
c001da90:	83 c0 04             	add    eax,0x4
c001da93:	eb 22                	jmp    c001dab7 <Vm::faultHandler(regs*)+0x3ec>
c001da95:	66 ed                	in     ax,dx
c001da97:	0f b7 c0             	movzx  eax,ax
c001da9a:	57                   	push   edi
c001da9b:	50                   	push   eax
c001da9c:	51                   	push   ecx
c001da9d:	56                   	push   esi
c001da9e:	e8 fd fb ff ff       	call   c001d6a0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001daa3:	83 c4 10             	add    esp,0x10
c001daa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001daa9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001daad:	74 05                	je     c001dab4 <Vm::faultHandler(regs*)+0x3e9>
c001daaf:	83 e8 02             	sub    eax,0x2
c001dab2:	eb 03                	jmp    c001dab7 <Vm::faultHandler(regs*)+0x3ec>
c001dab4:	83 c0 02             	add    eax,0x2
c001dab7:	25 ff ff 00 00       	and    eax,0xffff
c001dabc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001dabf:	e9 dc 01 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001dac4:	49                   	dec    ecx
c001dac5:	80 f9 05             	cmp    cl,0x5
c001dac8:	77 24                	ja     c001daee <Vm::faultHandler(regs*)+0x423>
c001daca:	0f b6 c9             	movzx  ecx,cl
c001dacd:	ff 24 8d 70 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7590]
c001dad4:	0f b7 f5             	movzx  esi,bp
c001dad7:	eb 15                	jmp    c001daee <Vm::faultHandler(regs*)+0x423>
c001dad9:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001dadd:	eb 0f                	jmp    c001daee <Vm::faultHandler(regs*)+0x423>
c001dadf:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001dae3:	eb 09                	jmp    c001daee <Vm::faultHandler(regs*)+0x423>
c001dae5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001dae9:	eb 03                	jmp    c001daee <Vm::faultHandler(regs*)+0x423>
c001daeb:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001daee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001daf1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001daf6:	74 0b                	je     c001db03 <Vm::faultHandler(regs*)+0x438>
c001daf8:	3d ff ff 00 00       	cmp    eax,0xffff
c001dafd:	0f 87 f8 01 00 00    	ja     c001dcfb <Vm::faultHandler(regs*)+0x630>
c001db03:	0f b7 c0             	movzx  eax,ax
c001db06:	52                   	push   edx
c001db07:	52                   	push   edx
c001db08:	50                   	push   eax
c001db09:	56                   	push   esi
c001db0a:	e8 48 fb ff ff       	call   c001d657 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001db0f:	59                   	pop    ecx
c001db10:	0f b6 c0             	movzx  eax,al
c001db13:	5e                   	pop    esi
c001db14:	50                   	push   eax
c001db15:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001db19:	50                   	push   eax
c001db1a:	e8 58 f9 ff ff       	call   c001d477 <Vm::outbv(unsigned short, unsigned char)>
c001db1f:	83 c4 10             	add    esp,0x10
c001db22:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001db25:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001db29:	74 03                	je     c001db2e <Vm::faultHandler(regs*)+0x463>
c001db2b:	48                   	dec    eax
c001db2c:	eb 01                	jmp    c001db2f <Vm::faultHandler(regs*)+0x464>
c001db2e:	40                   	inc    eax
c001db2f:	0f b7 c0             	movzx  eax,ax
c001db32:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001db35:	e9 66 01 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001db3a:	49                   	dec    ecx
c001db3b:	80 f9 05             	cmp    cl,0x5
c001db3e:	77 1f                	ja     c001db5f <Vm::faultHandler(regs*)+0x494>
c001db40:	0f b6 c9             	movzx  ecx,cl
c001db43:	ff 24 8d 88 8a 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7578]
c001db4a:	89 ee                	mov    esi,ebp
c001db4c:	eb 11                	jmp    c001db5f <Vm::faultHandler(regs*)+0x494>
c001db4e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001db51:	eb 0c                	jmp    c001db5f <Vm::faultHandler(regs*)+0x494>
c001db53:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001db56:	eb 07                	jmp    c001db5f <Vm::faultHandler(regs*)+0x494>
c001db58:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001db5b:	eb 02                	jmp    c001db5f <Vm::faultHandler(regs*)+0x494>
c001db5d:	8b 33                	mov    esi,DWORD PTR [ebx]
c001db5f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001db62:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001db67:	74 0c                	je     c001db75 <Vm::faultHandler(regs*)+0x4aa>
c001db69:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001db6f:	0f 87 86 01 00 00    	ja     c001dcfb <Vm::faultHandler(regs*)+0x630>
c001db75:	0f b7 d6             	movzx  edx,si
c001db78:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001db7b:	0f b7 c1             	movzx  eax,cx
c001db7e:	81 e7 00 04 00 00    	and    edi,0x400
c001db84:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001db87:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001db8c:	74 1d                	je     c001dbab <Vm::faultHandler(regs*)+0x4e0>
c001db8e:	55                   	push   ebp
c001db8f:	55                   	push   ebp
c001db90:	50                   	push   eax
c001db91:	52                   	push   edx
c001db92:	e8 e3 fa ff ff       	call   c001d67a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001db97:	83 c4 10             	add    esp,0x10
c001db9a:	89 f2                	mov    edx,esi
c001db9c:	ef                   	out    dx,eax
c001db9d:	85 ff                	test   edi,edi
c001db9f:	74 05                	je     c001dba6 <Vm::faultHandler(regs*)+0x4db>
c001dba1:	83 e9 04             	sub    ecx,0x4
c001dba4:	eb 21                	jmp    c001dbc7 <Vm::faultHandler(regs*)+0x4fc>
c001dba6:	83 c1 04             	add    ecx,0x4
c001dba9:	eb 1c                	jmp    c001dbc7 <Vm::faultHandler(regs*)+0x4fc>
c001dbab:	55                   	push   ebp
c001dbac:	55                   	push   ebp
c001dbad:	50                   	push   eax
c001dbae:	52                   	push   edx
c001dbaf:	e8 b4 fa ff ff       	call   c001d668 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001dbb4:	83 c4 10             	add    esp,0x10
c001dbb7:	89 f2                	mov    edx,esi
c001dbb9:	66 ef                	out    dx,ax
c001dbbb:	85 ff                	test   edi,edi
c001dbbd:	74 05                	je     c001dbc4 <Vm::faultHandler(regs*)+0x4f9>
c001dbbf:	83 e9 02             	sub    ecx,0x2
c001dbc2:	eb 03                	jmp    c001dbc7 <Vm::faultHandler(regs*)+0x4fc>
c001dbc4:	83 c1 02             	add    ecx,0x2
c001dbc7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001dbcd:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001dbd0:	e9 cb 00 00 00       	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001dbd5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001dbdc:	83 ec 0c             	sub    esp,0xc
c001dbdf:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001dbe3:	50                   	push   eax
c001dbe4:	e8 88 f8 ff ff       	call   c001d471 <Vm::inbv(unsigned short)>
c001dbe9:	0f b6 c0             	movzx  eax,al
c001dbec:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001dbef:	eb 3f                	jmp    c001dc30 <Vm::faultHandler(regs*)+0x565>
c001dbf1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001dbf6:	74 07                	je     c001dbff <Vm::faultHandler(regs*)+0x534>
c001dbf8:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001dbfc:	ed                   	in     eax,dx
c001dbfd:	eb 14                	jmp    c001dc13 <Vm::faultHandler(regs*)+0x548>
c001dbff:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001dc02:	66 31 c9             	xor    cx,cx
c001dc05:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001dc08:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001dc0c:	66 ed                	in     ax,dx
c001dc0e:	0f b7 c0             	movzx  eax,ax
c001dc11:	09 c8                	or     eax,ecx
c001dc13:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001dc16:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001dc1a:	e9 84 00 00 00       	jmp    c001dca3 <Vm::faultHandler(regs*)+0x5d8>
c001dc1f:	52                   	push   edx
c001dc20:	52                   	push   edx
c001dc21:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001dc25:	50                   	push   eax
c001dc26:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001dc2a:	50                   	push   eax
c001dc2b:	e8 47 f8 ff ff       	call   c001d477 <Vm::outbv(unsigned short, unsigned char)>
c001dc30:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001dc34:	eb 53                	jmp    c001dc89 <Vm::faultHandler(regs*)+0x5be>
c001dc36:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001dc39:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001dc3d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001dc42:	74 03                	je     c001dc47 <Vm::faultHandler(regs*)+0x57c>
c001dc44:	ef                   	out    dx,eax
c001dc45:	eb cf                	jmp    c001dc16 <Vm::faultHandler(regs*)+0x54b>
c001dc47:	66 ef                	out    dx,ax
c001dc49:	eb cb                	jmp    c001dc16 <Vm::faultHandler(regs*)+0x54b>
c001dc4b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001dc52:	83 ec 0c             	sub    esp,0xc
c001dc55:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001dc59:	50                   	push   eax
c001dc5a:	e8 12 f8 ff ff       	call   c001d471 <Vm::inbv(unsigned short)>
c001dc5f:	0f b6 c0             	movzx  eax,al
c001dc62:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001dc65:	eb 1f                	jmp    c001dc86 <Vm::faultHandler(regs*)+0x5bb>
c001dc67:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001dc6a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001dc6f:	74 03                	je     c001dc74 <Vm::faultHandler(regs*)+0x5a9>
c001dc71:	ed                   	in     eax,dx
c001dc72:	eb 0d                	jmp    c001dc81 <Vm::faultHandler(regs*)+0x5b6>
c001dc74:	66 ed                	in     ax,dx
c001dc76:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001dc79:	0f b7 c0             	movzx  eax,ax
c001dc7c:	66 31 d2             	xor    dx,dx
c001dc7f:	09 d0                	or     eax,edx
c001dc81:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001dc84:	eb 1a                	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001dc86:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001dc89:	83 c4 10             	add    esp,0x10
c001dc8c:	eb 15                	jmp    c001dca3 <Vm::faultHandler(regs*)+0x5d8>
c001dc8e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001dc91:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001dc94:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001dc99:	74 03                	je     c001dc9e <Vm::faultHandler(regs*)+0x5d3>
c001dc9b:	ef                   	out    dx,eax
c001dc9c:	eb 02                	jmp    c001dca0 <Vm::faultHandler(regs*)+0x5d5>
c001dc9e:	66 ef                	out    dx,ax
c001dca0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001dca3:	b0 01                	mov    al,0x1
c001dca5:	eb 56                	jmp    c001dcfd <Vm::faultHandler(regs*)+0x632>
c001dca7:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001dcab:	50                   	push   eax
c001dcac:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001dcb0:	50                   	push   eax
c001dcb1:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001dcb5:	50                   	push   eax
c001dcb6:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001dcba:	50                   	push   eax
c001dcbb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001dcbf:	50                   	push   eax
c001dcc0:	52                   	push   edx
c001dcc1:	52                   	push   edx
c001dcc2:	68 41 8a 02 c0       	push   0xc0028a41
c001dcc7:	e8 8b 45 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001dccc:	83 c4 20             	add    esp,0x20
c001dccf:	83 ec 0c             	sub    esp,0xc
c001dcd2:	6a 60                	push   0x60
c001dcd4:	e8 98 f7 ff ff       	call   c001d471 <Vm::inbv(unsigned short)>
c001dcd9:	83 c4 10             	add    esp,0x10
c001dcdc:	3c 1c                	cmp    al,0x1c
c001dcde:	74 04                	je     c001dce4 <Vm::faultHandler(regs*)+0x619>
c001dce0:	3c 5a                	cmp    al,0x5a
c001dce2:	75 eb                	jne    c001dccf <Vm::faultHandler(regs*)+0x604>
c001dce4:	3c 5a                	cmp    al,0x5a
c001dce6:	74 04                	je     c001dcec <Vm::faultHandler(regs*)+0x621>
c001dce8:	3c 1c                	cmp    al,0x1c
c001dcea:	75 0f                	jne    c001dcfb <Vm::faultHandler(regs*)+0x630>
c001dcec:	83 ec 0c             	sub    esp,0xc
c001dcef:	6a 60                	push   0x60
c001dcf1:	e8 7b f7 ff ff       	call   c001d471 <Vm::inbv(unsigned short)>
c001dcf6:	83 c4 10             	add    esp,0x10
c001dcf9:	eb e9                	jmp    c001dce4 <Vm::faultHandler(regs*)+0x619>
c001dcfb:	31 c0                	xor    eax,eax
c001dcfd:	83 c4 1c             	add    esp,0x1c
c001dd00:	5b                   	pop    ebx
c001dd01:	5e                   	pop    esi
c001dd02:	5f                   	pop    edi
c001dd03:	5d                   	pop    ebp
c001dd04:	c3                   	ret    
c001dd05:	90                   	nop

c001dd06 <FAT::getName()>:
c001dd06:	b8 a0 8a 02 c0       	mov    eax,0xc0028aa0
c001dd0b:	c3                   	ret    

c001dd0c <FAT::tell(void*, unsigned long long*)>:
c001dd0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dd11:	75 06                	jne    c001dd19 <FAT::tell(void*, unsigned long long*)+0xd>
c001dd13:	b8 04 00 00 00       	mov    eax,0x4
c001dd18:	c3                   	ret    
c001dd19:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd1e:	75 06                	jne    c001dd26 <FAT::tell(void*, unsigned long long*)+0x1a>
c001dd20:	b8 04 00 00 00       	mov    eax,0x4
c001dd25:	c3                   	ret    
c001dd26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd2a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dd2d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dd30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd34:	89 01                	mov    DWORD PTR [ecx],eax
c001dd36:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd39:	b8 00 00 00 00       	mov    eax,0x0
c001dd3e:	c3                   	ret    
c001dd3f:	90                   	nop

c001dd40 <FAT::stat(void*, unsigned long long*)>:
c001dd40:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dd45:	75 06                	jne    c001dd4d <FAT::stat(void*, unsigned long long*)+0xd>
c001dd47:	b8 04 00 00 00       	mov    eax,0x4
c001dd4c:	c3                   	ret    
c001dd4d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd52:	75 06                	jne    c001dd5a <FAT::stat(void*, unsigned long long*)+0x1a>
c001dd54:	b8 04 00 00 00       	mov    eax,0x4
c001dd59:	c3                   	ret    
c001dd5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd5e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dd61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd68:	89 01                	mov    DWORD PTR [ecx],eax
c001dd6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd6d:	b8 00 00 00 00       	mov    eax,0x0
c001dd72:	c3                   	ret    
c001dd73:	90                   	nop

c001dd74 <FAT::~FAT()>:
c001dd74:	83 ec 0c             	sub    esp,0xc
c001dd77:	ba 24 8b 02 c0       	mov    edx,0xc0028b24
c001dd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd80:	89 10                	mov    DWORD PTR [eax],edx
c001dd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd86:	83 ec 0c             	sub    esp,0xc
c001dd89:	50                   	push   eax
c001dd8a:	e8 f1 47 ff ff       	call   c0012580 <Filesystem::~Filesystem()>
c001dd8f:	83 c4 10             	add    esp,0x10
c001dd92:	90                   	nop
c001dd93:	83 c4 0c             	add    esp,0xc
c001dd96:	c3                   	ret    
c001dd97:	90                   	nop

c001dd98 <FAT::~FAT()>:
c001dd98:	83 ec 0c             	sub    esp,0xc
c001dd9b:	83 ec 0c             	sub    esp,0xc
c001dd9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dda2:	e8 cd ff ff ff       	call   c001dd74 <FAT::~FAT()>
c001dda7:	83 c4 10             	add    esp,0x10
c001ddaa:	83 ec 08             	sub    esp,0x8
c001ddad:	6a 08                	push   0x8
c001ddaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddb3:	e8 bf 43 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001ddb8:	83 c4 10             	add    esp,0x10
c001ddbb:	83 c4 0c             	add    esp,0xc
c001ddbe:	c3                   	ret    
c001ddbf:	90                   	nop

c001ddc0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ddc0:	83 ec 1c             	sub    esp,0x1c
c001ddc3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ddca:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ddcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddd3:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001ddda:	83 f8 ff             	cmp    eax,0xffffffff
c001dddd:	75 34                	jne    c001de13 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001dddf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dde3:	88 c2                	mov    dl,al
c001dde5:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddea:	01 d0                	add    eax,edx
c001ddec:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddf0:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001ddf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddfa:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001de01:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de06:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de0a:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001de11:	eb 17                	jmp    c001de2a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001de13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001de17:	88 c2                	mov    dl,al
c001de19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de1d:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de24:	01 d0                	add    eax,edx
c001de26:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de2a:	83 ec 04             	sub    esp,0x4
c001de2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de35:	8d 44 24 15          	lea    eax,[esp+0x15]
c001de39:	50                   	push   eax
c001de3a:	e8 0a 8d fe ff       	call   c0006b49 <f_getlabel>
c001de3f:	83 c4 10             	add    esp,0x10
c001de42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de46:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de4b:	75 07                	jne    c001de54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001de4d:	b8 00 00 00 00       	mov    eax,0x0
c001de52:	eb 05                	jmp    c001de59 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001de54:	b8 01 00 00 00       	mov    eax,0x1
c001de59:	83 c4 1c             	add    esp,0x1c
c001de5c:	c3                   	ret    
c001de5d:	90                   	nop

c001de5e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001de5e:	57                   	push   edi
c001de5f:	83 ec 58             	sub    esp,0x58
c001de62:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001de6a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001de6e:	b9 0f 00 00 00       	mov    ecx,0xf
c001de73:	b8 00 00 00 00       	mov    eax,0x0
c001de78:	fc                   	cld    
c001de79:	89 d7                	mov    edi,edx
c001de7b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de7d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de81:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de88:	83 f8 ff             	cmp    eax,0xffffffff
c001de8b:	75 34                	jne    c001dec1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001de8d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de91:	88 c2                	mov    dl,al
c001de93:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de98:	01 d0                	add    eax,edx
c001de9a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de9e:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001dea4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dea8:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001deaf:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001deb4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001deb8:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001debf:	eb 17                	jmp    c001ded8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001dec1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dec5:	88 c2                	mov    dl,al
c001dec7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001decb:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001ded2:	01 d0                	add    eax,edx
c001ded4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ded8:	83 ec 08             	sub    esp,0x8
c001dedb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dedf:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dee3:	50                   	push   eax
c001dee4:	e8 59 29 fe ff       	call   c0000842 <strcat>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	83 ec 0c             	sub    esp,0xc
c001deef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001def3:	50                   	push   eax
c001def4:	e8 3e 8e fe ff       	call   c0006d37 <f_setlabel>
c001def9:	83 c4 10             	add    esp,0x10
c001defc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df00:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001df05:	75 07                	jne    c001df0e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001df07:	b8 00 00 00 00       	mov    eax,0x0
c001df0c:	eb 05                	jmp    c001df13 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001df0e:	b8 01 00 00 00       	mov    eax,0x1
c001df13:	83 c4 58             	add    esp,0x58
c001df16:	5f                   	pop    edi
c001df17:	c3                   	ret    

c001df18 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001df18:	83 ec 2c             	sub    esp,0x2c
c001df1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001df23:	83 ec 08             	sub    esp,0x8
c001df26:	68 c4 8a 02 c0       	push   0xc0028ac4
c001df2b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df2f:	e8 a8 28 fe ff       	call   c00007dc <strcmp>
c001df34:	83 c4 10             	add    esp,0x10
c001df37:	85 c0                	test   eax,eax
c001df39:	0f 94 c0             	sete   al
c001df3c:	84 c0                	test   al,al
c001df3e:	74 0d                	je     c001df4d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001df40:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df48:	e9 a6 00 00 00       	jmp    c001dff3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df4d:	83 ec 08             	sub    esp,0x8
c001df50:	68 b6 8a 02 c0       	push   0xc0028ab6
c001df55:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df59:	e8 7e 28 fe ff       	call   c00007dc <strcmp>
c001df5e:	83 c4 10             	add    esp,0x10
c001df61:	85 c0                	test   eax,eax
c001df63:	0f 94 c0             	sete   al
c001df66:	84 c0                	test   al,al
c001df68:	74 0a                	je     c001df74 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001df6a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df72:	eb 7f                	jmp    c001dff3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df74:	83 ec 08             	sub    esp,0x8
c001df77:	68 bc 8a 02 c0       	push   0xc0028abc
c001df7c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df80:	e8 57 28 fe ff       	call   c00007dc <strcmp>
c001df85:	83 c4 10             	add    esp,0x10
c001df88:	85 c0                	test   eax,eax
c001df8a:	0f 94 c0             	sete   al
c001df8d:	84 c0                	test   al,al
c001df8f:	74 0a                	je     c001df9b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001df91:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df99:	eb 58                	jmp    c001dff3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df9b:	83 ec 08             	sub    esp,0x8
c001df9e:	68 2c 5e 02 c0       	push   0xc0025e2c
c001dfa3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfa7:	e8 30 28 fe ff       	call   c00007dc <strcmp>
c001dfac:	83 c4 10             	add    esp,0x10
c001dfaf:	85 c0                	test   eax,eax
c001dfb1:	0f 94 c0             	sete   al
c001dfb4:	84 c0                	test   al,al
c001dfb6:	74 0a                	je     c001dfc2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001dfb8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001dfc0:	eb 31                	jmp    c001dff3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfc2:	83 ec 08             	sub    esp,0x8
c001dfc5:	68 c2 8a 02 c0       	push   0xc0028ac2
c001dfca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfce:	e8 09 28 fe ff       	call   c00007dc <strcmp>
c001dfd3:	83 c4 10             	add    esp,0x10
c001dfd6:	85 c0                	test   eax,eax
c001dfd8:	0f 94 c0             	sete   al
c001dfdb:	84 c0                	test   al,al
c001dfdd:	74 0a                	je     c001dfe9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001dfdf:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001dfe7:	eb 0a                	jmp    c001dff3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfe9:	b8 08 00 00 00       	mov    eax,0x8
c001dfee:	e9 04 01 00 00       	jmp    c001e0f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001dff3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001dffa:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001dfff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e003:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e00a:	83 f8 ff             	cmp    eax,0xffffffff
c001e00d:	75 34                	jne    c001e043 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001e00f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e013:	88 c2                	mov    dl,al
c001e015:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e01a:	01 d0                	add    eax,edx
c001e01c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e020:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e026:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e02a:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e031:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e036:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e03a:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e041:	eb 17                	jmp    c001e05a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e043:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e047:	88 c2                	mov    dl,al
c001e049:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e04d:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e054:	01 d0                	add    eax,edx
c001e056:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e05a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e05e:	88 04 24             	mov    BYTE PTR [esp],al
c001e061:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e065:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e069:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e071:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e076:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e07e:	83 ec 0c             	sub    esp,0xc
c001e081:	68 00 20 00 00       	push   0x2000
c001e086:	e8 db 10 ff ff       	call   c000f166 <malloc>
c001e08b:	83 c4 10             	add    esp,0x10
c001e08e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e092:	68 00 20 00 00       	push   0x2000
c001e097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e09b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e09f:	50                   	push   eax
c001e0a0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e0a4:	50                   	push   eax
c001e0a5:	e8 d8 90 fe ff       	call   c0007182 <f_mkfs>
c001e0aa:	83 c4 10             	add    esp,0x10
c001e0ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e0b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e0b6:	75 07                	jne    c001e0bf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e0b8:	b8 00 00 00 00       	mov    eax,0x0
c001e0bd:	eb 38                	jmp    c001e0f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0bf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e0c4:	75 17                	jne    c001e0dd <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e0c6:	83 ec 0c             	sub    esp,0xc
c001e0c9:	68 f4 8a 02 c0       	push   0xc0028af4
c001e0ce:	e8 84 41 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001e0d3:	83 c4 10             	add    esp,0x10
c001e0d6:	b8 09 00 00 00       	mov    eax,0x9
c001e0db:	eb 1a                	jmp    c001e0f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0e1:	83 ec 08             	sub    esp,0x8
c001e0e4:	50                   	push   eax
c001e0e5:	68 c8 8a 02 c0       	push   0xc0028ac8
c001e0ea:	e8 68 41 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001e0ef:	83 c4 10             	add    esp,0x10
c001e0f2:	b8 01 00 00 00       	mov    eax,0x1
c001e0f7:	83 c4 2c             	add    esp,0x2c
c001e0fa:	c3                   	ret    
c001e0fb:	90                   	nop

c001e0fc <FAT::tryMount(LogicalDisk*, int)>:
c001e0fc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e102:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e107:	83 f8 14             	cmp    eax,0x14
c001e10a:	75 17                	jne    c001e123 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	68 da 8a 02 c0       	push   0xc0028ada
c001e114:	e8 eb b7 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001e119:	83 c4 10             	add    esp,0x10
c001e11c:	b0 00                	mov    al,0x0
c001e11e:	e9 d7 01 00 00       	jmp    c001e2fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e123:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e12a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e130:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e136:	3d 00 02 00 00       	cmp    eax,0x200
c001e13b:	74 07                	je     c001e144 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e13d:	b0 00                	mov    al,0x0
c001e13f:	e9 b6 01 00 00       	jmp    c001e2fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e144:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e14c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e153:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e15a:	83 f8 ff             	cmp    eax,0xffffffff
c001e15d:	74 07                	je     c001e166 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e15f:	b0 01                	mov    al,0x1
c001e161:	e9 94 01 00 00       	jmp    c001e2fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e166:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e170:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e178:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e17f:	88 c2                	mov    dl,al
c001e181:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e186:	01 d0                	add    eax,edx
c001e188:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e18f:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e195:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e19c:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e1a3:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e1a8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e1af:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e1b6:	83 ec 0c             	sub    esp,0xc
c001e1b9:	68 54 02 00 00       	push   0x254
c001e1be:	e8 a3 0f ff ff       	call   c000f166 <malloc>
c001e1c3:	83 c4 10             	add    esp,0x10
c001e1c6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e1cd:	83 ec 04             	sub    esp,0x4
c001e1d0:	6a 00                	push   0x0
c001e1d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e1d9:	50                   	push   eax
c001e1da:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1e1:	e8 5a 6b fe ff       	call   c0004d40 <f_mount>
c001e1e6:	83 c4 10             	add    esp,0x10
c001e1e9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e1f0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e1f8:	74 19                	je     c001e213 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e204:	e8 7d 0f ff ff       	call   c000f186 <rfree>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	b0 00                	mov    al,0x0
c001e20e:	e9 e7 00 00 00       	jmp    c001e2fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e213:	83 ec 04             	sub    esp,0x4
c001e216:	68 00 01 00 00       	push   0x100
c001e21b:	6a 00                	push   0x0
c001e21d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e224:	50                   	push   eax
c001e225:	e8 c2 24 fe ff       	call   c00006ec <memset>
c001e22a:	83 c4 10             	add    esp,0x10
c001e22d:	83 ec 08             	sub    esp,0x8
c001e230:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e237:	50                   	push   eax
c001e238:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e23f:	50                   	push   eax
c001e240:	e8 fd 25 fe ff       	call   c0000842 <strcat>
c001e245:	83 c4 10             	add    esp,0x10
c001e248:	83 ec 08             	sub    esp,0x8
c001e24b:	68 e8 8a 02 c0       	push   0xc0028ae8
c001e250:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e257:	50                   	push   eax
c001e258:	e8 e5 25 fe ff       	call   c0000842 <strcat>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	83 ec 04             	sub    esp,0x4
c001e263:	6a 01                	push   0x1
c001e265:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e26c:	50                   	push   eax
c001e26d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e271:	50                   	push   eax
c001e272:	e8 2b 6b fe ff       	call   c0004da2 <f_open>
c001e277:	83 c4 10             	add    esp,0x10
c001e27a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e281:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e288:	85 c0                	test   eax,eax
c001e28a:	74 0a                	je     c001e296 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e28c:	78 2d                	js     c001e2bb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e28e:	83 e8 04             	sub    eax,0x4
c001e291:	83 f8 01             	cmp    eax,0x1
c001e294:	77 25                	ja     c001e2bb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e296:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e29e:	83 ec 0c             	sub    esp,0xc
c001e2a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e2a5:	50                   	push   eax
c001e2a6:	e8 49 76 fe ff       	call   c00058f4 <f_close>
c001e2ab:	83 c4 10             	add    esp,0x10
c001e2ae:	90                   	nop
c001e2af:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e2b7:	74 3a                	je     c001e2f3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e2b9:	eb 2d                	jmp    c001e2e8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e2bb:	83 ec 0c             	sub    esp,0xc
c001e2be:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2c5:	e8 bc 0e ff ff       	call   c000f186 <rfree>
c001e2ca:	83 c4 10             	add    esp,0x10
c001e2cd:	83 ec 04             	sub    esp,0x4
c001e2d0:	6a 00                	push   0x0
c001e2d2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2d9:	50                   	push   eax
c001e2da:	6a 00                	push   0x0
c001e2dc:	e8 5f 6a fe ff       	call   c0004d40 <f_mount>
c001e2e1:	83 c4 10             	add    esp,0x10
c001e2e4:	b0 00                	mov    al,0x0
c001e2e6:	eb 12                	jmp    c001e2fa <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2e8:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e2ed:	40                   	inc    eax
c001e2ee:	a3 e0 b8 02 c0       	mov    ds:0xc002b8e0,eax
c001e2f3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e2fa:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e300:	c3                   	ret    
c001e301:	90                   	nop

c001e302 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e302:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e308:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e310:	74 0a                	je     c001e31c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e312:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e31a:	75 0a                	jne    c001e326 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e31c:	b8 04 00 00 00       	mov    eax,0x4
c001e321:	e9 db 00 00 00       	jmp    c001e401 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e326:	83 ec 08             	sub    esp,0x8
c001e329:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e330:	50                   	push   eax
c001e331:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e338:	e8 c1 7b fe ff       	call   c0005efe <f_readdir>
c001e33d:	83 c4 10             	add    esp,0x10
c001e340:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e347:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e34d:	83 ec 0c             	sub    esp,0xc
c001e350:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e357:	83 c0 1a             	add    eax,0x1a
c001e35a:	50                   	push   eax
c001e35b:	e8 a9 23 fe ff       	call   c0000709 <strlen>
c001e360:	83 c4 10             	add    esp,0x10
c001e363:	ba 00 00 00 00       	mov    edx,0x0
c001e368:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e36c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e370:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e377:	0f b6 c0             	movzx  eax,al
c001e37a:	83 e0 10             	and    eax,0x10
c001e37d:	74 07                	je     c001e386 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e37f:	b8 02 00 00 00       	mov    eax,0x2
c001e384:	eb 05                	jmp    c001e38b <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e386:	b8 01 00 00 00       	mov    eax,0x1
c001e38b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e38f:	83 ec 08             	sub    esp,0x8
c001e392:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e399:	83 c0 1a             	add    eax,0x1a
c001e39c:	50                   	push   eax
c001e39d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e3a1:	83 c0 10             	add    eax,0x10
c001e3a4:	50                   	push   eax
c001e3a5:	e8 e1 23 fe ff       	call   c000078b <strcpy>
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	83 ec 04             	sub    esp,0x4
c001e3b0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e3b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e3bb:	50                   	push   eax
c001e3bc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e3c3:	e8 ee 22 fe ff       	call   c00006b6 <memcpy>
c001e3c8:	83 c4 10             	add    esp,0x10
c001e3cb:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e3d2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e3d8:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e3df:	84 c0                	test   al,al
c001e3e1:	75 07                	jne    c001e3ea <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e3e3:	b8 07 00 00 00       	mov    eax,0x7
c001e3e8:	eb 17                	jmp    c001e401 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3ea:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e3f1:	85 c0                	test   eax,eax
c001e3f3:	75 07                	jne    c001e3fc <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e3f5:	b8 00 00 00 00       	mov    eax,0x0
c001e3fa:	eb 05                	jmp    c001e401 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3fc:	b8 01 00 00 00       	mov    eax,0x1
c001e401:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e407:	c3                   	ret    

c001e408 <FAT::read(void*, unsigned long, void*, int*)>:
c001e408:	83 ec 1c             	sub    esp,0x1c
c001e40b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e410:	74 07                	je     c001e419 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e412:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e417:	75 07                	jne    c001e420 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e419:	b8 04 00 00 00       	mov    eax,0x4
c001e41e:	eb 3d                	jmp    c001e45d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e420:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e424:	50                   	push   eax
c001e425:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e429:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e42d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e431:	e8 a8 6d fe ff       	call   c00051de <f_read>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e43d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e441:	89 c2                	mov    edx,eax
c001e443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e447:	89 10                	mov    DWORD PTR [eax],edx
c001e449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e44d:	85 c0                	test   eax,eax
c001e44f:	75 07                	jne    c001e458 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e451:	b8 00 00 00 00       	mov    eax,0x0
c001e456:	eb 05                	jmp    c001e45d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e458:	b8 01 00 00 00       	mov    eax,0x1
c001e45d:	83 c4 1c             	add    esp,0x1c
c001e460:	c3                   	ret    
c001e461:	90                   	nop

c001e462 <FAT::write(void*, unsigned long, void*, int*)>:
c001e462:	83 ec 1c             	sub    esp,0x1c
c001e465:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e46a:	74 07                	je     c001e473 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e46c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e471:	75 07                	jne    c001e47a <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e473:	b8 04 00 00 00       	mov    eax,0x4
c001e478:	eb 3d                	jmp    c001e4b7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e47a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e47e:	50                   	push   eax
c001e47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e483:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e487:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e48b:	e8 ce 6f fe ff       	call   c000545e <f_write>
c001e490:	83 c4 10             	add    esp,0x10
c001e493:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e49b:	89 c2                	mov    edx,eax
c001e49d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e4a1:	89 10                	mov    DWORD PTR [eax],edx
c001e4a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4a7:	85 c0                	test   eax,eax
c001e4a9:	75 07                	jne    c001e4b2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e4ab:	b8 00 00 00 00       	mov    eax,0x0
c001e4b0:	eb 05                	jmp    c001e4b7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e4b2:	b8 01 00 00 00       	mov    eax,0x1
c001e4b7:	83 c4 1c             	add    esp,0x1c
c001e4ba:	c3                   	ret    
c001e4bb:	90                   	nop

c001e4bc <FAT::close(void*)>:
c001e4bc:	83 ec 1c             	sub    esp,0x1c
c001e4bf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4c4:	75 07                	jne    c001e4cd <FAT::close(void*)+0x11>
c001e4c6:	b8 04 00 00 00       	mov    eax,0x4
c001e4cb:	eb 36                	jmp    c001e503 <FAT::close(void*)+0x47>
c001e4cd:	83 ec 0c             	sub    esp,0xc
c001e4d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4d4:	e8 1b 74 fe ff       	call   c00058f4 <f_close>
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4e0:	83 ec 0c             	sub    esp,0xc
c001e4e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4e7:	e8 8a 0c ff ff       	call   c000f176 <free>
c001e4ec:	83 c4 10             	add    esp,0x10
c001e4ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4f3:	85 c0                	test   eax,eax
c001e4f5:	75 07                	jne    c001e4fe <FAT::close(void*)+0x42>
c001e4f7:	b8 00 00 00 00       	mov    eax,0x0
c001e4fc:	eb 05                	jmp    c001e503 <FAT::close(void*)+0x47>
c001e4fe:	b8 01 00 00 00       	mov    eax,0x1
c001e503:	83 c4 1c             	add    esp,0x1c
c001e506:	c3                   	ret    
c001e507:	90                   	nop

c001e508 <FAT::closeDir(void*)>:
c001e508:	83 ec 1c             	sub    esp,0x1c
c001e50b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e510:	75 07                	jne    c001e519 <FAT::closeDir(void*)+0x11>
c001e512:	b8 04 00 00 00       	mov    eax,0x4
c001e517:	eb 36                	jmp    c001e54f <FAT::closeDir(void*)+0x47>
c001e519:	83 ec 0c             	sub    esp,0xc
c001e51c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e520:	e8 b7 79 fe ff       	call   c0005edc <f_closedir>
c001e525:	83 c4 10             	add    esp,0x10
c001e528:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e52c:	83 ec 0c             	sub    esp,0xc
c001e52f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e533:	e8 3e 0c ff ff       	call   c000f176 <free>
c001e538:	83 c4 10             	add    esp,0x10
c001e53b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e53f:	85 c0                	test   eax,eax
c001e541:	75 07                	jne    c001e54a <FAT::closeDir(void*)+0x42>
c001e543:	b8 00 00 00 00       	mov    eax,0x0
c001e548:	eb 05                	jmp    c001e54f <FAT::closeDir(void*)+0x47>
c001e54a:	b8 01 00 00 00       	mov    eax,0x1
c001e54f:	83 c4 1c             	add    esp,0x1c
c001e552:	c3                   	ret    
c001e553:	90                   	nop

c001e554 <FAT::seek(void*, unsigned long long)>:
c001e554:	83 ec 2c             	sub    esp,0x2c
c001e557:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e55f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e567:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e56c:	75 07                	jne    c001e575 <FAT::seek(void*, unsigned long long)+0x21>
c001e56e:	b8 04 00 00 00       	mov    eax,0x4
c001e573:	eb 2f                	jmp    c001e5a4 <FAT::seek(void*, unsigned long long)+0x50>
c001e575:	83 ec 04             	sub    esp,0x4
c001e578:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e57c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e580:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e584:	e8 9a 73 fe ff       	call   c0005923 <f_lseek>
c001e589:	83 c4 10             	add    esp,0x10
c001e58c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e590:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e594:	85 c0                	test   eax,eax
c001e596:	75 07                	jne    c001e59f <FAT::seek(void*, unsigned long long)+0x4b>
c001e598:	b8 00 00 00 00       	mov    eax,0x0
c001e59d:	eb 05                	jmp    c001e5a4 <FAT::seek(void*, unsigned long long)+0x50>
c001e59f:	b8 01 00 00 00       	mov    eax,0x1
c001e5a4:	83 c4 2c             	add    esp,0x2c
c001e5a7:	c3                   	ret    

c001e5a8 <fatWrapperReadDisk>:
c001e5a8:	83 ec 1c             	sub    esp,0x1c
c001e5ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5c2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5c7:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5d2:	83 ec 0c             	sub    esp,0xc
c001e5d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5d9:	52                   	push   edx
c001e5da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5e2:	50                   	push   eax
c001e5e3:	e8 b4 72 ff ff       	call   c001589c <LogicalDisk::read(unsigned long long, int, void*)>
c001e5e8:	83 c4 20             	add    esp,0x20
c001e5eb:	83 c4 1c             	add    esp,0x1c
c001e5ee:	c3                   	ret    

c001e5ef <fatWrapperWriteDisk>:
c001e5ef:	83 ec 1c             	sub    esp,0x1c
c001e5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5f6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001e601:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e605:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e609:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e60e:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e615:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e619:	83 ec 0c             	sub    esp,0xc
c001e61c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e620:	52                   	push   edx
c001e621:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e625:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e629:	50                   	push   eax
c001e62a:	e8 d9 72 ff ff       	call   c0015908 <LogicalDisk::write(unsigned long long, int, void*)>
c001e62f:	83 c4 20             	add    esp,0x20
c001e632:	83 c4 1c             	add    esp,0x1c
c001e635:	c3                   	ret    

c001e636 <fatWrapperIoctl>:
c001e636:	53                   	push   ebx
c001e637:	83 ec 28             	sub    esp,0x28
c001e63a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e63e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e642:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e646:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e64a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e64f:	75 31                	jne    c001e682 <fatWrapperIoctl+0x4c>
c001e651:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e655:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e659:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e65e:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e665:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e66b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e671:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e675:	66 89 02             	mov    WORD PTR [edx],ax
c001e678:	b8 00 00 00 00       	mov    eax,0x0
c001e67d:	e9 b2 00 00 00       	jmp    c001e734 <fatWrapperIoctl+0xfe>
c001e682:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e687:	75 6a                	jne    c001e6f3 <fatWrapperIoctl+0xbd>
c001e689:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e68d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e691:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e696:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e69d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e6a3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e6a9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e6af:	89 c8                	mov    eax,ecx
c001e6b1:	89 da                	mov    edx,ebx
c001e6b3:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e6b7:	c1 e0 0a             	shl    eax,0xa
c001e6ba:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e6bf:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c001e6c6:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e6cc:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e6d2:	89 cb                	mov    ebx,ecx
c001e6d4:	c1 fb 1f             	sar    ebx,0x1f
c001e6d7:	53                   	push   ebx
c001e6d8:	51                   	push   ecx
c001e6d9:	52                   	push   edx
c001e6da:	50                   	push   eax
c001e6db:	e8 9c 4c 00 00       	call   c002337c <__udivdi3>
c001e6e0:	83 c4 10             	add    esp,0x10
c001e6e3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e6e7:	89 01                	mov    DWORD PTR [ecx],eax
c001e6e9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6ec:	b8 00 00 00 00       	mov    eax,0x0
c001e6f1:	eb 41                	jmp    c001e734 <fatWrapperIoctl+0xfe>
c001e6f3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e6f8:	75 07                	jne    c001e701 <fatWrapperIoctl+0xcb>
c001e6fa:	b8 00 00 00 00       	mov    eax,0x0
c001e6ff:	eb 33                	jmp    c001e734 <fatWrapperIoctl+0xfe>
c001e701:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e706:	75 19                	jne    c001e721 <fatWrapperIoctl+0xeb>
c001e708:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e70c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e710:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e714:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e71a:	b8 00 00 00 00       	mov    eax,0x0
c001e71f:	eb 13                	jmp    c001e734 <fatWrapperIoctl+0xfe>
c001e721:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e726:	75 07                	jne    c001e72f <fatWrapperIoctl+0xf9>
c001e728:	b8 00 00 00 00       	mov    eax,0x0
c001e72d:	eb 05                	jmp    c001e734 <fatWrapperIoctl+0xfe>
c001e72f:	b8 04 00 00 00       	mov    eax,0x4
c001e734:	83 c4 28             	add    esp,0x28
c001e737:	5b                   	pop    ebx
c001e738:	c3                   	ret    
c001e739:	90                   	nop

c001e73a <FAT::FAT()>:
c001e73a:	83 ec 1c             	sub    esp,0x1c
c001e73d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e741:	83 ec 0c             	sub    esp,0xc
c001e744:	50                   	push   eax
c001e745:	e8 12 3e ff ff       	call   c001255c <Filesystem::Filesystem()>
c001e74a:	83 c4 10             	add    esp,0x10
c001e74d:	ba 24 8b 02 c0       	mov    edx,0xc0028b24
c001e752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e756:	89 10                	mov    DWORD PTR [eax],edx
c001e758:	c7 05 e0 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b8e0,0x0
c001e762:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e76a:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e76f:	7f 15                	jg     c001e786 <FAT::FAT()+0x4c>
c001e771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e775:	c7 04 85 00 b9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4700],0xffffffff
c001e780:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e784:	eb e4                	jmp    c001e76a <FAT::FAT()+0x30>
c001e786:	90                   	nop
c001e787:	83 c4 1c             	add    esp,0x1c
c001e78a:	c3                   	ret    
c001e78b:	90                   	nop

c001e78c <FAT::fixFilepath(char*)>:
c001e78c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e790:	8a 00                	mov    al,BYTE PTR [eax]
c001e792:	3c 40                	cmp    al,0x40
c001e794:	7e 2c                	jle    c001e7c2 <FAT::fixFilepath(char*)+0x36>
c001e796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e79a:	8a 00                	mov    al,BYTE PTR [eax]
c001e79c:	83 e8 41             	sub    eax,0x41
c001e79f:	88 c2                	mov    dl,al
c001e7a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7a5:	88 10                	mov    BYTE PTR [eax],dl
c001e7a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7ab:	8a 00                	mov    al,BYTE PTR [eax]
c001e7ad:	0f be c0             	movsx  eax,al
c001e7b0:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e7b7:	83 c0 30             	add    eax,0x30
c001e7ba:	88 c2                	mov    dl,al
c001e7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7c0:	88 10                	mov    BYTE PTR [eax],dl
c001e7c2:	90                   	nop
c001e7c3:	c3                   	ret    

c001e7c4 <FAT::open(char const*, void**, FileOpenMode)>:
c001e7c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e7ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e7d2:	74 0a                	je     c001e7de <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e7d4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e7dc:	75 0a                	jne    c001e7e8 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e7de:	b8 04 00 00 00       	mov    eax,0x4
c001e7e3:	e9 fd 00 00 00       	jmp    c001e8e5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e7e8:	83 ec 08             	sub    esp,0x8
c001e7eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e7f6:	50                   	push   eax
c001e7f7:	e8 8f 1f fe ff       	call   c000078b <strcpy>
c001e7fc:	83 c4 10             	add    esp,0x10
c001e7ff:	83 ec 08             	sub    esp,0x8
c001e802:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e806:	50                   	push   eax
c001e807:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e80e:	e8 79 ff ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001e813:	83 c4 10             	add    esp,0x10
c001e816:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e81e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e825:	83 e0 01             	and    eax,0x1
c001e828:	74 08                	je     c001e832 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e82a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e832:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e839:	83 e0 04             	and    eax,0x4
c001e83c:	74 10                	je     c001e84e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e83e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e846:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e84e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e855:	83 e0 02             	and    eax,0x2
c001e858:	74 08                	je     c001e862 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e85a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e862:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e869:	83 e0 08             	and    eax,0x8
c001e86c:	74 08                	je     c001e876 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e86e:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e876:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e87d:	83 e0 10             	and    eax,0x10
c001e880:	74 08                	je     c001e88a <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e882:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	68 50 02 00 00       	push   0x250
c001e892:	e8 cf 08 ff ff       	call   c000f166 <malloc>
c001e897:	83 c4 10             	add    esp,0x10
c001e89a:	89 c2                	mov    edx,eax
c001e89c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e8a3:	89 10                	mov    DWORD PTR [eax],edx
c001e8a5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e8ad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e8b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8b6:	83 ec 04             	sub    esp,0x4
c001e8b9:	52                   	push   edx
c001e8ba:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e8be:	52                   	push   edx
c001e8bf:	50                   	push   eax
c001e8c0:	e8 dd 64 fe ff       	call   c0004da2 <f_open>
c001e8c5:	83 c4 10             	add    esp,0x10
c001e8c8:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e8cf:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e8d7:	74 07                	je     c001e8e0 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e8d9:	b8 01 00 00 00       	mov    eax,0x1
c001e8de:	eb 05                	jmp    c001e8e5 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8e0:	b8 00 00 00 00       	mov    eax,0x0
c001e8e5:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8eb:	c3                   	ret    

c001e8ec <FAT::openDir(char const*, void**)>:
c001e8ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8fa:	74 0a                	je     c001e906 <FAT::openDir(char const*, void**)+0x1a>
c001e8fc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e904:	75 07                	jne    c001e90d <FAT::openDir(char const*, void**)+0x21>
c001e906:	b8 04 00 00 00       	mov    eax,0x4
c001e90b:	eb 7d                	jmp    c001e98a <FAT::openDir(char const*, void**)+0x9e>
c001e90d:	83 ec 08             	sub    esp,0x8
c001e910:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e917:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e91b:	50                   	push   eax
c001e91c:	e8 6a 1e fe ff       	call   c000078b <strcpy>
c001e921:	83 c4 10             	add    esp,0x10
c001e924:	83 ec 08             	sub    esp,0x8
c001e927:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e92b:	50                   	push   eax
c001e92c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e933:	e8 54 fe ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001e938:	83 c4 10             	add    esp,0x10
c001e93b:	83 ec 0c             	sub    esp,0xc
c001e93e:	6a 4c                	push   0x4c
c001e940:	e8 21 08 ff ff       	call   c000f166 <malloc>
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	89 c2                	mov    edx,eax
c001e94a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e951:	89 10                	mov    DWORD PTR [eax],edx
c001e953:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e95a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e95c:	83 ec 08             	sub    esp,0x8
c001e95f:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e963:	52                   	push   edx
c001e964:	50                   	push   eax
c001e965:	e8 70 74 fe ff       	call   c0005dda <f_opendir>
c001e96a:	83 c4 10             	add    esp,0x10
c001e96d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e974:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e97c:	74 07                	je     c001e985 <FAT::openDir(char const*, void**)+0x99>
c001e97e:	b8 01 00 00 00       	mov    eax,0x1
c001e983:	eb 05                	jmp    c001e98a <FAT::openDir(char const*, void**)+0x9e>
c001e985:	b8 00 00 00 00       	mov    eax,0x0
c001e98a:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e990:	c3                   	ret    
c001e991:	90                   	nop

c001e992 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e992:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e998:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e9a0:	75 0a                	jne    c001e9ac <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e9a2:	b8 04 00 00 00       	mov    eax,0x4
c001e9a7:	e9 c9 00 00 00       	jmp    c001ea75 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9ac:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e9b4:	75 0a                	jne    c001e9c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e9b6:	b8 04 00 00 00       	mov    eax,0x4
c001e9bb:	e9 b5 00 00 00       	jmp    c001ea75 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9c0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e9c8:	75 0a                	jne    c001e9d4 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e9ca:	b8 04 00 00 00       	mov    eax,0x4
c001e9cf:	e9 a1 00 00 00       	jmp    c001ea75 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9d4:	83 ec 08             	sub    esp,0x8
c001e9d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9de:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9e5:	50                   	push   eax
c001e9e6:	e8 a0 1d fe ff       	call   c000078b <strcpy>
c001e9eb:	83 c4 10             	add    esp,0x10
c001e9ee:	83 ec 08             	sub    esp,0x8
c001e9f1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e9f8:	50                   	push   eax
c001e9f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ea00:	e8 87 fd ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	83 ec 08             	sub    esp,0x8
c001ea0b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ea0f:	50                   	push   eax
c001ea10:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ea17:	50                   	push   eax
c001ea18:	e8 7c 75 fe ff       	call   c0005f99 <f_stat>
c001ea1d:	83 c4 10             	add    esp,0x10
c001ea20:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ea27:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ea2e:	85 c0                	test   eax,eax
c001ea30:	74 07                	je     c001ea39 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ea32:	83 f8 04             	cmp    eax,0x4
c001ea35:	74 32                	je     c001ea69 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001ea37:	eb 37                	jmp    c001ea70 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001ea39:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea3d:	0f b6 c0             	movzx  eax,al
c001ea40:	83 e0 10             	and    eax,0x10
c001ea43:	0f 95 c2             	setne  dl
c001ea46:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ea4d:	88 10                	mov    BYTE PTR [eax],dl
c001ea4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ea52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea56:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ea5d:	89 01                	mov    DWORD PTR [ecx],eax
c001ea5f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea62:	b8 00 00 00 00       	mov    eax,0x0
c001ea67:	eb 0c                	jmp    c001ea75 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea69:	b8 02 00 00 00       	mov    eax,0x2
c001ea6e:	eb 05                	jmp    c001ea75 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea70:	b8 01 00 00 00       	mov    eax,0x1
c001ea75:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ea7b:	c3                   	ret    

c001ea7c <FAT::unlink(char const*)>:
c001ea7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ea82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ea8a:	75 07                	jne    c001ea93 <FAT::unlink(char const*)+0x17>
c001ea8c:	b8 04 00 00 00       	mov    eax,0x4
c001ea91:	eb 5c                	jmp    c001eaef <FAT::unlink(char const*)+0x73>
c001ea93:	83 ec 08             	sub    esp,0x8
c001ea96:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eaa1:	50                   	push   eax
c001eaa2:	e8 e4 1c fe ff       	call   c000078b <strcpy>
c001eaa7:	83 c4 10             	add    esp,0x10
c001eaaa:	83 ec 08             	sub    esp,0x8
c001eaad:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eab1:	50                   	push   eax
c001eab2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001eab9:	e8 ce fc ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001eabe:	83 c4 10             	add    esp,0x10
c001eac1:	83 ec 0c             	sub    esp,0xc
c001eac4:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eac8:	50                   	push   eax
c001eac9:	e8 1d 78 fe ff       	call   c00062eb <f_unlink>
c001eace:	83 c4 10             	add    esp,0x10
c001ead1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ead8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eadf:	85 c0                	test   eax,eax
c001eae1:	75 07                	jne    c001eaea <FAT::unlink(char const*)+0x6e>
c001eae3:	b8 00 00 00 00       	mov    eax,0x0
c001eae8:	eb 05                	jmp    c001eaef <FAT::unlink(char const*)+0x73>
c001eaea:	b8 01 00 00 00       	mov    eax,0x1
c001eaef:	81 c4 1c 01 00 00    	add    esp,0x11c
c001eaf5:	c3                   	ret    

c001eaf6 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001eaf6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001eafc:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eb03:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001eb0a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eb0e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eb12:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001eb1a:	75 0a                	jne    c001eb26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001eb1c:	b8 04 00 00 00       	mov    eax,0x4
c001eb21:	e9 1c 01 00 00       	jmp    c001ec42 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eb26:	83 ec 08             	sub    esp,0x8
c001eb29:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb30:	8d 44 24 24          	lea    eax,[esp+0x24]
c001eb34:	50                   	push   eax
c001eb35:	e8 51 1c fe ff       	call   c000078b <strcpy>
c001eb3a:	83 c4 10             	add    esp,0x10
c001eb3d:	83 ec 08             	sub    esp,0x8
c001eb40:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb44:	50                   	push   eax
c001eb45:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb4c:	e8 3b fc ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001eb5c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001eb64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb69:	83 e0 01             	and    eax,0x1
c001eb6c:	74 08                	je     c001eb76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001eb6e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001eb76:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb7b:	83 e0 02             	and    eax,0x2
c001eb7e:	74 08                	je     c001eb88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001eb80:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001eb88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb8d:	83 e0 04             	and    eax,0x4
c001eb90:	74 08                	je     c001eb9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001eb92:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001eb9a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb9f:	83 e0 08             	and    eax,0x8
c001eba2:	74 08                	je     c001ebac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eba4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ebac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebb1:	83 e0 01             	and    eax,0x1
c001ebb4:	74 08                	je     c001ebbe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001ebb6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001ebbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebc3:	83 e0 02             	and    eax,0x2
c001ebc6:	74 08                	je     c001ebd0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ebc8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ebd0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebd5:	83 e0 04             	and    eax,0x4
c001ebd8:	74 08                	je     c001ebe2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ebda:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ebe2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebe7:	83 e0 08             	and    eax,0x8
c001ebea:	74 08                	je     c001ebf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ebec:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ebf4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ebfb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ec02:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ec0a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ec12:	83 ec 04             	sub    esp,0x4
c001ec15:	52                   	push   edx
c001ec16:	50                   	push   eax
c001ec17:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ec1b:	50                   	push   eax
c001ec1c:	e8 6c 7d fe ff       	call   c000698d <f_chmod>
c001ec21:	83 c4 10             	add    esp,0x10
c001ec24:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ec2b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ec32:	85 c0                	test   eax,eax
c001ec34:	75 07                	jne    c001ec3d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ec36:	b8 00 00 00 00       	mov    eax,0x0
c001ec3b:	eb 05                	jmp    c001ec42 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ec3d:	b8 01 00 00 00       	mov    eax,0x1
c001ec42:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ec48:	c3                   	ret    
c001ec49:	90                   	nop

c001ec4a <FAT::rename(char const*, char const*)>:
c001ec4a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec50:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ec58:	74 0a                	je     c001ec64 <FAT::rename(char const*, char const*)+0x1a>
c001ec5a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ec62:	75 0a                	jne    c001ec6e <FAT::rename(char const*, char const*)+0x24>
c001ec64:	b8 04 00 00 00       	mov    eax,0x4
c001ec69:	e9 98 00 00 00       	jmp    c001ed06 <FAT::rename(char const*, char const*)+0xbc>
c001ec6e:	83 ec 08             	sub    esp,0x8
c001ec71:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec78:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec7f:	50                   	push   eax
c001ec80:	e8 06 1b fe ff       	call   c000078b <strcpy>
c001ec85:	83 c4 10             	add    esp,0x10
c001ec88:	83 ec 08             	sub    esp,0x8
c001ec8b:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ec92:	50                   	push   eax
c001ec93:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec9a:	e8 ed fa ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	83 ec 08             	sub    esp,0x8
c001eca5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ecac:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ecb0:	50                   	push   eax
c001ecb1:	e8 d5 1a fe ff       	call   c000078b <strcpy>
c001ecb6:	83 c4 10             	add    esp,0x10
c001ecb9:	83 ec 08             	sub    esp,0x8
c001ecbc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecc0:	50                   	push   eax
c001ecc1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ecc8:	e8 bf fa ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001eccd:	83 c4 10             	add    esp,0x10
c001ecd0:	83 ec 08             	sub    esp,0x8
c001ecd3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecd7:	50                   	push   eax
c001ecd8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ecdf:	50                   	push   eax
c001ece0:	e8 b5 79 fe ff       	call   c000669a <f_rename>
c001ece5:	83 c4 10             	add    esp,0x10
c001ece8:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ecef:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ecf6:	85 c0                	test   eax,eax
c001ecf8:	75 07                	jne    c001ed01 <FAT::rename(char const*, char const*)+0xb7>
c001ecfa:	b8 00 00 00 00       	mov    eax,0x0
c001ecff:	eb 05                	jmp    c001ed06 <FAT::rename(char const*, char const*)+0xbc>
c001ed01:	b8 01 00 00 00       	mov    eax,0x1
c001ed06:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ed0c:	c3                   	ret    
c001ed0d:	90                   	nop

c001ed0e <FAT::mkdir(char const*)>:
c001ed0e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ed14:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ed1c:	75 07                	jne    c001ed25 <FAT::mkdir(char const*)+0x17>
c001ed1e:	b8 04 00 00 00       	mov    eax,0x4
c001ed23:	eb 5c                	jmp    c001ed81 <FAT::mkdir(char const*)+0x73>
c001ed25:	83 ec 08             	sub    esp,0x8
c001ed28:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed33:	50                   	push   eax
c001ed34:	e8 52 1a fe ff       	call   c000078b <strcpy>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	83 ec 08             	sub    esp,0x8
c001ed3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed43:	50                   	push   eax
c001ed44:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed4b:	e8 3c fa ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001ed50:	83 c4 10             	add    esp,0x10
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed5a:	50                   	push   eax
c001ed5b:	e8 0e 77 fe ff       	call   c000646e <f_mkdir>
c001ed60:	83 c4 10             	add    esp,0x10
c001ed63:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ed6a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ed71:	85 c0                	test   eax,eax
c001ed73:	75 07                	jne    c001ed7c <FAT::mkdir(char const*)+0x6e>
c001ed75:	b8 00 00 00 00       	mov    eax,0x0
c001ed7a:	eb 05                	jmp    c001ed81 <FAT::mkdir(char const*)+0x73>
c001ed7c:	b8 01 00 00 00       	mov    eax,0x1
c001ed81:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ed87:	c3                   	ret    

c001ed88 <FAT::exists(char const*)>:
c001ed88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ed8e:	83 ec 08             	sub    esp,0x8
c001ed91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed9c:	50                   	push   eax
c001ed9d:	e8 e9 19 fe ff       	call   c000078b <strcpy>
c001eda2:	83 c4 10             	add    esp,0x10
c001eda5:	83 ec 08             	sub    esp,0x8
c001eda8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001edac:	50                   	push   eax
c001edad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001edb4:	e8 d3 f9 ff ff       	call   c001e78c <FAT::fixFilepath(char*)>
c001edb9:	83 c4 10             	add    esp,0x10
c001edbc:	83 ec 08             	sub    esp,0x8
c001edbf:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001edc6:	50                   	push   eax
c001edc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edcb:	50                   	push   eax
c001edcc:	e8 c8 71 fe ff       	call   c0005f99 <f_stat>
c001edd1:	83 c4 10             	add    esp,0x10
c001edd4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001eddb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ede2:	85 c0                	test   eax,eax
c001ede4:	75 04                	jne    c001edea <FAT::exists(char const*)+0x62>
c001ede6:	b0 01                	mov    al,0x1
c001ede8:	eb 02                	jmp    c001edec <FAT::exists(char const*)+0x64>
c001edea:	b0 00                	mov    al,0x0
c001edec:	81 c4 2c 02 00 00    	add    esp,0x22c
c001edf2:	c3                   	ret    
c001edf3:	90                   	nop

c001edf4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001edf4:	b8 08 00 00 00       	mov    eax,0x8
c001edf9:	c3                   	ret    

c001edfa <ISO9660::seek(void*, unsigned long long)>:
c001edfa:	53                   	push   ebx
c001edfb:	b8 04 00 00 00       	mov    eax,0x4
c001ee00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ee08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ee0c:	85 d2                	test   edx,edx
c001ee0e:	74 17                	je     c001ee27 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ee10:	89 c8                	mov    eax,ecx
c001ee12:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ee15:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ee18:	b8 01 00 00 00       	mov    eax,0x1
c001ee1d:	73 08                	jae    c001ee27 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ee1f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ee22:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ee25:	31 c0                	xor    eax,eax
c001ee27:	5b                   	pop    ebx
c001ee28:	c3                   	ret    
c001ee29:	90                   	nop

c001ee2a <ISO9660::tell(void*, unsigned long long*)>:
c001ee2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee32:	85 d2                	test   edx,edx
c001ee34:	74 12                	je     c001ee48 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee36:	85 c0                	test   eax,eax
c001ee38:	74 0e                	je     c001ee48 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee3a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ee3d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ee40:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee43:	89 10                	mov    DWORD PTR [eax],edx
c001ee45:	31 c0                	xor    eax,eax
c001ee47:	c3                   	ret    
c001ee48:	b8 04 00 00 00       	mov    eax,0x4
c001ee4d:	c3                   	ret    

c001ee4e <ISO9660::getName()>:
c001ee4e:	b8 80 8b 02 c0       	mov    eax,0xc0028b80
c001ee53:	c3                   	ret    

c001ee54 <ISO9660::stat(void*, unsigned long long*)>:
c001ee54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee5c:	85 d2                	test   edx,edx
c001ee5e:	74 12                	je     c001ee72 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee60:	85 c0                	test   eax,eax
c001ee62:	74 0e                	je     c001ee72 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee64:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ee67:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ee6a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee6d:	89 10                	mov    DWORD PTR [eax],edx
c001ee6f:	31 c0                	xor    eax,eax
c001ee71:	c3                   	ret    
c001ee72:	b8 04 00 00 00       	mov    eax,0x4
c001ee77:	c3                   	ret    

c001ee78 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ee78:	b8 01 00 00 00       	mov    eax,0x1
c001ee7d:	c3                   	ret    

c001ee7e <ISO9660::unlink(char const*)>:
c001ee7e:	b8 01 00 00 00       	mov    eax,0x1
c001ee83:	c3                   	ret    

c001ee84 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ee84:	b8 01 00 00 00       	mov    eax,0x1
c001ee89:	c3                   	ret    

c001ee8a <ISO9660::rename(char const*, char const*)>:
c001ee8a:	b8 01 00 00 00       	mov    eax,0x1
c001ee8f:	c3                   	ret    

c001ee90 <ISO9660::mkdir(char const*)>:
c001ee90:	b8 01 00 00 00       	mov    eax,0x1
c001ee95:	c3                   	ret    

c001ee96 <ISO9660::close(void*)>:
c001ee96:	83 ec 0c             	sub    esp,0xc
c001ee99:	b8 04 00 00 00       	mov    eax,0x4
c001ee9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea2:	85 d2                	test   edx,edx
c001eea4:	74 0e                	je     c001eeb4 <ISO9660::close(void*)+0x1e>
c001eea6:	83 ec 0c             	sub    esp,0xc
c001eea9:	52                   	push   edx
c001eeaa:	e8 c7 02 ff ff       	call   c000f176 <free>
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	31 c0                	xor    eax,eax
c001eeb4:	83 c4 0c             	add    esp,0xc
c001eeb7:	c3                   	ret    

c001eeb8 <ISO9660::closeDir(void*)>:
c001eeb8:	83 ec 0c             	sub    esp,0xc
c001eebb:	b8 04 00 00 00       	mov    eax,0x4
c001eec0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eec4:	85 d2                	test   edx,edx
c001eec6:	74 0e                	je     c001eed6 <ISO9660::closeDir(void*)+0x1e>
c001eec8:	83 ec 0c             	sub    esp,0xc
c001eecb:	52                   	push   edx
c001eecc:	e8 a5 02 ff ff       	call   c000f176 <free>
c001eed1:	83 c4 10             	add    esp,0x10
c001eed4:	31 c0                	xor    eax,eax
c001eed6:	83 c4 0c             	add    esp,0xc
c001eed9:	c3                   	ret    

c001eeda <ISO9660::~ISO9660()>:
c001eeda:	83 ec 0c             	sub    esp,0xc
c001eedd:	ba d4 8b 02 c0       	mov    edx,0xc0028bd4
c001eee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee6:	89 10                	mov    DWORD PTR [eax],edx
c001eee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeec:	83 ec 0c             	sub    esp,0xc
c001eeef:	50                   	push   eax
c001eef0:	e8 8b 36 ff ff       	call   c0012580 <Filesystem::~Filesystem()>
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	90                   	nop
c001eef9:	83 c4 0c             	add    esp,0xc
c001eefc:	c3                   	ret    
c001eefd:	90                   	nop

c001eefe <ISO9660::~ISO9660()>:
c001eefe:	83 ec 0c             	sub    esp,0xc
c001ef01:	83 ec 0c             	sub    esp,0xc
c001ef04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef08:	e8 cd ff ff ff       	call   c001eeda <ISO9660::~ISO9660()>
c001ef0d:	83 c4 10             	add    esp,0x10
c001ef10:	83 ec 08             	sub    esp,0x8
c001ef13:	6a 08                	push   0x8
c001ef15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef19:	e8 59 32 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001ef1e:	83 c4 10             	add    esp,0x10
c001ef21:	83 c4 0c             	add    esp,0xc
c001ef24:	c3                   	ret    

c001ef25 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ef25:	55                   	push   ebp
c001ef26:	31 c9                	xor    ecx,ecx
c001ef28:	57                   	push   edi
c001ef29:	56                   	push   esi
c001ef2a:	53                   	push   ebx
c001ef2b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ef2f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef33:	89 eb                	mov    ebx,ebp
c001ef35:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ef39:	39 ce                	cmp    esi,ecx
c001ef3b:	7e 17                	jle    c001ef54 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ef3d:	31 d2                	xor    edx,edx
c001ef3f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ef43:	7d 13                	jge    c001ef58 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ef45:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef49:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ef4c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ef4f:	75 0d                	jne    c001ef5e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ef51:	42                   	inc    edx
c001ef52:	eb eb                	jmp    c001ef3f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ef54:	31 c0                	xor    eax,eax
c001ef56:	eb 0a                	jmp    c001ef62 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef58:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ef5c:	eb 04                	jmp    c001ef62 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef5e:	41                   	inc    ecx
c001ef5f:	43                   	inc    ebx
c001ef60:	eb d7                	jmp    c001ef39 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ef62:	5b                   	pop    ebx
c001ef63:	5e                   	pop    esi
c001ef64:	5f                   	pop    edi
c001ef65:	5d                   	pop    ebp
c001ef66:	c3                   	ret    

c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ef67:	56                   	push   esi
c001ef68:	53                   	push   ebx
c001ef69:	52                   	push   edx
c001ef6a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef6e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef76:	39 0d e0 b9 02 c0    	cmp    DWORD PTR ds:0xc002b9e0,ecx
c001ef7c:	75 08                	jne    c001ef86 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ef7e:	38 05 a8 99 02 c0    	cmp    BYTE PTR ds:0xc00299a8,al
c001ef84:	74 2b                	je     c001efb1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ef86:	83 ec 0c             	sub    esp,0xc
c001ef89:	a2 a8 99 02 c0       	mov    ds:0xc00299a8,al
c001ef8e:	68 00 ba 02 c0       	push   0xc002ba00
c001ef93:	0f be c0             	movsx  eax,al
c001ef96:	6a 01                	push   0x1
c001ef98:	89 0d e0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9e0,ecx
c001ef9e:	31 db                	xor    ebx,ebx
c001efa0:	53                   	push   ebx
c001efa1:	51                   	push   ecx
c001efa2:	ff 34 85 fc a8 02 c0 	push   DWORD PTR [eax*4-0x3ffd5704]
c001efa9:	e8 ee 68 ff ff       	call   c001589c <LogicalDisk::read(unsigned long long, int, void*)>
c001efae:	83 c4 20             	add    esp,0x20
c001efb1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001efb9:	c7 44 24 14 00 ba 02 c0 	mov    DWORD PTR [esp+0x14],0xc002ba00
c001efc1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001efc5:	58                   	pop    eax
c001efc6:	5b                   	pop    ebx
c001efc7:	5e                   	pop    esi
c001efc8:	e9 e9 16 fe ff       	jmp    c00006b6 <memcpy>
c001efcd:	90                   	nop

c001efce <ISO9660::tryMount(LogicalDisk*, int)>:
c001efce:	81 ec 10 08 00 00    	sub    esp,0x810
c001efd4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001efdb:	83 c0 41             	add    eax,0x41
c001efde:	0f be c0             	movsx  eax,al
c001efe1:	50                   	push   eax
c001efe2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efe6:	50                   	push   eax
c001efe7:	6a 10                	push   0x10
c001efe9:	e8 79 ff ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efee:	83 c4 10             	add    esp,0x10
c001eff1:	31 c0                	xor    eax,eax
c001eff3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001eff8:	75 1d                	jne    c001f017 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001effa:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001efff:	75 16                	jne    c001f017 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f001:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001f006:	75 0f                	jne    c001f017 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f008:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001f00d:	75 08                	jne    c001f017 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001f00f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001f014:	0f 94 c0             	sete   al
c001f017:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f01d:	c3                   	ret    

c001f01e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f01e:	55                   	push   ebp
c001f01f:	57                   	push   edi
c001f020:	56                   	push   esi
c001f021:	53                   	push   ebx
c001f022:	81 ec 34 08 00 00    	sub    esp,0x834
c001f028:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f02f:	55                   	push   ebp
c001f030:	68 9b 8b 02 c0       	push   0xc0028b9b
c001f035:	e8 1d 32 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001f03a:	83 c4 10             	add    esp,0x10
c001f03d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f045:	0f 84 06 02 00 00    	je     c001f251 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f04b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f053:	0f 84 f8 01 00 00    	je     c001f251 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f059:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f060:	b8 01 00 00 00       	mov    eax,0x1
c001f065:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f069:	0f 85 e7 01 00 00    	jne    c001f256 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f06f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f072:	31 d2                	xor    edx,edx
c001f074:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f077:	89 e9                	mov    ecx,ebp
c001f079:	89 d3                	mov    ebx,edx
c001f07b:	01 f1                	add    ecx,esi
c001f07d:	11 fb                	adc    ebx,edi
c001f07f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f083:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f087:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f08e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f091:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f094:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f098:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f09c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0a4:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f0a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f0ac:	72 19                	jb     c001f0c7 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f0ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0ba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f0bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0c5:	eb 13                	jmp    c001f0da <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f0c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0cf:	29 f0                	sub    eax,esi
c001f0d1:	19 fa                	sbb    edx,edi
c001f0d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0d6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0da:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f0e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f0e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0e6:	53                   	push   ebx
c001f0e7:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f0eb:	c1 e0 0b             	shl    eax,0xb
c001f0ee:	01 c6                	add    esi,eax
c001f0f0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f0f7:	11 d7                	adc    edi,edx
c001f0f9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f0fd:	89 fa                	mov    edx,edi
c001f0ff:	50                   	push   eax
c001f100:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f104:	50                   	push   eax
c001f105:	89 f0                	mov    eax,esi
c001f107:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f10b:	50                   	push   eax
c001f10c:	e8 56 fe ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f111:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f118:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f11c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f11f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f123:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f129:	83 c4 10             	add    esp,0x10
c001f12c:	b8 00 08 00 00       	mov    eax,0x800
c001f131:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f135:	29 d0                	sub    eax,edx
c001f137:	39 c1                	cmp    ecx,eax
c001f139:	83 db 00             	sbb    ebx,0x0
c001f13c:	7d 19                	jge    c001f157 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f13e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f143:	75 16                	jne    c001f15b <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f145:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f14c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f152:	e9 f6 00 00 00       	jmp    c001f24d <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f157:	89 c5                	mov    ebp,eax
c001f159:	eb 03                	jmp    c001f15e <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f15b:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f15e:	51                   	push   ecx
c001f15f:	55                   	push   ebp
c001f160:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f164:	50                   	push   eax
c001f165:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f16c:	e8 45 15 fe ff       	call   c00006b6 <memcpy>
c001f171:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f175:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f179:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f180:	01 e8                	add    eax,ebp
c001f182:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f186:	89 e8                	mov    eax,ebp
c001f188:	99                   	cdq    
c001f189:	01 ee                	add    esi,ebp
c001f18b:	11 d7                	adc    edi,edx
c001f18d:	29 e9                	sub    ecx,ebp
c001f18f:	19 d3                	sbb    ebx,edx
c001f191:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f195:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f199:	83 c4 10             	add    esp,0x10
c001f19c:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f1a1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f1a4:	b8 00 00 00 00       	mov    eax,0x0
c001f1a9:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f1ad:	7d 3f                	jge    c001f1ee <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f1af:	52                   	push   edx
c001f1b0:	89 fa                	mov    edx,edi
c001f1b2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1b9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1bd:	50                   	push   eax
c001f1be:	89 f0                	mov    eax,esi
c001f1c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1c4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1c8:	50                   	push   eax
c001f1c9:	e8 99 fd ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1ce:	81 c6 00 08 00 00    	add    esi,0x800
c001f1d4:	83 d7 00             	adc    edi,0x0
c001f1d7:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f1df:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f1e7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f1ec:	eb ab                	jmp    c001f199 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f1ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1f2:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f1f5:	74 34                	je     c001f22b <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f1f7:	89 fa                	mov    edx,edi
c001f1f9:	50                   	push   eax
c001f1fa:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f201:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f205:	50                   	push   eax
c001f206:	89 f0                	mov    eax,esi
c001f208:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f20c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f210:	55                   	push   ebp
c001f211:	50                   	push   eax
c001f212:	e8 50 fd ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f217:	83 c4 0c             	add    esp,0xc
c001f21a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f21e:	55                   	push   ebp
c001f21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f223:	e8 8e 14 fe ff       	call   c00006b6 <memcpy>
c001f228:	83 c4 10             	add    esp,0x10
c001f22b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f232:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f236:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f23a:	89 38                	mov    DWORD PTR [eax],edi
c001f23c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f243:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f247:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f24a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f24d:	31 c0                	xor    eax,eax
c001f24f:	eb 05                	jmp    c001f256 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f251:	b8 04 00 00 00       	mov    eax,0x4
c001f256:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f25c:	5b                   	pop    ebx
c001f25d:	5e                   	pop    esi
c001f25e:	5f                   	pop    edi
c001f25f:	5d                   	pop    ebp
c001f260:	c3                   	ret    
c001f261:	90                   	nop

c001f262 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f262:	55                   	push   ebp
c001f263:	57                   	push   edi
c001f264:	56                   	push   esi
c001f265:	53                   	push   ebx
c001f266:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f26c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f273:	85 f6                	test   esi,esi
c001f275:	0f 84 64 02 00 00    	je     c001f4df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f27b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f283:	0f 84 56 02 00 00    	je     c001f4df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f289:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f28c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f28f:	75 0a                	jne    c001f29b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f291:	b8 07 00 00 00       	mov    eax,0x7
c001f296:	e9 49 02 00 00       	jmp    c001f4e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f29b:	50                   	push   eax
c001f29c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f2a0:	50                   	push   eax
c001f2a1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f2a8:	53                   	push   ebx
c001f2a9:	8b 06                	mov    eax,DWORD PTR [esi]
c001f2ab:	c1 e0 0b             	shl    eax,0xb
c001f2ae:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f2b1:	c1 e8 0b             	shr    eax,0xb
c001f2b4:	50                   	push   eax
c001f2b5:	e8 ad fc ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f2ba:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f2bd:	83 c4 10             	add    esp,0x10
c001f2c0:	89 c1                	mov    ecx,eax
c001f2c2:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f2c5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f2cb:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f2ce:	84 db                	test   bl,bl
c001f2d0:	0f 85 90 00 00 00    	jne    c001f366 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f2d6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f2dc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2e2:	29 c7                	sub    edi,eax
c001f2e4:	89 fb                	mov    ebx,edi
c001f2e6:	c1 fb 1f             	sar    ebx,0x1f
c001f2e9:	01 f8                	add    eax,edi
c001f2eb:	11 da                	adc    edx,ebx
c001f2ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2f5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f2f8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f2fb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f2fe:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f301:	89 04 24             	mov    DWORD PTR [esp],eax
c001f304:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f308:	89 d8                	mov    eax,ebx
c001f30a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f30d:	ba 00 00 00 00       	mov    edx,0x0
c001f312:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f316:	b8 00 00 00 00       	mov    eax,0x0
c001f31b:	73 0b                	jae    c001f328 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f31d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f320:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f324:	29 f8                	sub    eax,edi
c001f326:	19 da                	sbb    edx,ebx
c001f328:	89 d3                	mov    ebx,edx
c001f32a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f32d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f330:	09 c3                	or     ebx,eax
c001f332:	0f 84 59 ff ff ff    	je     c001f291 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f338:	55                   	push   ebp
c001f339:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f33d:	50                   	push   eax
c001f33e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f345:	53                   	push   ebx
c001f346:	8b 06                	mov    eax,DWORD PTR [esi]
c001f348:	c1 e0 0b             	shl    eax,0xb
c001f34b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f34f:	c1 e8 0b             	shr    eax,0xb
c001f352:	50                   	push   eax
c001f353:	e8 0f fc ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f358:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f35b:	83 c4 10             	add    esp,0x10
c001f35e:	25 ff 07 00 00       	and    eax,0x7ff
c001f363:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f366:	57                   	push   edi
c001f367:	6a 28                	push   0x28
c001f369:	6a 00                	push   0x0
c001f36b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f36f:	50                   	push   eax
c001f370:	e8 77 13 fe ff       	call   c00006ec <memset>
c001f375:	31 d2                	xor    edx,edx
c001f377:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f37a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f380:	89 f8                	mov    eax,edi
c001f382:	83 c0 21             	add    eax,0x21
c001f385:	83 d2 00             	adc    edx,0x0
c001f388:	89 c7                	mov    edi,eax
c001f38a:	89 d5                	mov    ebp,edx
c001f38c:	83 c4 10             	add    esp,0x10
c001f38f:	31 c9                	xor    ecx,ecx
c001f391:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f398:	83 f9 28             	cmp    ecx,0x28
c001f39b:	88 04 24             	mov    BYTE PTR [esp],al
c001f39e:	0f 94 c2             	sete   dl
c001f3a1:	88 d0                	mov    al,dl
c001f3a3:	ba ff 07 00 00       	mov    edx,0x7ff
c001f3a8:	39 fa                	cmp    edx,edi
c001f3aa:	ba 00 00 00 00       	mov    edx,0x0
c001f3af:	19 ea                	sbb    edx,ebp
c001f3b1:	0f 92 c2             	setb   dl
c001f3b4:	09 c2                	or     edx,eax
c001f3b6:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f3ba:	0f 94 c0             	sete   al
c001f3bd:	08 d0                	or     al,dl
c001f3bf:	75 16                	jne    c001f3d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3c1:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f3c5:	74 10                	je     c001f3d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3c7:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f3ca:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f3ce:	41                   	inc    ecx
c001f3cf:	83 c7 01             	add    edi,0x1
c001f3d2:	83 d5 00             	adc    ebp,0x0
c001f3d5:	eb ba                	jmp    c001f391 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f3d7:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f3de:	83 ec 0c             	sub    esp,0xc
c001f3e1:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f3e5:	57                   	push   edi
c001f3e6:	e8 1e 13 fe ff       	call   c0000709 <strlen>
c001f3eb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f3f3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3f7:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f3fe:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f401:	5a                   	pop    edx
c001f402:	25 ff 07 00 00       	and    eax,0x7ff
c001f407:	01 c8                	add    eax,ecx
c001f409:	59                   	pop    ecx
c001f40a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f410:	83 e0 02             	and    eax,0x2
c001f413:	3c 01                	cmp    al,0x1
c001f415:	19 c0                	sbb    eax,eax
c001f417:	83 c0 02             	add    eax,0x2
c001f41a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f41e:	57                   	push   edi
c001f41f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f423:	50                   	push   eax
c001f424:	e8 62 13 fe ff       	call   c000078b <strcpy>
c001f429:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f42d:	83 c4 10             	add    esp,0x10
c001f430:	84 c0                	test   al,al
c001f432:	75 21                	jne    c001f455 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f434:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f43c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f444:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f44c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f453:	eb 28                	jmp    c001f47d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f455:	fe c8                	dec    al
c001f457:	75 24                	jne    c001f47d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f459:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f461:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f469:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f471:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f478:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f47d:	0f b6 fb             	movzx  edi,bl
c001f480:	31 db                	xor    ebx,ebx
c001f482:	50                   	push   eax
c001f483:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f48a:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f48e:	50                   	push   eax
c001f48f:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f496:	e8 1b 12 fe ff       	call   c00006b6 <memcpy>
c001f49b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f4a2:	89 f9                	mov    ecx,edi
c001f4a4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f4aa:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f4ad:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f4b0:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f4b3:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f4b6:	83 c4 10             	add    esp,0x10
c001f4b9:	39 c7                	cmp    edi,eax
c001f4bb:	89 df                	mov    edi,ebx
c001f4bd:	19 d7                	sbb    edi,edx
c001f4bf:	72 10                	jb     c001f4d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f4c1:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f4c8:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f4cf:	eb 0a                	jmp    c001f4db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f4d1:	29 c8                	sub    eax,ecx
c001f4d3:	19 da                	sbb    edx,ebx
c001f4d5:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f4d8:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f4db:	31 c0                	xor    eax,eax
c001f4dd:	eb 05                	jmp    c001f4e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f4df:	b8 04 00 00 00       	mov    eax,0x4
c001f4e4:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f4ea:	5b                   	pop    ebx
c001f4eb:	5e                   	pop    esi
c001f4ec:	5f                   	pop    edi
c001f4ed:	5d                   	pop    ebp
c001f4ee:	c3                   	ret    

c001f4ef <readRoot(unsigned int*, unsigned int*, char)>:
c001f4ef:	81 ec 40 08 00 00    	sub    esp,0x840
c001f4f5:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f4fd:	50                   	push   eax
c001f4fe:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f502:	50                   	push   eax
c001f503:	6a 10                	push   0x10
c001f505:	e8 5d fa ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f50a:	83 c4 0c             	add    esp,0xc
c001f50d:	6a 22                	push   0x22
c001f50f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f516:	50                   	push   eax
c001f517:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f51b:	50                   	push   eax
c001f51c:	e8 95 11 fe ff       	call   c00006b6 <memcpy>
c001f521:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f528:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f52c:	89 10                	mov    DWORD PTR [eax],edx
c001f52e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f535:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f539:	89 10                	mov    DWORD PTR [eax],edx
c001f53b:	b0 01                	mov    al,0x1
c001f53d:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f543:	c3                   	ret    

c001f544 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f544:	55                   	push   ebp
c001f545:	57                   	push   edi
c001f546:	56                   	push   esi
c001f547:	53                   	push   ebx
c001f548:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f54e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f555:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f55c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f560:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f564:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f568:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f56c:	75 03                	jne    c001f571 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f56e:	83 c3 02             	add    ebx,0x2
c001f571:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f574:	75 03                	jne    c001f579 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f576:	43                   	inc    ebx
c001f577:	eb f8                	jmp    c001f571 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f579:	51                   	push   ecx
c001f57a:	68 00 01 00 00       	push   0x100
c001f57f:	6a 00                	push   0x0
c001f581:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f585:	50                   	push   eax
c001f586:	e8 61 11 fe ff       	call   c00006ec <memset>
c001f58b:	83 c4 10             	add    esp,0x10
c001f58e:	31 d2                	xor    edx,edx
c001f590:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f593:	84 c0                	test   al,al
c001f595:	74 21                	je     c001f5b8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f597:	3c 2f                	cmp    al,0x2f
c001f599:	75 0b                	jne    c001f5a6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f59b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f59f:	bd 01 00 00 00       	mov    ebp,0x1
c001f5a4:	eb 14                	jmp    c001f5ba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f5a6:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f5a9:	80 f9 19             	cmp    cl,0x19
c001f5ac:	77 03                	ja     c001f5b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f5ae:	83 e8 20             	sub    eax,0x20
c001f5b1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f5b5:	42                   	inc    edx
c001f5b6:	eb d8                	jmp    c001f590 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f5b8:	31 ed                	xor    ebp,ebp
c001f5ba:	83 ec 0c             	sub    esp,0xc
c001f5bd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f5c4:	e8 9d fb fe ff       	call   c000f166 <malloc>
c001f5c9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f5d0:	89 c6                	mov    esi,eax
c001f5d2:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f5d8:	c1 ef 0b             	shr    edi,0xb
c001f5db:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f5e2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f5e6:	83 c4 10             	add    esp,0x10
c001f5e9:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f5ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5f2:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f5f9:	74 28                	je     c001f623 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f5fb:	52                   	push   edx
c001f5fc:	57                   	push   edi
c001f5fd:	50                   	push   eax
c001f5fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f602:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f609:	e8 59 f9 ff ff       	call   c001ef67 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f60e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f612:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f619:	05 00 08 00 00       	add    eax,0x800
c001f61e:	83 c4 10             	add    esp,0x10
c001f621:	eb cb                	jmp    c001f5ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f623:	83 ec 0c             	sub    esp,0xc
c001f626:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f62a:	57                   	push   edi
c001f62b:	e8 d9 10 fe ff       	call   c0000709 <strlen>
c001f630:	50                   	push   eax
c001f631:	57                   	push   edi
c001f632:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f639:	56                   	push   esi
c001f63a:	e8 e6 f8 ff ff       	call   c001ef25 <__memmem(unsigned char*, int, unsigned char*, int)>
c001f63f:	83 c4 20             	add    esp,0x20
c001f642:	85 c0                	test   eax,eax
c001f644:	75 13                	jne    c001f659 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f646:	83 ec 0c             	sub    esp,0xc
c001f649:	56                   	push   esi
c001f64a:	e8 27 fb fe ff       	call   c000f176 <free>
c001f64f:	83 c4 10             	add    esp,0x10
c001f652:	31 c0                	xor    eax,eax
c001f654:	e9 b3 00 00 00       	jmp    c001f70c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f659:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f65d:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f661:	c1 e7 08             	shl    edi,0x8
c001f664:	c1 e2 10             	shl    edx,0x10
c001f667:	09 d7                	or     edi,edx
c001f669:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f66d:	09 d7                	or     edi,edx
c001f66f:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f673:	c1 e2 18             	shl    edx,0x18
c001f676:	09 d7                	or     edi,edx
c001f678:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f67c:	89 d1                	mov    ecx,edx
c001f67e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f682:	c1 e1 08             	shl    ecx,0x8
c001f685:	c1 e2 10             	shl    edx,0x10
c001f688:	09 ca                	or     edx,ecx
c001f68a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f68e:	09 ca                	or     edx,ecx
c001f690:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f694:	c1 e1 18             	shl    ecx,0x18
c001f697:	09 ca                	or     edx,ecx
c001f699:	89 e9                	mov    ecx,ebp
c001f69b:	84 c9                	test   cl,cl
c001f69d:	74 3c                	je     c001f6db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f69f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f6a3:	83 ec 0c             	sub    esp,0xc
c001f6a6:	56                   	push   esi
c001f6a7:	e8 ca fa fe ff       	call   c000f176 <free>
c001f6ac:	83 c4 0c             	add    esp,0xc
c001f6af:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6b6:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f6bb:	50                   	push   eax
c001f6bc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6c3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6ce:	52                   	push   edx
c001f6cf:	57                   	push   edi
c001f6d0:	53                   	push   ebx
c001f6d1:	e8 6e fe ff ff       	call   c001f544 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f6d6:	83 c4 20             	add    esp,0x20
c001f6d9:	eb 31                	jmp    c001f70c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f6db:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f6de:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f6e5:	d0 e8                	shr    al,1
c001f6e7:	89 3b                	mov    DWORD PTR [ebx],edi
c001f6e9:	83 e0 01             	and    eax,0x1
c001f6ec:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f6f3:	83 ec 0c             	sub    esp,0xc
c001f6f6:	89 13                	mov    DWORD PTR [ebx],edx
c001f6f8:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f6ff:	89 03                	mov    DWORD PTR [ebx],eax
c001f701:	56                   	push   esi
c001f702:	e8 6f fa fe ff       	call   c000f176 <free>
c001f707:	83 c4 10             	add    esp,0x10
c001f70a:	b0 01                	mov    al,0x1
c001f70c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f712:	5b                   	pop    ebx
c001f713:	5e                   	pop    esi
c001f714:	5f                   	pop    edi
c001f715:	5d                   	pop    ebp
c001f716:	c3                   	ret    

c001f717 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f717:	55                   	push   ebp
c001f718:	57                   	push   edi
c001f719:	56                   	push   esi
c001f71a:	53                   	push   ebx
c001f71b:	83 ec 20             	sub    esp,0x20
c001f71e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f722:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f726:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f72a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f732:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f73a:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f73f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f745:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f74b:	57                   	push   edi
c001f74c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f750:	50                   	push   eax
c001f751:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f755:	50                   	push   eax
c001f756:	e8 94 fd ff ff       	call   c001f4ef <readRoot(unsigned int*, unsigned int*, char)>
c001f75b:	5a                   	pop    edx
c001f75c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f760:	e8 a4 0f fe ff       	call   c0000709 <strlen>
c001f765:	83 c4 10             	add    esp,0x10
c001f768:	83 f8 03             	cmp    eax,0x3
c001f76b:	77 17                	ja     c001f784 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f76d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f771:	89 03                	mov    DWORD PTR [ebx],eax
c001f773:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f777:	89 06                	mov    DWORD PTR [esi],eax
c001f779:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f780:	b0 01                	mov    al,0x1
c001f782:	eb 19                	jmp    c001f79d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f784:	50                   	push   eax
c001f785:	55                   	push   ebp
c001f786:	57                   	push   edi
c001f787:	56                   	push   esi
c001f788:	53                   	push   ebx
c001f789:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f78d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f791:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f795:	e8 aa fd ff ff       	call   c001f544 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f79a:	83 c4 20             	add    esp,0x20
c001f79d:	83 c4 1c             	add    esp,0x1c
c001f7a0:	5b                   	pop    ebx
c001f7a1:	5e                   	pop    esi
c001f7a2:	5f                   	pop    edi
c001f7a3:	5d                   	pop    ebp
c001f7a4:	c3                   	ret    
c001f7a5:	90                   	nop

c001f7a6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f7a6:	57                   	push   edi
c001f7a7:	56                   	push   esi
c001f7a8:	53                   	push   ebx
c001f7a9:	83 ec 10             	sub    esp,0x10
c001f7ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f7b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f7b4:	85 ff                	test   edi,edi
c001f7b6:	74 7b                	je     c001f833 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f7b8:	85 f6                	test   esi,esi
c001f7ba:	74 77                	je     c001f833 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f7bc:	83 ec 0c             	sub    esp,0xc
c001f7bf:	6a 1c                	push   0x1c
c001f7c1:	e8 a0 f9 fe ff       	call   c000f166 <malloc>
c001f7c6:	89 07                	mov    DWORD PTR [edi],eax
c001f7c8:	89 c3                	mov    ebx,eax
c001f7ca:	58                   	pop    eax
c001f7cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f7cf:	50                   	push   eax
c001f7d0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f7d3:	50                   	push   eax
c001f7d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7d8:	50                   	push   eax
c001f7d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7dd:	50                   	push   eax
c001f7de:	56                   	push   esi
c001f7df:	e8 33 ff ff ff       	call   c001f717 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f7e4:	83 c4 20             	add    esp,0x20
c001f7e7:	84 c0                	test   al,al
c001f7e9:	74 07                	je     c001f7f2 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f7eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7f0:	74 0b                	je     c001f7fd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f7f2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f7f6:	b8 01 00 00 00       	mov    eax,0x1
c001f7fb:	eb 3b                	jmp    c001f838 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f801:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f805:	89 03                	mov    DWORD PTR [ebx],eax
c001f807:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f80e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f812:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f819:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f820:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f823:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f82a:	8a 06                	mov    al,BYTE PTR [esi]
c001f82c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f82f:	31 c0                	xor    eax,eax
c001f831:	eb 05                	jmp    c001f838 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f833:	b8 04 00 00 00       	mov    eax,0x4
c001f838:	83 c4 10             	add    esp,0x10
c001f83b:	5b                   	pop    ebx
c001f83c:	5e                   	pop    esi
c001f83d:	5f                   	pop    edi
c001f83e:	c3                   	ret    
c001f83f:	90                   	nop

c001f840 <ISO9660::exists(char const*)>:
c001f840:	83 ec 28             	sub    esp,0x28
c001f843:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f847:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f84b:	52                   	push   edx
c001f84c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f84f:	52                   	push   edx
c001f850:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f854:	52                   	push   edx
c001f855:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f859:	52                   	push   edx
c001f85a:	50                   	push   eax
c001f85b:	e8 b7 fe ff ff       	call   c001f717 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f860:	83 c4 3c             	add    esp,0x3c
c001f863:	c3                   	ret    

c001f864 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f864:	56                   	push   esi
c001f865:	53                   	push   ebx
c001f866:	83 ec 14             	sub    esp,0x14
c001f869:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f86d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f871:	85 db                	test   ebx,ebx
c001f873:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f877:	0f 94 c2             	sete   dl
c001f87a:	85 f6                	test   esi,esi
c001f87c:	0f 94 c0             	sete   al
c001f87f:	08 c2                	or     dl,al
c001f881:	75 68                	jne    c001f8eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f883:	85 c9                	test   ecx,ecx
c001f885:	74 64                	je     c001f8eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f887:	83 ec 0c             	sub    esp,0xc
c001f88a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f88d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f891:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f897:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f89e:	50                   	push   eax
c001f89f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f8a2:	50                   	push   eax
c001f8a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8a7:	50                   	push   eax
c001f8a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f8ac:	50                   	push   eax
c001f8ad:	51                   	push   ecx
c001f8ae:	e8 64 fe ff ff       	call   c001f717 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f8b3:	83 c4 20             	add    esp,0x20
c001f8b6:	ba 01 00 00 00       	mov    edx,0x1
c001f8bb:	84 c0                	test   al,al
c001f8bd:	74 31                	je     c001f8f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8ca:	89 03                	mov    DWORD PTR [ebx],eax
c001f8cc:	ba 00 00 00 00       	mov    edx,0x0
c001f8d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8d5:	85 c0                	test   eax,eax
c001f8d7:	0f 95 06             	setne  BYTE PTR [esi]
c001f8da:	74 14                	je     c001f8f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f8e2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8e9:	eb 05                	jmp    c001f8f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8eb:	ba 04 00 00 00       	mov    edx,0x4
c001f8f0:	83 c4 14             	add    esp,0x14
c001f8f3:	89 d0                	mov    eax,edx
c001f8f5:	5b                   	pop    ebx
c001f8f6:	5e                   	pop    esi
c001f8f7:	c3                   	ret    

c001f8f8 <ISO9660::openDir(char const*, void**)>:
c001f8f8:	57                   	push   edi
c001f8f9:	56                   	push   esi
c001f8fa:	53                   	push   ebx
c001f8fb:	83 ec 10             	sub    esp,0x10
c001f8fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f902:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f906:	85 ff                	test   edi,edi
c001f908:	0f 84 95 00 00 00    	je     c001f9a3 <ISO9660::openDir(char const*, void**)+0xab>
c001f90e:	85 f6                	test   esi,esi
c001f910:	0f 84 8d 00 00 00    	je     c001f9a3 <ISO9660::openDir(char const*, void**)+0xab>
c001f916:	83 ec 0c             	sub    esp,0xc
c001f919:	6a 1c                	push   0x1c
c001f91b:	e8 46 f8 fe ff       	call   c000f166 <malloc>
c001f920:	89 07                	mov    DWORD PTR [edi],eax
c001f922:	89 c3                	mov    ebx,eax
c001f924:	59                   	pop    ecx
c001f925:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f929:	50                   	push   eax
c001f92a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f92d:	50                   	push   eax
c001f92e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f932:	50                   	push   eax
c001f933:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f937:	50                   	push   eax
c001f938:	56                   	push   esi
c001f939:	e8 d9 fd ff ff       	call   c001f717 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f93e:	83 c4 20             	add    esp,0x20
c001f941:	84 c0                	test   al,al
c001f943:	74 07                	je     c001f94c <ISO9660::openDir(char const*, void**)+0x54>
c001f945:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f94a:	75 21                	jne    c001f96d <ISO9660::openDir(char const*, void**)+0x75>
c001f94c:	0f b6 c0             	movzx  eax,al
c001f94f:	52                   	push   edx
c001f950:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f954:	50                   	push   eax
c001f955:	68 ae 8b 02 c0       	push   0xc0028bae
c001f95a:	e8 f8 28 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c001f95f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f963:	83 c4 10             	add    esp,0x10
c001f966:	b8 01 00 00 00       	mov    eax,0x1
c001f96b:	eb 3b                	jmp    c001f9a8 <ISO9660::openDir(char const*, void**)+0xb0>
c001f96d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f971:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f975:	89 03                	mov    DWORD PTR [ebx],eax
c001f977:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f97e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f982:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f989:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f990:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f993:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f99a:	8a 06                	mov    al,BYTE PTR [esi]
c001f99c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f99f:	31 c0                	xor    eax,eax
c001f9a1:	eb 05                	jmp    c001f9a8 <ISO9660::openDir(char const*, void**)+0xb0>
c001f9a3:	b8 04 00 00 00       	mov    eax,0x4
c001f9a8:	83 c4 10             	add    esp,0x10
c001f9ab:	5b                   	pop    ebx
c001f9ac:	5e                   	pop    esi
c001f9ad:	5f                   	pop    edi
c001f9ae:	c3                   	ret    
c001f9af:	90                   	nop

c001f9b0 <ISO9660::ISO9660()>:
c001f9b0:	83 ec 0c             	sub    esp,0xc
c001f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b7:	83 ec 0c             	sub    esp,0xc
c001f9ba:	50                   	push   eax
c001f9bb:	e8 9c 2b ff ff       	call   c001255c <Filesystem::Filesystem()>
c001f9c0:	83 c4 10             	add    esp,0x10
c001f9c3:	ba d4 8b 02 c0       	mov    edx,0xc0028bd4
c001f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cc:	89 10                	mov    DWORD PTR [eax],edx
c001f9ce:	90                   	nop
c001f9cf:	83 c4 0c             	add    esp,0xc
c001f9d2:	c3                   	ret    
c001f9d3:	90                   	nop

c001f9d4 <SoundChannel::~SoundChannel()>:
c001f9d4:	83 ec 0c             	sub    esp,0xc
c001f9d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f9de:	83 ec 0c             	sub    esp,0xc
c001f9e1:	50                   	push   eax
c001f9e2:	e8 8f f7 fe ff       	call   c000f176 <free>
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	90                   	nop
c001f9eb:	83 c4 0c             	add    esp,0xc
c001f9ee:	c3                   	ret    
c001f9ef:	90                   	nop

c001f9f0 <SoundChannel::setSpeed(float)>:
c001f9f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9f8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f9fb:	c3                   	ret    

c001f9fc <SoundChannel::getSpeed()>:
c001f9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa00:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001fa03:	c3                   	ret    

c001fa04 <SoundChannel::setVolume(int)>:
c001fa04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa08:	83 f8 64             	cmp    eax,0x64
c001fa0b:	7e 05                	jle    c001fa12 <SoundChannel::setVolume(int)+0xe>
c001fa0d:	b8 64 00 00 00       	mov    eax,0x64
c001fa12:	85 c0                	test   eax,eax
c001fa14:	79 02                	jns    c001fa18 <SoundChannel::setVolume(int)+0x14>
c001fa16:	31 c0                	xor    eax,eax
c001fa18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa1c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001fa1f:	c3                   	ret    

c001fa20 <SoundChannel::getVolume()>:
c001fa20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa24:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fa27:	c3                   	ret    

c001fa28 <SoundChannel::pause()>:
c001fa28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa2c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fa30:	c3                   	ret    
c001fa31:	90                   	nop

c001fa32 <SoundChannel::SoundChannel(int, int, int, int)>:
c001fa32:	83 ec 1c             	sub    esp,0x1c
c001fa35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fa39:	e8 ea ff ff ff       	call   c001fa28 <SoundChannel::pause()>
c001fa3e:	83 c4 04             	add    esp,0x4
c001fa41:	6a 50                	push   0x50
c001fa43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa47:	e8 b8 ff ff ff       	call   c001fa04 <SoundChannel::setVolume(int)>
c001fa4c:	83 c4 08             	add    esp,0x8
c001fa4f:	a1 4c 8c 02 c0       	mov    eax,ds:0xc0028c4c
c001fa54:	50                   	push   eax
c001fa55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa59:	e8 92 ff ff ff       	call   c001f9f0 <SoundChannel::setSpeed(float)>
c001fa5e:	83 c4 08             	add    esp,0x8
c001fa61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fa69:	89 10                	mov    DWORD PTR [eax],edx
c001fa6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa81:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fa86:	75 23                	jne    c001faab <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fa88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa8c:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa95:	0f af c2             	imul   eax,edx
c001fa98:	85 c0                	test   eax,eax
c001fa9a:	79 03                	jns    c001fa9f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fa9c:	83 c0 03             	add    eax,0x3
c001fa9f:	c1 f8 02             	sar    eax,0x2
c001faa2:	05 a0 0f 00 00       	add    eax,0xfa0
c001faa7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001faab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faaf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fab3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faba:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001fac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fac5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001facc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fad0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fad3:	c1 e0 02             	shl    eax,0x2
c001fad6:	83 ec 0c             	sub    esp,0xc
c001fad9:	50                   	push   eax
c001fada:	e8 87 f6 fe ff       	call   c000f166 <malloc>
c001fadf:	83 c4 10             	add    esp,0x10
c001fae2:	89 c2                	mov    edx,eax
c001fae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fae8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001faeb:	83 ec 04             	sub    esp,0x4
c001faee:	8d 44 24 08          	lea    eax,[esp+0x8]
c001faf2:	50                   	push   eax
c001faf3:	6a 01                	push   0x1
c001faf5:	6a 04                	push   0x4
c001faf7:	e8 92 8e fe ff       	call   c000898e <src_new>
c001fafc:	83 c4 10             	add    esp,0x10
c001faff:	89 c2                	mov    edx,eax
c001fb01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fb05:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001fb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0c:	85 c0                	test   eax,eax
c001fb0e:	74 10                	je     c001fb20 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	68 30 8c 02 c0       	push   0xc0028c30
c001fb18:	e8 e7 9d ff ff       	call   c0019904 <Krnl::panic(char const*)>
c001fb1d:	83 c4 10             	add    esp,0x10
c001fb20:	a0 00 c6 02 c0       	mov    al,ds:0xc002c600
c001fb25:	83 f0 01             	xor    eax,0x1
c001fb28:	84 c0                	test   al,al
c001fb2a:	74 57                	je     c001fb83 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fb2c:	a1 50 8c 02 c0       	mov    eax,ds:0xc0028c50
c001fb31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb3d:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fb45:	7f 35                	jg     c001fb7c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fb47:	83 ec 0c             	sub    esp,0xc
c001fb4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb4e:	e8 54 41 00 00       	call   c0023ca7 <__floatsisf>
c001fb53:	83 c4 10             	add    esp,0x10
c001fb56:	8b 15 50 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c50
c001fb5c:	83 ec 08             	sub    esp,0x8
c001fb5f:	52                   	push   edx
c001fb60:	50                   	push   eax
c001fb61:	e8 53 3d 00 00       	call   c00238b9 <__mulsf3>
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	89 c2                	mov    edx,eax
c001fb6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb6f:	89 14 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],edx
c001fb76:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb7a:	eb c1                	jmp    c001fb3d <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fb7c:	c6 05 00 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c600,0x1
c001fb83:	90                   	nop
c001fb84:	83 c4 1c             	add    esp,0x1c
c001fb87:	c3                   	ret    

c001fb88 <SoundChannel::play()>:
c001fb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb8c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fb90:	c3                   	ret    
c001fb91:	90                   	nop

c001fb92 <SoundChannel::paused()>:
c001fb92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb96:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fb99:	c3                   	ret    

c001fb9a <SoundChannel::getSampleRate()>:
c001fb9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb9e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fba0:	c3                   	ret    
c001fba1:	90                   	nop

c001fba2 <SoundChannel::getBits()>:
c001fba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fba9:	c3                   	ret    

c001fbaa <SoundChannel::getBufferUsed()>:
c001fbaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fbb1:	c3                   	ret    

c001fbb2 <SoundChannel::getBufferSize()>:
c001fbb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbb6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fbb9:	c3                   	ret    

c001fbba <SoundChannel::unbuffer(float*, int, int)>:
c001fbba:	56                   	push   esi
c001fbbb:	53                   	push   ebx
c001fbbc:	83 ec 40             	sub    esp,0x40
c001fbbf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fbc3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fbc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fbcd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fbd1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fbd5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fbd9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fbdd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbe1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fbe5:	e8 bd 40 00 00       	call   c0023ca7 <__floatsisf>
c001fbea:	5a                   	pop    edx
c001fbeb:	89 c6                	mov    esi,eax
c001fbed:	ff 33                	push   DWORD PTR [ebx]
c001fbef:	e8 b3 40 00 00       	call   c0023ca7 <__floatsisf>
c001fbf4:	59                   	pop    ecx
c001fbf5:	5a                   	pop    edx
c001fbf6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fbf9:	50                   	push   eax
c001fbfa:	e8 ba 3c 00 00       	call   c00238b9 <__mulsf3>
c001fbff:	59                   	pop    ecx
c001fc00:	5a                   	pop    edx
c001fc01:	50                   	push   eax
c001fc02:	56                   	push   esi
c001fc03:	e8 74 3e 00 00       	call   c0023a7c <__divsf3>
c001fc08:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc0b:	e8 67 53 00 00       	call   c0024f77 <__extendsfdf2>
c001fc10:	59                   	pop    ecx
c001fc11:	5e                   	pop    esi
c001fc12:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fc16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fc1a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fc22:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc26:	50                   	push   eax
c001fc27:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fc2a:	e8 d9 89 fe ff       	call   c0008608 <src_process>
c001fc2f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fc33:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fc36:	83 c4 0c             	add    esp,0xc
c001fc39:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fc3c:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fc3f:	29 d0                	sub    eax,edx
c001fc41:	c1 e0 02             	shl    eax,0x2
c001fc44:	50                   	push   eax
c001fc45:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fc48:	50                   	push   eax
c001fc49:	51                   	push   ecx
c001fc4a:	e8 2f 0a fe ff       	call   c000067e <memmove>
c001fc4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc53:	83 c4 44             	add    esp,0x44
c001fc56:	5b                   	pop    ebx
c001fc57:	5e                   	pop    esi
c001fc58:	c3                   	ret    
c001fc59:	90                   	nop

c001fc5a <SoundChannel::buffer8(unsigned char*, int)>:
c001fc5a:	55                   	push   ebp
c001fc5b:	57                   	push   edi
c001fc5c:	56                   	push   esi
c001fc5d:	53                   	push   ebx
c001fc5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc62:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fc66:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc6d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc70:	74 7a                	je     c001fcec <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc72:	85 ff                	test   edi,edi
c001fc74:	7e 76                	jle    c001fcec <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc76:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fc7a:	8d 70 01             	lea    esi,[eax+0x1]
c001fc7d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc80:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc83:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc8a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc8d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc90:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc93:	74 5e                	je     c001fcf3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fc95:	83 ff 01             	cmp    edi,0x1
c001fc98:	74 4b                	je     c001fce5 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fc9a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fc9e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fca1:	8d 70 01             	lea    esi,[eax+0x1]
c001fca4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fca7:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fcae:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fcb1:	b8 02 00 00 00       	mov    eax,0x2
c001fcb6:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fcb9:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fcbc:	75 23                	jne    c001fce1 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fcbe:	eb 27                	jmp    c001fce7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fcc0:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fcc5:	8d 71 01             	lea    esi,[ecx+0x1]
c001fcc8:	40                   	inc    eax
c001fcc9:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fccc:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fccf:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fcd6:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fcd9:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fcdc:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fcdf:	74 06                	je     c001fce7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fce1:	39 c7                	cmp    edi,eax
c001fce3:	75 db                	jne    c001fcc0 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fce5:	89 f8                	mov    eax,edi
c001fce7:	5b                   	pop    ebx
c001fce8:	5e                   	pop    esi
c001fce9:	5f                   	pop    edi
c001fcea:	5d                   	pop    ebp
c001fceb:	c3                   	ret    
c001fcec:	5b                   	pop    ebx
c001fced:	31 c0                	xor    eax,eax
c001fcef:	5e                   	pop    esi
c001fcf0:	5f                   	pop    edi
c001fcf1:	5d                   	pop    ebp
c001fcf2:	c3                   	ret    
c001fcf3:	b8 01 00 00 00       	mov    eax,0x1
c001fcf8:	eb ed                	jmp    c001fce7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fcfa <SoundDevice::SoundDevice(char const*)>:
c001fcfa:	83 ec 1c             	sub    esp,0x1c
c001fcfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd01:	83 ec 08             	sub    esp,0x8
c001fd04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fd08:	50                   	push   eax
c001fd09:	e8 44 3b ff ff       	call   c0013852 <Device::Device(char const*)>
c001fd0e:	83 c4 10             	add    esp,0x10
c001fd11:	ba 5c 8c 02 c0       	mov    edx,0xc0028c5c
c001fd16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd1a:	89 10                	mov    DWORD PTR [eax],edx
c001fd1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd20:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fd2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd2e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fd38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd40:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd45:	7f 19                	jg     c001fd60 <SoundDevice::SoundDevice(char const*)+0x66>
c001fd47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd4f:	83 c2 54             	add    edx,0x54
c001fd52:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fd5a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd5e:	eb e0                	jmp    c001fd40 <SoundDevice::SoundDevice(char const*)+0x46>
c001fd60:	90                   	nop
c001fd61:	83 c4 1c             	add    esp,0x1c
c001fd64:	c3                   	ret    
c001fd65:	90                   	nop

c001fd66 <SoundDevice::~SoundDevice()>:
c001fd66:	53                   	push   ebx
c001fd67:	83 ec 18             	sub    esp,0x18
c001fd6a:	ba 5c 8c 02 c0       	mov    edx,0xc0028c5c
c001fd6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd73:	89 10                	mov    DWORD PTR [eax],edx
c001fd75:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd7d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd82:	7f 46                	jg     c001fdca <SoundDevice::~SoundDevice()+0x64>
c001fd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd8c:	83 c2 54             	add    edx,0x54
c001fd8f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fd93:	85 c0                	test   eax,eax
c001fd95:	74 2d                	je     c001fdc4 <SoundDevice::~SoundDevice()+0x5e>
c001fd97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd9f:	83 c2 54             	add    edx,0x54
c001fda2:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fda6:	85 db                	test   ebx,ebx
c001fda8:	74 1a                	je     c001fdc4 <SoundDevice::~SoundDevice()+0x5e>
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	53                   	push   ebx
c001fdae:	e8 21 fc ff ff       	call   c001f9d4 <SoundChannel::~SoundChannel()>
c001fdb3:	83 c4 10             	add    esp,0x10
c001fdb6:	83 ec 08             	sub    esp,0x8
c001fdb9:	6a 2c                	push   0x2c
c001fdbb:	53                   	push   ebx
c001fdbc:	e8 b6 23 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001fdc1:	83 c4 10             	add    esp,0x10
c001fdc4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fdc8:	eb b3                	jmp    c001fd7d <SoundDevice::~SoundDevice()+0x17>
c001fdca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	50                   	push   eax
c001fdd2:	e8 2d 37 ff ff       	call   c0013504 <Device::~Device()>
c001fdd7:	83 c4 10             	add    esp,0x10
c001fdda:	90                   	nop
c001fddb:	83 c4 18             	add    esp,0x18
c001fdde:	5b                   	pop    ebx
c001fddf:	c3                   	ret    

c001fde0 <SoundDevice::~SoundDevice()>:
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	83 ec 0c             	sub    esp,0xc
c001fde6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdea:	e8 77 ff ff ff       	call   c001fd66 <SoundDevice::~SoundDevice()>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	83 ec 08             	sub    esp,0x8
c001fdf5:	68 e4 01 00 00       	push   0x1e4
c001fdfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfe:	e8 74 23 ff ff       	call   c0012177 <operator delete(void*, unsigned long)>
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	83 c4 0c             	add    esp,0xc
c001fe09:	c3                   	ret    

c001fe0a <SoundDevice::getFreeChannelNum()>:
c001fe0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fe0e:	31 c0                	xor    eax,eax
c001fe10:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fe18:	74 09                	je     c001fe23 <SoundDevice::getFreeChannelNum()+0x19>
c001fe1a:	40                   	inc    eax
c001fe1b:	83 f8 20             	cmp    eax,0x20
c001fe1e:	75 f0                	jne    c001fe10 <SoundDevice::getFreeChannelNum()+0x6>
c001fe20:	83 c8 ff             	or     eax,0xffffffff
c001fe23:	c3                   	ret    

c001fe24 <SoundDevice::addChannel(SoundChannel*)>:
c001fe24:	56                   	push   esi
c001fe25:	53                   	push   ebx
c001fe26:	51                   	push   ecx
c001fe27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fe2f:	53                   	push   ebx
c001fe30:	e8 d5 ff ff ff       	call   c001fe0a <SoundDevice::getFreeChannelNum()>
c001fe35:	5a                   	pop    edx
c001fe36:	83 f8 ff             	cmp    eax,0xffffffff
c001fe39:	74 51                	je     c001fe8c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe3b:	85 f6                	test   esi,esi
c001fe3d:	74 4d                	je     c001fe8c <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe3f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fe46:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fe4d:	75 30                	jne    c001fe7f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	56                   	push   esi
c001fe53:	e8 42 fd ff ff       	call   c001fb9a <SoundChannel::getSampleRate()>
c001fe58:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fe5e:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe61:	e8 3c fd ff ff       	call   c001fba2 <SoundChannel::getBits()>
c001fe66:	83 c4 0c             	add    esp,0xc
c001fe69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fe6f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fe71:	50                   	push   eax
c001fe72:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fe78:	53                   	push   ebx
c001fe79:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fe7c:	83 c4 10             	add    esp,0x10
c001fe7f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fe85:	b8 01 00 00 00       	mov    eax,0x1
c001fe8a:	eb 03                	jmp    c001fe8f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fe8c:	83 c8 ff             	or     eax,0xffffffff
c001fe8f:	5a                   	pop    edx
c001fe90:	5b                   	pop    ebx
c001fe91:	5e                   	pop    esi
c001fe92:	c3                   	ret    
c001fe93:	90                   	nop

c001fe94 <SoundDevice::removeChannel(int)>:
c001fe94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe9c:	83 fa 1f             	cmp    edx,0x1f
c001fe9f:	77 23                	ja     c001fec4 <SoundDevice::removeChannel(int)+0x30>
c001fea1:	8d 14 90             	lea    edx,[eax+edx*4]
c001fea4:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001feab:	74 17                	je     c001fec4 <SoundDevice::removeChannel(int)+0x30>
c001fead:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001feb7:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001febd:	75 05                	jne    c001fec4 <SoundDevice::removeChannel(int)+0x30>
c001febf:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec1:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001fec4:	c3                   	ret    
c001fec5:	90                   	nop

c001fec6 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001fec6:	57                   	push   edi
c001fec7:	56                   	push   esi
c001fec8:	53                   	push   ebx
c001fec9:	31 db                	xor    ebx,ebx
c001fecb:	83 ec 10             	sub    esp,0x10
c001fece:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001fed2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001fed6:	0f 8d cb 00 00 00    	jge    c001ffa7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001fedc:	83 ec 0c             	sub    esp,0xc
c001fedf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fee3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001fee6:	e8 8c 50 00 00       	call   c0024f77 <__extendsfdf2>
c001feeb:	83 c4 10             	add    esp,0x10
c001feee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fef2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fef6:	68 00 00 f0 3f       	push   0x3ff00000
c001fefb:	6a 00                	push   0x0
c001fefd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff05:	e8 f9 3f 00 00       	call   c0023f03 <__adddf3>
c001ff0a:	83 c4 10             	add    esp,0x10
c001ff0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff11:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff15:	68 00 00 e0 3f       	push   0x3fe00000
c001ff1a:	6a 00                	push   0x0
c001ff1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff24:	e8 57 46 00 00       	call   c0024580 <__muldf3>
c001ff29:	83 c4 10             	add    esp,0x10
c001ff2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff34:	68 00 00 60 40       	push   0x40600000
c001ff39:	6a 00                	push   0x0
c001ff3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff43:	e8 38 46 00 00       	call   c0024580 <__muldf3>
c001ff48:	59                   	pop    ecx
c001ff49:	5f                   	pop    edi
c001ff4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ff52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff5a:	e8 f4 4e 00 00       	call   c0024e53 <__truncdfsf2>
c001ff5f:	5a                   	pop    edx
c001ff60:	89 c7                	mov    edi,eax
c001ff62:	59                   	pop    ecx
c001ff63:	68 00 00 fe 42       	push   0x42fe0000
c001ff68:	50                   	push   eax
c001ff69:	e8 8f 3f 00 00       	call   c0023efd <__gesf2>
c001ff6e:	83 c4 10             	add    esp,0x10
c001ff71:	85 c0                	test   eax,eax
c001ff73:	78 06                	js     c001ff7b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001ff75:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ff79:	eb 26                	jmp    c001ffa1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff7b:	50                   	push   eax
c001ff7c:	50                   	push   eax
c001ff7d:	6a 00                	push   0x0
c001ff7f:	57                   	push   edi
c001ff80:	e8 7c 3f 00 00       	call   c0023f01 <__lesf2>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	85 c0                	test   eax,eax
c001ff8a:	7f 06                	jg     c001ff92 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001ff8c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ff90:	eb 0f                	jmp    c001ffa1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff92:	83 ec 0c             	sub    esp,0xc
c001ff95:	57                   	push   edi
c001ff96:	e8 71 50 00 00       	call   c002500c <lrintf>
c001ff9b:	83 c4 10             	add    esp,0x10
c001ff9e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ffa1:	43                   	inc    ebx
c001ffa2:	e9 2b ff ff ff       	jmp    c001fed2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001ffa7:	83 c4 10             	add    esp,0x10
c001ffaa:	5b                   	pop    ebx
c001ffab:	5e                   	pop    esi
c001ffac:	5f                   	pop    edi
c001ffad:	c3                   	ret    

c001ffae <SoundDevice::getAudio(int, float*, float*)>:
c001ffae:	55                   	push   ebp
c001ffaf:	57                   	push   edi
c001ffb0:	56                   	push   esi
c001ffb1:	53                   	push   ebx
c001ffb2:	31 db                	xor    ebx,ebx
c001ffb4:	83 ec 20             	sub    esp,0x20
c001ffb7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffbb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ffbf:	c1 e0 02             	shl    eax,0x2
c001ffc2:	50                   	push   eax
c001ffc3:	6a 00                	push   0x0
c001ffc5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffc9:	e8 1e 07 fe ff       	call   c00006ec <memset>
c001ffce:	83 c4 10             	add    esp,0x10
c001ffd1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ffd5:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ffdc:	85 c0                	test   eax,eax
c001ffde:	0f 84 d7 00 00 00    	je     c00200bb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffe4:	83 ec 0c             	sub    esp,0xc
c001ffe7:	50                   	push   eax
c001ffe8:	e8 a5 fb ff ff       	call   c001fb92 <SoundChannel::paused()>
c001ffed:	83 c4 10             	add    esp,0x10
c001fff0:	84 c0                	test   al,al
c001fff2:	0f 85 c3 00 00 00    	jne    c00200bb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020002:	e8 19 fa ff ff       	call   c001fa20 <SoundChannel::getVolume()>
c0020007:	83 c4 10             	add    esp,0x10
c002000a:	85 c0                	test   eax,eax
c002000c:	0f 84 a9 00 00 00    	je     c00200bb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020012:	83 ec 0c             	sub    esp,0xc
c0020015:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002001c:	e8 ff f9 ff ff       	call   c001fa20 <SoundChannel::getVolume()>
c0020021:	83 ec 0c             	sub    esp,0xc
c0020024:	50                   	push   eax
c0020025:	e8 7d 3c 00 00       	call   c0023ca7 <__floatsisf>
c002002a:	59                   	pop    ecx
c002002b:	5d                   	pop    ebp
c002002c:	31 ed                	xor    ebp,ebp
c002002e:	68 00 00 c8 42       	push   0x42c80000
c0020033:	50                   	push   eax
c0020034:	e8 43 3a 00 00       	call   c0023a7c <__divsf3>
c0020039:	83 c4 10             	add    esp,0x10
c002003c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020040:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020044:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002004a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002004e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020055:	e8 60 fb ff ff       	call   c001fbba <SoundChannel::unbuffer(float*, int, int)>
c002005a:	83 c4 20             	add    esp,0x20
c002005d:	89 c1                	mov    ecx,eax
c002005f:	39 cd                	cmp    ebp,ecx
c0020061:	7d 52                	jge    c00200b5 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020063:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020067:	50                   	push   eax
c0020068:	50                   	push   eax
c0020069:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002006d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020070:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020074:	e8 40 38 00 00       	call   c00238b9 <__mulsf3>
c0020079:	5a                   	pop    edx
c002007a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002007e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020084:	e8 1e 3c 00 00       	call   c0023ca7 <__floatsisf>
c0020089:	59                   	pop    ecx
c002008a:	5a                   	pop    edx
c002008b:	50                   	push   eax
c002008c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020090:	e8 e7 39 00 00       	call   c0023a7c <__divsf3>
c0020095:	59                   	pop    ecx
c0020096:	5a                   	pop    edx
c0020097:	50                   	push   eax
c0020098:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002009c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002009f:	e8 f2 34 00 00       	call   c0023596 <__addsf3>
c00200a4:	83 c4 10             	add    esp,0x10
c00200a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00200ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00200af:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00200b2:	45                   	inc    ebp
c00200b3:	eb aa                	jmp    c002005f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00200b5:	39 cf                	cmp    edi,ecx
c00200b7:	7e 02                	jle    c00200bb <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00200b9:	89 cf                	mov    edi,ecx
c00200bb:	43                   	inc    ebx
c00200bc:	83 fb 20             	cmp    ebx,0x20
c00200bf:	0f 85 10 ff ff ff    	jne    c001ffd5 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00200c5:	83 c4 1c             	add    esp,0x1c
c00200c8:	89 f8                	mov    eax,edi
c00200ca:	5b                   	pop    ebx
c00200cb:	5e                   	pop    esi
c00200cc:	5f                   	pop    edi
c00200cd:	5d                   	pop    ebp
c00200ce:	c3                   	ret    
c00200cf:	90                   	nop

c00200d0 <PCI::open(int, int, void*)>:
c00200d0:	83 ec 18             	sub    esp,0x18
c00200d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00200d9:	50                   	push   eax
c00200da:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00200dd:	31 c0                	xor    eax,eax
c00200df:	83 c4 1c             	add    esp,0x1c
c00200e2:	c3                   	ret    
c00200e3:	90                   	nop

c00200e4 <PCI::close(int, int, void*)>:
c00200e4:	31 c0                	xor    eax,eax
c00200e6:	c3                   	ret    
c00200e7:	90                   	nop

c00200e8 <PCI::PCI()>:
c00200e8:	83 ec 0c             	sub    esp,0xc
c00200eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ef:	83 ec 08             	sub    esp,0x8
c00200f2:	68 8c 8c 02 c0       	push   0xc0028c8c
c00200f7:	50                   	push   eax
c00200f8:	e8 e1 2d ff ff       	call   c0012ede <Bus::Bus(char const*)>
c00200fd:	83 c4 10             	add    esp,0x10
c0020100:	ba 18 8d 02 c0       	mov    edx,0xc0028d18
c0020105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020109:	89 10                	mov    DWORD PTR [eax],edx
c002010b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020115:	0f b6 d0             	movzx  edx,al
c0020118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020127:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002012d:	0f b6 d0             	movzx  edx,al
c0020130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020134:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020143:	8d 50 01             	lea    edx,[eax+0x1]
c0020146:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002014a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020150:	0f b6 d0             	movzx  edx,al
c0020153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020157:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002015b:	83 c9 c0             	or     ecx,0xffffffc0
c002015e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020162:	90                   	nop
c0020163:	83 c4 0c             	add    esp,0xc
c0020166:	c3                   	ret    
c0020167:	90                   	nop

c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020168:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002016c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020171:	89 ca                	mov    edx,ecx
c0020173:	c1 e0 10             	shl    eax,0x10
c0020176:	81 e2 fc 00 00 00    	and    edx,0xfc
c002017c:	09 d0                	or     eax,edx
c002017e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020183:	c1 e2 08             	shl    edx,0x8
c0020186:	09 d0                	or     eax,edx
c0020188:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002018d:	c1 e2 0b             	shl    edx,0xb
c0020190:	09 d0                	or     eax,edx
c0020192:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020197:	0d 00 00 00 80       	or     eax,0x80000000
c002019c:	ef                   	out    dx,eax
c002019d:	ba fc 0c 00 00       	mov    edx,0xcfc
c00201a2:	ed                   	in     eax,dx
c00201a3:	83 e1 02             	and    ecx,0x2
c00201a6:	0f b6 c9             	movzx  ecx,cl
c00201a9:	c1 e1 03             	shl    ecx,0x3
c00201ac:	d3 e8                	shr    eax,cl
c00201ae:	c3                   	ret    
c00201af:	90                   	nop

c00201b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00201b0:	6a 00                	push   0x0
c00201b2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201b7:	50                   	push   eax
c00201b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201bd:	50                   	push   eax
c00201be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201c3:	50                   	push   eax
c00201c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201c8:	e8 9b ff ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201cd:	83 c4 14             	add    esp,0x14
c00201d0:	c3                   	ret    
c00201d1:	90                   	nop

c00201d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00201d2:	6a 0e                	push   0xe
c00201d4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201d9:	50                   	push   eax
c00201da:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201df:	50                   	push   eax
c00201e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201e5:	50                   	push   eax
c00201e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201ea:	e8 79 ff ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201ef:	83 c4 14             	add    esp,0x14
c00201f2:	0f b6 c0             	movzx  eax,al
c00201f5:	c3                   	ret    

c00201f6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00201f6:	55                   	push   ebp
c00201f7:	57                   	push   edi
c00201f8:	56                   	push   esi
c00201f9:	53                   	push   ebx
c00201fa:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00201ff:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0020204:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0020209:	6a 0a                	push   0xa
c002020b:	56                   	push   esi
c002020c:	55                   	push   ebp
c002020d:	57                   	push   edi
c002020e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020212:	e8 51 ff ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020217:	6a 0a                	push   0xa
c0020219:	89 c3                	mov    ebx,eax
c002021b:	56                   	push   esi
c002021c:	0f b6 db             	movzx  ebx,bl
c002021f:	55                   	push   ebp
c0020220:	57                   	push   edi
c0020221:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020225:	e8 3e ff ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002022a:	83 c4 28             	add    esp,0x28
c002022d:	25 00 ff 00 00       	and    eax,0xff00
c0020232:	09 d8                	or     eax,ebx
c0020234:	5b                   	pop    ebx
c0020235:	5e                   	pop    esi
c0020236:	5f                   	pop    edi
c0020237:	5d                   	pop    ebp
c0020238:	c3                   	ret    
c0020239:	90                   	nop

c002023a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002023a:	6a 08                	push   0x8
c002023c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020241:	50                   	push   eax
c0020242:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020247:	50                   	push   eax
c0020248:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002024d:	50                   	push   eax
c002024e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020252:	e8 11 ff ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020257:	83 c4 14             	add    esp,0x14
c002025a:	0f b6 c4             	movzx  eax,ah
c002025d:	c3                   	ret    

c002025e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002025e:	6a 08                	push   0x8
c0020260:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020265:	50                   	push   eax
c0020266:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002026b:	50                   	push   eax
c002026c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020271:	50                   	push   eax
c0020272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020276:	e8 ed fe ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002027b:	83 c4 14             	add    esp,0x14
c002027e:	c3                   	ret    
c002027f:	90                   	nop

c0020280 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020280:	6a 3c                	push   0x3c
c0020282:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020287:	50                   	push   eax
c0020288:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002028d:	50                   	push   eax
c002028e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020293:	50                   	push   eax
c0020294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020298:	e8 cb fe ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002029d:	83 c4 14             	add    esp,0x14
c00202a0:	c3                   	ret    
c00202a1:	90                   	nop

c00202a2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00202a2:	6a 18                	push   0x18
c00202a4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202a9:	50                   	push   eax
c00202aa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202af:	50                   	push   eax
c00202b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00202b5:	50                   	push   eax
c00202b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00202ba:	e8 a9 fe ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202bf:	83 c4 14             	add    esp,0x14
c00202c2:	0f b6 c4             	movzx  eax,ah
c00202c5:	c3                   	ret    

c00202c6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00202c6:	55                   	push   ebp
c00202c7:	57                   	push   edi
c00202c8:	56                   	push   esi
c00202c9:	53                   	push   ebx
c00202ca:	50                   	push   eax
c00202cb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00202cf:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00202d4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00202d9:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00202de:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00202e5:	8d 43 12             	lea    eax,[ebx+0x12]
c00202e8:	83 c3 10             	add    ebx,0x10
c00202eb:	0f b6 c0             	movzx  eax,al
c00202ee:	0f b6 db             	movzx  ebx,bl
c00202f1:	50                   	push   eax
c00202f2:	51                   	push   ecx
c00202f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202f7:	57                   	push   edi
c00202f8:	55                   	push   ebp
c00202f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202fd:	e8 66 fe ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020302:	53                   	push   ebx
c0020303:	89 c6                	mov    esi,eax
c0020305:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020309:	c1 e6 10             	shl    esi,0x10
c002030c:	51                   	push   ecx
c002030d:	57                   	push   edi
c002030e:	55                   	push   ebp
c002030f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020313:	e8 50 fe ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020318:	83 c4 2c             	add    esp,0x2c
c002031b:	0f b7 c0             	movzx  eax,ax
c002031e:	5b                   	pop    ebx
c002031f:	09 f0                	or     eax,esi
c0020321:	5e                   	pop    esi
c0020322:	5f                   	pop    edi
c0020323:	5d                   	pop    ebp
c0020324:	c3                   	ret    
c0020325:	90                   	nop

c0020326 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020326:	53                   	push   ebx
c0020327:	ba f8 0c 00 00       	mov    edx,0xcf8
c002032c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020331:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020335:	c1 e1 10             	shl    ecx,0x10
c0020338:	25 fc 00 00 00       	and    eax,0xfc
c002033d:	09 c1                	or     ecx,eax
c002033f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020344:	c1 e0 08             	shl    eax,0x8
c0020347:	09 c1                	or     ecx,eax
c0020349:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002034e:	c1 e0 0b             	shl    eax,0xb
c0020351:	09 c1                	or     ecx,eax
c0020353:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020359:	89 c8                	mov    eax,ecx
c002035b:	ef                   	out    dx,eax
c002035c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020361:	ed                   	in     eax,dx
c0020362:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020367:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002036c:	74 0a                	je     c0020378 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002036e:	0f b7 d8             	movzx  ebx,ax
c0020371:	89 d0                	mov    eax,edx
c0020373:	c1 e0 10             	shl    eax,0x10
c0020376:	eb 05                	jmp    c002037d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020378:	66 31 c0             	xor    ax,ax
c002037b:	89 d3                	mov    ebx,edx
c002037d:	09 c3                	or     ebx,eax
c002037f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020384:	89 c8                	mov    eax,ecx
c0020386:	ef                   	out    dx,eax
c0020387:	ba fc 0c 00 00       	mov    edx,0xcfc
c002038c:	89 d8                	mov    eax,ebx
c002038e:	ef                   	out    dx,eax
c002038f:	5b                   	pop    ebx
c0020390:	c3                   	ret    
c0020391:	90                   	nop

c0020392 <PCI::checkBus(unsigned char)>:
c0020392:	56                   	push   esi
c0020393:	53                   	push   ebx
c0020394:	31 db                	xor    ebx,ebx
c0020396:	51                   	push   ecx
c0020397:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002039c:	52                   	push   edx
c002039d:	53                   	push   ebx
c002039e:	43                   	inc    ebx
c002039f:	56                   	push   esi
c00203a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a4:	e8 29 03 00 00       	call   c00206d2 <PCI::checkDevice(unsigned char, unsigned char)>
c00203a9:	83 c4 10             	add    esp,0x10
c00203ac:	83 fb 20             	cmp    ebx,0x20
c00203af:	75 eb                	jne    c002039c <PCI::checkBus(unsigned char)+0xa>
c00203b1:	58                   	pop    eax
c00203b2:	5b                   	pop    ebx
c00203b3:	5e                   	pop    esi
c00203b4:	c3                   	ret    
c00203b5:	90                   	nop

c00203b6 <PCI::foundDevice(PCIDeviceInfo)>:
c00203b6:	55                   	push   ebp
c00203b7:	57                   	push   edi
c00203b8:	56                   	push   esi
c00203b9:	53                   	push   ebx
c00203ba:	83 ec 1c             	sub    esp,0x1c
c00203bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00203c1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00203c7:	0f 84 51 01 00 00    	je     c002051e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00203cd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00203d1:	66 81 f9 06 04       	cmp    cx,0x406
c00203d6:	75 2c                	jne    c0020404 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00203d8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00203dd:	50                   	push   eax
c00203de:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00203e3:	50                   	push   eax
c00203e4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00203e9:	50                   	push   eax
c00203ea:	56                   	push   esi
c00203eb:	e8 b2 fe ff ff       	call   c00202a2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00203f0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203f4:	0f b6 c0             	movzx  eax,al
c00203f7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00203fb:	83 c4 2c             	add    esp,0x2c
c00203fe:	5b                   	pop    ebx
c00203ff:	5e                   	pop    esi
c0020400:	5f                   	pop    edi
c0020401:	5d                   	pop    ebp
c0020402:	eb 8e                	jmp    c0020392 <PCI::checkBus(unsigned char)>
c0020404:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020408:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002040e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020412:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020416:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c002041a:	88 d3                	mov    bl,dl
c002041c:	85 c0                	test   eax,eax
c002041e:	74 33                	je     c0020453 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0020420:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020423:	85 d2                	test   edx,edx
c0020425:	74 28                	je     c002044f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020427:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002042d:	31 ef                	xor    edi,ebp
c002042f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020435:	75 18                	jne    c002044f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020437:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002043b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020441:	75 0c                	jne    c002044f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020443:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0020449:	0f 84 cf 00 00 00    	je     c002051e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c002044f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020451:	eb c9                	jmp    c002041c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020453:	66 81 f9 01 06       	cmp    cx,0x601
c0020458:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002045c:	75 18                	jne    c0020476 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c002045e:	83 ec 0c             	sub    esp,0xc
c0020461:	68 58 01 00 00       	push   0x158
c0020466:	e8 fd 1c ff ff       	call   c0012168 <operator new(unsigned long)>
c002046b:	59                   	pop    ecx
c002046c:	89 c5                	mov    ebp,eax
c002046e:	5f                   	pop    edi
c002046f:	68 94 8c 02 c0       	push   0xc0028c94
c0020474:	eb 7d                	jmp    c00204f3 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c0020476:	66 81 f9 01 01       	cmp    cx,0x101
c002047b:	75 60                	jne    c00204dd <PCI::foundDevice(PCIDeviceInfo)+0x127>
c002047d:	83 ec 0c             	sub    esp,0xc
c0020480:	68 70 02 00 00       	push   0x270
c0020485:	e8 de 1c ff ff       	call   c0012168 <operator new(unsigned long)>
c002048a:	89 04 24             	mov    DWORD PTR [esp],eax
c002048d:	89 c5                	mov    ebp,eax
c002048f:	e8 02 03 00 00       	call   c0020796 <IDE::IDE()>
c0020494:	58                   	pop    eax
c0020495:	5a                   	pop    edx
c0020496:	55                   	push   ebp
c0020497:	56                   	push   esi
c0020498:	e8 c5 31 ff ff       	call   c0013662 <Device::addChild(Device*)>
c002049d:	83 ec 1c             	sub    esp,0x1c
c00204a0:	b9 09 00 00 00       	mov    ecx,0x9
c00204a5:	fc                   	cld    
c00204a6:	89 e7                	mov    edi,esp
c00204a8:	89 de                	mov    esi,ebx
c00204aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204ac:	55                   	push   ebp
c00204ad:	e8 8a 30 ff ff       	call   c001353c <Device::preOpenPCI(PCIDeviceInfo)>
c00204b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00204b5:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00204b9:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00204c1:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00204c9:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00204d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204d4:	83 c4 4c             	add    esp,0x4c
c00204d7:	5b                   	pop    ebx
c00204d8:	5e                   	pop    esi
c00204d9:	5f                   	pop    edi
c00204da:	5d                   	pop    ebp
c00204db:	ff e0                	jmp    eax
c00204dd:	83 ec 0c             	sub    esp,0xc
c00204e0:	68 58 01 00 00       	push   0x158
c00204e5:	e8 7e 1c ff ff       	call   c0012168 <operator new(unsigned long)>
c00204ea:	59                   	pop    ecx
c00204eb:	89 c5                	mov    ebp,eax
c00204ed:	5f                   	pop    edi
c00204ee:	68 b3 8c 02 c0       	push   0xc0028cb3
c00204f3:	55                   	push   ebp
c00204f4:	e8 55 34 ff ff       	call   c001394e <DriverlessDevice::DriverlessDevice(char const*)>
c00204f9:	58                   	pop    eax
c00204fa:	5a                   	pop    edx
c00204fb:	55                   	push   ebp
c00204fc:	56                   	push   esi
c00204fd:	e8 60 31 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0020502:	b9 09 00 00 00       	mov    ecx,0x9
c0020507:	fc                   	cld    
c0020508:	89 df                	mov    edi,ebx
c002050a:	89 de                	mov    esi,ebx
c002050c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002050e:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0020512:	83 c4 2c             	add    esp,0x2c
c0020515:	5b                   	pop    ebx
c0020516:	5e                   	pop    esi
c0020517:	5f                   	pop    edi
c0020518:	5d                   	pop    ebp
c0020519:	e9 1e 30 ff ff       	jmp    c001353c <Device::preOpenPCI(PCIDeviceInfo)>
c002051e:	83 c4 1c             	add    esp,0x1c
c0020521:	5b                   	pop    ebx
c0020522:	5e                   	pop    esi
c0020523:	5f                   	pop    edi
c0020524:	5d                   	pop    ebp
c0020525:	c3                   	ret    

c0020526 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0020526:	55                   	push   ebp
c0020527:	57                   	push   edi
c0020528:	56                   	push   esi
c0020529:	53                   	push   ebx
c002052a:	83 ec 5c             	sub    esp,0x5c
c002052d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0020531:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020535:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0020539:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002053e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020542:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0020546:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002054b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002054f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020554:	6a 0c                	push   0xc
c0020556:	55                   	push   ebp
c0020557:	53                   	push   ebx
c0020558:	57                   	push   edi
c0020559:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020560:	e8 03 fc ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020565:	55                   	push   ebp
c0020566:	53                   	push   ebx
c0020567:	57                   	push   edi
c0020568:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002056f:	e8 82 fc ff ff       	call   c00201f6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020574:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0020579:	83 c4 24             	add    esp,0x24
c002057c:	55                   	push   ebp
c002057d:	53                   	push   ebx
c002057e:	57                   	push   edi
c002057f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020583:	e8 f8 fc ff ff       	call   c0020280 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0020588:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002058c:	6a 3c                	push   0x3c
c002058e:	55                   	push   ebp
c002058f:	53                   	push   ebx
c0020590:	57                   	push   edi
c0020591:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020598:	e8 cb fb ff ff       	call   c0020168 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002059d:	0f b6 c4             	movzx  eax,ah
c00205a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00205a4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00205a8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00205ac:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00205b1:	83 c4 24             	add    esp,0x24
c00205b4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00205ba:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c00205c1:	74 6c                	je     c002062f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205c3:	31 f6                	xor    esi,esi
c00205c5:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205cb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205d1:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00205d7:	7e 56                	jle    c002062f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205d9:	8d 14 f2             	lea    edx,[edx+esi*8]
c00205dc:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00205e3:	39 cb                	cmp    ebx,ecx
c00205e5:	75 45                	jne    c002062c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205e7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00205ee:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00205f2:	75 38                	jne    c002062c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205f4:	83 ec 0c             	sub    esp,0xc
c00205f7:	68 cd 8c 02 c0       	push   0xc0028ccd
c00205fc:	e8 56 1c ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0020601:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0020607:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002060d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0020615:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0020619:	52                   	push   edx
c002061a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002061e:	53                   	push   ebx
c002061f:	68 f2 8c 02 c0       	push   0xc0028cf2
c0020624:	e8 2e 1c ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0020629:	83 c4 20             	add    esp,0x20
c002062c:	46                   	inc    esi
c002062d:	eb 96                	jmp    c00205c5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002062f:	31 d2                	xor    edx,edx
c0020631:	83 ec 0c             	sub    esp,0xc
c0020634:	55                   	push   ebp
c0020635:	53                   	push   ebx
c0020636:	57                   	push   edi
c0020637:	52                   	push   edx
c0020638:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002063c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020643:	e8 7e fc ff ff       	call   c00202c6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020648:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002064c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020650:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020654:	42                   	inc    edx
c0020655:	83 c4 20             	add    esp,0x20
c0020658:	83 fa 06             	cmp    edx,0x6
c002065b:	75 d4                	jne    c0020631 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002065d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020661:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020665:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0020669:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002066d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020671:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020675:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002067a:	86 e0                	xchg   al,ah
c002067c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020681:	55                   	push   ebp
c0020682:	53                   	push   ebx
c0020683:	57                   	push   edi
c0020684:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020688:	e8 ad fb ff ff       	call   c002023a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002068d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020691:	55                   	push   ebp
c0020692:	53                   	push   ebx
c0020693:	57                   	push   edi
c0020694:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002069b:	e8 10 fb ff ff       	call   c00201b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206a0:	83 ec 0c             	sub    esp,0xc
c00206a3:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00206a8:	b9 09 00 00 00       	mov    ecx,0x9
c00206ad:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00206b1:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00206b5:	fc                   	cld    
c00206b6:	89 e7                	mov    edi,esp
c00206b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00206ba:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00206c1:	e8 f0 fc ff ff       	call   c00203b6 <PCI::foundDevice(PCIDeviceInfo)>
c00206c6:	81 c4 8c 00 00 00    	add    esp,0x8c
c00206cc:	5b                   	pop    ebx
c00206cd:	5e                   	pop    esi
c00206ce:	5f                   	pop    edi
c00206cf:	5d                   	pop    ebp
c00206d0:	c3                   	ret    
c00206d1:	90                   	nop

c00206d2 <PCI::checkDevice(unsigned char, unsigned char)>:
c00206d2:	55                   	push   ebp
c00206d3:	57                   	push   edi
c00206d4:	56                   	push   esi
c00206d5:	53                   	push   ebx
c00206d6:	83 ec 0c             	sub    esp,0xc
c00206d9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00206dd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00206e2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00206e7:	6a 00                	push   0x0
c00206e9:	56                   	push   esi
c00206ea:	57                   	push   edi
c00206eb:	55                   	push   ebp
c00206ec:	e8 bf fa ff ff       	call   c00201b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206f1:	6a 00                	push   0x0
c00206f3:	56                   	push   esi
c00206f4:	57                   	push   edi
c00206f5:	55                   	push   ebp
c00206f6:	e8 2b fe ff ff       	call   c0020526 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206fb:	83 c4 20             	add    esp,0x20
c00206fe:	6a 00                	push   0x0
c0020700:	56                   	push   esi
c0020701:	57                   	push   edi
c0020702:	55                   	push   ebp
c0020703:	e8 ca fa ff ff       	call   c00201d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020708:	83 c4 10             	add    esp,0x10
c002070b:	84 c0                	test   al,al
c002070d:	79 27                	jns    c0020736 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002070f:	bb 01 00 00 00       	mov    ebx,0x1
c0020714:	53                   	push   ebx
c0020715:	56                   	push   esi
c0020716:	57                   	push   edi
c0020717:	55                   	push   ebp
c0020718:	e8 93 fa ff ff       	call   c00201b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002071d:	83 c4 10             	add    esp,0x10
c0020720:	66 40                	inc    ax
c0020722:	74 0c                	je     c0020730 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020724:	53                   	push   ebx
c0020725:	56                   	push   esi
c0020726:	57                   	push   edi
c0020727:	55                   	push   ebp
c0020728:	e8 f9 fd ff ff       	call   c0020526 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002072d:	83 c4 10             	add    esp,0x10
c0020730:	43                   	inc    ebx
c0020731:	83 fb 08             	cmp    ebx,0x8
c0020734:	75 de                	jne    c0020714 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0020736:	83 c4 0c             	add    esp,0xc
c0020739:	5b                   	pop    ebx
c002073a:	5e                   	pop    esi
c002073b:	5f                   	pop    edi
c002073c:	5d                   	pop    ebp
c002073d:	c3                   	ret    

c002073e <PCI::detect()>:
c002073e:	56                   	push   esi
c002073f:	53                   	push   ebx
c0020740:	53                   	push   ebx
c0020741:	31 db                	xor    ebx,ebx
c0020743:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020747:	6a 00                	push   0x0
c0020749:	6a 00                	push   0x0
c002074b:	6a 00                	push   0x0
c002074d:	56                   	push   esi
c002074e:	e8 7f fa ff ff       	call   c00201d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020753:	83 c4 10             	add    esp,0x10
c0020756:	a8 80                	test   al,0x80
c0020758:	75 21                	jne    c002077b <PCI::detect()+0x3d>
c002075a:	51                   	push   ecx
c002075b:	51                   	push   ecx
c002075c:	6a 00                	push   0x0
c002075e:	56                   	push   esi
c002075f:	e8 2e fc ff ff       	call   c0020392 <PCI::checkBus(unsigned char)>
c0020764:	83 c4 10             	add    esp,0x10
c0020767:	eb 24                	jmp    c002078d <PCI::detect()+0x4f>
c0020769:	52                   	push   edx
c002076a:	52                   	push   edx
c002076b:	53                   	push   ebx
c002076c:	43                   	inc    ebx
c002076d:	56                   	push   esi
c002076e:	e8 1f fc ff ff       	call   c0020392 <PCI::checkBus(unsigned char)>
c0020773:	83 c4 10             	add    esp,0x10
c0020776:	83 fb 08             	cmp    ebx,0x8
c0020779:	74 12                	je     c002078d <PCI::detect()+0x4f>
c002077b:	53                   	push   ebx
c002077c:	6a 00                	push   0x0
c002077e:	6a 00                	push   0x0
c0020780:	56                   	push   esi
c0020781:	e8 2a fa ff ff       	call   c00201b0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020786:	83 c4 10             	add    esp,0x10
c0020789:	66 40                	inc    ax
c002078b:	74 dc                	je     c0020769 <PCI::detect()+0x2b>
c002078d:	58                   	pop    eax
c002078e:	5b                   	pop    ebx
c002078f:	5e                   	pop    esi
c0020790:	c3                   	ret    
c0020791:	90                   	nop

c0020792 <IDE::close(int, int, void*)>:
c0020792:	83 c8 ff             	or     eax,0xffffffff
c0020795:	c3                   	ret    

c0020796 <IDE::IDE()>:
c0020796:	83 ec 0c             	sub    esp,0xc
c0020799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002079d:	83 ec 08             	sub    esp,0x8
c00207a0:	68 3c 8d 02 c0       	push   0xc0028d3c
c00207a5:	50                   	push   eax
c00207a6:	e8 39 32 ff ff       	call   c00139e4 <HardDiskController::HardDiskController(char const*)>
c00207ab:	83 c4 10             	add    esp,0x10
c00207ae:	ba 7c 8f 02 c0       	mov    edx,0xc0028f7c
c00207b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207b7:	89 10                	mov    DWORD PTR [eax],edx
c00207b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207bd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00207c4:	90                   	nop
c00207c5:	83 c4 0c             	add    esp,0xc
c00207c8:	c3                   	ret    
c00207c9:	90                   	nop

c00207ca <IDE::prepareInterrupt(unsigned char)>:
c00207ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00207d3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00207db:	c3                   	ret    

c00207dc <selectDrive(unsigned char, unsigned char)>:
c00207dc:	c3                   	ret    
c00207dd:	90                   	nop

c00207de <IDE::getBase(unsigned char)>:
c00207de:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00207e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207e7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00207ef:	c3                   	ret    

c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00207f0:	55                   	push   ebp
c00207f1:	57                   	push   edi
c00207f2:	56                   	push   esi
c00207f3:	53                   	push   ebx
c00207f4:	83 ec 1c             	sub    esp,0x1c
c00207f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00207fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00207ff:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0020802:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0020806:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002080a:	80 f9 03             	cmp    cl,0x3
c002080d:	77 51                	ja     c0020860 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002080f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020813:	0f b6 f2             	movzx  esi,dl
c0020816:	0f b6 db             	movzx  ebx,bl
c0020819:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002081c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0020820:	83 ca 80             	or     edx,0xffffff80
c0020823:	0f b6 d2             	movzx  edx,dl
c0020826:	52                   	push   edx
c0020827:	6a 0c                	push   0xc
c0020829:	56                   	push   esi
c002082a:	57                   	push   edi
c002082b:	e8 c0 ff ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020830:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020839:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002083d:	ee                   	out    dx,al
c002083e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020843:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0020847:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002084b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002084f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020857:	83 c4 2c             	add    esp,0x2c
c002085a:	5b                   	pop    ebx
c002085b:	5e                   	pop    esi
c002085c:	5f                   	pop    edi
c002085d:	5d                   	pop    ebp
c002085e:	eb 90                	jmp    c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020860:	80 fb 07             	cmp    bl,0x7
c0020863:	77 12                	ja     c0020877 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020865:	0f b6 d2             	movzx  edx,dl
c0020868:	0f b6 db             	movzx  ebx,bl
c002086b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020873:	89 da                	mov    edx,ebx
c0020875:	eb 2f                	jmp    c00208a6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020877:	80 fb 0d             	cmp    bl,0xd
c002087a:	77 13                	ja     c002088f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002087c:	0f b6 d2             	movzx  edx,dl
c002087f:	0f b6 db             	movzx  ebx,bl
c0020882:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0020889:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002088d:	eb 17                	jmp    c00208a6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002088f:	80 fb 15             	cmp    bl,0x15
c0020892:	77 13                	ja     c00208a7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020894:	0f b6 d2             	movzx  edx,dl
c0020897:	0f b6 db             	movzx  ebx,bl
c002089a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00208a2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00208a6:	ee                   	out    dx,al
c00208a7:	83 c4 1c             	add    esp,0x1c
c00208aa:	5b                   	pop    ebx
c00208ab:	5e                   	pop    esi
c00208ac:	5f                   	pop    edi
c00208ad:	5d                   	pop    ebp
c00208ae:	c3                   	ret    
c00208af:	90                   	nop

c00208b0 <IDE::read(unsigned char, unsigned char)>:
c00208b0:	55                   	push   ebp
c00208b1:	57                   	push   edi
c00208b2:	56                   	push   esi
c00208b3:	53                   	push   ebx
c00208b4:	83 ec 1c             	sub    esp,0x1c
c00208b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00208bb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00208bf:	8d 43 f8             	lea    eax,[ebx-0x8]
c00208c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00208c6:	3c 03                	cmp    al,0x3
c00208c8:	77 43                	ja     c002090d <IDE::read(unsigned char, unsigned char)+0x5d>
c00208ca:	0f b6 f2             	movzx  esi,dl
c00208cd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00208d0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00208d4:	83 c8 80             	or     eax,0xffffff80
c00208d7:	0f b6 c0             	movzx  eax,al
c00208da:	50                   	push   eax
c00208db:	6a 0c                	push   0xc
c00208dd:	56                   	push   esi
c00208de:	57                   	push   edi
c00208df:	e8 0c ff ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208e4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00208e9:	0f b6 c3             	movzx  eax,bl
c00208ec:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00208f0:	ec                   	in     al,dx
c00208f1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00208f5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00208fa:	52                   	push   edx
c00208fb:	6a 0c                	push   0xc
c00208fd:	56                   	push   esi
c00208fe:	57                   	push   edi
c00208ff:	e8 ec fe ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020904:	83 c4 20             	add    esp,0x20
c0020907:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002090b:	eb 49                	jmp    c0020956 <IDE::read(unsigned char, unsigned char)+0xa6>
c002090d:	80 fb 07             	cmp    bl,0x7
c0020910:	77 12                	ja     c0020924 <IDE::read(unsigned char, unsigned char)+0x74>
c0020912:	0f b6 d2             	movzx  edx,dl
c0020915:	0f b6 c3             	movzx  eax,bl
c0020918:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0020920:	89 c2                	mov    edx,eax
c0020922:	eb 31                	jmp    c0020955 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020924:	80 fb 0d             	cmp    bl,0xd
c0020927:	77 13                	ja     c002093c <IDE::read(unsigned char, unsigned char)+0x8c>
c0020929:	0f b6 d2             	movzx  edx,dl
c002092c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020933:	0f b6 d3             	movzx  edx,bl
c0020936:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002093a:	eb 19                	jmp    c0020955 <IDE::read(unsigned char, unsigned char)+0xa5>
c002093c:	31 c0                	xor    eax,eax
c002093e:	80 fb 15             	cmp    bl,0x15
c0020941:	77 13                	ja     c0020956 <IDE::read(unsigned char, unsigned char)+0xa6>
c0020943:	0f b6 d2             	movzx  edx,dl
c0020946:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002094e:	0f b6 d3             	movzx  edx,bl
c0020951:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020955:	ec                   	in     al,dx
c0020956:	83 c4 1c             	add    esp,0x1c
c0020959:	5b                   	pop    ebx
c002095a:	5e                   	pop    esi
c002095b:	5f                   	pop    edi
c002095c:	5d                   	pop    ebp
c002095d:	c3                   	ret    

c002095e <IDE::waitInterrupt(unsigned char)>:
c002095e:	55                   	push   ebp
c002095f:	57                   	push   edi
c0020960:	56                   	push   esi
c0020961:	53                   	push   ebx
c0020962:	31 db                	xor    ebx,ebx
c0020964:	83 ec 0c             	sub    esp,0xc
c0020967:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002096b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020970:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0020978:	89 e8                	mov    eax,ebp
c002097a:	84 c0                	test   al,al
c002097c:	75 34                	jne    c00209b2 <IDE::waitInterrupt(unsigned char)+0x54>
c002097e:	52                   	push   edx
c002097f:	6a 0c                	push   0xc
c0020981:	56                   	push   esi
c0020982:	57                   	push   edi
c0020983:	e8 28 ff ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020988:	83 c4 10             	add    esp,0x10
c002098b:	a8 01                	test   al,0x1
c002098d:	75 2b                	jne    c00209ba <IDE::waitInterrupt(unsigned char)+0x5c>
c002098f:	f6 c3 04             	test   bl,0x4
c0020992:	75 16                	jne    c00209aa <IDE::waitInterrupt(unsigned char)+0x4c>
c0020994:	83 fb 32             	cmp    ebx,0x32
c0020997:	7e 11                	jle    c00209aa <IDE::waitInterrupt(unsigned char)+0x4c>
c0020999:	50                   	push   eax
c002099a:	50                   	push   eax
c002099b:	6a 00                	push   0x0
c002099d:	68 80 96 98 00       	push   0x989680
c00209a2:	e8 f9 c3 ff ff       	call   c001cda0 <nanoSleep(unsigned long long)>
c00209a7:	83 c4 10             	add    esp,0x10
c00209aa:	83 fb 3c             	cmp    ebx,0x3c
c00209ad:	74 0b                	je     c00209ba <IDE::waitInterrupt(unsigned char)+0x5c>
c00209af:	43                   	inc    ebx
c00209b0:	eb be                	jmp    c0020970 <IDE::waitInterrupt(unsigned char)+0x12>
c00209b2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00209ba:	83 c4 0c             	add    esp,0xc
c00209bd:	89 e8                	mov    eax,ebp
c00209bf:	5b                   	pop    ebx
c00209c0:	5e                   	pop    esi
c00209c1:	5f                   	pop    edi
c00209c2:	5d                   	pop    ebp
c00209c3:	c3                   	ret    

c00209c4 <ideChannel0IRQHandler(regs*, void*)>:
c00209c4:	83 ec 10             	sub    esp,0x10
c00209c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209cb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00209d2:	6a 07                	push   0x7
c00209d4:	6a 00                	push   0x0
c00209d6:	50                   	push   eax
c00209d7:	e8 d4 fe ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c00209dc:	83 c4 1c             	add    esp,0x1c
c00209df:	c3                   	ret    

c00209e0 <ideChannel1IRQHandler(regs*, void*)>:
c00209e0:	83 ec 10             	sub    esp,0x10
c00209e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209e7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00209ee:	6a 07                	push   0x7
c00209f0:	6a 01                	push   0x1
c00209f2:	50                   	push   eax
c00209f3:	e8 b8 fe ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c00209f8:	83 c4 1c             	add    esp,0x1c
c00209fb:	c3                   	ret    

c00209fc <IDE::enableIRQs(unsigned char, bool)>:
c00209fc:	57                   	push   edi
c00209fd:	56                   	push   esi
c00209fe:	be 04 00 00 00       	mov    esi,0x4
c0020a03:	53                   	push   ebx
c0020a04:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0020a09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a0d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0020a12:	0f 94 c0             	sete   al
c0020a15:	d1 e0                	shl    eax,1
c0020a17:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020a1e:	0f b6 c0             	movzx  eax,al
c0020a21:	50                   	push   eax
c0020a22:	6a 0c                	push   0xc
c0020a24:	57                   	push   edi
c0020a25:	53                   	push   ebx
c0020a26:	e8 c5 fd ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020a2b:	83 c4 10             	add    esp,0x10
c0020a2e:	50                   	push   eax
c0020a2f:	6a 0c                	push   0xc
c0020a31:	57                   	push   edi
c0020a32:	53                   	push   ebx
c0020a33:	e8 78 fe ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020a38:	83 c4 10             	add    esp,0x10
c0020a3b:	4e                   	dec    esi
c0020a3c:	75 f0                	jne    c0020a2e <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020a3e:	5b                   	pop    ebx
c0020a3f:	5e                   	pop    esi
c0020a40:	5f                   	pop    edi
c0020a41:	c3                   	ret    

c0020a42 <IDE::open(int, int, void*)>:
c0020a42:	55                   	push   ebp
c0020a43:	57                   	push   edi
c0020a44:	56                   	push   esi
c0020a45:	53                   	push   ebx
c0020a46:	83 ec 1c             	sub    esp,0x1c
c0020a49:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a4d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020a56:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020a5f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020a66:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020a6d:	0f 85 b0 02 00 00    	jne    c0020d23 <IDE::open(int, int, void*)+0x2e1>
c0020a73:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020a79:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020a7d:	83 e0 7f             	and    eax,0x7f
c0020a80:	3c 05                	cmp    al,0x5
c0020a82:	74 04                	je     c0020a88 <IDE::open(int, int, void*)+0x46>
c0020a84:	3c 0f                	cmp    al,0xf
c0020a86:	75 32                	jne    c0020aba <IDE::open(int, int, void*)+0x78>
c0020a88:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020a8e:	83 e0 fc             	and    eax,0xfffffffc
c0020a91:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020a98:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020a9e:	83 e0 fc             	and    eax,0xfffffffc
c0020aa1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020aa8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020aae:	83 e0 fc             	and    eax,0xfffffffc
c0020ab1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020ab8:	eb 14                	jmp    c0020ace <IDE::open(int, int, void*)+0x8c>
c0020aba:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020ac4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020ace:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020ad5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020adc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ae0:	89 c6                	mov    esi,eax
c0020ae2:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020ae7:	c1 e6 10             	shl    esi,0x10
c0020aea:	89 e8                	mov    eax,ebp
c0020aec:	89 fa                	mov    edx,edi
c0020aee:	c1 e0 0b             	shl    eax,0xb
c0020af1:	09 f0                	or     eax,esi
c0020af3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020afa:	c1 e6 08             	shl    esi,0x8
c0020afd:	09 c6                	or     esi,eax
c0020aff:	89 f0                	mov    eax,esi
c0020b01:	0d 08 00 00 80       	or     eax,0x80000008
c0020b06:	ef                   	out    dx,eax
c0020b07:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020b0c:	89 ca                	mov    edx,ecx
c0020b0e:	ed                   	in     eax,dx
c0020b0f:	c1 e8 10             	shr    eax,0x10
c0020b12:	3d ff ff 00 00       	cmp    eax,0xffff
c0020b17:	0f 84 f5 00 00 00    	je     c0020c12 <IDE::open(int, int, void*)+0x1d0>
c0020b1d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020b23:	89 fa                	mov    edx,edi
c0020b25:	89 f0                	mov    eax,esi
c0020b27:	ef                   	out    dx,eax
c0020b28:	b0 fe                	mov    al,0xfe
c0020b2a:	89 ca                	mov    edx,ecx
c0020b2c:	ee                   	out    dx,al
c0020b2d:	89 f0                	mov    eax,esi
c0020b2f:	89 fa                	mov    edx,edi
c0020b31:	ef                   	out    dx,eax
c0020b32:	89 ca                	mov    edx,ecx
c0020b34:	ed                   	in     eax,dx
c0020b35:	3c fe                	cmp    al,0xfe
c0020b37:	0f 85 a9 00 00 00    	jne    c0020be6 <IDE::open(int, int, void*)+0x1a4>
c0020b3d:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0020b43:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020b4a:	74 33                	je     c0020b7f <IDE::open(int, int, void*)+0x13d>
c0020b4c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020b52:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020b56:	40                   	inc    eax
c0020b57:	83 ec 0c             	sub    esp,0xc
c0020b5a:	0f b6 c0             	movzx  eax,al
c0020b5d:	50                   	push   eax
c0020b5e:	55                   	push   ebp
c0020b5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b63:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020b69:	51                   	push   ecx
c0020b6a:	e8 ff 62 ff ff       	call   c0016e6e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020b6f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020b74:	83 c4 1c             	add    esp,0x1c
c0020b77:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b7d:	eb 0a                	jmp    c0020b89 <IDE::open(int, int, void*)+0x147>
c0020b7f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020b89:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020b90:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020b97:	c1 e1 10             	shl    ecx,0x10
c0020b9a:	c1 e0 08             	shl    eax,0x8
c0020b9d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020ba2:	09 c1                	or     ecx,eax
c0020ba4:	89 fa                	mov    edx,edi
c0020ba6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020bad:	c1 e0 0b             	shl    eax,0xb
c0020bb0:	09 c1                	or     ecx,eax
c0020bb2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020bb8:	89 c8                	mov    eax,ecx
c0020bba:	ef                   	out    dx,eax
c0020bbb:	be fc 0c 00 00       	mov    esi,0xcfc
c0020bc0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020bc6:	89 f2                	mov    edx,esi
c0020bc8:	ee                   	out    dx,al
c0020bc9:	89 c8                	mov    eax,ecx
c0020bcb:	89 fa                	mov    edx,edi
c0020bcd:	ef                   	out    dx,eax
c0020bce:	89 f2                	mov    edx,esi
c0020bd0:	ed                   	in     eax,dx
c0020bd1:	0f b6 c0             	movzx  eax,al
c0020bd4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020bda:	74 46                	je     c0020c22 <IDE::open(int, int, void*)+0x1e0>
c0020bdc:	83 ec 0c             	sub    esp,0xc
c0020bdf:	68 54 8d 02 c0       	push   0xc0028d54
c0020be4:	eb 34                	jmp    c0020c1a <IDE::open(int, int, void*)+0x1d8>
c0020be6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020bef:	75 17                	jne    c0020c08 <IDE::open(int, int, void*)+0x1c6>
c0020bf1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020bf6:	74 07                	je     c0020bff <IDE::open(int, int, void*)+0x1bd>
c0020bf8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020bfd:	75 09                	jne    c0020c08 <IDE::open(int, int, void*)+0x1c6>
c0020bff:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020c06:	eb 1a                	jmp    c0020c22 <IDE::open(int, int, void*)+0x1e0>
c0020c08:	83 ec 0c             	sub    esp,0xc
c0020c0b:	68 5c 8d 02 c0       	push   0xc0028d5c
c0020c10:	eb 08                	jmp    c0020c1a <IDE::open(int, int, void*)+0x1d8>
c0020c12:	83 ec 0c             	sub    esp,0xc
c0020c15:	68 8d 8d 02 c0       	push   0xc0028d8d
c0020c1a:	e8 e5 8c ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0020c1f:	83 c4 10             	add    esp,0x10
c0020c22:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020c29:	79 1a                	jns    c0020c45 <IDE::open(int, int, void*)+0x203>
c0020c2b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020c31:	83 e0 fc             	and    eax,0xfffffffc
c0020c34:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020c3b:	83 c0 08             	add    eax,0x8
c0020c3e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020c45:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020c4b:	89 c2                	mov    edx,eax
c0020c4d:	83 e2 0f             	and    edx,0xf
c0020c50:	66 83 fa 08          	cmp    dx,0x8
c0020c54:	75 0a                	jne    c0020c60 <IDE::open(int, int, void*)+0x21e>
c0020c56:	83 e8 02             	sub    eax,0x2
c0020c59:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020c60:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020c66:	89 c2                	mov    edx,eax
c0020c68:	83 e2 0f             	and    edx,0xf
c0020c6b:	66 83 fa 08          	cmp    dx,0x8
c0020c6f:	75 0a                	jne    c0020c7b <IDE::open(int, int, void*)+0x239>
c0020c71:	83 e8 02             	sub    eax,0x2
c0020c74:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020c7b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020c82:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020c89:	89 d0                	mov    eax,edx
c0020c8b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c8e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c92:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020c96:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020c99:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c9e:	0f b6 c9             	movzx  ecx,cl
c0020ca1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020ca8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020cab:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020caf:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0020cb6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020cbb:	0f b6 d2             	movzx  edx,dl
c0020cbe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020cc4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cc7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020ccb:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020ccf:	8d 48 03             	lea    ecx,[eax+0x3]
c0020cd2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020cd7:	0f b6 c9             	movzx  ecx,cl
c0020cda:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020ce0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020ce3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020ce7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020ceb:	8d 50 04             	lea    edx,[eax+0x4]
c0020cee:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020cf4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020cf9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020d00:	66 85 f6             	test   si,si
c0020d03:	74 3e                	je     c0020d43 <IDE::open(int, int, void*)+0x301>
c0020d05:	0f b6 d2             	movzx  edx,dl
c0020d08:	83 c0 05             	add    eax,0x5
c0020d0b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020d0e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020d12:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020d16:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020d1c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d21:	eb 20                	jmp    c0020d43 <IDE::open(int, int, void*)+0x301>
c0020d23:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020d2d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020d37:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020d3e:	e9 02 ff ff ff       	jmp    c0020c45 <IDE::open(int, int, void*)+0x203>
c0020d43:	52                   	push   edx
c0020d44:	52                   	push   edx
c0020d45:	6a 00                	push   0x0
c0020d47:	53                   	push   ebx
c0020d48:	e8 7d fa ff ff       	call   c00207ca <IDE::prepareInterrupt(unsigned char)>
c0020d4d:	59                   	pop    ecx
c0020d4e:	5e                   	pop    esi
c0020d4f:	6a 01                	push   0x1
c0020d51:	53                   	push   ebx
c0020d52:	e8 73 fa ff ff       	call   c00207ca <IDE::prepareInterrupt(unsigned char)>
c0020d57:	83 c4 0c             	add    esp,0xc
c0020d5a:	6a 00                	push   0x0
c0020d5c:	6a 00                	push   0x0
c0020d5e:	53                   	push   ebx
c0020d5f:	e8 98 fc ff ff       	call   c00209fc <IDE::enableIRQs(unsigned char, bool)>
c0020d64:	83 c4 0c             	add    esp,0xc
c0020d67:	6a 00                	push   0x0
c0020d69:	6a 01                	push   0x1
c0020d6b:	53                   	push   ebx
c0020d6c:	e8 8b fc ff ff       	call   c00209fc <IDE::enableIRQs(unsigned char, bool)>
c0020d71:	83 c4 10             	add    esp,0x10
c0020d74:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020d7b:	74 40                	je     c0020dbd <IDE::open(int, int, void*)+0x37b>
c0020d7d:	83 ec 0c             	sub    esp,0xc
c0020d80:	68 b7 8d 02 c0       	push   0xc0028db7
c0020d85:	e8 cd 14 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0020d8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d8d:	6a 01                	push   0x1
c0020d8f:	68 c4 09 02 c0       	push   0xc00209c4
c0020d94:	6a 0e                	push   0xe
c0020d96:	53                   	push   ebx
c0020d97:	e8 1a 28 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d9c:	83 c4 14             	add    esp,0x14
c0020d9f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020da5:	53                   	push   ebx
c0020da6:	6a 01                	push   0x1
c0020da8:	68 e0 09 02 c0       	push   0xc00209e0
c0020dad:	6a 0f                	push   0xf
c0020daf:	53                   	push   ebx
c0020db0:	e8 01 28 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020db5:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020dbb:	eb 4a                	jmp    c0020e07 <IDE::open(int, int, void*)+0x3c5>
c0020dbd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020dc7:	50                   	push   eax
c0020dc8:	6a 0f                	push   0xf
c0020dca:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dd0:	68 d3 8d 02 c0       	push   0xc0028dd3
c0020dd5:	e8 7d 14 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0020dda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020ddd:	6a 00                	push   0x0
c0020ddf:	68 c4 09 02 c0       	push   0xc00209c4
c0020de4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dea:	53                   	push   ebx
c0020deb:	e8 c6 27 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020df0:	83 c4 14             	add    esp,0x14
c0020df3:	53                   	push   ebx
c0020df4:	6a 00                	push   0x0
c0020df6:	68 e0 09 02 c0       	push   0xc00209e0
c0020dfb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020e01:	53                   	push   ebx
c0020e02:	e8 af 27 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020e09:	83 c4 20             	add    esp,0x20
c0020e0c:	83 ec 0c             	sub    esp,0xc
c0020e0f:	53                   	push   ebx
c0020e10:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020e13:	83 c4 0c             	add    esp,0xc
c0020e16:	6a 07                	push   0x7
c0020e18:	6a 00                	push   0x0
c0020e1a:	53                   	push   ebx
c0020e1b:	e8 90 fa ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020e20:	83 c4 0c             	add    esp,0xc
c0020e23:	6a 07                	push   0x7
c0020e25:	6a 01                	push   0x1
c0020e27:	53                   	push   ebx
c0020e28:	e8 83 fa ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020e2d:	83 c4 0c             	add    esp,0xc
c0020e30:	6a 01                	push   0x1
c0020e32:	6a 00                	push   0x0
c0020e34:	53                   	push   ebx
c0020e35:	e8 c2 fb ff ff       	call   c00209fc <IDE::enableIRQs(unsigned char, bool)>
c0020e3a:	83 c4 0c             	add    esp,0xc
c0020e3d:	6a 01                	push   0x1
c0020e3f:	6a 01                	push   0x1
c0020e41:	53                   	push   ebx
c0020e42:	e8 b5 fb ff ff       	call   c00209fc <IDE::enableIRQs(unsigned char, bool)>
c0020e47:	83 c4 2c             	add    esp,0x2c
c0020e4a:	31 c0                	xor    eax,eax
c0020e4c:	5b                   	pop    ebx
c0020e4d:	5e                   	pop    esi
c0020e4e:	5f                   	pop    edi
c0020e4f:	5d                   	pop    ebp
c0020e50:	c3                   	ret    
c0020e51:	90                   	nop

c0020e52 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020e52:	55                   	push   ebp
c0020e53:	57                   	push   edi
c0020e54:	56                   	push   esi
c0020e55:	53                   	push   ebx
c0020e56:	83 ec 1c             	sub    esp,0x1c
c0020e59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e61:	8d 50 f8             	lea    edx,[eax-0x8]
c0020e64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e68:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020e6c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e70:	80 fa 03             	cmp    dl,0x3
c0020e73:	77 5d                	ja     c0020ed2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020e79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e7d:	0f b6 db             	movzx  ebx,bl
c0020e80:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020e83:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020e87:	83 ca 80             	or     edx,0xffffff80
c0020e8a:	0f b6 d2             	movzx  edx,dl
c0020e8d:	52                   	push   edx
c0020e8e:	6a 0c                	push   0xc
c0020e90:	53                   	push   ebx
c0020e91:	56                   	push   esi
c0020e92:	e8 59 f9 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e97:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ea0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020ea4:	0f b6 c0             	movzx  eax,al
c0020ea7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020eab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020ead:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020eb2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020eb6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020eba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020ebe:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020ec6:	83 c4 2c             	add    esp,0x2c
c0020ec9:	5b                   	pop    ebx
c0020eca:	5e                   	pop    esi
c0020ecb:	5f                   	pop    edi
c0020ecc:	5d                   	pop    ebp
c0020ecd:	e9 1e f9 ff ff       	jmp    c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020ed2:	3c 07                	cmp    al,0x7
c0020ed4:	77 10                	ja     c0020ee6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020ed6:	0f b6 db             	movzx  ebx,bl
c0020ed9:	0f b6 d0             	movzx  edx,al
c0020edc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020ee4:	eb 2d                	jmp    c0020f13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ee6:	3c 0d                	cmp    al,0xd
c0020ee8:	77 13                	ja     c0020efd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020eea:	0f b6 db             	movzx  ebx,bl
c0020eed:	0f b6 c0             	movzx  eax,al
c0020ef0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020ef7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020efb:	eb 16                	jmp    c0020f13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020efd:	3c 15                	cmp    al,0x15
c0020eff:	77 14                	ja     c0020f15 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020f01:	0f b6 db             	movzx  ebx,bl
c0020f04:	0f b6 c0             	movzx  eax,al
c0020f07:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020f0f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020f13:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020f15:	83 c4 1c             	add    esp,0x1c
c0020f18:	5b                   	pop    ebx
c0020f19:	5e                   	pop    esi
c0020f1a:	5f                   	pop    edi
c0020f1b:	5d                   	pop    ebp
c0020f1c:	c3                   	ret    
c0020f1d:	90                   	nop

c0020f1e <IDE::detect()>:
c0020f1e:	55                   	push   ebp
c0020f1f:	57                   	push   edi
c0020f20:	56                   	push   esi
c0020f21:	53                   	push   ebx
c0020f22:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f28:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020f2f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020f36:	0f 85 be 02 00 00    	jne    c00211fa <IDE::detect()+0x2dc>
c0020f3c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020f43:	31 f6                	xor    esi,esi
c0020f45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f4d:	31 ed                	xor    ebp,ebp
c0020f4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f53:	c1 e0 06             	shl    eax,0x6
c0020f56:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020f5e:	89 e8                	mov    eax,ebp
c0020f60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f64:	c1 e0 04             	shl    eax,0x4
c0020f67:	83 c8 a0             	or     eax,0xffffffa0
c0020f6a:	0f b6 c0             	movzx  eax,al
c0020f6d:	50                   	push   eax
c0020f6e:	6a 06                	push   0x6
c0020f70:	56                   	push   esi
c0020f71:	53                   	push   ebx
c0020f72:	e8 79 f8 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f77:	83 c4 0c             	add    esp,0xc
c0020f7a:	6a 0c                	push   0xc
c0020f7c:	56                   	push   esi
c0020f7d:	53                   	push   ebx
c0020f7e:	e8 2d f9 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020f83:	83 c4 0c             	add    esp,0xc
c0020f86:	6a 0c                	push   0xc
c0020f88:	56                   	push   esi
c0020f89:	53                   	push   ebx
c0020f8a:	e8 21 f9 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020f8f:	83 c4 0c             	add    esp,0xc
c0020f92:	6a 0c                	push   0xc
c0020f94:	56                   	push   esi
c0020f95:	53                   	push   ebx
c0020f96:	e8 15 f9 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020f9b:	83 c4 0c             	add    esp,0xc
c0020f9e:	6a 0c                	push   0xc
c0020fa0:	56                   	push   esi
c0020fa1:	53                   	push   ebx
c0020fa2:	e8 09 f9 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020fa7:	68 ec 00 00 00       	push   0xec
c0020fac:	6a 07                	push   0x7
c0020fae:	56                   	push   esi
c0020faf:	53                   	push   ebx
c0020fb0:	e8 3b f8 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020fb5:	83 c4 1c             	add    esp,0x1c
c0020fb8:	6a 0c                	push   0xc
c0020fba:	56                   	push   esi
c0020fbb:	53                   	push   ebx
c0020fbc:	e8 ef f8 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020fc1:	83 c4 0c             	add    esp,0xc
c0020fc4:	6a 0c                	push   0xc
c0020fc6:	56                   	push   esi
c0020fc7:	53                   	push   ebx
c0020fc8:	e8 e3 f8 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020fcd:	83 c4 0c             	add    esp,0xc
c0020fd0:	6a 0c                	push   0xc
c0020fd2:	56                   	push   esi
c0020fd3:	53                   	push   ebx
c0020fd4:	e8 d7 f8 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020fd9:	83 c4 0c             	add    esp,0xc
c0020fdc:	6a 0c                	push   0xc
c0020fde:	56                   	push   esi
c0020fdf:	53                   	push   ebx
c0020fe0:	e8 cb f8 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020fe5:	83 c4 0c             	add    esp,0xc
c0020fe8:	6a 0c                	push   0xc
c0020fea:	56                   	push   esi
c0020feb:	53                   	push   ebx
c0020fec:	e8 bf f8 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0020ff1:	83 c4 10             	add    esp,0x10
c0020ff4:	84 c0                	test   al,al
c0020ff6:	0f 84 8b 01 00 00    	je     c0021187 <IDE::detect()+0x269>
c0020ffc:	31 ff                	xor    edi,edi
c0020ffe:	50                   	push   eax
c0020fff:	6a 0c                	push   0xc
c0021001:	56                   	push   esi
c0021002:	53                   	push   ebx
c0021003:	e8 a8 f8 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0021008:	83 c4 10             	add    esp,0x10
c002100b:	a8 01                	test   al,0x1
c002100d:	0f 85 8e 01 00 00    	jne    c00211a1 <IDE::detect()+0x283>
c0021013:	84 c0                	test   al,al
c0021015:	78 04                	js     c002101b <IDE::detect()+0xfd>
c0021017:	a8 08                	test   al,0x8
c0021019:	75 27                	jne    c0021042 <IDE::detect()+0x124>
c002101b:	47                   	inc    edi
c002101c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021022:	7e da                	jle    c0020ffe <IDE::detect()+0xe0>
c0021024:	50                   	push   eax
c0021025:	50                   	push   eax
c0021026:	6a 00                	push   0x0
c0021028:	68 40 4b 4c 00       	push   0x4c4b40
c002102d:	e8 6e bd ff ff       	call   c001cda0 <nanoSleep(unsigned long long)>
c0021032:	83 c4 10             	add    esp,0x10
c0021035:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002103b:	75 c1                	jne    c0020ffe <IDE::detect()+0xe0>
c002103d:	e9 5f 01 00 00       	jmp    c00211a1 <IDE::detect()+0x283>
c0021042:	31 c9                	xor    ecx,ecx
c0021044:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021048:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002104c:	83 ec 0c             	sub    esp,0xc
c002104f:	68 80 00 00 00       	push   0x80
c0021054:	57                   	push   edi
c0021055:	6a 00                	push   0x0
c0021057:	56                   	push   esi
c0021058:	53                   	push   ebx
c0021059:	e8 f4 fd ff ff       	call   c0020e52 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002105e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021063:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021067:	89 d1                	mov    ecx,edx
c0021069:	c1 e0 06             	shl    eax,0x6
c002106c:	01 d8                	add    eax,ebx
c002106e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021075:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002107c:	89 f2                	mov    edx,esi
c002107e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021084:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021088:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002108e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021092:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021099:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00210a1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00210a8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00210b0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00210b6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00210bd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00210c3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00210c7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00210cb:	83 c4 20             	add    esp,0x20
c00210ce:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00210d1:	83 c0 02             	add    eax,0x2
c00210d4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00210da:	83 c7 02             	add    edi,0x2
c00210dd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00210e0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00210e6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00210ea:	75 e2                	jne    c00210ce <IDE::detect()+0x1b0>
c00210ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210f0:	c1 e0 06             	shl    eax,0x6
c00210f3:	01 d8                	add    eax,ebx
c00210f5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00210fb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021102:	66 c1 ea 09          	shr    dx,0x9
c0021106:	83 e2 01             	and    edx,0x1
c0021109:	84 c9                	test   cl,cl
c002110b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021111:	75 2f                	jne    c0021142 <IDE::detect()+0x224>
c0021113:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0021119:	85 c0                	test   eax,eax
c002111b:	74 66                	je     c0021183 <IDE::detect()+0x265>
c002111d:	50                   	push   eax
c002111e:	55                   	push   ebp
c002111f:	56                   	push   esi
c0021120:	68 ef 8d 02 c0       	push   0xc0028def
c0021125:	e8 2d 11 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002112a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021131:	e8 32 10 ff ff       	call   c0012168 <operator new(unsigned long)>
c0021136:	89 c7                	mov    edi,eax
c0021138:	89 04 24             	mov    DWORD PTR [esp],eax
c002113b:	e8 e8 02 00 00       	call   c0021428 <ATA::ATA()>
c0021140:	eb 28                	jmp    c002116a <IDE::detect()+0x24c>
c0021142:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021148:	55                   	push   ebp
c0021149:	56                   	push   esi
c002114a:	68 1e 8e 02 c0       	push   0xc0028e1e
c002114f:	e8 03 11 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021154:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002115b:	e8 08 10 ff ff       	call   c0012168 <operator new(unsigned long)>
c0021160:	89 c7                	mov    edi,eax
c0021162:	89 04 24             	mov    DWORD PTR [esp],eax
c0021165:	e8 ee 08 00 00       	call   c0021a58 <ATAPI::ATAPI()>
c002116a:	5a                   	pop    edx
c002116b:	59                   	pop    ecx
c002116c:	57                   	push   edi
c002116d:	53                   	push   ebx
c002116e:	e8 ef 24 ff ff       	call   c0013662 <Device::addChild(Device*)>
c0021173:	8b 07                	mov    eax,DWORD PTR [edi]
c0021175:	53                   	push   ebx
c0021176:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002117a:	6a 00                	push   0x0
c002117c:	57                   	push   edi
c002117d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021180:	83 c4 20             	add    esp,0x20
c0021183:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021187:	4d                   	dec    ebp
c0021188:	74 0a                	je     c0021194 <IDE::detect()+0x276>
c002118a:	bd 01 00 00 00       	mov    ebp,0x1
c002118f:	e9 bb fd ff ff       	jmp    c0020f4f <IDE::detect()+0x31>
c0021194:	4e                   	dec    esi
c0021195:	74 63                	je     c00211fa <IDE::detect()+0x2dc>
c0021197:	be 01 00 00 00       	mov    esi,0x1
c002119c:	e9 ac fd ff ff       	jmp    c0020f4d <IDE::detect()+0x2f>
c00211a1:	50                   	push   eax
c00211a2:	6a 04                	push   0x4
c00211a4:	56                   	push   esi
c00211a5:	53                   	push   ebx
c00211a6:	e8 05 f7 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c00211ab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00211af:	83 c4 0c             	add    esp,0xc
c00211b2:	6a 05                	push   0x5
c00211b4:	56                   	push   esi
c00211b5:	53                   	push   ebx
c00211b6:	e8 f5 f6 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c00211bb:	83 c4 10             	add    esp,0x10
c00211be:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00211c2:	80 fa 14             	cmp    dl,0x14
c00211c5:	75 04                	jne    c00211cb <IDE::detect()+0x2ad>
c00211c7:	3c eb                	cmp    al,0xeb
c00211c9:	eb 07                	jmp    c00211d2 <IDE::detect()+0x2b4>
c00211cb:	3c 96                	cmp    al,0x96
c00211cd:	75 b8                	jne    c0021187 <IDE::detect()+0x269>
c00211cf:	80 fa 69             	cmp    dl,0x69
c00211d2:	75 b3                	jne    c0021187 <IDE::detect()+0x269>
c00211d4:	68 a1 00 00 00       	push   0xa1
c00211d9:	6a 07                	push   0x7
c00211db:	56                   	push   esi
c00211dc:	53                   	push   ebx
c00211dd:	e8 0e f6 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00211e2:	5f                   	pop    edi
c00211e3:	58                   	pop    eax
c00211e4:	6a 00                	push   0x0
c00211e6:	68 40 42 0f 00       	push   0xf4240
c00211eb:	e8 b0 bb ff ff       	call   c001cda0 <nanoSleep(unsigned long long)>
c00211f0:	83 c4 10             	add    esp,0x10
c00211f3:	b1 01                	mov    cl,0x1
c00211f5:	e9 4a fe ff ff       	jmp    c0021044 <IDE::detect()+0x126>
c00211fa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021200:	5b                   	pop    ebx
c0021201:	5e                   	pop    esi
c0021202:	5f                   	pop    edi
c0021203:	5d                   	pop    ebp
c0021204:	c3                   	ret    
c0021205:	90                   	nop

c0021206 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021206:	55                   	push   ebp
c0021207:	57                   	push   edi
c0021208:	56                   	push   esi
c0021209:	53                   	push   ebx
c002120a:	83 ec 1c             	sub    esp,0x1c
c002120d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021211:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021215:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021219:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002121d:	88 c3                	mov    bl,al
c002121f:	84 c0                	test   al,al
c0021221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021225:	0f 84 67 01 00 00    	je     c0021392 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002122b:	83 ec 0c             	sub    esp,0xc
c002122e:	68 4f 8e 02 c0       	push   0xc0028e4f
c0021233:	e8 1f 10 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021238:	83 c4 10             	add    esp,0x10
c002123b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002123f:	3c 01                	cmp    al,0x1
c0021241:	75 17                	jne    c002125a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021243:	83 ec 0c             	sub    esp,0xc
c0021246:	b3 13                	mov    bl,0x13
c0021248:	68 5b 8e 02 c0       	push   0xc0028e5b
c002124d:	e8 05 10 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021252:	83 c4 10             	add    esp,0x10
c0021255:	e9 25 01 00 00       	jmp    c002137f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002125a:	3c 02                	cmp    al,0x2
c002125c:	0f 85 ef 00 00 00    	jne    c0021351 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021262:	d1 e6                	shl    esi,1
c0021264:	09 ee                	or     esi,ebp
c0021266:	52                   	push   edx
c0021267:	89 f0                	mov    eax,esi
c0021269:	6a 01                	push   0x1
c002126b:	0f b6 f0             	movzx  esi,al
c002126e:	c1 e6 06             	shl    esi,0x6
c0021271:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021279:	50                   	push   eax
c002127a:	57                   	push   edi
c002127b:	e8 30 f6 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0021280:	83 c4 10             	add    esp,0x10
c0021283:	89 c6                	mov    esi,eax
c0021285:	a8 01                	test   al,0x1
c0021287:	74 12                	je     c002129b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021289:	83 ec 0c             	sub    esp,0xc
c002128c:	b3 07                	mov    bl,0x7
c002128e:	68 70 8e 02 c0       	push   0xc0028e70
c0021293:	e8 bf 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021298:	83 c4 10             	add    esp,0x10
c002129b:	f7 c6 02 00 00 00    	test   esi,0x2
c00212a1:	74 12                	je     c00212b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00212a3:	83 ec 0c             	sub    esp,0xc
c00212a6:	b3 03                	mov    bl,0x3
c00212a8:	68 8e 8e 02 c0       	push   0xc0028e8e
c00212ad:	e8 a5 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00212b2:	83 c4 10             	add    esp,0x10
c00212b5:	f7 c6 04 00 00 00    	test   esi,0x4
c00212bb:	74 12                	je     c00212cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00212bd:	83 ec 0c             	sub    esp,0xc
c00212c0:	b3 14                	mov    bl,0x14
c00212c2:	68 ae 8e 02 c0       	push   0xc0028eae
c00212c7:	e8 8b 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00212cc:	83 c4 10             	add    esp,0x10
c00212cf:	f7 c6 08 00 00 00    	test   esi,0x8
c00212d5:	74 12                	je     c00212e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00212d7:	83 ec 0c             	sub    esp,0xc
c00212da:	b3 03                	mov    bl,0x3
c00212dc:	68 8e 8e 02 c0       	push   0xc0028e8e
c00212e1:	e8 71 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00212e6:	83 c4 10             	add    esp,0x10
c00212e9:	f7 c6 10 00 00 00    	test   esi,0x10
c00212ef:	74 12                	je     c0021303 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00212f1:	83 ec 0c             	sub    esp,0xc
c00212f4:	b3 15                	mov    bl,0x15
c00212f6:	68 c6 8e 02 c0       	push   0xc0028ec6
c00212fb:	e8 57 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021300:	83 c4 10             	add    esp,0x10
c0021303:	f7 c6 20 00 00 00    	test   esi,0x20
c0021309:	74 12                	je     c002131d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002130b:	83 ec 0c             	sub    esp,0xc
c002130e:	b3 03                	mov    bl,0x3
c0021310:	68 8e 8e 02 c0       	push   0xc0028e8e
c0021315:	e8 3d 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002131a:	83 c4 10             	add    esp,0x10
c002131d:	f7 c6 40 00 00 00    	test   esi,0x40
c0021323:	74 12                	je     c0021337 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021325:	83 ec 0c             	sub    esp,0xc
c0021328:	b3 16                	mov    bl,0x16
c002132a:	68 e0 8e 02 c0       	push   0xc0028ee0
c002132f:	e8 23 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021334:	83 c4 10             	add    esp,0x10
c0021337:	89 f0                	mov    eax,esi
c0021339:	84 c0                	test   al,al
c002133b:	79 42                	jns    c002137f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002133d:	83 ec 0c             	sub    esp,0xc
c0021340:	b3 0d                	mov    bl,0xd
c0021342:	68 01 8f 02 c0       	push   0xc0028f01
c0021347:	e8 0b 0f ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002134c:	83 c4 10             	add    esp,0x10
c002134f:	eb 2e                	jmp    c002137f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021351:	3c 03                	cmp    al,0x3
c0021353:	75 14                	jne    c0021369 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021355:	83 ec 0c             	sub    esp,0xc
c0021358:	b3 17                	mov    bl,0x17
c002135a:	68 15 8f 02 c0       	push   0xc0028f15
c002135f:	e8 f3 0e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021364:	83 c4 10             	add    esp,0x10
c0021367:	eb 16                	jmp    c002137f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021369:	3c 04                	cmp    al,0x4
c002136b:	75 12                	jne    c002137f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002136d:	83 ec 0c             	sub    esp,0xc
c0021370:	b3 08                	mov    bl,0x8
c0021372:	68 2b 8f 02 c0       	push   0xc0028f2b
c0021377:	e8 db 0e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002137c:	83 c4 10             	add    esp,0x10
c002137f:	50                   	push   eax
c0021380:	50                   	push   eax
c0021381:	0f b6 c3             	movzx  eax,bl
c0021384:	50                   	push   eax
c0021385:	68 43 8f 02 c0       	push   0xc0028f43
c002138a:	e8 c8 0e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c002138f:	83 c4 10             	add    esp,0x10
c0021392:	83 c4 1c             	add    esp,0x1c
c0021395:	88 d8                	mov    al,bl
c0021397:	5b                   	pop    ebx
c0021398:	5e                   	pop    esi
c0021399:	5f                   	pop    edi
c002139a:	5d                   	pop    ebp
c002139b:	c3                   	ret    

c002139c <IDE::polling(unsigned char, unsigned int)>:
c002139c:	57                   	push   edi
c002139d:	56                   	push   esi
c002139e:	53                   	push   ebx
c002139f:	bb 04 00 00 00       	mov    ebx,0x4
c00213a4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00213a8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00213ad:	52                   	push   edx
c00213ae:	6a 0c                	push   0xc
c00213b0:	56                   	push   esi
c00213b1:	57                   	push   edi
c00213b2:	e8 f9 f4 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c00213b7:	83 c4 10             	add    esp,0x10
c00213ba:	4b                   	dec    ebx
c00213bb:	75 f0                	jne    c00213ad <IDE::polling(unsigned char, unsigned int)+0x11>
c00213bd:	bb a0 86 01 00       	mov    ebx,0x186a0
c00213c2:	50                   	push   eax
c00213c3:	6a 0c                	push   0xc
c00213c5:	56                   	push   esi
c00213c6:	57                   	push   edi
c00213c7:	e8 e4 f4 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c00213cc:	83 c4 10             	add    esp,0x10
c00213cf:	a8 01                	test   al,0x1
c00213d1:	74 12                	je     c00213e5 <IDE::polling(unsigned char, unsigned int)+0x49>
c00213d3:	83 ec 0c             	sub    esp,0xc
c00213d6:	68 5d 8f 02 c0       	push   0xc0028f5d
c00213db:	e8 77 0e ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00213e0:	83 c4 10             	add    esp,0x10
c00213e3:	eb 17                	jmp    c00213fc <IDE::polling(unsigned char, unsigned int)+0x60>
c00213e5:	a8 20                	test   al,0x20
c00213e7:	75 0f                	jne    c00213f8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00213e9:	4b                   	dec    ebx
c00213ea:	74 10                	je     c00213fc <IDE::polling(unsigned char, unsigned int)+0x60>
c00213ec:	84 c0                	test   al,al
c00213ee:	78 d2                	js     c00213c2 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213f0:	a8 08                	test   al,0x8
c00213f2:	74 ce                	je     c00213c2 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213f4:	31 c0                	xor    eax,eax
c00213f6:	eb 06                	jmp    c00213fe <IDE::polling(unsigned char, unsigned int)+0x62>
c00213f8:	b0 01                	mov    al,0x1
c00213fa:	eb 02                	jmp    c00213fe <IDE::polling(unsigned char, unsigned int)+0x62>
c00213fc:	b0 02                	mov    al,0x2
c00213fe:	5b                   	pop    ebx
c00213ff:	5e                   	pop    esi
c0021400:	5f                   	pop    edi
c0021401:	c3                   	ret    

c0021402 <ATA::close(int, int, void*)>:
c0021402:	83 ec 0c             	sub    esp,0xc
c0021405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021409:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002140f:	85 c0                	test   eax,eax
c0021411:	74 0c                	je     c002141f <ATA::close(int, int, void*)+0x1d>
c0021413:	83 ec 0c             	sub    esp,0xc
c0021416:	8b 10                	mov    edx,DWORD PTR [eax]
c0021418:	50                   	push   eax
c0021419:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002141c:	83 c4 10             	add    esp,0x10
c002141f:	31 c0                	xor    eax,eax
c0021421:	83 c4 0c             	add    esp,0xc
c0021424:	c3                   	ret    
c0021425:	90                   	nop

c0021426 <ATA::powerSaving(PowerSavingLevel)>:
c0021426:	c3                   	ret    
c0021427:	90                   	nop

c0021428 <ATA::ATA()>:
c0021428:	83 ec 0c             	sub    esp,0xc
c002142b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142f:	83 ec 04             	sub    esp,0x4
c0021432:	68 00 02 00 00       	push   0x200
c0021437:	68 a0 8f 02 c0       	push   0xc0028fa0
c002143c:	50                   	push   eax
c002143d:	e8 26 26 ff ff       	call   c0013a68 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021442:	83 c4 10             	add    esp,0x10
c0021445:	ba cc 8f 02 c0       	mov    edx,0xc0028fcc
c002144a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144e:	89 10                	mov    DWORD PTR [eax],edx
c0021450:	90                   	nop
c0021451:	83 c4 0c             	add    esp,0xc
c0021454:	c3                   	ret    
c0021455:	90                   	nop

c0021456 <ATA::flush(bool)>:
c0021456:	53                   	push   ebx
c0021457:	83 ec 08             	sub    esp,0x8
c002145a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002145f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021463:	19 c0                	sbb    eax,eax
c0021465:	83 e0 fd             	and    eax,0xfffffffd
c0021468:	05 ea 00 00 00       	add    eax,0xea
c002146d:	50                   	push   eax
c002146e:	6a 07                	push   0x7
c0021470:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021477:	50                   	push   eax
c0021478:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002147e:	e8 6d f3 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021483:	83 c4 0c             	add    esp,0xc
c0021486:	6a 00                	push   0x0
c0021488:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002148f:	50                   	push   eax
c0021490:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021496:	e8 01 ff ff ff       	call   c002139c <IDE::polling(unsigned char, unsigned int)>
c002149b:	83 c4 18             	add    esp,0x18
c002149e:	5b                   	pop    ebx
c002149f:	c3                   	ret    

c00214a0 <ATA::readyForCommand()>:
c00214a0:	56                   	push   esi
c00214a1:	53                   	push   ebx
c00214a2:	31 db                	xor    ebx,ebx
c00214a4:	50                   	push   eax
c00214a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00214a9:	50                   	push   eax
c00214aa:	6a 0c                	push   0xc
c00214ac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00214b3:	50                   	push   eax
c00214b4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00214ba:	e8 f1 f3 ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c00214bf:	83 c4 10             	add    esp,0x10
c00214c2:	a8 88                	test   al,0x88
c00214c4:	74 23                	je     c00214e9 <ATA::readyForCommand()+0x49>
c00214c6:	43                   	inc    ebx
c00214c7:	83 fb 63             	cmp    ebx,0x63
c00214ca:	7e dd                	jle    c00214a9 <ATA::readyForCommand()+0x9>
c00214cc:	51                   	push   ecx
c00214cd:	51                   	push   ecx
c00214ce:	6a 00                	push   0x0
c00214d0:	68 40 42 0f 00       	push   0xf4240
c00214d5:	e8 c6 b8 ff ff       	call   c001cda0 <nanoSleep(unsigned long long)>
c00214da:	83 c4 10             	add    esp,0x10
c00214dd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00214e3:	75 c4                	jne    c00214a9 <ATA::readyForCommand()+0x9>
c00214e5:	31 c0                	xor    eax,eax
c00214e7:	eb 02                	jmp    c00214eb <ATA::readyForCommand()+0x4b>
c00214e9:	b0 01                	mov    al,0x1
c00214eb:	5a                   	pop    edx
c00214ec:	5b                   	pop    ebx
c00214ed:	5e                   	pop    esi
c00214ee:	c3                   	ret    
c00214ef:	90                   	nop

c00214f0 <ATA::access(unsigned long long, int, void*, bool)>:
c00214f0:	55                   	push   ebp
c00214f1:	57                   	push   edi
c00214f2:	56                   	push   esi
c00214f3:	53                   	push   ebx
c00214f4:	83 ec 2c             	sub    esp,0x2c
c00214f7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00214fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00214ff:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021503:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021507:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002150b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002150f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021513:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0021519:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002151d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021523:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021527:	c1 e0 06             	shl    eax,0x6
c002152a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021532:	74 5d                	je     c0021591 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021534:	89 fa                	mov    edx,edi
c0021536:	89 f0                	mov    eax,esi
c0021538:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002153c:	c1 ea 1c             	shr    edx,0x1c
c002153f:	89 d1                	mov    ecx,edx
c0021541:	09 c1                	or     ecx,eax
c0021543:	74 25                	je     c002156a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021545:	31 ed                	xor    ebp,ebp
c0021547:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002154e:	89 fa                	mov    edx,edi
c0021550:	89 f0                	mov    eax,esi
c0021552:	0f ad d0             	shrd   eax,edx,cl
c0021555:	d3 ea                	shr    edx,cl
c0021557:	f6 c1 20             	test   cl,0x20
c002155a:	74 02                	je     c002155e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002155c:	89 d0                	mov    eax,edx
c002155e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021562:	45                   	inc    ebp
c0021563:	83 fd 06             	cmp    ebp,0x6
c0021566:	75 df                	jne    c0021547 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0021568:	eb 76                	jmp    c00215e0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002156a:	89 f0                	mov    eax,esi
c002156c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021571:	89 fa                	mov    edx,edi
c0021573:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002157a:	0f ac d0 10          	shrd   eax,edx,0x10
c002157e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021583:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0021587:	c1 ee 18             	shr    esi,0x18
c002158a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002158f:	eb 56                	jmp    c00215e7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021591:	6a 00                	push   0x0
c0021593:	6a 3f                	push   0x3f
c0021595:	57                   	push   edi
c0021596:	56                   	push   esi
c0021597:	e8 e0 1e 00 00       	call   c002347c <__umoddi3>
c002159c:	83 c4 10             	add    esp,0x10
c002159f:	40                   	inc    eax
c00215a0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00215a4:	6a 00                	push   0x0
c00215a6:	68 f0 03 00 00       	push   0x3f0
c00215ab:	57                   	push   edi
c00215ac:	56                   	push   esi
c00215ad:	e8 ca 1d 00 00       	call   c002337c <__udivdi3>
c00215b2:	83 c4 10             	add    esp,0x10
c00215b5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00215ba:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00215c1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00215c6:	6a 00                	push   0x0
c00215c8:	6a 3f                	push   0x3f
c00215ca:	57                   	push   edi
c00215cb:	56                   	push   esi
c00215cc:	e8 ab 1d 00 00       	call   c002337c <__udivdi3>
c00215d1:	83 c4 10             	add    esp,0x10
c00215d4:	89 c6                	mov    esi,eax
c00215d6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00215db:	83 e6 0f             	and    esi,0xf
c00215de:	eb 07                	jmp    c00215e7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00215e0:	31 f6                	xor    esi,esi
c00215e2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00215e7:	bf 01 00 00 00       	mov    edi,0x1
c00215ec:	50                   	push   eax
c00215ed:	6a 00                	push   0x0
c00215ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215f6:	50                   	push   eax
c00215f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215fb:	e8 fc f3 ff ff       	call   c00209fc <IDE::enableIRQs(unsigned char, bool)>
c0021600:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021603:	e8 98 fe ff ff       	call   c00214a0 <ATA::readyForCommand()>
c0021608:	83 c4 10             	add    esp,0x10
c002160b:	84 c0                	test   al,al
c002160d:	0f 84 50 02 00 00    	je     c0021863 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021613:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0021619:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002161f:	c1 e0 04             	shl    eax,0x4
c0021622:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0021629:	09 c6                	or     esi,eax
c002162b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0021630:	75 05                	jne    c0021637 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021632:	83 ce a0             	or     esi,0xffffffa0
c0021635:	eb 03                	jmp    c002163a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0021637:	83 ce e0             	or     esi,0xffffffe0
c002163a:	89 f0                	mov    eax,esi
c002163c:	0f b6 f0             	movzx  esi,al
c002163f:	56                   	push   esi
c0021640:	6a 06                	push   0x6
c0021642:	51                   	push   ecx
c0021643:	52                   	push   edx
c0021644:	e8 a7 f1 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021649:	83 c4 10             	add    esp,0x10
c002164c:	6a 00                	push   0x0
c002164e:	6a 01                	push   0x1
c0021650:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021657:	50                   	push   eax
c0021658:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002165e:	e8 8d f1 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021663:	83 c4 10             	add    esp,0x10
c0021666:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002166b:	75 6e                	jne    c00216db <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002166d:	6a 00                	push   0x0
c002166f:	6a 08                	push   0x8
c0021671:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021678:	50                   	push   eax
c0021679:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002167f:	e8 6c f1 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021684:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0021689:	50                   	push   eax
c002168a:	6a 09                	push   0x9
c002168c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021693:	50                   	push   eax
c0021694:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002169a:	e8 51 f1 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002169f:	83 c4 20             	add    esp,0x20
c00216a2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00216a7:	50                   	push   eax
c00216a8:	6a 0a                	push   0xa
c00216aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216b1:	50                   	push   eax
c00216b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216b8:	e8 33 f1 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216bd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00216c2:	50                   	push   eax
c00216c3:	6a 0b                	push   0xb
c00216c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216cc:	50                   	push   eax
c00216cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216d3:	e8 18 f1 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216d8:	83 c4 20             	add    esp,0x20
c00216db:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00216e0:	50                   	push   eax
c00216e1:	6a 02                	push   0x2
c00216e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216ea:	50                   	push   eax
c00216eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216f1:	e8 fa f0 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216f6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00216fb:	50                   	push   eax
c00216fc:	6a 03                	push   0x3
c00216fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021705:	50                   	push   eax
c0021706:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002170c:	e8 df f0 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021711:	83 c4 20             	add    esp,0x20
c0021714:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0021719:	50                   	push   eax
c002171a:	6a 04                	push   0x4
c002171c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021723:	50                   	push   eax
c0021724:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002172a:	e8 c1 f0 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002172f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021734:	50                   	push   eax
c0021735:	6a 05                	push   0x5
c0021737:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002173e:	50                   	push   eax
c002173f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021745:	e8 a6 f0 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002174a:	83 c4 20             	add    esp,0x20
c002174d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021752:	0f 94 c0             	sete   al
c0021755:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002175a:	74 09                	je     c0021765 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002175c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021763:	eb 07                	jmp    c002176c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021765:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002176c:	0f b6 c0             	movzx  eax,al
c002176f:	50                   	push   eax
c0021770:	6a 07                	push   0x7
c0021772:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021779:	50                   	push   eax
c002177a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021780:	e8 6b f0 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021785:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021789:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002178d:	83 c4 10             	add    esp,0x10
c0021790:	85 f6                	test   esi,esi
c0021792:	0f 84 ac 00 00 00    	je     c0021844 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0021798:	50                   	push   eax
c0021799:	6a 01                	push   0x1
c002179b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217a2:	50                   	push   eax
c00217a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217a9:	e8 ee fb ff ff       	call   c002139c <IDE::polling(unsigned char, unsigned int)>
c00217ae:	83 c4 10             	add    esp,0x10
c00217b1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00217b7:	84 c0                	test   al,al
c00217b9:	74 20                	je     c00217db <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00217bb:	0f b6 f8             	movzx  edi,al
c00217be:	0f b6 d2             	movzx  edx,dl
c00217c1:	57                   	push   edi
c00217c2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00217c9:	50                   	push   eax
c00217ca:	52                   	push   edx
c00217cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217d1:	e8 30 fa ff ff       	call   c0021206 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00217d6:	e9 85 00 00 00       	jmp    c0021860 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00217db:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00217e0:	74 41                	je     c0021823 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00217e2:	31 c9                	xor    ecx,ecx
c00217e4:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00217e8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217ec:	50                   	push   eax
c00217ed:	50                   	push   eax
c00217ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217f5:	50                   	push   eax
c00217f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217fc:	e8 dd ef ff ff       	call   c00207de <IDE::getBase(unsigned char)>
c0021801:	89 c2                	mov    edx,eax
c0021803:	89 e8                	mov    eax,ebp
c0021805:	66 ef                	out    dx,ax
c0021807:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002180b:	83 c4 10             	add    esp,0x10
c002180e:	41                   	inc    ecx
c002180f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0021815:	75 cd                	jne    c00217e4 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0021817:	4e                   	dec    esi
c0021818:	81 c7 00 02 00 00    	add    edi,0x200
c002181e:	e9 6d ff ff ff       	jmp    c0021790 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0021823:	0f b6 d2             	movzx  edx,dl
c0021826:	51                   	push   ecx
c0021827:	51                   	push   ecx
c0021828:	52                   	push   edx
c0021829:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002182f:	e8 aa ef ff ff       	call   c00207de <IDE::getBase(unsigned char)>
c0021834:	b9 00 01 00 00       	mov    ecx,0x100
c0021839:	89 c2                	mov    edx,eax
c002183b:	fc                   	cld    
c002183c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002183f:	83 c4 10             	add    esp,0x10
c0021842:	eb d3                	jmp    c0021817 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021844:	31 ff                	xor    edi,edi
c0021846:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002184b:	74 16                	je     c0021863 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002184d:	50                   	push   eax
c002184e:	50                   	push   eax
c002184f:	31 c0                	xor    eax,eax
c0021851:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0021856:	0f 94 c0             	sete   al
c0021859:	50                   	push   eax
c002185a:	53                   	push   ebx
c002185b:	e8 f6 fb ff ff       	call   c0021456 <ATA::flush(bool)>
c0021860:	83 c4 10             	add    esp,0x10
c0021863:	83 c4 2c             	add    esp,0x2c
c0021866:	89 f8                	mov    eax,edi
c0021868:	5b                   	pop    ebx
c0021869:	5e                   	pop    esi
c002186a:	5f                   	pop    edi
c002186b:	5d                   	pop    ebp
c002186c:	c3                   	ret    
c002186d:	90                   	nop

c002186e <ATA::read(unsigned long long, int, void*)>:
c002186e:	57                   	push   edi
c002186f:	b8 04 00 00 00       	mov    eax,0x4
c0021874:	56                   	push   esi
c0021875:	53                   	push   ebx
c0021876:	83 ec 10             	sub    esp,0x10
c0021879:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002187d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021881:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021884:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021888:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002188c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021892:	77 3b                	ja     c00218cf <ATA::read(unsigned long long, int, void*)+0x61>
c0021894:	b8 06 00 00 00       	mov    eax,0x6
c0021899:	85 d2                	test   edx,edx
c002189b:	74 32                	je     c00218cf <ATA::read(unsigned long long, int, void*)+0x61>
c002189d:	50                   	push   eax
c002189e:	50                   	push   eax
c002189f:	6a 00                	push   0x0
c00218a1:	52                   	push   edx
c00218a2:	53                   	push   ebx
c00218a3:	57                   	push   edi
c00218a4:	56                   	push   esi
c00218a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218a9:	e8 42 fc ff ff       	call   c00214f0 <ATA::access(unsigned long long, int, void*, bool)>
c00218ae:	83 c4 20             	add    esp,0x20
c00218b1:	85 c0                	test   eax,eax
c00218b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00218b7:	75 11                	jne    c00218ca <ATA::read(unsigned long long, int, void*)+0x5c>
c00218b9:	01 1d 08 c6 02 c0    	add    DWORD PTR ds:0xc002c608,ebx
c00218bf:	e8 7e e8 fe ff       	call   c0010142 <VgaText::updateDiskUsage()>
c00218c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218c8:	eb 05                	jmp    c00218cf <ATA::read(unsigned long long, int, void*)+0x61>
c00218ca:	b8 01 00 00 00       	mov    eax,0x1
c00218cf:	83 c4 10             	add    esp,0x10
c00218d2:	5b                   	pop    ebx
c00218d3:	5e                   	pop    esi
c00218d4:	5f                   	pop    edi
c00218d5:	c3                   	ret    

c00218d6 <ATA::write(unsigned long long, int, void*)>:
c00218d6:	57                   	push   edi
c00218d7:	b8 04 00 00 00       	mov    eax,0x4
c00218dc:	56                   	push   esi
c00218dd:	53                   	push   ebx
c00218de:	83 ec 10             	sub    esp,0x10
c00218e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00218e5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218e9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00218ec:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218f4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00218fa:	77 3b                	ja     c0021937 <ATA::write(unsigned long long, int, void*)+0x61>
c00218fc:	b8 06 00 00 00       	mov    eax,0x6
c0021901:	85 d2                	test   edx,edx
c0021903:	74 32                	je     c0021937 <ATA::write(unsigned long long, int, void*)+0x61>
c0021905:	50                   	push   eax
c0021906:	50                   	push   eax
c0021907:	6a 01                	push   0x1
c0021909:	52                   	push   edx
c002190a:	53                   	push   ebx
c002190b:	57                   	push   edi
c002190c:	56                   	push   esi
c002190d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021911:	e8 da fb ff ff       	call   c00214f0 <ATA::access(unsigned long long, int, void*, bool)>
c0021916:	83 c4 20             	add    esp,0x20
c0021919:	85 c0                	test   eax,eax
c002191b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002191f:	75 11                	jne    c0021932 <ATA::write(unsigned long long, int, void*)+0x5c>
c0021921:	01 1d 04 c6 02 c0    	add    DWORD PTR ds:0xc002c604,ebx
c0021927:	e8 16 e8 fe ff       	call   c0010142 <VgaText::updateDiskUsage()>
c002192c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021930:	eb 05                	jmp    c0021937 <ATA::write(unsigned long long, int, void*)+0x61>
c0021932:	b8 01 00 00 00       	mov    eax,0x1
c0021937:	83 c4 10             	add    esp,0x10
c002193a:	5b                   	pop    ebx
c002193b:	5e                   	pop    esi
c002193c:	5f                   	pop    edi
c002193d:	c3                   	ret    

c002193e <ATA::detectCHS()>:
c002193e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021942:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0021948:	c1 e0 06             	shl    eax,0x6
c002194b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021951:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002195b:	c7 44 24 04 af 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028faf
c0021963:	e9 9c 7f ff ff       	jmp    c0019904 <Krnl::panic(char const*)>

c0021968 <ATA::open(int, int, void*)>:
c0021968:	53                   	push   ebx
c0021969:	83 ec 08             	sub    esp,0x8
c002196c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021970:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021974:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021978:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002197e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021984:	c1 e0 06             	shl    eax,0x6
c0021987:	01 d0                	add    eax,edx
c0021989:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021990:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0021996:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002199d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00219a7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00219ad:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00219b4:	75 0c                	jne    c00219c2 <ATA::open(int, int, void*)+0x5a>
c00219b6:	83 ec 0c             	sub    esp,0xc
c00219b9:	53                   	push   ebx
c00219ba:	e8 7f ff ff ff       	call   c002193e <ATA::detectCHS()>
c00219bf:	83 c4 10             	add    esp,0x10
c00219c2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00219c8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00219ce:	c1 e0 06             	shl    eax,0x6
c00219d1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00219d8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00219e2:	d1 e8                	shr    eax,1
c00219e4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00219ea:	6a 04                	push   0x4
c00219ec:	6a 0c                	push   0xc
c00219ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219f5:	50                   	push   eax
c00219f6:	52                   	push   edx
c00219f7:	e8 f4 ed ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219fc:	90                   	nop
c00219fd:	90                   	nop
c00219fe:	6a 00                	push   0x0
c0021a00:	6a 0c                	push   0xc
c0021a02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021a09:	50                   	push   eax
c0021a0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021a10:	e8 db ed ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a15:	83 c4 14             	add    esp,0x14
c0021a18:	53                   	push   ebx
c0021a19:	e8 b2 20 ff ff       	call   c0013ad0 <PhysicalDisk::startCache()>
c0021a1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a21:	e8 7a 40 ff ff       	call   c0015aa0 <createPartitionsForDisk(PhysicalDisk*)>
c0021a26:	31 c0                	xor    eax,eax
c0021a28:	83 c4 18             	add    esp,0x18
c0021a2b:	5b                   	pop    ebx
c0021a2c:	c3                   	ret    
c0021a2d:	90                   	nop

c0021a2e <ATAPI::write(unsigned long long, int, void*)>:
c0021a2e:	b8 03 00 00 00       	mov    eax,0x3
c0021a33:	c3                   	ret    

c0021a34 <ATAPI::close(int, int, void*)>:
c0021a34:	83 ec 0c             	sub    esp,0xc
c0021a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021a41:	85 c0                	test   eax,eax
c0021a43:	74 0c                	je     c0021a51 <ATAPI::close(int, int, void*)+0x1d>
c0021a45:	83 ec 0c             	sub    esp,0xc
c0021a48:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a4a:	50                   	push   eax
c0021a4b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a4e:	83 c4 10             	add    esp,0x10
c0021a51:	31 c0                	xor    eax,eax
c0021a53:	83 c4 0c             	add    esp,0xc
c0021a56:	c3                   	ret    
c0021a57:	90                   	nop

c0021a58 <ATAPI::ATAPI()>:
c0021a58:	83 ec 0c             	sub    esp,0xc
c0021a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5f:	83 ec 04             	sub    esp,0x4
c0021a62:	68 00 08 00 00       	push   0x800
c0021a67:	68 f8 8f 02 c0       	push   0xc0028ff8
c0021a6c:	50                   	push   eax
c0021a6d:	e8 f6 1f ff ff       	call   c0013a68 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a72:	83 c4 10             	add    esp,0x10
c0021a75:	ba 38 90 02 c0       	mov    edx,0xc0029038
c0021a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7e:	89 10                	mov    DWORD PTR [eax],edx
c0021a80:	90                   	nop
c0021a81:	83 c4 0c             	add    esp,0xc
c0021a84:	c3                   	ret    
c0021a85:	90                   	nop

c0021a86 <ATAPI::readyForCommand()>:
c0021a86:	56                   	push   esi
c0021a87:	53                   	push   ebx
c0021a88:	31 db                	xor    ebx,ebx
c0021a8a:	50                   	push   eax
c0021a8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a8f:	50                   	push   eax
c0021a90:	6a 0c                	push   0xc
c0021a92:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a99:	50                   	push   eax
c0021a9a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021aa0:	e8 0b ee ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0021aa5:	83 c4 10             	add    esp,0x10
c0021aa8:	a8 88                	test   al,0x88
c0021aaa:	74 23                	je     c0021acf <ATAPI::readyForCommand()+0x49>
c0021aac:	43                   	inc    ebx
c0021aad:	83 fb 63             	cmp    ebx,0x63
c0021ab0:	7e dd                	jle    c0021a8f <ATAPI::readyForCommand()+0x9>
c0021ab2:	51                   	push   ecx
c0021ab3:	51                   	push   ecx
c0021ab4:	6a 00                	push   0x0
c0021ab6:	68 40 42 0f 00       	push   0xf4240
c0021abb:	e8 e0 b2 ff ff       	call   c001cda0 <nanoSleep(unsigned long long)>
c0021ac0:	83 c4 10             	add    esp,0x10
c0021ac3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021ac9:	75 c4                	jne    c0021a8f <ATAPI::readyForCommand()+0x9>
c0021acb:	31 c0                	xor    eax,eax
c0021acd:	eb 02                	jmp    c0021ad1 <ATAPI::readyForCommand()+0x4b>
c0021acf:	b0 01                	mov    al,0x1
c0021ad1:	5a                   	pop    edx
c0021ad2:	5b                   	pop    ebx
c0021ad3:	5e                   	pop    esi
c0021ad4:	c3                   	ret    
c0021ad5:	90                   	nop

c0021ad6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021ad6:	55                   	push   ebp
c0021ad7:	57                   	push   edi
c0021ad8:	56                   	push   esi
c0021ad9:	53                   	push   ebx
c0021ada:	83 ec 20             	sub    esp,0x20
c0021add:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021ae1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021ae5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021ae9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021aed:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021af1:	6a 01                	push   0x1
c0021af3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021afa:	50                   	push   eax
c0021afb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b01:	e8 f6 ee ff ff       	call   c00209fc <IDE::enableIRQs(unsigned char, bool)>
c0021b06:	5e                   	pop    esi
c0021b07:	58                   	pop    eax
c0021b08:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b0f:	50                   	push   eax
c0021b10:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b16:	e8 af ec ff ff       	call   c00207ca <IDE::prepareInterrupt(unsigned char)>
c0021b1b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b1e:	e8 63 ff ff ff       	call   c0021a86 <ATAPI::readyForCommand()>
c0021b23:	83 c4 10             	add    esp,0x10
c0021b26:	84 c0                	test   al,al
c0021b28:	75 0a                	jne    c0021b34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021b2a:	bb 01 00 00 00       	mov    ebx,0x1
c0021b2f:	e9 57 02 00 00       	jmp    c0021d8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021b34:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021b3a:	c1 e0 04             	shl    eax,0x4
c0021b3d:	0f b6 c0             	movzx  eax,al
c0021b40:	50                   	push   eax
c0021b41:	6a 06                	push   0x6
c0021b43:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b4a:	50                   	push   eax
c0021b4b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b51:	e8 9a ec ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b56:	6a 00                	push   0x0
c0021b58:	6a 01                	push   0x1
c0021b5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b61:	50                   	push   eax
c0021b62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b68:	e8 83 ec ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b6d:	83 c4 20             	add    esp,0x20
c0021b70:	0f b6 c3             	movzx  eax,bl
c0021b73:	0f b6 df             	movzx  ebx,bh
c0021b76:	50                   	push   eax
c0021b77:	6a 04                	push   0x4
c0021b79:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b80:	50                   	push   eax
c0021b81:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b87:	e8 64 ec ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b8c:	53                   	push   ebx
c0021b8d:	6a 05                	push   0x5
c0021b8f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b96:	50                   	push   eax
c0021b97:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b9d:	e8 4e ec ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ba2:	83 c4 20             	add    esp,0x20
c0021ba5:	68 a0 00 00 00       	push   0xa0
c0021baa:	6a 07                	push   0x7
c0021bac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bb3:	50                   	push   eax
c0021bb4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bba:	e8 31 ec ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bbf:	83 c4 0c             	add    esp,0xc
c0021bc2:	6a 01                	push   0x1
c0021bc4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021bcb:	50                   	push   eax
c0021bcc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bd2:	e8 c5 f7 ff ff       	call   c002139c <IDE::polling(unsigned char, unsigned int)>
c0021bd7:	83 c4 10             	add    esp,0x10
c0021bda:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021be0:	84 c0                	test   al,al
c0021be2:	74 23                	je     c0021c07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021be4:	0f b6 d8             	movzx  ebx,al
c0021be7:	0f b6 d2             	movzx  edx,dl
c0021bea:	53                   	push   ebx
c0021beb:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021bf2:	50                   	push   eax
c0021bf3:	52                   	push   edx
c0021bf4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bfa:	e8 07 f6 ff ff       	call   c0021206 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021bff:	83 c4 10             	add    esp,0x10
c0021c02:	e9 84 01 00 00       	jmp    c0021d8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021c07:	0f b6 d2             	movzx  edx,dl
c0021c0a:	53                   	push   ebx
c0021c0b:	53                   	push   ebx
c0021c0c:	52                   	push   edx
c0021c0d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c13:	e8 c6 eb ff ff       	call   c00207de <IDE::getBase(unsigned char)>
c0021c18:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021c1c:	b9 06 00 00 00       	mov    ecx,0x6
c0021c21:	89 c2                	mov    edx,eax
c0021c23:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021c26:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021c2a:	83 c4 10             	add    esp,0x10
c0021c2d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c33:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c3a:	85 db                	test   ebx,ebx
c0021c3c:	0f 84 ec 00 00 00    	je     c0021d2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021c42:	51                   	push   ecx
c0021c43:	51                   	push   ecx
c0021c44:	52                   	push   edx
c0021c45:	50                   	push   eax
c0021c46:	e8 13 ed ff ff       	call   c002095e <IDE::waitInterrupt(unsigned char)>
c0021c4b:	83 c4 10             	add    esp,0x10
c0021c4e:	84 c0                	test   al,al
c0021c50:	0f 84 d4 fe ff ff    	je     c0021b2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021c56:	56                   	push   esi
c0021c57:	56                   	push   esi
c0021c58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c5f:	50                   	push   eax
c0021c60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c66:	e8 5f eb ff ff       	call   c00207ca <IDE::prepareInterrupt(unsigned char)>
c0021c6b:	83 c4 0c             	add    esp,0xc
c0021c6e:	6a 04                	push   0x4
c0021c70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c77:	50                   	push   eax
c0021c78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c7e:	e8 2d ec ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0021c83:	83 c4 0c             	add    esp,0xc
c0021c86:	89 c6                	mov    esi,eax
c0021c88:	6a 05                	push   0x5
c0021c8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c91:	50                   	push   eax
c0021c92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c98:	e8 13 ec ff ff       	call   c00208b0 <IDE::read(unsigned char, unsigned char)>
c0021c9d:	89 f1                	mov    ecx,esi
c0021c9f:	0f b6 c0             	movzx  eax,al
c0021ca2:	0f b6 f1             	movzx  esi,cl
c0021ca5:	c1 e0 08             	shl    eax,0x8
c0021ca8:	09 c6                	or     esi,eax
c0021caa:	d1 fe                	sar    esi,1
c0021cac:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021cb0:	83 c4 10             	add    esp,0x10
c0021cb3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021cb8:	74 41                	je     c0021cfb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021cba:	31 c9                	xor    ecx,ecx
c0021cbc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021cc2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cc9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021ccd:	75 0a                	jne    c0021cd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021ccf:	01 c9                	add    ecx,ecx
c0021cd1:	01 cd                	add    ebp,ecx
c0021cd3:	4b                   	dec    ebx
c0021cd4:	e9 54 ff ff ff       	jmp    c0021c2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021cd9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021cde:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021ce2:	51                   	push   ecx
c0021ce3:	51                   	push   ecx
c0021ce4:	52                   	push   edx
c0021ce5:	50                   	push   eax
c0021ce6:	e8 f3 ea ff ff       	call   c00207de <IDE::getBase(unsigned char)>
c0021ceb:	89 c2                	mov    edx,eax
c0021ced:	89 f0                	mov    eax,esi
c0021cef:	66 ef                	out    dx,ax
c0021cf1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cf5:	83 c4 10             	add    esp,0x10
c0021cf8:	41                   	inc    ecx
c0021cf9:	eb c1                	jmp    c0021cbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021cfb:	31 f6                	xor    esi,esi
c0021cfd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021d03:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021d0a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021d0e:	75 06                	jne    c0021d16 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021d10:	01 f6                	add    esi,esi
c0021d12:	01 f5                	add    ebp,esi
c0021d14:	eb bd                	jmp    c0021cd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021d16:	51                   	push   ecx
c0021d17:	51                   	push   ecx
c0021d18:	52                   	push   edx
c0021d19:	50                   	push   eax
c0021d1a:	e8 bf ea ff ff       	call   c00207de <IDE::getBase(unsigned char)>
c0021d1f:	89 c2                	mov    edx,eax
c0021d21:	66 ed                	in     ax,dx
c0021d23:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021d28:	83 c4 10             	add    esp,0x10
c0021d2b:	46                   	inc    esi
c0021d2c:	eb cf                	jmp    c0021cfd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021d2e:	51                   	push   ecx
c0021d2f:	51                   	push   ecx
c0021d30:	52                   	push   edx
c0021d31:	50                   	push   eax
c0021d32:	e8 27 ec ff ff       	call   c002095e <IDE::waitInterrupt(unsigned char)>
c0021d37:	83 c4 10             	add    esp,0x10
c0021d3a:	84 c0                	test   al,al
c0021d3c:	0f 84 e8 fd ff ff    	je     c0021b2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d42:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021d47:	52                   	push   edx
c0021d48:	52                   	push   edx
c0021d49:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d50:	50                   	push   eax
c0021d51:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d57:	e8 6e ea ff ff       	call   c00207ca <IDE::prepareInterrupt(unsigned char)>
c0021d5c:	83 c4 10             	add    esp,0x10
c0021d5f:	50                   	push   eax
c0021d60:	50                   	push   eax
c0021d61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d68:	50                   	push   eax
c0021d69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d6f:	e8 6a ea ff ff       	call   c00207de <IDE::getBase(unsigned char)>
c0021d74:	8d 50 07             	lea    edx,[eax+0x7]
c0021d77:	ec                   	in     al,dx
c0021d78:	83 c4 10             	add    esp,0x10
c0021d7b:	a8 88                	test   al,0x88
c0021d7d:	74 0a                	je     c0021d89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021d7f:	4b                   	dec    ebx
c0021d80:	75 dd                	jne    c0021d5f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021d82:	bb 02 00 00 00       	mov    ebx,0x2
c0021d87:	eb 02                	jmp    c0021d8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d89:	31 db                	xor    ebx,ebx
c0021d8b:	83 c4 1c             	add    esp,0x1c
c0021d8e:	89 d8                	mov    eax,ebx
c0021d90:	5b                   	pop    ebx
c0021d91:	5e                   	pop    esi
c0021d92:	5f                   	pop    edi
c0021d93:	5d                   	pop    ebp
c0021d94:	c3                   	ret    
c0021d95:	90                   	nop

c0021d96 <ATAPI::diskRemoved()>:
c0021d96:	83 ec 18             	sub    esp,0x18
c0021d99:	68 03 90 02 c0       	push   0xc0029003
c0021d9e:	e8 b4 04 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021da7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021dae:	83 c4 1c             	add    esp,0x1c
c0021db1:	c3                   	ret    

c0021db2 <ATAPI::eject()>:
c0021db2:	57                   	push   edi
c0021db3:	b9 03 00 00 00       	mov    ecx,0x3
c0021db8:	53                   	push   ebx
c0021db9:	83 ec 14             	sub    esp,0x14
c0021dbc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021dc0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021dc4:	fc                   	cld    
c0021dc5:	31 c0                	xor    eax,eax
c0021dc7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021dc9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021dce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021dd3:	50                   	push   eax
c0021dd4:	50                   	push   eax
c0021dd5:	6a 00                	push   0x0
c0021dd7:	6a 00                	push   0x0
c0021dd9:	6a 00                	push   0x0
c0021ddb:	6a 02                	push   0x2
c0021ddd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021de1:	50                   	push   eax
c0021de2:	53                   	push   ebx
c0021de3:	e8 ee fc ff ff       	call   c0021ad6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021de8:	83 c4 14             	add    esp,0x14
c0021deb:	53                   	push   ebx
c0021dec:	e8 a5 ff ff ff       	call   c0021d96 <ATAPI::diskRemoved()>
c0021df1:	83 c4 24             	add    esp,0x24
c0021df4:	5b                   	pop    ebx
c0021df5:	5f                   	pop    edi
c0021df6:	c3                   	ret    
c0021df7:	90                   	nop

c0021df8 <ATAPI::diskInserted()>:
c0021df8:	53                   	push   ebx
c0021df9:	83 ec 14             	sub    esp,0x14
c0021dfc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021e00:	68 19 90 02 c0       	push   0xc0029019
c0021e05:	e8 4d 04 ff ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0021e0a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021e11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021e14:	e8 b7 1c ff ff       	call   c0013ad0 <PhysicalDisk::startCache()>
c0021e19:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021e1d:	83 c4 18             	add    esp,0x18
c0021e20:	5b                   	pop    ebx
c0021e21:	e9 7a 3c ff ff       	jmp    c0015aa0 <createPartitionsForDisk(PhysicalDisk*)>

c0021e26 <ATAPI::detectMedia()>:
c0021e26:	56                   	push   esi
c0021e27:	53                   	push   ebx
c0021e28:	83 ec 28             	sub    esp,0x28
c0021e2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e2f:	6a 0c                	push   0xc
c0021e31:	6a 00                	push   0x0
c0021e33:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021e37:	56                   	push   esi
c0021e38:	e8 af e8 fd ff       	call   c00006ec <memset>
c0021e3d:	58                   	pop    eax
c0021e3e:	5a                   	pop    edx
c0021e3f:	6a 00                	push   0x0
c0021e41:	6a 00                	push   0x0
c0021e43:	6a 00                	push   0x0
c0021e45:	6a 00                	push   0x0
c0021e47:	56                   	push   esi
c0021e48:	53                   	push   ebx
c0021e49:	e8 88 fc ff ff       	call   c0021ad6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e4e:	83 c4 1c             	add    esp,0x1c
c0021e51:	6a 0c                	push   0xc
c0021e53:	6a 00                	push   0x0
c0021e55:	56                   	push   esi
c0021e56:	e8 91 e8 fd ff       	call   c00006ec <memset>
c0021e5b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021e60:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021e65:	59                   	pop    ecx
c0021e66:	58                   	pop    eax
c0021e67:	6a 01                	push   0x1
c0021e69:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e6d:	50                   	push   eax
c0021e6e:	6a 00                	push   0x0
c0021e70:	6a 12                	push   0x12
c0021e72:	56                   	push   esi
c0021e73:	53                   	push   ebx
c0021e74:	e8 5d fc ff ff       	call   c0021ad6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e79:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021e7d:	83 c4 20             	add    esp,0x20
c0021e80:	83 e0 7f             	and    eax,0x7f
c0021e83:	3c 70                	cmp    al,0x70
c0021e85:	74 15                	je     c0021e9c <ATAPI::detectMedia()+0x76>
c0021e87:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e8e:	75 0c                	jne    c0021e9c <ATAPI::detectMedia()+0x76>
c0021e90:	83 ec 0c             	sub    esp,0xc
c0021e93:	53                   	push   ebx
c0021e94:	e8 5f ff ff ff       	call   c0021df8 <ATAPI::diskInserted()>
c0021e99:	83 c4 10             	add    esp,0x10
c0021e9c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021ea0:	83 e0 0f             	and    eax,0xf
c0021ea3:	3c 02                	cmp    al,0x2
c0021ea5:	75 1b                	jne    c0021ec2 <ATAPI::detectMedia()+0x9c>
c0021ea7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021eac:	75 2d                	jne    c0021edb <ATAPI::detectMedia()+0xb5>
c0021eae:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021eb5:	74 24                	je     c0021edb <ATAPI::detectMedia()+0xb5>
c0021eb7:	83 ec 0c             	sub    esp,0xc
c0021eba:	53                   	push   ebx
c0021ebb:	e8 d6 fe ff ff       	call   c0021d96 <ATAPI::diskRemoved()>
c0021ec0:	eb 16                	jmp    c0021ed8 <ATAPI::detectMedia()+0xb2>
c0021ec2:	84 c0                	test   al,al
c0021ec4:	75 15                	jne    c0021edb <ATAPI::detectMedia()+0xb5>
c0021ec6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021ecd:	75 0c                	jne    c0021edb <ATAPI::detectMedia()+0xb5>
c0021ecf:	83 ec 0c             	sub    esp,0xc
c0021ed2:	53                   	push   ebx
c0021ed3:	e8 20 ff ff ff       	call   c0021df8 <ATAPI::diskInserted()>
c0021ed8:	83 c4 10             	add    esp,0x10
c0021edb:	83 c4 24             	add    esp,0x24
c0021ede:	5b                   	pop    ebx
c0021edf:	5e                   	pop    esi
c0021ee0:	c3                   	ret    
c0021ee1:	90                   	nop

c0021ee2 <ATAPI::open(int, int, void*)>:
c0021ee2:	53                   	push   ebx
c0021ee3:	83 ec 08             	sub    esp,0x8
c0021ee6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021eea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021eee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ef2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021ef8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021efe:	c1 e0 06             	shl    eax,0x6
c0021f01:	01 d0                	add    eax,edx
c0021f03:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021f0a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021f10:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021f17:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021f21:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021f27:	6a 04                	push   0x4
c0021f29:	6a 0c                	push   0xc
c0021f2b:	51                   	push   ecx
c0021f2c:	52                   	push   edx
c0021f2d:	e8 be e8 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f32:	90                   	nop
c0021f33:	90                   	nop
c0021f34:	6a 00                	push   0x0
c0021f36:	6a 0c                	push   0xc
c0021f38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021f3f:	50                   	push   eax
c0021f40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021f46:	e8 a5 e8 ff ff       	call   c00207f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f4b:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021f52:	83 c4 14             	add    esp,0x14
c0021f55:	53                   	push   ebx
c0021f56:	e8 cb fe ff ff       	call   c0021e26 <ATAPI::detectMedia()>
c0021f5b:	31 c0                	xor    eax,eax
c0021f5d:	83 c4 18             	add    esp,0x18
c0021f60:	5b                   	pop    ebx
c0021f61:	c3                   	ret    

c0021f62 <ATAPI::read(unsigned long long, int, void*)>:
c0021f62:	55                   	push   ebp
c0021f63:	57                   	push   edi
c0021f64:	56                   	push   esi
c0021f65:	53                   	push   ebx
c0021f66:	83 ec 1c             	sub    esp,0x1c
c0021f69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f6d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f71:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021f75:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f7c:	74 41                	je     c0021fbf <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021f7e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021f82:	b9 03 00 00 00       	mov    ecx,0x3
c0021f87:	fc                   	cld    
c0021f88:	31 c0                	xor    eax,eax
c0021f8a:	86 fb                	xchg   bl,bh
c0021f8c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021f8e:	c1 c3 10             	rol    ebx,0x10
c0021f91:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021f96:	89 e8                	mov    eax,ebp
c0021f98:	86 fb                	xchg   bl,bh
c0021f9a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021f9e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021fa2:	50                   	push   eax
c0021fa3:	50                   	push   eax
c0021fa4:	55                   	push   ebp
c0021fa5:	c1 e5 0b             	shl    ebp,0xb
c0021fa8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fac:	6a 00                	push   0x0
c0021fae:	55                   	push   ebp
c0021faf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fb3:	50                   	push   eax
c0021fb4:	56                   	push   esi
c0021fb5:	e8 1c fb ff ff       	call   c0021ad6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021fba:	83 c4 20             	add    esp,0x20
c0021fbd:	eb 1a                	jmp    c0021fd9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021fbf:	83 ec 0c             	sub    esp,0xc
c0021fc2:	56                   	push   esi
c0021fc3:	e8 5e fe ff ff       	call   c0021e26 <ATAPI::detectMedia()>
c0021fc8:	83 c4 10             	add    esp,0x10
c0021fcb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021fd2:	75 aa                	jne    c0021f7e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021fd4:	b8 02 00 00 00       	mov    eax,0x2
c0021fd9:	83 c4 1c             	add    esp,0x1c
c0021fdc:	5b                   	pop    ebx
c0021fdd:	5e                   	pop    esi
c0021fde:	5f                   	pop    edi
c0021fdf:	5d                   	pop    ebp
c0021fe0:	c3                   	ret    
c0021fe1:	90                   	nop

c0021fe2 <AVX::open(int, int, void*)>:
c0021fe2:	83 ec 0c             	sub    esp,0xc
c0021fe5:	e8 0e 10 00 00       	call   c0022ff8 <avxInit>
c0021fea:	b8 00 00 00 00       	mov    eax,0x0
c0021fef:	83 c4 0c             	add    esp,0xc
c0021ff2:	c3                   	ret    
c0021ff3:	90                   	nop

c0021ff4 <AVX::close(int, int, void*)>:
c0021ff4:	83 ec 0c             	sub    esp,0xc
c0021ff7:	e8 fd 0f 00 00       	call   c0022ff9 <avxClose>
c0021ffc:	b8 00 00 00 00       	mov    eax,0x0
c0022001:	83 c4 0c             	add    esp,0xc
c0022004:	c3                   	ret    
c0022005:	90                   	nop

c0022006 <AVX::available()>:
c0022006:	83 ec 0c             	sub    esp,0xc
c0022009:	e8 e2 0f 00 00       	call   c0022ff0 <avxDetect>
c002200e:	85 c0                	test   eax,eax
c0022010:	0f 95 c0             	setne  al
c0022013:	83 c4 0c             	add    esp,0xc
c0022016:	c3                   	ret    
c0022017:	90                   	nop

c0022018 <AVX::save(void*)>:
c0022018:	83 ec 0c             	sub    esp,0xc
c002201b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002201f:	83 ec 0c             	sub    esp,0xc
c0022022:	50                   	push   eax
c0022023:	e8 ce 0f 00 00       	call   c0022ff6 <avxSave>
c0022028:	83 c4 10             	add    esp,0x10
c002202b:	90                   	nop
c002202c:	83 c4 0c             	add    esp,0xc
c002202f:	c3                   	ret    

c0022030 <AVX::load(void*)>:
c0022030:	83 ec 0c             	sub    esp,0xc
c0022033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022037:	83 ec 0c             	sub    esp,0xc
c002203a:	50                   	push   eax
c002203b:	e8 b7 0f 00 00       	call   c0022ff7 <avxLoad>
c0022040:	83 c4 10             	add    esp,0x10
c0022043:	90                   	nop
c0022044:	83 c4 0c             	add    esp,0xc
c0022047:	c3                   	ret    

c0022048 <AVX::AVX()>:
c0022048:	83 ec 0c             	sub    esp,0xc
c002204b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204f:	83 ec 08             	sub    esp,0x8
c0022052:	68 64 90 02 c0       	push   0xc0029064
c0022057:	50                   	push   eax
c0022058:	e8 e9 1a ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c002205d:	83 c4 10             	add    esp,0x10
c0022060:	ba 74 90 02 c0       	mov    edx,0xc0029074
c0022065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022069:	89 10                	mov    DWORD PTR [eax],edx
c002206b:	90                   	nop
c002206c:	83 c4 0c             	add    esp,0xc
c002206f:	c3                   	ret    

c0022070 <MMX::available()>:
c0022070:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022075:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002207b:	83 e0 20             	and    eax,0x20
c002207e:	84 c0                	test   al,al
c0022080:	0f 95 c0             	setne  al
c0022083:	c3                   	ret    

c0022084 <MMX::open(int, int, void*)>:
c0022084:	83 ec 0c             	sub    esp,0xc
c0022087:	e8 e0 0f 00 00       	call   c002306c <x87Init>
c002208c:	b8 00 00 00 00       	mov    eax,0x0
c0022091:	83 c4 0c             	add    esp,0xc
c0022094:	c3                   	ret    
c0022095:	90                   	nop

c0022096 <MMX::close(int, int, void*)>:
c0022096:	83 ec 0c             	sub    esp,0xc
c0022099:	e8 e8 0f 00 00       	call   c0023086 <x87Close>
c002209e:	b8 00 00 00 00       	mov    eax,0x0
c00220a3:	83 c4 0c             	add    esp,0xc
c00220a6:	c3                   	ret    
c00220a7:	90                   	nop

c00220a8 <MMX::save(void*)>:
c00220a8:	83 ec 0c             	sub    esp,0xc
c00220ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220af:	83 ec 0c             	sub    esp,0xc
c00220b2:	50                   	push   eax
c00220b3:	e8 a9 0f 00 00       	call   c0023061 <x87Save>
c00220b8:	83 c4 10             	add    esp,0x10
c00220bb:	90                   	nop
c00220bc:	83 c4 0c             	add    esp,0xc
c00220bf:	c3                   	ret    

c00220c0 <MMX::load(void*)>:
c00220c0:	83 ec 0c             	sub    esp,0xc
c00220c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220c7:	83 ec 0c             	sub    esp,0xc
c00220ca:	50                   	push   eax
c00220cb:	e8 97 0f 00 00       	call   c0023067 <x87Load>
c00220d0:	83 c4 10             	add    esp,0x10
c00220d3:	90                   	nop
c00220d4:	83 c4 0c             	add    esp,0xc
c00220d7:	c3                   	ret    

c00220d8 <MMX::MMX()>:
c00220d8:	83 ec 0c             	sub    esp,0xc
c00220db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220df:	83 ec 08             	sub    esp,0x8
c00220e2:	68 a4 90 02 c0       	push   0xc00290a4
c00220e7:	50                   	push   eax
c00220e8:	e8 59 1a ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c00220ed:	83 c4 10             	add    esp,0x10
c00220f0:	ba b4 90 02 c0       	mov    edx,0xc00290b4
c00220f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f9:	89 10                	mov    DWORD PTR [eax],edx
c00220fb:	90                   	nop
c00220fc:	83 c4 0c             	add    esp,0xc
c00220ff:	c3                   	ret    

c0022100 <SSE::open(int, int, void*)>:
c0022100:	83 ec 0c             	sub    esp,0xc
c0022103:	e8 1f 0f 00 00       	call   c0023027 <sseInit>
c0022108:	b8 00 00 00 00       	mov    eax,0x0
c002210d:	83 c4 0c             	add    esp,0xc
c0022110:	c3                   	ret    
c0022111:	90                   	nop

c0022112 <SSE::close(int, int, void*)>:
c0022112:	83 ec 0c             	sub    esp,0xc
c0022115:	e8 1d 0f 00 00       	call   c0023037 <sseClose>
c002211a:	b8 00 00 00 00       	mov    eax,0x0
c002211f:	83 c4 0c             	add    esp,0xc
c0022122:	c3                   	ret    
c0022123:	90                   	nop

c0022124 <SSE::available()>:
c0022124:	83 ec 1c             	sub    esp,0x1c
c0022127:	e8 d4 0e 00 00       	call   c0023000 <sseDetect>
c002212c:	85 c0                	test   eax,eax
c002212e:	0f 95 c0             	setne  al
c0022131:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022135:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022139:	83 c4 1c             	add    esp,0x1c
c002213c:	c3                   	ret    
c002213d:	90                   	nop

c002213e <SSE::save(void*)>:
c002213e:	83 ec 0c             	sub    esp,0xc
c0022141:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022145:	83 ec 0c             	sub    esp,0xc
c0022148:	50                   	push   eax
c0022149:	e8 cd 0e 00 00       	call   c002301b <sseSave>
c002214e:	83 c4 10             	add    esp,0x10
c0022151:	90                   	nop
c0022152:	83 c4 0c             	add    esp,0xc
c0022155:	c3                   	ret    

c0022156 <SSE::load(void*)>:
c0022156:	83 ec 0c             	sub    esp,0xc
c0022159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002215d:	83 ec 0c             	sub    esp,0xc
c0022160:	50                   	push   eax
c0022161:	e8 bb 0e 00 00       	call   c0023021 <sseLoad>
c0022166:	83 c4 10             	add    esp,0x10
c0022169:	90                   	nop
c002216a:	83 c4 0c             	add    esp,0xc
c002216d:	c3                   	ret    

c002216e <SSE::SSE()>:
c002216e:	83 ec 0c             	sub    esp,0xc
c0022171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022175:	83 ec 08             	sub    esp,0x8
c0022178:	68 e4 90 02 c0       	push   0xc00290e4
c002217d:	50                   	push   eax
c002217e:	e8 c3 19 ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c0022183:	83 c4 10             	add    esp,0x10
c0022186:	ba f4 90 02 c0       	mov    edx,0xc00290f4
c002218b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218f:	89 10                	mov    DWORD PTR [eax],edx
c0022191:	90                   	nop
c0022192:	83 c4 0c             	add    esp,0xc
c0022195:	c3                   	ret    

c0022196 <x87::open(int, int, void*)>:
c0022196:	83 ec 0c             	sub    esp,0xc
c0022199:	e8 ce 0e 00 00       	call   c002306c <x87Init>
c002219e:	b8 00 00 00 00       	mov    eax,0x0
c00221a3:	83 c4 0c             	add    esp,0xc
c00221a6:	c3                   	ret    
c00221a7:	90                   	nop

c00221a8 <x87::close(int, int, void*)>:
c00221a8:	83 ec 0c             	sub    esp,0xc
c00221ab:	e8 d6 0e 00 00       	call   c0023086 <x87Close>
c00221b0:	b8 00 00 00 00       	mov    eax,0x0
c00221b5:	83 c4 0c             	add    esp,0xc
c00221b8:	c3                   	ret    
c00221b9:	90                   	nop

c00221ba <x87::available()>:
c00221ba:	83 ec 0c             	sub    esp,0xc
c00221bd:	e8 84 0e 00 00       	call   c0023046 <x87Detect>
c00221c2:	85 c0                	test   eax,eax
c00221c4:	0f 95 c0             	setne  al
c00221c7:	83 c4 0c             	add    esp,0xc
c00221ca:	c3                   	ret    
c00221cb:	90                   	nop

c00221cc <x87::save(void*)>:
c00221cc:	83 ec 0c             	sub    esp,0xc
c00221cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221d3:	83 ec 0c             	sub    esp,0xc
c00221d6:	50                   	push   eax
c00221d7:	e8 85 0e 00 00       	call   c0023061 <x87Save>
c00221dc:	83 c4 10             	add    esp,0x10
c00221df:	90                   	nop
c00221e0:	83 c4 0c             	add    esp,0xc
c00221e3:	c3                   	ret    

c00221e4 <x87::load(void*)>:
c00221e4:	83 ec 0c             	sub    esp,0xc
c00221e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221eb:	83 ec 0c             	sub    esp,0xc
c00221ee:	50                   	push   eax
c00221ef:	e8 73 0e 00 00       	call   c0023067 <x87Load>
c00221f4:	83 c4 10             	add    esp,0x10
c00221f7:	90                   	nop
c00221f8:	83 c4 0c             	add    esp,0xc
c00221fb:	c3                   	ret    

c00221fc <x87::x87()>:
c00221fc:	83 ec 0c             	sub    esp,0xc
c00221ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022203:	83 ec 08             	sub    esp,0x8
c0022206:	68 24 91 02 c0       	push   0xc0029124
c002220b:	50                   	push   eax
c002220c:	e8 35 19 ff ff       	call   c0013b46 <FPU::FPU(char const*)>
c0022211:	83 c4 10             	add    esp,0x10
c0022214:	ba 34 91 02 c0       	mov    edx,0xc0029134
c0022219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221d:	89 10                	mov    DWORD PTR [eax],edx
c002221f:	90                   	nop
c0022220:	83 c4 0c             	add    esp,0xc
c0022223:	c3                   	ret    

c0022224 <APIC::disable()>:
c0022224:	90                   	nop
c0022225:	c3                   	ret    

c0022226 <APIC::close(int, int, void*)>:
c0022226:	55                   	push   ebp
c0022227:	89 e5                	mov    ebp,esp
c0022229:	83 ec 08             	sub    esp,0x8
c002222c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002222f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022231:	83 c0 3c             	add    eax,0x3c
c0022234:	8b 00                	mov    eax,DWORD PTR [eax]
c0022236:	83 ec 0c             	sub    esp,0xc
c0022239:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002223c:	ff d0                	call   eax
c002223e:	83 c4 10             	add    esp,0x10
c0022241:	b8 00 00 00 00       	mov    eax,0x0
c0022246:	c9                   	leave  
c0022247:	c3                   	ret    

c0022248 <IOAPIC::close(int, int, void*)>:
c0022248:	b8 00 00 00 00       	mov    eax,0x0
c002224d:	c3                   	ret    

c002224e <APIC::io_wait()>:
c002224e:	eb 00                	jmp    c0022250 <APIC::io_wait()+0x2>
c0022250:	eb 00                	jmp    c0022252 <APIC::io_wait()+0x4>
c0022252:	90                   	nop
c0022253:	c3                   	ret    

c0022254 <APIC::getBase()>:
c0022254:	55                   	push   ebp
c0022255:	89 e5                	mov    ebp,esp
c0022257:	83 ec 18             	sub    esp,0x18
c002225a:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002225f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022265:	83 e0 08             	and    eax,0x8
c0022268:	84 c0                	test   al,al
c002226a:	75 07                	jne    c0022273 <APIC::getBase()+0x1f>
c002226c:	b8 00 00 00 00       	mov    eax,0x0
c0022271:	eb 21                	jmp    c0022294 <APIC::getBase()+0x40>
c0022273:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022278:	83 ec 08             	sub    esp,0x8
c002227b:	6a 1b                	push   0x1b
c002227d:	50                   	push   eax
c002227e:	e8 83 c4 fe ff       	call   c000e706 <Computer::rdmsr(unsigned int)>
c0022283:	83 c4 10             	add    esp,0x10
c0022286:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022289:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002228c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002228f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022294:	c9                   	leave  
c0022295:	c3                   	ret    

c0022296 <APIC::eoi(unsigned char)>:
c0022296:	55                   	push   ebp
c0022297:	89 e5                	mov    ebp,esp
c0022299:	83 ec 28             	sub    esp,0x28
c002229c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002229f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00222a2:	83 ec 0c             	sub    esp,0xc
c00222a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222a8:	e8 a7 ff ff ff       	call   c0022254 <APIC::getBase()>
c00222ad:	83 c4 10             	add    esp,0x10
c00222b0:	05 b0 00 00 00       	add    eax,0xb0
c00222b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00222b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00222bb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00222c1:	90                   	nop
c00222c2:	c9                   	leave  
c00222c3:	c3                   	ret    

c00222c4 <APIC::open(int, int, void*)>:
c00222c4:	55                   	push   ebp
c00222c5:	89 e5                	mov    ebp,esp
c00222c7:	57                   	push   edi
c00222c8:	56                   	push   esi
c00222c9:	53                   	push   ebx
c00222ca:	83 ec 1c             	sub    esp,0x1c
c00222cd:	83 ec 0c             	sub    esp,0xc
c00222d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222d3:	e8 7c ff ff ff       	call   c0022254 <APIC::getBase()>
c00222d8:	83 c4 10             	add    esp,0x10
c00222db:	05 f0 00 00 00       	add    eax,0xf0
c00222e0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00222e3:	83 ec 0c             	sub    esp,0xc
c00222e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222e9:	e8 66 ff ff ff       	call   c0022254 <APIC::getBase()>
c00222ee:	83 c4 10             	add    esp,0x10
c00222f1:	89 c2                	mov    edx,eax
c00222f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222f6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222fc:	0f b6 f8             	movzx  edi,al
c00222ff:	89 d0                	mov    eax,edx
c0022301:	ba 00 00 00 00       	mov    edx,0x0
c0022306:	89 c1                	mov    ecx,eax
c0022308:	80 e5 ff             	and    ch,0xff
c002230b:	89 cb                	mov    ebx,ecx
c002230d:	0f b6 f2             	movzx  esi,dl
c0022310:	89 d8                	mov    eax,ebx
c0022312:	89 f2                	mov    edx,esi
c0022314:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022317:	8d 5f 08             	lea    ebx,[edi+0x8]
c002231a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002231e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022322:	83 e0 00             	and    eax,0x0
c0022325:	09 d0                	or     eax,edx
c0022327:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002232b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002232e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022334:	8d 50 01             	lea    edx,[eax+0x1]
c0022337:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002233a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022340:	0f b6 d0             	movzx  edx,al
c0022343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022346:	83 c2 08             	add    edx,0x8
c0022349:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002234d:	0f b6 c9             	movzx  ecx,cl
c0022350:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022356:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002235a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002235d:	8b 00                	mov    eax,DWORD PTR [eax]
c002235f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022362:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c0022369:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002236c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002236f:	89 10                	mov    DWORD PTR [eax],edx
c0022371:	b8 00 00 00 00       	mov    eax,0x0
c0022376:	8d 65 f4             	lea    esp,[ebp-0xc]
c0022379:	5b                   	pop    ebx
c002237a:	5e                   	pop    esi
c002237b:	5f                   	pop    edi
c002237c:	5d                   	pop    ebp
c002237d:	c3                   	ret    

c002237e <IOAPIC::IOAPIC()>:
c002237e:	83 ec 0c             	sub    esp,0xc
c0022381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022385:	83 ec 08             	sub    esp,0x8
c0022388:	68 64 91 02 c0       	push   0xc0029164
c002238d:	50                   	push   eax
c002238e:	e8 bf 14 ff ff       	call   c0013852 <Device::Device(char const*)>
c0022393:	83 c4 10             	add    esp,0x10
c0022396:	ba 8c 92 02 c0       	mov    edx,0xc002928c
c002239b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002239f:	89 10                	mov    DWORD PTR [eax],edx
c00223a1:	90                   	nop
c00223a2:	83 c4 0c             	add    esp,0xc
c00223a5:	c3                   	ret    

c00223a6 <APIC::APIC()>:
c00223a6:	53                   	push   ebx
c00223a7:	83 ec 18             	sub    esp,0x18
c00223aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ae:	83 ec 08             	sub    esp,0x8
c00223b1:	68 6c 91 02 c0       	push   0xc002916c
c00223b6:	50                   	push   eax
c00223b7:	e8 ee 1b ff ff       	call   c0013faa <InterruptController::InterruptController(char const*)>
c00223bc:	83 c4 10             	add    esp,0x10
c00223bf:	ba 44 92 02 c0       	mov    edx,0xc0029244
c00223c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c8:	89 10                	mov    DWORD PTR [eax],edx
c00223ca:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00223cf:	83 f0 01             	xor    eax,0x1
c00223d2:	84 c0                	test   al,al
c00223d4:	0f 84 96 00 00 00    	je     c0022470 <APIC::APIC()+0xca>
c00223da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00223df:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c00223e4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00223e8:	73 7f                	jae    c0022469 <APIC::APIC()+0xc3>
c00223ea:	83 ec 0c             	sub    esp,0xc
c00223ed:	68 68 01 00 00       	push   0x168
c00223f2:	e8 71 fd fe ff       	call   c0012168 <operator new(unsigned long)>
c00223f7:	83 c4 10             	add    esp,0x10
c00223fa:	89 c3                	mov    ebx,eax
c00223fc:	83 ec 0c             	sub    esp,0xc
c00223ff:	53                   	push   ebx
c0022400:	e8 79 ff ff ff       	call   c002237e <IOAPIC::IOAPIC()>
c0022405:	83 c4 10             	add    esp,0x10
c0022408:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002240c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0022411:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022415:	89 14 85 40 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39c0],edx
c002241c:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c0022421:	40                   	inc    eax
c0022422:	a3 20 c6 02 c0       	mov    ds:0xc002c620,eax
c0022427:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002242c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022432:	83 ec 08             	sub    esp,0x8
c0022435:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022439:	50                   	push   eax
c002243a:	e8 23 12 ff ff       	call   c0013662 <Device::addChild(Device*)>
c002243f:	83 c4 10             	add    esp,0x10
c0022442:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022446:	8b 00                	mov    eax,DWORD PTR [eax]
c0022448:	83 c0 08             	add    eax,0x8
c002244b:	8b 00                	mov    eax,DWORD PTR [eax]
c002244d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022452:	6a 00                	push   0x0
c0022454:	6a 00                	push   0x0
c0022456:	52                   	push   edx
c0022457:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002245b:	ff d0                	call   eax
c002245d:	83 c4 10             	add    esp,0x10
c0022460:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022464:	e9 76 ff ff ff       	jmp    c00223df <APIC::APIC()+0x39>
c0022469:	c6 05 60 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c660,0x1
c0022470:	90                   	nop
c0022471:	83 c4 18             	add    esp,0x18
c0022474:	5b                   	pop    ebx
c0022475:	c3                   	ret    

c0022476 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022476:	55                   	push   ebp
c0022477:	89 e5                	mov    ebp,esp
c0022479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002247c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022482:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022485:	72 1d                	jb     c00224a4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002248a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022493:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0022499:	01 d0                	add    eax,edx
c002249b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002249e:	73 04                	jae    c00224a4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00224a0:	b0 01                	mov    al,0x1
c00224a2:	eb 02                	jmp    c00224a6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00224a4:	b0 00                	mov    al,0x0
c00224a6:	5d                   	pop    ebp
c00224a7:	c3                   	ret    

c00224a8 <IOAPIC::read(int)>:
c00224a8:	55                   	push   ebp
c00224a9:	89 e5                	mov    ebp,esp
c00224ab:	83 ec 10             	sub    esp,0x10
c00224ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00224b7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00224ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00224bd:	0f b6 d0             	movzx  edx,al
c00224c0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224c3:	89 10                	mov    DWORD PTR [eax],edx
c00224c5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224c8:	83 c0 10             	add    eax,0x10
c00224cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00224cd:	c9                   	leave  
c00224ce:	c3                   	ret    
c00224cf:	90                   	nop

c00224d0 <IOAPIC::open(int, int, void*)>:
c00224d0:	55                   	push   ebp
c00224d1:	89 e5                	mov    ebp,esp
c00224d3:	57                   	push   edi
c00224d4:	56                   	push   esi
c00224d5:	53                   	push   ebx
c00224d6:	83 ec 0c             	sub    esp,0xc
c00224d9:	83 ec 0c             	sub    esp,0xc
c00224dc:	68 97 91 02 c0       	push   0xc0029197
c00224e1:	e8 71 fd fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00224e6:	83 c4 10             	add    esp,0x10
c00224e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224ef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224f8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224fe:	8b 14 85 e0 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5320]
c0022505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022508:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002250e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022511:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022517:	8b 14 85 60 ad 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd52a0]
c002251e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022521:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002252a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022533:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022539:	0f b6 f8             	movzx  edi,al
c002253c:	89 d0                	mov    eax,edx
c002253e:	ba 00 00 00 00       	mov    edx,0x0
c0022543:	89 c1                	mov    ecx,eax
c0022545:	80 e5 ff             	and    ch,0xff
c0022548:	89 cb                	mov    ebx,ecx
c002254a:	0f b6 f2             	movzx  esi,dl
c002254d:	89 d8                	mov    eax,ebx
c002254f:	89 f2                	mov    edx,esi
c0022551:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022554:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022557:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002255b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002255f:	83 e0 00             	and    eax,0x0
c0022562:	09 d0                	or     eax,edx
c0022564:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002256b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022571:	8d 50 01             	lea    edx,[eax+0x1]
c0022574:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022577:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002257d:	0f b6 d0             	movzx  edx,al
c0022580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022583:	83 c2 08             	add    edx,0x8
c0022586:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002258a:	0f b6 c9             	movzx  ecx,cl
c002258d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022593:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022597:	83 ec 08             	sub    esp,0x8
c002259a:	6a 01                	push   0x1
c002259c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002259f:	e8 04 ff ff ff       	call   c00224a8 <IOAPIC::read(int)>
c00225a4:	83 c4 10             	add    esp,0x10
c00225a7:	c1 f8 10             	sar    eax,0x10
c00225aa:	0f b6 c0             	movzx  eax,al
c00225ad:	8d 50 01             	lea    edx,[eax+0x1]
c00225b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225b3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00225b9:	b8 00 00 00 00       	mov    eax,0x0
c00225be:	8d 65 f4             	lea    esp,[ebp-0xc]
c00225c1:	5b                   	pop    ebx
c00225c2:	5e                   	pop    esi
c00225c3:	5f                   	pop    edi
c00225c4:	5d                   	pop    ebp
c00225c5:	c3                   	ret    

c00225c6 <IOAPIC::write(int, int)>:
c00225c6:	55                   	push   ebp
c00225c7:	89 e5                	mov    ebp,esp
c00225c9:	83 ec 10             	sub    esp,0x10
c00225cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225cf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00225d5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00225d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225db:	0f b6 d0             	movzx  edx,al
c00225de:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225e1:	89 10                	mov    DWORD PTR [eax],edx
c00225e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225e6:	8d 50 10             	lea    edx,[eax+0x10]
c00225e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225ec:	89 02                	mov    DWORD PTR [edx],eax
c00225ee:	90                   	nop
c00225ef:	c9                   	leave  
c00225f0:	c3                   	ret    
c00225f1:	90                   	nop

c00225f2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c00225f2:	55                   	push   ebp
c00225f3:	89 e5                	mov    ebp,esp
c00225f5:	83 ec 20             	sub    esp,0x20
c00225f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225fb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00225fe:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022601:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022604:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022607:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002260a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002260d:	88 d0                	mov    al,dl
c002260f:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0022612:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c0022616:	83 c0 08             	add    eax,0x8
c0022619:	01 c0                	add    eax,eax
c002261b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002261e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c0022622:	83 c0 08             	add    eax,0x8
c0022625:	01 c0                	add    eax,eax
c0022627:	40                   	inc    eax
c0022628:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c002262b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c002262e:	50                   	push   eax
c002262f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022632:	e8 71 fe ff ff       	call   c00224a8 <IOAPIC::read(int)>
c0022637:	83 c4 08             	add    esp,0x8
c002263a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002263d:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c0022644:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0022647:	c1 e0 18             	shl    eax,0x18
c002264a:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002264d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022650:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0022653:	52                   	push   edx
c0022654:	50                   	push   eax
c0022655:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022658:	e8 69 ff ff ff       	call   c00225c6 <IOAPIC::write(int, int)>
c002265d:	83 c4 0c             	add    esp,0xc
c0022660:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022663:	50                   	push   eax
c0022664:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022667:	e8 3c fe ff ff       	call   c00224a8 <IOAPIC::read(int)>
c002266c:	83 c4 08             	add    esp,0x8
c002266f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022672:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c0022679:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c0022680:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c0022687:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c002268e:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c0022692:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c0022695:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0022698:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002269b:	52                   	push   edx
c002269c:	50                   	push   eax
c002269d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00226a0:	e8 21 ff ff ff       	call   c00225c6 <IOAPIC::write(int, int)>
c00226a5:	83 c4 0c             	add    esp,0xc
c00226a8:	90                   	nop
c00226a9:	c9                   	leave  
c00226aa:	c3                   	ret    
c00226ab:	90                   	nop

c00226ac <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00226ac:	55                   	push   ebp
c00226ad:	89 e5                	mov    ebp,esp
c00226af:	56                   	push   esi
c00226b0:	53                   	push   ebx
c00226b1:	83 ec 20             	sub    esp,0x20
c00226b4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00226b7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00226ba:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c00226be:	74 28                	je     c00226e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226c0:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00226c4:	7f 12                	jg     c00226d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c00226c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00226c9:	05 e0 96 02 c0       	add    eax,0xc00296e0
c00226ce:	8a 00                	mov    al,BYTE PTR [eax]
c00226d0:	0f b6 c0             	movzx  eax,al
c00226d3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00226d6:	eb 10                	jmp    c00226e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226d8:	83 ec 0c             	sub    esp,0xc
c00226db:	68 a8 91 02 c0       	push   0xc00291a8
c00226e0:	e8 1f 72 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c00226e5:	83 c4 10             	add    esp,0x10
c00226e8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00226ec:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226f1:	83 ec 08             	sub    esp,0x8
c00226f4:	50                   	push   eax
c00226f5:	68 e0 91 02 c0       	push   0xc00291e0
c00226fa:	e8 58 fb fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00226ff:	83 c4 10             	add    esp,0x10
c0022702:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0022709:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c002270e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0022711:	7d 58                	jge    c002276b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c0022713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022716:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c002271d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022720:	83 ec 08             	sub    esp,0x8
c0022723:	52                   	push   edx
c0022724:	50                   	push   eax
c0022725:	e8 4c fd ff ff       	call   c0022476 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002272a:	83 c4 10             	add    esp,0x10
c002272d:	84 c0                	test   al,al
c002272f:	74 35                	je     c0022766 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c0022731:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022734:	8b 1c 85 40 c6 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd39c0]
c002273b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002273e:	83 c0 20             	add    eax,0x20
c0022741:	0f b6 f0             	movzx  esi,al
c0022744:	e8 38 51 ff ff       	call   c0017881 <getCPUNumber()>
c0022749:	99                   	cdq    
c002274a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002274d:	0f b6 c9             	movzx  ecx,cl
c0022750:	83 ec 0c             	sub    esp,0xc
c0022753:	56                   	push   esi
c0022754:	52                   	push   edx
c0022755:	50                   	push   eax
c0022756:	51                   	push   ecx
c0022757:	53                   	push   ebx
c0022758:	e8 95 fe ff ff       	call   c00225f2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c002275d:	83 c4 20             	add    esp,0x20
c0022760:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0022764:	eb 05                	jmp    c002276b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c0022766:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0022769:	eb 9e                	jmp    c0022709 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c002276b:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002276e:	83 f0 01             	xor    eax,0x1
c0022771:	84 c0                	test   al,al
c0022773:	74 10                	je     c0022785 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c0022775:	83 ec 0c             	sub    esp,0xc
c0022778:	68 f7 91 02 c0       	push   0xc00291f7
c002277d:	e8 82 71 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0022782:	83 c4 10             	add    esp,0x10
c0022785:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022789:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022790:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c0022794:	7f 65                	jg     c00227fb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c0022796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022799:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002279c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227a3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227a6:	01 ca                	add    edx,ecx
c00227a8:	83 c2 54             	add    edx,0x54
c00227ab:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00227af:	85 c0                	test   eax,eax
c00227b1:	75 43                	jne    c00227f6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c00227b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227b9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227c0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227c3:	01 ca                	add    edx,ecx
c00227c5:	8d 4a 54             	lea    ecx,[edx+0x54]
c00227c8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00227cb:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227d5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227df:	01 ca                	add    edx,ecx
c00227e1:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00227e7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00227ea:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00227f1:	83 e8 20             	sub    eax,0x20
c00227f4:	eb 1a                	jmp    c0022810 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c00227f6:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00227f9:	eb 95                	jmp    c0022790 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c00227fb:	83 ec 0c             	sub    esp,0xc
c00227fe:	68 04 92 02 c0       	push   0xc0029204
c0022803:	e8 fc 70 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0022808:	83 c4 10             	add    esp,0x10
c002280b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022810:	8d 65 f8             	lea    esp,[ebp-0x8]
c0022813:	5b                   	pop    ebx
c0022814:	5e                   	pop    esi
c0022815:	5d                   	pop    ebp
c0022816:	c3                   	ret    
c0022817:	90                   	nop

c0022818 <PIC::disable()>:
c0022818:	55                   	push   ebp
c0022819:	89 e5                	mov    ebp,esp
c002281b:	83 ec 10             	sub    esp,0x10
c002281e:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022824:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0022828:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002282b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002282f:	ee                   	out    dx,al
c0022830:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0022836:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002283a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002283d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022841:	ee                   	out    dx,al
c0022842:	90                   	nop
c0022843:	c9                   	leave  
c0022844:	c3                   	ret    
c0022845:	90                   	nop

c0022846 <PIC::close(int, int, void*)>:
c0022846:	55                   	push   ebp
c0022847:	89 e5                	mov    ebp,esp
c0022849:	83 ec 08             	sub    esp,0x8
c002284c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002284f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022851:	83 c0 3c             	add    eax,0x3c
c0022854:	8b 00                	mov    eax,DWORD PTR [eax]
c0022856:	83 ec 0c             	sub    esp,0xc
c0022859:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002285c:	ff d0                	call   eax
c002285e:	83 c4 10             	add    esp,0x10
c0022861:	b8 00 00 00 00       	mov    eax,0x0
c0022866:	c9                   	leave  
c0022867:	c3                   	ret    

c0022868 <PIC::PIC()>:
c0022868:	83 ec 0c             	sub    esp,0xc
c002286b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286f:	83 ec 08             	sub    esp,0x8
c0022872:	68 b0 92 02 c0       	push   0xc00292b0
c0022877:	50                   	push   eax
c0022878:	e8 2d 17 ff ff       	call   c0013faa <InterruptController::InterruptController(char const*)>
c002287d:	83 c4 10             	add    esp,0x10
c0022880:	ba dc 92 02 c0       	mov    edx,0xc00292dc
c0022885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022889:	89 10                	mov    DWORD PTR [eax],edx
c002288b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022895:	0f b6 d0             	movzx  edx,al
c0022898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289c:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00228a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ad:	0f b6 d0             	movzx  edx,al
c00228b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b4:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00228b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228c3:	8d 50 01             	lea    edx,[eax+0x1]
c00228c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228ca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228d0:	0f b6 d0             	movzx  edx,al
c00228d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228db:	83 e1 3f             	and    ecx,0x3f
c00228de:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00228e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228ec:	0f b6 d0             	movzx  edx,al
c00228ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f3:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00228fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022904:	0f b6 d0             	movzx  edx,al
c0022907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022914:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002291a:	8d 50 01             	lea    edx,[eax+0x1]
c002291d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022921:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022927:	0f b6 d0             	movzx  edx,al
c002292a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022932:	83 e1 3f             	and    ecx,0x3f
c0022935:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022939:	90                   	nop
c002293a:	83 c4 0c             	add    esp,0xc
c002293d:	c3                   	ret    

c002293e <PIC::ioWait()>:
c002293e:	eb 00                	jmp    c0022940 <PIC::ioWait()+0x2>
c0022940:	eb 00                	jmp    c0022942 <PIC::ioWait()+0x4>
c0022942:	90                   	nop
c0022943:	c3                   	ret    

c0022944 <PIC::getIRQReg(int)>:
c0022944:	55                   	push   ebp
c0022945:	89 e5                	mov    ebp,esp
c0022947:	83 ec 10             	sub    esp,0x10
c002294a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002294d:	0f b6 c0             	movzx  eax,al
c0022950:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022956:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022959:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002295c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022960:	ee                   	out    dx,al
c0022961:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022964:	0f b6 c0             	movzx  eax,al
c0022967:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002296d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022970:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022973:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022977:	ee                   	out    dx,al
c0022978:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002297e:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022982:	89 c2                	mov    edx,eax
c0022984:	ec                   	in     al,dx
c0022985:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022988:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002298b:	0f b6 c0             	movzx  eax,al
c002298e:	c1 e0 08             	shl    eax,0x8
c0022991:	89 c1                	mov    ecx,eax
c0022993:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022999:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002299d:	89 c2                	mov    edx,eax
c002299f:	ec                   	in     al,dx
c00229a0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00229a3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00229a6:	0f b6 c0             	movzx  eax,al
c00229a9:	09 c8                	or     eax,ecx
c00229ab:	c9                   	leave  
c00229ac:	c3                   	ret    
c00229ad:	90                   	nop

c00229ae <PIC::eoi(unsigned char)>:
c00229ae:	55                   	push   ebp
c00229af:	89 e5                	mov    ebp,esp
c00229b1:	83 ec 14             	sub    esp,0x14
c00229b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00229b7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00229ba:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229be:	75 1e                	jne    c00229de <PIC::eoi(unsigned char)+0x30>
c00229c0:	6a 0b                	push   0xb
c00229c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229c5:	e8 7a ff ff ff       	call   c0022944 <PIC::getIRQReg(int)>
c00229ca:	83 c4 08             	add    esp,0x8
c00229cd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00229d1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00229d5:	25 80 00 00 00       	and    eax,0x80
c00229da:	85 c0                	test   eax,eax
c00229dc:	74 5f                	je     c0022a3d <PIC::eoi(unsigned char)+0x8f>
c00229de:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00229e2:	75 2d                	jne    c0022a11 <PIC::eoi(unsigned char)+0x63>
c00229e4:	6a 0b                	push   0xb
c00229e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229e9:	e8 56 ff ff ff       	call   c0022944 <PIC::getIRQReg(int)>
c00229ee:	83 c4 08             	add    esp,0x8
c00229f1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00229f5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00229f8:	66 85 c0             	test   ax,ax
c00229fb:	78 14                	js     c0022a11 <PIC::eoi(unsigned char)+0x63>
c00229fd:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022a03:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022a07:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022a0a:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022a0e:	ee                   	out    dx,al
c0022a0f:	eb 2d                	jmp    c0022a3e <PIC::eoi(unsigned char)+0x90>
c0022a11:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022a15:	76 12                	jbe    c0022a29 <PIC::eoi(unsigned char)+0x7b>
c0022a17:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022a1d:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022a21:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022a24:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022a28:	ee                   	out    dx,al
c0022a29:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022a2f:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022a33:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022a36:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022a3a:	ee                   	out    dx,al
c0022a3b:	eb 01                	jmp    c0022a3e <PIC::eoi(unsigned char)+0x90>
c0022a3d:	90                   	nop
c0022a3e:	c9                   	leave  
c0022a3f:	c3                   	ret    

c0022a40 <PIC::remap()>:
c0022a40:	55                   	push   ebp
c0022a41:	89 e5                	mov    ebp,esp
c0022a43:	83 ec 48             	sub    esp,0x48
c0022a46:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022a4d:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022a54:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022a5a:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022a5d:	89 c2                	mov    edx,eax
c0022a5f:	ec                   	in     al,dx
c0022a60:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022a63:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022a66:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022a69:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022a6f:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022a72:	89 c2                	mov    edx,eax
c0022a74:	ec                   	in     al,dx
c0022a75:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022a78:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022a7b:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022a7e:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022a84:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022a88:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022a8b:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022a8e:	ee                   	out    dx,al
c0022a8f:	83 ec 0c             	sub    esp,0xc
c0022a92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a95:	e8 a4 fe ff ff       	call   c002293e <PIC::ioWait()>
c0022a9a:	83 c4 10             	add    esp,0x10
c0022a9d:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022aa3:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022aa7:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022aaa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022aad:	ee                   	out    dx,al
c0022aae:	83 ec 0c             	sub    esp,0xc
c0022ab1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ab4:	e8 85 fe ff ff       	call   c002293e <PIC::ioWait()>
c0022ab9:	83 c4 10             	add    esp,0x10
c0022abc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022abf:	0f b6 c0             	movzx  eax,al
c0022ac2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022ac8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022acb:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022ace:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022ad1:	ee                   	out    dx,al
c0022ad2:	83 ec 0c             	sub    esp,0xc
c0022ad5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ad8:	e8 61 fe ff ff       	call   c002293e <PIC::ioWait()>
c0022add:	83 c4 10             	add    esp,0x10
c0022ae0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022ae3:	0f b6 c0             	movzx  eax,al
c0022ae6:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022aec:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022aef:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022af2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022af5:	ee                   	out    dx,al
c0022af6:	83 ec 0c             	sub    esp,0xc
c0022af9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022afc:	e8 3d fe ff ff       	call   c002293e <PIC::ioWait()>
c0022b01:	83 c4 10             	add    esp,0x10
c0022b04:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022b0a:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022b0e:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022b11:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022b14:	ee                   	out    dx,al
c0022b15:	83 ec 0c             	sub    esp,0xc
c0022b18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b1b:	e8 1e fe ff ff       	call   c002293e <PIC::ioWait()>
c0022b20:	83 c4 10             	add    esp,0x10
c0022b23:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022b29:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022b2d:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022b30:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022b33:	ee                   	out    dx,al
c0022b34:	83 ec 0c             	sub    esp,0xc
c0022b37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b3a:	e8 ff fd ff ff       	call   c002293e <PIC::ioWait()>
c0022b3f:	83 c4 10             	add    esp,0x10
c0022b42:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022b48:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022b4c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022b4f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022b52:	ee                   	out    dx,al
c0022b53:	83 ec 0c             	sub    esp,0xc
c0022b56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b59:	e8 e0 fd ff ff       	call   c002293e <PIC::ioWait()>
c0022b5e:	83 c4 10             	add    esp,0x10
c0022b61:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022b67:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022b6b:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022b6e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022b71:	ee                   	out    dx,al
c0022b72:	83 ec 0c             	sub    esp,0xc
c0022b75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b78:	e8 c1 fd ff ff       	call   c002293e <PIC::ioWait()>
c0022b7d:	83 c4 10             	add    esp,0x10
c0022b80:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022b84:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022b8a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022b8d:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022b90:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022b93:	ee                   	out    dx,al
c0022b94:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022b98:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022b9e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022ba1:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022ba4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022ba7:	ee                   	out    dx,al
c0022ba8:	90                   	nop
c0022ba9:	c9                   	leave  
c0022baa:	c3                   	ret    
c0022bab:	90                   	nop

c0022bac <PIC::open(int, int, void*)>:
c0022bac:	55                   	push   ebp
c0022bad:	89 e5                	mov    ebp,esp
c0022baf:	83 ec 18             	sub    esp,0x18
c0022bb2:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022bb8:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022bbc:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022bbf:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022bc3:	ee                   	out    dx,al
c0022bc4:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022bca:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022bce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022bd1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022bd5:	ee                   	out    dx,al
c0022bd6:	83 ec 0c             	sub    esp,0xc
c0022bd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bdc:	e8 5f fe ff ff       	call   c0022a40 <PIC::remap()>
c0022be1:	83 c4 10             	add    esp,0x10
c0022be4:	b8 00 00 00 00       	mov    eax,0x0
c0022be9:	c9                   	leave  
c0022bea:	c3                   	ret    
c0022beb:	90                   	nop

c0022bec <APICTimer::close(int, int, void*)>:
c0022bec:	b8 00 00 00 00       	mov    eax,0x0
c0022bf1:	c3                   	ret    

c0022bf2 <apicTimerHandler(regs*, void*)>:
c0022bf2:	83 ec 0c             	sub    esp,0xc
c0022bf5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bfb:	99                   	cdq    
c0022bfc:	52                   	push   edx
c0022bfd:	50                   	push   eax
c0022bfe:	6a 00                	push   0x0
c0022c00:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022c05:	e8 72 07 00 00       	call   c002337c <__udivdi3>
c0022c0a:	83 c4 10             	add    esp,0x10
c0022c0d:	83 ec 08             	sub    esp,0x8
c0022c10:	52                   	push   edx
c0022c11:	50                   	push   eax
c0022c12:	e8 aa 31 ff ff       	call   c0015dc1 <timerHandler(unsigned long long)>
c0022c17:	83 c4 10             	add    esp,0x10
c0022c1a:	90                   	nop
c0022c1b:	83 c4 0c             	add    esp,0xc
c0022c1e:	c3                   	ret    
c0022c1f:	90                   	nop

c0022c20 <APICTimer::write(int)>:
c0022c20:	53                   	push   ebx
c0022c21:	83 ec 28             	sub    esp,0x28
c0022c24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c2c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c32:	e8 4d 4c ff ff       	call   c0017884 <thisCPU()>
c0022c37:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022c3d:	83 ec 0c             	sub    esp,0xc
c0022c40:	50                   	push   eax
c0022c41:	e8 0e f6 ff ff       	call   c0022254 <APIC::getBase()>
c0022c46:	83 c4 10             	add    esp,0x10
c0022c49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c4d:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c52:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c5c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c64:	05 e0 03 00 00       	add    eax,0x3e0
c0022c69:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022c6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c73:	05 80 03 00 00       	add    eax,0x380
c0022c78:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022c7e:	fb                   	sti    
c0022c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c87:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022c8c:	83 d2 00             	adc    edx,0x0
c0022c8f:	89 c1                	mov    ecx,eax
c0022c91:	89 d3                	mov    ebx,edx
c0022c93:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c98:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c9e:	39 c8                	cmp    eax,ecx
c0022ca0:	89 d0                	mov    eax,edx
c0022ca2:	19 d8                	sbb    eax,ebx
c0022ca4:	73 02                	jae    c0022ca8 <APICTimer::write(int)+0x88>
c0022ca6:	eb d7                	jmp    c0022c7f <APICTimer::write(int)+0x5f>
c0022ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cac:	05 20 03 00 00       	add    eax,0x320
c0022cb1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022cb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cbb:	05 90 03 00 00       	add    eax,0x390
c0022cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cc2:	f7 d0                	not    eax
c0022cc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cc8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022ccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cd0:	ba 00 00 00 00       	mov    edx,0x0
c0022cd5:	f7 f3                	div    ebx
c0022cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cdf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022ce5:	0d 00 00 02 00       	or     eax,0x20000
c0022cea:	89 c2                	mov    edx,eax
c0022cec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cf0:	05 20 03 00 00       	add    eax,0x320
c0022cf5:	89 10                	mov    DWORD PTR [eax],edx
c0022cf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cfb:	05 e0 03 00 00       	add    eax,0x3e0
c0022d00:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022d06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d0a:	05 80 03 00 00       	add    eax,0x380
c0022d0f:	89 c2                	mov    edx,eax
c0022d11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d15:	89 02                	mov    DWORD PTR [edx],eax
c0022d17:	90                   	nop
c0022d18:	83 c4 28             	add    esp,0x28
c0022d1b:	5b                   	pop    ebx
c0022d1c:	c3                   	ret    
c0022d1d:	90                   	nop

c0022d1e <APICTimer::open(int, int, void*)>:
c0022d1e:	57                   	push   edi
c0022d1f:	56                   	push   esi
c0022d20:	53                   	push   ebx
c0022d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d27:	83 c0 24             	add    eax,0x24
c0022d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d2c:	83 ec 08             	sub    esp,0x8
c0022d2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d37:	ff d0                	call   eax
c0022d39:	83 c4 10             	add    esp,0x10
c0022d3c:	e8 43 4b ff ff       	call   c0017884 <thisCPU()>
c0022d41:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d47:	83 ec 0c             	sub    esp,0xc
c0022d4a:	50                   	push   eax
c0022d4b:	e8 04 f5 ff ff       	call   c0022254 <APIC::getBase()>
c0022d50:	83 c4 10             	add    esp,0x10
c0022d53:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d5d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d63:	0f b6 f8             	movzx  edi,al
c0022d66:	89 d0                	mov    eax,edx
c0022d68:	ba 00 00 00 00       	mov    edx,0x0
c0022d6d:	89 c1                	mov    ecx,eax
c0022d6f:	80 e5 ff             	and    ch,0xff
c0022d72:	89 cb                	mov    ebx,ecx
c0022d74:	0f b6 f2             	movzx  esi,dl
c0022d77:	89 d8                	mov    eax,ebx
c0022d79:	89 f2                	mov    edx,esi
c0022d7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d7f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022d82:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022d86:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022d8a:	83 e0 00             	and    eax,0x0
c0022d8d:	09 d0                	or     eax,edx
c0022d8f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d97:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d9d:	8d 50 01             	lea    edx,[eax+0x1]
c0022da0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022da4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022daa:	0f b6 d0             	movzx  edx,al
c0022dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db1:	83 c2 08             	add    edx,0x8
c0022db4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022db8:	0f b6 c9             	movzx  ecx,cl
c0022dbb:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022dc1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022dcd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ddb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022de5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022deb:	83 ec 0c             	sub    esp,0xc
c0022dee:	51                   	push   ecx
c0022def:	6a 01                	push   0x1
c0022df1:	68 f2 2b 02 c0       	push   0xc0022bf2
c0022df6:	52                   	push   edx
c0022df7:	50                   	push   eax
c0022df8:	e8 b9 07 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022dfd:	83 c4 20             	add    esp,0x20
c0022e00:	89 c2                	mov    edx,eax
c0022e02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e06:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022e0c:	b8 00 00 00 00       	mov    eax,0x0
c0022e11:	5b                   	pop    ebx
c0022e12:	5e                   	pop    esi
c0022e13:	5f                   	pop    edi
c0022e14:	c3                   	ret    
c0022e15:	90                   	nop

c0022e16 <APICTimer::APICTimer()>:
c0022e16:	83 ec 0c             	sub    esp,0xc
c0022e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1d:	83 ec 08             	sub    esp,0x8
c0022e20:	68 1c 93 02 c0       	push   0xc002931c
c0022e25:	50                   	push   eax
c0022e26:	e8 07 2f ff ff       	call   c0015d32 <Timer::Timer(char const*)>
c0022e2b:	83 c4 10             	add    esp,0x10
c0022e2e:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0022e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e37:	89 10                	mov    DWORD PTR [eax],edx
c0022e39:	90                   	nop
c0022e3a:	83 c4 0c             	add    esp,0xc
c0022e3d:	c3                   	ret    

c0022e3e <PIT::write(int)>:
c0022e3e:	83 ec 10             	sub    esp,0x10
c0022e41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e49:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e53:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0022e58:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022e5d:	99                   	cdq    
c0022e5e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022e62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e66:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022e6d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022e72:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022e76:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022e7b:	ee                   	out    dx,al
c0022e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e80:	0f b6 c0             	movzx  eax,al
c0022e83:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022e8a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022e8e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022e92:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022e97:	ee                   	out    dx,al
c0022e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e9c:	c1 f8 08             	sar    eax,0x8
c0022e9f:	0f b6 c0             	movzx  eax,al
c0022ea2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022ea9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022ead:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022eb1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022eb6:	ee                   	out    dx,al
c0022eb7:	90                   	nop
c0022eb8:	83 c4 10             	add    esp,0x10
c0022ebb:	c3                   	ret    

c0022ebc <pitHandler(regs*, void*)>:
c0022ebc:	83 ec 0c             	sub    esp,0xc
c0022ebf:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0022ec4:	99                   	cdq    
c0022ec5:	52                   	push   edx
c0022ec6:	50                   	push   eax
c0022ec7:	6a 00                	push   0x0
c0022ec9:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022ece:	e8 a9 04 00 00       	call   c002337c <__udivdi3>
c0022ed3:	83 c4 10             	add    esp,0x10
c0022ed6:	83 ec 08             	sub    esp,0x8
c0022ed9:	52                   	push   edx
c0022eda:	50                   	push   eax
c0022edb:	e8 e1 2e ff ff       	call   c0015dc1 <timerHandler(unsigned long long)>
c0022ee0:	83 c4 10             	add    esp,0x10
c0022ee3:	90                   	nop
c0022ee4:	83 c4 0c             	add    esp,0xc
c0022ee7:	c3                   	ret    

c0022ee8 <PIT::open(int, int, void*)>:
c0022ee8:	83 ec 0c             	sub    esp,0xc
c0022eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eef:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ef1:	83 c0 24             	add    eax,0x24
c0022ef4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ef6:	83 ec 08             	sub    esp,0x8
c0022ef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022efd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f01:	ff d0                	call   eax
c0022f03:	83 c4 10             	add    esp,0x10
c0022f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0a:	83 ec 0c             	sub    esp,0xc
c0022f0d:	6a 00                	push   0x0
c0022f0f:	6a 01                	push   0x1
c0022f11:	68 bc 2e 02 c0       	push   0xc0022ebc
c0022f16:	6a 00                	push   0x0
c0022f18:	50                   	push   eax
c0022f19:	e8 98 06 ff ff       	call   c00135b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022f1e:	83 c4 20             	add    esp,0x20
c0022f21:	89 c2                	mov    edx,eax
c0022f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f27:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022f2d:	b8 00 00 00 00       	mov    eax,0x0
c0022f32:	83 c4 0c             	add    esp,0xc
c0022f35:	c3                   	ret    

c0022f36 <PIT::close(int, int, void*)>:
c0022f36:	83 ec 0c             	sub    esp,0xc
c0022f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f3d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f4b:	6a 01                	push   0x1
c0022f4d:	68 bc 2e 02 c0       	push   0xc0022ebc
c0022f52:	6a 00                	push   0x0
c0022f54:	50                   	push   eax
c0022f55:	e8 ba 06 ff ff       	call   c0013614 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022f5a:	83 c4 10             	add    esp,0x10
c0022f5d:	b8 00 00 00 00       	mov    eax,0x0
c0022f62:	83 c4 0c             	add    esp,0xc
c0022f65:	c3                   	ret    

c0022f66 <PIT::PIT()>:
c0022f66:	83 ec 0c             	sub    esp,0xc
c0022f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6d:	83 ec 08             	sub    esp,0x8
c0022f70:	68 58 93 02 c0       	push   0xc0029358
c0022f75:	50                   	push   eax
c0022f76:	e8 b7 2d ff ff       	call   c0015d32 <Timer::Timer(char const*)>
c0022f7b:	83 c4 10             	add    esp,0x10
c0022f7e:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0022f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f87:	89 10                	mov    DWORD PTR [eax],edx
c0022f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f93:	0f b6 d0             	movzx  edx,al
c0022f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9a:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fa5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fab:	0f b6 d0             	movzx  edx,al
c0022fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fc1:	8d 50 01             	lea    edx,[eax+0x1]
c0022fc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fc8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022fce:	0f b6 d0             	movzx  edx,al
c0022fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022fd9:	83 e1 3f             	and    ecx,0x3f
c0022fdc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022fe0:	90                   	nop
c0022fe1:	83 c4 0c             	add    esp,0xc
c0022fe4:	c3                   	ret    
c0022fe5:	66 90                	xchg   ax,ax
c0022fe7:	66 90                	xchg   ax,ax
c0022fe9:	66 90                	xchg   ax,ax
c0022feb:	66 90                	xchg   ax,ax
c0022fed:	66 90                	xchg   ax,ax
c0022fef:	90                   	nop

c0022ff0 <avxDetect>:
c0022ff0:	b8 00 00 00 00       	mov    eax,0x0
c0022ff5:	c3                   	ret    

c0022ff6 <avxSave>:
c0022ff6:	c3                   	ret    

c0022ff7 <avxLoad>:
c0022ff7:	c3                   	ret    

c0022ff8 <avxInit>:
c0022ff8:	c3                   	ret    

c0022ff9 <avxClose>:
c0022ff9:	c3                   	ret    
c0022ffa:	66 90                	xchg   ax,ax
c0022ffc:	66 90                	xchg   ax,ax
c0022ffe:	66 90                	xchg   ax,ax

c0023000 <sseDetect>:
c0023000:	b8 01 00 00 00       	mov    eax,0x1
c0023005:	0f a2                	cpuid  
c0023007:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002300d:	74 06                	je     c0023015 <sseDetect.noSSE>
c002300f:	b8 01 00 00 00       	mov    eax,0x1
c0023014:	c3                   	ret    

c0023015 <sseDetect.noSSE>:
c0023015:	b8 00 00 00 00       	mov    eax,0x0
c002301a:	c3                   	ret    

c002301b <sseSave>:
c002301b:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023020:	c3                   	ret    

c0023021 <sseLoad>:
c0023021:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023026:	c3                   	ret    

c0023027 <sseInit>:
c0023027:	e8 40 00 00 00       	call   c002306c <x87Init>
c002302c:	0f 20 e0             	mov    eax,cr4
c002302f:	66 0d 00 06          	or     ax,0x600
c0023033:	0f 22 e0             	mov    cr4,eax
c0023036:	c3                   	ret    

c0023037 <sseClose>:
c0023037:	c3                   	ret    
c0023038:	66 90                	xchg   ax,ax
c002303a:	66 90                	xchg   ax,ax
c002303c:	66 90                	xchg   ax,ax
c002303e:	66 90                	xchg   ax,ax

c0023040 <value_37F>:
c0023040:	7f 03                	jg     c0023045 <value_37A+0x1>

c0023042 <value_37E>:
c0023042:	7e 03                	jle    c0023047 <x87Detect+0x1>

c0023044 <value_37A>:
c0023044:	7a 03                	jp     c0023049 <x87Detect+0x3>

c0023046 <x87Detect>:
c0023046:	b8 01 00 00 00       	mov    eax,0x1
c002304b:	0f a2                	cpuid  
c002304d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023053:	74 06                	je     c002305b <x87Detect.nox87>
c0023055:	b8 01 00 00 00       	mov    eax,0x1
c002305a:	c3                   	ret    

c002305b <x87Detect.nox87>:
c002305b:	b8 00 00 00 00       	mov    eax,0x0
c0023060:	c3                   	ret    

c0023061 <x87Save>:
c0023061:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023066:	c3                   	ret    

c0023067 <x87Load>:
c0023067:	dd 64 24 08          	frstor [esp+0x8]
c002306b:	c3                   	ret    

c002306c <x87Init>:
c002306c:	9b db e3             	finit  
c002306f:	0f 20 c0             	mov    eax,cr0
c0023072:	66 25 fb ff          	and    ax,0xfffb
c0023076:	66 0d 22 00          	or     ax,0x22
c002307a:	0f 22 c0             	mov    cr0,eax
c002307d:	0f 06                	clts   
c002307f:	d9 2d 44 30 02 c0    	fldcw  WORD PTR ds:0xc0023044
c0023085:	c3                   	ret    

c0023086 <x87Close>:
c0023086:	c3                   	ret    
c0023087:	90                   	nop

c0023088 <__do_global_ctors_aux>:
c0023088:	a1 b8 5b 02 c0       	mov    eax,ds:0xc0025bb8
c002308d:	83 f8 ff             	cmp    eax,0xffffffff
c0023090:	74 1a                	je     c00230ac <__do_global_ctors_aux+0x24>
c0023092:	55                   	push   ebp
c0023093:	89 e5                	mov    ebp,esp
c0023095:	53                   	push   ebx
c0023096:	52                   	push   edx
c0023097:	bb b8 5b 02 c0       	mov    ebx,0xc0025bb8
c002309c:	ff d0                	call   eax
c002309e:	83 eb 04             	sub    ebx,0x4
c00230a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00230a3:	83 f8 ff             	cmp    eax,0xffffffff
c00230a6:	75 f4                	jne    c002309c <__do_global_ctors_aux+0x14>
c00230a8:	58                   	pop    eax
c00230a9:	5b                   	pop    ebx
c00230aa:	5d                   	pop    ebp
c00230ab:	c3                   	ret    
c00230ac:	c3                   	ret    
c00230ad:	66 90                	xchg   ax,ax
c00230af:	90                   	nop

c00230b0 <__divdi3>:
c00230b0:	55                   	push   ebp
c00230b1:	57                   	push   edi
c00230b2:	56                   	push   esi
c00230b3:	53                   	push   ebx
c00230b4:	83 ec 1c             	sub    esp,0x1c
c00230b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00230bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00230c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00230c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00230ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00230ce:	85 db                	test   ebx,ebx
c00230d0:	0f 88 8e 00 00 00    	js     c0023164 <__divdi3+0xb4>
c00230d6:	89 dd                	mov    ebp,ebx
c00230d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00230e0:	89 d3                	mov    ebx,edx
c00230e2:	85 d2                	test   edx,edx
c00230e4:	79 0d                	jns    c00230f3 <__divdi3+0x43>
c00230e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00230ea:	f7 d8                	neg    eax
c00230ec:	83 d2 00             	adc    edx,0x0
c00230ef:	f7 da                	neg    edx
c00230f1:	89 d3                	mov    ebx,edx
c00230f3:	89 c7                	mov    edi,eax
c00230f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00230f8:	85 db                	test   ebx,ebx
c00230fa:	75 48                	jne    c0023144 <__divdi3+0x94>
c00230fc:	39 ef                	cmp    edi,ebp
c00230fe:	76 24                	jbe    c0023124 <__divdi3+0x74>
c0023100:	89 ea                	mov    edx,ebp
c0023102:	f7 f7                	div    edi
c0023104:	89 c1                	mov    ecx,eax
c0023106:	31 f6                	xor    esi,esi
c0023108:	89 c8                	mov    eax,ecx
c002310a:	89 f2                	mov    edx,esi
c002310c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023110:	85 c9                	test   ecx,ecx
c0023112:	74 07                	je     c002311b <__divdi3+0x6b>
c0023114:	f7 d8                	neg    eax
c0023116:	83 d2 00             	adc    edx,0x0
c0023119:	f7 da                	neg    edx
c002311b:	83 c4 1c             	add    esp,0x1c
c002311e:	5b                   	pop    ebx
c002311f:	5e                   	pop    esi
c0023120:	5f                   	pop    edi
c0023121:	5d                   	pop    ebp
c0023122:	c3                   	ret    
c0023123:	90                   	nop
c0023124:	85 ff                	test   edi,edi
c0023126:	75 0b                	jne    c0023133 <__divdi3+0x83>
c0023128:	b8 01 00 00 00       	mov    eax,0x1
c002312d:	31 d2                	xor    edx,edx
c002312f:	f7 f3                	div    ebx
c0023131:	89 c7                	mov    edi,eax
c0023133:	31 d2                	xor    edx,edx
c0023135:	89 e8                	mov    eax,ebp
c0023137:	f7 f7                	div    edi
c0023139:	89 c6                	mov    esi,eax
c002313b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002313e:	f7 f7                	div    edi
c0023140:	89 c1                	mov    ecx,eax
c0023142:	eb c4                	jmp    c0023108 <__divdi3+0x58>
c0023144:	39 eb                	cmp    ebx,ebp
c0023146:	77 3c                	ja     c0023184 <__divdi3+0xd4>
c0023148:	0f bd f3             	bsr    esi,ebx
c002314b:	83 f6 1f             	xor    esi,0x1f
c002314e:	75 40                	jne    c0023190 <__divdi3+0xe0>
c0023150:	39 eb                	cmp    ebx,ebp
c0023152:	72 09                	jb     c002315d <__divdi3+0xad>
c0023154:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023157:	0f 87 97 00 00 00    	ja     c00231f4 <__divdi3+0x144>
c002315d:	b9 01 00 00 00       	mov    ecx,0x1
c0023162:	eb a4                	jmp    c0023108 <__divdi3+0x58>
c0023164:	f7 d9                	neg    ecx
c0023166:	83 d3 00             	adc    ebx,0x0
c0023169:	f7 db                	neg    ebx
c002316b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002316e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023172:	89 dd                	mov    ebp,ebx
c0023174:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002317c:	e9 5f ff ff ff       	jmp    c00230e0 <__divdi3+0x30>
c0023181:	8d 76 00             	lea    esi,[esi+0x0]
c0023184:	31 f6                	xor    esi,esi
c0023186:	31 c9                	xor    ecx,ecx
c0023188:	e9 7b ff ff ff       	jmp    c0023108 <__divdi3+0x58>
c002318d:	8d 76 00             	lea    esi,[esi+0x0]
c0023190:	b8 20 00 00 00       	mov    eax,0x20
c0023195:	29 f0                	sub    eax,esi
c0023197:	89 f1                	mov    ecx,esi
c0023199:	d3 e3                	shl    ebx,cl
c002319b:	89 fa                	mov    edx,edi
c002319d:	88 c1                	mov    cl,al
c002319f:	d3 ea                	shr    edx,cl
c00231a1:	09 da                	or     edx,ebx
c00231a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00231a7:	89 f1                	mov    ecx,esi
c00231a9:	d3 e7                	shl    edi,cl
c00231ab:	89 eb                	mov    ebx,ebp
c00231ad:	88 c1                	mov    cl,al
c00231af:	d3 eb                	shr    ebx,cl
c00231b1:	89 f1                	mov    ecx,esi
c00231b3:	d3 e5                	shl    ebp,cl
c00231b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00231b8:	88 c1                	mov    cl,al
c00231ba:	d3 ea                	shr    edx,cl
c00231bc:	09 d5                	or     ebp,edx
c00231be:	89 e8                	mov    eax,ebp
c00231c0:	89 da                	mov    edx,ebx
c00231c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00231c6:	89 d3                	mov    ebx,edx
c00231c8:	89 c5                	mov    ebp,eax
c00231ca:	f7 e7                	mul    edi
c00231cc:	39 d3                	cmp    ebx,edx
c00231ce:	72 18                	jb     c00231e8 <__divdi3+0x138>
c00231d0:	74 0a                	je     c00231dc <__divdi3+0x12c>
c00231d2:	89 e9                	mov    ecx,ebp
c00231d4:	31 f6                	xor    esi,esi
c00231d6:	e9 2d ff ff ff       	jmp    c0023108 <__divdi3+0x58>
c00231db:	90                   	nop
c00231dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00231df:	89 f1                	mov    ecx,esi
c00231e1:	d3 e7                	shl    edi,cl
c00231e3:	39 c7                	cmp    edi,eax
c00231e5:	73 eb                	jae    c00231d2 <__divdi3+0x122>
c00231e7:	90                   	nop
c00231e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00231eb:	31 f6                	xor    esi,esi
c00231ed:	e9 16 ff ff ff       	jmp    c0023108 <__divdi3+0x58>
c00231f2:	66 90                	xchg   ax,ax
c00231f4:	31 c9                	xor    ecx,ecx
c00231f6:	e9 0d ff ff ff       	jmp    c0023108 <__divdi3+0x58>
c00231fb:	90                   	nop

c00231fc <__moddi3>:
c00231fc:	55                   	push   ebp
c00231fd:	57                   	push   edi
c00231fe:	56                   	push   esi
c00231ff:	53                   	push   ebx
c0023200:	83 ec 2c             	sub    esp,0x2c
c0023203:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023207:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002320b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002320f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0023213:	85 db                	test   ebx,ebx
c0023215:	0f 88 85 00 00 00    	js     c00232a0 <__moddi3+0xa4>
c002321b:	89 de                	mov    esi,ebx
c002321d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023225:	89 d7                	mov    edi,edx
c0023227:	85 d2                	test   edx,edx
c0023229:	79 09                	jns    c0023234 <__moddi3+0x38>
c002322b:	f7 d8                	neg    eax
c002322d:	83 d2 00             	adc    edx,0x0
c0023230:	f7 da                	neg    edx
c0023232:	89 d7                	mov    edi,edx
c0023234:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023238:	89 cd                	mov    ebp,ecx
c002323a:	85 ff                	test   edi,edi
c002323c:	75 52                	jne    c0023290 <__moddi3+0x94>
c002323e:	89 c3                	mov    ebx,eax
c0023240:	39 f0                	cmp    eax,esi
c0023242:	76 24                	jbe    c0023268 <__moddi3+0x6c>
c0023244:	89 c8                	mov    eax,ecx
c0023246:	89 f2                	mov    edx,esi
c0023248:	f7 f3                	div    ebx
c002324a:	89 d6                	mov    esi,edx
c002324c:	89 f0                	mov    eax,esi
c002324e:	31 d2                	xor    edx,edx
c0023250:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023254:	85 c9                	test   ecx,ecx
c0023256:	74 07                	je     c002325f <__moddi3+0x63>
c0023258:	f7 d8                	neg    eax
c002325a:	83 d2 00             	adc    edx,0x0
c002325d:	f7 da                	neg    edx
c002325f:	83 c4 2c             	add    esp,0x2c
c0023262:	5b                   	pop    ebx
c0023263:	5e                   	pop    esi
c0023264:	5f                   	pop    edi
c0023265:	5d                   	pop    ebp
c0023266:	c3                   	ret    
c0023267:	90                   	nop
c0023268:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002326c:	85 db                	test   ebx,ebx
c002326e:	75 0d                	jne    c002327d <__moddi3+0x81>
c0023270:	b8 01 00 00 00       	mov    eax,0x1
c0023275:	31 d2                	xor    edx,edx
c0023277:	f7 f7                	div    edi
c0023279:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002327d:	89 f0                	mov    eax,esi
c002327f:	31 d2                	xor    edx,edx
c0023281:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023285:	f7 f7                	div    edi
c0023287:	89 e8                	mov    eax,ebp
c0023289:	f7 f7                	div    edi
c002328b:	89 d6                	mov    esi,edx
c002328d:	eb bd                	jmp    c002324c <__moddi3+0x50>
c002328f:	90                   	nop
c0023290:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023294:	39 f7                	cmp    edi,esi
c0023296:	76 20                	jbe    c00232b8 <__moddi3+0xbc>
c0023298:	89 c8                	mov    eax,ecx
c002329a:	89 f2                	mov    edx,esi
c002329c:	eb b2                	jmp    c0023250 <__moddi3+0x54>
c002329e:	66 90                	xchg   ax,ax
c00232a0:	f7 d9                	neg    ecx
c00232a2:	83 d3 00             	adc    ebx,0x0
c00232a5:	f7 db                	neg    ebx
c00232a7:	89 de                	mov    esi,ebx
c00232a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00232b1:	e9 6f ff ff ff       	jmp    c0023225 <__moddi3+0x29>
c00232b6:	66 90                	xchg   ax,ax
c00232b8:	0f bd c7             	bsr    eax,edi
c00232bb:	83 f0 1f             	xor    eax,0x1f
c00232be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232c2:	75 24                	jne    c00232e8 <__moddi3+0xec>
c00232c4:	39 f7                	cmp    edi,esi
c00232c6:	72 06                	jb     c00232ce <__moddi3+0xd2>
c00232c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00232cc:	77 0c                	ja     c00232da <__moddi3+0xde>
c00232ce:	89 e9                	mov    ecx,ebp
c00232d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00232d4:	19 fe                	sbb    esi,edi
c00232d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00232da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232de:	89 f2                	mov    edx,esi
c00232e0:	e9 6b ff ff ff       	jmp    c0023250 <__moddi3+0x54>
c00232e5:	8d 76 00             	lea    esi,[esi+0x0]
c00232e8:	b8 20 00 00 00       	mov    eax,0x20
c00232ed:	89 c2                	mov    edx,eax
c00232ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232f3:	29 da                	sub    edx,ebx
c00232f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00232f9:	88 d9                	mov    cl,bl
c00232fb:	d3 e7                	shl    edi,cl
c00232fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023301:	88 d1                	mov    cl,dl
c0023303:	d3 e8                	shr    eax,cl
c0023305:	09 c7                	or     edi,eax
c0023307:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002330b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002330f:	89 d8                	mov    eax,ebx
c0023311:	88 d9                	mov    cl,bl
c0023313:	d3 e7                	shl    edi,cl
c0023315:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023319:	89 f3                	mov    ebx,esi
c002331b:	88 d1                	mov    cl,dl
c002331d:	d3 eb                	shr    ebx,cl
c002331f:	89 c7                	mov    edi,eax
c0023321:	88 c1                	mov    cl,al
c0023323:	d3 e6                	shl    esi,cl
c0023325:	89 e8                	mov    eax,ebp
c0023327:	88 d1                	mov    cl,dl
c0023329:	d3 e8                	shr    eax,cl
c002332b:	09 f0                	or     eax,esi
c002332d:	89 f9                	mov    ecx,edi
c002332f:	d3 e5                	shl    ebp,cl
c0023331:	89 da                	mov    edx,ebx
c0023333:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023337:	89 d3                	mov    ebx,edx
c0023339:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002333d:	89 c6                	mov    esi,eax
c002333f:	89 d1                	mov    ecx,edx
c0023341:	39 d3                	cmp    ebx,edx
c0023343:	72 27                	jb     c002336c <__moddi3+0x170>
c0023345:	74 21                	je     c0023368 <__moddi3+0x16c>
c0023347:	29 f5                	sub    ebp,esi
c0023349:	19 cb                	sbb    ebx,ecx
c002334b:	89 de                	mov    esi,ebx
c002334d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023351:	d3 e6                	shl    esi,cl
c0023353:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023357:	89 f9                	mov    ecx,edi
c0023359:	d3 ed                	shr    ebp,cl
c002335b:	09 ee                	or     esi,ebp
c002335d:	89 f0                	mov    eax,esi
c002335f:	d3 eb                	shr    ebx,cl
c0023361:	89 da                	mov    edx,ebx
c0023363:	e9 e8 fe ff ff       	jmp    c0023250 <__moddi3+0x54>
c0023368:	39 c5                	cmp    ebp,eax
c002336a:	73 db                	jae    c0023347 <__moddi3+0x14b>
c002336c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023370:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023374:	89 d1                	mov    ecx,edx
c0023376:	89 c6                	mov    esi,eax
c0023378:	eb cd                	jmp    c0023347 <__moddi3+0x14b>
c002337a:	66 90                	xchg   ax,ax

c002337c <__udivdi3>:
c002337c:	55                   	push   ebp
c002337d:	57                   	push   edi
c002337e:	56                   	push   esi
c002337f:	53                   	push   ebx
c0023380:	83 ec 1c             	sub    esp,0x1c
c0023383:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023387:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002338b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002338f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023393:	85 d2                	test   edx,edx
c0023395:	75 41                	jne    c00233d8 <__udivdi3+0x5c>
c0023397:	39 f7                	cmp    edi,esi
c0023399:	76 15                	jbe    c00233b0 <__udivdi3+0x34>
c002339b:	89 e8                	mov    eax,ebp
c002339d:	89 f2                	mov    edx,esi
c002339f:	f7 f7                	div    edi
c00233a1:	31 db                	xor    ebx,ebx
c00233a3:	89 da                	mov    edx,ebx
c00233a5:	83 c4 1c             	add    esp,0x1c
c00233a8:	5b                   	pop    ebx
c00233a9:	5e                   	pop    esi
c00233aa:	5f                   	pop    edi
c00233ab:	5d                   	pop    ebp
c00233ac:	c3                   	ret    
c00233ad:	8d 76 00             	lea    esi,[esi+0x0]
c00233b0:	89 f9                	mov    ecx,edi
c00233b2:	85 ff                	test   edi,edi
c00233b4:	75 0b                	jne    c00233c1 <__udivdi3+0x45>
c00233b6:	b8 01 00 00 00       	mov    eax,0x1
c00233bb:	31 d2                	xor    edx,edx
c00233bd:	f7 f7                	div    edi
c00233bf:	89 c1                	mov    ecx,eax
c00233c1:	31 d2                	xor    edx,edx
c00233c3:	89 f0                	mov    eax,esi
c00233c5:	f7 f1                	div    ecx
c00233c7:	89 c3                	mov    ebx,eax
c00233c9:	89 e8                	mov    eax,ebp
c00233cb:	f7 f1                	div    ecx
c00233cd:	89 da                	mov    edx,ebx
c00233cf:	83 c4 1c             	add    esp,0x1c
c00233d2:	5b                   	pop    ebx
c00233d3:	5e                   	pop    esi
c00233d4:	5f                   	pop    edi
c00233d5:	5d                   	pop    ebp
c00233d6:	c3                   	ret    
c00233d7:	90                   	nop
c00233d8:	39 f2                	cmp    edx,esi
c00233da:	77 1c                	ja     c00233f8 <__udivdi3+0x7c>
c00233dc:	0f bd da             	bsr    ebx,edx
c00233df:	83 f3 1f             	xor    ebx,0x1f
c00233e2:	75 24                	jne    c0023408 <__udivdi3+0x8c>
c00233e4:	39 f2                	cmp    edx,esi
c00233e6:	72 08                	jb     c00233f0 <__udivdi3+0x74>
c00233e8:	39 ef                	cmp    edi,ebp
c00233ea:	0f 87 84 00 00 00    	ja     c0023474 <__udivdi3+0xf8>
c00233f0:	b8 01 00 00 00       	mov    eax,0x1
c00233f5:	eb ac                	jmp    c00233a3 <__udivdi3+0x27>
c00233f7:	90                   	nop
c00233f8:	31 db                	xor    ebx,ebx
c00233fa:	31 c0                	xor    eax,eax
c00233fc:	89 da                	mov    edx,ebx
c00233fe:	83 c4 1c             	add    esp,0x1c
c0023401:	5b                   	pop    ebx
c0023402:	5e                   	pop    esi
c0023403:	5f                   	pop    edi
c0023404:	5d                   	pop    ebp
c0023405:	c3                   	ret    
c0023406:	66 90                	xchg   ax,ax
c0023408:	b8 20 00 00 00       	mov    eax,0x20
c002340d:	29 d8                	sub    eax,ebx
c002340f:	88 d9                	mov    cl,bl
c0023411:	d3 e2                	shl    edx,cl
c0023413:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0023417:	89 fa                	mov    edx,edi
c0023419:	88 c1                	mov    cl,al
c002341b:	d3 ea                	shr    edx,cl
c002341d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023421:	09 d1                	or     ecx,edx
c0023423:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023427:	88 d9                	mov    cl,bl
c0023429:	d3 e7                	shl    edi,cl
c002342b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002342f:	89 f7                	mov    edi,esi
c0023431:	88 c1                	mov    cl,al
c0023433:	d3 ef                	shr    edi,cl
c0023435:	88 d9                	mov    cl,bl
c0023437:	d3 e6                	shl    esi,cl
c0023439:	89 ea                	mov    edx,ebp
c002343b:	88 c1                	mov    cl,al
c002343d:	d3 ea                	shr    edx,cl
c002343f:	09 d6                	or     esi,edx
c0023441:	89 f0                	mov    eax,esi
c0023443:	89 fa                	mov    edx,edi
c0023445:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023449:	89 d7                	mov    edi,edx
c002344b:	89 c6                	mov    esi,eax
c002344d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023451:	39 d7                	cmp    edi,edx
c0023453:	72 13                	jb     c0023468 <__udivdi3+0xec>
c0023455:	74 09                	je     c0023460 <__udivdi3+0xe4>
c0023457:	89 f0                	mov    eax,esi
c0023459:	31 db                	xor    ebx,ebx
c002345b:	e9 43 ff ff ff       	jmp    c00233a3 <__udivdi3+0x27>
c0023460:	88 d9                	mov    cl,bl
c0023462:	d3 e5                	shl    ebp,cl
c0023464:	39 c5                	cmp    ebp,eax
c0023466:	73 ef                	jae    c0023457 <__udivdi3+0xdb>
c0023468:	8d 46 ff             	lea    eax,[esi-0x1]
c002346b:	31 db                	xor    ebx,ebx
c002346d:	e9 31 ff ff ff       	jmp    c00233a3 <__udivdi3+0x27>
c0023472:	66 90                	xchg   ax,ax
c0023474:	31 c0                	xor    eax,eax
c0023476:	e9 28 ff ff ff       	jmp    c00233a3 <__udivdi3+0x27>
c002347b:	90                   	nop

c002347c <__umoddi3>:
c002347c:	55                   	push   ebp
c002347d:	57                   	push   edi
c002347e:	56                   	push   esi
c002347f:	53                   	push   ebx
c0023480:	83 ec 1c             	sub    esp,0x1c
c0023483:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023487:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002348b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002348f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023493:	89 da                	mov    edx,ebx
c0023495:	85 c0                	test   eax,eax
c0023497:	75 37                	jne    c00234d0 <__umoddi3+0x54>
c0023499:	39 df                	cmp    edi,ebx
c002349b:	76 13                	jbe    c00234b0 <__umoddi3+0x34>
c002349d:	89 f0                	mov    eax,esi
c002349f:	f7 f7                	div    edi
c00234a1:	89 d0                	mov    eax,edx
c00234a3:	31 d2                	xor    edx,edx
c00234a5:	83 c4 1c             	add    esp,0x1c
c00234a8:	5b                   	pop    ebx
c00234a9:	5e                   	pop    esi
c00234aa:	5f                   	pop    edi
c00234ab:	5d                   	pop    ebp
c00234ac:	c3                   	ret    
c00234ad:	8d 76 00             	lea    esi,[esi+0x0]
c00234b0:	89 fd                	mov    ebp,edi
c00234b2:	85 ff                	test   edi,edi
c00234b4:	75 0b                	jne    c00234c1 <__umoddi3+0x45>
c00234b6:	b8 01 00 00 00       	mov    eax,0x1
c00234bb:	31 d2                	xor    edx,edx
c00234bd:	f7 f7                	div    edi
c00234bf:	89 c5                	mov    ebp,eax
c00234c1:	89 d8                	mov    eax,ebx
c00234c3:	31 d2                	xor    edx,edx
c00234c5:	f7 f5                	div    ebp
c00234c7:	89 f0                	mov    eax,esi
c00234c9:	f7 f5                	div    ebp
c00234cb:	89 d0                	mov    eax,edx
c00234cd:	eb d4                	jmp    c00234a3 <__umoddi3+0x27>
c00234cf:	90                   	nop
c00234d0:	89 f1                	mov    ecx,esi
c00234d2:	39 d8                	cmp    eax,ebx
c00234d4:	76 0a                	jbe    c00234e0 <__umoddi3+0x64>
c00234d6:	89 f0                	mov    eax,esi
c00234d8:	83 c4 1c             	add    esp,0x1c
c00234db:	5b                   	pop    ebx
c00234dc:	5e                   	pop    esi
c00234dd:	5f                   	pop    edi
c00234de:	5d                   	pop    ebp
c00234df:	c3                   	ret    
c00234e0:	0f bd e8             	bsr    ebp,eax
c00234e3:	83 f5 1f             	xor    ebp,0x1f
c00234e6:	75 1c                	jne    c0023504 <__umoddi3+0x88>
c00234e8:	39 d8                	cmp    eax,ebx
c00234ea:	72 04                	jb     c00234f0 <__umoddi3+0x74>
c00234ec:	39 f7                	cmp    edi,esi
c00234ee:	77 08                	ja     c00234f8 <__umoddi3+0x7c>
c00234f0:	89 da                	mov    edx,ebx
c00234f2:	29 fe                	sub    esi,edi
c00234f4:	19 c2                	sbb    edx,eax
c00234f6:	89 f1                	mov    ecx,esi
c00234f8:	89 c8                	mov    eax,ecx
c00234fa:	83 c4 1c             	add    esp,0x1c
c00234fd:	5b                   	pop    ebx
c00234fe:	5e                   	pop    esi
c00234ff:	5f                   	pop    edi
c0023500:	5d                   	pop    ebp
c0023501:	c3                   	ret    
c0023502:	66 90                	xchg   ax,ax
c0023504:	ba 20 00 00 00       	mov    edx,0x20
c0023509:	29 ea                	sub    edx,ebp
c002350b:	89 e9                	mov    ecx,ebp
c002350d:	d3 e0                	shl    eax,cl
c002350f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023513:	89 f8                	mov    eax,edi
c0023515:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023519:	88 d1                	mov    cl,dl
c002351b:	d3 e8                	shr    eax,cl
c002351d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023521:	09 c1                	or     ecx,eax
c0023523:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023527:	89 e9                	mov    ecx,ebp
c0023529:	d3 e7                	shl    edi,cl
c002352b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002352f:	89 d8                	mov    eax,ebx
c0023531:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023535:	88 d1                	mov    cl,dl
c0023537:	d3 e8                	shr    eax,cl
c0023539:	89 c7                	mov    edi,eax
c002353b:	89 e9                	mov    ecx,ebp
c002353d:	d3 e3                	shl    ebx,cl
c002353f:	89 f0                	mov    eax,esi
c0023541:	88 d1                	mov    cl,dl
c0023543:	d3 e8                	shr    eax,cl
c0023545:	09 d8                	or     eax,ebx
c0023547:	89 e9                	mov    ecx,ebp
c0023549:	d3 e6                	shl    esi,cl
c002354b:	89 f3                	mov    ebx,esi
c002354d:	89 fa                	mov    edx,edi
c002354f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023553:	89 d1                	mov    ecx,edx
c0023555:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023559:	89 c6                	mov    esi,eax
c002355b:	89 d7                	mov    edi,edx
c002355d:	39 d1                	cmp    ecx,edx
c002355f:	72 27                	jb     c0023588 <__umoddi3+0x10c>
c0023561:	74 21                	je     c0023584 <__umoddi3+0x108>
c0023563:	89 ca                	mov    edx,ecx
c0023565:	29 f3                	sub    ebx,esi
c0023567:	19 fa                	sbb    edx,edi
c0023569:	89 d0                	mov    eax,edx
c002356b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002356f:	d3 e0                	shl    eax,cl
c0023571:	89 e9                	mov    ecx,ebp
c0023573:	d3 eb                	shr    ebx,cl
c0023575:	09 d8                	or     eax,ebx
c0023577:	d3 ea                	shr    edx,cl
c0023579:	83 c4 1c             	add    esp,0x1c
c002357c:	5b                   	pop    ebx
c002357d:	5e                   	pop    esi
c002357e:	5f                   	pop    edi
c002357f:	5d                   	pop    ebp
c0023580:	c3                   	ret    
c0023581:	8d 76 00             	lea    esi,[esi+0x0]
c0023584:	39 c3                	cmp    ebx,eax
c0023586:	73 db                	jae    c0023563 <__umoddi3+0xe7>
c0023588:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002358c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023590:	89 d7                	mov    edi,edx
c0023592:	89 c6                	mov    esi,eax
c0023594:	eb cd                	jmp    c0023563 <__umoddi3+0xe7>

c0023596 <__addsf3>:
c0023596:	55                   	push   ebp
c0023597:	89 e5                	mov    ebp,esp
c0023599:	57                   	push   edi
c002359a:	56                   	push   esi
c002359b:	53                   	push   ebx
c002359c:	83 ec 08             	sub    esp,0x8
c002359f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00235a2:	89 fa                	mov    edx,edi
c00235a4:	89 f8                	mov    eax,edi
c00235a6:	c1 f8 17             	sar    eax,0x17
c00235a9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00235ac:	c1 e2 08             	shl    edx,0x8
c00235af:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00235b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00235b8:	89 de                	mov    esi,ebx
c00235ba:	c1 fe 17             	sar    esi,0x17
c00235bd:	c1 e3 08             	shl    ebx,0x8
c00235c0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00235c6:	31 f0                	xor    eax,esi
c00235c8:	0f 88 3b 01 00 00    	js     c0023709 <__addsf3+0x173>
c00235ce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00235d1:	29 f1                	sub    ecx,esi
c00235d3:	85 c9                	test   ecx,ecx
c00235d5:	7e 54                	jle    c002362b <__addsf3+0x95>
c00235d7:	89 f0                	mov    eax,esi
c00235d9:	84 c0                	test   al,al
c00235db:	75 10                	jne    c00235ed <__addsf3+0x57>
c00235dd:	85 db                	test   ebx,ebx
c00235df:	0f 84 aa 02 00 00    	je     c002388f <__addsf3+0x2f9>
c00235e5:	49                   	dec    ecx
c00235e6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00235e9:	74 38                	je     c0023623 <__addsf3+0x8d>
c00235eb:	eb 13                	jmp    c0023600 <__addsf3+0x6a>
c00235ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00235f0:	f7 d0                	not    eax
c00235f2:	84 c0                	test   al,al
c00235f4:	0f 84 95 02 00 00    	je     c002388f <__addsf3+0x2f9>
c00235fa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023600:	83 f9 1f             	cmp    ecx,0x1f
c0023603:	0f 8f 86 02 00 00    	jg     c002388f <__addsf3+0x2f9>
c0023609:	89 de                	mov    esi,ebx
c002360b:	d3 ee                	shr    esi,cl
c002360d:	b8 20 00 00 00       	mov    eax,0x20
c0023612:	29 c8                	sub    eax,ecx
c0023614:	89 c1                	mov    ecx,eax
c0023616:	d3 e3                	shl    ebx,cl
c0023618:	31 c0                	xor    eax,eax
c002361a:	85 db                	test   ebx,ebx
c002361c:	0f 95 c0             	setne  al
c002361f:	09 f0                	or     eax,esi
c0023621:	01 d0                	add    eax,edx
c0023623:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023626:	e9 b6 00 00 00       	jmp    c00236e1 <__addsf3+0x14b>
c002362b:	74 5c                	je     c0023689 <__addsf3+0xf3>
c002362d:	89 f1                	mov    ecx,esi
c002362f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023632:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023635:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023639:	75 14                	jne    c002364f <__addsf3+0xb9>
c002363b:	85 d2                	test   edx,edx
c002363d:	0f 84 4c 02 00 00    	je     c002388f <__addsf3+0x2f9>
c0023643:	49                   	dec    ecx
c0023644:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023647:	0f 84 94 00 00 00    	je     c00236e1 <__addsf3+0x14b>
c002364d:	eb 12                	jmp    c0023661 <__addsf3+0xcb>
c002364f:	89 f0                	mov    eax,esi
c0023651:	f7 d0                	not    eax
c0023653:	84 c0                	test   al,al
c0023655:	0f 84 34 02 00 00    	je     c002388f <__addsf3+0x2f9>
c002365b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023661:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023664:	83 f9 1f             	cmp    ecx,0x1f
c0023667:	0f 8f 22 02 00 00    	jg     c002388f <__addsf3+0x2f9>
c002366d:	89 d7                	mov    edi,edx
c002366f:	d3 ef                	shr    edi,cl
c0023671:	b8 20 00 00 00       	mov    eax,0x20
c0023676:	29 c8                	sub    eax,ecx
c0023678:	89 c1                	mov    ecx,eax
c002367a:	d3 e2                	shl    edx,cl
c002367c:	31 c0                	xor    eax,eax
c002367e:	85 d2                	test   edx,edx
c0023680:	0f 95 c0             	setne  al
c0023683:	09 f8                	or     eax,edi
c0023685:	01 d8                	add    eax,ebx
c0023687:	eb 58                	jmp    c00236e1 <__addsf3+0x14b>
c0023689:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002368c:	8d 70 01             	lea    esi,[eax+0x1]
c002368f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023695:	75 32                	jne    c00236c9 <__addsf3+0x133>
c0023697:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002369b:	75 1f                	jne    c00236bc <__addsf3+0x126>
c002369d:	85 d2                	test   edx,edx
c002369f:	0f 84 e0 01 00 00    	je     c0023885 <__addsf3+0x2ef>
c00236a5:	85 db                	test   ebx,ebx
c00236a7:	0f 84 e2 01 00 00    	je     c002388f <__addsf3+0x2f9>
c00236ad:	89 d0                	mov    eax,edx
c00236af:	01 d8                	add    eax,ebx
c00236b1:	0f 89 a9 01 00 00    	jns    c0023860 <__addsf3+0x2ca>
c00236b7:	e9 9d 01 00 00       	jmp    c0023859 <__addsf3+0x2c3>
c00236bc:	85 d2                	test   edx,edx
c00236be:	0f 85 cb 01 00 00    	jne    c002388f <__addsf3+0x2f9>
c00236c4:	e9 bc 01 00 00       	jmp    c0023885 <__addsf3+0x2ef>
c00236c9:	31 c0                	xor    eax,eax
c00236cb:	89 f1                	mov    ecx,esi
c00236cd:	f7 d1                	not    ecx
c00236cf:	84 c9                	test   cl,cl
c00236d1:	0f 84 90 01 00 00    	je     c0023867 <__addsf3+0x2d1>
c00236d7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00236da:	d1 e8                	shr    eax,1
c00236dc:	e9 86 01 00 00       	jmp    c0023867 <__addsf3+0x2d1>
c00236e1:	85 c0                	test   eax,eax
c00236e3:	0f 89 7e 01 00 00    	jns    c0023867 <__addsf3+0x2d1>
c00236e9:	46                   	inc    esi
c00236ea:	89 f2                	mov    edx,esi
c00236ec:	f7 d2                	not    edx
c00236ee:	84 d2                	test   dl,dl
c00236f0:	0f 84 6f 01 00 00    	je     c0023865 <__addsf3+0x2cf>
c00236f6:	89 c2                	mov    edx,eax
c00236f8:	83 e2 01             	and    edx,0x1
c00236fb:	d1 e8                	shr    eax,1
c00236fd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0023702:	09 d0                	or     eax,edx
c0023704:	e9 5e 01 00 00       	jmp    c0023867 <__addsf3+0x2d1>
c0023709:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002370d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023710:	89 f0                	mov    eax,esi
c0023712:	0f b6 c0             	movzx  eax,al
c0023715:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0023718:	29 c1                	sub    ecx,eax
c002371a:	85 c9                	test   ecx,ecx
c002371c:	7e 55                	jle    c0023773 <__addsf3+0x1dd>
c002371e:	85 c0                	test   eax,eax
c0023720:	75 11                	jne    c0023733 <__addsf3+0x19d>
c0023722:	85 db                	test   ebx,ebx
c0023724:	0f 84 65 01 00 00    	je     c002388f <__addsf3+0x2f9>
c002372a:	49                   	dec    ecx
c002372b:	75 19                	jne    c0023746 <__addsf3+0x1b0>
c002372d:	89 d0                	mov    eax,edx
c002372f:	29 d8                	sub    eax,ebx
c0023731:	eb 38                	jmp    c002376b <__addsf3+0x1d5>
c0023733:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023736:	f7 d0                	not    eax
c0023738:	84 c0                	test   al,al
c002373a:	0f 84 4f 01 00 00    	je     c002388f <__addsf3+0x2f9>
c0023740:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023746:	83 f9 1f             	cmp    ecx,0x1f
c0023749:	0f 8f 40 01 00 00    	jg     c002388f <__addsf3+0x2f9>
c002374f:	89 de                	mov    esi,ebx
c0023751:	d3 ee                	shr    esi,cl
c0023753:	b8 20 00 00 00       	mov    eax,0x20
c0023758:	29 c8                	sub    eax,ecx
c002375a:	89 c1                	mov    ecx,eax
c002375c:	d3 e3                	shl    ebx,cl
c002375e:	31 c0                	xor    eax,eax
c0023760:	85 db                	test   ebx,ebx
c0023762:	0f 95 c0             	setne  al
c0023765:	09 f0                	or     eax,esi
c0023767:	29 c2                	sub    edx,eax
c0023769:	89 d0                	mov    eax,edx
c002376b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002376e:	e9 af 00 00 00       	jmp    c0023822 <__addsf3+0x28c>
c0023773:	74 5c                	je     c00237d1 <__addsf3+0x23b>
c0023775:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023778:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002377b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002377f:	75 14                	jne    c0023795 <__addsf3+0x1ff>
c0023781:	85 d2                	test   edx,edx
c0023783:	0f 84 06 01 00 00    	je     c002388f <__addsf3+0x2f9>
c0023789:	48                   	dec    eax
c002378a:	75 1b                	jne    c00237a7 <__addsf3+0x211>
c002378c:	89 d8                	mov    eax,ebx
c002378e:	29 d0                	sub    eax,edx
c0023790:	e9 8d 00 00 00       	jmp    c0023822 <__addsf3+0x28c>
c0023795:	89 f1                	mov    ecx,esi
c0023797:	f7 d1                	not    ecx
c0023799:	84 c9                	test   cl,cl
c002379b:	0f 84 ee 00 00 00    	je     c002388f <__addsf3+0x2f9>
c00237a1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00237a7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237aa:	83 f8 1f             	cmp    eax,0x1f
c00237ad:	0f 8f dc 00 00 00    	jg     c002388f <__addsf3+0x2f9>
c00237b3:	89 d7                	mov    edi,edx
c00237b5:	88 c1                	mov    cl,al
c00237b7:	d3 ef                	shr    edi,cl
c00237b9:	b9 20 00 00 00       	mov    ecx,0x20
c00237be:	29 c1                	sub    ecx,eax
c00237c0:	d3 e2                	shl    edx,cl
c00237c2:	31 c0                	xor    eax,eax
c00237c4:	85 d2                	test   edx,edx
c00237c6:	0f 95 c0             	setne  al
c00237c9:	09 f8                	or     eax,edi
c00237cb:	29 c3                	sub    ebx,eax
c00237cd:	89 d8                	mov    eax,ebx
c00237cf:	eb 51                	jmp    c0023822 <__addsf3+0x28c>
c00237d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237d4:	40                   	inc    eax
c00237d5:	a8 fe                	test   al,0xfe
c00237d7:	75 3d                	jne    c0023816 <__addsf3+0x280>
c00237d9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00237dd:	0f 85 a7 00 00 00    	jne    c002388a <__addsf3+0x2f4>
c00237e3:	85 d2                	test   edx,edx
c00237e5:	75 12                	jne    c00237f9 <__addsf3+0x263>
c00237e7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237ea:	85 db                	test   ebx,ebx
c00237ec:	0f 85 9d 00 00 00    	jne    c002388f <__addsf3+0x2f9>
c00237f2:	31 ff                	xor    edi,edi
c00237f4:	e9 96 00 00 00       	jmp    c002388f <__addsf3+0x2f9>
c00237f9:	85 db                	test   ebx,ebx
c00237fb:	0f 84 8e 00 00 00    	je     c002388f <__addsf3+0x2f9>
c0023801:	89 d0                	mov    eax,edx
c0023803:	29 d8                	sub    eax,ebx
c0023805:	79 06                	jns    c002380d <__addsf3+0x277>
c0023807:	89 d8                	mov    eax,ebx
c0023809:	29 d0                	sub    eax,edx
c002380b:	eb 5a                	jmp    c0023867 <__addsf3+0x2d1>
c002380d:	bf 00 00 00 00       	mov    edi,0x0
c0023812:	74 7b                	je     c002388f <__addsf3+0x2f9>
c0023814:	eb 4a                	jmp    c0023860 <__addsf3+0x2ca>
c0023816:	89 d0                	mov    eax,edx
c0023818:	29 d8                	sub    eax,ebx
c002381a:	79 12                	jns    c002382e <__addsf3+0x298>
c002381c:	89 d8                	mov    eax,ebx
c002381e:	29 d0                	sub    eax,edx
c0023820:	eb 09                	jmp    c002382b <__addsf3+0x295>
c0023822:	85 c0                	test   eax,eax
c0023824:	79 41                	jns    c0023867 <__addsf3+0x2d1>
c0023826:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002382b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002382e:	31 f6                	xor    esi,esi
c0023830:	85 c0                	test   eax,eax
c0023832:	74 33                	je     c0023867 <__addsf3+0x2d1>
c0023834:	0f bd c8             	bsr    ecx,eax
c0023837:	83 f1 1f             	xor    ecx,0x1f
c002383a:	d3 e0                	shl    eax,cl
c002383c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023840:	39 ca                	cmp    edx,ecx
c0023842:	7f 10                	jg     c0023854 <__addsf3+0x2be>
c0023844:	29 d1                	sub    ecx,edx
c0023846:	41                   	inc    ecx
c0023847:	d3 e8                	shr    eax,cl
c0023849:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002384c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023852:	eb 13                	jmp    c0023867 <__addsf3+0x2d1>
c0023854:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023857:	29 ce                	sub    esi,ecx
c0023859:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002385e:	eb 07                	jmp    c0023867 <__addsf3+0x2d1>
c0023860:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023863:	eb 02                	jmp    c0023867 <__addsf3+0x2d1>
c0023865:	31 c0                	xor    eax,eax
c0023867:	89 c2                	mov    edx,eax
c0023869:	c1 ea 08             	shr    edx,0x8
c002386c:	a8 7f                	test   al,0x7f
c002386e:	0f 95 c1             	setne  cl
c0023871:	09 d1                	or     ecx,edx
c0023873:	83 e1 01             	and    ecx,0x1
c0023876:	c1 e8 07             	shr    eax,0x7
c0023879:	21 c8                	and    eax,ecx
c002387b:	c1 e6 17             	shl    esi,0x17
c002387e:	09 d6                	or     esi,edx
c0023880:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023883:	eb 0a                	jmp    c002388f <__addsf3+0x2f9>
c0023885:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023888:	eb 05                	jmp    c002388f <__addsf3+0x2f9>
c002388a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002388f:	89 f8                	mov    eax,edi
c0023891:	5a                   	pop    edx
c0023892:	59                   	pop    ecx
c0023893:	5b                   	pop    ebx
c0023894:	5e                   	pop    esi
c0023895:	5f                   	pop    edi
c0023896:	5d                   	pop    ebp
c0023897:	c3                   	ret    

c0023898 <__subsf3>:
c0023898:	55                   	push   ebp
c0023899:	89 e5                	mov    ebp,esp
c002389b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002389e:	05 00 00 00 80       	add    eax,0x80000000
c00238a3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00238a6:	5d                   	pop    ebp
c00238a7:	e9 ea fc ff ff       	jmp    c0023596 <__addsf3>

c00238ac <__negsf2>:
c00238ac:	55                   	push   ebp
c00238ad:	89 e5                	mov    ebp,esp
c00238af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00238b2:	05 00 00 00 80       	add    eax,0x80000000
c00238b7:	5d                   	pop    ebp
c00238b8:	c3                   	ret    

c00238b9 <__mulsf3>:
c00238b9:	55                   	push   ebp
c00238ba:	89 e5                	mov    ebp,esp
c00238bc:	57                   	push   edi
c00238bd:	56                   	push   esi
c00238be:	53                   	push   ebx
c00238bf:	83 ec 1c             	sub    esp,0x1c
c00238c2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00238c5:	89 f0                	mov    eax,esi
c00238c7:	89 f1                	mov    ecx,esi
c00238c9:	c1 f9 17             	sar    ecx,0x17
c00238cc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00238cf:	c1 e0 08             	shl    eax,0x8
c00238d2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00238d7:	89 c1                	mov    ecx,eax
c00238d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238dc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00238df:	89 c7                	mov    edi,eax
c00238e1:	c1 ff 17             	sar    edi,0x17
c00238e4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00238e8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00238eb:	89 f8                	mov    eax,edi
c00238ed:	0f b6 c0             	movzx  eax,al
c00238f0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00238f3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00238f7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00238fa:	42                   	inc    edx
c00238fb:	80 e2 fe             	and    dl,0xfe
c00238fe:	75 7b                	jne    c002397b <__mulsf3+0xc2>
c0023900:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023904:	74 54                	je     c002395a <__mulsf3+0xa1>
c0023906:	85 c9                	test   ecx,ecx
c0023908:	0f 85 64 01 00 00    	jne    c0023a72 <__mulsf3+0x1b9>
c002390e:	8d 57 01             	lea    edx,[edi+0x1]
c0023911:	80 e2 fe             	and    dl,0xfe
c0023914:	75 1f                	jne    c0023935 <__mulsf3+0x7c>
c0023916:	85 c0                	test   eax,eax
c0023918:	b8 00 00 00 00       	mov    eax,0x0
c002391d:	74 29                	je     c0023948 <__mulsf3+0x8f>
c002391f:	53                   	push   ebx
c0023920:	53                   	push   ebx
c0023921:	50                   	push   eax
c0023922:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023925:	e8 96 05 00 00       	call   c0023ec0 <__nesf2>
c002392a:	83 c4 10             	add    esp,0x10
c002392d:	85 c0                	test   eax,eax
c002392f:	0f 85 3a 01 00 00    	jne    c0023a6f <__mulsf3+0x1b6>
c0023935:	85 ff                	test   edi,edi
c0023937:	0f 89 35 01 00 00    	jns    c0023a72 <__mulsf3+0x1b9>
c002393d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023943:	e9 2a 01 00 00       	jmp    c0023a72 <__mulsf3+0x1b9>
c0023948:	51                   	push   ecx
c0023949:	51                   	push   ecx
c002394a:	50                   	push   eax
c002394b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002394e:	e8 6d 05 00 00       	call   c0023ec0 <__nesf2>
c0023953:	83 c4 10             	add    esp,0x10
c0023956:	85 c0                	test   eax,eax
c0023958:	eb 15                	jmp    c002396f <__mulsf3+0xb6>
c002395a:	85 c9                	test   ecx,ecx
c002395c:	74 0b                	je     c0023969 <__mulsf3+0xb0>
c002395e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023961:	01 c9                	add    ecx,ecx
c0023963:	78 16                	js     c002397b <__mulsf3+0xc2>
c0023965:	89 d3                	mov    ebx,edx
c0023967:	eb f5                	jmp    c002395e <__mulsf3+0xa5>
c0023969:	89 f8                	mov    eax,edi
c002396b:	f7 d0                	not    eax
c002396d:	84 c0                	test   al,al
c002396f:	75 c4                	jne    c0023935 <__mulsf3+0x7c>
c0023971:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023976:	e9 f7 00 00 00       	jmp    c0023a72 <__mulsf3+0x1b9>
c002397b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002397e:	c1 e6 08             	shl    esi,0x8
c0023981:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023987:	8d 57 01             	lea    edx,[edi+0x1]
c002398a:	80 e2 fe             	and    dl,0xfe
c002398d:	75 63                	jne    c00239f2 <__mulsf3+0x139>
c002398f:	85 c0                	test   eax,eax
c0023991:	74 2f                	je     c00239c2 <__mulsf3+0x109>
c0023993:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023997:	0f 89 d2 00 00 00    	jns    c0023a6f <__mulsf3+0x1b6>
c002399d:	52                   	push   edx
c002399e:	52                   	push   edx
c002399f:	6a 00                	push   0x0
c00239a1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00239a4:	e8 dc 04 00 00       	call   c0023e85 <__eqsf2>
c00239a9:	83 c4 10             	add    esp,0x10
c00239ac:	85 c0                	test   eax,eax
c00239ae:	0f 85 bb 00 00 00    	jne    c0023a6f <__mulsf3+0x1b6>
c00239b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00239b7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00239bd:	e9 b0 00 00 00       	jmp    c0023a72 <__mulsf3+0x1b9>
c00239c2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00239c5:	50                   	push   eax
c00239c6:	50                   	push   eax
c00239c7:	6a 00                	push   0x0
c00239c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00239cc:	e8 b4 04 00 00       	call   c0023e85 <__eqsf2>
c00239d1:	83 c4 10             	add    esp,0x10
c00239d4:	85 c0                	test   eax,eax
c00239d6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00239d9:	75 0c                	jne    c00239e7 <__mulsf3+0x12e>
c00239db:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00239df:	0f 89 8a 00 00 00    	jns    c0023a6f <__mulsf3+0x1b6>
c00239e5:	eb cd                	jmp    c00239b4 <__mulsf3+0xfb>
c00239e7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00239ea:	01 f6                	add    esi,esi
c00239ec:	78 04                	js     c00239f2 <__mulsf3+0x139>
c00239ee:	89 c3                	mov    ebx,eax
c00239f0:	eb f5                	jmp    c00239e7 <__mulsf3+0x12e>
c00239f2:	89 c8                	mov    eax,ecx
c00239f4:	0d 00 00 00 80       	or     eax,0x80000000
c00239f9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00239ff:	f7 e6                	mul    esi
c0023a01:	85 c0                	test   eax,eax
c0023a03:	0f 95 c0             	setne  al
c0023a06:	0f b6 c0             	movzx  eax,al
c0023a09:	09 c2                	or     edx,eax
c0023a0b:	78 03                	js     c0023a10 <__mulsf3+0x157>
c0023a0d:	01 d2                	add    edx,edx
c0023a0f:	4b                   	dec    ebx
c0023a10:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0023a16:	7f 22                	jg     c0023a3a <__mulsf3+0x181>
c0023a18:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023a1e:	85 db                	test   ebx,ebx
c0023a20:	7f 23                	jg     c0023a45 <__mulsf3+0x18c>
c0023a22:	83 fb e9             	cmp    ebx,0xffffffe9
c0023a25:	7c 1a                	jl     c0023a41 <__mulsf3+0x188>
c0023a27:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023a2d:	b9 01 00 00 00       	mov    ecx,0x1
c0023a32:	29 d9                	sub    ecx,ebx
c0023a34:	d3 ea                	shr    edx,cl
c0023a36:	31 db                	xor    ebx,ebx
c0023a38:	eb 0b                	jmp    c0023a45 <__mulsf3+0x18c>
c0023a3a:	bb ff 00 00 00       	mov    ebx,0xff
c0023a3f:	eb 02                	jmp    c0023a43 <__mulsf3+0x18a>
c0023a41:	31 db                	xor    ebx,ebx
c0023a43:	31 d2                	xor    edx,edx
c0023a45:	89 d0                	mov    eax,edx
c0023a47:	c1 e8 08             	shr    eax,0x8
c0023a4a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023a4d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023a53:	09 fb                	or     ebx,edi
c0023a55:	c1 e3 17             	shl    ebx,0x17
c0023a58:	09 c3                	or     ebx,eax
c0023a5a:	f6 c2 7f             	test   dl,0x7f
c0023a5d:	0f 95 c1             	setne  cl
c0023a60:	09 c8                	or     eax,ecx
c0023a62:	83 e0 01             	and    eax,0x1
c0023a65:	c1 ea 07             	shr    edx,0x7
c0023a68:	21 c2                	and    edx,eax
c0023a6a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023a6d:	eb 03                	jmp    c0023a72 <__mulsf3+0x1b9>
c0023a6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023a72:	89 f0                	mov    eax,esi
c0023a74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023a77:	5b                   	pop    ebx
c0023a78:	5e                   	pop    esi
c0023a79:	5f                   	pop    edi
c0023a7a:	5d                   	pop    ebp
c0023a7b:	c3                   	ret    

c0023a7c <__divsf3>:
c0023a7c:	55                   	push   ebp
c0023a7d:	89 e5                	mov    ebp,esp
c0023a7f:	57                   	push   edi
c0023a80:	56                   	push   esi
c0023a81:	53                   	push   ebx
c0023a82:	83 ec 1c             	sub    esp,0x1c
c0023a85:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023a88:	89 d8                	mov    eax,ebx
c0023a8a:	89 d9                	mov    ecx,ebx
c0023a8c:	c1 f9 17             	sar    ecx,0x17
c0023a8f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023a92:	c1 e0 08             	shl    eax,0x8
c0023a95:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023a9a:	89 c1                	mov    ecx,eax
c0023a9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023aa2:	89 c7                	mov    edi,eax
c0023aa4:	c1 ff 17             	sar    edi,0x17
c0023aa7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023aab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023aae:	89 f8                	mov    eax,edi
c0023ab0:	0f b6 c0             	movzx  eax,al
c0023ab3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023ab6:	29 c6                	sub    esi,eax
c0023ab8:	83 c6 7f             	add    esi,0x7f
c0023abb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023abe:	42                   	inc    edx
c0023abf:	80 e2 fe             	and    dl,0xfe
c0023ac2:	0f 85 9c 00 00 00    	jne    c0023b64 <__divsf3+0xe8>
c0023ac8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023acc:	74 33                	je     c0023b01 <__divsf3+0x85>
c0023ace:	85 c9                	test   ecx,ecx
c0023ad0:	0f 85 c7 01 00 00    	jne    c0023c9d <__divsf3+0x221>
c0023ad6:	8d 57 01             	lea    edx,[edi+0x1]
c0023ad9:	80 e2 fe             	and    dl,0xfe
c0023adc:	75 2f                	jne    c0023b0d <__divsf3+0x91>
c0023ade:	85 c0                	test   eax,eax
c0023ae0:	74 2b                	je     c0023b0d <__divsf3+0x91>
c0023ae2:	51                   	push   ecx
c0023ae3:	51                   	push   ecx
c0023ae4:	6a 00                	push   0x0
c0023ae6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ae9:	e8 d2 03 00 00       	call   c0023ec0 <__nesf2>
c0023aee:	83 c4 10             	add    esp,0x10
c0023af1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023af4:	85 c0                	test   eax,eax
c0023af6:	0f 85 a1 01 00 00    	jne    c0023c9d <__divsf3+0x221>
c0023afc:	e9 92 01 00 00       	jmp    c0023c93 <__divsf3+0x217>
c0023b01:	85 c9                	test   ecx,ecx
c0023b03:	75 1b                	jne    c0023b20 <__divsf3+0xa4>
c0023b05:	8d 57 01             	lea    edx,[edi+0x1]
c0023b08:	80 e2 fe             	and    dl,0xfe
c0023b0b:	74 1e                	je     c0023b2b <__divsf3+0xaf>
c0023b0d:	85 ff                	test   edi,edi
c0023b0f:	0f 89 88 01 00 00    	jns    c0023c9d <__divsf3+0x221>
c0023b15:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023b1b:	e9 7d 01 00 00       	jmp    c0023c9d <__divsf3+0x221>
c0023b20:	8d 56 ff             	lea    edx,[esi-0x1]
c0023b23:	01 c9                	add    ecx,ecx
c0023b25:	78 3d                	js     c0023b64 <__divsf3+0xe8>
c0023b27:	89 d6                	mov    esi,edx
c0023b29:	eb f5                	jmp    c0023b20 <__divsf3+0xa4>
c0023b2b:	85 c0                	test   eax,eax
c0023b2d:	b8 00 00 00 00       	mov    eax,0x0
c0023b32:	74 18                	je     c0023b4c <__divsf3+0xd0>
c0023b34:	52                   	push   edx
c0023b35:	52                   	push   edx
c0023b36:	50                   	push   eax
c0023b37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b3a:	e8 81 03 00 00       	call   c0023ec0 <__nesf2>
c0023b3f:	83 c4 10             	add    esp,0x10
c0023b42:	85 c0                	test   eax,eax
c0023b44:	0f 85 50 01 00 00    	jne    c0023c9a <__divsf3+0x21e>
c0023b4a:	eb c1                	jmp    c0023b0d <__divsf3+0x91>
c0023b4c:	56                   	push   esi
c0023b4d:	56                   	push   esi
c0023b4e:	50                   	push   eax
c0023b4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b52:	e8 69 03 00 00       	call   c0023ec0 <__nesf2>
c0023b57:	83 c4 10             	add    esp,0x10
c0023b5a:	85 c0                	test   eax,eax
c0023b5c:	0f 84 31 01 00 00    	je     c0023c93 <__divsf3+0x217>
c0023b62:	eb a9                	jmp    c0023b0d <__divsf3+0x91>
c0023b64:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023b67:	c1 e3 08             	shl    ebx,0x8
c0023b6a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023b70:	8d 57 01             	lea    edx,[edi+0x1]
c0023b73:	80 e2 fe             	and    dl,0xfe
c0023b76:	75 71                	jne    c0023be9 <__divsf3+0x16d>
c0023b78:	85 c0                	test   eax,eax
c0023b7a:	ba 00 00 00 00       	mov    edx,0x0
c0023b7f:	74 2f                	je     c0023bb0 <__divsf3+0x134>
c0023b81:	51                   	push   ecx
c0023b82:	51                   	push   ecx
c0023b83:	52                   	push   edx
c0023b84:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b87:	e8 f9 02 00 00       	call   c0023e85 <__eqsf2>
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	85 c0                	test   eax,eax
c0023b91:	0f 85 03 01 00 00    	jne    c0023c9a <__divsf3+0x21e>
c0023b97:	31 d2                	xor    edx,edx
c0023b99:	89 d3                	mov    ebx,edx
c0023b9b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b9e:	31 f8                	xor    eax,edi
c0023ba0:	0f 89 f7 00 00 00    	jns    c0023c9d <__divsf3+0x221>
c0023ba6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023bab:	e9 ed 00 00 00       	jmp    c0023c9d <__divsf3+0x221>
c0023bb0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023bb3:	50                   	push   eax
c0023bb4:	50                   	push   eax
c0023bb5:	52                   	push   edx
c0023bb6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023bb9:	e8 c7 02 00 00       	call   c0023e85 <__eqsf2>
c0023bbe:	83 c4 10             	add    esp,0x10
c0023bc1:	85 c0                	test   eax,eax
c0023bc3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023bc6:	75 16                	jne    c0023bde <__divsf3+0x162>
c0023bc8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023bcb:	31 fb                	xor    ebx,edi
c0023bcd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023bd3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023bd9:	e9 bf 00 00 00       	jmp    c0023c9d <__divsf3+0x221>
c0023bde:	8d 46 01             	lea    eax,[esi+0x1]
c0023be1:	01 db                	add    ebx,ebx
c0023be3:	78 04                	js     c0023be9 <__divsf3+0x16d>
c0023be5:	89 c6                	mov    esi,eax
c0023be7:	eb f5                	jmp    c0023bde <__divsf3+0x162>
c0023be9:	89 c8                	mov    eax,ecx
c0023beb:	0d 00 00 00 80       	or     eax,0x80000000
c0023bf0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023bf6:	31 d2                	xor    edx,edx
c0023bf8:	39 d8                	cmp    eax,ebx
c0023bfa:	72 07                	jb     c0023c03 <__divsf3+0x187>
c0023bfc:	29 d8                	sub    eax,ebx
c0023bfe:	ba 01 00 00 00       	mov    edx,0x1
c0023c03:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023c0a:	01 d2                	add    edx,edx
c0023c0c:	89 c1                	mov    ecx,eax
c0023c0e:	01 c0                	add    eax,eax
c0023c10:	85 c9                	test   ecx,ecx
c0023c12:	78 04                	js     c0023c18 <__divsf3+0x19c>
c0023c14:	39 c3                	cmp    ebx,eax
c0023c16:	77 05                	ja     c0023c1d <__divsf3+0x1a1>
c0023c18:	29 d8                	sub    eax,ebx
c0023c1a:	83 ca 01             	or     edx,0x1
c0023c1d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023c20:	75 e8                	jne    c0023c0a <__divsf3+0x18e>
c0023c22:	85 c0                	test   eax,eax
c0023c24:	0f 95 c0             	setne  al
c0023c27:	0f b6 c0             	movzx  eax,al
c0023c2a:	c1 e2 06             	shl    edx,0x6
c0023c2d:	09 c2                	or     edx,eax
c0023c2f:	78 03                	js     c0023c34 <__divsf3+0x1b8>
c0023c31:	01 d2                	add    edx,edx
c0023c33:	4e                   	dec    esi
c0023c34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023c3a:	7f 22                	jg     c0023c5e <__divsf3+0x1e2>
c0023c3c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023c42:	85 f6                	test   esi,esi
c0023c44:	7f 23                	jg     c0023c69 <__divsf3+0x1ed>
c0023c46:	83 fe e9             	cmp    esi,0xffffffe9
c0023c49:	7c 1a                	jl     c0023c65 <__divsf3+0x1e9>
c0023c4b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c51:	b9 01 00 00 00       	mov    ecx,0x1
c0023c56:	29 f1                	sub    ecx,esi
c0023c58:	d3 ea                	shr    edx,cl
c0023c5a:	31 f6                	xor    esi,esi
c0023c5c:	eb 0b                	jmp    c0023c69 <__divsf3+0x1ed>
c0023c5e:	be ff 00 00 00       	mov    esi,0xff
c0023c63:	eb 02                	jmp    c0023c67 <__divsf3+0x1eb>
c0023c65:	31 f6                	xor    esi,esi
c0023c67:	31 d2                	xor    edx,edx
c0023c69:	89 d0                	mov    eax,edx
c0023c6b:	c1 e8 08             	shr    eax,0x8
c0023c6e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023c71:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023c77:	09 fe                	or     esi,edi
c0023c79:	c1 e6 17             	shl    esi,0x17
c0023c7c:	09 c6                	or     esi,eax
c0023c7e:	f6 c2 7f             	test   dl,0x7f
c0023c81:	0f 95 c1             	setne  cl
c0023c84:	09 c8                	or     eax,ecx
c0023c86:	83 e0 01             	and    eax,0x1
c0023c89:	c1 ea 07             	shr    edx,0x7
c0023c8c:	21 c2                	and    edx,eax
c0023c8e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023c91:	eb 0a                	jmp    c0023c9d <__divsf3+0x221>
c0023c93:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023c98:	eb 03                	jmp    c0023c9d <__divsf3+0x221>
c0023c9a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023c9d:	89 d8                	mov    eax,ebx
c0023c9f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023ca2:	5b                   	pop    ebx
c0023ca3:	5e                   	pop    esi
c0023ca4:	5f                   	pop    edi
c0023ca5:	5d                   	pop    ebp
c0023ca6:	c3                   	ret    

c0023ca7 <__floatsisf>:
c0023ca7:	55                   	push   ebp
c0023ca8:	89 e5                	mov    ebp,esp
c0023caa:	53                   	push   ebx
c0023cab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023cae:	85 d2                	test   edx,edx
c0023cb0:	7e 2b                	jle    c0023cdd <__floatsisf+0x36>
c0023cb2:	0f bd ca             	bsr    ecx,edx
c0023cb5:	83 f1 1f             	xor    ecx,0x1f
c0023cb8:	d3 e2                	shl    edx,cl
c0023cba:	89 d0                	mov    eax,edx
c0023cbc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023cc1:	89 c3                	mov    ebx,eax
c0023cc3:	c1 eb 08             	shr    ebx,0x8
c0023cc6:	80 e2 7f             	and    dl,0x7f
c0023cc9:	0f 95 c2             	setne  dl
c0023ccc:	09 da                	or     edx,ebx
c0023cce:	83 e2 01             	and    edx,0x1
c0023cd1:	c1 e8 07             	shr    eax,0x7
c0023cd4:	21 c2                	and    edx,eax
c0023cd6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023cdb:	eb 32                	jmp    c0023d0f <__floatsisf+0x68>
c0023cdd:	b8 00 00 00 00       	mov    eax,0x0
c0023ce2:	74 34                	je     c0023d18 <__floatsisf+0x71>
c0023ce4:	f7 da                	neg    edx
c0023ce6:	0f bd ca             	bsr    ecx,edx
c0023ce9:	83 f1 1f             	xor    ecx,0x1f
c0023cec:	d3 e2                	shl    edx,cl
c0023cee:	89 d0                	mov    eax,edx
c0023cf0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023cf5:	89 c3                	mov    ebx,eax
c0023cf7:	c1 eb 08             	shr    ebx,0x8
c0023cfa:	80 e2 7f             	and    dl,0x7f
c0023cfd:	0f 95 c2             	setne  dl
c0023d00:	09 da                	or     edx,ebx
c0023d02:	83 e2 01             	and    edx,0x1
c0023d05:	c1 e8 07             	shr    eax,0x7
c0023d08:	21 c2                	and    edx,eax
c0023d0a:	b8 9e 01 00 00       	mov    eax,0x19e
c0023d0f:	29 c8                	sub    eax,ecx
c0023d11:	c1 e0 17             	shl    eax,0x17
c0023d14:	09 d8                	or     eax,ebx
c0023d16:	01 d0                	add    eax,edx
c0023d18:	5b                   	pop    ebx
c0023d19:	5d                   	pop    ebp
c0023d1a:	c3                   	ret    

c0023d1b <__floatunsisf>:
c0023d1b:	55                   	push   ebp
c0023d1c:	89 e5                	mov    ebp,esp
c0023d1e:	53                   	push   ebx
c0023d1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d22:	31 c0                	xor    eax,eax
c0023d24:	85 d2                	test   edx,edx
c0023d26:	74 32                	je     c0023d5a <__floatunsisf+0x3f>
c0023d28:	0f bd ca             	bsr    ecx,edx
c0023d2b:	83 f1 1f             	xor    ecx,0x1f
c0023d2e:	d3 e2                	shl    edx,cl
c0023d30:	89 d0                	mov    eax,edx
c0023d32:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023d37:	89 c3                	mov    ebx,eax
c0023d39:	c1 eb 08             	shr    ebx,0x8
c0023d3c:	80 e2 7f             	and    dl,0x7f
c0023d3f:	0f 95 c2             	setne  dl
c0023d42:	09 da                	or     edx,ebx
c0023d44:	83 e2 01             	and    edx,0x1
c0023d47:	c1 e8 07             	shr    eax,0x7
c0023d4a:	21 c2                	and    edx,eax
c0023d4c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023d51:	29 c8                	sub    eax,ecx
c0023d53:	c1 e0 17             	shl    eax,0x17
c0023d56:	09 d8                	or     eax,ebx
c0023d58:	01 d0                	add    eax,edx
c0023d5a:	5b                   	pop    ebx
c0023d5b:	5d                   	pop    ebp
c0023d5c:	c3                   	ret    

c0023d5d <__fixsfsi>:
c0023d5d:	55                   	push   ebp
c0023d5e:	89 e5                	mov    ebp,esp
c0023d60:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d63:	89 d1                	mov    ecx,edx
c0023d65:	c1 e1 08             	shl    ecx,0x8
c0023d68:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023d6e:	c1 fa 17             	sar    edx,0x17
c0023d71:	78 1c                	js     c0023d8f <__fixsfsi+0x32>
c0023d73:	83 ea 7f             	sub    edx,0x7f
c0023d76:	31 c0                	xor    eax,eax
c0023d78:	83 fa 1e             	cmp    edx,0x1e
c0023d7b:	77 40                	ja     c0023dbd <__fixsfsi+0x60>
c0023d7d:	89 c8                	mov    eax,ecx
c0023d7f:	0d 00 00 00 80       	or     eax,0x80000000
c0023d84:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d89:	29 d1                	sub    ecx,edx
c0023d8b:	d3 e8                	shr    eax,cl
c0023d8d:	eb 2e                	jmp    c0023dbd <__fixsfsi+0x60>
c0023d8f:	31 c0                	xor    eax,eax
c0023d91:	81 c2 81 00 00 00    	add    edx,0x81
c0023d97:	78 24                	js     c0023dbd <__fixsfsi+0x60>
c0023d99:	83 fa 1e             	cmp    edx,0x1e
c0023d9c:	7e 09                	jle    c0023da7 <__fixsfsi+0x4a>
c0023d9e:	83 fa 1f             	cmp    edx,0x1f
c0023da1:	75 18                	jne    c0023dbb <__fixsfsi+0x5e>
c0023da3:	85 c9                	test   ecx,ecx
c0023da5:	75 14                	jne    c0023dbb <__fixsfsi+0x5e>
c0023da7:	89 c8                	mov    eax,ecx
c0023da9:	0d 00 00 00 80       	or     eax,0x80000000
c0023dae:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023db3:	29 d1                	sub    ecx,edx
c0023db5:	d3 e8                	shr    eax,cl
c0023db7:	f7 d8                	neg    eax
c0023db9:	eb 02                	jmp    c0023dbd <__fixsfsi+0x60>
c0023dbb:	31 c0                	xor    eax,eax
c0023dbd:	5d                   	pop    ebp
c0023dbe:	c3                   	ret    

c0023dbf <__fixunssfsi>:
c0023dbf:	55                   	push   ebp
c0023dc0:	89 e5                	mov    ebp,esp
c0023dc2:	53                   	push   ebx
c0023dc3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023dc6:	89 d3                	mov    ebx,edx
c0023dc8:	c1 fb 17             	sar    ebx,0x17
c0023dcb:	83 eb 7f             	sub    ebx,0x7f
c0023dce:	31 c0                	xor    eax,eax
c0023dd0:	83 fb 1f             	cmp    ebx,0x1f
c0023dd3:	77 18                	ja     c0023ded <__fixunssfsi+0x2e>
c0023dd5:	89 d0                	mov    eax,edx
c0023dd7:	c1 e0 08             	shl    eax,0x8
c0023dda:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023ddf:	0d 00 00 00 80       	or     eax,0x80000000
c0023de4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023de9:	29 d9                	sub    ecx,ebx
c0023deb:	d3 e8                	shr    eax,cl
c0023ded:	5b                   	pop    ebx
c0023dee:	5d                   	pop    ebp
c0023def:	c3                   	ret    

c0023df0 <__cmpsf2>:
c0023df0:	55                   	push   ebp
c0023df1:	89 e5                	mov    ebp,esp
c0023df3:	57                   	push   edi
c0023df4:	56                   	push   esi
c0023df5:	53                   	push   ebx
c0023df6:	83 ec 24             	sub    esp,0x24
c0023df9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023dfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023dff:	e8 4f 10 00 00       	call   c0024e53 <__truncdfsf2>
c0023e04:	5a                   	pop    edx
c0023e05:	59                   	pop    ecx
c0023e06:	89 c3                	mov    ebx,eax
c0023e08:	c1 e8 17             	shr    eax,0x17
c0023e0b:	0f b6 f0             	movzx  esi,al
c0023e0e:	89 d8                	mov    eax,ebx
c0023e10:	c1 e8 1f             	shr    eax,0x1f
c0023e13:	31 c6                	xor    esi,eax
c0023e15:	c1 e3 08             	shl    ebx,0x8
c0023e18:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023e1b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023e1e:	e8 30 10 00 00       	call   c0024e53 <__truncdfsf2>
c0023e23:	83 c4 10             	add    esp,0x10
c0023e26:	89 c1                	mov    ecx,eax
c0023e28:	c1 e9 17             	shr    ecx,0x17
c0023e2b:	0f b6 c9             	movzx  ecx,cl
c0023e2e:	89 c7                	mov    edi,eax
c0023e30:	c1 ef 1f             	shr    edi,0x1f
c0023e33:	89 ca                	mov    edx,ecx
c0023e35:	31 fa                	xor    edx,edi
c0023e37:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023e3a:	c1 e0 08             	shl    eax,0x8
c0023e3d:	89 c2                	mov    edx,eax
c0023e3f:	89 d8                	mov    eax,ebx
c0023e41:	09 d0                	or     eax,edx
c0023e43:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023e48:	09 f0                	or     eax,esi
c0023e4a:	75 08                	jne    c0023e54 <__cmpsf2+0x64>
c0023e4c:	31 c0                	xor    eax,eax
c0023e4e:	39 f9                	cmp    ecx,edi
c0023e50:	75 0c                	jne    c0023e5e <__cmpsf2+0x6e>
c0023e52:	eb 29                	jmp    c0023e7d <__cmpsf2+0x8d>
c0023e54:	b8 01 00 00 00       	mov    eax,0x1
c0023e59:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e5c:	7f 1f                	jg     c0023e7d <__cmpsf2+0x8d>
c0023e5e:	83 c8 ff             	or     eax,0xffffffff
c0023e61:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e64:	7c 17                	jl     c0023e7d <__cmpsf2+0x8d>
c0023e66:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023e6c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023e72:	b8 01 00 00 00       	mov    eax,0x1
c0023e77:	39 d3                	cmp    ebx,edx
c0023e79:	77 02                	ja     c0023e7d <__cmpsf2+0x8d>
c0023e7b:	19 c0                	sbb    eax,eax
c0023e7d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e80:	5b                   	pop    ebx
c0023e81:	5e                   	pop    esi
c0023e82:	5f                   	pop    edi
c0023e83:	5d                   	pop    ebp
c0023e84:	c3                   	ret    

c0023e85 <__eqsf2>:
c0023e85:	55                   	push   ebp
c0023e86:	89 e5                	mov    ebp,esp
c0023e88:	83 ec 24             	sub    esp,0x24
c0023e8b:	6a 01                	push   0x1
c0023e8d:	83 ec 0c             	sub    esp,0xc
c0023e90:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023e93:	e8 df 10 00 00       	call   c0024f77 <__extendsfdf2>
c0023e98:	83 c4 10             	add    esp,0x10
c0023e9b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e9e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ea1:	52                   	push   edx
c0023ea2:	50                   	push   eax
c0023ea3:	50                   	push   eax
c0023ea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ea7:	e8 cb 10 00 00       	call   c0024f77 <__extendsfdf2>
c0023eac:	59                   	pop    ecx
c0023ead:	59                   	pop    ecx
c0023eae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023eb1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023eb4:	52                   	push   edx
c0023eb5:	50                   	push   eax
c0023eb6:	e8 35 ff ff ff       	call   c0023df0 <__cmpsf2>
c0023ebb:	83 c4 20             	add    esp,0x20
c0023ebe:	c9                   	leave  
c0023ebf:	c3                   	ret    

c0023ec0 <__nesf2>:
c0023ec0:	eb c3                	jmp    c0023e85 <__eqsf2>

c0023ec2 <__gtsf2>:
c0023ec2:	55                   	push   ebp
c0023ec3:	89 e5                	mov    ebp,esp
c0023ec5:	83 ec 24             	sub    esp,0x24
c0023ec8:	6a ff                	push   0xffffffff
c0023eca:	83 ec 0c             	sub    esp,0xc
c0023ecd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ed0:	e8 a2 10 00 00       	call   c0024f77 <__extendsfdf2>
c0023ed5:	83 c4 10             	add    esp,0x10
c0023ed8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023edb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ede:	52                   	push   edx
c0023edf:	50                   	push   eax
c0023ee0:	50                   	push   eax
c0023ee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ee4:	e8 8e 10 00 00       	call   c0024f77 <__extendsfdf2>
c0023ee9:	59                   	pop    ecx
c0023eea:	59                   	pop    ecx
c0023eeb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023eee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ef1:	52                   	push   edx
c0023ef2:	50                   	push   eax
c0023ef3:	e8 f8 fe ff ff       	call   c0023df0 <__cmpsf2>
c0023ef8:	83 c4 20             	add    esp,0x20
c0023efb:	c9                   	leave  
c0023efc:	c3                   	ret    

c0023efd <__gesf2>:
c0023efd:	eb c3                	jmp    c0023ec2 <__gtsf2>

c0023eff <__ltsf2>:
c0023eff:	eb 84                	jmp    c0023e85 <__eqsf2>

c0023f01 <__lesf2>:
c0023f01:	eb 82                	jmp    c0023e85 <__eqsf2>

c0023f03 <__adddf3>:
c0023f03:	55                   	push   ebp
c0023f04:	89 e5                	mov    ebp,esp
c0023f06:	57                   	push   edi
c0023f07:	56                   	push   esi
c0023f08:	53                   	push   ebx
c0023f09:	83 ec 24             	sub    esp,0x24
c0023f0c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023f0f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023f12:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023f15:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023f18:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023f1b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023f1e:	89 c8                	mov    eax,ecx
c0023f20:	89 ce                	mov    esi,ecx
c0023f22:	c1 fe 14             	sar    esi,0x14
c0023f25:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0023f28:	89 fb                	mov    ebx,edi
c0023f2a:	89 fa                	mov    edx,edi
c0023f2c:	c1 e2 0b             	shl    edx,0xb
c0023f2f:	c1 e0 0b             	shl    eax,0xb
c0023f32:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023f37:	c1 eb 15             	shr    ebx,0x15
c0023f3a:	09 d8                	or     eax,ebx
c0023f3c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0023f3f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0023f42:	c1 fe 14             	sar    esi,0x14
c0023f45:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0023f48:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023f4b:	89 f3                	mov    ebx,esi
c0023f4d:	c1 e3 0b             	shl    ebx,0xb
c0023f50:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0023f53:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023f56:	c1 e3 0b             	shl    ebx,0xb
c0023f59:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0023f5f:	c1 ee 15             	shr    esi,0x15
c0023f62:	09 f3                	or     ebx,esi
c0023f64:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0023f67:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f6a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0023f6d:	0f 88 5f 02 00 00    	js     c00241d2 <__adddf3+0x2cf>
c0023f73:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023f76:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0023f79:	85 db                	test   ebx,ebx
c0023f7b:	0f 8e c7 00 00 00    	jle    c0024048 <__adddf3+0x145>
c0023f81:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0023f88:	75 1a                	jne    c0023fa4 <__adddf3+0xa1>
c0023f8a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023f8d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0023f90:	0f 84 b2 05 00 00    	je     c0024548 <__adddf3+0x645>
c0023f96:	4b                   	dec    ebx
c0023f97:	75 23                	jne    c0023fbc <__adddf3+0xb9>
c0023f99:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023f9c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023f9f:	e9 99 00 00 00       	jmp    c002403d <__adddf3+0x13a>
c0023fa4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023fa7:	f7 d6                	not    esi
c0023fa9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023faf:	0f 84 93 05 00 00    	je     c0024548 <__adddf3+0x645>
c0023fb5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0023fbc:	83 fb 1f             	cmp    ebx,0x1f
c0023fbf:	7e 42                	jle    c0024003 <__adddf3+0x100>
c0023fc1:	83 fb 3f             	cmp    ebx,0x3f
c0023fc4:	0f 8f 7e 05 00 00    	jg     c0024548 <__adddf3+0x645>
c0023fca:	83 e3 1f             	and    ebx,0x1f
c0023fcd:	89 d9                	mov    ecx,ebx
c0023fcf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023fd2:	d3 ef                	shr    edi,cl
c0023fd4:	31 db                	xor    ebx,ebx
c0023fd6:	85 c9                	test   ecx,ecx
c0023fd8:	74 15                	je     c0023fef <__adddf3+0xec>
c0023fda:	be 20 00 00 00       	mov    esi,0x20
c0023fdf:	29 ce                	sub    esi,ecx
c0023fe1:	89 f1                	mov    ecx,esi
c0023fe3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023fe6:	d3 e6                	shl    esi,cl
c0023fe8:	31 db                	xor    ebx,ebx
c0023fea:	85 f6                	test   esi,esi
c0023fec:	0f 95 c3             	setne  bl
c0023fef:	31 c9                	xor    ecx,ecx
c0023ff1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023ff5:	0f 95 c1             	setne  cl
c0023ff8:	09 cf                	or     edi,ecx
c0023ffa:	09 fb                	or     ebx,edi
c0023ffc:	01 da                	add    edx,ebx
c0023ffe:	83 d0 00             	adc    eax,0x0
c0024001:	eb 3a                	jmp    c002403d <__adddf3+0x13a>
c0024003:	bf 20 00 00 00       	mov    edi,0x20
c0024008:	29 df                	sub    edi,ebx
c002400a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002400d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024010:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024013:	d3 e6                	shl    esi,cl
c0024015:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024018:	88 d9                	mov    cl,bl
c002401a:	d3 ef                	shr    edi,cl
c002401c:	09 fe                	or     esi,edi
c002401e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024021:	88 d9                	mov    cl,bl
c0024023:	d3 ef                	shr    edi,cl
c0024025:	89 fb                	mov    ebx,edi
c0024027:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002402a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002402d:	d3 e7                	shl    edi,cl
c002402f:	85 ff                	test   edi,edi
c0024031:	0f 95 c1             	setne  cl
c0024034:	0f b6 c9             	movzx  ecx,cl
c0024037:	09 ce                	or     esi,ecx
c0024039:	01 f2                	add    edx,esi
c002403b:	11 d8                	adc    eax,ebx
c002403d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024040:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024043:	e9 52 01 00 00       	jmp    c002419a <__adddf3+0x297>
c0024048:	0f 84 d5 00 00 00    	je     c0024123 <__adddf3+0x220>
c002404e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024051:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024054:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024057:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002405a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024061:	75 20                	jne    c0024083 <__adddf3+0x180>
c0024063:	89 d6                	mov    esi,edx
c0024065:	09 c6                	or     esi,eax
c0024067:	0f 84 db 04 00 00    	je     c0024548 <__adddf3+0x645>
c002406d:	4b                   	dec    ebx
c002406e:	75 29                	jne    c0024099 <__adddf3+0x196>
c0024070:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024073:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024076:	01 d1                	add    ecx,edx
c0024078:	11 c6                	adc    esi,eax
c002407a:	89 f0                	mov    eax,esi
c002407c:	89 ca                	mov    edx,ecx
c002407e:	e9 17 01 00 00       	jmp    c002419a <__adddf3+0x297>
c0024083:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024086:	f7 d6                	not    esi
c0024088:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002408e:	0f 84 b4 04 00 00    	je     c0024548 <__adddf3+0x645>
c0024094:	0d 00 00 00 80       	or     eax,0x80000000
c0024099:	83 fb 1f             	cmp    ebx,0x1f
c002409c:	7e 48                	jle    c00240e6 <__adddf3+0x1e3>
c002409e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00240a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00240a4:	83 fb 3f             	cmp    ebx,0x3f
c00240a7:	0f 8f 9b 04 00 00    	jg     c0024548 <__adddf3+0x645>
c00240ad:	83 e3 1f             	and    ebx,0x1f
c00240b0:	89 d9                	mov    ecx,ebx
c00240b2:	89 c7                	mov    edi,eax
c00240b4:	d3 ef                	shr    edi,cl
c00240b6:	31 db                	xor    ebx,ebx
c00240b8:	85 c9                	test   ecx,ecx
c00240ba:	74 12                	je     c00240ce <__adddf3+0x1cb>
c00240bc:	be 20 00 00 00       	mov    esi,0x20
c00240c1:	29 ce                	sub    esi,ecx
c00240c3:	89 f1                	mov    ecx,esi
c00240c5:	d3 e0                	shl    eax,cl
c00240c7:	31 db                	xor    ebx,ebx
c00240c9:	85 c0                	test   eax,eax
c00240cb:	0f 95 c3             	setne  bl
c00240ce:	31 c0                	xor    eax,eax
c00240d0:	85 d2                	test   edx,edx
c00240d2:	0f 95 c0             	setne  al
c00240d5:	09 c7                	or     edi,eax
c00240d7:	09 fb                	or     ebx,edi
c00240d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240df:	01 da                	add    edx,ebx
c00240e1:	83 d6 00             	adc    esi,0x0
c00240e4:	eb 39                	jmp    c002411f <__adddf3+0x21c>
c00240e6:	be 20 00 00 00       	mov    esi,0x20
c00240eb:	29 de                	sub    esi,ebx
c00240ed:	89 c7                	mov    edi,eax
c00240ef:	89 f1                	mov    ecx,esi
c00240f1:	d3 e7                	shl    edi,cl
c00240f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00240f6:	89 d7                	mov    edi,edx
c00240f8:	88 d9                	mov    cl,bl
c00240fa:	d3 ef                	shr    edi,cl
c00240fc:	89 f9                	mov    ecx,edi
c00240fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024101:	09 cf                	or     edi,ecx
c0024103:	88 d9                	mov    cl,bl
c0024105:	d3 e8                	shr    eax,cl
c0024107:	89 f1                	mov    ecx,esi
c0024109:	d3 e2                	shl    edx,cl
c002410b:	85 d2                	test   edx,edx
c002410d:	0f 95 c2             	setne  dl
c0024110:	0f b6 d2             	movzx  edx,dl
c0024113:	09 d7                	or     edi,edx
c0024115:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024118:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002411b:	01 fa                	add    edx,edi
c002411d:	11 c6                	adc    esi,eax
c002411f:	89 f0                	mov    eax,esi
c0024121:	eb 77                	jmp    c002419a <__adddf3+0x297>
c0024123:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024126:	46                   	inc    esi
c0024127:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002412a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024130:	75 41                	jne    c0024173 <__adddf3+0x270>
c0024132:	89 d3                	mov    ebx,edx
c0024134:	09 c3                	or     ebx,eax
c0024136:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002413d:	75 27                	jne    c0024166 <__adddf3+0x263>
c002413f:	85 db                	test   ebx,ebx
c0024141:	0f 84 fb 03 00 00    	je     c0024542 <__adddf3+0x63f>
c0024147:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002414a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002414d:	0f 84 f5 03 00 00    	je     c0024548 <__adddf3+0x645>
c0024153:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024156:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024159:	85 c0                	test   eax,eax
c002415b:	0f 89 91 03 00 00    	jns    c00244f2 <__adddf3+0x5ef>
c0024161:	e9 85 03 00 00       	jmp    c00244eb <__adddf3+0x5e8>
c0024166:	85 db                	test   ebx,ebx
c0024168:	0f 85 da 03 00 00    	jne    c0024548 <__adddf3+0x645>
c002416e:	e9 cf 03 00 00       	jmp    c0024542 <__adddf3+0x63f>
c0024173:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024176:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024179:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002417c:	f7 d1                	not    ecx
c002417e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024184:	0f 84 70 03 00 00    	je     c00244fa <__adddf3+0x5f7>
c002418a:	d1 ea                	shr    edx,1
c002418c:	89 c1                	mov    ecx,eax
c002418e:	c1 e1 1f             	shl    ecx,0x1f
c0024191:	09 ca                	or     edx,ecx
c0024193:	d1 e8                	shr    eax,1
c0024195:	e9 6f 03 00 00       	jmp    c0024509 <__adddf3+0x606>
c002419a:	85 c0                	test   eax,eax
c002419c:	0f 89 67 03 00 00    	jns    c0024509 <__adddf3+0x606>
c00241a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00241a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00241a8:	f7 d1                	not    ecx
c00241aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00241b0:	0f 84 44 03 00 00    	je     c00244fa <__adddf3+0x5f7>
c00241b6:	89 d1                	mov    ecx,edx
c00241b8:	d1 e9                	shr    ecx,1
c00241ba:	83 e2 01             	and    edx,0x1
c00241bd:	09 ca                	or     edx,ecx
c00241bf:	89 c1                	mov    ecx,eax
c00241c1:	c1 e1 1f             	shl    ecx,0x1f
c00241c4:	09 ca                	or     edx,ecx
c00241c6:	d1 e8                	shr    eax,1
c00241c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00241cd:	e9 37 03 00 00       	jmp    c0024509 <__adddf3+0x606>
c00241d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00241d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00241db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00241de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00241e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241e7:	29 de                	sub    esi,ebx
c00241e9:	85 f6                	test   esi,esi
c00241eb:	0f 8e bd 00 00 00    	jle    c00242ae <__adddf3+0x3ab>
c00241f1:	85 db                	test   ebx,ebx
c00241f3:	75 17                	jne    c002420c <__adddf3+0x309>
c00241f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00241f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00241fb:	0f 84 47 03 00 00    	je     c0024548 <__adddf3+0x645>
c0024201:	4e                   	dec    esi
c0024202:	75 20                	jne    c0024224 <__adddf3+0x321>
c0024204:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0024207:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002420a:	eb 5b                	jmp    c0024267 <__adddf3+0x364>
c002420c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002420f:	f7 d3                	not    ebx
c0024211:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024217:	0f 84 2b 03 00 00    	je     c0024548 <__adddf3+0x645>
c002421d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024224:	83 fe 1f             	cmp    esi,0x1f
c0024227:	7e 49                	jle    c0024272 <__adddf3+0x36f>
c0024229:	83 fe 3f             	cmp    esi,0x3f
c002422c:	0f 8f 16 03 00 00    	jg     c0024548 <__adddf3+0x645>
c0024232:	83 e6 1f             	and    esi,0x1f
c0024235:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024238:	89 f1                	mov    ecx,esi
c002423a:	d3 ef                	shr    edi,cl
c002423c:	31 db                	xor    ebx,ebx
c002423e:	85 f6                	test   esi,esi
c0024240:	74 13                	je     c0024255 <__adddf3+0x352>
c0024242:	b9 20 00 00 00       	mov    ecx,0x20
c0024247:	29 f1                	sub    ecx,esi
c0024249:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002424c:	d3 e6                	shl    esi,cl
c002424e:	31 db                	xor    ebx,ebx
c0024250:	85 f6                	test   esi,esi
c0024252:	0f 95 c3             	setne  bl
c0024255:	31 c9                	xor    ecx,ecx
c0024257:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002425b:	0f 95 c1             	setne  cl
c002425e:	09 cf                	or     edi,ecx
c0024260:	09 fb                	or     ebx,edi
c0024262:	29 da                	sub    edx,ebx
c0024264:	83 d8 00             	sbb    eax,0x0
c0024267:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002426a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002426d:	e9 aa 01 00 00       	jmp    c002441c <__adddf3+0x519>
c0024272:	bf 20 00 00 00       	mov    edi,0x20
c0024277:	29 f7                	sub    edi,esi
c0024279:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002427c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002427f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024282:	d3 e3                	shl    ebx,cl
c0024284:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024287:	89 f1                	mov    ecx,esi
c0024289:	d3 ef                	shr    edi,cl
c002428b:	09 fb                	or     ebx,edi
c002428d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024290:	89 f1                	mov    ecx,esi
c0024292:	d3 ef                	shr    edi,cl
c0024294:	89 fe                	mov    esi,edi
c0024296:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024299:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002429c:	d3 e7                	shl    edi,cl
c002429e:	85 ff                	test   edi,edi
c00242a0:	0f 95 c1             	setne  cl
c00242a3:	0f b6 c9             	movzx  ecx,cl
c00242a6:	09 cb                	or     ebx,ecx
c00242a8:	29 da                	sub    edx,ebx
c00242aa:	19 f0                	sbb    eax,esi
c00242ac:	eb b9                	jmp    c0024267 <__adddf3+0x364>
c00242ae:	0f 84 cd 00 00 00    	je     c0024381 <__adddf3+0x47e>
c00242b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00242b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00242c1:	75 1b                	jne    c00242de <__adddf3+0x3db>
c00242c3:	89 d6                	mov    esi,edx
c00242c5:	09 c6                	or     esi,eax
c00242c7:	0f 84 7b 02 00 00    	je     c0024548 <__adddf3+0x645>
c00242cd:	4b                   	dec    ebx
c00242ce:	75 24                	jne    c00242f4 <__adddf3+0x3f1>
c00242d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00242d6:	29 d1                	sub    ecx,edx
c00242d8:	19 c6                	sbb    esi,eax
c00242da:	89 ca                	mov    edx,ecx
c00242dc:	eb 61                	jmp    c002433f <__adddf3+0x43c>
c00242de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00242e1:	f7 d6                	not    esi
c00242e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242e9:	0f 84 59 02 00 00    	je     c0024548 <__adddf3+0x645>
c00242ef:	0d 00 00 00 80       	or     eax,0x80000000
c00242f4:	83 fb 1f             	cmp    ebx,0x1f
c00242f7:	7e 4d                	jle    c0024346 <__adddf3+0x443>
c00242f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242ff:	83 fb 3f             	cmp    ebx,0x3f
c0024302:	0f 8f 40 02 00 00    	jg     c0024548 <__adddf3+0x645>
c0024308:	83 e3 1f             	and    ebx,0x1f
c002430b:	89 d9                	mov    ecx,ebx
c002430d:	89 c7                	mov    edi,eax
c002430f:	d3 ef                	shr    edi,cl
c0024311:	31 db                	xor    ebx,ebx
c0024313:	85 c9                	test   ecx,ecx
c0024315:	74 12                	je     c0024329 <__adddf3+0x426>
c0024317:	be 20 00 00 00       	mov    esi,0x20
c002431c:	29 ce                	sub    esi,ecx
c002431e:	89 f1                	mov    ecx,esi
c0024320:	d3 e0                	shl    eax,cl
c0024322:	31 db                	xor    ebx,ebx
c0024324:	85 c0                	test   eax,eax
c0024326:	0f 95 c3             	setne  bl
c0024329:	31 c0                	xor    eax,eax
c002432b:	85 d2                	test   edx,edx
c002432d:	0f 95 c0             	setne  al
c0024330:	09 c7                	or     edi,eax
c0024332:	09 fb                	or     ebx,edi
c0024334:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024337:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002433a:	29 da                	sub    edx,ebx
c002433c:	83 de 00             	sbb    esi,0x0
c002433f:	89 f0                	mov    eax,esi
c0024341:	e9 d6 00 00 00       	jmp    c002441c <__adddf3+0x519>
c0024346:	be 20 00 00 00       	mov    esi,0x20
c002434b:	29 de                	sub    esi,ebx
c002434d:	89 c7                	mov    edi,eax
c002434f:	89 f1                	mov    ecx,esi
c0024351:	d3 e7                	shl    edi,cl
c0024353:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024356:	89 d7                	mov    edi,edx
c0024358:	88 d9                	mov    cl,bl
c002435a:	d3 ef                	shr    edi,cl
c002435c:	89 f9                	mov    ecx,edi
c002435e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024361:	09 cf                	or     edi,ecx
c0024363:	88 d9                	mov    cl,bl
c0024365:	d3 e8                	shr    eax,cl
c0024367:	89 f1                	mov    ecx,esi
c0024369:	d3 e2                	shl    edx,cl
c002436b:	85 d2                	test   edx,edx
c002436d:	0f 95 c2             	setne  dl
c0024370:	0f b6 d2             	movzx  edx,dl
c0024373:	09 d7                	or     edi,edx
c0024375:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024378:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002437b:	29 fa                	sub    edx,edi
c002437d:	19 c6                	sbb    esi,eax
c002437f:	eb be                	jmp    c002433f <__adddf3+0x43c>
c0024381:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024384:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024387:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002438d:	75 6a                	jne    c00243f9 <__adddf3+0x4f6>
c002438f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024393:	75 58                	jne    c00243ed <__adddf3+0x4ea>
c0024395:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024398:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002439b:	89 d6                	mov    esi,edx
c002439d:	09 c6                	or     esi,eax
c002439f:	75 17                	jne    c00243b8 <__adddf3+0x4b5>
c00243a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00243a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00243a7:	85 db                	test   ebx,ebx
c00243a9:	0f 85 99 01 00 00    	jne    c0024548 <__adddf3+0x645>
c00243af:	31 ff                	xor    edi,edi
c00243b1:	31 c9                	xor    ecx,ecx
c00243b3:	e9 90 01 00 00       	jmp    c0024548 <__adddf3+0x645>
c00243b8:	85 db                	test   ebx,ebx
c00243ba:	0f 84 88 01 00 00    	je     c0024548 <__adddf3+0x645>
c00243c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00243c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00243c6:	85 c0                	test   eax,eax
c00243c8:	79 10                	jns    c00243da <__adddf3+0x4d7>
c00243ca:	31 c9                	xor    ecx,ecx
c00243cc:	f7 da                	neg    edx
c00243ce:	0f 95 c1             	setne  cl
c00243d1:	01 c8                	add    eax,ecx
c00243d3:	f7 d8                	neg    eax
c00243d5:	e9 2f 01 00 00       	jmp    c0024509 <__adddf3+0x606>
c00243da:	31 ff                	xor    edi,edi
c00243dc:	31 c9                	xor    ecx,ecx
c00243de:	89 c3                	mov    ebx,eax
c00243e0:	09 d3                	or     ebx,edx
c00243e2:	0f 84 60 01 00 00    	je     c0024548 <__adddf3+0x645>
c00243e8:	e9 05 01 00 00       	jmp    c00244f2 <__adddf3+0x5ef>
c00243ed:	31 ff                	xor    edi,edi
c00243ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00243f4:	e9 4f 01 00 00       	jmp    c0024548 <__adddf3+0x645>
c00243f9:	89 c1                	mov    ecx,eax
c00243fb:	89 d0                	mov    eax,edx
c00243fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0024400:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0024403:	89 ca                	mov    edx,ecx
c0024405:	85 c9                	test   ecx,ecx
c0024407:	79 2c                	jns    c0024435 <__adddf3+0x532>
c0024409:	31 c9                	xor    ecx,ecx
c002440b:	f7 d8                	neg    eax
c002440d:	0f 95 c1             	setne  cl
c0024410:	01 ca                	add    edx,ecx
c0024412:	f7 da                	neg    edx
c0024414:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024417:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002441a:	eb 19                	jmp    c0024435 <__adddf3+0x532>
c002441c:	85 c0                	test   eax,eax
c002441e:	0f 89 e5 00 00 00    	jns    c0024509 <__adddf3+0x606>
c0024424:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024429:	89 c1                	mov    ecx,eax
c002442b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002442e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024431:	89 d0                	mov    eax,edx
c0024433:	89 ca                	mov    edx,ecx
c0024435:	85 d2                	test   edx,edx
c0024437:	74 59                	je     c0024492 <__adddf3+0x58f>
c0024439:	0f bd da             	bsr    ebx,edx
c002443c:	83 f3 1f             	xor    ebx,0x1f
c002443f:	88 d9                	mov    cl,bl
c0024441:	d3 e2                	shl    edx,cl
c0024443:	bf 20 00 00 00       	mov    edi,0x20
c0024448:	89 f9                	mov    ecx,edi
c002444a:	29 d9                	sub    ecx,ebx
c002444c:	89 c6                	mov    esi,eax
c002444e:	d3 ee                	shr    esi,cl
c0024450:	09 d6                	or     esi,edx
c0024452:	88 d9                	mov    cl,bl
c0024454:	d3 e0                	shl    eax,cl
c0024456:	89 c2                	mov    edx,eax
c0024458:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002445b:	25 ff 07 00 00       	and    eax,0x7ff
c0024460:	39 d8                	cmp    eax,ebx
c0024462:	7f 22                	jg     c0024486 <__adddf3+0x583>
c0024464:	29 c3                	sub    ebx,eax
c0024466:	43                   	inc    ebx
c0024467:	88 d9                	mov    cl,bl
c0024469:	d3 ea                	shr    edx,cl
c002446b:	29 df                	sub    edi,ebx
c002446d:	89 f9                	mov    ecx,edi
c002446f:	89 f0                	mov    eax,esi
c0024471:	d3 e0                	shl    eax,cl
c0024473:	09 c2                	or     edx,eax
c0024475:	89 f0                	mov    eax,esi
c0024477:	88 d9                	mov    cl,bl
c0024479:	d3 e8                	shr    eax,cl
c002447b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002447e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024484:	eb 6f                	jmp    c00244f5 <__adddf3+0x5f2>
c0024486:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024489:	29 d8                	sub    eax,ebx
c002448b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002448e:	89 f0                	mov    eax,esi
c0024490:	eb 59                	jmp    c00244eb <__adddf3+0x5e8>
c0024492:	85 c0                	test   eax,eax
c0024494:	74 6a                	je     c0024500 <__adddf3+0x5fd>
c0024496:	0f bd c8             	bsr    ecx,eax
c0024499:	83 f1 1f             	xor    ecx,0x1f
c002449c:	d3 e0                	shl    eax,cl
c002449e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00244a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00244a7:	83 c1 20             	add    ecx,0x20
c00244aa:	39 cb                	cmp    ebx,ecx
c00244ac:	7f 35                	jg     c00244e3 <__adddf3+0x5e0>
c00244ae:	29 d9                	sub    ecx,ebx
c00244b0:	8d 71 01             	lea    esi,[ecx+0x1]
c00244b3:	83 fe 1f             	cmp    esi,0x1f
c00244b6:	7e 09                	jle    c00244c1 <__adddf3+0x5be>
c00244b8:	83 e9 1f             	sub    ecx,0x1f
c00244bb:	d3 e8                	shr    eax,cl
c00244bd:	89 c3                	mov    ebx,eax
c00244bf:	eb 11                	jmp    c00244d2 <__adddf3+0x5cf>
c00244c1:	b9 20 00 00 00       	mov    ecx,0x20
c00244c6:	29 f1                	sub    ecx,esi
c00244c8:	89 c3                	mov    ebx,eax
c00244ca:	d3 e3                	shl    ebx,cl
c00244cc:	89 f1                	mov    ecx,esi
c00244ce:	d3 e8                	shr    eax,cl
c00244d0:	89 c2                	mov    edx,eax
c00244d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244d5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00244da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244dd:	89 d0                	mov    eax,edx
c00244df:	89 da                	mov    edx,ebx
c00244e1:	eb 26                	jmp    c0024509 <__adddf3+0x606>
c00244e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244e6:	29 cf                	sub    edi,ecx
c00244e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244eb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00244f0:	eb 17                	jmp    c0024509 <__adddf3+0x606>
c00244f2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244f5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244f8:	eb 0f                	jmp    c0024509 <__adddf3+0x606>
c00244fa:	31 d2                	xor    edx,edx
c00244fc:	31 c0                	xor    eax,eax
c00244fe:	eb 09                	jmp    c0024509 <__adddf3+0x606>
c0024500:	89 c2                	mov    edx,eax
c0024502:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024509:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002450c:	c1 e1 14             	shl    ecx,0x14
c002450f:	89 c3                	mov    ebx,eax
c0024511:	c1 eb 0b             	shr    ebx,0xb
c0024514:	09 d9                	or     ecx,ebx
c0024516:	89 d3                	mov    ebx,edx
c0024518:	c1 eb 0b             	shr    ebx,0xb
c002451b:	c1 e0 15             	shl    eax,0x15
c002451e:	09 d8                	or     eax,ebx
c0024520:	89 c7                	mov    edi,eax
c0024522:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024528:	0f 95 c0             	setne  al
c002452b:	89 c6                	mov    esi,eax
c002452d:	09 f3                	or     ebx,esi
c002452f:	83 e3 01             	and    ebx,0x1
c0024532:	c1 ea 0a             	shr    edx,0xa
c0024535:	21 da                	and    edx,ebx
c0024537:	89 f8                	mov    eax,edi
c0024539:	01 d0                	add    eax,edx
c002453b:	83 d1 00             	adc    ecx,0x0
c002453e:	89 c7                	mov    edi,eax
c0024540:	eb 06                	jmp    c0024548 <__adddf3+0x645>
c0024542:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024545:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024548:	89 f8                	mov    eax,edi
c002454a:	89 ca                	mov    edx,ecx
c002454c:	83 c4 24             	add    esp,0x24
c002454f:	5b                   	pop    ebx
c0024550:	5e                   	pop    esi
c0024551:	5f                   	pop    edi
c0024552:	5d                   	pop    ebp
c0024553:	c3                   	ret    

c0024554 <__subdf3>:
c0024554:	55                   	push   ebp
c0024555:	89 e5                	mov    ebp,esp
c0024557:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002455a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002455d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024563:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024566:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024569:	5d                   	pop    ebp
c002456a:	e9 94 f9 ff ff       	jmp    c0023f03 <__adddf3>

c002456f <__negdf2>:
c002456f:	55                   	push   ebp
c0024570:	89 e5                	mov    ebp,esp
c0024572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024575:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024578:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002457e:	5d                   	pop    ebp
c002457f:	c3                   	ret    

c0024580 <__muldf3>:
c0024580:	55                   	push   ebp
c0024581:	89 e5                	mov    ebp,esp
c0024583:	57                   	push   edi
c0024584:	56                   	push   esi
c0024585:	53                   	push   ebx
c0024586:	83 ec 24             	sub    esp,0x24
c0024589:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002458c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002458f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024592:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024595:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024598:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002459b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002459e:	89 c8                	mov    eax,ecx
c00245a0:	c1 f8 14             	sar    eax,0x14
c00245a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00245a6:	89 f8                	mov    eax,edi
c00245a8:	89 fb                	mov    ebx,edi
c00245aa:	c1 e3 0b             	shl    ebx,0xb
c00245ad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00245b0:	c1 e1 0b             	shl    ecx,0xb
c00245b3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00245b9:	c1 e8 15             	shr    eax,0x15
c00245bc:	09 c1                	or     ecx,eax
c00245be:	89 d6                	mov    esi,edx
c00245c0:	89 d0                	mov    eax,edx
c00245c2:	c1 f8 14             	sar    eax,0x14
c00245c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245c8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245cb:	89 c3                	mov    ebx,eax
c00245cd:	c1 e3 0b             	shl    ebx,0xb
c00245d0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00245d3:	c1 e6 0b             	shl    esi,0xb
c00245d6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00245dc:	c1 e8 15             	shr    eax,0x15
c00245df:	09 c6                	or     esi,eax
c00245e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245e4:	25 ff 07 00 00       	and    eax,0x7ff
c00245e9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00245ec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00245ef:	25 ff 07 00 00       	and    eax,0x7ff
c00245f4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00245f7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00245fa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00245fd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0024604:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024607:	40                   	inc    eax
c0024608:	a9 fe 07 00 00       	test   eax,0x7fe
c002460d:	0f 85 8d 00 00 00    	jne    c00246a0 <__muldf3+0x120>
c0024613:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024616:	09 c8                	or     eax,ecx
c0024618:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002461c:	74 44                	je     c0024662 <__muldf3+0xe2>
c002461e:	85 c0                	test   eax,eax
c0024620:	0f 85 31 02 00 00    	jne    c0024857 <__muldf3+0x2d7>
c0024626:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024629:	40                   	inc    eax
c002462a:	a9 fe 07 00 00       	test   eax,0x7fe
c002462f:	75 13                	jne    c0024644 <__muldf3+0xc4>
c0024631:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024634:	09 f1                	or     ecx,esi
c0024636:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002463a:	74 22                	je     c002465e <__muldf3+0xde>
c002463c:	85 c9                	test   ecx,ecx
c002463e:	0f 85 0d 02 00 00    	jne    c0024851 <__muldf3+0x2d1>
c0024644:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024648:	0f 89 09 02 00 00    	jns    c0024857 <__muldf3+0x2d7>
c002464e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024651:	05 00 00 00 80       	add    eax,0x80000000
c0024656:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024659:	e9 f9 01 00 00       	jmp    c0024857 <__muldf3+0x2d7>
c002465e:	85 c9                	test   ecx,ecx
c0024660:	eb 2e                	jmp    c0024690 <__muldf3+0x110>
c0024662:	85 c0                	test   eax,eax
c0024664:	74 20                	je     c0024686 <__muldf3+0x106>
c0024666:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024669:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002466c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002466f:	c1 ef 1f             	shr    edi,0x1f
c0024672:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024675:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024678:	8d 43 ff             	lea    eax,[ebx-0x1]
c002467b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002467e:	09 f9                	or     ecx,edi
c0024680:	78 1e                	js     c00246a0 <__muldf3+0x120>
c0024682:	89 c3                	mov    ebx,eax
c0024684:	eb e0                	jmp    c0024666 <__muldf3+0xe6>
c0024686:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024689:	f7 d0                	not    eax
c002468b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024690:	75 b2                	jne    c0024644 <__muldf3+0xc4>
c0024692:	31 ff                	xor    edi,edi
c0024694:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002469b:	e9 b7 01 00 00       	jmp    c0024857 <__muldf3+0x2d7>
c00246a0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00246a3:	40                   	inc    eax
c00246a4:	a9 fe 07 00 00       	test   eax,0x7fe
c00246a9:	75 57                	jne    c0024702 <__muldf3+0x182>
c00246ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00246ae:	09 f0                	or     eax,esi
c00246b0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00246b4:	74 23                	je     c00246d9 <__muldf3+0x159>
c00246b6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00246ba:	0f 89 91 01 00 00    	jns    c0024851 <__muldf3+0x2d1>
c00246c0:	85 c0                	test   eax,eax
c00246c2:	0f 85 89 01 00 00    	jne    c0024851 <__muldf3+0x2d1>
c00246c8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00246cb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00246d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246d4:	e9 7e 01 00 00       	jmp    c0024857 <__muldf3+0x2d7>
c00246d9:	85 c0                	test   eax,eax
c00246db:	75 0c                	jne    c00246e9 <__muldf3+0x169>
c00246dd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00246e1:	0f 89 6a 01 00 00    	jns    c0024851 <__muldf3+0x2d1>
c00246e7:	eb df                	jmp    c00246c8 <__muldf3+0x148>
c00246e9:	01 f6                	add    esi,esi
c00246eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00246ee:	c1 ea 1f             	shr    edx,0x1f
c00246f1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00246f4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00246f7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00246fa:	09 d6                	or     esi,edx
c00246fc:	78 04                	js     c0024702 <__muldf3+0x182>
c00246fe:	89 c3                	mov    ebx,eax
c0024700:	eb e7                	jmp    c00246e9 <__muldf3+0x169>
c0024702:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0024708:	81 ce 00 00 00 80    	or     esi,0x80000000
c002470e:	89 c8                	mov    eax,ecx
c0024710:	f7 e6                	mul    esi
c0024712:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0024715:	89 c7                	mov    edi,eax
c0024717:	89 c8                	mov    eax,ecx
c0024719:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002471c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002471f:	89 c1                	mov    ecx,eax
c0024721:	89 f0                	mov    eax,esi
c0024723:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024726:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024729:	89 c6                	mov    esi,eax
c002472b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002472e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024731:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024734:	31 c0                	xor    eax,eax
c0024736:	01 f1                	add    ecx,esi
c0024738:	0f 92 c0             	setb   al
c002473b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002473e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024741:	83 d6 00             	adc    esi,0x0
c0024744:	01 c7                	add    edi,eax
c0024746:	83 d6 00             	adc    esi,0x0
c0024749:	01 ca                	add    edx,ecx
c002474b:	0f 92 c1             	setb   cl
c002474e:	0f b6 c9             	movzx  ecx,cl
c0024751:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024754:	83 d6 00             	adc    esi,0x0
c0024757:	01 cf                	add    edi,ecx
c0024759:	83 d6 00             	adc    esi,0x0
c002475c:	31 c9                	xor    ecx,ecx
c002475e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024761:	0f 95 c1             	setne  cl
c0024764:	09 cf                	or     edi,ecx
c0024766:	85 f6                	test   esi,esi
c0024768:	78 0c                	js     c0024776 <__muldf3+0x1f6>
c002476a:	01 f6                	add    esi,esi
c002476c:	89 f8                	mov    eax,edi
c002476e:	c1 e8 1f             	shr    eax,0x1f
c0024771:	09 c6                	or     esi,eax
c0024773:	01 ff                	add    edi,edi
c0024775:	4b                   	dec    ebx
c0024776:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002477c:	0f 8f 85 00 00 00    	jg     c0024807 <__muldf3+0x287>
c0024782:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024788:	85 db                	test   ebx,ebx
c002478a:	0f 8f 84 00 00 00    	jg     c0024814 <__muldf3+0x294>
c0024790:	83 fb cc             	cmp    ebx,0xffffffcc
c0024793:	7c 79                	jl     c002480e <__muldf3+0x28e>
c0024795:	ba 01 00 00 00       	mov    edx,0x1
c002479a:	29 da                	sub    edx,ebx
c002479c:	81 ce 00 00 00 80    	or     esi,0x80000000
c00247a2:	83 fa 1f             	cmp    edx,0x1f
c00247a5:	7e 30                	jle    c00247d7 <__muldf3+0x257>
c00247a7:	83 fa 20             	cmp    edx,0x20
c00247aa:	75 0b                	jne    c00247b7 <__muldf3+0x237>
c00247ac:	31 c0                	xor    eax,eax
c00247ae:	85 ff                	test   edi,edi
c00247b0:	0f 95 c0             	setne  al
c00247b3:	89 c7                	mov    edi,eax
c00247b5:	eb 1a                	jmp    c00247d1 <__muldf3+0x251>
c00247b7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00247ba:	89 f0                	mov    eax,esi
c00247bc:	d3 e0                	shl    eax,cl
c00247be:	09 f8                	or     eax,edi
c00247c0:	0f 95 c0             	setne  al
c00247c3:	0f b6 c0             	movzx  eax,al
c00247c6:	89 c7                	mov    edi,eax
c00247c8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00247cd:	29 d9                	sub    ecx,ebx
c00247cf:	d3 ee                	shr    esi,cl
c00247d1:	09 f7                	or     edi,esi
c00247d3:	31 db                	xor    ebx,ebx
c00247d5:	eb 3b                	jmp    c0024812 <__muldf3+0x292>
c00247d7:	83 c3 1f             	add    ebx,0x1f
c00247da:	89 f0                	mov    eax,esi
c00247dc:	88 d9                	mov    cl,bl
c00247de:	d3 e0                	shl    eax,cl
c00247e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247e3:	89 f8                	mov    eax,edi
c00247e5:	88 d1                	mov    cl,dl
c00247e7:	d3 e8                	shr    eax,cl
c00247e9:	89 c1                	mov    ecx,eax
c00247eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00247ee:	09 c8                	or     eax,ecx
c00247f0:	88 d9                	mov    cl,bl
c00247f2:	d3 e7                	shl    edi,cl
c00247f4:	31 db                	xor    ebx,ebx
c00247f6:	85 ff                	test   edi,edi
c00247f8:	0f 95 c3             	setne  bl
c00247fb:	89 df                	mov    edi,ebx
c00247fd:	09 c7                	or     edi,eax
c00247ff:	88 d1                	mov    cl,dl
c0024801:	d3 ee                	shr    esi,cl
c0024803:	31 db                	xor    ebx,ebx
c0024805:	eb 0d                	jmp    c0024814 <__muldf3+0x294>
c0024807:	bb ff 07 00 00       	mov    ebx,0x7ff
c002480c:	eb 02                	jmp    c0024810 <__muldf3+0x290>
c002480e:	31 db                	xor    ebx,ebx
c0024810:	31 ff                	xor    edi,edi
c0024812:	31 f6                	xor    esi,esi
c0024814:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0024817:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002481a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002481f:	09 c3                	or     ebx,eax
c0024821:	c1 e3 14             	shl    ebx,0x14
c0024824:	89 f0                	mov    eax,esi
c0024826:	c1 e8 0b             	shr    eax,0xb
c0024829:	09 c3                	or     ebx,eax
c002482b:	89 f8                	mov    eax,edi
c002482d:	c1 e8 0b             	shr    eax,0xb
c0024830:	c1 e6 15             	shl    esi,0x15
c0024833:	09 c6                	or     esi,eax
c0024835:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002483b:	0f 95 c1             	setne  cl
c002483e:	09 c8                	or     eax,ecx
c0024840:	83 e0 01             	and    eax,0x1
c0024843:	c1 ef 0a             	shr    edi,0xa
c0024846:	21 c7                	and    edi,eax
c0024848:	01 f7                	add    edi,esi
c002484a:	83 d3 00             	adc    ebx,0x0
c002484d:	89 da                	mov    edx,ebx
c002484f:	eb 03                	jmp    c0024854 <__muldf3+0x2d4>
c0024851:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024854:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024857:	89 f8                	mov    eax,edi
c0024859:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002485c:	83 c4 24             	add    esp,0x24
c002485f:	5b                   	pop    ebx
c0024860:	5e                   	pop    esi
c0024861:	5f                   	pop    edi
c0024862:	5d                   	pop    ebp
c0024863:	c3                   	ret    

c0024864 <__divdf3>:
c0024864:	55                   	push   ebp
c0024865:	89 e5                	mov    ebp,esp
c0024867:	57                   	push   edi
c0024868:	56                   	push   esi
c0024869:	53                   	push   ebx
c002486a:	83 ec 2c             	sub    esp,0x2c
c002486d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024870:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024873:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024876:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024879:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002487c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002487f:	89 ce                	mov    esi,ecx
c0024881:	89 c8                	mov    eax,ecx
c0024883:	c1 f8 14             	sar    eax,0x14
c0024886:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024889:	89 f8                	mov    eax,edi
c002488b:	89 fb                	mov    ebx,edi
c002488d:	c1 e3 0b             	shl    ebx,0xb
c0024890:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024893:	c1 e6 0b             	shl    esi,0xb
c0024896:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002489c:	c1 e8 15             	shr    eax,0x15
c002489f:	09 c6                	or     esi,eax
c00248a1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00248a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00248a7:	89 c2                	mov    edx,eax
c00248a9:	c1 fa 14             	sar    edx,0x14
c00248ac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00248af:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00248b2:	89 de                	mov    esi,ebx
c00248b4:	c1 e6 0b             	shl    esi,0xb
c00248b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00248ba:	c1 e0 0b             	shl    eax,0xb
c00248bd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00248c2:	c1 eb 15             	shr    ebx,0x15
c00248c5:	09 d8                	or     eax,ebx
c00248c7:	89 c2                	mov    edx,eax
c00248c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00248cc:	25 ff 07 00 00       	and    eax,0x7ff
c00248d1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00248d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00248d7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00248dd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00248e0:	29 d8                	sub    eax,ebx
c00248e2:	05 ff 03 00 00       	add    eax,0x3ff
c00248e7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00248ea:	46                   	inc    esi
c00248eb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00248f1:	0f 85 a5 00 00 00    	jne    c002499c <__divdf3+0x138>
c00248f7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00248fa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00248fd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0024901:	74 2a                	je     c002492d <__divdf3+0xc9>
c0024903:	85 f6                	test   esi,esi
c0024905:	0f 85 cc 02 00 00    	jne    c0024bd7 <__divdf3+0x373>
c002490b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002490e:	40                   	inc    eax
c002490f:	a9 fe 07 00 00       	test   eax,0x7fe
c0024914:	75 26                	jne    c002493c <__divdf3+0xd8>
c0024916:	85 db                	test   ebx,ebx
c0024918:	74 22                	je     c002493c <__divdf3+0xd8>
c002491a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002491d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024920:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024923:	09 d0                	or     eax,edx
c0024925:	0f 85 ac 02 00 00    	jne    c0024bd7 <__divdf3+0x373>
c002492b:	eb 63                	jmp    c0024990 <__divdf3+0x12c>
c002492d:	85 f6                	test   esi,esi
c002492f:	75 22                	jne    c0024953 <__divdf3+0xef>
c0024931:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024934:	40                   	inc    eax
c0024935:	a9 fe 07 00 00       	test   eax,0x7fe
c002493a:	74 36                	je     c0024972 <__divdf3+0x10e>
c002493c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024940:	0f 89 91 02 00 00    	jns    c0024bd7 <__divdf3+0x373>
c0024946:	89 f8                	mov    eax,edi
c0024948:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002494e:	e9 80 02 00 00       	jmp    c0024bd3 <__divdf3+0x36f>
c0024953:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024956:	01 f6                	add    esi,esi
c0024958:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002495b:	c1 ef 1f             	shr    edi,0x1f
c002495e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024961:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024964:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024967:	09 f7                	or     edi,esi
c0024969:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002496c:	78 2e                	js     c002499c <__divdf3+0x138>
c002496e:	89 c8                	mov    eax,ecx
c0024970:	eb e1                	jmp    c0024953 <__divdf3+0xef>
c0024972:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024975:	09 d0                	or     eax,edx
c0024977:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002497b:	74 0f                	je     c002498c <__divdf3+0x128>
c002497d:	85 c0                	test   eax,eax
c002497f:	74 bb                	je     c002493c <__divdf3+0xd8>
c0024981:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024984:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024987:	e9 4b 02 00 00       	jmp    c0024bd7 <__divdf3+0x373>
c002498c:	85 c0                	test   eax,eax
c002498e:	75 ac                	jne    c002493c <__divdf3+0xd8>
c0024990:	31 ff                	xor    edi,edi
c0024992:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024997:	e9 3b 02 00 00       	jmp    c0024bd7 <__divdf3+0x373>
c002499c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002499f:	8d 4f 01             	lea    ecx,[edi+0x1]
c00249a2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00249a8:	75 6b                	jne    c0024a15 <__divdf3+0x1b1>
c00249aa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00249ad:	09 d6                	or     esi,edx
c00249af:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00249b3:	74 28                	je     c00249dd <__divdf3+0x179>
c00249b5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00249b8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00249bb:	85 f6                	test   esi,esi
c00249bd:	0f 85 14 02 00 00    	jne    c0024bd7 <__divdf3+0x373>
c00249c3:	31 ff                	xor    edi,edi
c00249c5:	31 c9                	xor    ecx,ecx
c00249c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249ca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249cd:	0f 89 04 02 00 00    	jns    c0024bd7 <__divdf3+0x373>
c00249d3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00249d8:	e9 fa 01 00 00       	jmp    c0024bd7 <__divdf3+0x373>
c00249dd:	85 f6                	test   esi,esi
c00249df:	75 1b                	jne    c00249fc <__divdf3+0x198>
c00249e1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249e4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249e7:	25 00 00 00 80       	and    eax,0x80000000
c00249ec:	31 c9                	xor    ecx,ecx
c00249ee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00249f3:	89 cf                	mov    edi,ecx
c00249f5:	89 c1                	mov    ecx,eax
c00249f7:	e9 db 01 00 00       	jmp    c0024bd7 <__divdf3+0x373>
c00249fc:	01 d2                	add    edx,edx
c00249fe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024a01:	c1 eb 1f             	shr    ebx,0x1f
c0024a04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024a07:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0024a0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0024a0d:	09 da                	or     edx,ebx
c0024a0f:	78 04                	js     c0024a15 <__divdf3+0x1b1>
c0024a11:	89 c8                	mov    eax,ecx
c0024a13:	eb e7                	jmp    c00249fc <__divdf3+0x198>
c0024a15:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024a18:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024a1e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024a24:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024a27:	39 d6                	cmp    esi,edx
c0024a29:	77 0d                	ja     c0024a38 <__divdf3+0x1d4>
c0024a2b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024a2e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024a31:	72 1b                	jb     c0024a4e <__divdf3+0x1ea>
c0024a33:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024a36:	75 16                	jne    c0024a4e <__divdf3+0x1ea>
c0024a38:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a3b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024a3e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024a41:	83 de 00             	sbb    esi,0x0
c0024a44:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024a47:	ba 01 00 00 00       	mov    edx,0x1
c0024a4c:	eb 02                	jmp    c0024a50 <__divdf3+0x1ec>
c0024a4e:	31 d2                	xor    edx,edx
c0024a50:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024a57:	31 ff                	xor    edi,edi
c0024a59:	01 ff                	add    edi,edi
c0024a5b:	89 d1                	mov    ecx,edx
c0024a5d:	c1 e9 1f             	shr    ecx,0x1f
c0024a60:	09 cf                	or     edi,ecx
c0024a62:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024a65:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024a68:	89 da                	mov    edx,ebx
c0024a6a:	89 f3                	mov    ebx,esi
c0024a6c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024a6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a72:	c1 e9 1f             	shr    ecx,0x1f
c0024a75:	09 ce                	or     esi,ecx
c0024a77:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a7a:	01 c9                	add    ecx,ecx
c0024a7c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024a7f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a82:	85 db                	test   ebx,ebx
c0024a84:	78 29                	js     c0024aaf <__divdf3+0x24b>
c0024a86:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024a89:	72 07                	jb     c0024a92 <__divdf3+0x22e>
c0024a8b:	75 3c                	jne    c0024ac9 <__divdf3+0x265>
c0024a8d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a90:	77 37                	ja     c0024ac9 <__divdf3+0x265>
c0024a92:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a95:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024a98:	31 d2                	xor    edx,edx
c0024a9a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024a9d:	0f 97 c2             	seta   dl
c0024aa0:	29 d6                	sub    esi,edx
c0024aa2:	89 d9                	mov    ecx,ebx
c0024aa4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024aa7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024aaa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024aad:	eb 17                	jmp    c0024ac6 <__divdf3+0x262>
c0024aaf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024ab2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024ab5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024ab8:	0f 97 c1             	seta   cl
c0024abb:	0f b6 c9             	movzx  ecx,cl
c0024abe:	29 ce                	sub    esi,ecx
c0024ac0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024ac3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024ac6:	83 ca 01             	or     edx,0x1
c0024ac9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024acc:	75 8b                	jne    c0024a59 <__divdf3+0x1f5>
c0024ace:	c1 e7 09             	shl    edi,0x9
c0024ad1:	89 d1                	mov    ecx,edx
c0024ad3:	c1 e9 17             	shr    ecx,0x17
c0024ad6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024ad9:	09 f3                	or     ebx,esi
c0024adb:	0f 95 c3             	setne  bl
c0024ade:	0f b6 db             	movzx  ebx,bl
c0024ae1:	c1 e2 09             	shl    edx,0x9
c0024ae4:	09 d3                	or     ebx,edx
c0024ae6:	89 ca                	mov    edx,ecx
c0024ae8:	09 fa                	or     edx,edi
c0024aea:	78 0c                	js     c0024af8 <__divdf3+0x294>
c0024aec:	01 d2                	add    edx,edx
c0024aee:	89 d9                	mov    ecx,ebx
c0024af0:	c1 e9 1f             	shr    ecx,0x1f
c0024af3:	09 ca                	or     edx,ecx
c0024af5:	01 db                	add    ebx,ebx
c0024af7:	48                   	dec    eax
c0024af8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024afd:	0f 8f 83 00 00 00    	jg     c0024b86 <__divdf3+0x322>
c0024b03:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024b09:	85 c0                	test   eax,eax
c0024b0b:	0f 8f 82 00 00 00    	jg     c0024b93 <__divdf3+0x32f>
c0024b11:	83 f8 cc             	cmp    eax,0xffffffcc
c0024b14:	7c 77                	jl     c0024b8d <__divdf3+0x329>
c0024b16:	be 01 00 00 00       	mov    esi,0x1
c0024b1b:	29 c6                	sub    esi,eax
c0024b1d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b23:	83 fe 1f             	cmp    esi,0x1f
c0024b26:	7e 2f                	jle    c0024b57 <__divdf3+0x2f3>
c0024b28:	83 fe 20             	cmp    esi,0x20
c0024b2b:	75 0a                	jne    c0024b37 <__divdf3+0x2d3>
c0024b2d:	85 db                	test   ebx,ebx
c0024b2f:	0f 95 c3             	setne  bl
c0024b32:	0f b6 db             	movzx  ebx,bl
c0024b35:	eb 1a                	jmp    c0024b51 <__divdf3+0x2ed>
c0024b37:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024b3a:	89 d7                	mov    edi,edx
c0024b3c:	d3 e7                	shl    edi,cl
c0024b3e:	89 f9                	mov    ecx,edi
c0024b40:	09 d9                	or     ecx,ebx
c0024b42:	0f 95 c3             	setne  bl
c0024b45:	0f b6 db             	movzx  ebx,bl
c0024b48:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024b4d:	29 c1                	sub    ecx,eax
c0024b4f:	d3 ea                	shr    edx,cl
c0024b51:	09 d3                	or     ebx,edx
c0024b53:	31 c0                	xor    eax,eax
c0024b55:	eb 3a                	jmp    c0024b91 <__divdf3+0x32d>
c0024b57:	83 c0 1f             	add    eax,0x1f
c0024b5a:	89 d7                	mov    edi,edx
c0024b5c:	88 c1                	mov    cl,al
c0024b5e:	d3 e7                	shl    edi,cl
c0024b60:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024b63:	89 df                	mov    edi,ebx
c0024b65:	89 f1                	mov    ecx,esi
c0024b67:	d3 ef                	shr    edi,cl
c0024b69:	89 f9                	mov    ecx,edi
c0024b6b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b6e:	09 cf                	or     edi,ecx
c0024b70:	88 c1                	mov    cl,al
c0024b72:	d3 e3                	shl    ebx,cl
c0024b74:	85 db                	test   ebx,ebx
c0024b76:	0f 95 c3             	setne  bl
c0024b79:	0f b6 db             	movzx  ebx,bl
c0024b7c:	09 fb                	or     ebx,edi
c0024b7e:	89 f1                	mov    ecx,esi
c0024b80:	d3 ea                	shr    edx,cl
c0024b82:	31 c0                	xor    eax,eax
c0024b84:	eb 0d                	jmp    c0024b93 <__divdf3+0x32f>
c0024b86:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024b8b:	eb 02                	jmp    c0024b8f <__divdf3+0x32b>
c0024b8d:	31 c0                	xor    eax,eax
c0024b8f:	31 db                	xor    ebx,ebx
c0024b91:	31 d2                	xor    edx,edx
c0024b93:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024b96:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024b99:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024b9f:	09 c8                	or     eax,ecx
c0024ba1:	c1 e0 14             	shl    eax,0x14
c0024ba4:	89 d1                	mov    ecx,edx
c0024ba6:	c1 e9 0b             	shr    ecx,0xb
c0024ba9:	09 c8                	or     eax,ecx
c0024bab:	89 c6                	mov    esi,eax
c0024bad:	89 d9                	mov    ecx,ebx
c0024baf:	c1 e9 0b             	shr    ecx,0xb
c0024bb2:	c1 e2 15             	shl    edx,0x15
c0024bb5:	09 ca                	or     edx,ecx
c0024bb7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024bbd:	0f 95 c0             	setne  al
c0024bc0:	09 c1                	or     ecx,eax
c0024bc2:	83 e1 01             	and    ecx,0x1
c0024bc5:	c1 eb 0a             	shr    ebx,0xa
c0024bc8:	21 cb                	and    ebx,ecx
c0024bca:	01 d3                	add    ebx,edx
c0024bcc:	89 d8                	mov    eax,ebx
c0024bce:	83 d6 00             	adc    esi,0x0
c0024bd1:	89 f2                	mov    edx,esi
c0024bd3:	89 c7                	mov    edi,eax
c0024bd5:	89 d1                	mov    ecx,edx
c0024bd7:	89 f8                	mov    eax,edi
c0024bd9:	89 ca                	mov    edx,ecx
c0024bdb:	83 c4 2c             	add    esp,0x2c
c0024bde:	5b                   	pop    ebx
c0024bdf:	5e                   	pop    esi
c0024be0:	5f                   	pop    edi
c0024be1:	5d                   	pop    ebp
c0024be2:	c3                   	ret    

c0024be3 <__floatsidf>:
c0024be3:	55                   	push   ebp
c0024be4:	89 e5                	mov    ebp,esp
c0024be6:	56                   	push   esi
c0024be7:	53                   	push   ebx
c0024be8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024beb:	85 db                	test   ebx,ebx
c0024bed:	7e 15                	jle    c0024c04 <__floatsidf+0x21>
c0024bef:	0f bd cb             	bsr    ecx,ebx
c0024bf2:	83 f1 1f             	xor    ecx,0x1f
c0024bf5:	d3 e3                	shl    ebx,cl
c0024bf7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024bfd:	b8 1e 04 00 00       	mov    eax,0x41e
c0024c02:	eb 21                	jmp    c0024c25 <__floatsidf+0x42>
c0024c04:	b8 00 00 00 00       	mov    eax,0x0
c0024c09:	ba 00 00 00 00       	mov    edx,0x0
c0024c0e:	74 2a                	je     c0024c3a <__floatsidf+0x57>
c0024c10:	f7 db                	neg    ebx
c0024c12:	0f bd cb             	bsr    ecx,ebx
c0024c15:	83 f1 1f             	xor    ecx,0x1f
c0024c18:	d3 e3                	shl    ebx,cl
c0024c1a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c20:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024c25:	29 c8                	sub    eax,ecx
c0024c27:	c1 e0 14             	shl    eax,0x14
c0024c2a:	89 c1                	mov    ecx,eax
c0024c2c:	89 de                	mov    esi,ebx
c0024c2e:	c1 ee 0b             	shr    esi,0xb
c0024c31:	09 f1                	or     ecx,esi
c0024c33:	89 ca                	mov    edx,ecx
c0024c35:	c1 e3 15             	shl    ebx,0x15
c0024c38:	89 d8                	mov    eax,ebx
c0024c3a:	5b                   	pop    ebx
c0024c3b:	5e                   	pop    esi
c0024c3c:	5d                   	pop    ebp
c0024c3d:	c3                   	ret    

c0024c3e <__floatunsidf>:
c0024c3e:	55                   	push   ebp
c0024c3f:	89 e5                	mov    ebp,esp
c0024c41:	56                   	push   esi
c0024c42:	53                   	push   ebx
c0024c43:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024c46:	85 db                	test   ebx,ebx
c0024c48:	74 2a                	je     c0024c74 <__floatunsidf+0x36>
c0024c4a:	0f bd cb             	bsr    ecx,ebx
c0024c4d:	83 f1 1f             	xor    ecx,0x1f
c0024c50:	d3 e3                	shl    ebx,cl
c0024c52:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c58:	b8 1e 04 00 00       	mov    eax,0x41e
c0024c5d:	29 c8                	sub    eax,ecx
c0024c5f:	c1 e0 14             	shl    eax,0x14
c0024c62:	89 c1                	mov    ecx,eax
c0024c64:	89 de                	mov    esi,ebx
c0024c66:	c1 ee 0b             	shr    esi,0xb
c0024c69:	09 f1                	or     ecx,esi
c0024c6b:	89 ca                	mov    edx,ecx
c0024c6d:	c1 e3 15             	shl    ebx,0x15
c0024c70:	89 d8                	mov    eax,ebx
c0024c72:	eb 04                	jmp    c0024c78 <__floatunsidf+0x3a>
c0024c74:	31 c0                	xor    eax,eax
c0024c76:	31 d2                	xor    edx,edx
c0024c78:	5b                   	pop    ebx
c0024c79:	5e                   	pop    esi
c0024c7a:	5d                   	pop    ebp
c0024c7b:	c3                   	ret    

c0024c7c <__fixdfsi>:
c0024c7c:	55                   	push   ebp
c0024c7d:	89 e5                	mov    ebp,esp
c0024c7f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c82:	89 d1                	mov    ecx,edx
c0024c84:	c1 e1 0b             	shl    ecx,0xb
c0024c87:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c90:	c1 e8 15             	shr    eax,0x15
c0024c93:	09 c1                	or     ecx,eax
c0024c95:	c1 fa 14             	sar    edx,0x14
c0024c98:	78 1f                	js     c0024cb9 <__fixdfsi+0x3d>
c0024c9a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024ca0:	31 c0                	xor    eax,eax
c0024ca2:	83 fa 1e             	cmp    edx,0x1e
c0024ca5:	77 40                	ja     c0024ce7 <__fixdfsi+0x6b>
c0024ca7:	89 c8                	mov    eax,ecx
c0024ca9:	0d 00 00 00 80       	or     eax,0x80000000
c0024cae:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cb3:	29 d1                	sub    ecx,edx
c0024cb5:	d3 e8                	shr    eax,cl
c0024cb7:	eb 2e                	jmp    c0024ce7 <__fixdfsi+0x6b>
c0024cb9:	31 c0                	xor    eax,eax
c0024cbb:	81 c2 01 04 00 00    	add    edx,0x401
c0024cc1:	78 24                	js     c0024ce7 <__fixdfsi+0x6b>
c0024cc3:	83 fa 1e             	cmp    edx,0x1e
c0024cc6:	7e 09                	jle    c0024cd1 <__fixdfsi+0x55>
c0024cc8:	83 fa 1f             	cmp    edx,0x1f
c0024ccb:	75 18                	jne    c0024ce5 <__fixdfsi+0x69>
c0024ccd:	85 c9                	test   ecx,ecx
c0024ccf:	75 14                	jne    c0024ce5 <__fixdfsi+0x69>
c0024cd1:	89 c8                	mov    eax,ecx
c0024cd3:	0d 00 00 00 80       	or     eax,0x80000000
c0024cd8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cdd:	29 d1                	sub    ecx,edx
c0024cdf:	d3 e8                	shr    eax,cl
c0024ce1:	f7 d8                	neg    eax
c0024ce3:	eb 02                	jmp    c0024ce7 <__fixdfsi+0x6b>
c0024ce5:	31 c0                	xor    eax,eax
c0024ce7:	5d                   	pop    ebp
c0024ce8:	c3                   	ret    

c0024ce9 <__fixunsdfsi>:
c0024ce9:	55                   	push   ebp
c0024cea:	89 e5                	mov    ebp,esp
c0024cec:	53                   	push   ebx
c0024ced:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024cf0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024cf3:	89 d3                	mov    ebx,edx
c0024cf5:	c1 fb 14             	sar    ebx,0x14
c0024cf8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024cfe:	31 c0                	xor    eax,eax
c0024d00:	83 fb 1f             	cmp    ebx,0x1f
c0024d03:	77 1d                	ja     c0024d22 <__fixunsdfsi+0x39>
c0024d05:	89 d0                	mov    eax,edx
c0024d07:	c1 e0 0b             	shl    eax,0xb
c0024d0a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024d0f:	c1 e9 15             	shr    ecx,0x15
c0024d12:	09 c8                	or     eax,ecx
c0024d14:	0d 00 00 00 80       	or     eax,0x80000000
c0024d19:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024d1e:	29 d9                	sub    ecx,ebx
c0024d20:	d3 e8                	shr    eax,cl
c0024d22:	5b                   	pop    ebx
c0024d23:	5d                   	pop    ebp
c0024d24:	c3                   	ret    

c0024d25 <__cmpdf2>:
c0024d25:	55                   	push   ebp
c0024d26:	89 e5                	mov    ebp,esp
c0024d28:	57                   	push   edi
c0024d29:	56                   	push   esi
c0024d2a:	53                   	push   ebx
c0024d2b:	83 ec 0c             	sub    esp,0xc
c0024d2e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024d31:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024d34:	89 ca                	mov    edx,ecx
c0024d36:	c1 ea 14             	shr    edx,0x14
c0024d39:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024d3f:	89 cb                	mov    ebx,ecx
c0024d41:	c1 fb 1f             	sar    ebx,0x1f
c0024d44:	31 da                	xor    edx,ebx
c0024d46:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d49:	89 df                	mov    edi,ebx
c0024d4b:	c1 e7 0b             	shl    edi,0xb
c0024d4e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024d51:	c1 e1 0b             	shl    ecx,0xb
c0024d54:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d5a:	c1 eb 15             	shr    ebx,0x15
c0024d5d:	09 d9                	or     ecx,ebx
c0024d5f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024d62:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024d65:	89 ce                	mov    esi,ecx
c0024d67:	c1 ee 14             	shr    esi,0x14
c0024d6a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024d70:	89 cb                	mov    ebx,ecx
c0024d72:	c1 fb 1f             	sar    ebx,0x1f
c0024d75:	31 de                	xor    esi,ebx
c0024d77:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024d7a:	89 df                	mov    edi,ebx
c0024d7c:	c1 e7 0b             	shl    edi,0xb
c0024d7f:	c1 e1 0b             	shl    ecx,0xb
c0024d82:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d88:	c1 eb 15             	shr    ebx,0x15
c0024d8b:	09 d9                	or     ecx,ebx
c0024d8d:	89 d3                	mov    ebx,edx
c0024d8f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d95:	43                   	inc    ebx
c0024d96:	83 fb 01             	cmp    ebx,0x1
c0024d99:	77 08                	ja     c0024da3 <__cmpdf2+0x7e>
c0024d9b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024d9e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024da1:	75 68                	jne    c0024e0b <__cmpdf2+0xe6>
c0024da3:	89 f3                	mov    ebx,esi
c0024da5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024dab:	43                   	inc    ebx
c0024dac:	83 fb 01             	cmp    ebx,0x1
c0024daf:	77 06                	ja     c0024db7 <__cmpdf2+0x92>
c0024db1:	89 fb                	mov    ebx,edi
c0024db3:	09 cb                	or     ebx,ecx
c0024db5:	75 54                	jne    c0024e0b <__cmpdf2+0xe6>
c0024db7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024dba:	09 f8                	or     eax,edi
c0024dbc:	09 c8                	or     eax,ecx
c0024dbe:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024dc1:	75 12                	jne    c0024dd5 <__cmpdf2+0xb0>
c0024dc3:	8d 42 01             	lea    eax,[edx+0x1]
c0024dc6:	83 f8 01             	cmp    eax,0x1
c0024dc9:	77 0a                	ja     c0024dd5 <__cmpdf2+0xb0>
c0024dcb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024dce:	31 c0                	xor    eax,eax
c0024dd0:	83 fb 01             	cmp    ebx,0x1
c0024dd3:	76 36                	jbe    c0024e0b <__cmpdf2+0xe6>
c0024dd5:	b8 01 00 00 00       	mov    eax,0x1
c0024dda:	39 f2                	cmp    edx,esi
c0024ddc:	7f 2d                	jg     c0024e0b <__cmpdf2+0xe6>
c0024dde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024de3:	7c 26                	jl     c0024e0b <__cmpdf2+0xe6>
c0024de5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024de8:	77 07                	ja     c0024df1 <__cmpdf2+0xcc>
c0024dea:	72 16                	jb     c0024e02 <__cmpdf2+0xdd>
c0024dec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024def:	76 0a                	jbe    c0024dfb <__cmpdf2+0xd6>
c0024df1:	89 d0                	mov    eax,edx
c0024df3:	c1 f8 1f             	sar    eax,0x1f
c0024df6:	83 c8 01             	or     eax,0x1
c0024df9:	eb 10                	jmp    c0024e0b <__cmpdf2+0xe6>
c0024dfb:	b8 00 00 00 00       	mov    eax,0x0
c0024e00:	73 09                	jae    c0024e0b <__cmpdf2+0xe6>
c0024e02:	89 d0                	mov    eax,edx
c0024e04:	c1 f8 1f             	sar    eax,0x1f
c0024e07:	83 e0 02             	and    eax,0x2
c0024e0a:	48                   	dec    eax
c0024e0b:	83 c4 0c             	add    esp,0xc
c0024e0e:	5b                   	pop    ebx
c0024e0f:	5e                   	pop    esi
c0024e10:	5f                   	pop    edi
c0024e11:	5d                   	pop    ebp
c0024e12:	c3                   	ret    

c0024e13 <__eqdf2>:
c0024e13:	55                   	push   ebp
c0024e14:	89 e5                	mov    ebp,esp
c0024e16:	50                   	push   eax
c0024e17:	6a 01                	push   0x1
c0024e19:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024e1c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024e1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e25:	e8 fb fe ff ff       	call   c0024d25 <__cmpdf2>
c0024e2a:	83 c4 18             	add    esp,0x18
c0024e2d:	c9                   	leave  
c0024e2e:	c3                   	ret    

c0024e2f <__nedf2>:
c0024e2f:	eb e2                	jmp    c0024e13 <__eqdf2>

c0024e31 <__gtdf2>:
c0024e31:	55                   	push   ebp
c0024e32:	89 e5                	mov    ebp,esp
c0024e34:	50                   	push   eax
c0024e35:	6a ff                	push   0xffffffff
c0024e37:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024e3a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024e3d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e43:	e8 dd fe ff ff       	call   c0024d25 <__cmpdf2>
c0024e48:	83 c4 18             	add    esp,0x18
c0024e4b:	c9                   	leave  
c0024e4c:	c3                   	ret    

c0024e4d <__gedf2>:
c0024e4d:	eb e2                	jmp    c0024e31 <__gtdf2>

c0024e4f <__ltdf2>:
c0024e4f:	eb c2                	jmp    c0024e13 <__eqdf2>

c0024e51 <__ledf2>:
c0024e51:	eb c0                	jmp    c0024e13 <__eqdf2>

c0024e53 <__truncdfsf2>:
c0024e53:	55                   	push   ebp
c0024e54:	89 e5                	mov    ebp,esp
c0024e56:	57                   	push   edi
c0024e57:	56                   	push   esi
c0024e58:	53                   	push   ebx
c0024e59:	83 ec 0c             	sub    esp,0xc
c0024e5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024e5f:	89 d1                	mov    ecx,edx
c0024e61:	c1 f9 14             	sar    ecx,0x14
c0024e64:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e67:	89 df                	mov    edi,ebx
c0024e69:	c1 e7 0b             	shl    edi,0xb
c0024e6c:	89 d0                	mov    eax,edx
c0024e6e:	c1 e0 0b             	shl    eax,0xb
c0024e71:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024e76:	c1 eb 15             	shr    ebx,0x15
c0024e79:	09 d8                	or     eax,ebx
c0024e7b:	89 cb                	mov    ebx,ecx
c0024e7d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024e83:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024e89:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024e8f:	0f 86 9e 00 00 00    	jbe    c0024f33 <__truncdfsf2+0xe0>
c0024e95:	85 db                	test   ebx,ebx
c0024e97:	75 0a                	jne    c0024ea3 <__truncdfsf2+0x50>
c0024e99:	c1 fa 17             	sar    edx,0x17
c0024e9c:	30 d2                	xor    dl,dl
c0024e9e:	e9 84 00 00 00       	jmp    c0024f27 <__truncdfsf2+0xd4>
c0024ea3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024ea9:	83 fe 83             	cmp    esi,0xffffff83
c0024eac:	7d 4b                	jge    c0024ef9 <__truncdfsf2+0xa6>
c0024eae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024eb3:	29 f1                	sub    ecx,esi
c0024eb5:	83 f9 1f             	cmp    ecx,0x1f
c0024eb8:	7f 6b                	jg     c0024f25 <__truncdfsf2+0xd2>
c0024eba:	0d 00 00 00 80       	or     eax,0x80000000
c0024ebf:	89 c3                	mov    ebx,eax
c0024ec1:	d3 eb                	shr    ebx,cl
c0024ec3:	be 01 00 00 00       	mov    esi,0x1
c0024ec8:	d3 e6                	shl    esi,cl
c0024eca:	4e                   	dec    esi
c0024ecb:	21 f0                	and    eax,esi
c0024ecd:	09 f8                	or     eax,edi
c0024ecf:	0f 95 c0             	setne  al
c0024ed2:	0f b6 c0             	movzx  eax,al
c0024ed5:	09 c3                	or     ebx,eax
c0024ed7:	89 d9                	mov    ecx,ebx
c0024ed9:	c1 e9 08             	shr    ecx,0x8
c0024edc:	f6 c3 7f             	test   bl,0x7f
c0024edf:	0f 95 c0             	setne  al
c0024ee2:	09 c8                	or     eax,ecx
c0024ee4:	83 e0 01             	and    eax,0x1
c0024ee7:	c1 eb 07             	shr    ebx,0x7
c0024eea:	21 c3                	and    ebx,eax
c0024eec:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024ef2:	09 d1                	or     ecx,edx
c0024ef4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024ef7:	eb 76                	jmp    c0024f6f <__truncdfsf2+0x11c>
c0024ef9:	83 c6 80             	add    esi,0xffffff80
c0024efc:	7e 1d                	jle    c0024f1b <__truncdfsf2+0xc8>
c0024efe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024f04:	75 0b                	jne    c0024f11 <__truncdfsf2+0xbe>
c0024f06:	09 f8                	or     eax,edi
c0024f08:	74 09                	je     c0024f13 <__truncdfsf2+0xc0>
c0024f0a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024f0f:	eb 02                	jmp    c0024f13 <__truncdfsf2+0xc0>
c0024f11:	31 c0                	xor    eax,eax
c0024f13:	c1 fa 17             	sar    edx,0x17
c0024f16:	80 ca ff             	or     dl,0xff
c0024f19:	eb 0e                	jmp    c0024f29 <__truncdfsf2+0xd6>
c0024f1b:	c1 fa 1f             	sar    edx,0x1f
c0024f1e:	c1 e2 08             	shl    edx,0x8
c0024f21:	09 ca                	or     edx,ecx
c0024f23:	eb 04                	jmp    c0024f29 <__truncdfsf2+0xd6>
c0024f25:	31 d2                	xor    edx,edx
c0024f27:	31 c0                	xor    eax,eax
c0024f29:	c1 e2 17             	shl    edx,0x17
c0024f2c:	c1 e8 08             	shr    eax,0x8
c0024f2f:	09 d0                	or     eax,edx
c0024f31:	eb 3c                	jmp    c0024f6f <__truncdfsf2+0x11c>
c0024f33:	81 e9 80 03 00 00    	sub    ecx,0x380
c0024f39:	89 ca                	mov    edx,ecx
c0024f3b:	c1 fa 0b             	sar    edx,0xb
c0024f3e:	c1 e2 08             	shl    edx,0x8
c0024f41:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024f44:	31 db                	xor    ebx,ebx
c0024f46:	85 ff                	test   edi,edi
c0024f48:	0f 95 c3             	setne  bl
c0024f4b:	09 d8                	or     eax,ebx
c0024f4d:	89 c3                	mov    ebx,eax
c0024f4f:	c1 eb 08             	shr    ebx,0x8
c0024f52:	a8 7f                	test   al,0x7f
c0024f54:	0f 95 c2             	setne  dl
c0024f57:	89 d6                	mov    esi,edx
c0024f59:	09 de                	or     esi,ebx
c0024f5b:	83 e6 01             	and    esi,0x1
c0024f5e:	c1 e8 07             	shr    eax,0x7
c0024f61:	21 f0                	and    eax,esi
c0024f63:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024f66:	09 ca                	or     edx,ecx
c0024f68:	c1 e2 17             	shl    edx,0x17
c0024f6b:	09 da                	or     edx,ebx
c0024f6d:	01 d0                	add    eax,edx
c0024f6f:	83 c4 0c             	add    esp,0xc
c0024f72:	5b                   	pop    ebx
c0024f73:	5e                   	pop    esi
c0024f74:	5f                   	pop    edi
c0024f75:	5d                   	pop    ebp
c0024f76:	c3                   	ret    

c0024f77 <__extendsfdf2>:
c0024f77:	55                   	push   ebp
c0024f78:	89 e5                	mov    ebp,esp
c0024f7a:	57                   	push   edi
c0024f7b:	56                   	push   esi
c0024f7c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024f7f:	89 d1                	mov    ecx,edx
c0024f81:	c1 f9 17             	sar    ecx,0x17
c0024f84:	c1 e2 08             	shl    edx,0x8
c0024f87:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024f8d:	89 c8                	mov    eax,ecx
c0024f8f:	80 e4 f8             	and    ah,0xf8
c0024f92:	8d 71 01             	lea    esi,[ecx+0x1]
c0024f95:	81 e6 fe 00 00 00    	and    esi,0xfe
c0024f9b:	75 27                	jne    c0024fc4 <__extendsfdf2+0x4d>
c0024f9d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0024fa3:	75 18                	jne    c0024fbd <__extendsfdf2+0x46>
c0024fa5:	85 d2                	test   edx,edx
c0024fa7:	74 20                	je     c0024fc9 <__extendsfdf2+0x52>
c0024fa9:	41                   	inc    ecx
c0024faa:	01 d2                	add    edx,edx
c0024fac:	79 fb                	jns    c0024fa9 <__extendsfdf2+0x32>
c0024fae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024fb4:	29 c8                	sub    eax,ecx
c0024fb6:	05 81 03 00 00       	add    eax,0x381
c0024fbb:	eb 0c                	jmp    c0024fc9 <__extendsfdf2+0x52>
c0024fbd:	05 00 07 00 00       	add    eax,0x700
c0024fc2:	eb 05                	jmp    c0024fc9 <__extendsfdf2+0x52>
c0024fc4:	05 80 03 00 00       	add    eax,0x380
c0024fc9:	c1 e0 14             	shl    eax,0x14
c0024fcc:	89 c1                	mov    ecx,eax
c0024fce:	89 d0                	mov    eax,edx
c0024fd0:	c1 e8 0b             	shr    eax,0xb
c0024fd3:	09 c1                	or     ecx,eax
c0024fd5:	c1 e2 15             	shl    edx,0x15
c0024fd8:	89 d0                	mov    eax,edx
c0024fda:	89 ca                	mov    edx,ecx
c0024fdc:	5e                   	pop    esi
c0024fdd:	5f                   	pop    edi
c0024fde:	5d                   	pop    ebp
c0024fdf:	c3                   	ret    

c0024fe0 <fabs>:
c0024fe0:	83 ec 0c             	sub    esp,0xc
c0024fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fe7:	89 04 24             	mov    DWORD PTR [esp],eax
c0024fea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024ff3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024ff7:	dd 04 24             	fld    QWORD PTR [esp]
c0024ffa:	83 c4 0c             	add    esp,0xc
c0024ffd:	c3                   	ret    
c0024ffe:	66 90                	xchg   ax,ax

c0025000 <lrint>:
c0025000:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0025004:	83 ec 04             	sub    esp,0x4
c0025007:	db 1c 24             	fistp  DWORD PTR [esp]
c002500a:	58                   	pop    eax
c002500b:	c3                   	ret    

c002500c <lrintf>:
c002500c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0025010:	83 ec 04             	sub    esp,0x4
c0025013:	db 1c 24             	fistp  DWORD PTR [esp]
c0025016:	58                   	pop    eax
c0025017:	c3                   	ret    

Disassembly of section .init:

c0025018 <_init>:
c0025018:	55                   	push   ebp
c0025019:	89 e5                	mov    ebp,esp
c002501b:	e8 f8 b0 fd ff       	call   c0000118 <frame_dummy>
c0025020:	e8 63 e0 ff ff       	call   c0023088 <__do_global_ctors_aux>
c0025025:	5d                   	pop    ebp
c0025026:	c3                   	ret    

Disassembly of section .fini:

c0025027 <_fini>:
c0025027:	55                   	push   ebp
c0025028:	89 e5                	mov    ebp,esp
c002502a:	e8 79 b0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002502f:	5d                   	pop    ebp
c0025030:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025032 <Computer::~Computer()>:
c0025032:	83 ec 0c             	sub    esp,0xc
c0025035:	ba 10 6b 02 c0       	mov    edx,0xc0026b10
c002503a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002503e:	89 10                	mov    DWORD PTR [eax],edx
c0025040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025044:	83 ec 0c             	sub    esp,0xc
c0025047:	50                   	push   eax
c0025048:	e8 b7 e4 fe ff       	call   c0013504 <Device::~Device()>
c002504d:	83 c4 10             	add    esp,0x10
c0025050:	90                   	nop
c0025051:	83 c4 0c             	add    esp,0xc
c0025054:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025056 <Computer::~Computer()>:
c0025056:	83 ec 0c             	sub    esp,0xc
c0025059:	83 ec 0c             	sub    esp,0xc
c002505c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025060:	e8 cd ff ff ff       	call   c0025032 <Computer::~Computer()>
c0025065:	83 c4 10             	add    esp,0x10
c0025068:	83 ec 08             	sub    esp,0x8
c002506b:	68 ec 01 00 00       	push   0x1ec
c0025070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025074:	e8 fe d0 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025079:	83 c4 10             	add    esp,0x10
c002507c:	83 c4 0c             	add    esp,0xc
c002507f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025080 <idleCommon()>:
c0025080:	83 ec 0c             	sub    esp,0xc
c0025083:	e8 d0 77 ff ff       	call   c001c858 <lockScheduler()>
c0025088:	e8 ff 7a ff ff       	call   c001cb8c <schedule()>
c002508d:	83 c4 0c             	add    esp,0xc
c0025090:	e9 c5 77 ff ff       	jmp    c001c85a <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0025095 <CPU::readCR3()>:
c0025095:	83 ec 10             	sub    esp,0x10
c0025098:	0f 20 d8             	mov    eax,cr3
c002509b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002509f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00250a3:	83 c4 10             	add    esp,0x10
c00250a6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c00250a7 <CPU::writeCR3(unsigned long)>:
c00250a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00250ab:	0f 22 d8             	mov    cr3,eax
c00250ae:	90                   	nop
c00250af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00250b0 <LinkedList<UnixFile>::~LinkedList()>:
c00250b0:	90                   	nop
c00250b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00250b2 <LinkedList<UnixFile>::LinkedList()>:
c00250b2:	83 ec 0c             	sub    esp,0xc
c00250b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00250df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250f5:	83 ec 0c             	sub    esp,0xc
c00250f8:	68 86 6d 02 c0       	push   0xc0026d86
c00250fd:	e8 55 d1 fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0025102:	83 c4 10             	add    esp,0x10
c0025105:	90                   	nop
c0025106:	83 c4 0c             	add    esp,0xc
c0025109:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002510a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002510a:	83 ec 0c             	sub    esp,0xc
c002510d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025112:	75 10                	jne    c0025124 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0025114:	83 ec 0c             	sub    esp,0xc
c0025117:	68 a0 6d 02 c0       	push   0xc0026da0
c002511c:	e8 e3 47 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0025121:	83 c4 10             	add    esp,0x10
c0025124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025128:	8b 00                	mov    eax,DWORD PTR [eax]
c002512a:	85 c0                	test   eax,eax
c002512c:	74 34                	je     c0025162 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002512e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025132:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025135:	85 c0                	test   eax,eax
c0025137:	74 29                	je     c0025162 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002513d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025140:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025144:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002514b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002514f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025159:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025160:	eb 65                	jmp    c00251c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025166:	8b 00                	mov    eax,DWORD PTR [eax]
c0025168:	85 c0                	test   eax,eax
c002516a:	75 4b                	jne    c00251b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002516c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025173:	85 c0                	test   eax,eax
c0025175:	75 40                	jne    c00251b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002517f:	89 10                	mov    DWORD PTR [eax],edx
c0025181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025185:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025189:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002518c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025193:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002519a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251a1:	85 c0                	test   eax,eax
c00251a3:	74 22                	je     c00251c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00251a5:	83 ec 0c             	sub    esp,0xc
c00251a8:	68 c2 6d 02 c0       	push   0xc0026dc2
c00251ad:	e8 52 47 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c00251b2:	83 c4 10             	add    esp,0x10
c00251b5:	eb 10                	jmp    c00251c7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00251b7:	83 ec 0c             	sub    esp,0xc
c00251ba:	68 cc 6d 02 c0       	push   0xc0026dcc
c00251bf:	e8 40 47 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c00251c4:	83 c4 10             	add    esp,0x10
c00251c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ce:	8d 50 01             	lea    edx,[eax+0x1]
c00251d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00251d8:	90                   	nop
c00251d9:	83 c4 0c             	add    esp,0xc
c00251dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00251de <LinkedList<UnixFile>::getFirstElement()>:
c00251de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00251e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00251e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00251e6 <LinkedList<UnixFile>::removeFirst()>:
c00251e6:	83 ec 0c             	sub    esp,0xc
c00251e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00251ef:	85 c0                	test   eax,eax
c00251f1:	75 12                	jne    c0025205 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00251f3:	83 ec 0c             	sub    esp,0xc
c00251f6:	68 d8 6d 02 c0       	push   0xc0026dd8
c00251fb:	e8 04 47 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0025200:	83 c4 10             	add    esp,0x10
c0025203:	eb 7e                	jmp    c0025283 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0025205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025209:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002520c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002520f:	85 c0                	test   eax,eax
c0025211:	74 10                	je     c0025223 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025213:	83 ec 0c             	sub    esp,0xc
c0025216:	68 23 6e 02 c0       	push   0xc0026e23
c002521b:	e8 e4 46 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0025220:	83 c4 10             	add    esp,0x10
c0025223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025227:	8b 00                	mov    eax,DWORD PTR [eax]
c0025229:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002522c:	85 c0                	test   eax,eax
c002522e:	75 33                	jne    c0025263 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025234:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002523a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002523e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025249:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002524c:	83 f8 01             	cmp    eax,0x1
c002524f:	74 21                	je     c0025272 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025251:	83 ec 0c             	sub    esp,0xc
c0025254:	68 fc 6d 02 c0       	push   0xc0026dfc
c0025259:	e8 a6 46 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c002525e:	83 c4 10             	add    esp,0x10
c0025261:	eb 0f                	jmp    c0025272 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025267:	8b 00                	mov    eax,DWORD PTR [eax]
c0025269:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002526c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025270:	89 10                	mov    DWORD PTR [eax],edx
c0025272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025276:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025279:	8d 50 ff             	lea    edx,[eax-0x1]
c002527c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025280:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025283:	83 c4 0c             	add    esp,0xc
c0025286:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025288 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025288:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002528c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002528f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025290 <DriverlessDevice::~DriverlessDevice()>:
c0025290:	ba a4 74 02 c0       	mov    edx,0xc00274a4
c0025295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025299:	89 10                	mov    DWORD PTR [eax],edx
c002529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002529f:	50                   	push   eax
c00252a0:	e8 5f e2 fe ff       	call   c0013504 <Device::~Device()>
c00252a5:	83 c4 04             	add    esp,0x4
c00252a8:	90                   	nop
c00252a9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00252aa <DriverlessDevice::~DriverlessDevice()>:
c00252aa:	83 ec 0c             	sub    esp,0xc
c00252ad:	83 ec 0c             	sub    esp,0xc
c00252b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00252b4:	e8 d7 ff ff ff       	call   c0025290 <DriverlessDevice::~DriverlessDevice()>
c00252b9:	83 c4 10             	add    esp,0x10
c00252bc:	83 ec 08             	sub    esp,0x8
c00252bf:	68 58 01 00 00       	push   0x158
c00252c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00252c8:	e8 aa ce fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00252cd:	83 c4 10             	add    esp,0x10
c00252d0:	83 c4 0c             	add    esp,0xc
c00252d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00252d4 <LinkedList<Device>::addElement(Device*)>:
c00252d4:	83 ec 0c             	sub    esp,0xc
c00252d7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00252dc:	75 10                	jne    c00252ee <LinkedList<Device>::addElement(Device*)+0x1a>
c00252de:	83 ec 0c             	sub    esp,0xc
c00252e1:	68 a0 6d 02 c0       	push   0xc0026da0
c00252e6:	e8 19 46 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c00252eb:	83 c4 10             	add    esp,0x10
c00252ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00252f4:	85 c0                	test   eax,eax
c00252f6:	74 3a                	je     c0025332 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252ff:	85 c0                	test   eax,eax
c0025301:	74 2f                	je     c0025332 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025307:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002530a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002530e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025318:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002531c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002531f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025323:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025326:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025330:	eb 68                	jmp    c002539a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025336:	8b 00                	mov    eax,DWORD PTR [eax]
c0025338:	85 c0                	test   eax,eax
c002533a:	75 4e                	jne    c002538a <LinkedList<Device>::addElement(Device*)+0xb6>
c002533c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025343:	85 c0                	test   eax,eax
c0025345:	75 43                	jne    c002538a <LinkedList<Device>::addElement(Device*)+0xb6>
c0025347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002534b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002534f:	89 10                	mov    DWORD PTR [eax],edx
c0025351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025355:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025359:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002535c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025363:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002536d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025371:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025374:	85 c0                	test   eax,eax
c0025376:	74 22                	je     c002539a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025378:	83 ec 0c             	sub    esp,0xc
c002537b:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025380:	e8 7f 45 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0025385:	83 c4 10             	add    esp,0x10
c0025388:	eb 10                	jmp    c002539a <LinkedList<Device>::addElement(Device*)+0xc6>
c002538a:	83 ec 0c             	sub    esp,0xc
c002538d:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025392:	e8 6d 45 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0025397:	83 c4 10             	add    esp,0x10
c002539a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002539e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00253a1:	8d 50 01             	lea    edx,[eax+0x1]
c00253a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00253ab:	90                   	nop
c00253ac:	83 c4 0c             	add    esp,0xc
c00253af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00253b0 <LinkedList<Device>::LinkedList()>:
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00253bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00253dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253f3:	83 ec 0c             	sub    esp,0xc
c00253f6:	68 86 6d 02 c0       	push   0xc0026d86
c00253fb:	e8 57 ce fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c0025400:	83 c4 10             	add    esp,0x10
c0025403:	90                   	nop
c0025404:	83 c4 0c             	add    esp,0xc
c0025407:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c0025408 <CPU::readCR0()>:
c0025408:	83 ec 10             	sub    esp,0x10
c002540b:	0f 20 c0             	mov    eax,cr0
c002540e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025412:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025416:	83 c4 10             	add    esp,0x10
c0025419:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c002541a <CPU::writeCR0(unsigned long)>:
c002541a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002541e:	0f 22 c0             	mov    cr0,eax
c0025421:	90                   	nop
c0025422:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025423 <CPU::readDR0()>:
c0025423:	83 ec 10             	sub    esp,0x10
c0025426:	0f 21 c0             	mov    eax,db0
c0025429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002542d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025431:	83 c4 10             	add    esp,0x10
c0025434:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025435 <CPU::readDR1()>:
c0025435:	83 ec 10             	sub    esp,0x10
c0025438:	0f 21 c8             	mov    eax,db1
c002543b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002543f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025443:	83 c4 10             	add    esp,0x10
c0025446:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0025447 <CPU::readDR2()>:
c0025447:	83 ec 10             	sub    esp,0x10
c002544a:	0f 21 d0             	mov    eax,db2
c002544d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025451:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025455:	83 c4 10             	add    esp,0x10
c0025458:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0025459 <CPU::readDR3()>:
c0025459:	83 ec 10             	sub    esp,0x10
c002545c:	0f 21 d8             	mov    eax,db3
c002545f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025463:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025467:	83 c4 10             	add    esp,0x10
c002546a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c002546b <CPU::readDR6()>:
c002546b:	83 ec 10             	sub    esp,0x10
c002546e:	0f 21 f0             	mov    eax,db6
c0025471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025479:	83 c4 10             	add    esp,0x10
c002547c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c002547d <CPU::readDR7()>:
c002547d:	83 ec 10             	sub    esp,0x10
c0025480:	0f 21 f8             	mov    eax,db7
c0025483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002548b:	83 c4 10             	add    esp,0x10
c002548e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025494:	8b 00                	mov    eax,DWORD PTR [eax]
c0025496:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025498 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002549c:	8b 00                	mov    eax,DWORD PTR [eax]
c002549e:	85 c0                	test   eax,eax
c00254a0:	75 0e                	jne    c00254b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00254a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00254a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254a9:	85 c0                	test   eax,eax
c00254ab:	75 03                	jne    c00254b0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00254ad:	b0 01                	mov    al,0x1
c00254af:	c3                   	ret    
c00254b0:	b0 00                	mov    al,0x0
c00254b2:	90                   	nop
c00254b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00254b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00254b4:	83 ec 0c             	sub    esp,0xc
c00254b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00254bd:	85 c0                	test   eax,eax
c00254bf:	75 15                	jne    c00254d6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00254c1:	83 ec 0c             	sub    esp,0xc
c00254c4:	68 d8 6d 02 c0       	push   0xc0026dd8
c00254c9:	e8 36 44 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c00254ce:	83 c4 10             	add    esp,0x10
c00254d1:	e9 88 00 00 00       	jmp    c002555e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00254d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254e0:	85 c0                	test   eax,eax
c00254e2:	0f 95 c0             	setne  al
c00254e5:	84 c0                	test   al,al
c00254e7:	74 10                	je     c00254f9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00254e9:	83 ec 0c             	sub    esp,0xc
c00254ec:	68 23 6e 02 c0       	push   0xc0026e23
c00254f1:	e8 0e 44 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c00254f6:	83 c4 10             	add    esp,0x10
c00254f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00254ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025502:	85 c0                	test   eax,eax
c0025504:	0f 94 c0             	sete   al
c0025507:	84 c0                	test   al,al
c0025509:	74 33                	je     c002553e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c002550b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002550f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025519:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025524:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025527:	83 f8 01             	cmp    eax,0x1
c002552a:	74 21                	je     c002554d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002552c:	83 ec 0c             	sub    esp,0xc
c002552f:	68 fc 6d 02 c0       	push   0xc0026dfc
c0025534:	e8 cb 43 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0025539:	83 c4 10             	add    esp,0x10
c002553c:	eb 0f                	jmp    c002554d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002553e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025542:	8b 00                	mov    eax,DWORD PTR [eax]
c0025544:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002554b:	89 10                	mov    DWORD PTR [eax],edx
c002554d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025551:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025554:	8d 50 ff             	lea    edx,[eax-0x1]
c0025557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002555b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002555e:	83 c4 0c             	add    esp,0xc
c0025561:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025562 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025562:	83 ec 0c             	sub    esp,0xc
c0025565:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002556a:	75 10                	jne    c002557c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002556c:	83 ec 0c             	sub    esp,0xc
c002556f:	68 a0 6d 02 c0       	push   0xc0026da0
c0025574:	e8 8b 43 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c0025579:	83 c4 10             	add    esp,0x10
c002557c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025580:	8b 00                	mov    eax,DWORD PTR [eax]
c0025582:	85 c0                	test   eax,eax
c0025584:	74 34                	je     c00255ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002558d:	85 c0                	test   eax,eax
c002558f:	74 29                	je     c00255ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025595:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025598:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002559c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002559f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255b1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00255b8:	eb 65                	jmp    c002561f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255be:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c0:	85 c0                	test   eax,eax
c00255c2:	75 4b                	jne    c002560f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255cb:	85 c0                	test   eax,eax
c00255cd:	75 40                	jne    c002560f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255d7:	89 10                	mov    DWORD PTR [eax],edx
c00255d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255eb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00255f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00255f9:	85 c0                	test   eax,eax
c00255fb:	74 22                	je     c002561f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255fd:	83 ec 0c             	sub    esp,0xc
c0025600:	68 c2 6d 02 c0       	push   0xc0026dc2
c0025605:	e8 fa 42 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c002560a:	83 c4 10             	add    esp,0x10
c002560d:	eb 10                	jmp    c002561f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002560f:	83 ec 0c             	sub    esp,0xc
c0025612:	68 cc 6d 02 c0       	push   0xc0026dcc
c0025617:	e8 e8 42 ff ff       	call   c0019904 <Krnl::panic(char const*)>
c002561c:	83 c4 10             	add    esp,0x10
c002561f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025623:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025626:	8d 50 01             	lea    edx,[eax+0x1]
c0025629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025630:	90                   	nop
c0025631:	83 c4 0c             	add    esp,0xc
c0025634:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025636 <ACPI::~ACPI()>:
c0025636:	83 ec 0c             	sub    esp,0xc
c0025639:	ba 20 7c 02 c0       	mov    edx,0xc0027c20
c002563e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025642:	89 10                	mov    DWORD PTR [eax],edx
c0025644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025648:	83 ec 0c             	sub    esp,0xc
c002564b:	50                   	push   eax
c002564c:	e8 b3 de fe ff       	call   c0013504 <Device::~Device()>
c0025651:	83 c4 10             	add    esp,0x10
c0025654:	90                   	nop
c0025655:	83 c4 0c             	add    esp,0xc
c0025658:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002565a <ACPI::~ACPI()>:
c002565a:	83 ec 0c             	sub    esp,0xc
c002565d:	83 ec 0c             	sub    esp,0xc
c0025660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025664:	e8 cd ff ff ff       	call   c0025636 <ACPI::~ACPI()>
c0025669:	83 c4 10             	add    esp,0x10
c002566c:	83 ec 08             	sub    esp,0x8
c002566f:	68 68 22 00 00       	push   0x2268
c0025674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025678:	e8 fa ca fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c002567d:	83 c4 10             	add    esp,0x10
c0025680:	83 c4 0c             	add    esp,0xc
c0025683:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025684 <CPU::~CPU()>:
c0025684:	83 ec 0c             	sub    esp,0xc
c0025687:	ba 10 80 02 c0       	mov    edx,0xc0028010
c002568c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025690:	89 10                	mov    DWORD PTR [eax],edx
c0025692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025696:	83 ec 0c             	sub    esp,0xc
c0025699:	50                   	push   eax
c002569a:	e8 65 de fe ff       	call   c0013504 <Device::~Device()>
c002569f:	83 c4 10             	add    esp,0x10
c00256a2:	90                   	nop
c00256a3:	83 c4 0c             	add    esp,0xc
c00256a6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00256a8 <CPU::~CPU()>:
c00256a8:	83 ec 0c             	sub    esp,0xc
c00256ab:	83 ec 0c             	sub    esp,0xc
c00256ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256b2:	e8 cd ff ff ff       	call   c0025684 <CPU::~CPU()>
c00256b7:	83 c4 10             	add    esp,0x10
c00256ba:	83 ec 08             	sub    esp,0x8
c00256bd:	68 98 11 00 00       	push   0x1198
c00256c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256c6:	e8 ac ca fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00256cb:	83 c4 10             	add    esp,0x10
c00256ce:	83 c4 0c             	add    esp,0xc
c00256d1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00256d2 <CPU::readCR4()>:
c00256d2:	83 ec 10             	sub    esp,0x10
c00256d5:	0f 20 e0             	mov    eax,cr4
c00256d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256e0:	83 c4 10             	add    esp,0x10
c00256e3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c00256e4 <CPU::writeDR7(unsigned long)>:
c00256e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256e8:	0f 23 f8             	mov    db7,eax
c00256eb:	90                   	nop
c00256ec:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c00256ed <CPU::writeCR4(unsigned long)>:
c00256ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256f1:	0f 22 e0             	mov    cr4,eax
c00256f4:	90                   	nop
c00256f5:	c3                   	ret    

Disassembly of section .text._ZN9_FPUStateC2Ev:

c00256f6 <_FPUState::_FPUState()>:
c00256f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256fa:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025701:	90                   	nop
c0025702:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c0025703 <CPU::readCR2()>:
c0025703:	83 ec 10             	sub    esp,0x10
c0025706:	0f 20 d0             	mov    eax,cr2
c0025709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002570d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025711:	83 c4 10             	add    esp,0x10
c0025714:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025716 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025716:	90                   	nop
c0025717:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025718 <ThreadControlBlock::ThreadControlBlock()>:
c0025718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002571c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025727:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002572e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025732:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002573d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025748:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002574c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025750:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025754:	90                   	nop
c0025755:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025756 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025756:	83 ec 0c             	sub    esp,0xc
c0025759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002575d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025767:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002576e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025772:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002577d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025787:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025792:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025799:	83 ec 0c             	sub    esp,0xc
c002579c:	68 86 6d 02 c0       	push   0xc0026d86
c00257a1:	e8 b1 ca fe ff       	call   c0012257 <Dbg::kprintf(char const*, ...)>
c00257a6:	83 c4 10             	add    esp,0x10
c00257a9:	90                   	nop
c00257aa:	83 c4 0c             	add    esp,0xc
c00257ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00257ae <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00257ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00257b5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00257b6 <PCI::~PCI()>:
c00257b6:	83 ec 0c             	sub    esp,0xc
c00257b9:	ba 18 8d 02 c0       	mov    edx,0xc0028d18
c00257be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c2:	89 10                	mov    DWORD PTR [eax],edx
c00257c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c8:	83 ec 0c             	sub    esp,0xc
c00257cb:	50                   	push   eax
c00257cc:	e8 43 d7 fe ff       	call   c0012f14 <Bus::~Bus()>
c00257d1:	83 c4 10             	add    esp,0x10
c00257d4:	90                   	nop
c00257d5:	83 c4 0c             	add    esp,0xc
c00257d8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00257da <PCI::~PCI()>:
c00257da:	83 ec 0c             	sub    esp,0xc
c00257dd:	83 ec 0c             	sub    esp,0xc
c00257e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257e4:	e8 cd ff ff ff       	call   c00257b6 <PCI::~PCI()>
c00257e9:	83 c4 10             	add    esp,0x10
c00257ec:	83 ec 08             	sub    esp,0x8
c00257ef:	68 58 01 00 00       	push   0x158
c00257f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257f8:	e8 7a c9 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00257fd:	83 c4 10             	add    esp,0x10
c0025800:	83 c4 0c             	add    esp,0xc
c0025803:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025804 <IDE::~IDE()>:
c0025804:	83 ec 0c             	sub    esp,0xc
c0025807:	ba 7c 8f 02 c0       	mov    edx,0xc0028f7c
c002580c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025810:	89 10                	mov    DWORD PTR [eax],edx
c0025812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025816:	83 ec 0c             	sub    esp,0xc
c0025819:	50                   	push   eax
c002581a:	e8 fb e1 fe ff       	call   c0013a1a <HardDiskController::~HardDiskController()>
c002581f:	83 c4 10             	add    esp,0x10
c0025822:	90                   	nop
c0025823:	83 c4 0c             	add    esp,0xc
c0025826:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025828 <IDE::~IDE()>:
c0025828:	83 ec 0c             	sub    esp,0xc
c002582b:	83 ec 0c             	sub    esp,0xc
c002582e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025832:	e8 cd ff ff ff       	call   c0025804 <IDE::~IDE()>
c0025837:	83 c4 10             	add    esp,0x10
c002583a:	83 ec 08             	sub    esp,0x8
c002583d:	68 70 02 00 00       	push   0x270
c0025842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025846:	e8 2c c9 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c002584b:	83 c4 10             	add    esp,0x10
c002584e:	83 c4 0c             	add    esp,0xc
c0025851:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025852 <ATA::~ATA()>:
c0025852:	83 ec 0c             	sub    esp,0xc
c0025855:	ba cc 8f 02 c0       	mov    edx,0xc0028fcc
c002585a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002585e:	89 10                	mov    DWORD PTR [eax],edx
c0025860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025864:	83 ec 0c             	sub    esp,0xc
c0025867:	50                   	push   eax
c0025868:	e8 8b e2 fe ff       	call   c0013af8 <PhysicalDisk::~PhysicalDisk()>
c002586d:	83 c4 10             	add    esp,0x10
c0025870:	90                   	nop
c0025871:	83 c4 0c             	add    esp,0xc
c0025874:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025876 <ATA::~ATA()>:
c0025876:	83 ec 0c             	sub    esp,0xc
c0025879:	83 ec 0c             	sub    esp,0xc
c002587c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025880:	e8 cd ff ff ff       	call   c0025852 <ATA::~ATA()>
c0025885:	83 c4 10             	add    esp,0x10
c0025888:	83 ec 08             	sub    esp,0x8
c002588b:	68 7c 01 00 00       	push   0x17c
c0025890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025894:	e8 de c8 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025899:	83 c4 10             	add    esp,0x10
c002589c:	83 c4 0c             	add    esp,0xc
c002589f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00258a0 <ATAPI::~ATAPI()>:
c00258a0:	83 ec 0c             	sub    esp,0xc
c00258a3:	ba 38 90 02 c0       	mov    edx,0xc0029038
c00258a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ac:	89 10                	mov    DWORD PTR [eax],edx
c00258ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b2:	83 ec 0c             	sub    esp,0xc
c00258b5:	50                   	push   eax
c00258b6:	e8 3d e2 fe ff       	call   c0013af8 <PhysicalDisk::~PhysicalDisk()>
c00258bb:	83 c4 10             	add    esp,0x10
c00258be:	90                   	nop
c00258bf:	83 c4 0c             	add    esp,0xc
c00258c2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00258c4 <ATAPI::~ATAPI()>:
c00258c4:	83 ec 0c             	sub    esp,0xc
c00258c7:	83 ec 0c             	sub    esp,0xc
c00258ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ce:	e8 cd ff ff ff       	call   c00258a0 <ATAPI::~ATAPI()>
c00258d3:	83 c4 10             	add    esp,0x10
c00258d6:	83 ec 08             	sub    esp,0x8
c00258d9:	68 80 01 00 00       	push   0x180
c00258de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258e2:	e8 90 c8 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00258e7:	83 c4 10             	add    esp,0x10
c00258ea:	83 c4 0c             	add    esp,0xc
c00258ed:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00258ee <AVX::~AVX()>:
c00258ee:	83 ec 0c             	sub    esp,0xc
c00258f1:	ba 74 90 02 c0       	mov    edx,0xc0029074
c00258f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258fa:	89 10                	mov    DWORD PTR [eax],edx
c00258fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025900:	83 ec 0c             	sub    esp,0xc
c0025903:	50                   	push   eax
c0025904:	e8 73 e2 fe ff       	call   c0013b7c <FPU::~FPU()>
c0025909:	83 c4 10             	add    esp,0x10
c002590c:	90                   	nop
c002590d:	83 c4 0c             	add    esp,0xc
c0025910:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0025912 <AVX::~AVX()>:
c0025912:	83 ec 0c             	sub    esp,0xc
c0025915:	83 ec 0c             	sub    esp,0xc
c0025918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002591c:	e8 cd ff ff ff       	call   c00258ee <AVX::~AVX()>
c0025921:	83 c4 10             	add    esp,0x10
c0025924:	83 ec 08             	sub    esp,0x8
c0025927:	68 58 01 00 00       	push   0x158
c002592c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025930:	e8 42 c8 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025935:	83 c4 10             	add    esp,0x10
c0025938:	83 c4 0c             	add    esp,0xc
c002593b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002593c <MMX::~MMX()>:
c002593c:	83 ec 0c             	sub    esp,0xc
c002593f:	ba b4 90 02 c0       	mov    edx,0xc00290b4
c0025944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025948:	89 10                	mov    DWORD PTR [eax],edx
c002594a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002594e:	83 ec 0c             	sub    esp,0xc
c0025951:	50                   	push   eax
c0025952:	e8 25 e2 fe ff       	call   c0013b7c <FPU::~FPU()>
c0025957:	83 c4 10             	add    esp,0x10
c002595a:	90                   	nop
c002595b:	83 c4 0c             	add    esp,0xc
c002595e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025960 <MMX::~MMX()>:
c0025960:	83 ec 0c             	sub    esp,0xc
c0025963:	83 ec 0c             	sub    esp,0xc
c0025966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002596a:	e8 cd ff ff ff       	call   c002593c <MMX::~MMX()>
c002596f:	83 c4 10             	add    esp,0x10
c0025972:	83 ec 08             	sub    esp,0x8
c0025975:	68 58 01 00 00       	push   0x158
c002597a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002597e:	e8 f4 c7 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025983:	83 c4 10             	add    esp,0x10
c0025986:	83 c4 0c             	add    esp,0xc
c0025989:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002598a <SSE::~SSE()>:
c002598a:	83 ec 0c             	sub    esp,0xc
c002598d:	ba f4 90 02 c0       	mov    edx,0xc00290f4
c0025992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025996:	89 10                	mov    DWORD PTR [eax],edx
c0025998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002599c:	83 ec 0c             	sub    esp,0xc
c002599f:	50                   	push   eax
c00259a0:	e8 d7 e1 fe ff       	call   c0013b7c <FPU::~FPU()>
c00259a5:	83 c4 10             	add    esp,0x10
c00259a8:	90                   	nop
c00259a9:	83 c4 0c             	add    esp,0xc
c00259ac:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00259ae <SSE::~SSE()>:
c00259ae:	83 ec 0c             	sub    esp,0xc
c00259b1:	83 ec 0c             	sub    esp,0xc
c00259b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259b8:	e8 cd ff ff ff       	call   c002598a <SSE::~SSE()>
c00259bd:	83 c4 10             	add    esp,0x10
c00259c0:	83 ec 08             	sub    esp,0x8
c00259c3:	68 58 01 00 00       	push   0x158
c00259c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259cc:	e8 a6 c7 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c00259d1:	83 c4 10             	add    esp,0x10
c00259d4:	83 c4 0c             	add    esp,0xc
c00259d7:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00259d8 <x87::~x87()>:
c00259d8:	83 ec 0c             	sub    esp,0xc
c00259db:	ba 34 91 02 c0       	mov    edx,0xc0029134
c00259e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e4:	89 10                	mov    DWORD PTR [eax],edx
c00259e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ea:	83 ec 0c             	sub    esp,0xc
c00259ed:	50                   	push   eax
c00259ee:	e8 89 e1 fe ff       	call   c0013b7c <FPU::~FPU()>
c00259f3:	83 c4 10             	add    esp,0x10
c00259f6:	90                   	nop
c00259f7:	83 c4 0c             	add    esp,0xc
c00259fa:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00259fc <x87::~x87()>:
c00259fc:	83 ec 0c             	sub    esp,0xc
c00259ff:	83 ec 0c             	sub    esp,0xc
c0025a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a06:	e8 cd ff ff ff       	call   c00259d8 <x87::~x87()>
c0025a0b:	83 c4 10             	add    esp,0x10
c0025a0e:	83 ec 08             	sub    esp,0x8
c0025a11:	68 58 01 00 00       	push   0x158
c0025a16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a1a:	e8 58 c7 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025a1f:	83 c4 10             	add    esp,0x10
c0025a22:	83 c4 0c             	add    esp,0xc
c0025a25:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025a26 <IOAPIC::~IOAPIC()>:
c0025a26:	83 ec 0c             	sub    esp,0xc
c0025a29:	ba 8c 92 02 c0       	mov    edx,0xc002928c
c0025a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a32:	89 10                	mov    DWORD PTR [eax],edx
c0025a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a38:	83 ec 0c             	sub    esp,0xc
c0025a3b:	50                   	push   eax
c0025a3c:	e8 c3 da fe ff       	call   c0013504 <Device::~Device()>
c0025a41:	83 c4 10             	add    esp,0x10
c0025a44:	90                   	nop
c0025a45:	83 c4 0c             	add    esp,0xc
c0025a48:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025a4a <IOAPIC::~IOAPIC()>:
c0025a4a:	83 ec 0c             	sub    esp,0xc
c0025a4d:	83 ec 0c             	sub    esp,0xc
c0025a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a54:	e8 cd ff ff ff       	call   c0025a26 <IOAPIC::~IOAPIC()>
c0025a59:	83 c4 10             	add    esp,0x10
c0025a5c:	83 ec 08             	sub    esp,0x8
c0025a5f:	68 68 01 00 00       	push   0x168
c0025a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a68:	e8 0a c7 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025a6d:	83 c4 10             	add    esp,0x10
c0025a70:	83 c4 0c             	add    esp,0xc
c0025a73:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025a74 <APIC::~APIC()>:
c0025a74:	83 ec 0c             	sub    esp,0xc
c0025a77:	ba 44 92 02 c0       	mov    edx,0xc0029244
c0025a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a80:	89 10                	mov    DWORD PTR [eax],edx
c0025a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a86:	83 ec 0c             	sub    esp,0xc
c0025a89:	50                   	push   eax
c0025a8a:	e8 c1 e5 fe ff       	call   c0014050 <InterruptController::~InterruptController()>
c0025a8f:	83 c4 10             	add    esp,0x10
c0025a92:	90                   	nop
c0025a93:	83 c4 0c             	add    esp,0xc
c0025a96:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025a98 <APIC::~APIC()>:
c0025a98:	83 ec 0c             	sub    esp,0xc
c0025a9b:	83 ec 0c             	sub    esp,0xc
c0025a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025aa2:	e8 cd ff ff ff       	call   c0025a74 <APIC::~APIC()>
c0025aa7:	83 c4 10             	add    esp,0x10
c0025aaa:	83 ec 08             	sub    esp,0x8
c0025aad:	68 58 21 00 00       	push   0x2158
c0025ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ab6:	e8 bc c6 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025abb:	83 c4 10             	add    esp,0x10
c0025abe:	83 c4 0c             	add    esp,0xc
c0025ac1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025ac2 <PIC::~PIC()>:
c0025ac2:	83 ec 0c             	sub    esp,0xc
c0025ac5:	ba dc 92 02 c0       	mov    edx,0xc00292dc
c0025aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ace:	89 10                	mov    DWORD PTR [eax],edx
c0025ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad4:	83 ec 0c             	sub    esp,0xc
c0025ad7:	50                   	push   eax
c0025ad8:	e8 73 e5 fe ff       	call   c0014050 <InterruptController::~InterruptController()>
c0025add:	83 c4 10             	add    esp,0x10
c0025ae0:	90                   	nop
c0025ae1:	83 c4 0c             	add    esp,0xc
c0025ae4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025ae6 <PIC::~PIC()>:
c0025ae6:	83 ec 0c             	sub    esp,0xc
c0025ae9:	83 ec 0c             	sub    esp,0xc
c0025aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025af0:	e8 cd ff ff ff       	call   c0025ac2 <PIC::~PIC()>
c0025af5:	83 c4 10             	add    esp,0x10
c0025af8:	83 ec 08             	sub    esp,0x8
c0025afb:	68 58 21 00 00       	push   0x2158
c0025b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b04:	e8 6e c6 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025b09:	83 c4 10             	add    esp,0x10
c0025b0c:	83 c4 0c             	add    esp,0xc
c0025b0f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025b10 <APICTimer::~APICTimer()>:
c0025b10:	83 ec 0c             	sub    esp,0xc
c0025b13:	ba 30 93 02 c0       	mov    edx,0xc0029330
c0025b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b1c:	89 10                	mov    DWORD PTR [eax],edx
c0025b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b22:	83 ec 0c             	sub    esp,0xc
c0025b25:	50                   	push   eax
c0025b26:	e8 3d 02 ff ff       	call   c0015d68 <Timer::~Timer()>
c0025b2b:	83 c4 10             	add    esp,0x10
c0025b2e:	90                   	nop
c0025b2f:	83 c4 0c             	add    esp,0xc
c0025b32:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025b34 <APICTimer::~APICTimer()>:
c0025b34:	83 ec 0c             	sub    esp,0xc
c0025b37:	83 ec 0c             	sub    esp,0xc
c0025b3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b3e:	e8 cd ff ff ff       	call   c0025b10 <APICTimer::~APICTimer()>
c0025b43:	83 c4 10             	add    esp,0x10
c0025b46:	83 ec 08             	sub    esp,0x8
c0025b49:	68 60 01 00 00       	push   0x160
c0025b4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b52:	e8 20 c6 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025b57:	83 c4 10             	add    esp,0x10
c0025b5a:	83 c4 0c             	add    esp,0xc
c0025b5d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025b5e <PIT::~PIT()>:
c0025b5e:	83 ec 0c             	sub    esp,0xc
c0025b61:	ba 80 93 02 c0       	mov    edx,0xc0029380
c0025b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6a:	89 10                	mov    DWORD PTR [eax],edx
c0025b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b70:	83 ec 0c             	sub    esp,0xc
c0025b73:	50                   	push   eax
c0025b74:	e8 ef 01 ff ff       	call   c0015d68 <Timer::~Timer()>
c0025b79:	83 c4 10             	add    esp,0x10
c0025b7c:	90                   	nop
c0025b7d:	83 c4 0c             	add    esp,0xc
c0025b80:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025b82 <PIT::~PIT()>:
c0025b82:	83 ec 0c             	sub    esp,0xc
c0025b85:	83 ec 0c             	sub    esp,0xc
c0025b88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b8c:	e8 cd ff ff ff       	call   c0025b5e <PIT::~PIT()>
c0025b91:	83 c4 10             	add    esp,0x10
c0025b94:	83 ec 08             	sub    esp,0x8
c0025b97:	68 5c 01 00 00       	push   0x15c
c0025b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ba0:	e8 d2 c5 fe ff       	call   c0012177 <operator delete(void*, unsigned long)>
c0025ba5:	83 c4 10             	add    esp,0x10
c0025ba8:	83 c4 0c             	add    esp,0xc
c0025bab:	c3                   	ret    
